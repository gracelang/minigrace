#!/bin/bash

DISTRIB=tree
PLATFORM=$(uname)
PREFIX="/usr"
LDFLAGS=
UNICODE_LDFLAGS=
OTHER_MODULES=
INCLUDE_PATH='$(PREFIX)/include'
MODULE_PATH='$(PREFIX)/lib/grace/modules'
OBJECT_PATH='$(PREFIX)/lib/grace'

other_modules=(
    mirrors
)

ADVISE_END=
advise() {
    why=$1
    ADVISE_END=$why
    echo
    echo "Problem configuring $why."
    if [ -e "environ-$PLATFORM" ]
    then
        echo
        echo Running the environ-$PLATFORM script may help to diagnose or
        echo solve this problem.
        echo
        if ! [ "$IN_ENVIRON_SCRIPT" ]
        then
            echo Re-running configure inside environ-$PLATFORM.
            echo
            if ./environ-$PLATFORM ./configure
            then
                echo
                echo As configure succeeded, launching a suitable environment
                echo in which to run other programs. To obtain this environment
                echo in future, run ./environ-$PLATFORM.
                echo
                exec ./environ-$PLATFORM
            fi
            exit $?
        fi
    fi
}
fail() {
    advise "$@"
    echo Failed.
    exit 1
}

while [ $# -gt 0 ]
do
    if [ "$1" = "--prefix" ]
    then
        PREFIX=`readlink -f $2`
        shift
    elif [ "$1" = "--static" ]
    then
        STATIC=y
    elif [ "$1" = "--includedir" ]
    then
        INCLUDE_PATH=`readlink -f $2` #convert the potentially relative path to absolute before storing it
        shift
    elif [ "$1" = "--libdir" ]
    then
        MODULE_PATH=`readlink -f $2`/grace/modules
        OBJECT_PATH=`readlink -f $2`/grace
        shift
    elif [ "$1" = "--objectpath" ]
    then
        OBJECT_PATH=`readlink -f $2`
        shift
    elif [ "$1" = "--help" ]
    then
        echo "Available flags:"
        echo " --prefix <path>"
        echo " --static {tarball only}"
        echo " --includedir <path>"
        echo " --libdir <path>"
        echo " --objectpath <path>"
        exit 0
    else
        echo "Unknown argument '$1'."
        exit 1
    fi
    shift
done

if [ "$INCLUDE_PATH" = "" ]
then
    INCLUDE_PATH="$PREFIX/include"  #These are the defaults, relative to PREFIX
fi

if [ "$MODULE_PATH" = "" ]
then
    MODULE_PATH="$PREFIX/lib/grace/modules"
fi

if [ "$OBJECT_PATH" = "" ] 
then
    OBJECT_PATH=`dirname $MODULE_PATH`
fi

checkcurl() {
    echo -n "Checking for libcurl... "
    cat <<EOT > configure-$$-tmp.c
#include <curl/curl.h>

int main(int argc, char **argv) {
    CURL *handle = curl_easy_init();
    return 0;
}
EOT
    if gcc -o configure-$$-tmp configure-$$-tmp.c -lcurl
    then
        other_modules=(${other_modules:+"${other_modules[@]}"} curl)
        echo yes
    else
        echo no
    fi
    rm -f configure-$$-tmp*
}

UNICODE_MODULE=unicode.gso
if grep -qi CYGWIN <<<"$PLATFORM"
then
    STATIC=y
fi

if [ "$STATIC" ]
then
    UNICODE_MODULE=unicode.gcn
    STATIC_MODULES=unicode.gcn
    for mod in ${other_modules[@]}
    do
        OTHER_MODULES=(${OTHER_MODULES:+"${OTHER_MODULES[@]}"} $mod.gcn)
    done
    if [ -e minigrace.c ]
    then
        echo "Patching minigrace.c for static build..."
        sed -i "" 's/dlmodule("unicode")/module_unicode_init()/' minigrace.c
    fi
else
    checkcurl
    for mod in ${other_modules[@]}
    do
        OTHER_MODULES=(${OTHER_MODULES:+"${OTHER_MODULES[@]}"} $mod.gso)
    done
fi

echo -n "Locating linker... "
LD_PATH=$(which ld 2>/dev/null)
if [ "$LD_PATH" ]
then
    echo $LD_PATH
else
    echo "none."
    fail "linker"
fi

echo -n "Checking linker... "
case "$(ld -v 2>&1)" in
    "GNU ld"*)
    GNU_LD=1
    echo GNU LD.
    LDFLAGS="-Wl,--export-dynamic"
    ;;
    *PROJECT:ld*)
    LLVM_LD=1
    echo LLVM LD.
    UNICODE_LDFLAGS="-Wl,-undefined -Wl,dynamic_lookup"
    ;;
    *llvm*)
    LLVM_LD=1
    echo LLVM LD.
    UNICODE_LDFLAGS="-Wl,-undefined -Wl,dynamic_lookup"
    ;;
    *)
    echo unknown.
    ;;
esac

echo -n "Checking for -ldl... "
if ld -o /dev/null -ldl >/dev/null 2>&1
then
    echo yes.
    LDFLAGS="$LDFLAGS -ldl"
else
    echo no.
fi

echo -n "Locating GNU make... "
GMAKE_PATH=$(which gmake 2>/dev/null)
if [ "$GMAKE_PATH" ]
then
    echo $GMAKE_PATH
else
    GMAKE_PATH=$(which make 2>/dev/null)
    if [ "$GMAKE_PATH" ]
    then
        echo $GMAKE_PATH
    else
        echo "none."
        advise "GNU make"
    fi
fi

MK=make
if gmake -v 2>&1 | grep -q GNU
then
    MK=gmake
elif make -v 2>&1 | grep -q GNU
then
    MK=make
else
    echo "This software requires GNU make to build."
    echo "Substitute the path to your GNU make below."
fi

echo -n "Locating gcc... "
GCC_PATH=$(which gcc 2>/dev/null)
if [ "$GCC_PATH" ]
then
    echo $GCC_PATH
else
    echo "none."
    fail "gcc"
fi

echo -n "Checking GCC search paths... "
cat <<EOT >> configure-$$-tmp.c
#include <setjmp.h>
int main() {
    return 0;
}
EOT
if ! gcc -o configure-$$-tmp configure-$$-tmp.c
then
    fail "gcc"
else
    echo "OK."
fi
rm -f configure-$$-tmp*

if [ "$DISTRIB" = "tarball" ]
then
    echo "Run '$MK' to build, and '$MK selfhost' to have it compile itself."
else
    echo "Run '$MK' to build."
fi

STUBS=$(cd stubs; ls *.grace | tr \\n ' ')
LIBRARY_MODULES=$(cd modules; ls *.grace | grep -v Test | tr \\n ' ')

cat <<EOT > Makefile.conf
PREFIX ?= $PREFIX
LDFLAGS = $LDFLAGS -lm
UNICODE_LDFLAGS = $UNICODE_LDFLAGS
UNICODE_MODULE = $UNICODE_MODULE
STATIC_MODULES = $STATIC_MODULES
OTHER_MODULES = ${OTHER_MODULES[@]}
STUBS = $STUBS
LIBRARY_MODULES = $LIBRARY_MODULES
INCLUDE_PATH = $INCLUDE_PATH
MODULE_PATH = $MODULE_PATH
OBJECT_PATH = $OBJECT_PATH
EOT


if [ "$ADVISE_END" ]
then
    echo configure encountered a non-fatal configuration problem.
    advise "$ADVISE_END"
    echo
    echo This issue did not cause configure to fail, but you may wish to
    echo investigate it.
fi
