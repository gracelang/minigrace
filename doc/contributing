If you want to make changes to Minigrace and have them incorporated
upstream, you should read this document in full.

Making changes
--------------
Minigrace uses the Git version control system (<http://git-scm.com>). To
have your changes incorporated upstream you should work against the
latest master branch of <https://github.com/gracelang/minigrace.git>.

To set up your build environment, you should fork the gracelang/minigrace
repository, and then clone it onto your development machine in a convenient
location.

To build the compiler including your changes, follow the instructions in
<doc/build>. (Sort version: type `make test` or `make alltest`.)
Either of these will rebuild the compiler with itself multiple times to
ensure that it is functional.

If you are using the JavaScript backend in a web browser, you will probably find that
you need to perform a hard reload (commonly shift-reload) in your
browser to cause it to pick up the new versions of files. Editing any .grace
or .in.html always requires rebuilding. To run the compiler in your web browser,
the Grace environment _must_ be accessed over HTTP; browsers will not
permit loading from file://.

Configuring Git
---------------
Git should be configured with your name and email address. Use

    git config --global user.name "Your Name"
    git config --global user.email "you@example.com"

to set these before making any commits.

Additional documentation for Git can be found on the Git website:
<http://git-scm.com/documentation>. <https://help.github.com/> also
includes some helpful "getting started" documentation.

Preparing a branch for integration
----------------------------------
Commits should be logical and self-contained. The subject (first line)
of the commit message should be no longer than 50 characters. Further
explanation should follow a blank line and be wrapped at no more than 72
characters. The *subject* should be an _imperative_ statement summarising
the content and purpose of the commit, for example "Fixes issue #69", or
"Checks constraints on type arguments".  Do not put punctuation after
the subject.  More information can be added after a blank line.

Unrelated changes should be in separate commits.

When you have a completed, discrete, change to the compiler that you
want to integrate in your own branch, ensure that this branch is
fast-forward from the upstream master (that is, the tip of upstream
master is a direct ancestor of the tip of the branch to be merged). You
may find the rebase command to be useful here: see `git help rebase`. Do
_not_ include merge commits in this branch.

When you have a complete branch ready for integration please ensure that
the compiler builds from the beginning and the test suite passes. If
your changes are to the JavaScript backend or runtime library, please
ensure that the tests succeed in the web interface as well.

Submitting changes
------------------
To submit changes for inclusion, publish the branch in your own repository
on github, and make a pull request to gracelang/minigrace for
the branch you want to merge, stating what it is you want to integrate.

Revising changes
----------------
If your commits do not meet these requirements or there are design
issues, merge conflicts, or bugs found during the integration process
you may be asked to correct them and resubmit. In this case, `git rebase
--interactive` is likely to be a useful tool. See `git help rebase` for
details on how to use this tool. After making the requested changes you
can follow the above steps again to publish the new branch.
