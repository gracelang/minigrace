# Modules

Module files will be found in several locations. Grace source files of
modules in these locations will be automatically compiled if the module
is imported.
The searched locations are:

 * The current directory
 * Next to the compiler executable
 * The directories on the path in the environment variable `GRACE_MODULE_PATH`.

Both Grace source code and dynamic modules (like the built-in module "unicode")
are sought in these locations.

The Minigrace distribution includes some additional modules that may be
useful in user code. They are briefly described here.

## WARNING
The documentation here is probably out of date.  To see the interface currently
provided by these modules, look at the corresponding interface definition in
_modules/moduleName.grace_

mirror
------
The mirror module supports reflection on Grace objects. The module defines types
`Mirror` and `MethodMirror`, and classes

    reflect(o : Object)

which returns a `Mirror` on the object `o`, and

    methodMirror(theSubject, aMethodName)

which answers a `MethodMirror` on theSubject's method with name `aMethodName`.
For flexibility, we allow aMethodName to be canonical or numeric.


unicode
-------
The unicode module supports access to the Unicode Character Database.
The module may be built either dynamically or statically, but is dynamic
on platforms that support it.

The module contains these methods:

    category(char : String) -> String
    bidirectional(char : String) -> String
    combining(char : String) -> Number
    mirrored(char : String) -> Boolean
    name(char : String) -> String
    inCategory(char : String, category : String) -> Boolean
    isSeparator(char : String) -> Boolean
    isControl(char : String) -> Boolean
    isLetter(char : String) -> Boolean
    isNumber(char : String) -> Boolean
    isSymbolMathematical(char : String) -> Boolean
    create(codepoint : Number) -> String

These all return or test the corresponding Unicode property, or in the
case of create return a String consisting of the character with the
given codepoint.

This module is available with the JavaScript compiler, but some of the methods are
not implemented.

curl
----
The curl module is a thin wrapper around some of the libcurl API, for
acccessing resources by URL. The module is compiled by default on
systems where libcurl is detected during configure. It is available only as a dynamic module.

The module supports one method:
  easy -> CurlEasy
This method wraps curl_easy_init, returning a CurlEasy object
representing a CURL* handle.

CurlEasy objects support these methods:
  onReceive(blk : Block) -> Done
    Set the block to be executed when data is received in response
    to a request. The block is passed the received data as an Octets
    object. Wraps CURLOPT_WRITEFUNCTION.
  url:=(url : String) -> Done
    Set the URL to be requested. Wraps CURLOPT_URL.
  perform -> Done
    Make the request. Wraps curl_easy_perform.
  onHeader(blk : Block) -> Done
    Set the block to be executed when a header is received in response
    to a request. The block is passed the received header as an Octets
    object. Wraps CURLOPT_HEADERFUNCTION.
  escape(s : String | Octets) -> String
    URL-encodes s. Wraps curl_easy_escape.
  unescape(s : String | Octets) -> Octets
    URL-decodes s. Wraps curl_easy_unescape.
  responseCode -> Number
    Returns the result code of the most recent request performed.
    Wraps CURLINFO_RESPONSE_CODE.
  effectiveUrl -> String
    Returns the effective URL, after any redirects, of the most
    recent request performed. Wraps CURLINFO_EFFECTIVE_URL.
  includeResponseHeader:=(b : Boolean) -> Done
    Sets whether to include response headers in the returned data.
    Wraps CURLOPT_HEADER.
  followLocation:=(b : Boolean) -> Done
    Sets whether to follow any Location: headers that appear in.
    Wraps CURLOPT_FOLLOWLOCATION.

A sample use might be:
  import "io" as io
  import "curl" as curl
  def req = curl.easy
  req.url := "http://example.com/"
  req.onReceive {d->
    io.output.write(d.decode("utf-8"))
  }
  req.perform

This module was available only in the C compilre, on architectures
that support dynamic modules.

math
------
The math module has been deleted.  Trig functions are now available directly on Numbers.

