Module files will be found in several locations. Grace source files of
modules in these locations will be automatically compiled if the module
is imported. The searched locations are:
  * The current directory
  * Next to the compiler executable
  * The module path set at ./configure time. By default this is
    $PREFIX/lib/grace/modules, or /usr/lib/grace/modules if no
    installation prefix was given.
  * ~/.local/lib/grace/modules
  * ../lib/minigrace/modules relative to the compiler executable.
Both Grace source code and dynamic modules (like the built-in "unicode")
are found in these locations.

The Minigrace distribution includes some additional modules that may be
useful in user code. They are briefly described here.

stringMap
---------
This is a Grace module that is available on all targets and
architectures, but must be found on GRACE_MODULE_PATH compile
time for the native compiler.  It implements a simple distionary where
the keys are strings.  It exists for two reasons: it has an interface
that is largely backward-compatable with the now-defunct mgcollections,
and it has an accelerated implementation in JavaScript.

mirrors
-------
The mirrors module supports reflection on Grace objects. A native module
compiled from mirrors.c, this module will usually be dynamically loaded
as mirrors.gso. The module supports one method: reflect(o : Object)
returns a Mirror for the provided object.

Mirrors support two methods: methods returns a list of MirrorMethods
representing the methods on the object. getMethod returns a single
MirrorMethod with the name given as argument.

MirrorMethods support four methods: name returns the name of the method,
partcount the number of parts (words) in the name, and paramcounts a
list of parameter counts in each part. The request method takes a list
of lists as argument, where the elements of the top-level list are lists
of the arguments to provide each part of the name.

A sample use might be:
  import "mirrors" as m
  m.reflect(1).getMethod("+").request([[2]]) == 3

This module is available with both the native and JavaScript compiler.

unicode
-------
The unicode module supports accessing the Unicode Character Database.
The module may be built either dynamically or statically, but is dynamic
on platforms that support it.

The module contains these methods:
  category(char : String) -> String
  bidirectional(char : String) -> String
  combining(char : String) -> Number
  mirrored(char : String) -> Boolean
  name(char : String) -> String
  inCategory(char : String, category : String) -> Boolean
  isSeparator(char : String) -> Boolean
  isControl(char : String) -> Boolean
  isLetter(char : String) -> Boolean
  isNumber(char : String) -> Boolean
  isSymbolMathematical(char : String) -> Boolean
  create(codepoint : Number) -> String
These all return or test the corresponding Unicode property, or in the
case of create return a String consisting of the character with the
given codepoint.

This module is available with both the native and JavaScript compiler.

curl
----
The curl module is a thin wrapper around some of the libcurl API, for
acccessing resources by URL. The module is compiled by default on
systems where libcurl is detected during configure. It is only available
as a dynamic module.

The module supports one method:
  easy -> CurlEasy
This method wraps curl_easy_init, returning a CurlEasy object
representing a CURL* handle.

CurlEasy objects support these methods:
  onReceive(blk : Block) -> Done
    Set the block to be executed when data is received in response
    to a request. The block is passed the received data as an Octets
    object. Wraps CURLOPT_WRITEFUNCTION.
  url:=(url : String) -> Done
    Set the URL to be requested. Wraps CURLOPT_URL.
  perform -> Done
    Make the request. Wraps curl_easy_perform.
  onHeader(blk : Block) -> Done
    Set the block to be executed when a header is received in response
    to a request. The block is passed the received header as an Octets
    object. Wraps CURLOPT_HEADERFUNCTION.
  escape(s : String | Octets) -> String
    URL-encodes s. Wraps curl_easy_escape.
  unescape(s : String | Octets) -> Octets
    URL-decodes s. Wraps curl_easy_unescape.
  responseCode -> Number
    Returns the result code of the most recent request performed.
    Wraps CURLINFO_RESPONSE_CODE.
  effectiveUrl -> String
    Returns the effective URL, after any redirects, of the most
    recent request performed. Wraps CURLINFO_EFFECTIVE_URL.
  includeResponseHeader:=(b : Boolean) -> Done
    Sets whether to include response headers in the returned data.
    Wraps CURLOPT_HEADER.
  followLocation:=(b : Boolean) -> Done
    Sets whether to follow any Location: headers that appear in.
    Wraps CURLOPT_FOLLOWLOCATION.

A sample use might be:
  import "io" as io
  import "curl" as curl
  def req = curl.easy
  req.url := "http://example.com/"
  req.onReceive {d->
    io.output.write(d.decode("utf-8"))
  }
  req.perform

This module is only available in the native compiler, on architectures
that support dynamic modules.

math
------
The math module provides several methods:
  sin -> Number
    Returns the sine of the input number
  cos -> Number
    Returns the cosine of the input number
  tan -> Number
    Returns the tangent of the input number
  asin -> Number
    Returns the arcsin of the input number
  acos -> Number
    Returns the arccos of the input number
  atan -> Number
    Returns the arctangent of the input number
  random -> Number
    Returns a random number in the interval [0, 1].

This module is available with both the native and JavaScript compiler.
The precision and distribution is platform-dependent.
