"use strict";
var___95__prelude = do_import("StandardPrelude", gracecode_StandardPrelude);
function gracecode_ast() {
  setModuleName("ast");
  this.definitionModule = "ast";
  this.definitionLine = 0;
  var var_prelude = var___95__prelude;
  this.outer = var_prelude;
  var reader_ast_outer0 = function() {
    return this.outer;
  };
  this.methods["outer"] = reader_ast_outer0;
  setLineNumber(2);    // compilenode import
  // Import of util as util
  if (typeof gracecode_util == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module util'));
  var var_util = do_import("util", gracecode_util);
  var func1 = function(argcv) {    // method util
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for util"));
    setModuleName("ast");
    // util is a simple accessor - elide try ... catch
    return var_util;
  };
  func1.paramCounts = [0];
  this.methods["util"] = func1;
  func1.definitionLine = 2;
  func1.definitionModule = "ast";
  func1.debug = "import";
  func1.confidential = true;
  setModuleName("ast");
  setLineNumber(3);    // compilenode import
  // Import of identifierKinds as k
  if (typeof gracecode_identifierKinds == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module identifierKinds'));
  var var_k = do_import("identifierKinds", gracecode_identifierKinds);
  var func2 = function(argcv) {    // method k
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for k"));
    setModuleName("ast");
    // k is a simple accessor - elide try ... catch
    return var_k;
  };
  func2.paramCounts = [0];
  this.methods["k"] = func2;
  func2.definitionLine = 3;
  func2.definitionModule = "ast";
  func2.debug = "import";
  func2.confidential = true;
  setModuleName("ast");
  setLineNumber(18);    // compilenode method
  var func3 = function(argcv) {    // method listMap(2)ancestors(1)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_l = arguments[curarg];
    curarg++;
    var var_b = arguments[curarg];
    curarg++;
    if (argcv[0] !== 2)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for listMap (arg list 1) of listMap(2)ancestors(1)"));
    var var_as = arguments[curarg];
    curarg++;
    if (argcv[1] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of listMap(2)ancestors(1)"));
    setModuleName("ast");
    setLineNumber(19);    // compilenode array
    var array4 = new PrimitiveGraceList([]);
    var var_newList = array4;
    setLineNumber(20);    // compilenode block
    var block5 = new GraceBlock(this, 20, 1);
    setLineNumber(1);    // compilenode identifier
    block5.real = function(var_nd) {
      setLineNumber(20);    // compilenode identifier
      var call6 = callmethodChecked(var_nd, "map()ancestors", [1, 1], var_b, var_as);
      var call7 = callmethodChecked(var_newList, "addLast", [1], call6);
      return call7;
    };
    var call8 = callmethodChecked(var_l, "do", [1], block5);
    setLineNumber(21);    // compilenode identifier
    return var_newList;
  };
  func3.confidential = true;
  func3.paramCounts = [2, 1];
  this.methods["listMap()ancestors"] = func3;
  func3.definitionLine = 18;
  func3.definitionModule = "ast";
  setLineNumber(23);    // compilenode method
  var func9 = function(argcv) {    // method maybeMap(2)ancestors(1)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_n = arguments[curarg];
    curarg++;
    var var_b = arguments[curarg];
    curarg++;
    if (argcv[0] !== 2)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for maybeMap (arg list 1) of maybeMap(2)ancestors(1)"));
    var var_as = arguments[curarg];
    curarg++;
    if (argcv[1] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of maybeMap(2)ancestors(1)"));
    setModuleName("ast");
    var if10 = GraceDone;
    setLineNumber(24);    // compilenode identifier
    var opresult13 = callmethodChecked(GraceFalse, "\u2260", [1], var_n);
    if (Grace_isTrue(opresult13)) {
      setLineNumber(25);    // compilenode identifier
      var call14 = callmethodChecked(var_n, "map()ancestors", [1, 1], var_b, var_as);
      if10 = call14;
    } else {
      setLineNumber(27);    // compilenode identifier
      if10 = var_n;
    }
    return if10;
  };
  func9.confidential = true;
  func9.paramCounts = [2, 1];
  this.methods["maybeMap()ancestors"] = func9;
  func9.definitionLine = 23;
  func9.definitionModule = "ast";
  setLineNumber(30);    // compilenode method
  var func15 = function(argcv) {    // method maybeListMap(2)ancestors(1)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_n = arguments[curarg];
    curarg++;
    var var_b = arguments[curarg];
    curarg++;
    if (argcv[0] !== 2)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for maybeListMap (arg list 1) of maybeListMap(2)ancestors(1)"));
    var var_as = arguments[curarg];
    curarg++;
    if (argcv[1] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of maybeListMap(2)ancestors(1)"));
    setModuleName("ast");
    var if16 = GraceDone;
    setLineNumber(31);    // compilenode identifier
    var opresult19 = callmethodChecked(GraceFalse, "\u2260", [1], var_n);
    if (Grace_isTrue(opresult19)) {
      setLineNumber(32);    // compilenode identifier
      onSelf = true;
      var call20 = callmethodChecked(this, "listMap()ancestors", [2, 1], var_n, var_b, var_as);
      if16 = call20;
    } else {
      setLineNumber(34);    // compilenode identifier
      if16 = var_n;
    }
    return if16;
  };
  func15.confidential = true;
  func15.paramCounts = [2, 1];
  this.methods["maybeListMap()ancestors"] = func15;
  func15.definitionLine = 30;
  func15.definitionModule = "ast";
  setLineNumber(86);    // compilenode method
  var func21 = function(argcv) {    // method baseNode
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for baseNode"));
    setModuleName("ast");
    var obj22 = Grace_allocObject(GraceObject, "ast.baseNode");
    obj22.definitionModule = "ast";
    obj22.definitionLine = 86;
    obj22.outer = this;
    var reader_ast_outer23 = function() {
      return this.outer;
    };
    obj22.methods["outer"] = reader_ast_outer23;
    var obj_init_22 = function() {
      var origSuperDepth = superDepth;
      superDepth = obj22;
      var func24 = function(argcv) {    // method kind
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for kind"));
        setModuleName("ast");
        setLineNumber(94);    // compilenode call
        var call25 = callmethodChecked(var_prelude, "abstract", [0]);
        return call25;
      };
      func24.paramCounts = [0];
      obj22.methods["kind"] = func24;
      func24.definitionLine = 94;
      func24.definitionModule = "ast";
      var func26 = function(argcv) {    // method ==(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_other = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
        setModuleName("ast");
        setLineNumber(95);    // compilenode identifier
        onSelf = true;
        var call27 = callmethodChecked(this, "isMe", [1], var_other);
        return call27;
      };
      func26.paramCounts = [1];
      obj22.methods["=="] = func26;
      func26.definitionLine = 95;
      func26.definitionModule = "ast";
      var func28 = function(argcv) {    // method isAppliedOccurenceOfIdentifier
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isAppliedOccurenceOfIdentifier"));
        setModuleName("ast");
        // isAppliedOccurenceOfIdentifier is a simple accessor - elide try ... catch
        setLineNumber(96);    // compilenode identifier
        return GraceFalse;
      };
      func28.paramCounts = [0];
      obj22.methods["isAppliedOccurenceOfIdentifier"] = func28;
      func28.definitionLine = 96;
      func28.definitionModule = "ast";
      var func29 = function(argcv) {    // method isMatchingBlock
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMatchingBlock"));
        setModuleName("ast");
        // isMatchingBlock is a simple accessor - elide try ... catch
        setLineNumber(97);    // compilenode identifier
        return GraceFalse;
      };
      func29.paramCounts = [0];
      obj22.methods["isMatchingBlock"] = func29;
      func29.definitionLine = 97;
      func29.definitionModule = "ast";
      var func30 = function(argcv) {    // method isFieldDec
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isFieldDec"));
        setModuleName("ast");
        // isFieldDec is a simple accessor - elide try ... catch
        setLineNumber(98);    // compilenode identifier
        return GraceFalse;
      };
      func30.paramCounts = [0];
      obj22.methods["isFieldDec"] = func30;
      func30.definitionLine = 98;
      func30.definitionModule = "ast";
      var func31 = function(argcv) {    // method isInherits
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isInherits"));
        setModuleName("ast");
        // isInherits is a simple accessor - elide try ... catch
        setLineNumber(99);    // compilenode identifier
        return GraceFalse;
      };
      func31.paramCounts = [0];
      obj22.methods["isInherits"] = func31;
      func31.definitionLine = 99;
      func31.definitionModule = "ast";
      var func32 = function(argcv) {    // method isLegalInTrait
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLegalInTrait"));
        setModuleName("ast");
        // isLegalInTrait is a simple accessor - elide try ... catch
        setLineNumber(100);    // compilenode identifier
        return GraceFalse;
      };
      func32.paramCounts = [0];
      obj22.methods["isLegalInTrait"] = func32;
      func32.definitionLine = 100;
      func32.definitionModule = "ast";
      var func33 = function(argcv) {    // method isMember
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMember"));
        setModuleName("ast");
        // isMember is a simple accessor - elide try ... catch
        setLineNumber(101);    // compilenode identifier
        return GraceFalse;
      };
      func33.paramCounts = [0];
      obj22.methods["isMember"] = func33;
      func33.definitionLine = 101;
      func33.definitionModule = "ast";
      var func34 = function(argcv) {    // method isMethod
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMethod"));
        setModuleName("ast");
        // isMethod is a simple accessor - elide try ... catch
        setLineNumber(102);    // compilenode identifier
        return GraceFalse;
      };
      func34.paramCounts = [0];
      obj22.methods["isMethod"] = func34;
      func34.definitionLine = 102;
      func34.definitionModule = "ast";
      var func35 = function(argcv) {    // method isExecutable
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
        setModuleName("ast");
        // isExecutable is a simple accessor - elide try ... catch
        setLineNumber(103);    // compilenode identifier
        return GraceTrue;
      };
      func35.paramCounts = [0];
      obj22.methods["isExecutable"] = func35;
      func35.definitionLine = 103;
      func35.definitionModule = "ast";
      var func36 = function(argcv) {    // method isCall
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isCall"));
        setModuleName("ast");
        // isCall is a simple accessor - elide try ... catch
        setLineNumber(104);    // compilenode identifier
        return GraceFalse;
      };
      func36.paramCounts = [0];
      obj22.methods["isCall"] = func36;
      func36.definitionLine = 104;
      func36.definitionModule = "ast";
      var func37 = function(argcv) {    // method isComment
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isComment"));
        setModuleName("ast");
        // isComment is a simple accessor - elide try ... catch
        setLineNumber(105);    // compilenode identifier
        return GraceFalse;
      };
      func37.paramCounts = [0];
      obj22.methods["isComment"] = func37;
      func37.definitionLine = 105;
      func37.definitionModule = "ast";
      var func38 = function(argcv) {    // method isClass
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isClass"));
        setModuleName("ast");
        // isClass is a simple accessor - elide try ... catch
        setLineNumber(106);    // compilenode identifier
        return GraceFalse;
      };
      func38.paramCounts = [0];
      obj22.methods["isClass"] = func38;
      func38.definitionLine = 106;
      func38.definitionModule = "ast";
      var func39 = function(argcv) {    // method inClass
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inClass"));
        setModuleName("ast");
        // inClass is a simple accessor - elide try ... catch
        setLineNumber(107);    // compilenode identifier
        return GraceFalse;
      };
      func39.paramCounts = [0];
      obj22.methods["inClass"] = func39;
      func39.definitionLine = 107;
      func39.definitionModule = "ast";
      var func40 = function(argcv) {    // method isTrait
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isTrait"));
        setModuleName("ast");
        // isTrait is a simple accessor - elide try ... catch
        setLineNumber(108);    // compilenode identifier
        return GraceFalse;
      };
      func40.paramCounts = [0];
      obj22.methods["isTrait"] = func40;
      func40.definitionLine = 108;
      func40.definitionModule = "ast";
      var func41 = function(argcv) {    // method inTrait
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inTrait"));
        setModuleName("ast");
        // inTrait is a simple accessor - elide try ... catch
        setLineNumber(109);    // compilenode identifier
        return GraceFalse;
      };
      func41.paramCounts = [0];
      obj22.methods["inTrait"] = func41;
      func41.definitionLine = 109;
      func41.definitionModule = "ast";
      var func42 = function(argcv) {    // method isBind
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isBind"));
        setModuleName("ast");
        // isBind is a simple accessor - elide try ... catch
        setLineNumber(110);    // compilenode identifier
        return GraceFalse;
      };
      func42.paramCounts = [0];
      obj22.methods["isBind"] = func42;
      func42.definitionLine = 110;
      func42.definitionModule = "ast";
      var func43 = function(argcv) {    // method isBlock
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isBlock"));
        setModuleName("ast");
        // isBlock is a simple accessor - elide try ... catch
        setLineNumber(111);    // compilenode identifier
        return GraceFalse;
      };
      func43.paramCounts = [0];
      obj22.methods["isBlock"] = func43;
      func43.definitionLine = 111;
      func43.definitionModule = "ast";
      var func44 = function(argcv) {    // method isObject
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isObject"));
        setModuleName("ast");
        // isObject is a simple accessor - elide try ... catch
        setLineNumber(112);    // compilenode identifier
        return GraceFalse;
      };
      func44.paramCounts = [0];
      obj22.methods["isObject"] = func44;
      func44.definitionLine = 112;
      func44.definitionModule = "ast";
      var func45 = function(argcv) {    // method isIdentifier
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isIdentifier"));
        setModuleName("ast");
        // isIdentifier is a simple accessor - elide try ... catch
        setLineNumber(113);    // compilenode identifier
        return GraceFalse;
      };
      func45.paramCounts = [0];
      obj22.methods["isIdentifier"] = func45;
      func45.definitionLine = 113;
      func45.definitionModule = "ast";
      var func46 = function(argcv) {    // method isDialect
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isDialect"));
        setModuleName("ast");
        // isDialect is a simple accessor - elide try ... catch
        setLineNumber(114);    // compilenode identifier
        return GraceFalse;
      };
      func46.paramCounts = [0];
      obj22.methods["isDialect"] = func46;
      func46.definitionLine = 114;
      func46.definitionModule = "ast";
      var func47 = function(argcv) {    // method isImport
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isImport"));
        setModuleName("ast");
        // isImport is a simple accessor - elide try ... catch
        setLineNumber(115);    // compilenode identifier
        return GraceFalse;
      };
      func47.paramCounts = [0];
      obj22.methods["isImport"] = func47;
      func47.definitionLine = 115;
      func47.definitionModule = "ast";
      var func48 = function(argcv) {    // method isTypeDec
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isTypeDec"));
        setModuleName("ast");
        // isTypeDec is a simple accessor - elide try ... catch
        setLineNumber(116);    // compilenode identifier
        return GraceFalse;
      };
      func48.paramCounts = [0];
      obj22.methods["isTypeDec"] = func48;
      func48.definitionLine = 116;
      func48.definitionModule = "ast";
      var func49 = function(argcv) {    // method isExternal
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExternal"));
        setModuleName("ast");
        // isExternal is a simple accessor - elide try ... catch
        setLineNumber(117);    // compilenode identifier
        return GraceFalse;
      };
      func49.paramCounts = [0];
      obj22.methods["isExternal"] = func49;
      func49.definitionLine = 117;
      func49.definitionModule = "ast";
      var func50 = function(argcv) {    // method canInherit
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for canInherit"));
        setModuleName("ast");
        // canInherit is a simple accessor - elide try ... catch
        setLineNumber(118);    // compilenode identifier
        return GraceFalse;
      };
      func50.paramCounts = [0];
      obj22.methods["canInherit"] = func50;
      func50.definitionLine = 118;
      func50.definitionModule = "ast";
      var func51 = function(argcv) {    // method returnsObject
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
        setModuleName("ast");
        // returnsObject is a simple accessor - elide try ... catch
        setLineNumber(119);    // compilenode identifier
        return GraceFalse;
      };
      func51.paramCounts = [0];
      obj22.methods["returnsObject"] = func51;
      func51.definitionLine = 119;
      func51.definitionModule = "ast";
      var func52 = function(argcv) {    // method usesAsType(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_aNode = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
        setModuleName("ast");
        // usesAsType(1) is a simple accessor - elide try ... catch
        setLineNumber(120);    // compilenode identifier
        return GraceFalse;
      };
      func52.paramCounts = [1];
      obj22.methods["usesAsType"] = func52;
      func52.definitionLine = 120;
      func52.definitionModule = "ast";
      var func53 = function(argcv) {    // method hash
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for hash"));
        setModuleName("ast");
        setLineNumber(121);    // compilenode call
        onSelf = true;
        var call54 = callmethodChecked(this, "linePos", [0]);
        var call55 = callmethodChecked(call54, "hash", [0]);
        onSelf = true;
        var call57 = callmethodChecked(this, "line", [0]);
        var call58 = callmethodChecked(call57, "hash", [0]);
        var prod60 = callmethodChecked(call58, "*", [1], call55);
        return prod60;
      };
      func53.paramCounts = [0];
      obj22.methods["hash"] = func53;
      func53.definitionLine = 121;
      func53.definitionModule = "ast";
      var func61 = function(argcv) {    // method asString
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
        setModuleName("ast");
        setLineNumber(122);    // compilenode string
        var string62 = new GraceString("");
        onSelf = true;
        var call64 = callmethodChecked(this, "nameString", [0]);
        var string66 = new GraceString(" ");
        onSelf = true;
        var call68 = callmethodChecked(this, "kind", [0]);
        var string70 = new GraceString("");
        var opresult72 = callmethodChecked(string70, "++", [1], call68);
        var opresult74 = callmethodChecked(opresult72, "++", [1], string66);
        var opresult76 = callmethodChecked(opresult74, "++", [1], call64);
        var opresult78 = callmethodChecked(opresult76, "++", [1], string62);
        return opresult78;
      };
      func61.paramCounts = [0];
      obj22.methods["asString"] = func61;
      func61.definitionLine = 122;
      func61.definitionModule = "ast";
      var func79 = function(argcv) {    // method nameString
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
        setModuleName("ast");
        setLineNumber(123);    // compilenode string
        var string80 = new GraceString("?");
        return string80;
      };
      func79.paramCounts = [0];
      obj22.methods["nameString"] = func79;
      func79.definitionLine = 123;
      func79.definitionModule = "ast";
      var func81 = function(argcv) {    // method isWritable
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
        setModuleName("ast");
        // isWritable is a simple accessor - elide try ... catch
        setLineNumber(124);    // compilenode identifier
        return GraceTrue;
      };
      func81.paramCounts = [0];
      obj22.methods["isWritable"] = func81;
      func81.definitionLine = 124;
      func81.definitionModule = "ast";
      var func82 = function(argcv) {    // method isReadable
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
        setModuleName("ast");
        // isReadable is a simple accessor - elide try ... catch
        setLineNumber(125);    // compilenode identifier
        return GraceTrue;
      };
      func82.paramCounts = [0];
      obj22.methods["isReadable"] = func82;
      func82.definitionLine = 125;
      func82.definitionModule = "ast";
      var func83 = function(argcv) {    // method isPublic
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
        setModuleName("ast");
        // isPublic is a simple accessor - elide try ... catch
        setLineNumber(126);    // compilenode identifier
        return GraceTrue;
      };
      func83.paramCounts = [0];
      obj22.methods["isPublic"] = func83;
      func83.definitionLine = 126;
      func83.definitionModule = "ast";
      var func84 = function(argcv) {    // method isConfidential
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isConfidential"));
        setModuleName("ast");
        setLineNumber(127);    // compilenode call
        onSelf = true;
        var call85 = callmethodChecked(this, "isPublic", [0]);
        var call86 = callmethodChecked(call85, "not", [0]);
        return call86;
      };
      func84.paramCounts = [0];
      obj22.methods["isConfidential"] = func84;
      func84.definitionLine = 127;
      func84.definitionModule = "ast";
      var func87 = function(argcv) {    // method decType
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for decType"));
        setModuleName("ast");
        var if88 = GraceDone;
        setLineNumber(129);    // compilenode call
        onSelf = true;
        var call89 = callmethodChecked(this, "dtype", [0]);
        var opresult92 = callmethodChecked(GraceFalse, "==", [1], call89);
        if (Grace_isTrue(opresult92)) {
          setLineNumber(130);    // compilenode identifier
          return var_unknownType;
        }
        setLineNumber(132);    // compilenode call
        onSelf = true;
        var call93 = callmethodChecked(this, "dtype", [0]);
        return call93;
      };
      func87.paramCounts = [0];
      obj22.methods["decType"] = func87;
      func87.definitionLine = 128;
      func87.definitionModule = "ast";
      var func94 = function(argcv) {    // method isSimple
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isSimple"));
        setModuleName("ast");
        // isSimple is a simple accessor - elide try ... catch
        setLineNumber(134);    // compilenode identifier
        return GraceTrue;
      };
      func94.paramCounts = [0];
      obj22.methods["isSimple"] = func94;
      func94.definitionLine = 134;
      func94.definitionModule = "ast";
      var func95 = function(argcv) {    // method description
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for description"));
        setModuleName("ast");
        setLineNumber(135);    // compilenode call
        onSelf = true;
        var call96 = callmethodChecked(this, "kind", [0]);
        return call96;
      };
      func95.paramCounts = [0];
      obj22.methods["description"] = func95;
      func95.definitionLine = 135;
      func95.definitionModule = "ast";
      var func97 = function(argcv) {    // method accept(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_visitor = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept(1)"));
        setModuleName("ast");
        setLineNumber(137);    // compilenode identifier
        var call98 = callmethodChecked(var_ancestorChain, "empty", [0]);
        onSelf = true;
        var call99 = callmethodChecked(this, "accept()from", [1, 1], var_visitor, call98);
        return call99;
      };
      func97.paramCounts = [1];
      obj22.methods["accept"] = func97;
      func97.definitionLine = 136;
      func97.definitionModule = "ast";
      var func100 = function(argcv) {    // method scope
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope"));
        setModuleName("ast");
        setLineNumber(139);    // compilenode call
        onSelf = true;
        var call101 = callmethodChecked(this, "symbolTable", [0]);
        return call101;
      };
      func100.paramCounts = [0];
      obj22.methods["scope"] = func100;
      func100.definitionLine = 139;
      func100.definitionModule = "ast";
      var func102 = function(argcv) {    // method scope:=(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_st = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
        setModuleName("ast");
        setLineNumber(145);    // compilenode identifier
        onSelf = true;
        var call103 = callmethodChecked(this, "symbolTable:=", [1], var_st);
        return call103;
      };
      func102.paramCounts = [1];
      obj22.methods["scope:="] = func102;
      func102.definitionLine = 141;
      func102.definitionModule = "ast";
      var func104 = function(argcv) {    // method shallowCopyFieldsFrom(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_other = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
        setModuleName("ast");
        setLineNumber(149);    // compilenode identifier
        var call105 = callmethodChecked(var_other, "register", [0]);
        onSelf = true;
        var call106 = callmethodChecked(this, "register:=", [1], call105);
        setLineNumber(150);    // compilenode identifier
        var call107 = callmethodChecked(var_other, "line", [0]);
        onSelf = true;
        var call108 = callmethodChecked(this, "line:=", [1], call107);
        setLineNumber(151);    // compilenode identifier
        var call109 = callmethodChecked(var_other, "linePos", [0]);
        onSelf = true;
        var call110 = callmethodChecked(this, "linePos:=", [1], call109);
        setLineNumber(152);    // compilenode identifier
        var call111 = callmethodChecked(var_other, "scope", [0]);
        onSelf = true;
        var call112 = callmethodChecked(this, "scope:=", [1], call111);
        setLineNumber(153);    // compilenode identifier
        return this;
      };
      func104.paramCounts = [1];
      obj22.methods["shallowCopyFieldsFrom"] = func104;
      func104.definitionLine = 148;
      func104.definitionModule = "ast";
      var func113 = function(argcv) {    // method pretty(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_depth = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
        setModuleName("ast");
        setLineNumber(156);    // compilenode string
        var string114 = new GraceString("");
        var var_spc = string114;
        setLineNumber(157);    // compilenode num
        var opresult117 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
        var block118 = new GraceBlock(this, 157, 1);
        setLineNumber(1);    // compilenode identifier
        block118.real = function(var_i) {
          setLineNumber(158);    // compilenode string
          var string119 = new GraceString("  ");
          var opresult122 = callmethodChecked(var_spc, "++", [1], string119);
          var_spc = opresult122;
          return GraceDone;
        };
        var call123 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult117, block118);
        var if124 = GraceDone;
        setLineNumber(160);    // compilenode block
        var block125 = new GraceBlock(this, 160, 0);
        block125.real = function() {
          var string126 = new GraceString("symbols");
          var call128 = callmethodChecked(var_util, "target", [0]);
          var opresult130 = callmethodChecked(call128, "==", [1], string126);
          return opresult130;
        };
        onSelf = true;
        var call133 = callmethodChecked(this, "scope", [0]);
        var call134 = callmethodChecked(call133, "node", [0]);
        var opresult136 = callmethodChecked(call134, "==", [1], this);
        var opresult138 = callmethodChecked(opresult136, "&&", [1], block125);
        if (Grace_isTrue(opresult138)) {
          setLineNumber(161);    // compilenode string
          var string139 = new GraceString("");
          onSelf = true;
          var call141 = callmethodChecked(this, "scope", [0]);
          var call142 = callmethodChecked(call141, "elementScopesAsString", [0]);
          var string144 = new GraceString("");
          onSelf = true;
          var call146 = callmethodChecked(this, "scope", [0]);
          var string148 = new GraceString("): ");
          onSelf = true;
          var call150 = callmethodChecked(this, "scope", [0]);
          var call151 = callmethodChecked(call150, "variety", [0]);
          var string153 = new GraceString("Symbols(");
          var string156 = new GraceString("\n");
          onSelf = true;
          var call158 = callmethodChecked(this, "description", [0]);
          var string160 = new GraceString(" ");
          onSelf = true;
          var call162 = callmethodChecked(this, "linePos", [0]);
          var string164 = new GraceString(":");
          onSelf = true;
          var call166 = callmethodChecked(this, "line", [0]);
          var string168 = new GraceString("");
          var opresult170 = callmethodChecked(string168, "++", [1], call166);
          var opresult172 = callmethodChecked(opresult170, "++", [1], string164);
          var opresult174 = callmethodChecked(opresult172, "++", [1], call162);
          var opresult176 = callmethodChecked(opresult174, "++", [1], string160);
          var opresult178 = callmethodChecked(opresult176, "++", [1], call158);
          var opresult180 = callmethodChecked(opresult178, "++", [1], string156);
          var opresult182 = callmethodChecked(opresult180, "++", [1], var_spc);
          var opresult184 = callmethodChecked(opresult182, "++", [1], string153);
          var opresult186 = callmethodChecked(opresult184, "++", [1], call151);
          var opresult188 = callmethodChecked(opresult186, "++", [1], string148);
          var opresult190 = callmethodChecked(opresult188, "++", [1], call146);
          var opresult192 = callmethodChecked(opresult190, "++", [1], string144);
          var opresult194 = callmethodChecked(opresult192, "++", [1], call142);
          var opresult196 = callmethodChecked(opresult194, "++", [1], string139);
          if124 = opresult196;
        } else {
          var if197 = GraceDone;
          setLineNumber(162);    // compilenode string
          var string198 = new GraceString("fake");
          onSelf = true;
          var call200 = callmethodChecked(this, "scope", [0]);
          var call201 = callmethodChecked(call200, "variety", [0]);
          var opresult203 = callmethodChecked(call201, "==", [1], string198);
          if (Grace_isTrue(opresult203)) {
            setLineNumber(163);    // compilenode string
            var string204 = new GraceString("");
            onSelf = true;
            var call206 = callmethodChecked(this, "description", [0]);
            var string208 = new GraceString(" ");
            onSelf = true;
            var call210 = callmethodChecked(this, "linePos", [0]);
            var string212 = new GraceString(":");
            onSelf = true;
            var call214 = callmethodChecked(this, "line", [0]);
            var string216 = new GraceString("");
            var opresult218 = callmethodChecked(string216, "++", [1], call214);
            var opresult220 = callmethodChecked(opresult218, "++", [1], string212);
            var opresult222 = callmethodChecked(opresult220, "++", [1], call210);
            var opresult224 = callmethodChecked(opresult222, "++", [1], string208);
            var opresult226 = callmethodChecked(opresult224, "++", [1], call206);
            var opresult228 = callmethodChecked(opresult226, "++", [1], string204);
            if197 = opresult228;
          } else {
            setLineNumber(165);    // compilenode string
            var string229 = new GraceString("");
            onSelf = true;
            var call231 = callmethodChecked(this, "scope", [0]);
            var call232 = callmethodChecked(call231, "asDebugString", [0]);
            var string234 = new GraceString(" ");
            onSelf = true;
            var call236 = callmethodChecked(this, "description", [0]);
            var string238 = new GraceString(" ");
            onSelf = true;
            var call240 = callmethodChecked(this, "linePos", [0]);
            var string242 = new GraceString(":");
            onSelf = true;
            var call244 = callmethodChecked(this, "line", [0]);
            var string246 = new GraceString("");
            var opresult248 = callmethodChecked(string246, "++", [1], call244);
            var opresult250 = callmethodChecked(opresult248, "++", [1], string242);
            var opresult252 = callmethodChecked(opresult250, "++", [1], call240);
            var opresult254 = callmethodChecked(opresult252, "++", [1], string238);
            var opresult256 = callmethodChecked(opresult254, "++", [1], call236);
            var opresult258 = callmethodChecked(opresult256, "++", [1], string234);
            var opresult260 = callmethodChecked(opresult258, "++", [1], call232);
            var opresult262 = callmethodChecked(opresult260, "++", [1], string229);
            if197 = opresult262;
          }
          if124 = if197;
        }
        return if124;
      };
      func113.paramCounts = [1];
      obj22.methods["pretty"] = func113;
      func113.definitionLine = 155;
      func113.definitionModule = "ast";
      var func263 = function(argcv) {    // method deepCopy
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for deepCopy"));
        setModuleName("ast");
        setLineNumber(169);    // compilenode block
        var block264 = new GraceBlock(this, 169, 1);
        setLineNumber(1);    // compilenode identifier
        block264.real = function(var_each) {
          setLineNumber(169);    // compilenode identifier
          return var_each;
        };
        var call265 = callmethodChecked(var_ancestorChain, "empty", [0]);
        onSelf = true;
        var call266 = callmethodChecked(this, "map()ancestors", [1, 1], block264, call265);
        return call266;
      };
      func263.paramCounts = [0];
      obj22.methods["deepCopy"] = func263;
      func263.definitionLine = 168;
      func263.definitionModule = "ast";
      var func267 = function(argcv) {    // method enclosingObject
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for enclosingObject"));
        setModuleName("ast");
        setLineNumber(172);    // compilenode call
        onSelf = true;
        var call268 = callmethodChecked(this, "scope", [0]);
        var call269 = callmethodChecked(call268, "enclosingObjectScope", [0]);
        var call270 = callmethodChecked(call269, "node", [0]);
        var var_obj = call270;
        setLineNumber(173);    // compilenode identifier
        return var_obj;
      };
      func267.paramCounts = [0];
      obj22.methods["enclosingObject"] = func267;
      func267.definitionLine = 171;
      func267.definitionModule = "ast";
      var func271 = function(argcv) {    // method addComment(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_cmtNode = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addComment(1)"));
        setModuleName("ast");
        var if272 = GraceDone;
        setLineNumber(176);    // compilenode call
        onSelf = true;
        var call273 = callmethodChecked(this, "comments", [0]);
        var opresult276 = callmethodChecked(GraceFalse, "==", [1], call273);
        if (Grace_isTrue(opresult276)) {
          setLineNumber(177);    // compilenode identifier
          onSelf = true;
          var call277 = callmethodChecked(this, "comments:=", [1], var_cmtNode);
          if272 = call277;
        } else {
          setLineNumber(179);    // compilenode call
          onSelf = true;
          var call278 = callmethodChecked(this, "comments", [0]);
          var call279 = callmethodChecked(call278, "extendCommentUsing", [1], var_cmtNode);
          if272 = call279;
        }
        return if272;
      };
      func271.paramCounts = [1];
      obj22.methods["addComment"] = func271;
      func271.definitionLine = 175;
      func271.definitionModule = "ast";
      var func280 = function(argcv) {    // method addComments(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_cmtNodeList = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addComments(1)"));
        setModuleName("ast");
        setLineNumber(183);    // compilenode block
        var block281 = new GraceBlock(this, 183, 1);
        setLineNumber(1);    // compilenode identifier
        block281.real = function(var_each) {
          setLineNumber(183);    // compilenode identifier
          onSelf = true;
          var call282 = callmethodChecked(this, "addComment", [1], var_each);
          return call282;
        };
        var call283 = callmethodChecked(var_cmtNodeList, "do", [1], block281);
        return call283;
      };
      func280.paramCounts = [1];
      obj22.methods["addComments"] = func280;
      func280.definitionLine = 182;
      func280.definitionModule = "ast";
      var func284 = function(argcv) {    // method statementName
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
        setModuleName("ast");
        setLineNumber(185);    // compilenode call
        onSelf = true;
        var call285 = callmethodChecked(this, "kind", [0]);
        return call285;
      };
      func284.paramCounts = [0];
      obj22.methods["statementName"] = func284;
      func284.definitionLine = 185;
      func284.definitionModule = "ast";
      setLineNumber(88);    // compilenode string
      var string286 = new GraceString("");
      obj22.data["register"] = string286;
      var reader_ast_register287 = function() {
        return this.data["register"];
      };
      obj22.methods["register"] = reader_ast_register287;
      obj22.data["register"] = string286;
      var writer_ast_register287 = function(argcv, o) {
        this.data["register"] = o;
        return GraceDone;
      };
      obj22.methods["register:="] = writer_ast_register287;
      obj22.mutable = true;
      setLineNumber(89);    // compilenode identifier
      var call288 = callmethodChecked(var_util, "linenum", [0]);
      obj22.data["line"] = call288;
      var reader_ast_line289 = function() {
        return this.data["line"];
      };
      obj22.methods["line"] = reader_ast_line289;
      obj22.data["line"] = call288;
      var writer_ast_line289 = function(argcv, o) {
        this.data["line"] = o;
        return GraceDone;
      };
      obj22.methods["line:="] = writer_ast_line289;
      obj22.mutable = true;
      setLineNumber(90);    // compilenode identifier
      var call290 = callmethodChecked(var_util, "linepos", [0]);
      obj22.data["linePos"] = call290;
      var reader_ast_linePos291 = function() {
        return this.data["linePos"];
      };
      obj22.methods["linePos"] = reader_ast_linePos291;
      obj22.data["linePos"] = call290;
      var writer_ast_linePos291 = function(argcv, o) {
        this.data["linePos"] = o;
        return GraceDone;
      };
      obj22.methods["linePos:="] = writer_ast_linePos291;
      obj22.mutable = true;
      setLineNumber(91);    // compilenode identifier
      obj22.data["symbolTable"] = var_fakeSymbolTable;
      var reader_ast_symbolTable292 = function() {
        return this.data["symbolTable"];
      };
      obj22.methods["symbolTable"] = reader_ast_symbolTable292;
      obj22.data["symbolTable"] = var_fakeSymbolTable;
      var writer_ast_symbolTable292 = function(argcv, o) {
        this.data["symbolTable"] = o;
        return GraceDone;
      };
      obj22.methods["symbolTable:="] = writer_ast_symbolTable292;
      reader_ast_symbolTable292.confidential = true;
      writer_ast_symbolTable292.confidential = true;
      obj22.mutable = true;
      setLineNumber(92);    // compilenode identifier
      obj22.data["comments"] = GraceFalse;
      var reader_ast_comments293 = function() {
        return this.data["comments"];
      };
      obj22.methods["comments"] = reader_ast_comments293;
      obj22.data["comments"] = GraceFalse;
      var writer_ast_comments293 = function(argcv, o) {
        this.data["comments"] = o;
        return GraceDone;
      };
      obj22.methods["comments:="] = writer_ast_comments293;
      obj22.mutable = true;
      superDepth = origSuperDepth;
    };
    obj_init_22.apply(obj22, []);
    return obj22;
  };
  func21.paramCounts = [0];
  this.methods["baseNode"] = func21;
  func21.definitionLine = 86;
  func21.definitionModule = "ast";
    var func294 = function(argcv) {    // method baseNode()object
      var curarg = 1;
      var inheritingObject = arguments[curarg++];
      // Start argument processing
      curarg = 1;
      // End argument processing
      setModuleName("ast");
      var returnTarget = invocationCount;
      invocationCount++;
      var obj295 = Grace_allocObject(GraceObject, "baseNode");
      obj295.definitionModule = "ast";
      obj295.definitionLine = 86;
      var inho295 = inheritingObject;
      while (inho295.superobj) inho295 = inho295.superobj;
      inho295.superobj = obj295;
      obj295.data = inheritingObject.data;
      if (inheritingObject.hasOwnProperty('_value'))
        obj295._value = inheritingObject._value;
      obj295.outer = this;
      var reader_ast_outer296 = function() {
        return this.outer;
      };
      obj295.methods["outer"] = reader_ast_outer296;
      var obj_init_295 = function() {
        var origSuperDepth = superDepth;
        superDepth = obj295;
        var func297 = function(argcv) {    // method kind
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for kind"));
          setModuleName("ast");
          setLineNumber(94);    // compilenode call
          var call298 = callmethodChecked(var_prelude, "abstract", [0]);
          return call298;
        };
        func297.paramCounts = [0];
        obj295.methods["kind"] = func297;
        func297.definitionLine = 94;
        func297.definitionModule = "ast";
        var func299 = function(argcv) {    // method ==(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_other = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
          setModuleName("ast");
          setLineNumber(95);    // compilenode identifier
          onSelf = true;
          var call300 = callmethodChecked(this, "isMe", [1], var_other);
          return call300;
        };
        func299.paramCounts = [1];
        obj295.methods["=="] = func299;
        func299.definitionLine = 95;
        func299.definitionModule = "ast";
        var func301 = function(argcv) {    // method isAppliedOccurenceOfIdentifier
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isAppliedOccurenceOfIdentifier"));
          setModuleName("ast");
          // isAppliedOccurenceOfIdentifier is a simple accessor - elide try ... catch
          setLineNumber(96);    // compilenode identifier
          return GraceFalse;
        };
        func301.paramCounts = [0];
        obj295.methods["isAppliedOccurenceOfIdentifier"] = func301;
        func301.definitionLine = 96;
        func301.definitionModule = "ast";
        var func302 = function(argcv) {    // method isMatchingBlock
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMatchingBlock"));
          setModuleName("ast");
          // isMatchingBlock is a simple accessor - elide try ... catch
          setLineNumber(97);    // compilenode identifier
          return GraceFalse;
        };
        func302.paramCounts = [0];
        obj295.methods["isMatchingBlock"] = func302;
        func302.definitionLine = 97;
        func302.definitionModule = "ast";
        var func303 = function(argcv) {    // method isFieldDec
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isFieldDec"));
          setModuleName("ast");
          // isFieldDec is a simple accessor - elide try ... catch
          setLineNumber(98);    // compilenode identifier
          return GraceFalse;
        };
        func303.paramCounts = [0];
        obj295.methods["isFieldDec"] = func303;
        func303.definitionLine = 98;
        func303.definitionModule = "ast";
        var func304 = function(argcv) {    // method isInherits
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isInherits"));
          setModuleName("ast");
          // isInherits is a simple accessor - elide try ... catch
          setLineNumber(99);    // compilenode identifier
          return GraceFalse;
        };
        func304.paramCounts = [0];
        obj295.methods["isInherits"] = func304;
        func304.definitionLine = 99;
        func304.definitionModule = "ast";
        var func305 = function(argcv) {    // method isLegalInTrait
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLegalInTrait"));
          setModuleName("ast");
          // isLegalInTrait is a simple accessor - elide try ... catch
          setLineNumber(100);    // compilenode identifier
          return GraceFalse;
        };
        func305.paramCounts = [0];
        obj295.methods["isLegalInTrait"] = func305;
        func305.definitionLine = 100;
        func305.definitionModule = "ast";
        var func306 = function(argcv) {    // method isMember
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMember"));
          setModuleName("ast");
          // isMember is a simple accessor - elide try ... catch
          setLineNumber(101);    // compilenode identifier
          return GraceFalse;
        };
        func306.paramCounts = [0];
        obj295.methods["isMember"] = func306;
        func306.definitionLine = 101;
        func306.definitionModule = "ast";
        var func307 = function(argcv) {    // method isMethod
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMethod"));
          setModuleName("ast");
          // isMethod is a simple accessor - elide try ... catch
          setLineNumber(102);    // compilenode identifier
          return GraceFalse;
        };
        func307.paramCounts = [0];
        obj295.methods["isMethod"] = func307;
        func307.definitionLine = 102;
        func307.definitionModule = "ast";
        var func308 = function(argcv) {    // method isExecutable
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
          setModuleName("ast");
          // isExecutable is a simple accessor - elide try ... catch
          setLineNumber(103);    // compilenode identifier
          return GraceTrue;
        };
        func308.paramCounts = [0];
        obj295.methods["isExecutable"] = func308;
        func308.definitionLine = 103;
        func308.definitionModule = "ast";
        var func309 = function(argcv) {    // method isCall
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isCall"));
          setModuleName("ast");
          // isCall is a simple accessor - elide try ... catch
          setLineNumber(104);    // compilenode identifier
          return GraceFalse;
        };
        func309.paramCounts = [0];
        obj295.methods["isCall"] = func309;
        func309.definitionLine = 104;
        func309.definitionModule = "ast";
        var func310 = function(argcv) {    // method isComment
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isComment"));
          setModuleName("ast");
          // isComment is a simple accessor - elide try ... catch
          setLineNumber(105);    // compilenode identifier
          return GraceFalse;
        };
        func310.paramCounts = [0];
        obj295.methods["isComment"] = func310;
        func310.definitionLine = 105;
        func310.definitionModule = "ast";
        var func311 = function(argcv) {    // method isClass
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isClass"));
          setModuleName("ast");
          // isClass is a simple accessor - elide try ... catch
          setLineNumber(106);    // compilenode identifier
          return GraceFalse;
        };
        func311.paramCounts = [0];
        obj295.methods["isClass"] = func311;
        func311.definitionLine = 106;
        func311.definitionModule = "ast";
        var func312 = function(argcv) {    // method inClass
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inClass"));
          setModuleName("ast");
          // inClass is a simple accessor - elide try ... catch
          setLineNumber(107);    // compilenode identifier
          return GraceFalse;
        };
        func312.paramCounts = [0];
        obj295.methods["inClass"] = func312;
        func312.definitionLine = 107;
        func312.definitionModule = "ast";
        var func313 = function(argcv) {    // method isTrait
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isTrait"));
          setModuleName("ast");
          // isTrait is a simple accessor - elide try ... catch
          setLineNumber(108);    // compilenode identifier
          return GraceFalse;
        };
        func313.paramCounts = [0];
        obj295.methods["isTrait"] = func313;
        func313.definitionLine = 108;
        func313.definitionModule = "ast";
        var func314 = function(argcv) {    // method inTrait
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inTrait"));
          setModuleName("ast");
          // inTrait is a simple accessor - elide try ... catch
          setLineNumber(109);    // compilenode identifier
          return GraceFalse;
        };
        func314.paramCounts = [0];
        obj295.methods["inTrait"] = func314;
        func314.definitionLine = 109;
        func314.definitionModule = "ast";
        var func315 = function(argcv) {    // method isBind
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isBind"));
          setModuleName("ast");
          // isBind is a simple accessor - elide try ... catch
          setLineNumber(110);    // compilenode identifier
          return GraceFalse;
        };
        func315.paramCounts = [0];
        obj295.methods["isBind"] = func315;
        func315.definitionLine = 110;
        func315.definitionModule = "ast";
        var func316 = function(argcv) {    // method isBlock
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isBlock"));
          setModuleName("ast");
          // isBlock is a simple accessor - elide try ... catch
          setLineNumber(111);    // compilenode identifier
          return GraceFalse;
        };
        func316.paramCounts = [0];
        obj295.methods["isBlock"] = func316;
        func316.definitionLine = 111;
        func316.definitionModule = "ast";
        var func317 = function(argcv) {    // method isObject
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isObject"));
          setModuleName("ast");
          // isObject is a simple accessor - elide try ... catch
          setLineNumber(112);    // compilenode identifier
          return GraceFalse;
        };
        func317.paramCounts = [0];
        obj295.methods["isObject"] = func317;
        func317.definitionLine = 112;
        func317.definitionModule = "ast";
        var func318 = function(argcv) {    // method isIdentifier
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isIdentifier"));
          setModuleName("ast");
          // isIdentifier is a simple accessor - elide try ... catch
          setLineNumber(113);    // compilenode identifier
          return GraceFalse;
        };
        func318.paramCounts = [0];
        obj295.methods["isIdentifier"] = func318;
        func318.definitionLine = 113;
        func318.definitionModule = "ast";
        var func319 = function(argcv) {    // method isDialect
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isDialect"));
          setModuleName("ast");
          // isDialect is a simple accessor - elide try ... catch
          setLineNumber(114);    // compilenode identifier
          return GraceFalse;
        };
        func319.paramCounts = [0];
        obj295.methods["isDialect"] = func319;
        func319.definitionLine = 114;
        func319.definitionModule = "ast";
        var func320 = function(argcv) {    // method isImport
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isImport"));
          setModuleName("ast");
          // isImport is a simple accessor - elide try ... catch
          setLineNumber(115);    // compilenode identifier
          return GraceFalse;
        };
        func320.paramCounts = [0];
        obj295.methods["isImport"] = func320;
        func320.definitionLine = 115;
        func320.definitionModule = "ast";
        var func321 = function(argcv) {    // method isTypeDec
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isTypeDec"));
          setModuleName("ast");
          // isTypeDec is a simple accessor - elide try ... catch
          setLineNumber(116);    // compilenode identifier
          return GraceFalse;
        };
        func321.paramCounts = [0];
        obj295.methods["isTypeDec"] = func321;
        func321.definitionLine = 116;
        func321.definitionModule = "ast";
        var func322 = function(argcv) {    // method isExternal
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExternal"));
          setModuleName("ast");
          // isExternal is a simple accessor - elide try ... catch
          setLineNumber(117);    // compilenode identifier
          return GraceFalse;
        };
        func322.paramCounts = [0];
        obj295.methods["isExternal"] = func322;
        func322.definitionLine = 117;
        func322.definitionModule = "ast";
        var func323 = function(argcv) {    // method canInherit
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for canInherit"));
          setModuleName("ast");
          // canInherit is a simple accessor - elide try ... catch
          setLineNumber(118);    // compilenode identifier
          return GraceFalse;
        };
        func323.paramCounts = [0];
        obj295.methods["canInherit"] = func323;
        func323.definitionLine = 118;
        func323.definitionModule = "ast";
        var func324 = function(argcv) {    // method returnsObject
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
          setModuleName("ast");
          // returnsObject is a simple accessor - elide try ... catch
          setLineNumber(119);    // compilenode identifier
          return GraceFalse;
        };
        func324.paramCounts = [0];
        obj295.methods["returnsObject"] = func324;
        func324.definitionLine = 119;
        func324.definitionModule = "ast";
        var func325 = function(argcv) {    // method usesAsType(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_aNode = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
          setModuleName("ast");
          // usesAsType(1) is a simple accessor - elide try ... catch
          setLineNumber(120);    // compilenode identifier
          return GraceFalse;
        };
        func325.paramCounts = [1];
        obj295.methods["usesAsType"] = func325;
        func325.definitionLine = 120;
        func325.definitionModule = "ast";
        var func326 = function(argcv) {    // method hash
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for hash"));
          setModuleName("ast");
          setLineNumber(121);    // compilenode call
          onSelf = true;
          var call327 = callmethodChecked(this, "linePos", [0]);
          var call328 = callmethodChecked(call327, "hash", [0]);
          onSelf = true;
          var call330 = callmethodChecked(this, "line", [0]);
          var call331 = callmethodChecked(call330, "hash", [0]);
          var prod333 = callmethodChecked(call331, "*", [1], call328);
          return prod333;
        };
        func326.paramCounts = [0];
        obj295.methods["hash"] = func326;
        func326.definitionLine = 121;
        func326.definitionModule = "ast";
        var func334 = function(argcv) {    // method asString
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
          setModuleName("ast");
          setLineNumber(122);    // compilenode string
          var string335 = new GraceString("");
          onSelf = true;
          var call337 = callmethodChecked(this, "nameString", [0]);
          var string339 = new GraceString(" ");
          onSelf = true;
          var call341 = callmethodChecked(this, "kind", [0]);
          var string343 = new GraceString("");
          var opresult345 = callmethodChecked(string343, "++", [1], call341);
          var opresult347 = callmethodChecked(opresult345, "++", [1], string339);
          var opresult349 = callmethodChecked(opresult347, "++", [1], call337);
          var opresult351 = callmethodChecked(opresult349, "++", [1], string335);
          return opresult351;
        };
        func334.paramCounts = [0];
        obj295.methods["asString"] = func334;
        func334.definitionLine = 122;
        func334.definitionModule = "ast";
        var func352 = function(argcv) {    // method nameString
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
          setModuleName("ast");
          setLineNumber(123);    // compilenode string
          var string353 = new GraceString("?");
          return string353;
        };
        func352.paramCounts = [0];
        obj295.methods["nameString"] = func352;
        func352.definitionLine = 123;
        func352.definitionModule = "ast";
        var func354 = function(argcv) {    // method isWritable
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
          setModuleName("ast");
          // isWritable is a simple accessor - elide try ... catch
          setLineNumber(124);    // compilenode identifier
          return GraceTrue;
        };
        func354.paramCounts = [0];
        obj295.methods["isWritable"] = func354;
        func354.definitionLine = 124;
        func354.definitionModule = "ast";
        var func355 = function(argcv) {    // method isReadable
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
          setModuleName("ast");
          // isReadable is a simple accessor - elide try ... catch
          setLineNumber(125);    // compilenode identifier
          return GraceTrue;
        };
        func355.paramCounts = [0];
        obj295.methods["isReadable"] = func355;
        func355.definitionLine = 125;
        func355.definitionModule = "ast";
        var func356 = function(argcv) {    // method isPublic
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
          setModuleName("ast");
          // isPublic is a simple accessor - elide try ... catch
          setLineNumber(126);    // compilenode identifier
          return GraceTrue;
        };
        func356.paramCounts = [0];
        obj295.methods["isPublic"] = func356;
        func356.definitionLine = 126;
        func356.definitionModule = "ast";
        var func357 = function(argcv) {    // method isConfidential
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isConfidential"));
          setModuleName("ast");
          setLineNumber(127);    // compilenode call
          onSelf = true;
          var call358 = callmethodChecked(this, "isPublic", [0]);
          var call359 = callmethodChecked(call358, "not", [0]);
          return call359;
        };
        func357.paramCounts = [0];
        obj295.methods["isConfidential"] = func357;
        func357.definitionLine = 127;
        func357.definitionModule = "ast";
        var func360 = function(argcv) {    // method decType
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for decType"));
          setModuleName("ast");
          var if361 = GraceDone;
          setLineNumber(129);    // compilenode call
          onSelf = true;
          var call362 = callmethodChecked(this, "dtype", [0]);
          var opresult365 = callmethodChecked(GraceFalse, "==", [1], call362);
          if (Grace_isTrue(opresult365)) {
            setLineNumber(130);    // compilenode identifier
            return var_unknownType;
          }
          setLineNumber(132);    // compilenode call
          onSelf = true;
          var call366 = callmethodChecked(this, "dtype", [0]);
          return call366;
        };
        func360.paramCounts = [0];
        obj295.methods["decType"] = func360;
        func360.definitionLine = 128;
        func360.definitionModule = "ast";
        var func367 = function(argcv) {    // method isSimple
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isSimple"));
          setModuleName("ast");
          // isSimple is a simple accessor - elide try ... catch
          setLineNumber(134);    // compilenode identifier
          return GraceTrue;
        };
        func367.paramCounts = [0];
        obj295.methods["isSimple"] = func367;
        func367.definitionLine = 134;
        func367.definitionModule = "ast";
        var func368 = function(argcv) {    // method description
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for description"));
          setModuleName("ast");
          setLineNumber(135);    // compilenode call
          onSelf = true;
          var call369 = callmethodChecked(this, "kind", [0]);
          return call369;
        };
        func368.paramCounts = [0];
        obj295.methods["description"] = func368;
        func368.definitionLine = 135;
        func368.definitionModule = "ast";
        var func370 = function(argcv) {    // method accept(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_visitor = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept(1)"));
          setModuleName("ast");
          setLineNumber(137);    // compilenode identifier
          var call371 = callmethodChecked(var_ancestorChain, "empty", [0]);
          onSelf = true;
          var call372 = callmethodChecked(this, "accept()from", [1, 1], var_visitor, call371);
          return call372;
        };
        func370.paramCounts = [1];
        obj295.methods["accept"] = func370;
        func370.definitionLine = 136;
        func370.definitionModule = "ast";
        var func373 = function(argcv) {    // method scope
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope"));
          setModuleName("ast");
          setLineNumber(139);    // compilenode call
          onSelf = true;
          var call374 = callmethodChecked(this, "symbolTable", [0]);
          return call374;
        };
        func373.paramCounts = [0];
        obj295.methods["scope"] = func373;
        func373.definitionLine = 139;
        func373.definitionModule = "ast";
        var func375 = function(argcv) {    // method scope:=(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_st = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
          setModuleName("ast");
          setLineNumber(145);    // compilenode identifier
          onSelf = true;
          var call376 = callmethodChecked(this, "symbolTable:=", [1], var_st);
          return call376;
        };
        func375.paramCounts = [1];
        obj295.methods["scope:="] = func375;
        func375.definitionLine = 141;
        func375.definitionModule = "ast";
        var func377 = function(argcv) {    // method shallowCopyFieldsFrom(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_other = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
          setModuleName("ast");
          setLineNumber(149);    // compilenode identifier
          var call378 = callmethodChecked(var_other, "register", [0]);
          onSelf = true;
          var call379 = callmethodChecked(this, "register:=", [1], call378);
          setLineNumber(150);    // compilenode identifier
          var call380 = callmethodChecked(var_other, "line", [0]);
          onSelf = true;
          var call381 = callmethodChecked(this, "line:=", [1], call380);
          setLineNumber(151);    // compilenode identifier
          var call382 = callmethodChecked(var_other, "linePos", [0]);
          onSelf = true;
          var call383 = callmethodChecked(this, "linePos:=", [1], call382);
          setLineNumber(152);    // compilenode identifier
          var call384 = callmethodChecked(var_other, "scope", [0]);
          onSelf = true;
          var call385 = callmethodChecked(this, "scope:=", [1], call384);
          setLineNumber(153);    // compilenode identifier
          return this;
        };
        func377.paramCounts = [1];
        obj295.methods["shallowCopyFieldsFrom"] = func377;
        func377.definitionLine = 148;
        func377.definitionModule = "ast";
        var func386 = function(argcv) {    // method pretty(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_depth = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
          setModuleName("ast");
          setLineNumber(156);    // compilenode string
          var string387 = new GraceString("");
          var var_spc = string387;
          setLineNumber(157);    // compilenode num
          var opresult390 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
          var block391 = new GraceBlock(this, 157, 1);
          setLineNumber(1);    // compilenode identifier
          block391.real = function(var_i) {
            setLineNumber(158);    // compilenode string
            var string392 = new GraceString("  ");
            var opresult395 = callmethodChecked(var_spc, "++", [1], string392);
            var_spc = opresult395;
            return GraceDone;
          };
          var call396 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult390, block391);
          var if397 = GraceDone;
          setLineNumber(160);    // compilenode block
          var block398 = new GraceBlock(this, 160, 0);
          block398.real = function() {
            var string399 = new GraceString("symbols");
            var call401 = callmethodChecked(var_util, "target", [0]);
            var opresult403 = callmethodChecked(call401, "==", [1], string399);
            return opresult403;
          };
          onSelf = true;
          var call406 = callmethodChecked(this, "scope", [0]);
          var call407 = callmethodChecked(call406, "node", [0]);
          var opresult409 = callmethodChecked(call407, "==", [1], this);
          var opresult411 = callmethodChecked(opresult409, "&&", [1], block398);
          if (Grace_isTrue(opresult411)) {
            setLineNumber(161);    // compilenode string
            var string412 = new GraceString("");
            onSelf = true;
            var call414 = callmethodChecked(this, "scope", [0]);
            var call415 = callmethodChecked(call414, "elementScopesAsString", [0]);
            var string417 = new GraceString("");
            onSelf = true;
            var call419 = callmethodChecked(this, "scope", [0]);
            var string421 = new GraceString("): ");
            onSelf = true;
            var call423 = callmethodChecked(this, "scope", [0]);
            var call424 = callmethodChecked(call423, "variety", [0]);
            var string426 = new GraceString("Symbols(");
            var string429 = new GraceString("\n");
            onSelf = true;
            var call431 = callmethodChecked(this, "description", [0]);
            var string433 = new GraceString(" ");
            onSelf = true;
            var call435 = callmethodChecked(this, "linePos", [0]);
            var string437 = new GraceString(":");
            onSelf = true;
            var call439 = callmethodChecked(this, "line", [0]);
            var string441 = new GraceString("");
            var opresult443 = callmethodChecked(string441, "++", [1], call439);
            var opresult445 = callmethodChecked(opresult443, "++", [1], string437);
            var opresult447 = callmethodChecked(opresult445, "++", [1], call435);
            var opresult449 = callmethodChecked(opresult447, "++", [1], string433);
            var opresult451 = callmethodChecked(opresult449, "++", [1], call431);
            var opresult453 = callmethodChecked(opresult451, "++", [1], string429);
            var opresult455 = callmethodChecked(opresult453, "++", [1], var_spc);
            var opresult457 = callmethodChecked(opresult455, "++", [1], string426);
            var opresult459 = callmethodChecked(opresult457, "++", [1], call424);
            var opresult461 = callmethodChecked(opresult459, "++", [1], string421);
            var opresult463 = callmethodChecked(opresult461, "++", [1], call419);
            var opresult465 = callmethodChecked(opresult463, "++", [1], string417);
            var opresult467 = callmethodChecked(opresult465, "++", [1], call415);
            var opresult469 = callmethodChecked(opresult467, "++", [1], string412);
            if397 = opresult469;
          } else {
            var if470 = GraceDone;
            setLineNumber(162);    // compilenode string
            var string471 = new GraceString("fake");
            onSelf = true;
            var call473 = callmethodChecked(this, "scope", [0]);
            var call474 = callmethodChecked(call473, "variety", [0]);
            var opresult476 = callmethodChecked(call474, "==", [1], string471);
            if (Grace_isTrue(opresult476)) {
              setLineNumber(163);    // compilenode string
              var string477 = new GraceString("");
              onSelf = true;
              var call479 = callmethodChecked(this, "description", [0]);
              var string481 = new GraceString(" ");
              onSelf = true;
              var call483 = callmethodChecked(this, "linePos", [0]);
              var string485 = new GraceString(":");
              onSelf = true;
              var call487 = callmethodChecked(this, "line", [0]);
              var string489 = new GraceString("");
              var opresult491 = callmethodChecked(string489, "++", [1], call487);
              var opresult493 = callmethodChecked(opresult491, "++", [1], string485);
              var opresult495 = callmethodChecked(opresult493, "++", [1], call483);
              var opresult497 = callmethodChecked(opresult495, "++", [1], string481);
              var opresult499 = callmethodChecked(opresult497, "++", [1], call479);
              var opresult501 = callmethodChecked(opresult499, "++", [1], string477);
              if470 = opresult501;
            } else {
              setLineNumber(165);    // compilenode string
              var string502 = new GraceString("");
              onSelf = true;
              var call504 = callmethodChecked(this, "scope", [0]);
              var call505 = callmethodChecked(call504, "asDebugString", [0]);
              var string507 = new GraceString(" ");
              onSelf = true;
              var call509 = callmethodChecked(this, "description", [0]);
              var string511 = new GraceString(" ");
              onSelf = true;
              var call513 = callmethodChecked(this, "linePos", [0]);
              var string515 = new GraceString(":");
              onSelf = true;
              var call517 = callmethodChecked(this, "line", [0]);
              var string519 = new GraceString("");
              var opresult521 = callmethodChecked(string519, "++", [1], call517);
              var opresult523 = callmethodChecked(opresult521, "++", [1], string515);
              var opresult525 = callmethodChecked(opresult523, "++", [1], call513);
              var opresult527 = callmethodChecked(opresult525, "++", [1], string511);
              var opresult529 = callmethodChecked(opresult527, "++", [1], call509);
              var opresult531 = callmethodChecked(opresult529, "++", [1], string507);
              var opresult533 = callmethodChecked(opresult531, "++", [1], call505);
              var opresult535 = callmethodChecked(opresult533, "++", [1], string502);
              if470 = opresult535;
            }
            if397 = if470;
          }
          return if397;
        };
        func386.paramCounts = [1];
        obj295.methods["pretty"] = func386;
        func386.definitionLine = 155;
        func386.definitionModule = "ast";
        var func536 = function(argcv) {    // method deepCopy
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for deepCopy"));
          setModuleName("ast");
          setLineNumber(169);    // compilenode block
          var block537 = new GraceBlock(this, 169, 1);
          setLineNumber(1);    // compilenode identifier
          block537.real = function(var_each) {
            setLineNumber(169);    // compilenode identifier
            return var_each;
          };
          var call538 = callmethodChecked(var_ancestorChain, "empty", [0]);
          onSelf = true;
          var call539 = callmethodChecked(this, "map()ancestors", [1, 1], block537, call538);
          return call539;
        };
        func536.paramCounts = [0];
        obj295.methods["deepCopy"] = func536;
        func536.definitionLine = 168;
        func536.definitionModule = "ast";
        var func540 = function(argcv) {    // method enclosingObject
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for enclosingObject"));
          setModuleName("ast");
          setLineNumber(172);    // compilenode call
          onSelf = true;
          var call541 = callmethodChecked(this, "scope", [0]);
          var call542 = callmethodChecked(call541, "enclosingObjectScope", [0]);
          var call543 = callmethodChecked(call542, "node", [0]);
          var var_obj = call543;
          setLineNumber(173);    // compilenode identifier
          return var_obj;
        };
        func540.paramCounts = [0];
        obj295.methods["enclosingObject"] = func540;
        func540.definitionLine = 171;
        func540.definitionModule = "ast";
        var func544 = function(argcv) {    // method addComment(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_cmtNode = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addComment(1)"));
          setModuleName("ast");
          var if545 = GraceDone;
          setLineNumber(176);    // compilenode call
          onSelf = true;
          var call546 = callmethodChecked(this, "comments", [0]);
          var opresult549 = callmethodChecked(GraceFalse, "==", [1], call546);
          if (Grace_isTrue(opresult549)) {
            setLineNumber(177);    // compilenode identifier
            onSelf = true;
            var call550 = callmethodChecked(this, "comments:=", [1], var_cmtNode);
            if545 = call550;
          } else {
            setLineNumber(179);    // compilenode call
            onSelf = true;
            var call551 = callmethodChecked(this, "comments", [0]);
            var call552 = callmethodChecked(call551, "extendCommentUsing", [1], var_cmtNode);
            if545 = call552;
          }
          return if545;
        };
        func544.paramCounts = [1];
        obj295.methods["addComment"] = func544;
        func544.definitionLine = 175;
        func544.definitionModule = "ast";
        var func553 = function(argcv) {    // method addComments(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_cmtNodeList = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addComments(1)"));
          setModuleName("ast");
          setLineNumber(183);    // compilenode block
          var block554 = new GraceBlock(this, 183, 1);
          setLineNumber(1);    // compilenode identifier
          block554.real = function(var_each) {
            setLineNumber(183);    // compilenode identifier
            onSelf = true;
            var call555 = callmethodChecked(this, "addComment", [1], var_each);
            return call555;
          };
          var call556 = callmethodChecked(var_cmtNodeList, "do", [1], block554);
          return call556;
        };
        func553.paramCounts = [1];
        obj295.methods["addComments"] = func553;
        func553.definitionLine = 182;
        func553.definitionModule = "ast";
        var func557 = function(argcv) {    // method statementName
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
          setModuleName("ast");
          setLineNumber(185);    // compilenode call
          onSelf = true;
          var call558 = callmethodChecked(this, "kind", [0]);
          return call558;
        };
        func557.paramCounts = [0];
        obj295.methods["statementName"] = func557;
        func557.definitionLine = 185;
        func557.definitionModule = "ast";
        setLineNumber(88);    // compilenode string
        var string559 = new GraceString("");
        obj295.data["register"] = string559;
        var reader_ast_register560 = function() {
          return this.data["register"];
        };
        obj295.methods["register"] = reader_ast_register560;
        obj295.data["register"] = string559;
        var writer_ast_register560 = function(argcv, o) {
          this.data["register"] = o;
          return GraceDone;
        };
        obj295.methods["register:="] = writer_ast_register560;
        obj295.mutable = true;
        setLineNumber(89);    // compilenode identifier
        var call561 = callmethodChecked(var_util, "linenum", [0]);
        obj295.data["line"] = call561;
        var reader_ast_line562 = function() {
          return this.data["line"];
        };
        obj295.methods["line"] = reader_ast_line562;
        obj295.data["line"] = call561;
        var writer_ast_line562 = function(argcv, o) {
          this.data["line"] = o;
          return GraceDone;
        };
        obj295.methods["line:="] = writer_ast_line562;
        obj295.mutable = true;
        setLineNumber(90);    // compilenode identifier
        var call563 = callmethodChecked(var_util, "linepos", [0]);
        obj295.data["linePos"] = call563;
        var reader_ast_linePos564 = function() {
          return this.data["linePos"];
        };
        obj295.methods["linePos"] = reader_ast_linePos564;
        obj295.data["linePos"] = call563;
        var writer_ast_linePos564 = function(argcv, o) {
          this.data["linePos"] = o;
          return GraceDone;
        };
        obj295.methods["linePos:="] = writer_ast_linePos564;
        obj295.mutable = true;
        setLineNumber(91);    // compilenode identifier
        obj295.data["symbolTable"] = var_fakeSymbolTable;
        var reader_ast_symbolTable565 = function() {
          return this.data["symbolTable"];
        };
        obj295.methods["symbolTable"] = reader_ast_symbolTable565;
        obj295.data["symbolTable"] = var_fakeSymbolTable;
        var writer_ast_symbolTable565 = function(argcv, o) {
          this.data["symbolTable"] = o;
          return GraceDone;
        };
        obj295.methods["symbolTable:="] = writer_ast_symbolTable565;
        reader_ast_symbolTable565.confidential = true;
        writer_ast_symbolTable565.confidential = true;
        obj295.mutable = true;
        setLineNumber(92);    // compilenode identifier
        obj295.data["comments"] = GraceFalse;
        var reader_ast_comments566 = function() {
          return this.data["comments"];
        };
        obj295.methods["comments"] = reader_ast_comments566;
        obj295.data["comments"] = GraceFalse;
        var writer_ast_comments566 = function(argcv, o) {
          this.data["comments"] = o;
          return GraceDone;
        };
        obj295.methods["comments:="] = writer_ast_comments566;
        obj295.mutable = true;
        superDepth = origSuperDepth;
      };
      obj_init_295.apply(inheritingObject, []);
      return obj295;
      };
      this.methods["baseNode()object"] = func294;
    setLineNumber(2396);    // compilenode method
    var func567 = function(argcv) {    // method aliasNew(1)old(1)
      var returnTarget = invocationCount;
      invocationCount++;
      var curarg = 1;
      var var_n = arguments[curarg];
      curarg++;
      if (argcv[0] !== 1)
        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for aliasNew (arg list 1) of aliasNew(1)old(1)"));
      var var_o = arguments[curarg];
      curarg++;
      if (argcv[1] !== 1)
        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for old (arg list 2) of aliasNew(1)old(1)"));
      setModuleName("ast");
      var obj568 = Grace_allocObject(GraceObject, "ast.aliasNew()old");
      obj568.definitionModule = "ast";
      obj568.definitionLine = 2396;
      obj568.outer = this;
      var reader_ast_outer569 = function() {
        return this.outer;
      };
      obj568.methods["outer"] = reader_ast_outer569;
      var obj_init_568 = function() {
        var origSuperDepth = superDepth;
        superDepth = obj568;
        var func570 = function(argcv) {    // method newName
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for newName"));
          setModuleName("ast");
          // newName is a simple accessor - elide try ... catch
          setLineNumber(2397);    // compilenode identifier
          return var_n;
        };
        func570.paramCounts = [0];
        obj568.methods["newName"] = func570;
        func570.definitionLine = 2397;
        func570.definitionModule = "ast";
        var func571 = function(argcv) {    // method oldName
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for oldName"));
          setModuleName("ast");
          // oldName is a simple accessor - elide try ... catch
          setLineNumber(2398);    // compilenode identifier
          return var_o;
        };
        func571.paramCounts = [0];
        obj568.methods["oldName"] = func571;
        func571.definitionLine = 2398;
        func571.definitionModule = "ast";
        var func572 = function(argcv) {    // method asString
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
          setModuleName("ast");
          setLineNumber(2399);    // compilenode string
          var string573 = new GraceString("");
          var call575 = callmethodChecked(var_o, "nameString", [0]);
          var string577 = new GraceString(" = ");
          var call579 = callmethodChecked(var_n, "nameString", [0]);
          var string581 = new GraceString("alias ");
          var opresult583 = callmethodChecked(string581, "++", [1], call579);
          var opresult585 = callmethodChecked(opresult583, "++", [1], string577);
          var opresult587 = callmethodChecked(opresult585, "++", [1], call575);
          var opresult589 = callmethodChecked(opresult587, "++", [1], string573);
          return opresult589;
        };
        func572.paramCounts = [0];
        obj568.methods["asString"] = func572;
        func572.definitionLine = 2399;
        func572.definitionModule = "ast";
        var func590 = function(argcv) {    // method pretty(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_depth = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
          setModuleName("ast");
          setLineNumber(2401);    // compilenode string
          var string591 = new GraceString("");
          var var_spc = string591;
          setLineNumber(2402);    // compilenode num
          var opresult594 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
          var block595 = new GraceBlock(this, 2402, 1);
          setLineNumber(1);    // compilenode identifier
          block595.real = function(var_i) {
            setLineNumber(2403);    // compilenode string
            var string596 = new GraceString("  ");
            var opresult599 = callmethodChecked(var_spc, "++", [1], string596);
            var_spc = opresult599;
            return GraceDone;
          };
          var call600 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult594, block595);
          setLineNumber(2405);    // compilenode string
          var string601 = new GraceString("");
          var call603 = callmethodChecked(var_o, "pretty", [1], var_depth);
          var string605 = new GraceString(" = ");
          var call607 = callmethodChecked(var_n, "pretty", [1], var_depth);
          var string609 = new GraceString("  alias ");
          var string612 = new GraceString("");
          var opresult614 = callmethodChecked(string612, "++", [1], var_spc);
          var opresult616 = callmethodChecked(opresult614, "++", [1], string609);
          var opresult618 = callmethodChecked(opresult616, "++", [1], call607);
          var opresult620 = callmethodChecked(opresult618, "++", [1], string605);
          var opresult622 = callmethodChecked(opresult620, "++", [1], call603);
          var opresult624 = callmethodChecked(opresult622, "++", [1], string601);
          return opresult624;
        };
        func590.paramCounts = [1];
        obj568.methods["pretty"] = func590;
        func590.definitionLine = 2400;
        func590.definitionModule = "ast";
        var func625 = function(argcv) {    // method hash
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for hash"));
          setModuleName("ast");
          setLineNumber(2407);    // compilenode identifier
          var call626 = callmethodChecked(var_o, "hash", [0]);
          var call629 = callmethodChecked(var_n, "hash", [0]);
          var prod631 = callmethodChecked(call629, "*", [1], new GraceNum(1171));
          var opresult633 = callmethodChecked(prod631, "+", [1], call626);
          return opresult633;
        };
        func625.paramCounts = [0];
        obj568.methods["hash"] = func625;
        func625.definitionLine = 2407;
        func625.definitionModule = "ast";
        var func634 = function(argcv) {    // method isExecutable
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
          setModuleName("ast");
          // isExecutable is a simple accessor - elide try ... catch
          setLineNumber(2408);    // compilenode identifier
          return GraceFalse;
        };
        func634.paramCounts = [0];
        obj568.methods["isExecutable"] = func634;
        func634.definitionLine = 2408;
        func634.definitionModule = "ast";
        var func635 = function(argcv) {    // method ==(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_other = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
          setModuleName("ast");
          setLineNumber(2410);    // compilenode identifier
          var cases636 = [];
          setLineNumber(2411);    // compilenode block
          var block637 = new GraceBlock(this, 2411, 1);
          setLineNumber(0);    // compilenode string
          var string638 = new GraceString("that");
          var call639 = callmethodChecked(var_prelude, "VariablePattern", [0]);
          var call640 = callmethodChecked(call639, "new", [1], string638);
          var call641 = callmethodChecked(var_prelude, "AndPattern", [0]);
          var call642 = callmethodChecked(call641, "new", [2], call640, var_AliasPair);
          block637.pattern = call642;
          setLineNumber(2411);    // compilenode identifier
          block637.paramTypes = [var_AliasPair];
          block637.real = function(var_that) {
            var call643 = callmethodChecked(var_that, "oldName", [0]);
            var opresult646 = callmethodChecked(var_o, "==", [1], call643);
            var call648 = callmethodChecked(var_that, "newName", [0]);
            var opresult651 = callmethodChecked(var_n, "==", [1], call648);
            var opresult653 = callmethodChecked(opresult651, "&&", [1], opresult646);
            return opresult653;
          };
          cases636.push(block637);
          setLineNumber(2412);    // compilenode block
          var block654 = new GraceBlock(this, 2412, 1);
          setLineNumber(1);    // compilenode identifier
          block654.real = function(var___95____95__2) {
            setLineNumber(2412);    // compilenode identifier
            return GraceFalse;
          };
          cases636.push(block654);
          setLineNumber(2410);    // compilematchcase
          var matchres636 = matchCase(var_other,cases636,false);
          setModuleName("ast");
          return matchres636;
        };
        func635.paramCounts = [1];
        obj568.methods["=="] = func635;
        func635.definitionLine = 2409;
        func635.definitionModule = "ast";
        superDepth = origSuperDepth;
      };
      obj_init_568.apply(obj568, []);
      return obj568;
    };
    func567.paramCounts = [1, 1];
    this.methods["aliasNew()old"] = func567;
    func567.definitionLine = 2396;
    func567.definitionModule = "ast";
      var func655 = function(argcv) {    // method aliasNew(1     )old(1     )()object
        var curarg = 1;
        var var_n = arguments[curarg];
        curarg++;
        var var_o = arguments[curarg];
        curarg++;
        var inheritingObject = arguments[curarg++];
        // Start argument processing
        curarg = 1;
        curarg++;
        curarg++;
        // End argument processing
        setModuleName("ast");
        var returnTarget = invocationCount;
        invocationCount++;
        var obj656 = Grace_allocObject(GraceObject, "aliasNew()old");
        obj656.definitionModule = "ast";
        obj656.definitionLine = 2396;
        var inho656 = inheritingObject;
        while (inho656.superobj) inho656 = inho656.superobj;
        inho656.superobj = obj656;
        obj656.data = inheritingObject.data;
        if (inheritingObject.hasOwnProperty('_value'))
          obj656._value = inheritingObject._value;
        obj656.outer = this;
        var reader_ast_outer657 = function() {
          return this.outer;
        };
        obj656.methods["outer"] = reader_ast_outer657;
        var obj_init_656 = function() {
          var origSuperDepth = superDepth;
          superDepth = obj656;
          var func658 = function(argcv) {    // method newName
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for newName"));
            setModuleName("ast");
            // newName is a simple accessor - elide try ... catch
            setLineNumber(2397);    // compilenode identifier
            return var_n;
          };
          func658.paramCounts = [0];
          obj656.methods["newName"] = func658;
          func658.definitionLine = 2397;
          func658.definitionModule = "ast";
          var func659 = function(argcv) {    // method oldName
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for oldName"));
            setModuleName("ast");
            // oldName is a simple accessor - elide try ... catch
            setLineNumber(2398);    // compilenode identifier
            return var_o;
          };
          func659.paramCounts = [0];
          obj656.methods["oldName"] = func659;
          func659.definitionLine = 2398;
          func659.definitionModule = "ast";
          var func660 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
            setModuleName("ast");
            setLineNumber(2399);    // compilenode string
            var string661 = new GraceString("");
            var call663 = callmethodChecked(var_o, "nameString", [0]);
            var string665 = new GraceString(" = ");
            var call667 = callmethodChecked(var_n, "nameString", [0]);
            var string669 = new GraceString("alias ");
            var opresult671 = callmethodChecked(string669, "++", [1], call667);
            var opresult673 = callmethodChecked(opresult671, "++", [1], string665);
            var opresult675 = callmethodChecked(opresult673, "++", [1], call663);
            var opresult677 = callmethodChecked(opresult675, "++", [1], string661);
            return opresult677;
          };
          func660.paramCounts = [0];
          obj656.methods["asString"] = func660;
          func660.definitionLine = 2399;
          func660.definitionModule = "ast";
          var func678 = function(argcv) {    // method pretty(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_depth = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
            setModuleName("ast");
            setLineNumber(2401);    // compilenode string
            var string679 = new GraceString("");
            var var_spc = string679;
            setLineNumber(2402);    // compilenode num
            var opresult682 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
            var block683 = new GraceBlock(this, 2402, 1);
            setLineNumber(1);    // compilenode identifier
            block683.real = function(var_i) {
              setLineNumber(2403);    // compilenode string
              var string684 = new GraceString("  ");
              var opresult687 = callmethodChecked(var_spc, "++", [1], string684);
              var_spc = opresult687;
              return GraceDone;
            };
            var call688 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult682, block683);
            setLineNumber(2405);    // compilenode string
            var string689 = new GraceString("");
            var call691 = callmethodChecked(var_o, "pretty", [1], var_depth);
            var string693 = new GraceString(" = ");
            var call695 = callmethodChecked(var_n, "pretty", [1], var_depth);
            var string697 = new GraceString("  alias ");
            var string700 = new GraceString("");
            var opresult702 = callmethodChecked(string700, "++", [1], var_spc);
            var opresult704 = callmethodChecked(opresult702, "++", [1], string697);
            var opresult706 = callmethodChecked(opresult704, "++", [1], call695);
            var opresult708 = callmethodChecked(opresult706, "++", [1], string693);
            var opresult710 = callmethodChecked(opresult708, "++", [1], call691);
            var opresult712 = callmethodChecked(opresult710, "++", [1], string689);
            return opresult712;
          };
          func678.paramCounts = [1];
          obj656.methods["pretty"] = func678;
          func678.definitionLine = 2400;
          func678.definitionModule = "ast";
          var func713 = function(argcv) {    // method hash
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for hash"));
            setModuleName("ast");
            setLineNumber(2407);    // compilenode identifier
            var call714 = callmethodChecked(var_o, "hash", [0]);
            var call717 = callmethodChecked(var_n, "hash", [0]);
            var prod719 = callmethodChecked(call717, "*", [1], new GraceNum(1171));
            var opresult721 = callmethodChecked(prod719, "+", [1], call714);
            return opresult721;
          };
          func713.paramCounts = [0];
          obj656.methods["hash"] = func713;
          func713.definitionLine = 2407;
          func713.definitionModule = "ast";
          var func722 = function(argcv) {    // method isExecutable
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
            setModuleName("ast");
            // isExecutable is a simple accessor - elide try ... catch
            setLineNumber(2408);    // compilenode identifier
            return GraceFalse;
          };
          func722.paramCounts = [0];
          obj656.methods["isExecutable"] = func722;
          func722.definitionLine = 2408;
          func722.definitionModule = "ast";
          var func723 = function(argcv) {    // method ==(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_other = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
            setModuleName("ast");
            setLineNumber(2410);    // compilenode identifier
            var cases724 = [];
            setLineNumber(2411);    // compilenode block
            var block725 = new GraceBlock(this, 2411, 1);
            setLineNumber(0);    // compilenode string
            var string726 = new GraceString("that");
            var call727 = callmethodChecked(var_prelude, "VariablePattern", [0]);
            var call728 = callmethodChecked(call727, "new", [1], string726);
            var call729 = callmethodChecked(var_prelude, "AndPattern", [0]);
            var call730 = callmethodChecked(call729, "new", [2], call728, var_AliasPair);
            block725.pattern = call730;
            setLineNumber(2411);    // compilenode identifier
            block725.paramTypes = [var_AliasPair];
            block725.real = function(var_that) {
              var call731 = callmethodChecked(var_that, "oldName", [0]);
              var opresult734 = callmethodChecked(var_o, "==", [1], call731);
              var call736 = callmethodChecked(var_that, "newName", [0]);
              var opresult739 = callmethodChecked(var_n, "==", [1], call736);
              var opresult741 = callmethodChecked(opresult739, "&&", [1], opresult734);
              return opresult741;
            };
            cases724.push(block725);
            setLineNumber(2412);    // compilenode block
            var block742 = new GraceBlock(this, 2412, 1);
            setLineNumber(1);    // compilenode identifier
            block742.real = function(var___95____95__2) {
              setLineNumber(2412);    // compilenode identifier
              return GraceFalse;
            };
            cases724.push(block742);
            setLineNumber(2410);    // compilematchcase
            var matchres724 = matchCase(var_other,cases724,false);
            setModuleName("ast");
            return matchres724;
          };
          func723.paramCounts = [1];
          obj656.methods["=="] = func723;
          func723.definitionLine = 2409;
          func723.definitionModule = "ast";
          superDepth = origSuperDepth;
        };
        obj_init_656.apply(inheritingObject, []);
        return obj656;
        };
        this.methods["aliasNew()old()object"] = func655;
      setLineNumber(2614);    // compilenode method
      var func743 = function(argcv) {    // method wrap(1)to(1)prefix(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_str = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for wrap (arg list 1) of wrap(1)to(1)prefix(1)"));
        var var_l = arguments[curarg];
        curarg++;
        if (argcv[1] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 2) of wrap(1)to(1)prefix(1)"));
        var var_margin = arguments[curarg];
        curarg++;
        if (argcv[2] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for prefix (arg list 3) of wrap(1)to(1)prefix(1)"));
        // Start argument checking
        curarg = 1;
        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in wrap (arg list 1), which corresponds to parameter str, does not have " + 
                    callmethod(var_String, "asString", [0])._value + "."));
        curarg++;
        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in to (arg list 2), which corresponds to parameter l, does not have " + 
                    callmethod(var_Number, "asString", [0])._value + "."));
        curarg++;
        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in prefix (arg list 3), which corresponds to parameter margin, does not have " + 
                    callmethod(var_String, "asString", [0])._value + "."));
        curarg++;
        // End argument checking
        setModuleName("ast");
        setLineNumber(2615);    // compilenode identifier
        var call744 = callmethodChecked(var_margin, "size", [0]);
        var var_ind = call744;
        setLineNumber(2616);    // compilenode identifier
        var opresult747 = callmethodChecked(var_ind, "+", [1], new GraceNum(4));
        var call748 = callmethodChecked(var_prelude, "max", [2], opresult747, var_l);
        var var_len = call748;
        var if749 = GraceDone;
        setLineNumber(2617);    // compilenode identifier
        var call751 = callmethodChecked(var_str, "size", [0]);
        var opresult754 = callmethodChecked(var_ind, "+", [1], call751);
        var opresult756 = callmethodChecked(opresult754, "\u2264", [1], var_len);
        if (Grace_isTrue(opresult756)) {
          setLineNumber(2618);    // compilenode string
          var string759 = new GraceString("\n");
          var opresult761 = callmethodChecked(string759, "++", [1], var_margin);
          var opresult763 = callmethodChecked(opresult761, "++", [1], var_str);
          return opresult763;
        }
        setLineNumber(2620);    // compilenode vardec
        var var_currBreak;
        setLineNumber(2621);    // compilenode vardec
        var var_trimmedLine;
        setLineNumber(2623);    // compilenode block
        var block765 = new GraceBlock(this, 2623, 0);
        block765.real = function() {
          setLineNumber(2624);    // compilenode string
          var string766 = new GraceString(" ");
          var diff769 = callmethodChecked(var_len, "-", [1], var_ind);
          setLineNumber(2625);    // compilenode block
          var block770 = new GraceBlock(this, 2625, 0);
          block770.real = function() {
            var diff773 = callmethodChecked(var_len, "-", [1], var_ind);
            return diff773;
          };
          setLineNumber(2624);    // compilenode identifier
          var call774 = callmethodChecked(var_str, "lastIndexOf()startingAt()ifAbsent", [1, 1, 1], string766, diff769, block770);
          var_currBreak = call774;
          setLineNumber(2626);    // compilenode identifier
          var call775 = callmethodChecked(var_str, "substringFrom()to", [1, 1], new GraceNum(1), var_currBreak);
          var call776 = callmethodChecked(call775, "trim", [0]);
          var_trimmedLine = call776;
          return GraceDone;
        };
        var cases764 = [];
        setLineNumber(2627);    // compilenode block
        var block777 = new GraceBlock(this, 2627, 1);
        setLineNumber(0);    // compilenode string
        var string778 = new GraceString("ex");
        var call779 = callmethodChecked(var_prelude, "VariablePattern", [0]);
        var call780 = callmethodChecked(call779, "new", [1], string778);
        setLineNumber(2627);    // compilenode call
        var call781 = callmethodChecked(var_prelude, "NoSuchMethod", [0]);
        setLineNumber(0);    // compilenode call
        var call782 = callmethodChecked(var_prelude, "AndPattern", [0]);
        var call783 = callmethodChecked(call782, "new", [2], call780, call781);
        block777.pattern = call783;
        setLineNumber(2627);    // compilenode call
        var call784 = callmethodChecked(var_prelude, "NoSuchMethod", [0]);
        block777.paramTypes = [call784];
        block777.real = function(var_ex) {
          setLineNumber(2628);    // compilenode identifier
          var diff787 = callmethodChecked(var_len, "-", [1], var_ind);
          var call788 = callmethodChecked(var_str, "size", [0]);
          var call789 = callmethodChecked(var_prelude, "min", [2], diff787, call788);
          var_currBreak = call789;
          setLineNumber(2629);    // compilenode block
          var block790 = new GraceBlock(this, 2629, 1);
          setLineNumber(1);    // compilenode identifier
          block790.real = function(var_ix) {
            var if791 = GraceDone;
            setLineNumber(2630);    // compilenode string
            var string792 = new GraceString(" ");
            var call794 = callmethodChecked(var_str, "at", [1], var_ix);
            var opresult796 = callmethodChecked(call794, "==", [1], string792);
            if (Grace_isTrue(opresult796)) {
              var_currBreak = var_ix;
              if791 = GraceDone;
            }
            return if791;
          };
          setLineNumber(2629);    // compilenode num
          var opresult799 = callmethodChecked(new GraceNum(1), "..", [1], var_currBreak);
          var call800 = callmethodChecked(opresult799, "do", [1], block790);
          setLineNumber(2632);    // compilenode identifier
          var var_end = var_currBreak;
          setLineNumber(2633);    // compilenode block
          var block801 = new GraceBlock(this, 2633, 0);
          block801.real = function() {
            var block802 = new GraceBlock(this, 2633, 0);
            block802.real = function() {
              var string803 = new GraceString(" ");
              var call805 = callmethodChecked(var_str, "at", [1], var_end);
              var opresult807 = callmethodChecked(call805, "==", [1], string803);
              return opresult807;
            };
            var opresult811 = callmethodChecked(var_end, "\u2265", [1], new GraceNum(1));
            var opresult813 = callmethodChecked(opresult811, "&&", [1], block802);
            return opresult813;
          };
          var block814 = new GraceBlock(this, 2633, 0);
          block814.real = function() {
            setLineNumber(2634);    // compilenode identifier
            var diff817 = callmethodChecked(var_end, "-", [1], new GraceNum(1));
            var_end = diff817;
            return GraceDone;
          };
          var call818 = callmethodChecked(var_prelude, "while()do", [1, 1], block801, block814);
          setLineNumber(2636);    // compilenode num
          var var_start = new GraceNum(1);
          setLineNumber(2637);    // compilenode block
          var block819 = new GraceBlock(this, 2637, 0);
          block819.real = function() {
            var block820 = new GraceBlock(this, 2637, 0);
            block820.real = function() {
              var string821 = new GraceString(" ");
              var call823 = callmethodChecked(var_str, "at", [1], var_start);
              var opresult825 = callmethodChecked(call823, "==", [1], string821);
              return opresult825;
            };
            var call827 = callmethodChecked(var_str, "size", [0]);
            var opresult830 = callmethodChecked(var_start, "\u2264", [1], call827);
            var opresult832 = callmethodChecked(opresult830, "&&", [1], block820);
            return opresult832;
          };
          var block833 = new GraceBlock(this, 2637, 0);
          block833.real = function() {
            setLineNumber(2638);    // compilenode identifier
            var opresult836 = callmethodChecked(var_start, "+", [1], new GraceNum(1));
            var_start = opresult836;
            return GraceDone;
          };
          var call837 = callmethodChecked(var_prelude, "while()do", [1, 1], block819, block833);
          setLineNumber(2640);    // compilenode identifier
          var call838 = callmethodChecked(var_str, "substringFrom()to", [1, 1], var_start, var_end);
          var_trimmedLine = call838;
          return GraceDone;
        };
        cases764.push(block777);
        setLineNumber(2623);    // compiletrycatch
        var catchres764 = tryCatch(block765,cases764,false);
        setModuleName("ast");
        setLineNumber(2643);    // compilenode identifier
        var opresult841 = callmethodChecked(var_currBreak, "+", [1], new GraceNum(1));
        var call842 = callmethodChecked(var_str, "size", [0]);
        var call843 = callmethodChecked(var_str, "substringFrom()to", [1, 1], opresult841, call842);
        setLineNumber(2644);    // compilenode identifier
        onSelf = true;
        var call844 = callmethodChecked(this, "wrap()to()prefix", [1, 1, 1], call843, var_l, var_margin);
        setLineNumber(2642);    // compilenode string
        var string848 = new GraceString("\n");
        var opresult850 = callmethodChecked(string848, "++", [1], var_margin);
        var opresult852 = callmethodChecked(opresult850, "++", [1], var_trimmedLine);
        var opresult854 = callmethodChecked(opresult852, "++", [1], call844);
        return opresult854;
      };
      func743.paramTypes = [];
      func743.paramTypes.push([type_String, "str"]);
      func743.paramTypes.push([type_Number, "l"]);
      func743.paramTypes.push([type_String, "margin"]);
      func743.paramCounts = [1, 1, 1];
      this.methods["wrap()to()prefix"] = func743;
      func743.definitionLine = 2614;
      func743.definitionModule = "ast";
      setLineNumber(2680);    // compilenode method
      var func855 = function(argcv) {    // method baseVisitor
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for baseVisitor"));
        setModuleName("ast");
        var obj856 = Grace_allocObject(GraceObject, "ast.baseVisitor");
        obj856.definitionModule = "ast";
        obj856.definitionLine = 2680;
        obj856.outer = this;
        var reader_ast_outer857 = function() {
          return this.outer;
        };
        obj856.methods["outer"] = reader_ast_outer857;
        var obj_init_856 = function() {
          var origSuperDepth = superDepth;
          superDepth = obj856;
          var func858 = function(argcv) {    // method visitIf(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIf (arg list 1) of visitIf(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitIf(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2681);    // compilenode identifier
            onSelf = true;
            var call859 = callmethodChecked(this, "visitIf", [1], var_o);
            return call859;
          };
          func858.paramCounts = [1, 1];
          obj856.methods["visitIf()up"] = func858;
          func858.definitionLine = 2681;
          func858.definitionModule = "ast";
          var func860 = function(argcv) {    // method visitBlock(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlock (arg list 1) of visitBlock(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBlock(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2682);    // compilenode identifier
            onSelf = true;
            var call861 = callmethodChecked(this, "visitBlock", [1], var_o);
            return call861;
          };
          func860.paramCounts = [1, 1];
          obj856.methods["visitBlock()up"] = func860;
          func860.definitionLine = 2682;
          func860.definitionModule = "ast";
          var func862 = function(argcv) {    // method visitMatchCase(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMatchCase (arg list 1) of visitMatchCase(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMatchCase(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2683);    // compilenode identifier
            onSelf = true;
            var call863 = callmethodChecked(this, "visitMatchCase", [1], var_o);
            return call863;
          };
          func862.paramCounts = [1, 1];
          obj856.methods["visitMatchCase()up"] = func862;
          func862.definitionLine = 2683;
          func862.definitionModule = "ast";
          var func864 = function(argcv) {    // method visitTryCatch(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTryCatch (arg list 1) of visitTryCatch(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTryCatch(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2684);    // compilenode identifier
            onSelf = true;
            var call865 = callmethodChecked(this, "visitTryCatch", [1], var_o);
            return call865;
          };
          func864.paramCounts = [1, 1];
          obj856.methods["visitTryCatch()up"] = func864;
          func864.definitionLine = 2684;
          func864.definitionModule = "ast";
          var func866 = function(argcv) {    // method visitMethodType(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethodType (arg list 1) of visitMethodType(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMethodType(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2685);    // compilenode identifier
            onSelf = true;
            var call867 = callmethodChecked(this, "visitMethodType", [1], var_o);
            return call867;
          };
          func866.paramCounts = [1, 1];
          obj856.methods["visitMethodType()up"] = func866;
          func866.definitionLine = 2685;
          func866.definitionModule = "ast";
          var func868 = function(argcv) {    // method visitSignaturePart(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitSignaturePart (arg list 1) of visitSignaturePart(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitSignaturePart(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2686);    // compilenode identifier
            onSelf = true;
            var call869 = callmethodChecked(this, "visitSignaturePart", [1], var_o);
            return call869;
          };
          func868.paramCounts = [1, 1];
          obj856.methods["visitSignaturePart()up"] = func868;
          func868.definitionLine = 2686;
          func868.definitionModule = "ast";
          var func870 = function(argcv) {    // method visitTypeDec(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeDec (arg list 1) of visitTypeDec(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTypeDec(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2687);    // compilenode identifier
            onSelf = true;
            var call871 = callmethodChecked(this, "visitTypeDec", [1], var_o);
            return call871;
          };
          func870.paramCounts = [1, 1];
          obj856.methods["visitTypeDec()up"] = func870;
          func870.definitionLine = 2687;
          func870.definitionModule = "ast";
          var func872 = function(argcv) {    // method visitTypeLiteral(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeLiteral (arg list 1) of visitTypeLiteral(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTypeLiteral(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2688);    // compilenode identifier
            onSelf = true;
            var call873 = callmethodChecked(this, "visitTypeLiteral", [1], var_o);
            return call873;
          };
          func872.paramCounts = [1, 1];
          obj856.methods["visitTypeLiteral()up"] = func872;
          func872.definitionLine = 2688;
          func872.definitionModule = "ast";
          var func874 = function(argcv) {    // method visitTypeParameters(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeParameters (arg list 1) of visitTypeParameters(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTypeParameters(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2689);    // compilenode identifier
            onSelf = true;
            var call875 = callmethodChecked(this, "visitTypeParameters", [1], var_o);
            return call875;
          };
          func874.paramCounts = [1, 1];
          obj856.methods["visitTypeParameters()up"] = func874;
          func874.definitionLine = 2689;
          func874.definitionModule = "ast";
          var func876 = function(argcv) {    // method visitMethod(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethod (arg list 1) of visitMethod(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMethod(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2690);    // compilenode identifier
            onSelf = true;
            var call877 = callmethodChecked(this, "visitMethod", [1], var_o);
            return call877;
          };
          func876.paramCounts = [1, 1];
          obj856.methods["visitMethod()up"] = func876;
          func876.definitionLine = 2690;
          func876.definitionModule = "ast";
          var func878 = function(argcv) {    // method visitCall(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitCall (arg list 1) of visitCall(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitCall(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2691);    // compilenode identifier
            onSelf = true;
            var call879 = callmethodChecked(this, "visitCall", [1], var_o);
            return call879;
          };
          func878.paramCounts = [1, 1];
          obj856.methods["visitCall()up"] = func878;
          func878.definitionLine = 2691;
          func878.definitionModule = "ast";
          var func880 = function(argcv) {    // method visitObject(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitObject (arg list 1) of visitObject(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitObject(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2692);    // compilenode identifier
            onSelf = true;
            var call881 = callmethodChecked(this, "visitObject", [1], var_o);
            return call881;
          };
          func880.paramCounts = [1, 1];
          obj856.methods["visitObject()up"] = func880;
          func880.definitionLine = 2692;
          func880.definitionModule = "ast";
          var func882 = function(argcv) {    // method visitModule(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitModule (arg list 1) of visitModule(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitModule(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2693);    // compilenode identifier
            onSelf = true;
            var call883 = callmethodChecked(this, "visitObject", [1], var_o);
            return call883;
          };
          func882.paramCounts = [1, 1];
          obj856.methods["visitModule()up"] = func882;
          func882.definitionLine = 2693;
          func882.definitionModule = "ast";
          var func884 = function(argcv) {    // method visitArray(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitArray (arg list 1) of visitArray(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitArray(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2694);    // compilenode identifier
            onSelf = true;
            var call885 = callmethodChecked(this, "visitArray", [1], var_o);
            return call885;
          };
          func884.paramCounts = [1, 1];
          obj856.methods["visitArray()up"] = func884;
          func884.definitionLine = 2694;
          func884.definitionModule = "ast";
          var func886 = function(argcv) {    // method visitMember(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMember (arg list 1) of visitMember(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMember(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2695);    // compilenode identifier
            onSelf = true;
            var call887 = callmethodChecked(this, "visitMember", [1], var_o);
            return call887;
          };
          func886.paramCounts = [1, 1];
          obj856.methods["visitMember()up"] = func886;
          func886.definitionLine = 2695;
          func886.definitionModule = "ast";
          var func888 = function(argcv) {    // method visitGeneric(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitGeneric (arg list 1) of visitGeneric(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitGeneric(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2696);    // compilenode identifier
            onSelf = true;
            var call889 = callmethodChecked(this, "visitGeneric", [1], var_o);
            return call889;
          };
          func888.paramCounts = [1, 1];
          obj856.methods["visitGeneric()up"] = func888;
          func888.definitionLine = 2696;
          func888.definitionModule = "ast";
          var func890 = function(argcv) {    // method visitIdentifier(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIdentifier (arg list 1) of visitIdentifier(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitIdentifier(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2697);    // compilenode identifier
            onSelf = true;
            var call891 = callmethodChecked(this, "visitIdentifier", [1], var_o);
            return call891;
          };
          func890.paramCounts = [1, 1];
          obj856.methods["visitIdentifier()up"] = func890;
          func890.definitionLine = 2697;
          func890.definitionModule = "ast";
          var func892 = function(argcv) {    // method visitString(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitString (arg list 1) of visitString(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitString(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2698);    // compilenode identifier
            onSelf = true;
            var call893 = callmethodChecked(this, "visitString", [1], var_o);
            return call893;
          };
          func892.paramCounts = [1, 1];
          obj856.methods["visitString()up"] = func892;
          func892.definitionLine = 2698;
          func892.definitionModule = "ast";
          var func894 = function(argcv) {    // method visitNum(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitNum (arg list 1) of visitNum(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitNum(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2699);    // compilenode identifier
            onSelf = true;
            var call895 = callmethodChecked(this, "visitNum", [1], var_o);
            return call895;
          };
          func894.paramCounts = [1, 1];
          obj856.methods["visitNum()up"] = func894;
          func894.definitionLine = 2699;
          func894.definitionModule = "ast";
          var func896 = function(argcv) {    // method visitOp(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitOp (arg list 1) of visitOp(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitOp(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2700);    // compilenode identifier
            onSelf = true;
            var call897 = callmethodChecked(this, "visitOp", [1], var_o);
            return call897;
          };
          func896.paramCounts = [1, 1];
          obj856.methods["visitOp()up"] = func896;
          func896.definitionLine = 2700;
          func896.definitionModule = "ast";
          var func898 = function(argcv) {    // method visitBind(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBind (arg list 1) of visitBind(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBind(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2701);    // compilenode identifier
            onSelf = true;
            var call899 = callmethodChecked(this, "visitBind", [1], var_o);
            return call899;
          };
          func898.paramCounts = [1, 1];
          obj856.methods["visitBind()up"] = func898;
          func898.definitionLine = 2701;
          func898.definitionModule = "ast";
          var func900 = function(argcv) {    // method visitDefDec(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDefDec (arg list 1) of visitDefDec(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitDefDec(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2702);    // compilenode identifier
            onSelf = true;
            var call901 = callmethodChecked(this, "visitDefDec", [1], var_o);
            return call901;
          };
          func900.paramCounts = [1, 1];
          obj856.methods["visitDefDec()up"] = func900;
          func900.definitionLine = 2702;
          func900.definitionModule = "ast";
          var func902 = function(argcv) {    // method visitVarDec(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitVarDec (arg list 1) of visitVarDec(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitVarDec(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2703);    // compilenode identifier
            onSelf = true;
            var call903 = callmethodChecked(this, "visitVarDec", [1], var_o);
            return call903;
          };
          func902.paramCounts = [1, 1];
          obj856.methods["visitVarDec()up"] = func902;
          func902.definitionLine = 2703;
          func902.definitionModule = "ast";
          var func904 = function(argcv) {    // method visitImport(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitImport (arg list 1) of visitImport(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitImport(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2704);    // compilenode identifier
            onSelf = true;
            var call905 = callmethodChecked(this, "visitImport", [1], var_o);
            return call905;
          };
          func904.paramCounts = [1, 1];
          obj856.methods["visitImport()up"] = func904;
          func904.definitionLine = 2704;
          func904.definitionModule = "ast";
          var func906 = function(argcv) {    // method visitReturn(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitReturn (arg list 1) of visitReturn(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitReturn(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2705);    // compilenode identifier
            onSelf = true;
            var call907 = callmethodChecked(this, "visitReturn", [1], var_o);
            return call907;
          };
          func906.paramCounts = [1, 1];
          obj856.methods["visitReturn()up"] = func906;
          func906.definitionLine = 2705;
          func906.definitionModule = "ast";
          var func908 = function(argcv) {    // method visitInherits(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitInherits (arg list 1) of visitInherits(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitInherits(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2706);    // compilenode identifier
            onSelf = true;
            var call909 = callmethodChecked(this, "visitInherits", [1], var_o);
            return call909;
          };
          func908.paramCounts = [1, 1];
          obj856.methods["visitInherits()up"] = func908;
          func908.definitionLine = 2706;
          func908.definitionModule = "ast";
          var func910 = function(argcv) {    // method visitDialect(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDialect (arg list 1) of visitDialect(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitDialect(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2707);    // compilenode identifier
            onSelf = true;
            var call911 = callmethodChecked(this, "visitDialect", [1], var_o);
            return call911;
          };
          func910.paramCounts = [1, 1];
          obj856.methods["visitDialect()up"] = func910;
          func910.definitionLine = 2707;
          func910.definitionModule = "ast";
          var func912 = function(argcv) {    // method visitBlank(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlank (arg list 1) of visitBlank(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBlank(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2708);    // compilenode identifier
            onSelf = true;
            var call913 = callmethodChecked(this, "visitBlank", [1], var_o);
            return call913;
          };
          func912.paramCounts = [1, 1];
          obj856.methods["visitBlank()up"] = func912;
          func912.definitionLine = 2708;
          func912.definitionModule = "ast";
          var func914 = function(argcv) {    // method visitComment(1)up(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitComment (arg list 1) of visitComment(1)up(1)"));
            var var_as = arguments[curarg];
            curarg++;
            if (argcv[1] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitComment(1)up(1)"));
            setModuleName("ast");
            setLineNumber(2709);    // compilenode identifier
            onSelf = true;
            var call915 = callmethodChecked(this, "visitComment", [1], var_o);
            return call915;
          };
          func914.paramCounts = [1, 1];
          obj856.methods["visitComment()up"] = func914;
          func914.definitionLine = 2709;
          func914.definitionModule = "ast";
          var func916 = function(argcv) {    // method visitIf(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIf(1)"));
            setModuleName("ast");
            // visitIf(1) is a simple accessor - elide try ... catch
            setLineNumber(2711);    // compilenode identifier
            return GraceTrue;
          };
          func916.paramCounts = [1];
          obj856.methods["visitIf"] = func916;
          func916.definitionLine = 2711;
          func916.definitionModule = "ast";
          var func917 = function(argcv) {    // method visitBlock(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlock(1)"));
            setModuleName("ast");
            // visitBlock(1) is a simple accessor - elide try ... catch
            setLineNumber(2712);    // compilenode identifier
            return GraceTrue;
          };
          func917.paramCounts = [1];
          obj856.methods["visitBlock"] = func917;
          func917.definitionLine = 2712;
          func917.definitionModule = "ast";
          var func918 = function(argcv) {    // method visitMatchCase(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMatchCase(1)"));
            setModuleName("ast");
            // visitMatchCase(1) is a simple accessor - elide try ... catch
            setLineNumber(2713);    // compilenode identifier
            return GraceTrue;
          };
          func918.paramCounts = [1];
          obj856.methods["visitMatchCase"] = func918;
          func918.definitionLine = 2713;
          func918.definitionModule = "ast";
          var func919 = function(argcv) {    // method visitTryCatch(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTryCatch(1)"));
            setModuleName("ast");
            // visitTryCatch(1) is a simple accessor - elide try ... catch
            setLineNumber(2714);    // compilenode identifier
            return GraceTrue;
          };
          func919.paramCounts = [1];
          obj856.methods["visitTryCatch"] = func919;
          func919.definitionLine = 2714;
          func919.definitionModule = "ast";
          var func920 = function(argcv) {    // method visitMethodType(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethodType(1)"));
            setModuleName("ast");
            // visitMethodType(1) is a simple accessor - elide try ... catch
            setLineNumber(2715);    // compilenode identifier
            return GraceTrue;
          };
          func920.paramCounts = [1];
          obj856.methods["visitMethodType"] = func920;
          func920.definitionLine = 2715;
          func920.definitionModule = "ast";
          var func921 = function(argcv) {    // method visitSignaturePart(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitSignaturePart(1)"));
            setModuleName("ast");
            // visitSignaturePart(1) is a simple accessor - elide try ... catch
            setLineNumber(2716);    // compilenode identifier
            return GraceTrue;
          };
          func921.paramCounts = [1];
          obj856.methods["visitSignaturePart"] = func921;
          func921.definitionLine = 2716;
          func921.definitionModule = "ast";
          var func922 = function(argcv) {    // method visitTypeDec(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeDec(1)"));
            setModuleName("ast");
            // visitTypeDec(1) is a simple accessor - elide try ... catch
            setLineNumber(2717);    // compilenode identifier
            return GraceTrue;
          };
          func922.paramCounts = [1];
          obj856.methods["visitTypeDec"] = func922;
          func922.definitionLine = 2717;
          func922.definitionModule = "ast";
          var func923 = function(argcv) {    // method visitTypeLiteral(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeLiteral(1)"));
            setModuleName("ast");
            // visitTypeLiteral(1) is a simple accessor - elide try ... catch
            setLineNumber(2718);    // compilenode identifier
            return GraceTrue;
          };
          func923.paramCounts = [1];
          obj856.methods["visitTypeLiteral"] = func923;
          func923.definitionLine = 2718;
          func923.definitionModule = "ast";
          var func924 = function(argcv) {    // method visitTypeParameters(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeParameters(1)"));
            setModuleName("ast");
            // visitTypeParameters(1) is a simple accessor - elide try ... catch
            setLineNumber(2719);    // compilenode identifier
            return GraceTrue;
          };
          func924.paramCounts = [1];
          obj856.methods["visitTypeParameters"] = func924;
          func924.definitionLine = 2719;
          func924.definitionModule = "ast";
          var func925 = function(argcv) {    // method visitMethod(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethod(1)"));
            setModuleName("ast");
            // visitMethod(1) is a simple accessor - elide try ... catch
            setLineNumber(2720);    // compilenode identifier
            return GraceTrue;
          };
          func925.paramCounts = [1];
          obj856.methods["visitMethod"] = func925;
          func925.definitionLine = 2720;
          func925.definitionModule = "ast";
          var func926 = function(argcv) {    // method visitCall(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitCall(1)"));
            setModuleName("ast");
            // visitCall(1) is a simple accessor - elide try ... catch
            setLineNumber(2721);    // compilenode identifier
            return GraceTrue;
          };
          func926.paramCounts = [1];
          obj856.methods["visitCall"] = func926;
          func926.definitionLine = 2721;
          func926.definitionModule = "ast";
          var func927 = function(argcv) {    // method visitObject(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitObject(1)"));
            setModuleName("ast");
            // visitObject(1) is a simple accessor - elide try ... catch
            setLineNumber(2722);    // compilenode identifier
            return GraceTrue;
          };
          func927.paramCounts = [1];
          obj856.methods["visitObject"] = func927;
          func927.definitionLine = 2722;
          func927.definitionModule = "ast";
          var func928 = function(argcv) {    // method visitModule(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitModule(1)"));
            setModuleName("ast");
            // visitModule(1) is a simple accessor - elide try ... catch
            setLineNumber(2723);    // compilenode identifier
            return GraceTrue;
          };
          func928.paramCounts = [1];
          obj856.methods["visitModule"] = func928;
          func928.definitionLine = 2723;
          func928.definitionModule = "ast";
          var func929 = function(argcv) {    // method visitArray(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitArray(1)"));
            setModuleName("ast");
            // visitArray(1) is a simple accessor - elide try ... catch
            setLineNumber(2724);    // compilenode identifier
            return GraceTrue;
          };
          func929.paramCounts = [1];
          obj856.methods["visitArray"] = func929;
          func929.definitionLine = 2724;
          func929.definitionModule = "ast";
          var func930 = function(argcv) {    // method visitMember(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMember(1)"));
            setModuleName("ast");
            // visitMember(1) is a simple accessor - elide try ... catch
            setLineNumber(2725);    // compilenode identifier
            return GraceTrue;
          };
          func930.paramCounts = [1];
          obj856.methods["visitMember"] = func930;
          func930.definitionLine = 2725;
          func930.definitionModule = "ast";
          var func931 = function(argcv) {    // method visitGeneric(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitGeneric(1)"));
            setModuleName("ast");
            // visitGeneric(1) is a simple accessor - elide try ... catch
            setLineNumber(2726);    // compilenode identifier
            return GraceTrue;
          };
          func931.paramCounts = [1];
          obj856.methods["visitGeneric"] = func931;
          func931.definitionLine = 2726;
          func931.definitionModule = "ast";
          var func932 = function(argcv) {    // method visitIdentifier(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIdentifier(1)"));
            setModuleName("ast");
            // visitIdentifier(1) is a simple accessor - elide try ... catch
            setLineNumber(2727);    // compilenode identifier
            return GraceTrue;
          };
          func932.paramCounts = [1];
          obj856.methods["visitIdentifier"] = func932;
          func932.definitionLine = 2727;
          func932.definitionModule = "ast";
          var func933 = function(argcv) {    // method visitString(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitString(1)"));
            setModuleName("ast");
            // visitString(1) is a simple accessor - elide try ... catch
            setLineNumber(2728);    // compilenode identifier
            return GraceTrue;
          };
          func933.paramCounts = [1];
          obj856.methods["visitString"] = func933;
          func933.definitionLine = 2728;
          func933.definitionModule = "ast";
          var func934 = function(argcv) {    // method visitNum(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitNum(1)"));
            setModuleName("ast");
            // visitNum(1) is a simple accessor - elide try ... catch
            setLineNumber(2729);    // compilenode identifier
            return GraceTrue;
          };
          func934.paramCounts = [1];
          obj856.methods["visitNum"] = func934;
          func934.definitionLine = 2729;
          func934.definitionModule = "ast";
          var func935 = function(argcv) {    // method visitOp(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitOp(1)"));
            setModuleName("ast");
            // visitOp(1) is a simple accessor - elide try ... catch
            setLineNumber(2730);    // compilenode identifier
            return GraceTrue;
          };
          func935.paramCounts = [1];
          obj856.methods["visitOp"] = func935;
          func935.definitionLine = 2730;
          func935.definitionModule = "ast";
          var func936 = function(argcv) {    // method visitBind(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBind(1)"));
            setModuleName("ast");
            // visitBind(1) is a simple accessor - elide try ... catch
            setLineNumber(2731);    // compilenode identifier
            return GraceTrue;
          };
          func936.paramCounts = [1];
          obj856.methods["visitBind"] = func936;
          func936.definitionLine = 2731;
          func936.definitionModule = "ast";
          var func937 = function(argcv) {    // method visitDefDec(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDefDec(1)"));
            setModuleName("ast");
            // visitDefDec(1) is a simple accessor - elide try ... catch
            setLineNumber(2732);    // compilenode identifier
            return GraceTrue;
          };
          func937.paramCounts = [1];
          obj856.methods["visitDefDec"] = func937;
          func937.definitionLine = 2732;
          func937.definitionModule = "ast";
          var func938 = function(argcv) {    // method visitVarDec(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitVarDec(1)"));
            setModuleName("ast");
            // visitVarDec(1) is a simple accessor - elide try ... catch
            setLineNumber(2733);    // compilenode identifier
            return GraceTrue;
          };
          func938.paramCounts = [1];
          obj856.methods["visitVarDec"] = func938;
          func938.definitionLine = 2733;
          func938.definitionModule = "ast";
          var func939 = function(argcv) {    // method visitImport(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitImport(1)"));
            setModuleName("ast");
            // visitImport(1) is a simple accessor - elide try ... catch
            setLineNumber(2734);    // compilenode identifier
            return GraceTrue;
          };
          func939.paramCounts = [1];
          obj856.methods["visitImport"] = func939;
          func939.definitionLine = 2734;
          func939.definitionModule = "ast";
          var func940 = function(argcv) {    // method visitReturn(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitReturn(1)"));
            setModuleName("ast");
            // visitReturn(1) is a simple accessor - elide try ... catch
            setLineNumber(2735);    // compilenode identifier
            return GraceTrue;
          };
          func940.paramCounts = [1];
          obj856.methods["visitReturn"] = func940;
          func940.definitionLine = 2735;
          func940.definitionModule = "ast";
          var func941 = function(argcv) {    // method visitInherits(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitInherits(1)"));
            setModuleName("ast");
            // visitInherits(1) is a simple accessor - elide try ... catch
            setLineNumber(2736);    // compilenode identifier
            return GraceTrue;
          };
          func941.paramCounts = [1];
          obj856.methods["visitInherits"] = func941;
          func941.definitionLine = 2736;
          func941.definitionModule = "ast";
          var func942 = function(argcv) {    // method visitDialect(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDialect(1)"));
            setModuleName("ast");
            // visitDialect(1) is a simple accessor - elide try ... catch
            setLineNumber(2737);    // compilenode identifier
            return GraceTrue;
          };
          func942.paramCounts = [1];
          obj856.methods["visitDialect"] = func942;
          func942.definitionLine = 2737;
          func942.definitionModule = "ast";
          var func943 = function(argcv) {    // method visitBlank(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlank(1)"));
            setModuleName("ast");
            // visitBlank(1) is a simple accessor - elide try ... catch
            setLineNumber(2738);    // compilenode identifier
            return GraceTrue;
          };
          func943.paramCounts = [1];
          obj856.methods["visitBlank"] = func943;
          func943.definitionLine = 2738;
          func943.definitionModule = "ast";
          var func944 = function(argcv) {    // method visitComment(1)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            if (argcv[0] !== 1)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitComment(1)"));
            setModuleName("ast");
            // visitComment(1) is a simple accessor - elide try ... catch
            setLineNumber(2739);    // compilenode identifier
            return GraceTrue;
          };
          func944.paramCounts = [1];
          obj856.methods["visitComment"] = func944;
          func944.definitionLine = 2739;
          func944.definitionModule = "ast";
          var func945 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
            setModuleName("ast");
            setLineNumber(2741);    // compilenode string
            var string946 = new GraceString("an AST visitor");
            return string946;
          };
          func945.paramCounts = [0];
          obj856.methods["asString"] = func945;
          func945.definitionLine = 2741;
          func945.definitionModule = "ast";
          superDepth = origSuperDepth;
        };
        obj_init_856.apply(obj856, []);
        setLineNumber(2680);    // return value
        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match", [1], obj856)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("result of method baseVisitor does not have " + 
                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
        return obj856;
      };
      func855.paramCounts = [0];
      this.methods["baseVisitor"] = func855;
      func855.definitionLine = 2680;
      func855.definitionModule = "ast";
        var func947 = function(argcv) {    // method baseVisitor()object
          var curarg = 1;
          var inheritingObject = arguments[curarg++];
          // Start argument processing
          curarg = 1;
          // End argument processing
          setModuleName("ast");
          var returnTarget = invocationCount;
          invocationCount++;
          var obj948 = Grace_allocObject(GraceObject, "baseVisitor");
          obj948.definitionModule = "ast";
          obj948.definitionLine = 2680;
          var inho948 = inheritingObject;
          while (inho948.superobj) inho948 = inho948.superobj;
          inho948.superobj = obj948;
          obj948.data = inheritingObject.data;
          if (inheritingObject.hasOwnProperty('_value'))
            obj948._value = inheritingObject._value;
          obj948.outer = this;
          var reader_ast_outer949 = function() {
            return this.outer;
          };
          obj948.methods["outer"] = reader_ast_outer949;
          var obj_init_948 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj948;
            var func950 = function(argcv) {    // method visitIf(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIf (arg list 1) of visitIf(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitIf(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2681);    // compilenode identifier
              onSelf = true;
              var call951 = callmethodChecked(this, "visitIf", [1], var_o);
              return call951;
            };
            func950.paramCounts = [1, 1];
            obj948.methods["visitIf()up"] = func950;
            func950.definitionLine = 2681;
            func950.definitionModule = "ast";
            var func952 = function(argcv) {    // method visitBlock(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlock (arg list 1) of visitBlock(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBlock(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2682);    // compilenode identifier
              onSelf = true;
              var call953 = callmethodChecked(this, "visitBlock", [1], var_o);
              return call953;
            };
            func952.paramCounts = [1, 1];
            obj948.methods["visitBlock()up"] = func952;
            func952.definitionLine = 2682;
            func952.definitionModule = "ast";
            var func954 = function(argcv) {    // method visitMatchCase(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMatchCase (arg list 1) of visitMatchCase(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMatchCase(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2683);    // compilenode identifier
              onSelf = true;
              var call955 = callmethodChecked(this, "visitMatchCase", [1], var_o);
              return call955;
            };
            func954.paramCounts = [1, 1];
            obj948.methods["visitMatchCase()up"] = func954;
            func954.definitionLine = 2683;
            func954.definitionModule = "ast";
            var func956 = function(argcv) {    // method visitTryCatch(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTryCatch (arg list 1) of visitTryCatch(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTryCatch(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2684);    // compilenode identifier
              onSelf = true;
              var call957 = callmethodChecked(this, "visitTryCatch", [1], var_o);
              return call957;
            };
            func956.paramCounts = [1, 1];
            obj948.methods["visitTryCatch()up"] = func956;
            func956.definitionLine = 2684;
            func956.definitionModule = "ast";
            var func958 = function(argcv) {    // method visitMethodType(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethodType (arg list 1) of visitMethodType(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMethodType(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2685);    // compilenode identifier
              onSelf = true;
              var call959 = callmethodChecked(this, "visitMethodType", [1], var_o);
              return call959;
            };
            func958.paramCounts = [1, 1];
            obj948.methods["visitMethodType()up"] = func958;
            func958.definitionLine = 2685;
            func958.definitionModule = "ast";
            var func960 = function(argcv) {    // method visitSignaturePart(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitSignaturePart (arg list 1) of visitSignaturePart(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitSignaturePart(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2686);    // compilenode identifier
              onSelf = true;
              var call961 = callmethodChecked(this, "visitSignaturePart", [1], var_o);
              return call961;
            };
            func960.paramCounts = [1, 1];
            obj948.methods["visitSignaturePart()up"] = func960;
            func960.definitionLine = 2686;
            func960.definitionModule = "ast";
            var func962 = function(argcv) {    // method visitTypeDec(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeDec (arg list 1) of visitTypeDec(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTypeDec(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2687);    // compilenode identifier
              onSelf = true;
              var call963 = callmethodChecked(this, "visitTypeDec", [1], var_o);
              return call963;
            };
            func962.paramCounts = [1, 1];
            obj948.methods["visitTypeDec()up"] = func962;
            func962.definitionLine = 2687;
            func962.definitionModule = "ast";
            var func964 = function(argcv) {    // method visitTypeLiteral(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeLiteral (arg list 1) of visitTypeLiteral(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTypeLiteral(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2688);    // compilenode identifier
              onSelf = true;
              var call965 = callmethodChecked(this, "visitTypeLiteral", [1], var_o);
              return call965;
            };
            func964.paramCounts = [1, 1];
            obj948.methods["visitTypeLiteral()up"] = func964;
            func964.definitionLine = 2688;
            func964.definitionModule = "ast";
            var func966 = function(argcv) {    // method visitTypeParameters(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeParameters (arg list 1) of visitTypeParameters(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTypeParameters(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2689);    // compilenode identifier
              onSelf = true;
              var call967 = callmethodChecked(this, "visitTypeParameters", [1], var_o);
              return call967;
            };
            func966.paramCounts = [1, 1];
            obj948.methods["visitTypeParameters()up"] = func966;
            func966.definitionLine = 2689;
            func966.definitionModule = "ast";
            var func968 = function(argcv) {    // method visitMethod(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethod (arg list 1) of visitMethod(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMethod(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2690);    // compilenode identifier
              onSelf = true;
              var call969 = callmethodChecked(this, "visitMethod", [1], var_o);
              return call969;
            };
            func968.paramCounts = [1, 1];
            obj948.methods["visitMethod()up"] = func968;
            func968.definitionLine = 2690;
            func968.definitionModule = "ast";
            var func970 = function(argcv) {    // method visitCall(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitCall (arg list 1) of visitCall(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitCall(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2691);    // compilenode identifier
              onSelf = true;
              var call971 = callmethodChecked(this, "visitCall", [1], var_o);
              return call971;
            };
            func970.paramCounts = [1, 1];
            obj948.methods["visitCall()up"] = func970;
            func970.definitionLine = 2691;
            func970.definitionModule = "ast";
            var func972 = function(argcv) {    // method visitObject(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitObject (arg list 1) of visitObject(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitObject(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2692);    // compilenode identifier
              onSelf = true;
              var call973 = callmethodChecked(this, "visitObject", [1], var_o);
              return call973;
            };
            func972.paramCounts = [1, 1];
            obj948.methods["visitObject()up"] = func972;
            func972.definitionLine = 2692;
            func972.definitionModule = "ast";
            var func974 = function(argcv) {    // method visitModule(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitModule (arg list 1) of visitModule(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitModule(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2693);    // compilenode identifier
              onSelf = true;
              var call975 = callmethodChecked(this, "visitObject", [1], var_o);
              return call975;
            };
            func974.paramCounts = [1, 1];
            obj948.methods["visitModule()up"] = func974;
            func974.definitionLine = 2693;
            func974.definitionModule = "ast";
            var func976 = function(argcv) {    // method visitArray(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitArray (arg list 1) of visitArray(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitArray(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2694);    // compilenode identifier
              onSelf = true;
              var call977 = callmethodChecked(this, "visitArray", [1], var_o);
              return call977;
            };
            func976.paramCounts = [1, 1];
            obj948.methods["visitArray()up"] = func976;
            func976.definitionLine = 2694;
            func976.definitionModule = "ast";
            var func978 = function(argcv) {    // method visitMember(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMember (arg list 1) of visitMember(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMember(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2695);    // compilenode identifier
              onSelf = true;
              var call979 = callmethodChecked(this, "visitMember", [1], var_o);
              return call979;
            };
            func978.paramCounts = [1, 1];
            obj948.methods["visitMember()up"] = func978;
            func978.definitionLine = 2695;
            func978.definitionModule = "ast";
            var func980 = function(argcv) {    // method visitGeneric(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitGeneric (arg list 1) of visitGeneric(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitGeneric(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2696);    // compilenode identifier
              onSelf = true;
              var call981 = callmethodChecked(this, "visitGeneric", [1], var_o);
              return call981;
            };
            func980.paramCounts = [1, 1];
            obj948.methods["visitGeneric()up"] = func980;
            func980.definitionLine = 2696;
            func980.definitionModule = "ast";
            var func982 = function(argcv) {    // method visitIdentifier(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIdentifier (arg list 1) of visitIdentifier(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitIdentifier(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2697);    // compilenode identifier
              onSelf = true;
              var call983 = callmethodChecked(this, "visitIdentifier", [1], var_o);
              return call983;
            };
            func982.paramCounts = [1, 1];
            obj948.methods["visitIdentifier()up"] = func982;
            func982.definitionLine = 2697;
            func982.definitionModule = "ast";
            var func984 = function(argcv) {    // method visitString(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitString (arg list 1) of visitString(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitString(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2698);    // compilenode identifier
              onSelf = true;
              var call985 = callmethodChecked(this, "visitString", [1], var_o);
              return call985;
            };
            func984.paramCounts = [1, 1];
            obj948.methods["visitString()up"] = func984;
            func984.definitionLine = 2698;
            func984.definitionModule = "ast";
            var func986 = function(argcv) {    // method visitNum(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitNum (arg list 1) of visitNum(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitNum(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2699);    // compilenode identifier
              onSelf = true;
              var call987 = callmethodChecked(this, "visitNum", [1], var_o);
              return call987;
            };
            func986.paramCounts = [1, 1];
            obj948.methods["visitNum()up"] = func986;
            func986.definitionLine = 2699;
            func986.definitionModule = "ast";
            var func988 = function(argcv) {    // method visitOp(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitOp (arg list 1) of visitOp(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitOp(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2700);    // compilenode identifier
              onSelf = true;
              var call989 = callmethodChecked(this, "visitOp", [1], var_o);
              return call989;
            };
            func988.paramCounts = [1, 1];
            obj948.methods["visitOp()up"] = func988;
            func988.definitionLine = 2700;
            func988.definitionModule = "ast";
            var func990 = function(argcv) {    // method visitBind(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBind (arg list 1) of visitBind(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBind(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2701);    // compilenode identifier
              onSelf = true;
              var call991 = callmethodChecked(this, "visitBind", [1], var_o);
              return call991;
            };
            func990.paramCounts = [1, 1];
            obj948.methods["visitBind()up"] = func990;
            func990.definitionLine = 2701;
            func990.definitionModule = "ast";
            var func992 = function(argcv) {    // method visitDefDec(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDefDec (arg list 1) of visitDefDec(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitDefDec(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2702);    // compilenode identifier
              onSelf = true;
              var call993 = callmethodChecked(this, "visitDefDec", [1], var_o);
              return call993;
            };
            func992.paramCounts = [1, 1];
            obj948.methods["visitDefDec()up"] = func992;
            func992.definitionLine = 2702;
            func992.definitionModule = "ast";
            var func994 = function(argcv) {    // method visitVarDec(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitVarDec (arg list 1) of visitVarDec(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitVarDec(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2703);    // compilenode identifier
              onSelf = true;
              var call995 = callmethodChecked(this, "visitVarDec", [1], var_o);
              return call995;
            };
            func994.paramCounts = [1, 1];
            obj948.methods["visitVarDec()up"] = func994;
            func994.definitionLine = 2703;
            func994.definitionModule = "ast";
            var func996 = function(argcv) {    // method visitImport(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitImport (arg list 1) of visitImport(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitImport(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2704);    // compilenode identifier
              onSelf = true;
              var call997 = callmethodChecked(this, "visitImport", [1], var_o);
              return call997;
            };
            func996.paramCounts = [1, 1];
            obj948.methods["visitImport()up"] = func996;
            func996.definitionLine = 2704;
            func996.definitionModule = "ast";
            var func998 = function(argcv) {    // method visitReturn(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitReturn (arg list 1) of visitReturn(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitReturn(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2705);    // compilenode identifier
              onSelf = true;
              var call999 = callmethodChecked(this, "visitReturn", [1], var_o);
              return call999;
            };
            func998.paramCounts = [1, 1];
            obj948.methods["visitReturn()up"] = func998;
            func998.definitionLine = 2705;
            func998.definitionModule = "ast";
            var func1000 = function(argcv) {    // method visitInherits(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitInherits (arg list 1) of visitInherits(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitInherits(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2706);    // compilenode identifier
              onSelf = true;
              var call1001 = callmethodChecked(this, "visitInherits", [1], var_o);
              return call1001;
            };
            func1000.paramCounts = [1, 1];
            obj948.methods["visitInherits()up"] = func1000;
            func1000.definitionLine = 2706;
            func1000.definitionModule = "ast";
            var func1002 = function(argcv) {    // method visitDialect(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDialect (arg list 1) of visitDialect(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitDialect(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2707);    // compilenode identifier
              onSelf = true;
              var call1003 = callmethodChecked(this, "visitDialect", [1], var_o);
              return call1003;
            };
            func1002.paramCounts = [1, 1];
            obj948.methods["visitDialect()up"] = func1002;
            func1002.definitionLine = 2707;
            func1002.definitionModule = "ast";
            var func1004 = function(argcv) {    // method visitBlank(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlank (arg list 1) of visitBlank(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBlank(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2708);    // compilenode identifier
              onSelf = true;
              var call1005 = callmethodChecked(this, "visitBlank", [1], var_o);
              return call1005;
            };
            func1004.paramCounts = [1, 1];
            obj948.methods["visitBlank()up"] = func1004;
            func1004.definitionLine = 2708;
            func1004.definitionModule = "ast";
            var func1006 = function(argcv) {    // method visitComment(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitComment (arg list 1) of visitComment(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitComment(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2709);    // compilenode identifier
              onSelf = true;
              var call1007 = callmethodChecked(this, "visitComment", [1], var_o);
              return call1007;
            };
            func1006.paramCounts = [1, 1];
            obj948.methods["visitComment()up"] = func1006;
            func1006.definitionLine = 2709;
            func1006.definitionModule = "ast";
            var func1008 = function(argcv) {    // method visitIf(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIf(1)"));
              setModuleName("ast");
              // visitIf(1) is a simple accessor - elide try ... catch
              setLineNumber(2711);    // compilenode identifier
              return GraceTrue;
            };
            func1008.paramCounts = [1];
            obj948.methods["visitIf"] = func1008;
            func1008.definitionLine = 2711;
            func1008.definitionModule = "ast";
            var func1009 = function(argcv) {    // method visitBlock(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlock(1)"));
              setModuleName("ast");
              // visitBlock(1) is a simple accessor - elide try ... catch
              setLineNumber(2712);    // compilenode identifier
              return GraceTrue;
            };
            func1009.paramCounts = [1];
            obj948.methods["visitBlock"] = func1009;
            func1009.definitionLine = 2712;
            func1009.definitionModule = "ast";
            var func1010 = function(argcv) {    // method visitMatchCase(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMatchCase(1)"));
              setModuleName("ast");
              // visitMatchCase(1) is a simple accessor - elide try ... catch
              setLineNumber(2713);    // compilenode identifier
              return GraceTrue;
            };
            func1010.paramCounts = [1];
            obj948.methods["visitMatchCase"] = func1010;
            func1010.definitionLine = 2713;
            func1010.definitionModule = "ast";
            var func1011 = function(argcv) {    // method visitTryCatch(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTryCatch(1)"));
              setModuleName("ast");
              // visitTryCatch(1) is a simple accessor - elide try ... catch
              setLineNumber(2714);    // compilenode identifier
              return GraceTrue;
            };
            func1011.paramCounts = [1];
            obj948.methods["visitTryCatch"] = func1011;
            func1011.definitionLine = 2714;
            func1011.definitionModule = "ast";
            var func1012 = function(argcv) {    // method visitMethodType(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethodType(1)"));
              setModuleName("ast");
              // visitMethodType(1) is a simple accessor - elide try ... catch
              setLineNumber(2715);    // compilenode identifier
              return GraceTrue;
            };
            func1012.paramCounts = [1];
            obj948.methods["visitMethodType"] = func1012;
            func1012.definitionLine = 2715;
            func1012.definitionModule = "ast";
            var func1013 = function(argcv) {    // method visitSignaturePart(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitSignaturePart(1)"));
              setModuleName("ast");
              // visitSignaturePart(1) is a simple accessor - elide try ... catch
              setLineNumber(2716);    // compilenode identifier
              return GraceTrue;
            };
            func1013.paramCounts = [1];
            obj948.methods["visitSignaturePart"] = func1013;
            func1013.definitionLine = 2716;
            func1013.definitionModule = "ast";
            var func1014 = function(argcv) {    // method visitTypeDec(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeDec(1)"));
              setModuleName("ast");
              // visitTypeDec(1) is a simple accessor - elide try ... catch
              setLineNumber(2717);    // compilenode identifier
              return GraceTrue;
            };
            func1014.paramCounts = [1];
            obj948.methods["visitTypeDec"] = func1014;
            func1014.definitionLine = 2717;
            func1014.definitionModule = "ast";
            var func1015 = function(argcv) {    // method visitTypeLiteral(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeLiteral(1)"));
              setModuleName("ast");
              // visitTypeLiteral(1) is a simple accessor - elide try ... catch
              setLineNumber(2718);    // compilenode identifier
              return GraceTrue;
            };
            func1015.paramCounts = [1];
            obj948.methods["visitTypeLiteral"] = func1015;
            func1015.definitionLine = 2718;
            func1015.definitionModule = "ast";
            var func1016 = function(argcv) {    // method visitTypeParameters(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeParameters(1)"));
              setModuleName("ast");
              // visitTypeParameters(1) is a simple accessor - elide try ... catch
              setLineNumber(2719);    // compilenode identifier
              return GraceTrue;
            };
            func1016.paramCounts = [1];
            obj948.methods["visitTypeParameters"] = func1016;
            func1016.definitionLine = 2719;
            func1016.definitionModule = "ast";
            var func1017 = function(argcv) {    // method visitMethod(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethod(1)"));
              setModuleName("ast");
              // visitMethod(1) is a simple accessor - elide try ... catch
              setLineNumber(2720);    // compilenode identifier
              return GraceTrue;
            };
            func1017.paramCounts = [1];
            obj948.methods["visitMethod"] = func1017;
            func1017.definitionLine = 2720;
            func1017.definitionModule = "ast";
            var func1018 = function(argcv) {    // method visitCall(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitCall(1)"));
              setModuleName("ast");
              // visitCall(1) is a simple accessor - elide try ... catch
              setLineNumber(2721);    // compilenode identifier
              return GraceTrue;
            };
            func1018.paramCounts = [1];
            obj948.methods["visitCall"] = func1018;
            func1018.definitionLine = 2721;
            func1018.definitionModule = "ast";
            var func1019 = function(argcv) {    // method visitObject(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitObject(1)"));
              setModuleName("ast");
              // visitObject(1) is a simple accessor - elide try ... catch
              setLineNumber(2722);    // compilenode identifier
              return GraceTrue;
            };
            func1019.paramCounts = [1];
            obj948.methods["visitObject"] = func1019;
            func1019.definitionLine = 2722;
            func1019.definitionModule = "ast";
            var func1020 = function(argcv) {    // method visitModule(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitModule(1)"));
              setModuleName("ast");
              // visitModule(1) is a simple accessor - elide try ... catch
              setLineNumber(2723);    // compilenode identifier
              return GraceTrue;
            };
            func1020.paramCounts = [1];
            obj948.methods["visitModule"] = func1020;
            func1020.definitionLine = 2723;
            func1020.definitionModule = "ast";
            var func1021 = function(argcv) {    // method visitArray(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitArray(1)"));
              setModuleName("ast");
              // visitArray(1) is a simple accessor - elide try ... catch
              setLineNumber(2724);    // compilenode identifier
              return GraceTrue;
            };
            func1021.paramCounts = [1];
            obj948.methods["visitArray"] = func1021;
            func1021.definitionLine = 2724;
            func1021.definitionModule = "ast";
            var func1022 = function(argcv) {    // method visitMember(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMember(1)"));
              setModuleName("ast");
              // visitMember(1) is a simple accessor - elide try ... catch
              setLineNumber(2725);    // compilenode identifier
              return GraceTrue;
            };
            func1022.paramCounts = [1];
            obj948.methods["visitMember"] = func1022;
            func1022.definitionLine = 2725;
            func1022.definitionModule = "ast";
            var func1023 = function(argcv) {    // method visitGeneric(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitGeneric(1)"));
              setModuleName("ast");
              // visitGeneric(1) is a simple accessor - elide try ... catch
              setLineNumber(2726);    // compilenode identifier
              return GraceTrue;
            };
            func1023.paramCounts = [1];
            obj948.methods["visitGeneric"] = func1023;
            func1023.definitionLine = 2726;
            func1023.definitionModule = "ast";
            var func1024 = function(argcv) {    // method visitIdentifier(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIdentifier(1)"));
              setModuleName("ast");
              // visitIdentifier(1) is a simple accessor - elide try ... catch
              setLineNumber(2727);    // compilenode identifier
              return GraceTrue;
            };
            func1024.paramCounts = [1];
            obj948.methods["visitIdentifier"] = func1024;
            func1024.definitionLine = 2727;
            func1024.definitionModule = "ast";
            var func1025 = function(argcv) {    // method visitString(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitString(1)"));
              setModuleName("ast");
              // visitString(1) is a simple accessor - elide try ... catch
              setLineNumber(2728);    // compilenode identifier
              return GraceTrue;
            };
            func1025.paramCounts = [1];
            obj948.methods["visitString"] = func1025;
            func1025.definitionLine = 2728;
            func1025.definitionModule = "ast";
            var func1026 = function(argcv) {    // method visitNum(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitNum(1)"));
              setModuleName("ast");
              // visitNum(1) is a simple accessor - elide try ... catch
              setLineNumber(2729);    // compilenode identifier
              return GraceTrue;
            };
            func1026.paramCounts = [1];
            obj948.methods["visitNum"] = func1026;
            func1026.definitionLine = 2729;
            func1026.definitionModule = "ast";
            var func1027 = function(argcv) {    // method visitOp(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitOp(1)"));
              setModuleName("ast");
              // visitOp(1) is a simple accessor - elide try ... catch
              setLineNumber(2730);    // compilenode identifier
              return GraceTrue;
            };
            func1027.paramCounts = [1];
            obj948.methods["visitOp"] = func1027;
            func1027.definitionLine = 2730;
            func1027.definitionModule = "ast";
            var func1028 = function(argcv) {    // method visitBind(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBind(1)"));
              setModuleName("ast");
              // visitBind(1) is a simple accessor - elide try ... catch
              setLineNumber(2731);    // compilenode identifier
              return GraceTrue;
            };
            func1028.paramCounts = [1];
            obj948.methods["visitBind"] = func1028;
            func1028.definitionLine = 2731;
            func1028.definitionModule = "ast";
            var func1029 = function(argcv) {    // method visitDefDec(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDefDec(1)"));
              setModuleName("ast");
              // visitDefDec(1) is a simple accessor - elide try ... catch
              setLineNumber(2732);    // compilenode identifier
              return GraceTrue;
            };
            func1029.paramCounts = [1];
            obj948.methods["visitDefDec"] = func1029;
            func1029.definitionLine = 2732;
            func1029.definitionModule = "ast";
            var func1030 = function(argcv) {    // method visitVarDec(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitVarDec(1)"));
              setModuleName("ast");
              // visitVarDec(1) is a simple accessor - elide try ... catch
              setLineNumber(2733);    // compilenode identifier
              return GraceTrue;
            };
            func1030.paramCounts = [1];
            obj948.methods["visitVarDec"] = func1030;
            func1030.definitionLine = 2733;
            func1030.definitionModule = "ast";
            var func1031 = function(argcv) {    // method visitImport(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitImport(1)"));
              setModuleName("ast");
              // visitImport(1) is a simple accessor - elide try ... catch
              setLineNumber(2734);    // compilenode identifier
              return GraceTrue;
            };
            func1031.paramCounts = [1];
            obj948.methods["visitImport"] = func1031;
            func1031.definitionLine = 2734;
            func1031.definitionModule = "ast";
            var func1032 = function(argcv) {    // method visitReturn(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitReturn(1)"));
              setModuleName("ast");
              // visitReturn(1) is a simple accessor - elide try ... catch
              setLineNumber(2735);    // compilenode identifier
              return GraceTrue;
            };
            func1032.paramCounts = [1];
            obj948.methods["visitReturn"] = func1032;
            func1032.definitionLine = 2735;
            func1032.definitionModule = "ast";
            var func1033 = function(argcv) {    // method visitInherits(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitInherits(1)"));
              setModuleName("ast");
              // visitInherits(1) is a simple accessor - elide try ... catch
              setLineNumber(2736);    // compilenode identifier
              return GraceTrue;
            };
            func1033.paramCounts = [1];
            obj948.methods["visitInherits"] = func1033;
            func1033.definitionLine = 2736;
            func1033.definitionModule = "ast";
            var func1034 = function(argcv) {    // method visitDialect(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDialect(1)"));
              setModuleName("ast");
              // visitDialect(1) is a simple accessor - elide try ... catch
              setLineNumber(2737);    // compilenode identifier
              return GraceTrue;
            };
            func1034.paramCounts = [1];
            obj948.methods["visitDialect"] = func1034;
            func1034.definitionLine = 2737;
            func1034.definitionModule = "ast";
            var func1035 = function(argcv) {    // method visitBlank(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlank(1)"));
              setModuleName("ast");
              // visitBlank(1) is a simple accessor - elide try ... catch
              setLineNumber(2738);    // compilenode identifier
              return GraceTrue;
            };
            func1035.paramCounts = [1];
            obj948.methods["visitBlank"] = func1035;
            func1035.definitionLine = 2738;
            func1035.definitionModule = "ast";
            var func1036 = function(argcv) {    // method visitComment(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitComment(1)"));
              setModuleName("ast");
              // visitComment(1) is a simple accessor - elide try ... catch
              setLineNumber(2739);    // compilenode identifier
              return GraceTrue;
            };
            func1036.paramCounts = [1];
            obj948.methods["visitComment"] = func1036;
            func1036.definitionLine = 2739;
            func1036.definitionModule = "ast";
            var func1037 = function(argcv) {    // method asString
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
              setModuleName("ast");
              setLineNumber(2741);    // compilenode string
              var string1038 = new GraceString("an AST visitor");
              return string1038;
            };
            func1037.paramCounts = [0];
            obj948.methods["asString"] = func1037;
            func1037.definitionLine = 2741;
            func1037.definitionModule = "ast";
            superDepth = origSuperDepth;
          };
          obj_init_948.apply(inheritingObject, []);
          return obj948;
          };
          this.methods["baseVisitor()object"] = func947;
        setLineNumber(2744);    // compilenode method
        var func1039 = function(argcv) {    // method pluggableVisitor(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_visitation = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pluggableVisitor(1)"));
          // Start argument checking
          curarg = 1;
          var call1040 = callmethodChecked(var_prelude, "Block2", [0]);
          if (!Grace_isTrue(callmethod(call1040, "match",  [1], arguments[curarg])))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("argument 1 in pluggableVisitor (arg list 1), which corresponds to parameter visitation, does not have " + 
                      callmethod(call1040, "asString", [0])._value + "."));
          curarg++;
          // End argument checking
          setModuleName("ast");
          var obj1041 = Grace_allocObject(GraceObject, "ast.pluggableVisitor");
          obj1041.definitionModule = "ast";
          obj1041.definitionLine = 2744;
          obj1041.outer = this;
          var reader_ast_outer1042 = function() {
            return this.outer;
          };
          obj1041.methods["outer"] = reader_ast_outer1042;
          var obj_init_1041 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj1041;
            var func1043 = function(argcv) {    // method visitIf(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIf (arg list 1) of visitIf(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitIf(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2751);    // compilenode identifier
              var call1044 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1044;
            };
            func1043.paramCounts = [1, 1];
            obj1041.methods["visitIf()up"] = func1043;
            func1043.definitionLine = 2751;
            func1043.definitionModule = "ast";
            var func1045 = function(argcv) {    // method visitBlock(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlock (arg list 1) of visitBlock(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBlock(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2752);    // compilenode identifier
              var call1046 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1046;
            };
            func1045.paramCounts = [1, 1];
            obj1041.methods["visitBlock()up"] = func1045;
            func1045.definitionLine = 2752;
            func1045.definitionModule = "ast";
            var func1047 = function(argcv) {    // method visitMatchCase(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMatchCase (arg list 1) of visitMatchCase(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMatchCase(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2753);    // compilenode identifier
              var call1048 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1048;
            };
            func1047.paramCounts = [1, 1];
            obj1041.methods["visitMatchCase()up"] = func1047;
            func1047.definitionLine = 2753;
            func1047.definitionModule = "ast";
            var func1049 = function(argcv) {    // method visitTryCatch(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTryCatch (arg list 1) of visitTryCatch(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTryCatch(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2754);    // compilenode identifier
              var call1050 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1050;
            };
            func1049.paramCounts = [1, 1];
            obj1041.methods["visitTryCatch()up"] = func1049;
            func1049.definitionLine = 2754;
            func1049.definitionModule = "ast";
            var func1051 = function(argcv) {    // method visitMethodType(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethodType (arg list 1) of visitMethodType(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMethodType(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2755);    // compilenode identifier
              var call1052 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1052;
            };
            func1051.paramCounts = [1, 1];
            obj1041.methods["visitMethodType()up"] = func1051;
            func1051.definitionLine = 2755;
            func1051.definitionModule = "ast";
            var func1053 = function(argcv) {    // method visitSignaturePart(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitSignaturePart (arg list 1) of visitSignaturePart(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitSignaturePart(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2756);    // compilenode identifier
              var call1054 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1054;
            };
            func1053.paramCounts = [1, 1];
            obj1041.methods["visitSignaturePart()up"] = func1053;
            func1053.definitionLine = 2756;
            func1053.definitionModule = "ast";
            var func1055 = function(argcv) {    // method visitTypeDec(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeDec (arg list 1) of visitTypeDec(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTypeDec(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2757);    // compilenode identifier
              var call1056 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1056;
            };
            func1055.paramCounts = [1, 1];
            obj1041.methods["visitTypeDec()up"] = func1055;
            func1055.definitionLine = 2757;
            func1055.definitionModule = "ast";
            var func1057 = function(argcv) {    // method visitTypeLiteral(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeLiteral (arg list 1) of visitTypeLiteral(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTypeLiteral(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2758);    // compilenode identifier
              var call1058 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1058;
            };
            func1057.paramCounts = [1, 1];
            obj1041.methods["visitTypeLiteral()up"] = func1057;
            func1057.definitionLine = 2758;
            func1057.definitionModule = "ast";
            var func1059 = function(argcv) {    // method visitMethod(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethod (arg list 1) of visitMethod(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMethod(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2759);    // compilenode identifier
              var call1060 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1060;
            };
            func1059.paramCounts = [1, 1];
            obj1041.methods["visitMethod()up"] = func1059;
            func1059.definitionLine = 2759;
            func1059.definitionModule = "ast";
            var func1061 = function(argcv) {    // method visitCall(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitCall (arg list 1) of visitCall(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitCall(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2760);    // compilenode identifier
              var call1062 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1062;
            };
            func1061.paramCounts = [1, 1];
            obj1041.methods["visitCall()up"] = func1061;
            func1061.definitionLine = 2760;
            func1061.definitionModule = "ast";
            var func1063 = function(argcv) {    // method visitObject(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitObject (arg list 1) of visitObject(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitObject(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2761);    // compilenode identifier
              var call1064 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1064;
            };
            func1063.paramCounts = [1, 1];
            obj1041.methods["visitObject()up"] = func1063;
            func1063.definitionLine = 2761;
            func1063.definitionModule = "ast";
            var func1065 = function(argcv) {    // method visitModule(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitModule (arg list 1) of visitModule(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitModule(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2762);    // compilenode identifier
              var call1066 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1066;
            };
            func1065.paramCounts = [1, 1];
            obj1041.methods["visitModule()up"] = func1065;
            func1065.definitionLine = 2762;
            func1065.definitionModule = "ast";
            var func1067 = function(argcv) {    // method visitArray(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitArray (arg list 1) of visitArray(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitArray(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2763);    // compilenode identifier
              var call1068 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1068;
            };
            func1067.paramCounts = [1, 1];
            obj1041.methods["visitArray()up"] = func1067;
            func1067.definitionLine = 2763;
            func1067.definitionModule = "ast";
            var func1069 = function(argcv) {    // method visitMember(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMember (arg list 1) of visitMember(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMember(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2764);    // compilenode identifier
              var call1070 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1070;
            };
            func1069.paramCounts = [1, 1];
            obj1041.methods["visitMember()up"] = func1069;
            func1069.definitionLine = 2764;
            func1069.definitionModule = "ast";
            var func1071 = function(argcv) {    // method visitGeneric(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitGeneric (arg list 1) of visitGeneric(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitGeneric(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2765);    // compilenode identifier
              var call1072 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1072;
            };
            func1071.paramCounts = [1, 1];
            obj1041.methods["visitGeneric()up"] = func1071;
            func1071.definitionLine = 2765;
            func1071.definitionModule = "ast";
            var func1073 = function(argcv) {    // method visitIdentifier(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIdentifier (arg list 1) of visitIdentifier(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitIdentifier(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2766);    // compilenode identifier
              var call1074 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1074;
            };
            func1073.paramCounts = [1, 1];
            obj1041.methods["visitIdentifier()up"] = func1073;
            func1073.definitionLine = 2766;
            func1073.definitionModule = "ast";
            var func1075 = function(argcv) {    // method visitString(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitString (arg list 1) of visitString(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitString(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2767);    // compilenode identifier
              var call1076 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1076;
            };
            func1075.paramCounts = [1, 1];
            obj1041.methods["visitString()up"] = func1075;
            func1075.definitionLine = 2767;
            func1075.definitionModule = "ast";
            var func1077 = function(argcv) {    // method visitNum(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitNum (arg list 1) of visitNum(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitNum(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2768);    // compilenode identifier
              var call1078 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1078;
            };
            func1077.paramCounts = [1, 1];
            obj1041.methods["visitNum()up"] = func1077;
            func1077.definitionLine = 2768;
            func1077.definitionModule = "ast";
            var func1079 = function(argcv) {    // method visitOp(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitOp (arg list 1) of visitOp(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitOp(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2769);    // compilenode identifier
              var call1080 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1080;
            };
            func1079.paramCounts = [1, 1];
            obj1041.methods["visitOp()up"] = func1079;
            func1079.definitionLine = 2769;
            func1079.definitionModule = "ast";
            var func1081 = function(argcv) {    // method visitBind(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBind (arg list 1) of visitBind(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBind(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2770);    // compilenode identifier
              var call1082 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1082;
            };
            func1081.paramCounts = [1, 1];
            obj1041.methods["visitBind()up"] = func1081;
            func1081.definitionLine = 2770;
            func1081.definitionModule = "ast";
            var func1083 = function(argcv) {    // method visitDefDec(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDefDec (arg list 1) of visitDefDec(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitDefDec(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2771);    // compilenode identifier
              var call1084 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1084;
            };
            func1083.paramCounts = [1, 1];
            obj1041.methods["visitDefDec()up"] = func1083;
            func1083.definitionLine = 2771;
            func1083.definitionModule = "ast";
            var func1085 = function(argcv) {    // method visitVarDec(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitVarDec (arg list 1) of visitVarDec(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitVarDec(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2772);    // compilenode identifier
              var call1086 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1086;
            };
            func1085.paramCounts = [1, 1];
            obj1041.methods["visitVarDec()up"] = func1085;
            func1085.definitionLine = 2772;
            func1085.definitionModule = "ast";
            var func1087 = function(argcv) {    // method visitImport(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitImport (arg list 1) of visitImport(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitImport(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2773);    // compilenode identifier
              var call1088 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1088;
            };
            func1087.paramCounts = [1, 1];
            obj1041.methods["visitImport()up"] = func1087;
            func1087.definitionLine = 2773;
            func1087.definitionModule = "ast";
            var func1089 = function(argcv) {    // method visitReturn(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitReturn (arg list 1) of visitReturn(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitReturn(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2774);    // compilenode identifier
              var call1090 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1090;
            };
            func1089.paramCounts = [1, 1];
            obj1041.methods["visitReturn()up"] = func1089;
            func1089.definitionLine = 2774;
            func1089.definitionModule = "ast";
            var func1091 = function(argcv) {    // method visitInherits(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitInherits (arg list 1) of visitInherits(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitInherits(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2775);    // compilenode identifier
              var call1092 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1092;
            };
            func1091.paramCounts = [1, 1];
            obj1041.methods["visitInherits()up"] = func1091;
            func1091.definitionLine = 2775;
            func1091.definitionModule = "ast";
            var func1093 = function(argcv) {    // method visitDialect(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDialect (arg list 1) of visitDialect(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitDialect(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2776);    // compilenode identifier
              var call1094 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1094;
            };
            func1093.paramCounts = [1, 1];
            obj1041.methods["visitDialect()up"] = func1093;
            func1093.definitionLine = 2776;
            func1093.definitionModule = "ast";
            var func1095 = function(argcv) {    // method visitBlank(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlank (arg list 1) of visitBlank(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBlank(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2777);    // compilenode identifier
              var call1096 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1096;
            };
            func1095.paramCounts = [1, 1];
            obj1041.methods["visitBlank()up"] = func1095;
            func1095.definitionLine = 2777;
            func1095.definitionModule = "ast";
            var func1097 = function(argcv) {    // method visitComment(1)up(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitComment (arg list 1) of visitComment(1)up(1)"));
              var var_as = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitComment(1)up(1)"));
              setModuleName("ast");
              setLineNumber(2778);    // compilenode identifier
              var call1098 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
              return call1098;
            };
            func1097.paramCounts = [1, 1];
            obj1041.methods["visitComment()up"] = func1097;
            func1097.definitionLine = 2778;
            func1097.definitionModule = "ast";
            var func1099 = function(argcv) {    // method asString
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
              setModuleName("ast");
              setLineNumber(2780);    // compilenode string
              var string1100 = new GraceString("a pluggable AST visitor");
              return string1100;
            };
            func1099.paramCounts = [0];
            obj1041.methods["asString"] = func1099;
            func1099.definitionLine = 2780;
            func1099.definitionModule = "ast";
            superDepth = origSuperDepth;
          };
          obj_init_1041.apply(obj1041, []);
          setLineNumber(2744);    // return value
          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match", [1], obj1041)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("result of method pluggableVisitor(1) does not have " + 
                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
          return obj1041;
        };
        func1039.paramCounts = [1];
        this.methods["pluggableVisitor"] = func1039;
        func1039.definitionLine = 2744;
        func1039.definitionModule = "ast";
          var func1101 = function(argcv) {    // method pluggableVisitor(1     )()object
            var curarg = 1;
            var var_visitation = arguments[curarg];
            curarg++;
            var inheritingObject = arguments[curarg++];
            // Start argument processing
            curarg = 1;
            var call1102 = callmethodChecked(var_prelude, "Block2", [0]);
            if (!Grace_isTrue(callmethod(call1102, "match",  [1], arguments[curarg])))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("argument 1 in pluggableVisitor (arg list 1), which corresponds to parameter visitation, does not have " + 
                        callmethod(call1102, "asString", [0])._value + "."));
            curarg++;
            // End argument processing
            setModuleName("ast");
            var returnTarget = invocationCount;
            invocationCount++;
            var obj1103 = Grace_allocObject(GraceObject, "pluggableVisitor");
            obj1103.definitionModule = "ast";
            obj1103.definitionLine = 2744;
            var inho1103 = inheritingObject;
            while (inho1103.superobj) inho1103 = inho1103.superobj;
            inho1103.superobj = obj1103;
            obj1103.data = inheritingObject.data;
            if (inheritingObject.hasOwnProperty('_value'))
              obj1103._value = inheritingObject._value;
            obj1103.outer = this;
            var reader_ast_outer1104 = function() {
              return this.outer;
            };
            obj1103.methods["outer"] = reader_ast_outer1104;
            var obj_init_1103 = function() {
              var origSuperDepth = superDepth;
              superDepth = obj1103;
              var func1105 = function(argcv) {    // method visitIf(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIf (arg list 1) of visitIf(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitIf(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2751);    // compilenode identifier
                var call1106 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1106;
              };
              func1105.paramCounts = [1, 1];
              obj1103.methods["visitIf()up"] = func1105;
              func1105.definitionLine = 2751;
              func1105.definitionModule = "ast";
              var func1107 = function(argcv) {    // method visitBlock(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlock (arg list 1) of visitBlock(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBlock(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2752);    // compilenode identifier
                var call1108 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1108;
              };
              func1107.paramCounts = [1, 1];
              obj1103.methods["visitBlock()up"] = func1107;
              func1107.definitionLine = 2752;
              func1107.definitionModule = "ast";
              var func1109 = function(argcv) {    // method visitMatchCase(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMatchCase (arg list 1) of visitMatchCase(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMatchCase(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2753);    // compilenode identifier
                var call1110 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1110;
              };
              func1109.paramCounts = [1, 1];
              obj1103.methods["visitMatchCase()up"] = func1109;
              func1109.definitionLine = 2753;
              func1109.definitionModule = "ast";
              var func1111 = function(argcv) {    // method visitTryCatch(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTryCatch (arg list 1) of visitTryCatch(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTryCatch(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2754);    // compilenode identifier
                var call1112 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1112;
              };
              func1111.paramCounts = [1, 1];
              obj1103.methods["visitTryCatch()up"] = func1111;
              func1111.definitionLine = 2754;
              func1111.definitionModule = "ast";
              var func1113 = function(argcv) {    // method visitMethodType(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethodType (arg list 1) of visitMethodType(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMethodType(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2755);    // compilenode identifier
                var call1114 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1114;
              };
              func1113.paramCounts = [1, 1];
              obj1103.methods["visitMethodType()up"] = func1113;
              func1113.definitionLine = 2755;
              func1113.definitionModule = "ast";
              var func1115 = function(argcv) {    // method visitSignaturePart(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitSignaturePart (arg list 1) of visitSignaturePart(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitSignaturePart(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2756);    // compilenode identifier
                var call1116 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1116;
              };
              func1115.paramCounts = [1, 1];
              obj1103.methods["visitSignaturePart()up"] = func1115;
              func1115.definitionLine = 2756;
              func1115.definitionModule = "ast";
              var func1117 = function(argcv) {    // method visitTypeDec(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeDec (arg list 1) of visitTypeDec(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTypeDec(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2757);    // compilenode identifier
                var call1118 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1118;
              };
              func1117.paramCounts = [1, 1];
              obj1103.methods["visitTypeDec()up"] = func1117;
              func1117.definitionLine = 2757;
              func1117.definitionModule = "ast";
              var func1119 = function(argcv) {    // method visitTypeLiteral(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitTypeLiteral (arg list 1) of visitTypeLiteral(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitTypeLiteral(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2758);    // compilenode identifier
                var call1120 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1120;
              };
              func1119.paramCounts = [1, 1];
              obj1103.methods["visitTypeLiteral()up"] = func1119;
              func1119.definitionLine = 2758;
              func1119.definitionModule = "ast";
              var func1121 = function(argcv) {    // method visitMethod(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMethod (arg list 1) of visitMethod(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMethod(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2759);    // compilenode identifier
                var call1122 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1122;
              };
              func1121.paramCounts = [1, 1];
              obj1103.methods["visitMethod()up"] = func1121;
              func1121.definitionLine = 2759;
              func1121.definitionModule = "ast";
              var func1123 = function(argcv) {    // method visitCall(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitCall (arg list 1) of visitCall(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitCall(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2760);    // compilenode identifier
                var call1124 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1124;
              };
              func1123.paramCounts = [1, 1];
              obj1103.methods["visitCall()up"] = func1123;
              func1123.definitionLine = 2760;
              func1123.definitionModule = "ast";
              var func1125 = function(argcv) {    // method visitObject(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitObject (arg list 1) of visitObject(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitObject(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2761);    // compilenode identifier
                var call1126 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1126;
              };
              func1125.paramCounts = [1, 1];
              obj1103.methods["visitObject()up"] = func1125;
              func1125.definitionLine = 2761;
              func1125.definitionModule = "ast";
              var func1127 = function(argcv) {    // method visitModule(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitModule (arg list 1) of visitModule(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitModule(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2762);    // compilenode identifier
                var call1128 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1128;
              };
              func1127.paramCounts = [1, 1];
              obj1103.methods["visitModule()up"] = func1127;
              func1127.definitionLine = 2762;
              func1127.definitionModule = "ast";
              var func1129 = function(argcv) {    // method visitArray(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitArray (arg list 1) of visitArray(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitArray(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2763);    // compilenode identifier
                var call1130 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1130;
              };
              func1129.paramCounts = [1, 1];
              obj1103.methods["visitArray()up"] = func1129;
              func1129.definitionLine = 2763;
              func1129.definitionModule = "ast";
              var func1131 = function(argcv) {    // method visitMember(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitMember (arg list 1) of visitMember(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitMember(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2764);    // compilenode identifier
                var call1132 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1132;
              };
              func1131.paramCounts = [1, 1];
              obj1103.methods["visitMember()up"] = func1131;
              func1131.definitionLine = 2764;
              func1131.definitionModule = "ast";
              var func1133 = function(argcv) {    // method visitGeneric(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitGeneric (arg list 1) of visitGeneric(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitGeneric(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2765);    // compilenode identifier
                var call1134 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1134;
              };
              func1133.paramCounts = [1, 1];
              obj1103.methods["visitGeneric()up"] = func1133;
              func1133.definitionLine = 2765;
              func1133.definitionModule = "ast";
              var func1135 = function(argcv) {    // method visitIdentifier(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitIdentifier (arg list 1) of visitIdentifier(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitIdentifier(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2766);    // compilenode identifier
                var call1136 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1136;
              };
              func1135.paramCounts = [1, 1];
              obj1103.methods["visitIdentifier()up"] = func1135;
              func1135.definitionLine = 2766;
              func1135.definitionModule = "ast";
              var func1137 = function(argcv) {    // method visitString(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitString (arg list 1) of visitString(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitString(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2767);    // compilenode identifier
                var call1138 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1138;
              };
              func1137.paramCounts = [1, 1];
              obj1103.methods["visitString()up"] = func1137;
              func1137.definitionLine = 2767;
              func1137.definitionModule = "ast";
              var func1139 = function(argcv) {    // method visitNum(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitNum (arg list 1) of visitNum(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitNum(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2768);    // compilenode identifier
                var call1140 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1140;
              };
              func1139.paramCounts = [1, 1];
              obj1103.methods["visitNum()up"] = func1139;
              func1139.definitionLine = 2768;
              func1139.definitionModule = "ast";
              var func1141 = function(argcv) {    // method visitOp(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitOp (arg list 1) of visitOp(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitOp(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2769);    // compilenode identifier
                var call1142 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1142;
              };
              func1141.paramCounts = [1, 1];
              obj1103.methods["visitOp()up"] = func1141;
              func1141.definitionLine = 2769;
              func1141.definitionModule = "ast";
              var func1143 = function(argcv) {    // method visitBind(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBind (arg list 1) of visitBind(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBind(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2770);    // compilenode identifier
                var call1144 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1144;
              };
              func1143.paramCounts = [1, 1];
              obj1103.methods["visitBind()up"] = func1143;
              func1143.definitionLine = 2770;
              func1143.definitionModule = "ast";
              var func1145 = function(argcv) {    // method visitDefDec(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDefDec (arg list 1) of visitDefDec(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitDefDec(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2771);    // compilenode identifier
                var call1146 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1146;
              };
              func1145.paramCounts = [1, 1];
              obj1103.methods["visitDefDec()up"] = func1145;
              func1145.definitionLine = 2771;
              func1145.definitionModule = "ast";
              var func1147 = function(argcv) {    // method visitVarDec(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitVarDec (arg list 1) of visitVarDec(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitVarDec(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2772);    // compilenode identifier
                var call1148 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1148;
              };
              func1147.paramCounts = [1, 1];
              obj1103.methods["visitVarDec()up"] = func1147;
              func1147.definitionLine = 2772;
              func1147.definitionModule = "ast";
              var func1149 = function(argcv) {    // method visitImport(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitImport (arg list 1) of visitImport(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitImport(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2773);    // compilenode identifier
                var call1150 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1150;
              };
              func1149.paramCounts = [1, 1];
              obj1103.methods["visitImport()up"] = func1149;
              func1149.definitionLine = 2773;
              func1149.definitionModule = "ast";
              var func1151 = function(argcv) {    // method visitReturn(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitReturn (arg list 1) of visitReturn(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitReturn(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2774);    // compilenode identifier
                var call1152 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1152;
              };
              func1151.paramCounts = [1, 1];
              obj1103.methods["visitReturn()up"] = func1151;
              func1151.definitionLine = 2774;
              func1151.definitionModule = "ast";
              var func1153 = function(argcv) {    // method visitInherits(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitInherits (arg list 1) of visitInherits(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitInherits(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2775);    // compilenode identifier
                var call1154 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1154;
              };
              func1153.paramCounts = [1, 1];
              obj1103.methods["visitInherits()up"] = func1153;
              func1153.definitionLine = 2775;
              func1153.definitionModule = "ast";
              var func1155 = function(argcv) {    // method visitDialect(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitDialect (arg list 1) of visitDialect(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitDialect(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2776);    // compilenode identifier
                var call1156 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1156;
              };
              func1155.paramCounts = [1, 1];
              obj1103.methods["visitDialect()up"] = func1155;
              func1155.definitionLine = 2776;
              func1155.definitionModule = "ast";
              var func1157 = function(argcv) {    // method visitBlank(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitBlank (arg list 1) of visitBlank(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitBlank(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2777);    // compilenode identifier
                var call1158 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1158;
              };
              func1157.paramCounts = [1, 1];
              obj1103.methods["visitBlank()up"] = func1157;
              func1157.definitionLine = 2777;
              func1157.definitionModule = "ast";
              var func1159 = function(argcv) {    // method visitComment(1)up(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitComment (arg list 1) of visitComment(1)up(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitComment(1)up(1)"));
                setModuleName("ast");
                setLineNumber(2778);    // compilenode identifier
                var call1160 = callmethodChecked(var_visitation, "apply", [2], var_o, var_as);
                return call1160;
              };
              func1159.paramCounts = [1, 1];
              obj1103.methods["visitComment()up"] = func1159;
              func1159.definitionLine = 2778;
              func1159.definitionModule = "ast";
              var func1161 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                setModuleName("ast");
                setLineNumber(2780);    // compilenode string
                var string1162 = new GraceString("a pluggable AST visitor");
                return string1162;
              };
              func1161.paramCounts = [0];
              obj1103.methods["asString"] = func1161;
              func1161.definitionLine = 2780;
              func1161.definitionModule = "ast";
              superDepth = origSuperDepth;
            };
            obj_init_1103.apply(inheritingObject, []);
            return obj1103;
            };
            this.methods["pluggableVisitor()object"] = func1101;
          setLineNumber(2792);    // compilenode method
          var func1163 = function(argcv) {    // method findAnnotation(2)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_node = arguments[curarg];
            curarg++;
            var var_annName = arguments[curarg];
            curarg++;
            if (argcv[0] !== 2)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for findAnnotation(2)"));
            setModuleName("ast");
            setLineNumber(2793);    // compilenode identifier
            var call1164 = callmethodChecked(var_node, "annotations", [0]);
            var block1165 = new GraceBlock(this, 2793, 1);
            setLineNumber(1);    // compilenode identifier
            block1165.real = function(var_ann) {
              var if1166 = GraceDone;
              setLineNumber(2794);    // compilenode block
              var block1167 = new GraceBlock(this, 2794, 0);
              block1167.real = function() {
                setLineNumber(2795);    // compilenode identifier
                var call1169 = callmethodChecked(var_ann, "value", [0]);
                var opresult1171 = callmethodChecked(call1169, "==", [1], var_annName);
                return opresult1171;
              };
              setLineNumber(2794);    // compilenode string
              var string1173 = new GraceString("identifier");
              var call1175 = callmethodChecked(var_ann, "kind", [0]);
              var opresult1177 = callmethodChecked(call1175, "==", [1], string1173);
              var opresult1179 = callmethodChecked(opresult1177, "&&", [1], block1167);
              if (Grace_isTrue(opresult1179)) {
                setLineNumber(2796);    // compilenode object
                var obj1180 = Grace_allocObject(null, "object");
                obj1180.definitionModule = "ast";
                obj1180.definitionLine = 2796;
                obj1180.outer = this;
                var reader_ast_outer1181 = function() {
                  return this.outer;
                };
                obj1180.methods["outer"] = reader_ast_outer1181;
                var obj_init_1180 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj1180;
                  setLineNumber(2797);    // compilenode identifier
                  obj1180.superobj = GraceTrue;
                  if (GraceTrue.data) obj1180.data = GraceTrue.data;
                  if (GraceTrue.hasOwnProperty('_value'))
                      obj1180._value = GraceTrue._value;
                  setLineNumber(2798);    // compilenode identifier
                  obj1180.data["value"] = var_ann;
                  var reader_ast_value1182 = function() {
                    return this.data["value"];
                  };
                  reader_ast_value1182.def = true;
                  obj1180.methods["value"] = reader_ast_value1182;
                  superDepth = origSuperDepth;
                };
                obj_init_1180.apply(obj1180, []);
                throw new ReturnException(obj1180, returnTarget);
              }
              return if1166;
            };
            var call1183 = callmethodChecked(var_prelude, "for()do", [1, 1], call1164, block1165);
            setLineNumber(2802);    // compilenode identifier
            return GraceFalse;
          };
          func1163.paramCounts = [2];
          this.methods["findAnnotation"] = func1163;
          func1163.definitionLine = 2792;
          func1163.definitionModule = "ast";
          setLineNumber(16);    // compilenode num
          var var_lineLength = new GraceNum(80);
          setLineNumber(2794);    // compilenode method
          var func1184 = function(argcv) {    // method lineLength
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for lineLength"));
            setModuleName("ast");
            // lineLength is a simple accessor - elide try ... catch
            setLineNumber(16);    // compilenode identifier
            return var_lineLength;
          };
          func1184.paramCounts = [0];
          this.methods["lineLength"] = func1184;
          func1184.definitionLine = 2794;
          func1184.definitionModule = "ast";
          this.methods["lineLength"].debug = "def";
          setLineNumber(38);    // compilenode object
          var obj1185 = Grace_allocObject(GraceObject, "ancestorChain");
          obj1185.definitionModule = "ast";
          obj1185.definitionLine = 38;
          obj1185.outer = this;
          var reader_ast_outer1186 = function() {
            return this.outer;
          };
          obj1185.methods["outer"] = reader_ast_outer1186;
          var obj_init_1185 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj1185;
            var func1187 = function(argcv) {    // method empty
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for empty"));
              setModuleName("ast");
              setLineNumber(39);    // compilenode object
              var obj1188 = Grace_allocObject(GraceObject, "ancestorChain.empty");
              obj1188.definitionModule = "ast";
              obj1188.definitionLine = 39;
              obj1188.outer = this;
              var reader_ast_outer1189 = function() {
                return this.outer;
              };
              obj1188.methods["outer"] = reader_ast_outer1189;
              var obj_init_1188 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj1188;
                var func1190 = function(argcv) {    // method isEmpty
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEmpty"));
                  setModuleName("ast");
                  // isEmpty is a simple accessor - elide try ... catch
                  setLineNumber(40);    // compilenode identifier
                  return GraceTrue;
                };
                func1190.paramCounts = [0];
                obj1188.methods["isEmpty"] = func1190;
                func1190.definitionLine = 40;
                func1190.definitionModule = "ast";
                var func1191 = function(argcv) {    // method asString
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                  setModuleName("ast");
                  setLineNumber(41);    // compilenode string
                  var string1192 = new GraceString("ancestorChain \u25ab");
                  return string1192;
                };
                func1191.paramCounts = [0];
                obj1188.methods["asString"] = func1191;
                func1191.definitionLine = 41;
                func1191.definitionModule = "ast";
                var func1193 = function(argcv) {    // method extend(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_n = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for extend(1)"));
                  setModuleName("ast");
                  setLineNumber(42);    // compilenode call
                  var call1194 = callmethodChecked(superDepth, "outer", [0]);
                  onOuter = true;
                  onSelf = true;
                  var call1195 = callmethodChecked(call1194, "cons()onto", [1, 1], var_n, this);
                  return call1195;
                };
                func1193.paramCounts = [1];
                obj1188.methods["extend"] = func1193;
                func1193.definitionLine = 42;
                func1193.definitionModule = "ast";
                superDepth = origSuperDepth;
              };
              obj_init_1188.apply(obj1188, []);
              return obj1188;
            };
            func1187.paramCounts = [0];
            obj1185.methods["empty"] = func1187;
            func1187.definitionLine = 39;
            func1187.definitionModule = "ast";
              var func1196 = function(argcv) {    // method empty()object
                var curarg = 1;
                var inheritingObject = arguments[curarg++];
                // Start argument processing
                curarg = 1;
                // End argument processing
                setModuleName("ast");
                var returnTarget = invocationCount;
                invocationCount++;
                var obj1197 = Grace_allocObject(GraceObject, "empty");
                obj1197.definitionModule = "ast";
                obj1197.definitionLine = 39;
                var inho1197 = inheritingObject;
                while (inho1197.superobj) inho1197 = inho1197.superobj;
                inho1197.superobj = obj1197;
                obj1197.data = inheritingObject.data;
                if (inheritingObject.hasOwnProperty('_value'))
                  obj1197._value = inheritingObject._value;
                obj1197.outer = this;
                var reader_ast_outer1198 = function() {
                  return this.outer;
                };
                obj1197.methods["outer"] = reader_ast_outer1198;
                var obj_init_1197 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj1197;
                  var func1199 = function(argcv) {    // method isEmpty
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEmpty"));
                    setModuleName("ast");
                    // isEmpty is a simple accessor - elide try ... catch
                    setLineNumber(40);    // compilenode identifier
                    return GraceTrue;
                  };
                  func1199.paramCounts = [0];
                  obj1197.methods["isEmpty"] = func1199;
                  func1199.definitionLine = 40;
                  func1199.definitionModule = "ast";
                  var func1200 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                    setModuleName("ast");
                    setLineNumber(41);    // compilenode string
                    var string1201 = new GraceString("ancestorChain \u25ab");
                    return string1201;
                  };
                  func1200.paramCounts = [0];
                  obj1197.methods["asString"] = func1200;
                  func1200.definitionLine = 41;
                  func1200.definitionModule = "ast";
                  var func1202 = function(argcv) {    // method extend(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_n = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for extend(1)"));
                    setModuleName("ast");
                    setLineNumber(42);    // compilenode call
                    var call1203 = callmethodChecked(superDepth, "outer", [0]);
                    onOuter = true;
                    onSelf = true;
                    var call1204 = callmethodChecked(call1203, "cons()onto", [1, 1], var_n, this);
                    return call1204;
                  };
                  func1202.paramCounts = [1];
                  obj1197.methods["extend"] = func1202;
                  func1202.definitionLine = 42;
                  func1202.definitionModule = "ast";
                  superDepth = origSuperDepth;
                };
                obj_init_1197.apply(inheritingObject, []);
                return obj1197;
                };
                obj1185.methods["empty()object"] = func1196;
              var func1205 = function(argcv) {    // method with(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_n = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for with(1)"));
                setModuleName("ast");
                setLineNumber(44);    // compilenode call
                onSelf = true;
                var call1206 = callmethodChecked(this, "empty", [0]);
                var call1207 = callmethodChecked(call1206, "extend", [1], var_n);
                return call1207;
              };
              func1205.paramCounts = [1];
              obj1185.methods["with"] = func1205;
              func1205.definitionLine = 44;
              func1205.definitionModule = "ast";
              var func1208 = function(argcv) {    // method cons(1)onto(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_p = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for cons (arg list 1) of cons(1)onto(1)"));
                var var_as = arguments[curarg];
                curarg++;
                if (argcv[1] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onto (arg list 2) of cons(1)onto(1)"));
                setModuleName("ast");
                setLineNumber(45);    // compilenode object
                var obj1209 = Grace_allocObject(GraceObject, "ancestorChain.cons()onto");
                obj1209.definitionModule = "ast";
                obj1209.definitionLine = 45;
                obj1209.outer = this;
                var reader_ast_outer1210 = function() {
                  return this.outer;
                };
                obj1209.methods["outer"] = reader_ast_outer1210;
                var obj_init_1209 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj1209;
                  var func1211 = function(argcv) {    // method forebears
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for forebears"));
                    setModuleName("ast");
                    // forebears is a simple accessor - elide try ... catch
                    setLineNumber(46);    // compilenode identifier
                    return var_as;
                  };
                  func1211.paramCounts = [0];
                  obj1209.methods["forebears"] = func1211;
                  func1211.definitionLine = 46;
                  func1211.definitionModule = "ast";
                  var func1212 = function(argcv) {    // method isEmpty
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEmpty"));
                    setModuleName("ast");
                    // isEmpty is a simple accessor - elide try ... catch
                    setLineNumber(47);    // compilenode identifier
                    return GraceFalse;
                  };
                  func1212.paramCounts = [0];
                  obj1209.methods["isEmpty"] = func1212;
                  func1212.definitionLine = 47;
                  func1212.definitionModule = "ast";
                  var func1213 = function(argcv) {    // method parent
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parent"));
                    setModuleName("ast");
                    // parent is a simple accessor - elide try ... catch
                    setLineNumber(48);    // compilenode identifier
                    return var_p;
                  };
                  func1213.paramCounts = [0];
                  obj1209.methods["parent"] = func1213;
                  func1213.definitionLine = 48;
                  func1213.definitionModule = "ast";
                  var func1214 = function(argcv) {    // method grandparent
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for grandparent"));
                    setModuleName("ast");
                    setLineNumber(49);    // compilenode call
                    onSelf = true;
                    var call1215 = callmethodChecked(this, "forebears", [0]);
                    var call1216 = callmethodChecked(call1215, "parent", [0]);
                    return call1216;
                  };
                  func1214.paramCounts = [0];
                  obj1209.methods["grandparent"] = func1214;
                  func1214.definitionLine = 49;
                  func1214.definitionModule = "ast";
                  var func1217 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                    setModuleName("ast");
                    setLineNumber(52);    // compilenode identifier
                    var var_a = this;
                    setLineNumber(53);    // compilenode string
                    var string1218 = new GraceString("ancestorChain ");
                    var var_s = string1218;
                    setLineNumber(54);    // compilenode block
                    var block1219 = new GraceBlock(this, 54, 0);
                    block1219.real = function() {
                      var call1220 = callmethodChecked(var_a, "isEmpty", [0]);
                      var call1221 = callmethodChecked(call1220, "not", [0]);
                      return call1221;
                    };
                    var block1222 = new GraceBlock(this, 54, 0);
                    block1222.real = function() {
                      setLineNumber(55);    // compilenode string
                      var string1223 = new GraceString("\u27a4");
                      var call1225 = callmethodChecked(var_a, "parent", [0]);
                      var opresult1228 = callmethodChecked(var_s, "++", [1], call1225);
                      var opresult1230 = callmethodChecked(opresult1228, "++", [1], string1223);
                      var_s = opresult1230;
                      setLineNumber(56);    // compilenode identifier
                      var call1231 = callmethodChecked(var_a, "forebears", [0]);
                      var_a = call1231;
                      return GraceDone;
                    };
                    var call1232 = callmethodChecked(var_prelude, "while()do", [1, 1], block1219, block1222);
                    setLineNumber(58);    // compilenode string
                    var string1233 = new GraceString("\u25ab");
                    var opresult1236 = callmethodChecked(var_s, "++", [1], string1233);
                    return opresult1236;
                  };
                  func1217.paramCounts = [0];
                  obj1209.methods["asString"] = func1217;
                  func1217.definitionLine = 51;
                  func1217.definitionModule = "ast";
                  var func1237 = function(argcv) {    // method extend(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_n = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for extend(1)"));
                    setModuleName("ast");
                    setLineNumber(60);    // compilenode call
                    var call1238 = callmethodChecked(superDepth, "outer", [0]);
                    onOuter = true;
                    onSelf = true;
                    var call1239 = callmethodChecked(call1238, "cons()onto", [1, 1], var_n, this);
                    return call1239;
                  };
                  func1237.paramCounts = [1];
                  obj1209.methods["extend"] = func1237;
                  func1237.definitionLine = 60;
                  func1237.definitionModule = "ast";
                  superDepth = origSuperDepth;
                };
                obj_init_1209.apply(obj1209, []);
                return obj1209;
              };
              func1208.confidential = true;
              func1208.paramCounts = [1, 1];
              obj1185.methods["cons()onto"] = func1208;
              func1208.definitionLine = 45;
              func1208.definitionModule = "ast";
                var func1240 = function(argcv) {    // method cons(1     )onto(1     )()object
                  var curarg = 1;
                  var var_p = arguments[curarg];
                  curarg++;
                  var var_as = arguments[curarg];
                  curarg++;
                  var inheritingObject = arguments[curarg++];
                  // Start argument processing
                  curarg = 1;
                  curarg++;
                  curarg++;
                  // End argument processing
                  setModuleName("ast");
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var obj1241 = Grace_allocObject(GraceObject, "cons()onto");
                  obj1241.definitionModule = "ast";
                  obj1241.definitionLine = 45;
                  var inho1241 = inheritingObject;
                  while (inho1241.superobj) inho1241 = inho1241.superobj;
                  inho1241.superobj = obj1241;
                  obj1241.data = inheritingObject.data;
                  if (inheritingObject.hasOwnProperty('_value'))
                    obj1241._value = inheritingObject._value;
                  obj1241.outer = this;
                  var reader_ast_outer1242 = function() {
                    return this.outer;
                  };
                  obj1241.methods["outer"] = reader_ast_outer1242;
                  var obj_init_1241 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj1241;
                    var func1243 = function(argcv) {    // method forebears
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for forebears"));
                      setModuleName("ast");
                      // forebears is a simple accessor - elide try ... catch
                      setLineNumber(46);    // compilenode identifier
                      return var_as;
                    };
                    func1243.paramCounts = [0];
                    obj1241.methods["forebears"] = func1243;
                    func1243.definitionLine = 46;
                    func1243.definitionModule = "ast";
                    var func1244 = function(argcv) {    // method isEmpty
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEmpty"));
                      setModuleName("ast");
                      // isEmpty is a simple accessor - elide try ... catch
                      setLineNumber(47);    // compilenode identifier
                      return GraceFalse;
                    };
                    func1244.paramCounts = [0];
                    obj1241.methods["isEmpty"] = func1244;
                    func1244.definitionLine = 47;
                    func1244.definitionModule = "ast";
                    var func1245 = function(argcv) {    // method parent
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parent"));
                      setModuleName("ast");
                      // parent is a simple accessor - elide try ... catch
                      setLineNumber(48);    // compilenode identifier
                      return var_p;
                    };
                    func1245.paramCounts = [0];
                    obj1241.methods["parent"] = func1245;
                    func1245.definitionLine = 48;
                    func1245.definitionModule = "ast";
                    var func1246 = function(argcv) {    // method grandparent
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for grandparent"));
                      setModuleName("ast");
                      setLineNumber(49);    // compilenode call
                      onSelf = true;
                      var call1247 = callmethodChecked(this, "forebears", [0]);
                      var call1248 = callmethodChecked(call1247, "parent", [0]);
                      return call1248;
                    };
                    func1246.paramCounts = [0];
                    obj1241.methods["grandparent"] = func1246;
                    func1246.definitionLine = 49;
                    func1246.definitionModule = "ast";
                    var func1249 = function(argcv) {    // method asString
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                      setModuleName("ast");
                      setLineNumber(52);    // compilenode identifier
                      var var_a = this;
                      setLineNumber(53);    // compilenode string
                      var string1250 = new GraceString("ancestorChain ");
                      var var_s = string1250;
                      setLineNumber(54);    // compilenode block
                      var block1251 = new GraceBlock(this, 54, 0);
                      block1251.real = function() {
                        var call1252 = callmethodChecked(var_a, "isEmpty", [0]);
                        var call1253 = callmethodChecked(call1252, "not", [0]);
                        return call1253;
                      };
                      var block1254 = new GraceBlock(this, 54, 0);
                      block1254.real = function() {
                        setLineNumber(55);    // compilenode string
                        var string1255 = new GraceString("\u27a4");
                        var call1257 = callmethodChecked(var_a, "parent", [0]);
                        var opresult1260 = callmethodChecked(var_s, "++", [1], call1257);
                        var opresult1262 = callmethodChecked(opresult1260, "++", [1], string1255);
                        var_s = opresult1262;
                        setLineNumber(56);    // compilenode identifier
                        var call1263 = callmethodChecked(var_a, "forebears", [0]);
                        var_a = call1263;
                        return GraceDone;
                      };
                      var call1264 = callmethodChecked(var_prelude, "while()do", [1, 1], block1251, block1254);
                      setLineNumber(58);    // compilenode string
                      var string1265 = new GraceString("\u25ab");
                      var opresult1268 = callmethodChecked(var_s, "++", [1], string1265);
                      return opresult1268;
                    };
                    func1249.paramCounts = [0];
                    obj1241.methods["asString"] = func1249;
                    func1249.definitionLine = 51;
                    func1249.definitionModule = "ast";
                    var func1269 = function(argcv) {    // method extend(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_n = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for extend(1)"));
                      setModuleName("ast");
                      setLineNumber(60);    // compilenode call
                      var call1270 = callmethodChecked(superDepth, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call1271 = callmethodChecked(call1270, "cons()onto", [1, 1], var_n, this);
                      return call1271;
                    };
                    func1269.paramCounts = [1];
                    obj1241.methods["extend"] = func1269;
                    func1269.definitionLine = 60;
                    func1269.definitionModule = "ast";
                    superDepth = origSuperDepth;
                  };
                  obj_init_1241.apply(inheritingObject, []);
                  return obj1241;
                  };
                  func1240.confidential = true;
                  obj1185.methods["cons()onto()object"] = func1240;
                superDepth = origSuperDepth;
              };
              obj_init_1185.apply(obj1185, []);
              var var_ancestorChain = obj1185;
              var func1272 = function(argcv) {    // method ancestorChain
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestorChain"));
                setModuleName("ast");
                // ancestorChain is a simple accessor - elide try ... catch
                setLineNumber(38);    // compilenode identifier
                return var_ancestorChain;
              };
              func1272.paramCounts = [0];
              this.methods["ancestorChain"] = func1272;
              func1272.definitionLine = 60;
              func1272.definitionModule = "ast";
              this.methods["ancestorChain"].debug = "def";
              setLineNumber(64);    // compilenode call
              var call1273 = callmethodChecked(var_prelude, "emptySequence", [0]);
              var var_emptySeq = call1273;
              var func1274 = function(argcv) {    // method emptySeq
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for emptySeq"));
                setModuleName("ast");
                // emptySeq is a simple accessor - elide try ... catch
                return var_emptySeq;
              };
              func1274.paramCounts = [0];
              this.methods["emptySeq"] = func1274;
              func1274.definitionLine = 64;
              func1274.definitionModule = "ast";
              this.methods["emptySeq"].debug = "def";
              setLineNumber(66);    // compilenode typedec
              // Type decl AstNode
              //   Type literal 
              var type1276 = new GraceType("AstNode");
              type1276.typeMethods.push("kind");
              type1276.typeMethods.push("register");
              type1276.typeMethods.push("line");
              type1276.typeMethods.push("line:=");
              type1276.typeMethods.push("linePos");
              type1276.typeMethods.push("linePos:=");
              type1276.typeMethods.push("scope");
              type1276.typeMethods.push("pretty");
              type1276.typeMethods.push("comments");
              var var_AstNode = type1276;
              setLineNumber(64);    // compilenode method
              var func1277 = function(argcv) {    // method AstNode
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for AstNode"));
                setModuleName("ast");
                // AstNode is a simple accessor - elide try ... catch
                setLineNumber(66);    // compilenode identifier
                return var_AstNode;
              };
              func1277.paramCounts = [0];
              this.methods["AstNode"] = func1277;
              func1277.definitionLine = 64;
              func1277.definitionModule = "ast";
              setLineNumber(84);    // compilenode typedec
              // Type decl SymbolTable
              var var_SymbolTable = var_Unknown;
              setLineNumber(64);    // compilenode method
              var func1279 = function(argcv) {    // method SymbolTable
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for SymbolTable"));
                setModuleName("ast");
                // SymbolTable is a simple accessor - elide try ... catch
                setLineNumber(84);    // compilenode identifier
                return var_SymbolTable;
              };
              func1279.paramCounts = [0];
              this.methods["SymbolTable"] = func1279;
              func1279.definitionLine = 64;
              func1279.definitionModule = "ast";
              setLineNumber(188);    // compilenode object
              var obj1280 = Grace_allocObject(null, "nullNode");
              obj1280.definitionModule = "ast";
              obj1280.definitionLine = 188;
              obj1280.outer = this;
              var reader_ast_outer1281 = function() {
                return this.outer;
              };
              obj1280.methods["outer"] = reader_ast_outer1281;
              var obj_init_1280 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj1280;
                var func1282 = function(argcv) {    // method toGrace(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_depth = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                  setModuleName("ast");
                  setLineNumber(192);    // compilenode string
                  var string1283 = new GraceString("// null");
                  return string1283;
                };
                func1282.paramCounts = [1];
                obj1280.methods["toGrace"] = func1282;
                func1282.definitionLine = 191;
                func1282.definitionModule = "ast";
                var func1284 = function(argcv) {    // method asString
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                  setModuleName("ast");
                  setLineNumber(194);    // compilenode string
                  var string1285 = new GraceString("the nullNode");
                  return string1285;
                };
                func1284.paramCounts = [0];
                obj1280.methods["asString"] = func1284;
                func1284.definitionLine = 194;
                func1284.definitionModule = "ast";
                var func1286 = function(argcv) {    // method ==(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_other = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
                  setModuleName("ast");
                  setLineNumber(195);    // compilenode identifier
                  onSelf = true;
                  var call1287 = callmethodChecked(this, "isMe", [1], var_other);
                  return call1287;
                };
                func1286.paramCounts = [1];
                obj1280.methods["=="] = func1286;
                func1286.definitionLine = 195;
                func1286.definitionModule = "ast";
                setLineNumber(189);    // compilenode call
                var call1288 = callmethodChecked(superDepth, "outer", [0]);
                onOuter = true;
                onSelf = true;
                var call1289 = callmethodChecked(call1288, "baseNode()object", [0, 1], this);
                obj1280.superobj = call1289;
                if (call1289.data) obj1280.data = call1289.data;
                if (call1289.hasOwnProperty('_value'))
                    obj1280._value = call1289._value;
                setLineNumber(190);    // compilenode string
                var string1290 = new GraceString("null");
                obj1280.data["kind"] = string1290;
                var reader_ast_kind1291 = function() {
                  return this.data["kind"];
                };
                reader_ast_kind1291.def = true;
                obj1280.methods["kind"] = reader_ast_kind1291;
                superDepth = origSuperDepth;
              };
              obj_init_1280.apply(obj1280, []);
              var var_nullNode = obj1280;
              setLineNumber(189);    // compilenode method
              var func1292 = function(argcv) {    // method nullNode
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nullNode"));
                setModuleName("ast");
                // nullNode is a simple accessor - elide try ... catch
                setLineNumber(188);    // compilenode identifier
                return var_nullNode;
              };
              func1292.paramCounts = [0];
              this.methods["nullNode"] = func1292;
              func1292.definitionLine = 189;
              func1292.definitionModule = "ast";
              this.methods["nullNode"].debug = "def";
              setLineNumber(198);    // compilenode object
              var obj1293 = Grace_allocObject(GraceObject, "fakeSymbolTable");
              obj1293.definitionModule = "ast";
              obj1293.definitionLine = 198;
              obj1293.outer = this;
              var reader_ast_outer1294 = function() {
                return this.outer;
              };
              obj1293.methods["outer"] = reader_ast_outer1294;
              var obj_init_1293 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj1293;
                var func1295 = function(argcv) {    // method asString
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                  setModuleName("ast");
                  setLineNumber(200);    // compilenode string
                  var string1296 = new GraceString("the fakeSymbolTable");
                  return string1296;
                };
                func1295.paramCounts = [0];
                obj1293.methods["asString"] = func1295;
                func1295.definitionLine = 200;
                func1295.definitionModule = "ast";
                var func1297 = function(argcv) {    // method addNode(1)as(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_n = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addNode (arg list 1) of addNode(1)as(1)"));
                  var var_kind = arguments[curarg];
                  curarg++;
                  if (argcv[1] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for as (arg list 2) of addNode(1)as(1)"));
                  setModuleName("ast");
                  setLineNumber(202);    // compilenode string
                  var string1298 = new GraceString("\" requested");
                  var string1301 = new GraceString(") as \"");
                  var string1304 = new GraceString(").addNode(");
                  onSelf = true;
                  var call1306 = callmethodChecked(this, "node", [0]);
                  var string1308 = new GraceString("fakeSymbolTable(on node ");
                  var opresult1310 = callmethodChecked(string1308, "++", [1], call1306);
                  var opresult1312 = callmethodChecked(opresult1310, "++", [1], string1304);
                  var opresult1314 = callmethodChecked(opresult1312, "++", [1], var_n);
                  var opresult1316 = callmethodChecked(opresult1314, "++", [1], string1301);
                  var opresult1318 = callmethodChecked(opresult1316, "++", [1], var_kind);
                  var opresult1320 = callmethodChecked(opresult1318, "++", [1], string1298);
                  var call1321 = callmethodChecked(var_prelude, "ProgrammingError", [0]);
                  var call1322 = callmethodChecked(call1321, "raise", [1], opresult1320);
                  return call1322;
                };
                func1297.paramCounts = [1, 1];
                obj1293.methods["addNode()as"] = func1297;
                func1297.definitionLine = 201;
                func1297.definitionModule = "ast";
                var func1323 = function(argcv) {    // method thatDefines(1)ifNone(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_name = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for thatDefines (arg list 1) of thatDefines(1)ifNone(1)"));
                  var var_action = arguments[curarg];
                  curarg++;
                  if (argcv[1] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ifNone (arg list 2) of thatDefines(1)ifNone(1)"));
                  setModuleName("ast");
                  setLineNumber(205);    // compilenode string
                  var string1324 = new GraceString(").");
                  var string1327 = new GraceString("fakeSymbolTable.thatDefines(");
                  var opresult1329 = callmethodChecked(string1327, "++", [1], var_name);
                  var opresult1331 = callmethodChecked(opresult1329, "++", [1], string1324);
                  var call1332 = callmethodChecked(var_prelude, "ProgrammingError", [0]);
                  var call1333 = callmethodChecked(call1332, "raise", [1], opresult1331);
                  return call1333;
                };
                func1323.paramCounts = [1, 1];
                obj1293.methods["thatDefines()ifNone"] = func1323;
                func1323.definitionLine = 204;
                func1323.definitionModule = "ast";
                var func1334 = function(argcv) {    // method enclosingObjectScope
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for enclosingObjectScope"));
                  setModuleName("ast");
                  setLineNumber(208);    // compilenode string
                  var string1335 = new GraceString("");
                  onSelf = true;
                  var call1337 = callmethodChecked(this, "node", [0]);
                  var string1339 = new GraceString("fakeSymbolTable.enclosingObjectScope on node ");
                  var opresult1341 = callmethodChecked(string1339, "++", [1], call1337);
                  var opresult1343 = callmethodChecked(opresult1341, "++", [1], string1335);
                  var call1344 = callmethodChecked(var_prelude, "ProgrammingError", [0]);
                  var call1345 = callmethodChecked(call1344, "raise", [1], opresult1343);
                  return call1345;
                };
                func1334.paramCounts = [0];
                obj1293.methods["enclosingObjectScope"] = func1334;
                func1334.definitionLine = 207;
                func1334.definitionModule = "ast";
                var func1346 = function(argcv) {    // method variety
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for variety"));
                  setModuleName("ast");
                  setLineNumber(210);    // compilenode string
                  var string1347 = new GraceString("fake");
                  return string1347;
                };
                func1346.paramCounts = [0];
                obj1293.methods["variety"] = func1346;
                func1346.definitionLine = 210;
                func1346.definitionModule = "ast";
                var func1348 = function(argcv) {    // method ==(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_other = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
                  setModuleName("ast");
                  setLineNumber(211);    // compilenode identifier
                  onSelf = true;
                  var call1349 = callmethodChecked(this, "isMe", [1], var_other);
                  return call1349;
                };
                func1348.paramCounts = [1];
                obj1293.methods["=="] = func1348;
                func1348.definitionLine = 211;
                func1348.definitionModule = "ast";
                setLineNumber(199);    // compilenode identifier
                obj1293.data["node"] = var_nullNode;
                var reader_ast_node1350 = function() {
                  return this.data["node"];
                };
                obj1293.methods["node"] = reader_ast_node1350;
                obj1293.data["node"] = var_nullNode;
                var writer_ast_node1350 = function(argcv, o) {
                  this.data["node"] = o;
                  return GraceDone;
                };
                obj1293.methods["node:="] = writer_ast_node1350;
                obj1293.mutable = true;
                superDepth = origSuperDepth;
              };
              obj_init_1293.apply(obj1293, []);
              var var_fakeSymbolTable = obj1293;
              setLineNumber(208);    // compilenode method
              var func1351 = function(argcv) {    // method fakeSymbolTable
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                if (argcv[0] !== 0)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fakeSymbolTable"));
                setModuleName("ast");
                // fakeSymbolTable is a simple accessor - elide try ... catch
                setLineNumber(198);    // compilenode identifier
                return var_fakeSymbolTable;
              };
              func1351.paramCounts = [0];
              this.methods["fakeSymbolTable"] = func1351;
              func1351.definitionLine = 208;
              func1351.definitionModule = "ast";
              this.methods["fakeSymbolTable"].debug = "def";
              setLineNumber(214);    // compilenode object
              var obj1352 = Grace_allocObject(GraceObject, "ifNode");
              obj1352.definitionModule = "ast";
              obj1352.definitionLine = 214;
              obj1352.outer = this;
              var reader_ast_outer1353 = function() {
                return this.outer;
              };
              obj1352.methods["outer"] = reader_ast_outer1353;
              var obj_init_1352 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj1352;
                var func1354 = function(argcv) {    // method new(3)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_cond = arguments[curarg];
                  curarg++;
                  var var_thenblock__39__ = arguments[curarg];
                  curarg++;
                  var var_elseblock__39__ = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 3)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(3)"));
                  setModuleName("ast");
                  setLineNumber(215);    // compilenode object
                  var obj1355 = Grace_allocObject(null, "ifNode.new");
                  obj1355.definitionModule = "ast";
                  obj1355.definitionLine = 215;
                  obj1355.outer = this;
                  var reader_ast_outer1356 = function() {
                    return this.outer;
                  };
                  obj1355.methods["outer"] = reader_ast_outer1356;
                  var obj_init_1355 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj1355;
                    var func1357 = function(argcv) {    // method isSimple
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isSimple"));
                      setModuleName("ast");
                      // isSimple is a simple accessor - elide try ... catch
                      setLineNumber(222);    // compilenode identifier
                      return GraceFalse;
                    };
                    func1357.paramCounts = [0];
                    obj1355.methods["isSimple"] = func1357;
                    func1357.definitionLine = 222;
                    func1357.definitionModule = "ast";
                    var func1358 = function(argcv) {    // method accept(1)from(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_visitor = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                      var var_as = arguments[curarg];
                      curarg++;
                      if (argcv[1] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                      // Start argument checking
                      curarg = 1;
                      setLineNumber(223);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                      curarg++;
                      curarg++;
                      // End argument checking
                      setModuleName("ast");
                      var if1359 = GraceDone;
                      setLineNumber(224);    // compilenode identifier
                      var call1360 = callmethodChecked(var_visitor, "visitIf()up", [1, 1], this, var_as);
                      if (Grace_isTrue(call1360)) {
                        setLineNumber(225);    // compilenode identifier
                        var call1361 = callmethodChecked(var_as, "extend", [1], this);
                        var var_newChain = call1361;
                        setLineNumber(226);    // compilenode call
                        onSelf = true;
                        var call1362 = callmethodChecked(this, "value", [0]);
                        var call1363 = callmethodChecked(call1362, "accept()from", [1, 1], var_visitor, var_newChain);
                        setLineNumber(227);    // compilenode call
                        onSelf = true;
                        var call1364 = callmethodChecked(this, "thenblock", [0]);
                        var call1365 = callmethodChecked(call1364, "accept()from", [1, 1], var_visitor, var_newChain);
                        setLineNumber(228);    // compilenode call
                        onSelf = true;
                        var call1366 = callmethodChecked(this, "elseblock", [0]);
                        var call1367 = callmethodChecked(call1366, "accept()from", [1, 1], var_visitor, var_newChain);
                        if1359 = call1367;
                      }
                      return if1359;
                    };
                    func1358.paramTypes = [];
                    func1358.paramTypes.push([]);
                    func1358.paramTypes.push([]);
                    func1358.paramCounts = [1, 1];
                    obj1355.methods["accept()from"] = func1358;
                    func1358.definitionLine = 223;
                    func1358.definitionModule = "ast";
                    var func1368 = function(argcv) {    // method map(1)ancestors(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_blk = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                      var var_as = arguments[curarg];
                      curarg++;
                      if (argcv[1] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                      setModuleName("ast");
                      setLineNumber(232);    // compilenode call
                      onSelf = true;
                      var call1369 = callmethodChecked(this, "shallowCopy", [0]);
                      var var_n = call1369;
                      setLineNumber(233);    // compilenode identifier
                      var call1370 = callmethodChecked(var_as, "extend", [1], var_n);
                      var var_newChain = call1370;
                      setLineNumber(234);    // compilenode call
                      onSelf = true;
                      var call1371 = callmethodChecked(this, "value", [0]);
                      var call1372 = callmethodChecked(call1371, "map()ancestors", [1, 1], var_blk, var_newChain);
                      var call1373 = callmethodChecked(var_n, "value:=", [1], call1372);
                      setLineNumber(235);    // compilenode call
                      onSelf = true;
                      var call1374 = callmethodChecked(this, "thenblock", [0]);
                      var call1375 = callmethodChecked(call1374, "map()ancestors", [1, 1], var_blk, var_newChain);
                      var call1376 = callmethodChecked(var_n, "thenblock:=", [1], call1375);
                      setLineNumber(236);    // compilenode call
                      onSelf = true;
                      var call1377 = callmethodChecked(this, "elseblock", [0]);
                      var call1378 = callmethodChecked(call1377, "map()ancestors", [1, 1], var_blk, var_newChain);
                      var call1379 = callmethodChecked(var_n, "elseblock:=", [1], call1378);
                      setLineNumber(237);    // compilenode identifier
                      var call1380 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                      return call1380;
                    };
                    func1368.paramCounts = [1, 1];
                    obj1355.methods["map()ancestors"] = func1368;
                    func1368.definitionLine = 231;
                    func1368.definitionModule = "ast";
                    var func1381 = function(argcv) {    // method pretty(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_depth = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                      setModuleName("ast");
                      setLineNumber(240);    // compilenode string
                      var string1382 = new GraceString("");
                      var var_spc = string1382;
                      setLineNumber(241);    // compilenode num
                      var opresult1385 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                      var block1386 = new GraceBlock(this, 241, 1);
                      setLineNumber(1);    // compilenode identifier
                      block1386.real = function(var_i) {
                        setLineNumber(242);    // compilenode string
                        var string1387 = new GraceString("  ");
                        var opresult1390 = callmethodChecked(var_spc, "++", [1], string1387);
                        var_spc = opresult1390;
                        return GraceDone;
                      };
                      var call1391 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult1385, block1386);
                      setLineNumber(244);    // compilenode string
                      var string1392 = new GraceString("\n");
                      var call1394 = callmethodsuper(this, "pretty", [1], var_depth);
                      var opresult1396 = callmethodChecked(call1394, "++", [1], string1392);
                      var var_s = opresult1396;
                      setLineNumber(245);    // compilenode identifier
                      var opresult1399 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                      onSelf = true;
                      var call1400 = callmethodChecked(this, "value", [0]);
                      var call1401 = callmethodChecked(call1400, "pretty", [1], opresult1399);
                      var opresult1405 = callmethodChecked(var_s, "++", [1], var_spc);
                      var opresult1407 = callmethodChecked(opresult1405, "++", [1], call1401);
                      var_s = opresult1407;
                      setLineNumber(246);    // compilenode string
                      var string1408 = new GraceString("\n");
                      var opresult1411 = callmethodChecked(var_s, "++", [1], string1408);
                      var_s = opresult1411;
                      var if1412 = GraceDone;
                      setLineNumber(247);    // compilenode string
                      var string1413 = new GraceString("symbols");
                      var call1415 = callmethodChecked(var_util, "target", [0]);
                      var opresult1417 = callmethodChecked(call1415, "==", [1], string1413);
                      if (Grace_isTrue(opresult1417)) {
                        setLineNumber(248);    // compilenode string
                        var string1418 = new GraceString("\n");
                        var opresult1422 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                        onSelf = true;
                        var call1423 = callmethodChecked(this, "thenblock", [0]);
                        var call1424 = callmethodChecked(call1423, "pretty", [1], opresult1422);
                        var string1426 = new GraceString("Then: ");
                        var opresult1428 = callmethodChecked(string1426, "++", [1], call1424);
                        var opresult1430 = callmethodChecked(opresult1428, "++", [1], string1418);
                        var opresult1434 = callmethodChecked(var_s, "++", [1], var_spc);
                        var opresult1436 = callmethodChecked(opresult1434, "++", [1], opresult1430);
                        var_s = opresult1436;
                        setLineNumber(249);    // compilenode string
                        var string1437 = new GraceString("");
                        var opresult1441 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                        onSelf = true;
                        var call1442 = callmethodChecked(this, "elseblock", [0]);
                        var call1443 = callmethodChecked(call1442, "pretty", [1], opresult1441);
                        var string1445 = new GraceString("Else: ");
                        var opresult1447 = callmethodChecked(string1445, "++", [1], call1443);
                        var opresult1449 = callmethodChecked(opresult1447, "++", [1], string1437);
                        var opresult1453 = callmethodChecked(var_s, "++", [1], var_spc);
                        var opresult1455 = callmethodChecked(opresult1453, "++", [1], opresult1449);
                        var_s = opresult1455;
                        if1412 = GraceDone;
                      } else {
                        setLineNumber(251);    // compilenode string
                        var string1456 = new GraceString("Then:");
                        var opresult1460 = callmethodChecked(var_s, "++", [1], var_spc);
                        var opresult1462 = callmethodChecked(opresult1460, "++", [1], string1456);
                        var_s = opresult1462;
                        setLineNumber(252);    // compilenode call
                        onSelf = true;
                        var call1463 = callmethodChecked(this, "thenblock", [0]);
                        var call1464 = callmethodChecked(call1463, "body", [0]);
                        var block1465 = new GraceBlock(this, 252, 1);
                        setLineNumber(1);    // compilenode identifier
                        block1465.real = function(var_ix) {
                          setLineNumber(253);    // compilenode identifier
                          var opresult1468 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                          var call1469 = callmethodChecked(var_ix, "pretty", [1], opresult1468);
                          var string1472 = new GraceString("\n  ");
                          var opresult1475 = callmethodChecked(var_s, "++", [1], string1472);
                          var opresult1477 = callmethodChecked(opresult1475, "++", [1], var_spc);
                          var opresult1479 = callmethodChecked(opresult1477, "++", [1], call1469);
                          var_s = opresult1479;
                          return GraceDone;
                        };
                        var call1480 = callmethodChecked(var_prelude, "for()do", [1, 1], call1464, block1465);
                        setLineNumber(255);    // compilenode string
                        var string1481 = new GraceString("\n");
                        var opresult1484 = callmethodChecked(var_s, "++", [1], string1481);
                        var_s = opresult1484;
                        setLineNumber(256);    // compilenode string
                        var string1485 = new GraceString("Else:");
                        var opresult1489 = callmethodChecked(var_s, "++", [1], var_spc);
                        var opresult1491 = callmethodChecked(opresult1489, "++", [1], string1485);
                        var_s = opresult1491;
                        setLineNumber(257);    // compilenode call
                        onSelf = true;
                        var call1492 = callmethodChecked(this, "elseblock", [0]);
                        var call1493 = callmethodChecked(call1492, "body", [0]);
                        var block1494 = new GraceBlock(this, 257, 1);
                        setLineNumber(1);    // compilenode identifier
                        block1494.real = function(var_ix) {
                          setLineNumber(258);    // compilenode identifier
                          var opresult1497 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                          var call1498 = callmethodChecked(var_ix, "pretty", [1], opresult1497);
                          var string1501 = new GraceString("\n  ");
                          var opresult1504 = callmethodChecked(var_s, "++", [1], string1501);
                          var opresult1506 = callmethodChecked(opresult1504, "++", [1], var_spc);
                          var opresult1508 = callmethodChecked(opresult1506, "++", [1], call1498);
                          var_s = opresult1508;
                          return GraceDone;
                        };
                        var call1509 = callmethodChecked(var_prelude, "for()do", [1, 1], call1493, block1494);
                        if1412 = call1509;
                      }
                      setLineNumber(261);    // compilenode identifier
                      return var_s;
                    };
                    func1381.paramCounts = [1];
                    obj1355.methods["pretty"] = func1381;
                    func1381.definitionLine = 239;
                    func1381.definitionModule = "ast";
                    var func1510 = function(argcv) {    // method toGrace(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_depth = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                      // Start argument checking
                      curarg = 1;
                      setLineNumber(263);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                  callmethod(var_Number, "asString", [0])._value + "."));
                      curarg++;
                      // End argument checking
                      setModuleName("ast");
                      setLineNumber(264);    // compilenode string
                      var string1511 = new GraceString("");
                      var var_spc = string1511;
                      setLineNumber(265);    // compilenode block
                      var block1512 = new GraceBlock(this, 265, 0);
                      block1512.real = function() {
                        setLineNumber(266);    // compilenode string
                        var string1513 = new GraceString("    ");
                        var opresult1516 = callmethodChecked(var_spc, "++", [1], string1513);
                        var_spc = opresult1516;
                        return GraceDone;
                      };
                      var call1517 = callmethodChecked(var_prelude, "repeat()times", [1, 1], var_depth, block1512);
                      setLineNumber(268);    // compilenode string
                      var string1518 = new GraceString(") then {");
                      onSelf = true;
                      var call1520 = callmethodChecked(this, "value", [0]);
                      var call1521 = callmethodChecked(call1520, "toGrace", [1], new GraceNum(0));
                      var string1523 = new GraceString("if (");
                      var opresult1525 = callmethodChecked(string1523, "++", [1], call1521);
                      var opresult1527 = callmethodChecked(opresult1525, "++", [1], string1518);
                      var var_s = opresult1527;
                      setLineNumber(269);    // compilenode call
                      onSelf = true;
                      var call1528 = callmethodChecked(this, "thenblock", [0]);
                      var call1529 = callmethodChecked(call1528, "body", [0]);
                      var block1530 = new GraceBlock(this, 269, 1);
                      setLineNumber(1);    // compilenode identifier
                      block1530.real = function(var_ix) {
                        setLineNumber(270);    // compilenode identifier
                        var opresult1533 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                        var call1534 = callmethodChecked(var_ix, "toGrace", [1], opresult1533);
                        var string1536 = new GraceString("    ");
                        var string1539 = new GraceString("\n");
                        var opresult1542 = callmethodChecked(var_s, "++", [1], string1539);
                        var opresult1544 = callmethodChecked(opresult1542, "++", [1], var_spc);
                        var opresult1546 = callmethodChecked(opresult1544, "++", [1], string1536);
                        var opresult1548 = callmethodChecked(opresult1546, "++", [1], call1534);
                        var_s = opresult1548;
                        return GraceDone;
                      };
                      var call1549 = callmethodChecked(var_prelude, "for()do", [1, 1], call1529, block1530);
                      var if1550 = GraceDone;
                      setLineNumber(272);    // compilenode call
                      onSelf = true;
                      var call1551 = callmethodChecked(this, "elseblock", [0]);
                      var call1552 = callmethodChecked(call1551, "isntEmpty", [0]);
                      if (Grace_isTrue(call1552)) {
                        setLineNumber(273);    // compilenode string
                        var string1553 = new GraceString("} else {");
                        var string1556 = new GraceString("\n");
                        var opresult1559 = callmethodChecked(var_s, "++", [1], string1556);
                        var opresult1561 = callmethodChecked(opresult1559, "++", [1], var_spc);
                        var opresult1563 = callmethodChecked(opresult1561, "++", [1], string1553);
                        var_s = opresult1563;
                        setLineNumber(274);    // compilenode call
                        onSelf = true;
                        var call1564 = callmethodChecked(this, "elseblock", [0]);
                        var call1565 = callmethodChecked(call1564, "body", [0]);
                        var block1566 = new GraceBlock(this, 274, 1);
                        setLineNumber(1);    // compilenode identifier
                        block1566.real = function(var_ix) {
                          setLineNumber(275);    // compilenode identifier
                          var opresult1569 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                          var call1570 = callmethodChecked(var_ix, "toGrace", [1], opresult1569);
                          var string1572 = new GraceString("    ");
                          var string1575 = new GraceString("\n");
                          var opresult1578 = callmethodChecked(var_s, "++", [1], string1575);
                          var opresult1580 = callmethodChecked(opresult1578, "++", [1], var_spc);
                          var opresult1582 = callmethodChecked(opresult1580, "++", [1], string1572);
                          var opresult1584 = callmethodChecked(opresult1582, "++", [1], call1570);
                          var_s = opresult1584;
                          return GraceDone;
                        };
                        var call1585 = callmethodChecked(var_prelude, "for()do", [1, 1], call1565, block1566);
                        if1550 = call1585;
                      }
                      setLineNumber(278);    // compilenode string
                      var string1586 = new GraceString("}");
                      var string1589 = new GraceString("\n");
                      var opresult1592 = callmethodChecked(var_s, "++", [1], string1589);
                      var opresult1594 = callmethodChecked(opresult1592, "++", [1], var_spc);
                      var opresult1596 = callmethodChecked(opresult1594, "++", [1], string1586);
                      var_s = opresult1596;
                      setLineNumber(279);    // return value
                      if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method toGrace(1) does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      return var_s;
                    };
                    func1510.paramTypes = [];
                    func1510.paramTypes.push([type_Number, "depth"]);
                    func1510.paramCounts = [1];
                    obj1355.methods["toGrace"] = func1510;
                    func1510.definitionLine = 263;
                    func1510.definitionModule = "ast";
                    var func1597 = function(argcv) {    // method shallowCopy
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                      setModuleName("ast");
                      setLineNumber(282);    // compilenode identifier
                      var call1598 = callmethodChecked(var_ifNode, "new", [3], var_nullNode, var_nullNode, var_nullNode);
                      var call1599 = callmethodChecked(call1598, "shallowCopyFieldsFrom", [1], this);
                      return call1599;
                    };
                    func1597.paramCounts = [0];
                    obj1355.methods["shallowCopy"] = func1597;
                    func1597.definitionLine = 281;
                    func1597.definitionModule = "ast";
                    var func1600 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_other = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                      setModuleName("ast");
                      setLineNumber(285);    // compilenode identifier
                      var call1601 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                      setLineNumber(286);    // compilenode identifier
                      var call1602 = callmethodChecked(var_other, "handledIdentifiers", [0]);
                      onSelf = true;
                      var call1603 = callmethodChecked(this, "handledIdentifiers:=", [1], call1602);
                      setLineNumber(287);    // compilenode identifier
                      return this;
                    };
                    func1600.paramCounts = [1];
                    obj1355.methods["shallowCopyFieldsFrom"] = func1600;
                    func1600.definitionLine = 284;
                    func1600.definitionModule = "ast";
                    setLineNumber(216);    // compilenode call
                    var call1604 = callmethodChecked(superDepth, "outer", [0]);
                    onOuter = true;
                    onSelf = true;
                    var call1605 = callmethodChecked(call1604, "outer", [0]);
                    onOuter = true;
                    onSelf = true;
                    var call1606 = callmethodChecked(call1605, "baseNode()object", [0, 1], this);
                    obj1355.superobj = call1606;
                    if (call1606.data) obj1355.data = call1606.data;
                    if (call1606.hasOwnProperty('_value'))
                        obj1355._value = call1606._value;
                    setLineNumber(217);    // compilenode string
                    var string1607 = new GraceString("if");
                    obj1355.data["kind"] = string1607;
                    var reader_ast_kind1608 = function() {
                      return this.data["kind"];
                    };
                    reader_ast_kind1608.def = true;
                    obj1355.methods["kind"] = reader_ast_kind1608;
                    setLineNumber(218);    // compilenode identifier
                    obj1355.data["value"] = var_cond;
                    var reader_ast_value1609 = function() {
                      return this.data["value"];
                    };
                    obj1355.methods["value"] = reader_ast_value1609;
                    obj1355.data["value"] = var_cond;
                    var writer_ast_value1609 = function(argcv, o) {
                      this.data["value"] = o;
                      return GraceDone;
                    };
                    obj1355.methods["value:="] = writer_ast_value1609;
                    obj1355.mutable = true;
                    setLineNumber(219);    // compilenode identifier
                    obj1355.data["thenblock"] = var_thenblock__39__;
                    var reader_ast_thenblock1610 = function() {
                      return this.data["thenblock"];
                    };
                    obj1355.methods["thenblock"] = reader_ast_thenblock1610;
                    obj1355.data["thenblock"] = var_thenblock__39__;
                    var writer_ast_thenblock1610 = function(argcv, o) {
                      this.data["thenblock"] = o;
                      return GraceDone;
                    };
                    obj1355.methods["thenblock:="] = writer_ast_thenblock1610;
                    obj1355.mutable = true;
                    setLineNumber(220);    // compilenode identifier
                    obj1355.data["elseblock"] = var_elseblock__39__;
                    var reader_ast_elseblock1611 = function() {
                      return this.data["elseblock"];
                    };
                    obj1355.methods["elseblock"] = reader_ast_elseblock1611;
                    obj1355.data["elseblock"] = var_elseblock__39__;
                    var writer_ast_elseblock1611 = function(argcv, o) {
                      this.data["elseblock"] = o;
                      return GraceDone;
                    };
                    obj1355.methods["elseblock:="] = writer_ast_elseblock1611;
                    obj1355.mutable = true;
                    setLineNumber(221);    // compilenode identifier
                    obj1355.data["handledIdentifiers"] = GraceFalse;
                    var reader_ast_handledIdentifiers1612 = function() {
                      return this.data["handledIdentifiers"];
                    };
                    obj1355.methods["handledIdentifiers"] = reader_ast_handledIdentifiers1612;
                    obj1355.data["handledIdentifiers"] = GraceFalse;
                    var writer_ast_handledIdentifiers1612 = function(argcv, o) {
                      this.data["handledIdentifiers"] = o;
                      return GraceDone;
                    };
                    obj1355.methods["handledIdentifiers:="] = writer_ast_handledIdentifiers1612;
                    obj1355.mutable = true;
                    superDepth = origSuperDepth;
                  };
                  obj_init_1355.apply(obj1355, []);
                  return obj1355;
                };
                func1354.paramCounts = [3];
                obj1352.methods["new"] = func1354;
                func1354.definitionLine = 215;
                func1354.definitionModule = "ast";
                  var func1613 = function(argcv) {    // method new(3     )()object
                    var curarg = 1;
                    var var_cond = arguments[curarg];
                    curarg++;
                    var var_thenblock__39__ = arguments[curarg];
                    curarg++;
                    var var_elseblock__39__ = arguments[curarg];
                    curarg++;
                    var inheritingObject = arguments[curarg++];
                    // Start argument processing
                    curarg = 1;
                    curarg++;
                    curarg++;
                    curarg++;
                    // End argument processing
                    setModuleName("ast");
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var obj1614 = Grace_allocObject(null, "new");
                    obj1614.definitionModule = "ast";
                    obj1614.definitionLine = 215;
                    var inho1614 = inheritingObject;
                    while (inho1614.superobj) inho1614 = inho1614.superobj;
                    inho1614.superobj = obj1614;
                    obj1614.data = inheritingObject.data;
                    if (inheritingObject.hasOwnProperty('_value'))
                      obj1614._value = inheritingObject._value;
                    obj1614.outer = this;
                    var reader_ast_outer1615 = function() {
                      return this.outer;
                    };
                    obj1614.methods["outer"] = reader_ast_outer1615;
                    var obj_init_1614 = function() {
                      var origSuperDepth = superDepth;
                      superDepth = obj1614;
                      var func1616 = function(argcv) {    // method isSimple
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isSimple"));
                        setModuleName("ast");
                        // isSimple is a simple accessor - elide try ... catch
                        setLineNumber(222);    // compilenode identifier
                        return GraceFalse;
                      };
                      func1616.paramCounts = [0];
                      obj1614.methods["isSimple"] = func1616;
                      func1616.definitionLine = 222;
                      func1616.definitionModule = "ast";
                      var func1617 = function(argcv) {    // method accept(1)from(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_visitor = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                        var var_as = arguments[curarg];
                        curarg++;
                        if (argcv[1] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(223);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                        curarg++;
                        curarg++;
                        // End argument checking
                        setModuleName("ast");
                        var if1618 = GraceDone;
                        setLineNumber(224);    // compilenode identifier
                        var call1619 = callmethodChecked(var_visitor, "visitIf()up", [1, 1], this, var_as);
                        if (Grace_isTrue(call1619)) {
                          setLineNumber(225);    // compilenode identifier
                          var call1620 = callmethodChecked(var_as, "extend", [1], this);
                          var var_newChain = call1620;
                          setLineNumber(226);    // compilenode call
                          onSelf = true;
                          var call1621 = callmethodChecked(this, "value", [0]);
                          var call1622 = callmethodChecked(call1621, "accept()from", [1, 1], var_visitor, var_newChain);
                          setLineNumber(227);    // compilenode call
                          onSelf = true;
                          var call1623 = callmethodChecked(this, "thenblock", [0]);
                          var call1624 = callmethodChecked(call1623, "accept()from", [1, 1], var_visitor, var_newChain);
                          setLineNumber(228);    // compilenode call
                          onSelf = true;
                          var call1625 = callmethodChecked(this, "elseblock", [0]);
                          var call1626 = callmethodChecked(call1625, "accept()from", [1, 1], var_visitor, var_newChain);
                          if1618 = call1626;
                        }
                        return if1618;
                      };
                      func1617.paramTypes = [];
                      func1617.paramTypes.push([]);
                      func1617.paramTypes.push([]);
                      func1617.paramCounts = [1, 1];
                      obj1614.methods["accept()from"] = func1617;
                      func1617.definitionLine = 223;
                      func1617.definitionModule = "ast";
                      var func1627 = function(argcv) {    // method map(1)ancestors(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_blk = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                        var var_as = arguments[curarg];
                        curarg++;
                        if (argcv[1] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                        setModuleName("ast");
                        setLineNumber(232);    // compilenode call
                        onSelf = true;
                        var call1628 = callmethodChecked(this, "shallowCopy", [0]);
                        var var_n = call1628;
                        setLineNumber(233);    // compilenode identifier
                        var call1629 = callmethodChecked(var_as, "extend", [1], var_n);
                        var var_newChain = call1629;
                        setLineNumber(234);    // compilenode call
                        onSelf = true;
                        var call1630 = callmethodChecked(this, "value", [0]);
                        var call1631 = callmethodChecked(call1630, "map()ancestors", [1, 1], var_blk, var_newChain);
                        var call1632 = callmethodChecked(var_n, "value:=", [1], call1631);
                        setLineNumber(235);    // compilenode call
                        onSelf = true;
                        var call1633 = callmethodChecked(this, "thenblock", [0]);
                        var call1634 = callmethodChecked(call1633, "map()ancestors", [1, 1], var_blk, var_newChain);
                        var call1635 = callmethodChecked(var_n, "thenblock:=", [1], call1634);
                        setLineNumber(236);    // compilenode call
                        onSelf = true;
                        var call1636 = callmethodChecked(this, "elseblock", [0]);
                        var call1637 = callmethodChecked(call1636, "map()ancestors", [1, 1], var_blk, var_newChain);
                        var call1638 = callmethodChecked(var_n, "elseblock:=", [1], call1637);
                        setLineNumber(237);    // compilenode identifier
                        var call1639 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                        return call1639;
                      };
                      func1627.paramCounts = [1, 1];
                      obj1614.methods["map()ancestors"] = func1627;
                      func1627.definitionLine = 231;
                      func1627.definitionModule = "ast";
                      var func1640 = function(argcv) {    // method pretty(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_depth = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                        setModuleName("ast");
                        setLineNumber(240);    // compilenode string
                        var string1641 = new GraceString("");
                        var var_spc = string1641;
                        setLineNumber(241);    // compilenode num
                        var opresult1644 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                        var block1645 = new GraceBlock(this, 241, 1);
                        setLineNumber(1);    // compilenode identifier
                        block1645.real = function(var_i) {
                          setLineNumber(242);    // compilenode string
                          var string1646 = new GraceString("  ");
                          var opresult1649 = callmethodChecked(var_spc, "++", [1], string1646);
                          var_spc = opresult1649;
                          return GraceDone;
                        };
                        var call1650 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult1644, block1645);
                        setLineNumber(244);    // compilenode string
                        var string1651 = new GraceString("\n");
                        var call1653 = callmethodsuper(this, "pretty", [1], var_depth);
                        var opresult1655 = callmethodChecked(call1653, "++", [1], string1651);
                        var var_s = opresult1655;
                        setLineNumber(245);    // compilenode identifier
                        var opresult1658 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                        onSelf = true;
                        var call1659 = callmethodChecked(this, "value", [0]);
                        var call1660 = callmethodChecked(call1659, "pretty", [1], opresult1658);
                        var opresult1664 = callmethodChecked(var_s, "++", [1], var_spc);
                        var opresult1666 = callmethodChecked(opresult1664, "++", [1], call1660);
                        var_s = opresult1666;
                        setLineNumber(246);    // compilenode string
                        var string1667 = new GraceString("\n");
                        var opresult1670 = callmethodChecked(var_s, "++", [1], string1667);
                        var_s = opresult1670;
                        var if1671 = GraceDone;
                        setLineNumber(247);    // compilenode string
                        var string1672 = new GraceString("symbols");
                        var call1674 = callmethodChecked(var_util, "target", [0]);
                        var opresult1676 = callmethodChecked(call1674, "==", [1], string1672);
                        if (Grace_isTrue(opresult1676)) {
                          setLineNumber(248);    // compilenode string
                          var string1677 = new GraceString("\n");
                          var opresult1681 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                          onSelf = true;
                          var call1682 = callmethodChecked(this, "thenblock", [0]);
                          var call1683 = callmethodChecked(call1682, "pretty", [1], opresult1681);
                          var string1685 = new GraceString("Then: ");
                          var opresult1687 = callmethodChecked(string1685, "++", [1], call1683);
                          var opresult1689 = callmethodChecked(opresult1687, "++", [1], string1677);
                          var opresult1693 = callmethodChecked(var_s, "++", [1], var_spc);
                          var opresult1695 = callmethodChecked(opresult1693, "++", [1], opresult1689);
                          var_s = opresult1695;
                          setLineNumber(249);    // compilenode string
                          var string1696 = new GraceString("");
                          var opresult1700 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                          onSelf = true;
                          var call1701 = callmethodChecked(this, "elseblock", [0]);
                          var call1702 = callmethodChecked(call1701, "pretty", [1], opresult1700);
                          var string1704 = new GraceString("Else: ");
                          var opresult1706 = callmethodChecked(string1704, "++", [1], call1702);
                          var opresult1708 = callmethodChecked(opresult1706, "++", [1], string1696);
                          var opresult1712 = callmethodChecked(var_s, "++", [1], var_spc);
                          var opresult1714 = callmethodChecked(opresult1712, "++", [1], opresult1708);
                          var_s = opresult1714;
                          if1671 = GraceDone;
                        } else {
                          setLineNumber(251);    // compilenode string
                          var string1715 = new GraceString("Then:");
                          var opresult1719 = callmethodChecked(var_s, "++", [1], var_spc);
                          var opresult1721 = callmethodChecked(opresult1719, "++", [1], string1715);
                          var_s = opresult1721;
                          setLineNumber(252);    // compilenode call
                          onSelf = true;
                          var call1722 = callmethodChecked(this, "thenblock", [0]);
                          var call1723 = callmethodChecked(call1722, "body", [0]);
                          var block1724 = new GraceBlock(this, 252, 1);
                          setLineNumber(1);    // compilenode identifier
                          block1724.real = function(var_ix) {
                            setLineNumber(253);    // compilenode identifier
                            var opresult1727 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                            var call1728 = callmethodChecked(var_ix, "pretty", [1], opresult1727);
                            var string1731 = new GraceString("\n  ");
                            var opresult1734 = callmethodChecked(var_s, "++", [1], string1731);
                            var opresult1736 = callmethodChecked(opresult1734, "++", [1], var_spc);
                            var opresult1738 = callmethodChecked(opresult1736, "++", [1], call1728);
                            var_s = opresult1738;
                            return GraceDone;
                          };
                          var call1739 = callmethodChecked(var_prelude, "for()do", [1, 1], call1723, block1724);
                          setLineNumber(255);    // compilenode string
                          var string1740 = new GraceString("\n");
                          var opresult1743 = callmethodChecked(var_s, "++", [1], string1740);
                          var_s = opresult1743;
                          setLineNumber(256);    // compilenode string
                          var string1744 = new GraceString("Else:");
                          var opresult1748 = callmethodChecked(var_s, "++", [1], var_spc);
                          var opresult1750 = callmethodChecked(opresult1748, "++", [1], string1744);
                          var_s = opresult1750;
                          setLineNumber(257);    // compilenode call
                          onSelf = true;
                          var call1751 = callmethodChecked(this, "elseblock", [0]);
                          var call1752 = callmethodChecked(call1751, "body", [0]);
                          var block1753 = new GraceBlock(this, 257, 1);
                          setLineNumber(1);    // compilenode identifier
                          block1753.real = function(var_ix) {
                            setLineNumber(258);    // compilenode identifier
                            var opresult1756 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                            var call1757 = callmethodChecked(var_ix, "pretty", [1], opresult1756);
                            var string1760 = new GraceString("\n  ");
                            var opresult1763 = callmethodChecked(var_s, "++", [1], string1760);
                            var opresult1765 = callmethodChecked(opresult1763, "++", [1], var_spc);
                            var opresult1767 = callmethodChecked(opresult1765, "++", [1], call1757);
                            var_s = opresult1767;
                            return GraceDone;
                          };
                          var call1768 = callmethodChecked(var_prelude, "for()do", [1, 1], call1752, block1753);
                          if1671 = call1768;
                        }
                        setLineNumber(261);    // compilenode identifier
                        return var_s;
                      };
                      func1640.paramCounts = [1];
                      obj1614.methods["pretty"] = func1640;
                      func1640.definitionLine = 239;
                      func1640.definitionModule = "ast";
                      var func1769 = function(argcv) {    // method toGrace(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_depth = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(263);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                    callmethod(var_Number, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("ast");
                        setLineNumber(264);    // compilenode string
                        var string1770 = new GraceString("");
                        var var_spc = string1770;
                        setLineNumber(265);    // compilenode block
                        var block1771 = new GraceBlock(this, 265, 0);
                        block1771.real = function() {
                          setLineNumber(266);    // compilenode string
                          var string1772 = new GraceString("    ");
                          var opresult1775 = callmethodChecked(var_spc, "++", [1], string1772);
                          var_spc = opresult1775;
                          return GraceDone;
                        };
                        var call1776 = callmethodChecked(var_prelude, "repeat()times", [1, 1], var_depth, block1771);
                        setLineNumber(268);    // compilenode string
                        var string1777 = new GraceString(") then {");
                        onSelf = true;
                        var call1779 = callmethodChecked(this, "value", [0]);
                        var call1780 = callmethodChecked(call1779, "toGrace", [1], new GraceNum(0));
                        var string1782 = new GraceString("if (");
                        var opresult1784 = callmethodChecked(string1782, "++", [1], call1780);
                        var opresult1786 = callmethodChecked(opresult1784, "++", [1], string1777);
                        var var_s = opresult1786;
                        setLineNumber(269);    // compilenode call
                        onSelf = true;
                        var call1787 = callmethodChecked(this, "thenblock", [0]);
                        var call1788 = callmethodChecked(call1787, "body", [0]);
                        var block1789 = new GraceBlock(this, 269, 1);
                        setLineNumber(1);    // compilenode identifier
                        block1789.real = function(var_ix) {
                          setLineNumber(270);    // compilenode identifier
                          var opresult1792 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                          var call1793 = callmethodChecked(var_ix, "toGrace", [1], opresult1792);
                          var string1795 = new GraceString("    ");
                          var string1798 = new GraceString("\n");
                          var opresult1801 = callmethodChecked(var_s, "++", [1], string1798);
                          var opresult1803 = callmethodChecked(opresult1801, "++", [1], var_spc);
                          var opresult1805 = callmethodChecked(opresult1803, "++", [1], string1795);
                          var opresult1807 = callmethodChecked(opresult1805, "++", [1], call1793);
                          var_s = opresult1807;
                          return GraceDone;
                        };
                        var call1808 = callmethodChecked(var_prelude, "for()do", [1, 1], call1788, block1789);
                        var if1809 = GraceDone;
                        setLineNumber(272);    // compilenode call
                        onSelf = true;
                        var call1810 = callmethodChecked(this, "elseblock", [0]);
                        var call1811 = callmethodChecked(call1810, "isntEmpty", [0]);
                        if (Grace_isTrue(call1811)) {
                          setLineNumber(273);    // compilenode string
                          var string1812 = new GraceString("} else {");
                          var string1815 = new GraceString("\n");
                          var opresult1818 = callmethodChecked(var_s, "++", [1], string1815);
                          var opresult1820 = callmethodChecked(opresult1818, "++", [1], var_spc);
                          var opresult1822 = callmethodChecked(opresult1820, "++", [1], string1812);
                          var_s = opresult1822;
                          setLineNumber(274);    // compilenode call
                          onSelf = true;
                          var call1823 = callmethodChecked(this, "elseblock", [0]);
                          var call1824 = callmethodChecked(call1823, "body", [0]);
                          var block1825 = new GraceBlock(this, 274, 1);
                          setLineNumber(1);    // compilenode identifier
                          block1825.real = function(var_ix) {
                            setLineNumber(275);    // compilenode identifier
                            var opresult1828 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                            var call1829 = callmethodChecked(var_ix, "toGrace", [1], opresult1828);
                            var string1831 = new GraceString("    ");
                            var string1834 = new GraceString("\n");
                            var opresult1837 = callmethodChecked(var_s, "++", [1], string1834);
                            var opresult1839 = callmethodChecked(opresult1837, "++", [1], var_spc);
                            var opresult1841 = callmethodChecked(opresult1839, "++", [1], string1831);
                            var opresult1843 = callmethodChecked(opresult1841, "++", [1], call1829);
                            var_s = opresult1843;
                            return GraceDone;
                          };
                          var call1844 = callmethodChecked(var_prelude, "for()do", [1, 1], call1824, block1825);
                          if1809 = call1844;
                        }
                        setLineNumber(278);    // compilenode string
                        var string1845 = new GraceString("}");
                        var string1848 = new GraceString("\n");
                        var opresult1851 = callmethodChecked(var_s, "++", [1], string1848);
                        var opresult1853 = callmethodChecked(opresult1851, "++", [1], var_spc);
                        var opresult1855 = callmethodChecked(opresult1853, "++", [1], string1845);
                        var_s = opresult1855;
                        setLineNumber(279);    // return value
                        if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method toGrace(1) does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        return var_s;
                      };
                      func1769.paramTypes = [];
                      func1769.paramTypes.push([type_Number, "depth"]);
                      func1769.paramCounts = [1];
                      obj1614.methods["toGrace"] = func1769;
                      func1769.definitionLine = 263;
                      func1769.definitionModule = "ast";
                      var func1856 = function(argcv) {    // method shallowCopy
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                        setModuleName("ast");
                        setLineNumber(282);    // compilenode identifier
                        var call1857 = callmethodChecked(var_ifNode, "new", [3], var_nullNode, var_nullNode, var_nullNode);
                        var call1858 = callmethodChecked(call1857, "shallowCopyFieldsFrom", [1], this);
                        return call1858;
                      };
                      func1856.paramCounts = [0];
                      obj1614.methods["shallowCopy"] = func1856;
                      func1856.definitionLine = 281;
                      func1856.definitionModule = "ast";
                      var func1859 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_other = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                        setModuleName("ast");
                        setLineNumber(285);    // compilenode identifier
                        var call1860 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                        setLineNumber(286);    // compilenode identifier
                        var call1861 = callmethodChecked(var_other, "handledIdentifiers", [0]);
                        onSelf = true;
                        var call1862 = callmethodChecked(this, "handledIdentifiers:=", [1], call1861);
                        setLineNumber(287);    // compilenode identifier
                        return this;
                      };
                      func1859.paramCounts = [1];
                      obj1614.methods["shallowCopyFieldsFrom"] = func1859;
                      func1859.definitionLine = 284;
                      func1859.definitionModule = "ast";
                      setLineNumber(216);    // compilenode call
                      var call1863 = callmethodChecked(superDepth, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call1864 = callmethodChecked(call1863, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call1865 = callmethodChecked(call1864, "baseNode()object", [0, 1], this);
                      obj1614.superobj = call1865;
                      if (call1865.data) obj1614.data = call1865.data;
                      if (call1865.hasOwnProperty('_value'))
                          obj1614._value = call1865._value;
                      setLineNumber(217);    // compilenode string
                      var string1866 = new GraceString("if");
                      obj1614.data["kind"] = string1866;
                      var reader_ast_kind1867 = function() {
                        return this.data["kind"];
                      };
                      reader_ast_kind1867.def = true;
                      obj1614.methods["kind"] = reader_ast_kind1867;
                      setLineNumber(218);    // compilenode identifier
                      obj1614.data["value"] = var_cond;
                      var reader_ast_value1868 = function() {
                        return this.data["value"];
                      };
                      obj1614.methods["value"] = reader_ast_value1868;
                      obj1614.data["value"] = var_cond;
                      var writer_ast_value1868 = function(argcv, o) {
                        this.data["value"] = o;
                        return GraceDone;
                      };
                      obj1614.methods["value:="] = writer_ast_value1868;
                      obj1614.mutable = true;
                      setLineNumber(219);    // compilenode identifier
                      obj1614.data["thenblock"] = var_thenblock__39__;
                      var reader_ast_thenblock1869 = function() {
                        return this.data["thenblock"];
                      };
                      obj1614.methods["thenblock"] = reader_ast_thenblock1869;
                      obj1614.data["thenblock"] = var_thenblock__39__;
                      var writer_ast_thenblock1869 = function(argcv, o) {
                        this.data["thenblock"] = o;
                        return GraceDone;
                      };
                      obj1614.methods["thenblock:="] = writer_ast_thenblock1869;
                      obj1614.mutable = true;
                      setLineNumber(220);    // compilenode identifier
                      obj1614.data["elseblock"] = var_elseblock__39__;
                      var reader_ast_elseblock1870 = function() {
                        return this.data["elseblock"];
                      };
                      obj1614.methods["elseblock"] = reader_ast_elseblock1870;
                      obj1614.data["elseblock"] = var_elseblock__39__;
                      var writer_ast_elseblock1870 = function(argcv, o) {
                        this.data["elseblock"] = o;
                        return GraceDone;
                      };
                      obj1614.methods["elseblock:="] = writer_ast_elseblock1870;
                      obj1614.mutable = true;
                      setLineNumber(221);    // compilenode identifier
                      obj1614.data["handledIdentifiers"] = GraceFalse;
                      var reader_ast_handledIdentifiers1871 = function() {
                        return this.data["handledIdentifiers"];
                      };
                      obj1614.methods["handledIdentifiers"] = reader_ast_handledIdentifiers1871;
                      obj1614.data["handledIdentifiers"] = GraceFalse;
                      var writer_ast_handledIdentifiers1871 = function(argcv, o) {
                        this.data["handledIdentifiers"] = o;
                        return GraceDone;
                      };
                      obj1614.methods["handledIdentifiers:="] = writer_ast_handledIdentifiers1871;
                      obj1614.mutable = true;
                      superDepth = origSuperDepth;
                    };
                    obj_init_1614.apply(inheritingObject, []);
                    return obj1614;
                    };
                    obj1352.methods["new()object"] = func1613;
                  superDepth = origSuperDepth;
                };
                obj_init_1352.apply(obj1352, []);
                var var_ifNode = obj1352;
                setLineNumber(216);    // compilenode method
                var func1872 = function(argcv) {    // method ifNode
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ifNode"));
                  setModuleName("ast");
                  // ifNode is a simple accessor - elide try ... catch
                  setLineNumber(214);    // compilenode identifier
                  return var_ifNode;
                };
                func1872.paramCounts = [0];
                this.methods["ifNode"] = func1872;
                func1872.definitionLine = 216;
                func1872.definitionModule = "ast";
                this.methods["ifNode"].debug = "def";
                setLineNumber(291);    // compilenode object
                var obj1873 = Grace_allocObject(GraceObject, "blockNode");
                obj1873.definitionModule = "ast";
                obj1873.definitionLine = 291;
                obj1873.outer = this;
                var reader_ast_outer1874 = function() {
                  return this.outer;
                };
                obj1873.methods["outer"] = reader_ast_outer1874;
                var obj_init_1873 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj1873;
                  var func1875 = function(argcv) {    // method new(2)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_params__39__ = arguments[curarg];
                    curarg++;
                    var var_body__39__ = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 2)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(2)"));
                    setModuleName("ast");
                    setLineNumber(292);    // compilenode object
                    var obj1876 = Grace_allocObject(null, "blockNode.new");
                    obj1876.definitionModule = "ast";
                    obj1876.definitionLine = 292;
                    obj1876.outer = this;
                    var reader_ast_outer1877 = function() {
                      return this.outer;
                    };
                    obj1876.methods["outer"] = reader_ast_outer1877;
                    var obj_init_1876 = function() {
                      var origSuperDepth = superDepth;
                      superDepth = obj1876;
                      var func1878 = function(argcv) {    // method isBlock
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isBlock"));
                        setModuleName("ast");
                        // isBlock is a simple accessor - elide try ... catch
                        setLineNumber(304);    // compilenode identifier
                        return GraceTrue;
                      };
                      func1878.paramCounts = [0];
                      obj1876.methods["isBlock"] = func1878;
                      func1878.definitionLine = 304;
                      func1878.definitionModule = "ast";
                      var func1879 = function(argcv) {    // method isEmpty
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEmpty"));
                        setModuleName("ast");
                        setLineNumber(305);    // compilenode call
                        onSelf = true;
                        var call1881 = callmethodChecked(this, "body", [0]);
                        var call1882 = callmethodChecked(call1881, "size", [0]);
                        var opresult1884 = callmethodChecked(call1882, "==", [1], new GraceNum(0));
                        return opresult1884;
                      };
                      func1879.paramCounts = [0];
                      obj1876.methods["isEmpty"] = func1879;
                      func1879.definitionLine = 305;
                      func1879.definitionModule = "ast";
                      var func1885 = function(argcv) {    // method isntEmpty
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isntEmpty"));
                        setModuleName("ast");
                        setLineNumber(306);    // compilenode call
                        onSelf = true;
                        var call1887 = callmethodChecked(this, "body", [0]);
                        var call1888 = callmethodChecked(call1887, "size", [0]);
                        var opresult1890 = callmethodChecked(call1888, ">", [1], new GraceNum(0));
                        return opresult1890;
                      };
                      func1885.paramCounts = [0];
                      obj1876.methods["isntEmpty"] = func1885;
                      func1885.definitionLine = 306;
                      func1885.definitionModule = "ast";
                      var func1891 = function(argcv) {    // method scope:=(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_st = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
                        setModuleName("ast");
                        setLineNumber(310);    // compilenode identifier
                        onSelf = true;
                        var call1892 = callmethodChecked(this, "symbolTable:=", [1], var_st);
                        setLineNumber(311);    // compilenode identifier
                        var call1893 = callmethodChecked(var_st, "node:=", [1], this);
                        return call1893;
                      };
                      func1891.paramCounts = [1];
                      obj1876.methods["scope:="] = func1891;
                      func1891.definitionLine = 307;
                      func1891.definitionModule = "ast";
                      var func1894 = function(argcv) {    // method declarationKindWithAncestors(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_as = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                        setModuleName("ast");
                        setLineNumber(313);    // compilenode identifier
                        var call1895 = callmethodChecked(var_k, "parameter", [0]);
                        return call1895;
                      };
                      func1894.paramCounts = [1];
                      obj1876.methods["declarationKindWithAncestors"] = func1894;
                      func1894.definitionLine = 313;
                      func1894.definitionModule = "ast";
                      var func1896 = function(argcv) {    // method isMatchingBlock
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMatchingBlock"));
                        setModuleName("ast");
                        setLineNumber(314);    // compilenode call
                        onSelf = true;
                        var call1898 = callmethodChecked(this, "params", [0]);
                        var call1899 = callmethodChecked(call1898, "size", [0]);
                        var opresult1901 = callmethodChecked(call1899, "==", [1], new GraceNum(1));
                        return opresult1901;
                      };
                      func1896.paramCounts = [0];
                      obj1876.methods["isMatchingBlock"] = func1896;
                      func1896.definitionLine = 314;
                      func1896.definitionModule = "ast";
                      var func1902 = function(argcv) {    // method returnsObject
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                        setModuleName("ast");
                        setLineNumber(316);    // compilenode block
                        var block1903 = new GraceBlock(this, 316, 0);
                        block1903.real = function() {
                          onSelf = true;
                          var call1904 = callmethodChecked(this, "body", [0]);
                          var call1905 = callmethodChecked(call1904, "last", [0]);
                          var call1906 = callmethodChecked(call1905, "returnsObject", [0]);
                          return call1906;
                        };
                        onSelf = true;
                        var call1909 = callmethodChecked(this, "body", [0]);
                        var call1910 = callmethodChecked(call1909, "size", [0]);
                        var opresult1912 = callmethodChecked(call1910, ">", [1], new GraceNum(0));
                        var opresult1914 = callmethodChecked(opresult1912, "&&", [1], block1903);
                        return opresult1914;
                      };
                      func1902.paramCounts = [0];
                      obj1876.methods["returnsObject"] = func1902;
                      func1902.definitionLine = 315;
                      func1902.definitionModule = "ast";
                      var func1915 = function(argcv) {    // method returnedObjectScope
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnedObjectScope"));
                        setModuleName("ast");
                        setLineNumber(320);    // compilenode call
                        onSelf = true;
                        var call1916 = callmethodChecked(this, "body", [0]);
                        var call1917 = callmethodChecked(call1916, "last", [0]);
                        var call1918 = callmethodChecked(call1917, "returnedObjectScope", [0]);
                        return call1918;
                      };
                      func1915.paramCounts = [0];
                      obj1876.methods["returnedObjectScope"] = func1915;
                      func1915.definitionLine = 318;
                      func1915.definitionModule = "ast";
                      var func1919 = function(argcv) {    // method parametersDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_b = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parametersDo(1)"));
                        setModuleName("ast");
                        setLineNumber(323);    // compilenode call
                        onSelf = true;
                        var call1920 = callmethodChecked(this, "params", [0]);
                        var call1921 = callmethodChecked(call1920, "do", [1], var_b);
                        return call1921;
                      };
                      func1919.paramCounts = [1];
                      obj1876.methods["parametersDo"] = func1919;
                      func1919.definitionLine = 322;
                      func1919.definitionModule = "ast";
                      var func1922 = function(argcv) {    // method accept(1)from(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_visitor = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                        var var_as = arguments[curarg];
                        curarg++;
                        if (argcv[1] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(325);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                        curarg++;
                        curarg++;
                        // End argument checking
                        setModuleName("ast");
                        var if1923 = GraceDone;
                        setLineNumber(326);    // compilenode identifier
                        var call1924 = callmethodChecked(var_visitor, "visitBlock()up", [1, 1], this, var_as);
                        if (Grace_isTrue(call1924)) {
                          setLineNumber(327);    // compilenode identifier
                          var call1925 = callmethodChecked(var_as, "extend", [1], this);
                          var var_newChain = call1925;
                          setLineNumber(328);    // compilenode call
                          onSelf = true;
                          var call1926 = callmethodChecked(this, "params", [0]);
                          var block1927 = new GraceBlock(this, 328, 1);
                          setLineNumber(1);    // compilenode identifier
                          block1927.real = function(var_mx) {
                            setLineNumber(329);    // compilenode identifier
                            var call1928 = callmethodChecked(var_mx, "accept()from", [1, 1], var_visitor, var_newChain);
                            return call1928;
                          };
                          var call1929 = callmethodChecked(var_prelude, "for()do", [1, 1], call1926, block1927);
                          setLineNumber(331);    // compilenode call
                          onSelf = true;
                          var call1930 = callmethodChecked(this, "body", [0]);
                          var block1931 = new GraceBlock(this, 331, 1);
                          setLineNumber(1);    // compilenode identifier
                          block1931.real = function(var_mx) {
                            setLineNumber(332);    // compilenode identifier
                            var call1932 = callmethodChecked(var_mx, "accept()from", [1, 1], var_visitor, var_newChain);
                            return call1932;
                          };
                          var call1933 = callmethodChecked(var_prelude, "for()do", [1, 1], call1930, block1931);
                          var if1934 = GraceDone;
                          setLineNumber(334);    // compilenode call
                          onSelf = true;
                          var call1935 = callmethodChecked(this, "matchingPattern", [0]);
                          var opresult1938 = callmethodChecked(GraceFalse, "\u2260", [1], call1935);
                          if (Grace_isTrue(opresult1938)) {
                            setLineNumber(335);    // compilenode call
                            onSelf = true;
                            var call1939 = callmethodChecked(this, "matchingPattern", [0]);
                            var call1940 = callmethodChecked(call1939, "accept()from", [1, 1], var_visitor, var_newChain);
                            if1934 = call1940;
                          }
                          if1923 = if1934;
                        }
                        return if1923;
                      };
                      func1922.paramTypes = [];
                      func1922.paramTypes.push([]);
                      func1922.paramTypes.push([]);
                      func1922.paramCounts = [1, 1];
                      obj1876.methods["accept()from"] = func1922;
                      func1922.definitionLine = 325;
                      func1922.definitionModule = "ast";
                      var func1941 = function(argcv) {    // method map(1)ancestors(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_blk = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                        var var_as = arguments[curarg];
                        curarg++;
                        if (argcv[1] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                        setModuleName("ast");
                        setLineNumber(340);    // compilenode call
                        onSelf = true;
                        var call1942 = callmethodChecked(this, "shallowCopy", [0]);
                        var var_n = call1942;
                        setLineNumber(341);    // compilenode identifier
                        var call1943 = callmethodChecked(var_as, "extend", [1], var_n);
                        var var_newChain = call1943;
                        setLineNumber(342);    // compilenode call
                        onSelf = true;
                        var call1944 = callmethodChecked(this, "params", [0]);
                        var call1945 = callmethodChecked(superDepth, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call1946 = callmethodChecked(call1945, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call1947 = callmethodChecked(call1946, "listMap()ancestors", [2, 1], call1944, var_blk, var_newChain);
                        var call1948 = callmethodChecked(var_n, "params:=", [1], call1947);
                        setLineNumber(343);    // compilenode call
                        onSelf = true;
                        var call1949 = callmethodChecked(this, "body", [0]);
                        var call1950 = callmethodChecked(superDepth, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call1951 = callmethodChecked(call1950, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call1952 = callmethodChecked(call1951, "listMap()ancestors", [2, 1], call1949, var_blk, var_newChain);
                        var call1953 = callmethodChecked(var_n, "body:=", [1], call1952);
                        setLineNumber(344);    // compilenode call
                        onSelf = true;
                        var call1954 = callmethodChecked(this, "matchingPattern", [0]);
                        var call1955 = callmethodChecked(superDepth, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call1956 = callmethodChecked(call1955, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call1957 = callmethodChecked(call1956, "maybeMap()ancestors", [2, 1], call1954, var_blk, var_newChain);
                        var call1958 = callmethodChecked(var_n, "matchingPattern:=", [1], call1957);
                        setLineNumber(345);    // compilenode identifier
                        var call1959 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                        return call1959;
                      };
                      func1941.paramCounts = [1, 1];
                      obj1876.methods["map()ancestors"] = func1941;
                      func1941.definitionLine = 339;
                      func1941.definitionModule = "ast";
                      var func1960 = function(argcv) {    // method pretty(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_depth = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                        setModuleName("ast");
                        setLineNumber(348);    // compilenode string
                        var string1961 = new GraceString("");
                        var var_spc = string1961;
                        setLineNumber(349);    // compilenode num
                        var opresult1964 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                        var block1965 = new GraceBlock(this, 349, 1);
                        setLineNumber(1);    // compilenode identifier
                        block1965.real = function(var_i) {
                          setLineNumber(350);    // compilenode string
                          var string1966 = new GraceString("  ");
                          var opresult1969 = callmethodChecked(var_spc, "++", [1], string1966);
                          var_spc = opresult1969;
                          return GraceDone;
                        };
                        var call1970 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult1964, block1965);
                        setLineNumber(352);    // compilenode string
                        var string1971 = new GraceString("\n");
                        var call1973 = callmethodsuper(this, "pretty", [1], var_depth);
                        var opresult1975 = callmethodChecked(call1973, "++", [1], string1971);
                        var var_s = opresult1975;
                        setLineNumber(353);    // compilenode string
                        var string1976 = new GraceString("Parameters:");
                        var opresult1980 = callmethodChecked(var_s, "++", [1], var_spc);
                        var opresult1982 = callmethodChecked(opresult1980, "++", [1], string1976);
                        var_s = opresult1982;
                        setLineNumber(354);    // compilenode call
                        onSelf = true;
                        var call1983 = callmethodChecked(this, "params", [0]);
                        var block1984 = new GraceBlock(this, 354, 1);
                        setLineNumber(1);    // compilenode identifier
                        block1984.real = function(var_mx) {
                          setLineNumber(355);    // compilenode identifier
                          var opresult1987 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                          var call1988 = callmethodChecked(var_mx, "pretty", [1], opresult1987);
                          var string1991 = new GraceString("\n  ");
                          var opresult1994 = callmethodChecked(var_s, "++", [1], string1991);
                          var opresult1996 = callmethodChecked(opresult1994, "++", [1], var_spc);
                          var opresult1998 = callmethodChecked(opresult1996, "++", [1], call1988);
                          var_s = opresult1998;
                          return GraceDone;
                        };
                        var call1999 = callmethodChecked(var_prelude, "for()do", [1, 1], call1983, block1984);
                        setLineNumber(357);    // compilenode string
                        var string2000 = new GraceString("\n");
                        var opresult2003 = callmethodChecked(var_s, "++", [1], string2000);
                        var_s = opresult2003;
                        setLineNumber(358);    // compilenode string
                        var string2004 = new GraceString("Body:");
                        var opresult2008 = callmethodChecked(var_s, "++", [1], var_spc);
                        var opresult2010 = callmethodChecked(opresult2008, "++", [1], string2004);
                        var_s = opresult2010;
                        setLineNumber(359);    // compilenode call
                        onSelf = true;
                        var call2011 = callmethodChecked(this, "body", [0]);
                        var block2012 = new GraceBlock(this, 359, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2012.real = function(var_mx) {
                          setLineNumber(360);    // compilenode identifier
                          var opresult2015 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                          var call2016 = callmethodChecked(var_mx, "pretty", [1], opresult2015);
                          var string2019 = new GraceString("\n  ");
                          var opresult2022 = callmethodChecked(var_s, "++", [1], string2019);
                          var opresult2024 = callmethodChecked(opresult2022, "++", [1], var_spc);
                          var opresult2026 = callmethodChecked(opresult2024, "++", [1], call2016);
                          var_s = opresult2026;
                          return GraceDone;
                        };
                        var call2027 = callmethodChecked(var_prelude, "for()do", [1, 1], call2011, block2012);
                        var if2028 = GraceDone;
                        setLineNumber(362);    // compilenode call
                        onSelf = true;
                        var call2029 = callmethodChecked(this, "matchingPattern", [0]);
                        var opresult2032 = callmethodChecked(GraceFalse, "\u2260", [1], call2029);
                        if (Grace_isTrue(opresult2032)) {
                          setLineNumber(363);    // compilenode string
                          var string2033 = new GraceString("\n");
                          var opresult2036 = callmethodChecked(var_s, "++", [1], string2033);
                          var_s = opresult2036;
                          setLineNumber(364);    // compilenode string
                          var string2037 = new GraceString("Pattern:");
                          var opresult2041 = callmethodChecked(var_s, "++", [1], var_spc);
                          var opresult2043 = callmethodChecked(opresult2041, "++", [1], string2037);
                          var_s = opresult2043;
                          setLineNumber(365);    // compilenode identifier
                          var opresult2046 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                          onSelf = true;
                          var call2047 = callmethodChecked(this, "matchingPattern", [0]);
                          var call2048 = callmethodChecked(call2047, "pretty", [1], opresult2046);
                          var string2051 = new GraceString("\n  ");
                          var opresult2054 = callmethodChecked(var_s, "++", [1], string2051);
                          var opresult2056 = callmethodChecked(opresult2054, "++", [1], var_spc);
                          var opresult2058 = callmethodChecked(opresult2056, "++", [1], call2048);
                          var_s = opresult2058;
                          if2028 = GraceDone;
                        }
                        setLineNumber(367);    // compilenode identifier
                        return var_s;
                      };
                      func1960.paramCounts = [1];
                      obj1876.methods["pretty"] = func1960;
                      func1960.definitionLine = 347;
                      func1960.definitionModule = "ast";
                      var func2059 = function(argcv) {    // method toGrace(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_depth = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(369);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                    callmethod(var_Number, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("ast");
                        setLineNumber(370);    // compilenode string
                        var string2060 = new GraceString("");
                        var var_spc = string2060;
                        setLineNumber(371);    // compilenode identifier
                        var diff2063 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                        var opresult2066 = callmethodChecked(new GraceNum(0), "..", [1], diff2063);
                        var block2067 = new GraceBlock(this, 371, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2067.real = function(var_i) {
                          setLineNumber(372);    // compilenode string
                          var string2068 = new GraceString("    ");
                          var opresult2071 = callmethodChecked(var_spc, "++", [1], string2068);
                          var_spc = opresult2071;
                          return GraceDone;
                        };
                        var call2072 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult2066, block2067);
                        setLineNumber(374);    // compilenode string
                        var string2073 = new GraceString("{");
                        var var_s = string2073;
                        var if2074 = GraceDone;
                        setLineNumber(375);    // compilenode call
                        onSelf = true;
                        var call2076 = callmethodChecked(this, "params", [0]);
                        var call2077 = callmethodChecked(call2076, "size", [0]);
                        var opresult2079 = callmethodChecked(call2077, ">", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult2079)) {
                          setLineNumber(376);    // compilenode string
                          var string2080 = new GraceString(" ");
                          var opresult2083 = callmethodChecked(var_s, "++", [1], string2080);
                          var_s = opresult2083;
                          setLineNumber(377);    // compilenode call
                          onSelf = true;
                          var call2084 = callmethodChecked(this, "params", [0]);
                          var call2085 = callmethodChecked(call2084, "indices", [0]);
                          var block2086 = new GraceBlock(this, 377, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2086.real = function(var_i) {
                            setLineNumber(378);    // compilenode call
                            onSelf = true;
                            var call2087 = callmethodChecked(this, "params", [0]);
                            var call2088 = callmethodChecked(call2087, "at", [1], var_i);
                            var var_p = call2088;
                            var if2089 = GraceDone;
                            setLineNumber(379);    // compilenode call
                            onSelf = true;
                            var call2090 = callmethodChecked(this, "matchingPattern", [0]);
                            var opresult2093 = callmethodChecked(GraceFalse, "\u2260", [1], call2090);
                            if (Grace_isTrue(opresult2093)) {
                              setLineNumber(380);    // compilenode string
                              var string2094 = new GraceString(")");
                              var call2096 = callmethodChecked(var_p, "toGrace", [1], new GraceNum(0));
                              var string2098 = new GraceString("(");
                              var opresult2101 = callmethodChecked(var_s, "++", [1], string2098);
                              var opresult2103 = callmethodChecked(opresult2101, "++", [1], call2096);
                              var opresult2105 = callmethodChecked(opresult2103, "++", [1], string2094);
                              var_s = opresult2105;
                              if2089 = GraceDone;
                            } else {
                              setLineNumber(382);    // compilenode identifier
                              var call2106 = callmethodChecked(var_p, "toGrace", [1], new GraceNum(0));
                              var opresult2109 = callmethodChecked(var_s, "++", [1], call2106);
                              var_s = opresult2109;
                              if2089 = GraceDone;
                            }
                            var if2110 = GraceDone;
                            setLineNumber(384);    // compilenode call
                            onSelf = true;
                            var call2111 = callmethodChecked(this, "params", [0]);
                            var call2112 = callmethodChecked(call2111, "size", [0]);
                            var opresult2115 = callmethodChecked(var_i, "<", [1], call2112);
                            if (Grace_isTrue(opresult2115)) {
                              setLineNumber(385);    // compilenode string
                              var string2116 = new GraceString(", ");
                              var opresult2119 = callmethodChecked(var_s, "++", [1], string2116);
                              var_s = opresult2119;
                              if2110 = GraceDone;
                            } else {
                              setLineNumber(387);    // compilenode string
                              var string2120 = new GraceString(" ->");
                              var opresult2123 = callmethodChecked(var_s, "++", [1], string2120);
                              var_s = opresult2123;
                              if2110 = GraceDone;
                            }
                            return if2110;
                          };
                          var call2124 = callmethodChecked(var_prelude, "for()do", [1, 1], call2085, block2086);
                          if2074 = call2124;
                        }
                        setLineNumber(391);    // compilenode call
                        onSelf = true;
                        var call2125 = callmethodChecked(this, "body", [0]);
                        var block2126 = new GraceBlock(this, 391, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2126.real = function(var_mx) {
                          setLineNumber(392);    // compilenode identifier
                          var opresult2129 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                          var call2130 = callmethodChecked(var_mx, "toGrace", [1], opresult2129);
                          var string2132 = new GraceString("    ");
                          var string2135 = new GraceString("\n");
                          var opresult2138 = callmethodChecked(var_s, "++", [1], string2135);
                          var opresult2140 = callmethodChecked(opresult2138, "++", [1], var_spc);
                          var opresult2142 = callmethodChecked(opresult2140, "++", [1], string2132);
                          var opresult2144 = callmethodChecked(opresult2142, "++", [1], call2130);
                          var_s = opresult2144;
                          return GraceDone;
                        };
                        var call2145 = callmethodChecked(var_prelude, "for()do", [1, 1], call2125, block2126);
                        setLineNumber(394);    // compilenode string
                        var string2146 = new GraceString("}");
                        var string2149 = new GraceString("\n");
                        var opresult2152 = callmethodChecked(var_s, "++", [1], string2149);
                        var opresult2154 = callmethodChecked(opresult2152, "++", [1], var_spc);
                        var opresult2156 = callmethodChecked(opresult2154, "++", [1], string2146);
                        var_s = opresult2156;
                        setLineNumber(395);    // return value
                        if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method toGrace(1) does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        return var_s;
                      };
                      func2059.paramTypes = [];
                      func2059.paramTypes.push([type_Number, "depth"]);
                      func2059.paramCounts = [1];
                      obj1876.methods["toGrace"] = func2059;
                      func2059.definitionLine = 369;
                      func2059.definitionModule = "ast";
                      var func2157 = function(argcv) {    // method shallowCopy
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                        setModuleName("ast");
                        setLineNumber(398);    // compilenode call
                        onSelf = true;
                        var call2158 = callmethodChecked(this, "params", [0]);
                        onSelf = true;
                        var call2159 = callmethodChecked(this, "body", [0]);
                        var call2160 = callmethodChecked(var_blockNode, "new", [2], call2158, call2159);
                        var call2161 = callmethodChecked(call2160, "shallowCopyFieldsFrom", [1], this);
                        return call2161;
                      };
                      func2157.paramCounts = [0];
                      obj1876.methods["shallowCopy"] = func2157;
                      func2157.definitionLine = 397;
                      func2157.definitionModule = "ast";
                      var func2162 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_other = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                        setModuleName("ast");
                        setLineNumber(401);    // compilenode identifier
                        var call2163 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                        setLineNumber(402);    // compilenode identifier
                        var call2164 = callmethodChecked(var_other, "matchingPattern", [0]);
                        onSelf = true;
                        var call2165 = callmethodChecked(this, "matchingPattern:=", [1], call2164);
                        setLineNumber(403);    // compilenode identifier
                        var call2166 = callmethodChecked(var_other, "extraRuntimeData", [0]);
                        onSelf = true;
                        var call2167 = callmethodChecked(this, "extraRuntimeData:=", [1], call2166);
                        setLineNumber(404);    // compilenode identifier
                        return this;
                      };
                      func2162.paramCounts = [1];
                      obj1876.methods["shallowCopyFieldsFrom"] = func2162;
                      func2162.definitionLine = 400;
                      func2162.definitionModule = "ast";
                      setLineNumber(293);    // compilenode call
                      var call2168 = callmethodChecked(superDepth, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call2169 = callmethodChecked(call2168, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call2170 = callmethodChecked(call2169, "baseNode()object", [0, 1], this);
                      obj1876.superobj = call2170;
                      if (call2170.data) obj1876.data = call2170.data;
                      if (call2170.hasOwnProperty('_value'))
                          obj1876._value = call2170._value;
                      setLineNumber(294);    // compilenode string
                      var string2171 = new GraceString("block");
                      obj1876.data["kind"] = string2171;
                      var reader_ast_kind2172 = function() {
                        return this.data["kind"];
                      };
                      reader_ast_kind2172.def = true;
                      obj1876.methods["kind"] = reader_ast_kind2172;
                      setLineNumber(295);    // compilenode string
                      var string2173 = new GraceString("block");
                      obj1876.data["value"] = string2173;
                      var reader_ast_value2174 = function() {
                        return this.data["value"];
                      };
                      reader_ast_value2174.def = true;
                      obj1876.methods["value"] = reader_ast_value2174;
                      setLineNumber(296);    // compilenode identifier
                      obj1876.data["params"] = var_params__39__;
                      var reader_ast_params2175 = function() {
                        return this.data["params"];
                      };
                      obj1876.methods["params"] = reader_ast_params2175;
                      obj1876.data["params"] = var_params__39__;
                      var writer_ast_params2175 = function(argcv, o) {
                        this.data["params"] = o;
                        return GraceDone;
                      };
                      obj1876.methods["params:="] = writer_ast_params2175;
                      obj1876.mutable = true;
                      setLineNumber(297);    // compilenode identifier
                      obj1876.data["body"] = var_body__39__;
                      var reader_ast_body2176 = function() {
                        return this.data["body"];
                      };
                      obj1876.methods["body"] = reader_ast_body2176;
                      obj1876.data["body"] = var_body__39__;
                      var writer_ast_body2176 = function(argcv, o) {
                        this.data["body"] = o;
                        return GraceDone;
                      };
                      obj1876.methods["body:="] = writer_ast_body2176;
                      obj1876.mutable = true;
                      setLineNumber(298);    // compilenode identifier
                      obj1876.data["selfclosure"] = GraceTrue;
                      var reader_ast_selfclosure2177 = function() {
                        return this.data["selfclosure"];
                      };
                      reader_ast_selfclosure2177.def = true;
                      obj1876.methods["selfclosure"] = reader_ast_selfclosure2177;
                      setLineNumber(299);    // compilenode identifier
                      obj1876.data["matchingPattern"] = GraceFalse;
                      var reader_ast_matchingPattern2178 = function() {
                        return this.data["matchingPattern"];
                      };
                      obj1876.methods["matchingPattern"] = reader_ast_matchingPattern2178;
                      obj1876.data["matchingPattern"] = GraceFalse;
                      var writer_ast_matchingPattern2178 = function(argcv, o) {
                        this.data["matchingPattern"] = o;
                        return GraceDone;
                      };
                      obj1876.methods["matchingPattern:="] = writer_ast_matchingPattern2178;
                      obj1876.mutable = true;
                      setLineNumber(300);    // compilenode identifier
                      obj1876.data["extraRuntimeData"] = GraceFalse;
                      var reader_ast_extraRuntimeData2179 = function() {
                        return this.data["extraRuntimeData"];
                      };
                      obj1876.methods["extraRuntimeData"] = reader_ast_extraRuntimeData2179;
                      obj1876.data["extraRuntimeData"] = GraceFalse;
                      var writer_ast_extraRuntimeData2179 = function(argcv, o) {
                        this.data["extraRuntimeData"] = o;
                        return GraceDone;
                      };
                      obj1876.methods["extraRuntimeData:="] = writer_ast_extraRuntimeData2179;
                      obj1876.mutable = true;
                      setLineNumber(301);    // compilenode block
                      var block2180 = new GraceBlock(this, 301, 1);
                      setLineNumber(1);    // compilenode identifier
                      block2180.real = function(var_p) {
                        setLineNumber(302);    // compilenode identifier
                        var call2181 = callmethodChecked(var_ancestorChain, "with", [1], this);
                        var call2182 = callmethodChecked(var_p, "accept()from", [1, 1], var_patternMarkVisitor, call2181);
                        return call2182;
                      };
                      var call2183 = callmethodChecked(var_prelude, "for()do", [1, 1], var_params__39__, block2180);
                      superDepth = origSuperDepth;
                    };
                    obj_init_1876.apply(obj1876, []);
                    return obj1876;
                  };
                  func1875.paramCounts = [2];
                  obj1873.methods["new"] = func1875;
                  func1875.definitionLine = 292;
                  func1875.definitionModule = "ast";
                    var func2184 = function(argcv) {    // method new(2     )()object
                      var curarg = 1;
                      var var_params__39__ = arguments[curarg];
                      curarg++;
                      var var_body__39__ = arguments[curarg];
                      curarg++;
                      var inheritingObject = arguments[curarg++];
                      // Start argument processing
                      curarg = 1;
                      curarg++;
                      curarg++;
                      // End argument processing
                      setModuleName("ast");
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var obj2185 = Grace_allocObject(null, "new");
                      obj2185.definitionModule = "ast";
                      obj2185.definitionLine = 292;
                      var inho2185 = inheritingObject;
                      while (inho2185.superobj) inho2185 = inho2185.superobj;
                      inho2185.superobj = obj2185;
                      obj2185.data = inheritingObject.data;
                      if (inheritingObject.hasOwnProperty('_value'))
                        obj2185._value = inheritingObject._value;
                      obj2185.outer = this;
                      var reader_ast_outer2186 = function() {
                        return this.outer;
                      };
                      obj2185.methods["outer"] = reader_ast_outer2186;
                      var obj_init_2185 = function() {
                        var origSuperDepth = superDepth;
                        superDepth = obj2185;
                        var func2187 = function(argcv) {    // method isBlock
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isBlock"));
                          setModuleName("ast");
                          // isBlock is a simple accessor - elide try ... catch
                          setLineNumber(304);    // compilenode identifier
                          return GraceTrue;
                        };
                        func2187.paramCounts = [0];
                        obj2185.methods["isBlock"] = func2187;
                        func2187.definitionLine = 304;
                        func2187.definitionModule = "ast";
                        var func2188 = function(argcv) {    // method isEmpty
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEmpty"));
                          setModuleName("ast");
                          setLineNumber(305);    // compilenode call
                          onSelf = true;
                          var call2190 = callmethodChecked(this, "body", [0]);
                          var call2191 = callmethodChecked(call2190, "size", [0]);
                          var opresult2193 = callmethodChecked(call2191, "==", [1], new GraceNum(0));
                          return opresult2193;
                        };
                        func2188.paramCounts = [0];
                        obj2185.methods["isEmpty"] = func2188;
                        func2188.definitionLine = 305;
                        func2188.definitionModule = "ast";
                        var func2194 = function(argcv) {    // method isntEmpty
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isntEmpty"));
                          setModuleName("ast");
                          setLineNumber(306);    // compilenode call
                          onSelf = true;
                          var call2196 = callmethodChecked(this, "body", [0]);
                          var call2197 = callmethodChecked(call2196, "size", [0]);
                          var opresult2199 = callmethodChecked(call2197, ">", [1], new GraceNum(0));
                          return opresult2199;
                        };
                        func2194.paramCounts = [0];
                        obj2185.methods["isntEmpty"] = func2194;
                        func2194.definitionLine = 306;
                        func2194.definitionModule = "ast";
                        var func2200 = function(argcv) {    // method scope:=(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_st = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
                          setModuleName("ast");
                          setLineNumber(310);    // compilenode identifier
                          onSelf = true;
                          var call2201 = callmethodChecked(this, "symbolTable:=", [1], var_st);
                          setLineNumber(311);    // compilenode identifier
                          var call2202 = callmethodChecked(var_st, "node:=", [1], this);
                          return call2202;
                        };
                        func2200.paramCounts = [1];
                        obj2185.methods["scope:="] = func2200;
                        func2200.definitionLine = 307;
                        func2200.definitionModule = "ast";
                        var func2203 = function(argcv) {    // method declarationKindWithAncestors(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_as = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                          setModuleName("ast");
                          setLineNumber(313);    // compilenode identifier
                          var call2204 = callmethodChecked(var_k, "parameter", [0]);
                          return call2204;
                        };
                        func2203.paramCounts = [1];
                        obj2185.methods["declarationKindWithAncestors"] = func2203;
                        func2203.definitionLine = 313;
                        func2203.definitionModule = "ast";
                        var func2205 = function(argcv) {    // method isMatchingBlock
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMatchingBlock"));
                          setModuleName("ast");
                          setLineNumber(314);    // compilenode call
                          onSelf = true;
                          var call2207 = callmethodChecked(this, "params", [0]);
                          var call2208 = callmethodChecked(call2207, "size", [0]);
                          var opresult2210 = callmethodChecked(call2208, "==", [1], new GraceNum(1));
                          return opresult2210;
                        };
                        func2205.paramCounts = [0];
                        obj2185.methods["isMatchingBlock"] = func2205;
                        func2205.definitionLine = 314;
                        func2205.definitionModule = "ast";
                        var func2211 = function(argcv) {    // method returnsObject
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                          setModuleName("ast");
                          setLineNumber(316);    // compilenode block
                          var block2212 = new GraceBlock(this, 316, 0);
                          block2212.real = function() {
                            onSelf = true;
                            var call2213 = callmethodChecked(this, "body", [0]);
                            var call2214 = callmethodChecked(call2213, "last", [0]);
                            var call2215 = callmethodChecked(call2214, "returnsObject", [0]);
                            return call2215;
                          };
                          onSelf = true;
                          var call2218 = callmethodChecked(this, "body", [0]);
                          var call2219 = callmethodChecked(call2218, "size", [0]);
                          var opresult2221 = callmethodChecked(call2219, ">", [1], new GraceNum(0));
                          var opresult2223 = callmethodChecked(opresult2221, "&&", [1], block2212);
                          return opresult2223;
                        };
                        func2211.paramCounts = [0];
                        obj2185.methods["returnsObject"] = func2211;
                        func2211.definitionLine = 315;
                        func2211.definitionModule = "ast";
                        var func2224 = function(argcv) {    // method returnedObjectScope
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnedObjectScope"));
                          setModuleName("ast");
                          setLineNumber(320);    // compilenode call
                          onSelf = true;
                          var call2225 = callmethodChecked(this, "body", [0]);
                          var call2226 = callmethodChecked(call2225, "last", [0]);
                          var call2227 = callmethodChecked(call2226, "returnedObjectScope", [0]);
                          return call2227;
                        };
                        func2224.paramCounts = [0];
                        obj2185.methods["returnedObjectScope"] = func2224;
                        func2224.definitionLine = 318;
                        func2224.definitionModule = "ast";
                        var func2228 = function(argcv) {    // method parametersDo(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_b = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parametersDo(1)"));
                          setModuleName("ast");
                          setLineNumber(323);    // compilenode call
                          onSelf = true;
                          var call2229 = callmethodChecked(this, "params", [0]);
                          var call2230 = callmethodChecked(call2229, "do", [1], var_b);
                          return call2230;
                        };
                        func2228.paramCounts = [1];
                        obj2185.methods["parametersDo"] = func2228;
                        func2228.definitionLine = 322;
                        func2228.definitionModule = "ast";
                        var func2231 = function(argcv) {    // method accept(1)from(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_visitor = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                          var var_as = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(325);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                          curarg++;
                          curarg++;
                          // End argument checking
                          setModuleName("ast");
                          var if2232 = GraceDone;
                          setLineNumber(326);    // compilenode identifier
                          var call2233 = callmethodChecked(var_visitor, "visitBlock()up", [1, 1], this, var_as);
                          if (Grace_isTrue(call2233)) {
                            setLineNumber(327);    // compilenode identifier
                            var call2234 = callmethodChecked(var_as, "extend", [1], this);
                            var var_newChain = call2234;
                            setLineNumber(328);    // compilenode call
                            onSelf = true;
                            var call2235 = callmethodChecked(this, "params", [0]);
                            var block2236 = new GraceBlock(this, 328, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2236.real = function(var_mx) {
                              setLineNumber(329);    // compilenode identifier
                              var call2237 = callmethodChecked(var_mx, "accept()from", [1, 1], var_visitor, var_newChain);
                              return call2237;
                            };
                            var call2238 = callmethodChecked(var_prelude, "for()do", [1, 1], call2235, block2236);
                            setLineNumber(331);    // compilenode call
                            onSelf = true;
                            var call2239 = callmethodChecked(this, "body", [0]);
                            var block2240 = new GraceBlock(this, 331, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2240.real = function(var_mx) {
                              setLineNumber(332);    // compilenode identifier
                              var call2241 = callmethodChecked(var_mx, "accept()from", [1, 1], var_visitor, var_newChain);
                              return call2241;
                            };
                            var call2242 = callmethodChecked(var_prelude, "for()do", [1, 1], call2239, block2240);
                            var if2243 = GraceDone;
                            setLineNumber(334);    // compilenode call
                            onSelf = true;
                            var call2244 = callmethodChecked(this, "matchingPattern", [0]);
                            var opresult2247 = callmethodChecked(GraceFalse, "\u2260", [1], call2244);
                            if (Grace_isTrue(opresult2247)) {
                              setLineNumber(335);    // compilenode call
                              onSelf = true;
                              var call2248 = callmethodChecked(this, "matchingPattern", [0]);
                              var call2249 = callmethodChecked(call2248, "accept()from", [1, 1], var_visitor, var_newChain);
                              if2243 = call2249;
                            }
                            if2232 = if2243;
                          }
                          return if2232;
                        };
                        func2231.paramTypes = [];
                        func2231.paramTypes.push([]);
                        func2231.paramTypes.push([]);
                        func2231.paramCounts = [1, 1];
                        obj2185.methods["accept()from"] = func2231;
                        func2231.definitionLine = 325;
                        func2231.definitionModule = "ast";
                        var func2250 = function(argcv) {    // method map(1)ancestors(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_blk = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                          var var_as = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                          setModuleName("ast");
                          setLineNumber(340);    // compilenode call
                          onSelf = true;
                          var call2251 = callmethodChecked(this, "shallowCopy", [0]);
                          var var_n = call2251;
                          setLineNumber(341);    // compilenode identifier
                          var call2252 = callmethodChecked(var_as, "extend", [1], var_n);
                          var var_newChain = call2252;
                          setLineNumber(342);    // compilenode call
                          onSelf = true;
                          var call2253 = callmethodChecked(this, "params", [0]);
                          var call2254 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2255 = callmethodChecked(call2254, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2256 = callmethodChecked(call2255, "listMap()ancestors", [2, 1], call2253, var_blk, var_newChain);
                          var call2257 = callmethodChecked(var_n, "params:=", [1], call2256);
                          setLineNumber(343);    // compilenode call
                          onSelf = true;
                          var call2258 = callmethodChecked(this, "body", [0]);
                          var call2259 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2260 = callmethodChecked(call2259, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2261 = callmethodChecked(call2260, "listMap()ancestors", [2, 1], call2258, var_blk, var_newChain);
                          var call2262 = callmethodChecked(var_n, "body:=", [1], call2261);
                          setLineNumber(344);    // compilenode call
                          onSelf = true;
                          var call2263 = callmethodChecked(this, "matchingPattern", [0]);
                          var call2264 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2265 = callmethodChecked(call2264, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2266 = callmethodChecked(call2265, "maybeMap()ancestors", [2, 1], call2263, var_blk, var_newChain);
                          var call2267 = callmethodChecked(var_n, "matchingPattern:=", [1], call2266);
                          setLineNumber(345);    // compilenode identifier
                          var call2268 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                          return call2268;
                        };
                        func2250.paramCounts = [1, 1];
                        obj2185.methods["map()ancestors"] = func2250;
                        func2250.definitionLine = 339;
                        func2250.definitionModule = "ast";
                        var func2269 = function(argcv) {    // method pretty(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_depth = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                          setModuleName("ast");
                          setLineNumber(348);    // compilenode string
                          var string2270 = new GraceString("");
                          var var_spc = string2270;
                          setLineNumber(349);    // compilenode num
                          var opresult2273 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                          var block2274 = new GraceBlock(this, 349, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2274.real = function(var_i) {
                            setLineNumber(350);    // compilenode string
                            var string2275 = new GraceString("  ");
                            var opresult2278 = callmethodChecked(var_spc, "++", [1], string2275);
                            var_spc = opresult2278;
                            return GraceDone;
                          };
                          var call2279 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult2273, block2274);
                          setLineNumber(352);    // compilenode string
                          var string2280 = new GraceString("\n");
                          var call2282 = callmethodsuper(this, "pretty", [1], var_depth);
                          var opresult2284 = callmethodChecked(call2282, "++", [1], string2280);
                          var var_s = opresult2284;
                          setLineNumber(353);    // compilenode string
                          var string2285 = new GraceString("Parameters:");
                          var opresult2289 = callmethodChecked(var_s, "++", [1], var_spc);
                          var opresult2291 = callmethodChecked(opresult2289, "++", [1], string2285);
                          var_s = opresult2291;
                          setLineNumber(354);    // compilenode call
                          onSelf = true;
                          var call2292 = callmethodChecked(this, "params", [0]);
                          var block2293 = new GraceBlock(this, 354, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2293.real = function(var_mx) {
                            setLineNumber(355);    // compilenode identifier
                            var opresult2296 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                            var call2297 = callmethodChecked(var_mx, "pretty", [1], opresult2296);
                            var string2300 = new GraceString("\n  ");
                            var opresult2303 = callmethodChecked(var_s, "++", [1], string2300);
                            var opresult2305 = callmethodChecked(opresult2303, "++", [1], var_spc);
                            var opresult2307 = callmethodChecked(opresult2305, "++", [1], call2297);
                            var_s = opresult2307;
                            return GraceDone;
                          };
                          var call2308 = callmethodChecked(var_prelude, "for()do", [1, 1], call2292, block2293);
                          setLineNumber(357);    // compilenode string
                          var string2309 = new GraceString("\n");
                          var opresult2312 = callmethodChecked(var_s, "++", [1], string2309);
                          var_s = opresult2312;
                          setLineNumber(358);    // compilenode string
                          var string2313 = new GraceString("Body:");
                          var opresult2317 = callmethodChecked(var_s, "++", [1], var_spc);
                          var opresult2319 = callmethodChecked(opresult2317, "++", [1], string2313);
                          var_s = opresult2319;
                          setLineNumber(359);    // compilenode call
                          onSelf = true;
                          var call2320 = callmethodChecked(this, "body", [0]);
                          var block2321 = new GraceBlock(this, 359, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2321.real = function(var_mx) {
                            setLineNumber(360);    // compilenode identifier
                            var opresult2324 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                            var call2325 = callmethodChecked(var_mx, "pretty", [1], opresult2324);
                            var string2328 = new GraceString("\n  ");
                            var opresult2331 = callmethodChecked(var_s, "++", [1], string2328);
                            var opresult2333 = callmethodChecked(opresult2331, "++", [1], var_spc);
                            var opresult2335 = callmethodChecked(opresult2333, "++", [1], call2325);
                            var_s = opresult2335;
                            return GraceDone;
                          };
                          var call2336 = callmethodChecked(var_prelude, "for()do", [1, 1], call2320, block2321);
                          var if2337 = GraceDone;
                          setLineNumber(362);    // compilenode call
                          onSelf = true;
                          var call2338 = callmethodChecked(this, "matchingPattern", [0]);
                          var opresult2341 = callmethodChecked(GraceFalse, "\u2260", [1], call2338);
                          if (Grace_isTrue(opresult2341)) {
                            setLineNumber(363);    // compilenode string
                            var string2342 = new GraceString("\n");
                            var opresult2345 = callmethodChecked(var_s, "++", [1], string2342);
                            var_s = opresult2345;
                            setLineNumber(364);    // compilenode string
                            var string2346 = new GraceString("Pattern:");
                            var opresult2350 = callmethodChecked(var_s, "++", [1], var_spc);
                            var opresult2352 = callmethodChecked(opresult2350, "++", [1], string2346);
                            var_s = opresult2352;
                            setLineNumber(365);    // compilenode identifier
                            var opresult2355 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                            onSelf = true;
                            var call2356 = callmethodChecked(this, "matchingPattern", [0]);
                            var call2357 = callmethodChecked(call2356, "pretty", [1], opresult2355);
                            var string2360 = new GraceString("\n  ");
                            var opresult2363 = callmethodChecked(var_s, "++", [1], string2360);
                            var opresult2365 = callmethodChecked(opresult2363, "++", [1], var_spc);
                            var opresult2367 = callmethodChecked(opresult2365, "++", [1], call2357);
                            var_s = opresult2367;
                            if2337 = GraceDone;
                          }
                          setLineNumber(367);    // compilenode identifier
                          return var_s;
                        };
                        func2269.paramCounts = [1];
                        obj2185.methods["pretty"] = func2269;
                        func2269.definitionLine = 347;
                        func2269.definitionModule = "ast";
                        var func2368 = function(argcv) {    // method toGrace(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_depth = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(369);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                      callmethod(var_Number, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("ast");
                          setLineNumber(370);    // compilenode string
                          var string2369 = new GraceString("");
                          var var_spc = string2369;
                          setLineNumber(371);    // compilenode identifier
                          var diff2372 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                          var opresult2375 = callmethodChecked(new GraceNum(0), "..", [1], diff2372);
                          var block2376 = new GraceBlock(this, 371, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2376.real = function(var_i) {
                            setLineNumber(372);    // compilenode string
                            var string2377 = new GraceString("    ");
                            var opresult2380 = callmethodChecked(var_spc, "++", [1], string2377);
                            var_spc = opresult2380;
                            return GraceDone;
                          };
                          var call2381 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult2375, block2376);
                          setLineNumber(374);    // compilenode string
                          var string2382 = new GraceString("{");
                          var var_s = string2382;
                          var if2383 = GraceDone;
                          setLineNumber(375);    // compilenode call
                          onSelf = true;
                          var call2385 = callmethodChecked(this, "params", [0]);
                          var call2386 = callmethodChecked(call2385, "size", [0]);
                          var opresult2388 = callmethodChecked(call2386, ">", [1], new GraceNum(0));
                          if (Grace_isTrue(opresult2388)) {
                            setLineNumber(376);    // compilenode string
                            var string2389 = new GraceString(" ");
                            var opresult2392 = callmethodChecked(var_s, "++", [1], string2389);
                            var_s = opresult2392;
                            setLineNumber(377);    // compilenode call
                            onSelf = true;
                            var call2393 = callmethodChecked(this, "params", [0]);
                            var call2394 = callmethodChecked(call2393, "indices", [0]);
                            var block2395 = new GraceBlock(this, 377, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2395.real = function(var_i) {
                              setLineNumber(378);    // compilenode call
                              onSelf = true;
                              var call2396 = callmethodChecked(this, "params", [0]);
                              var call2397 = callmethodChecked(call2396, "at", [1], var_i);
                              var var_p = call2397;
                              var if2398 = GraceDone;
                              setLineNumber(379);    // compilenode call
                              onSelf = true;
                              var call2399 = callmethodChecked(this, "matchingPattern", [0]);
                              var opresult2402 = callmethodChecked(GraceFalse, "\u2260", [1], call2399);
                              if (Grace_isTrue(opresult2402)) {
                                setLineNumber(380);    // compilenode string
                                var string2403 = new GraceString(")");
                                var call2405 = callmethodChecked(var_p, "toGrace", [1], new GraceNum(0));
                                var string2407 = new GraceString("(");
                                var opresult2410 = callmethodChecked(var_s, "++", [1], string2407);
                                var opresult2412 = callmethodChecked(opresult2410, "++", [1], call2405);
                                var opresult2414 = callmethodChecked(opresult2412, "++", [1], string2403);
                                var_s = opresult2414;
                                if2398 = GraceDone;
                              } else {
                                setLineNumber(382);    // compilenode identifier
                                var call2415 = callmethodChecked(var_p, "toGrace", [1], new GraceNum(0));
                                var opresult2418 = callmethodChecked(var_s, "++", [1], call2415);
                                var_s = opresult2418;
                                if2398 = GraceDone;
                              }
                              var if2419 = GraceDone;
                              setLineNumber(384);    // compilenode call
                              onSelf = true;
                              var call2420 = callmethodChecked(this, "params", [0]);
                              var call2421 = callmethodChecked(call2420, "size", [0]);
                              var opresult2424 = callmethodChecked(var_i, "<", [1], call2421);
                              if (Grace_isTrue(opresult2424)) {
                                setLineNumber(385);    // compilenode string
                                var string2425 = new GraceString(", ");
                                var opresult2428 = callmethodChecked(var_s, "++", [1], string2425);
                                var_s = opresult2428;
                                if2419 = GraceDone;
                              } else {
                                setLineNumber(387);    // compilenode string
                                var string2429 = new GraceString(" ->");
                                var opresult2432 = callmethodChecked(var_s, "++", [1], string2429);
                                var_s = opresult2432;
                                if2419 = GraceDone;
                              }
                              return if2419;
                            };
                            var call2433 = callmethodChecked(var_prelude, "for()do", [1, 1], call2394, block2395);
                            if2383 = call2433;
                          }
                          setLineNumber(391);    // compilenode call
                          onSelf = true;
                          var call2434 = callmethodChecked(this, "body", [0]);
                          var block2435 = new GraceBlock(this, 391, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2435.real = function(var_mx) {
                            setLineNumber(392);    // compilenode identifier
                            var opresult2438 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                            var call2439 = callmethodChecked(var_mx, "toGrace", [1], opresult2438);
                            var string2441 = new GraceString("    ");
                            var string2444 = new GraceString("\n");
                            var opresult2447 = callmethodChecked(var_s, "++", [1], string2444);
                            var opresult2449 = callmethodChecked(opresult2447, "++", [1], var_spc);
                            var opresult2451 = callmethodChecked(opresult2449, "++", [1], string2441);
                            var opresult2453 = callmethodChecked(opresult2451, "++", [1], call2439);
                            var_s = opresult2453;
                            return GraceDone;
                          };
                          var call2454 = callmethodChecked(var_prelude, "for()do", [1, 1], call2434, block2435);
                          setLineNumber(394);    // compilenode string
                          var string2455 = new GraceString("}");
                          var string2458 = new GraceString("\n");
                          var opresult2461 = callmethodChecked(var_s, "++", [1], string2458);
                          var opresult2463 = callmethodChecked(opresult2461, "++", [1], var_spc);
                          var opresult2465 = callmethodChecked(opresult2463, "++", [1], string2455);
                          var_s = opresult2465;
                          setLineNumber(395);    // return value
                          if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method toGrace(1) does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          return var_s;
                        };
                        func2368.paramTypes = [];
                        func2368.paramTypes.push([type_Number, "depth"]);
                        func2368.paramCounts = [1];
                        obj2185.methods["toGrace"] = func2368;
                        func2368.definitionLine = 369;
                        func2368.definitionModule = "ast";
                        var func2466 = function(argcv) {    // method shallowCopy
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                          setModuleName("ast");
                          setLineNumber(398);    // compilenode call
                          onSelf = true;
                          var call2467 = callmethodChecked(this, "params", [0]);
                          onSelf = true;
                          var call2468 = callmethodChecked(this, "body", [0]);
                          var call2469 = callmethodChecked(var_blockNode, "new", [2], call2467, call2468);
                          var call2470 = callmethodChecked(call2469, "shallowCopyFieldsFrom", [1], this);
                          return call2470;
                        };
                        func2466.paramCounts = [0];
                        obj2185.methods["shallowCopy"] = func2466;
                        func2466.definitionLine = 397;
                        func2466.definitionModule = "ast";
                        var func2471 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_other = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                          setModuleName("ast");
                          setLineNumber(401);    // compilenode identifier
                          var call2472 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                          setLineNumber(402);    // compilenode identifier
                          var call2473 = callmethodChecked(var_other, "matchingPattern", [0]);
                          onSelf = true;
                          var call2474 = callmethodChecked(this, "matchingPattern:=", [1], call2473);
                          setLineNumber(403);    // compilenode identifier
                          var call2475 = callmethodChecked(var_other, "extraRuntimeData", [0]);
                          onSelf = true;
                          var call2476 = callmethodChecked(this, "extraRuntimeData:=", [1], call2475);
                          setLineNumber(404);    // compilenode identifier
                          return this;
                        };
                        func2471.paramCounts = [1];
                        obj2185.methods["shallowCopyFieldsFrom"] = func2471;
                        func2471.definitionLine = 400;
                        func2471.definitionModule = "ast";
                        setLineNumber(293);    // compilenode call
                        var call2477 = callmethodChecked(superDepth, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call2478 = callmethodChecked(call2477, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call2479 = callmethodChecked(call2478, "baseNode()object", [0, 1], this);
                        obj2185.superobj = call2479;
                        if (call2479.data) obj2185.data = call2479.data;
                        if (call2479.hasOwnProperty('_value'))
                            obj2185._value = call2479._value;
                        setLineNumber(294);    // compilenode string
                        var string2480 = new GraceString("block");
                        obj2185.data["kind"] = string2480;
                        var reader_ast_kind2481 = function() {
                          return this.data["kind"];
                        };
                        reader_ast_kind2481.def = true;
                        obj2185.methods["kind"] = reader_ast_kind2481;
                        setLineNumber(295);    // compilenode string
                        var string2482 = new GraceString("block");
                        obj2185.data["value"] = string2482;
                        var reader_ast_value2483 = function() {
                          return this.data["value"];
                        };
                        reader_ast_value2483.def = true;
                        obj2185.methods["value"] = reader_ast_value2483;
                        setLineNumber(296);    // compilenode identifier
                        obj2185.data["params"] = var_params__39__;
                        var reader_ast_params2484 = function() {
                          return this.data["params"];
                        };
                        obj2185.methods["params"] = reader_ast_params2484;
                        obj2185.data["params"] = var_params__39__;
                        var writer_ast_params2484 = function(argcv, o) {
                          this.data["params"] = o;
                          return GraceDone;
                        };
                        obj2185.methods["params:="] = writer_ast_params2484;
                        obj2185.mutable = true;
                        setLineNumber(297);    // compilenode identifier
                        obj2185.data["body"] = var_body__39__;
                        var reader_ast_body2485 = function() {
                          return this.data["body"];
                        };
                        obj2185.methods["body"] = reader_ast_body2485;
                        obj2185.data["body"] = var_body__39__;
                        var writer_ast_body2485 = function(argcv, o) {
                          this.data["body"] = o;
                          return GraceDone;
                        };
                        obj2185.methods["body:="] = writer_ast_body2485;
                        obj2185.mutable = true;
                        setLineNumber(298);    // compilenode identifier
                        obj2185.data["selfclosure"] = GraceTrue;
                        var reader_ast_selfclosure2486 = function() {
                          return this.data["selfclosure"];
                        };
                        reader_ast_selfclosure2486.def = true;
                        obj2185.methods["selfclosure"] = reader_ast_selfclosure2486;
                        setLineNumber(299);    // compilenode identifier
                        obj2185.data["matchingPattern"] = GraceFalse;
                        var reader_ast_matchingPattern2487 = function() {
                          return this.data["matchingPattern"];
                        };
                        obj2185.methods["matchingPattern"] = reader_ast_matchingPattern2487;
                        obj2185.data["matchingPattern"] = GraceFalse;
                        var writer_ast_matchingPattern2487 = function(argcv, o) {
                          this.data["matchingPattern"] = o;
                          return GraceDone;
                        };
                        obj2185.methods["matchingPattern:="] = writer_ast_matchingPattern2487;
                        obj2185.mutable = true;
                        setLineNumber(300);    // compilenode identifier
                        obj2185.data["extraRuntimeData"] = GraceFalse;
                        var reader_ast_extraRuntimeData2488 = function() {
                          return this.data["extraRuntimeData"];
                        };
                        obj2185.methods["extraRuntimeData"] = reader_ast_extraRuntimeData2488;
                        obj2185.data["extraRuntimeData"] = GraceFalse;
                        var writer_ast_extraRuntimeData2488 = function(argcv, o) {
                          this.data["extraRuntimeData"] = o;
                          return GraceDone;
                        };
                        obj2185.methods["extraRuntimeData:="] = writer_ast_extraRuntimeData2488;
                        obj2185.mutable = true;
                        setLineNumber(301);    // compilenode block
                        var block2489 = new GraceBlock(this, 301, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2489.real = function(var_p) {
                          setLineNumber(302);    // compilenode identifier
                          var call2490 = callmethodChecked(var_ancestorChain, "with", [1], this);
                          var call2491 = callmethodChecked(var_p, "accept()from", [1, 1], var_patternMarkVisitor, call2490);
                          return call2491;
                        };
                        var call2492 = callmethodChecked(var_prelude, "for()do", [1, 1], var_params__39__, block2489);
                        superDepth = origSuperDepth;
                      };
                      obj_init_2185.apply(inheritingObject, []);
                      return obj2185;
                      };
                      obj1873.methods["new()object"] = func2184;
                    superDepth = origSuperDepth;
                  };
                  obj_init_1873.apply(obj1873, []);
                  var var_blockNode = obj1873;
                  setLineNumber(293);    // compilenode method
                  var func2493 = function(argcv) {    // method blockNode
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for blockNode"));
                    setModuleName("ast");
                    // blockNode is a simple accessor - elide try ... catch
                    setLineNumber(291);    // compilenode identifier
                    return var_blockNode;
                  };
                  func2493.paramCounts = [0];
                  this.methods["blockNode"] = func2493;
                  func2493.definitionLine = 293;
                  func2493.definitionModule = "ast";
                  this.methods["blockNode"].debug = "def";
                  setLineNumber(408);    // compilenode object
                  var obj2494 = Grace_allocObject(GraceObject, "tryCatchNode");
                  obj2494.definitionModule = "ast";
                  obj2494.definitionLine = 408;
                  obj2494.outer = this;
                  var reader_ast_outer2495 = function() {
                    return this.outer;
                  };
                  obj2494.methods["outer"] = reader_ast_outer2495;
                  var obj_init_2494 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj2494;
                    var func2496 = function(argcv) {    // method new(3)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_block = arguments[curarg];
                      curarg++;
                      var var_cases__39__ = arguments[curarg];
                      curarg++;
                      var var_finally__39__ = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 3)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(3)"));
                      setModuleName("ast");
                      setLineNumber(409);    // compilenode object
                      var obj2497 = Grace_allocObject(null, "tryCatchNode.new");
                      obj2497.definitionModule = "ast";
                      obj2497.definitionLine = 409;
                      obj2497.outer = this;
                      var reader_ast_outer2498 = function() {
                        return this.outer;
                      };
                      obj2497.methods["outer"] = reader_ast_outer2498;
                      var obj_init_2497 = function() {
                        var origSuperDepth = superDepth;
                        superDepth = obj2497;
                        var func2499 = function(argcv) {    // method isSimple
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isSimple"));
                          setModuleName("ast");
                          // isSimple is a simple accessor - elide try ... catch
                          setLineNumber(415);    // compilenode identifier
                          return GraceFalse;
                        };
                        func2499.paramCounts = [0];
                        obj2497.methods["isSimple"] = func2499;
                        func2499.definitionLine = 415;
                        func2499.definitionModule = "ast";
                        var func2500 = function(argcv) {    // method accept(1)from(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_visitor = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                          var var_as = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(417);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                          curarg++;
                          curarg++;
                          // End argument checking
                          setModuleName("ast");
                          var if2501 = GraceDone;
                          setLineNumber(418);    // compilenode identifier
                          var call2502 = callmethodChecked(var_visitor, "visitTryCatch()up", [1, 1], this, var_as);
                          if (Grace_isTrue(call2502)) {
                            setLineNumber(419);    // compilenode identifier
                            var call2503 = callmethodChecked(var_as, "extend", [1], this);
                            var var_newChain = call2503;
                            setLineNumber(420);    // compilenode call
                            onSelf = true;
                            var call2504 = callmethodChecked(this, "value", [0]);
                            var call2505 = callmethodChecked(call2504, "accept()from", [1, 1], var_visitor, var_newChain);
                            setLineNumber(421);    // compilenode call
                            onSelf = true;
                            var call2506 = callmethodChecked(this, "cases", [0]);
                            var block2507 = new GraceBlock(this, 421, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2507.real = function(var_mx) {
                              setLineNumber(422);    // compilenode identifier
                              var call2508 = callmethodChecked(var_mx, "accept()from", [1, 1], var_visitor, var_newChain);
                              return call2508;
                            };
                            var call2509 = callmethodChecked(var_prelude, "for()do", [1, 1], call2506, block2507);
                            var if2510 = GraceDone;
                            setLineNumber(424);    // compilenode call
                            onSelf = true;
                            var call2511 = callmethodChecked(this, "finally", [0]);
                            var opresult2514 = callmethodChecked(GraceFalse, "\u2260", [1], call2511);
                            if (Grace_isTrue(opresult2514)) {
                              setLineNumber(425);    // compilenode call
                              onSelf = true;
                              var call2515 = callmethodChecked(this, "finally", [0]);
                              var call2516 = callmethodChecked(call2515, "accept()from", [1, 1], var_visitor, var_newChain);
                              if2510 = call2516;
                            }
                            if2501 = if2510;
                          }
                          return if2501;
                        };
                        func2500.paramTypes = [];
                        func2500.paramTypes.push([]);
                        func2500.paramTypes.push([]);
                        func2500.paramCounts = [1, 1];
                        obj2497.methods["accept()from"] = func2500;
                        func2500.definitionLine = 417;
                        func2500.definitionModule = "ast";
                        var func2517 = function(argcv) {    // method map(1)ancestors(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_blk = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                          var var_as = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                          setModuleName("ast");
                          setLineNumber(430);    // compilenode call
                          onSelf = true;
                          var call2518 = callmethodChecked(this, "shallowCopy", [0]);
                          var var_n = call2518;
                          setLineNumber(431);    // compilenode identifier
                          var call2519 = callmethodChecked(var_as, "extend", [1], var_n);
                          var var_newChain = call2519;
                          setLineNumber(432);    // compilenode call
                          onSelf = true;
                          var call2520 = callmethodChecked(this, "value", [0]);
                          var call2521 = callmethodChecked(call2520, "map()ancestors", [1, 1], var_blk, var_newChain);
                          var call2522 = callmethodChecked(var_n, "value:=", [1], call2521);
                          setLineNumber(433);    // compilenode call
                          onSelf = true;
                          var call2523 = callmethodChecked(this, "cases", [0]);
                          var call2524 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2525 = callmethodChecked(call2524, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2526 = callmethodChecked(call2525, "listMap()ancestors", [2, 1], call2523, var_blk, var_newChain);
                          var call2527 = callmethodChecked(var_n, "cases:=", [1], call2526);
                          setLineNumber(434);    // compilenode call
                          onSelf = true;
                          var call2528 = callmethodChecked(this, "finally", [0]);
                          var call2529 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2530 = callmethodChecked(call2529, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2531 = callmethodChecked(call2530, "maybeMap()ancestors", [2, 1], call2528, var_blk, var_newChain);
                          var call2532 = callmethodChecked(var_n, "finally:=", [1], call2531);
                          setLineNumber(435);    // compilenode identifier
                          var call2533 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                          return call2533;
                        };
                        func2517.paramCounts = [1, 1];
                        obj2497.methods["map()ancestors"] = func2517;
                        func2517.definitionLine = 429;
                        func2517.definitionModule = "ast";
                        var func2534 = function(argcv) {    // method pretty(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_depth = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                          setModuleName("ast");
                          setLineNumber(438);    // compilenode string
                          var string2535 = new GraceString("");
                          var var_spc = string2535;
                          setLineNumber(439);    // compilenode num
                          var opresult2538 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                          var block2539 = new GraceBlock(this, 439, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2539.real = function(var_i) {
                            setLineNumber(440);    // compilenode string
                            var string2540 = new GraceString("  ");
                            var opresult2543 = callmethodChecked(var_spc, "++", [1], string2540);
                            var_spc = opresult2543;
                            return GraceDone;
                          };
                          var call2544 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult2538, block2539);
                          setLineNumber(442);    // compilenode string
                          var string2545 = new GraceString("\n");
                          var call2547 = callmethodsuper(this, "pretty", [1], var_depth);
                          var string2549 = new GraceString("");
                          var opresult2551 = callmethodChecked(string2549, "++", [1], call2547);
                          var opresult2553 = callmethodChecked(opresult2551, "++", [1], string2545);
                          var var_s = opresult2553;
                          setLineNumber(443);    // compilenode identifier
                          var opresult2556 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                          onSelf = true;
                          var call2557 = callmethodChecked(this, "value", [0]);
                          var call2558 = callmethodChecked(call2557, "pretty", [1], opresult2556);
                          var opresult2562 = callmethodChecked(var_s, "++", [1], var_spc);
                          var opresult2564 = callmethodChecked(opresult2562, "++", [1], call2558);
                          var_s = opresult2564;
                          setLineNumber(444);    // compilenode call
                          onSelf = true;
                          var call2565 = callmethodChecked(this, "cases", [0]);
                          var block2566 = new GraceBlock(this, 444, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2566.real = function(var_mx) {
                            setLineNumber(445);    // compilenode string
                            var string2567 = new GraceString("");
                            var opresult2571 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                            var call2572 = callmethodChecked(var_mx, "pretty", [1], opresult2571);
                            var string2574 = new GraceString("  ");
                            var string2577 = new GraceString("Case:\n");
                            var string2580 = new GraceString("\n");
                            var opresult2582 = callmethodChecked(string2580, "++", [1], var_spc);
                            var opresult2584 = callmethodChecked(opresult2582, "++", [1], string2577);
                            var opresult2586 = callmethodChecked(opresult2584, "++", [1], var_spc);
                            var opresult2588 = callmethodChecked(opresult2586, "++", [1], string2574);
                            var opresult2590 = callmethodChecked(opresult2588, "++", [1], call2572);
                            var opresult2592 = callmethodChecked(opresult2590, "++", [1], string2567);
                            var opresult2595 = callmethodChecked(var_s, "++", [1], opresult2592);
                            var_s = opresult2595;
                            return GraceDone;
                          };
                          var call2596 = callmethodChecked(var_prelude, "for()do", [1, 1], call2565, block2566);
                          var if2597 = GraceDone;
                          setLineNumber(447);    // compilenode call
                          onSelf = true;
                          var call2598 = callmethodChecked(this, "finally", [0]);
                          var opresult2601 = callmethodChecked(GraceFalse, "\u2260", [1], call2598);
                          if (Grace_isTrue(opresult2601)) {
                            setLineNumber(448);    // compilenode string
                            var string2602 = new GraceString("");
                            var opresult2606 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                            onSelf = true;
                            var call2607 = callmethodChecked(this, "finally", [0]);
                            var call2608 = callmethodChecked(call2607, "pretty", [1], opresult2606);
                            var string2610 = new GraceString("  ");
                            var string2613 = new GraceString("Finally:\n");
                            var string2616 = new GraceString("\n");
                            var opresult2618 = callmethodChecked(string2616, "++", [1], var_spc);
                            var opresult2620 = callmethodChecked(opresult2618, "++", [1], string2613);
                            var opresult2622 = callmethodChecked(opresult2620, "++", [1], var_spc);
                            var opresult2624 = callmethodChecked(opresult2622, "++", [1], string2610);
                            var opresult2626 = callmethodChecked(opresult2624, "++", [1], call2608);
                            var opresult2628 = callmethodChecked(opresult2626, "++", [1], string2602);
                            var opresult2631 = callmethodChecked(var_s, "++", [1], opresult2628);
                            var_s = opresult2631;
                            if2597 = GraceDone;
                          }
                          setLineNumber(450);    // compilenode identifier
                          return var_s;
                        };
                        func2534.paramCounts = [1];
                        obj2497.methods["pretty"] = func2534;
                        func2534.definitionLine = 437;
                        func2534.definitionModule = "ast";
                        var func2632 = function(argcv) {    // method toGrace(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_depth = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(452);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                      callmethod(var_Number, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("ast");
                          setLineNumber(453);    // compilenode string
                          var string2633 = new GraceString("");
                          var var_spc = string2633;
                          setLineNumber(454);    // compilenode identifier
                          var diff2636 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                          var opresult2639 = callmethodChecked(new GraceNum(0), "..", [1], diff2636);
                          var block2640 = new GraceBlock(this, 454, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2640.real = function(var_i) {
                            setLineNumber(455);    // compilenode string
                            var string2641 = new GraceString("    ");
                            var opresult2644 = callmethodChecked(var_spc, "++", [1], string2641);
                            var_spc = opresult2644;
                            return GraceDone;
                          };
                          var call2645 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult2639, block2640);
                          setLineNumber(457);    // compilenode string
                          var string2646 = new GraceString(" ");
                          var opresult2650 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                          onSelf = true;
                          var call2651 = callmethodChecked(this, "value", [0]);
                          var call2652 = callmethodChecked(call2651, "toGrace", [1], opresult2650);
                          var string2654 = new GraceString("try ");
                          var opresult2656 = callmethodChecked(string2654, "++", [1], call2652);
                          var opresult2658 = callmethodChecked(opresult2656, "++", [1], string2646);
                          var var_s = opresult2658;
                          setLineNumber(458);    // compilenode call
                          onSelf = true;
                          var call2659 = callmethodChecked(this, "cases", [0]);
                          var block2660 = new GraceBlock(this, 458, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2660.real = function(var_case) {
                            setLineNumber(459);    // compilenode identifier
                            var opresult2663 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                            var call2664 = callmethodChecked(var_case, "toGrace", [1], opresult2663);
                            var string2666 = new GraceString("catch ");
                            var string2668 = new GraceString("    ");
                            var string2671 = new GraceString("\n");
                            var opresult2674 = callmethodChecked(var_s, "++", [1], string2671);
                            var opresult2676 = callmethodChecked(opresult2674, "++", [1], var_spc);
                            var opresult2678 = callmethodChecked(opresult2676, "++", [1], string2668);
                            var opresult2680 = callmethodChecked(opresult2678, "++", [1], string2666);
                            var opresult2682 = callmethodChecked(opresult2680, "++", [1], call2664);
                            var_s = opresult2682;
                            return GraceDone;
                          };
                          var call2683 = callmethodChecked(var_prelude, "for()do", [1, 1], call2659, block2660);
                          var if2684 = GraceDone;
                          setLineNumber(461);    // compilenode call
                          onSelf = true;
                          var call2685 = callmethodChecked(this, "finally", [0]);
                          var opresult2688 = callmethodChecked(GraceFalse, "\u2260", [1], call2685);
                          if (Grace_isTrue(opresult2688)) {
                            setLineNumber(462);    // compilenode identifier
                            var opresult2691 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                            onSelf = true;
                            var call2692 = callmethodChecked(this, "finally", [0]);
                            var call2693 = callmethodChecked(call2692, "toGrace", [1], opresult2691);
                            var string2695 = new GraceString("finally ");
                            var string2697 = new GraceString("    ");
                            var string2700 = new GraceString("\n");
                            var opresult2703 = callmethodChecked(var_s, "++", [1], string2700);
                            var opresult2705 = callmethodChecked(opresult2703, "++", [1], var_spc);
                            var opresult2707 = callmethodChecked(opresult2705, "++", [1], string2697);
                            var opresult2709 = callmethodChecked(opresult2707, "++", [1], string2695);
                            var opresult2711 = callmethodChecked(opresult2709, "++", [1], call2693);
                            var_s = opresult2711;
                            if2684 = GraceDone;
                          }
                          setLineNumber(464);    // return value
                          if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method toGrace(1) does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          return var_s;
                        };
                        func2632.paramTypes = [];
                        func2632.paramTypes.push([type_Number, "depth"]);
                        func2632.paramCounts = [1];
                        obj2497.methods["toGrace"] = func2632;
                        func2632.definitionLine = 452;
                        func2632.definitionModule = "ast";
                        var func2712 = function(argcv) {    // method shallowCopy
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                          setModuleName("ast");
                          setLineNumber(467);    // compilenode identifier
                          var call2713 = callmethodChecked(var_tryCatchNode, "new", [3], var_nullNode, var_emptySeq, GraceFalse);
                          var call2714 = callmethodChecked(call2713, "shallowCopyFieldsFrom", [1], this);
                          return call2714;
                        };
                        func2712.paramCounts = [0];
                        obj2497.methods["shallowCopy"] = func2712;
                        func2712.definitionLine = 466;
                        func2712.definitionModule = "ast";
                        setLineNumber(410);    // compilenode call
                        var call2715 = callmethodChecked(superDepth, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call2716 = callmethodChecked(call2715, "outer", [0]);
                        onOuter = true;
                        onSelf = true;
                        var call2717 = callmethodChecked(call2716, "baseNode()object", [0, 1], this);
                        obj2497.superobj = call2717;
                        if (call2717.data) obj2497.data = call2717.data;
                        if (call2717.hasOwnProperty('_value'))
                            obj2497._value = call2717._value;
                        setLineNumber(411);    // compilenode string
                        var string2718 = new GraceString("trycatch");
                        obj2497.data["kind"] = string2718;
                        var reader_ast_kind2719 = function() {
                          return this.data["kind"];
                        };
                        reader_ast_kind2719.def = true;
                        obj2497.methods["kind"] = reader_ast_kind2719;
                        setLineNumber(412);    // compilenode identifier
                        obj2497.data["value"] = var_block;
                        var reader_ast_value2720 = function() {
                          return this.data["value"];
                        };
                        obj2497.methods["value"] = reader_ast_value2720;
                        obj2497.data["value"] = var_block;
                        var writer_ast_value2720 = function(argcv, o) {
                          this.data["value"] = o;
                          return GraceDone;
                        };
                        obj2497.methods["value:="] = writer_ast_value2720;
                        obj2497.mutable = true;
                        setLineNumber(413);    // compilenode identifier
                        obj2497.data["cases"] = var_cases__39__;
                        var reader_ast_cases2721 = function() {
                          return this.data["cases"];
                        };
                        obj2497.methods["cases"] = reader_ast_cases2721;
                        obj2497.data["cases"] = var_cases__39__;
                        var writer_ast_cases2721 = function(argcv, o) {
                          this.data["cases"] = o;
                          return GraceDone;
                        };
                        obj2497.methods["cases:="] = writer_ast_cases2721;
                        obj2497.mutable = true;
                        setLineNumber(414);    // compilenode identifier
                        obj2497.data["finally"] = var_finally__39__;
                        var reader_ast_finally2722 = function() {
                          return this.data["finally"];
                        };
                        obj2497.methods["finally"] = reader_ast_finally2722;
                        obj2497.data["finally"] = var_finally__39__;
                        var writer_ast_finally2722 = function(argcv, o) {
                          this.data["finally"] = o;
                          return GraceDone;
                        };
                        obj2497.methods["finally:="] = writer_ast_finally2722;
                        obj2497.mutable = true;
                        superDepth = origSuperDepth;
                      };
                      obj_init_2497.apply(obj2497, []);
                      return obj2497;
                    };
                    func2496.paramCounts = [3];
                    obj2494.methods["new"] = func2496;
                    func2496.definitionLine = 409;
                    func2496.definitionModule = "ast";
                      var func2723 = function(argcv) {    // method new(3     )()object
                        var curarg = 1;
                        var var_block = arguments[curarg];
                        curarg++;
                        var var_cases__39__ = arguments[curarg];
                        curarg++;
                        var var_finally__39__ = arguments[curarg];
                        curarg++;
                        var inheritingObject = arguments[curarg++];
                        // Start argument processing
                        curarg = 1;
                        curarg++;
                        curarg++;
                        curarg++;
                        // End argument processing
                        setModuleName("ast");
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var obj2724 = Grace_allocObject(null, "new");
                        obj2724.definitionModule = "ast";
                        obj2724.definitionLine = 409;
                        var inho2724 = inheritingObject;
                        while (inho2724.superobj) inho2724 = inho2724.superobj;
                        inho2724.superobj = obj2724;
                        obj2724.data = inheritingObject.data;
                        if (inheritingObject.hasOwnProperty('_value'))
                          obj2724._value = inheritingObject._value;
                        obj2724.outer = this;
                        var reader_ast_outer2725 = function() {
                          return this.outer;
                        };
                        obj2724.methods["outer"] = reader_ast_outer2725;
                        var obj_init_2724 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj2724;
                          var func2726 = function(argcv) {    // method isSimple
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isSimple"));
                            setModuleName("ast");
                            // isSimple is a simple accessor - elide try ... catch
                            setLineNumber(415);    // compilenode identifier
                            return GraceFalse;
                          };
                          func2726.paramCounts = [0];
                          obj2724.methods["isSimple"] = func2726;
                          func2726.definitionLine = 415;
                          func2726.definitionModule = "ast";
                          var func2727 = function(argcv) {    // method accept(1)from(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_visitor = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                            var var_as = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(417);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                            curarg++;
                            curarg++;
                            // End argument checking
                            setModuleName("ast");
                            var if2728 = GraceDone;
                            setLineNumber(418);    // compilenode identifier
                            var call2729 = callmethodChecked(var_visitor, "visitTryCatch()up", [1, 1], this, var_as);
                            if (Grace_isTrue(call2729)) {
                              setLineNumber(419);    // compilenode identifier
                              var call2730 = callmethodChecked(var_as, "extend", [1], this);
                              var var_newChain = call2730;
                              setLineNumber(420);    // compilenode call
                              onSelf = true;
                              var call2731 = callmethodChecked(this, "value", [0]);
                              var call2732 = callmethodChecked(call2731, "accept()from", [1, 1], var_visitor, var_newChain);
                              setLineNumber(421);    // compilenode call
                              onSelf = true;
                              var call2733 = callmethodChecked(this, "cases", [0]);
                              var block2734 = new GraceBlock(this, 421, 1);
                              setLineNumber(1);    // compilenode identifier
                              block2734.real = function(var_mx) {
                                setLineNumber(422);    // compilenode identifier
                                var call2735 = callmethodChecked(var_mx, "accept()from", [1, 1], var_visitor, var_newChain);
                                return call2735;
                              };
                              var call2736 = callmethodChecked(var_prelude, "for()do", [1, 1], call2733, block2734);
                              var if2737 = GraceDone;
                              setLineNumber(424);    // compilenode call
                              onSelf = true;
                              var call2738 = callmethodChecked(this, "finally", [0]);
                              var opresult2741 = callmethodChecked(GraceFalse, "\u2260", [1], call2738);
                              if (Grace_isTrue(opresult2741)) {
                                setLineNumber(425);    // compilenode call
                                onSelf = true;
                                var call2742 = callmethodChecked(this, "finally", [0]);
                                var call2743 = callmethodChecked(call2742, "accept()from", [1, 1], var_visitor, var_newChain);
                                if2737 = call2743;
                              }
                              if2728 = if2737;
                            }
                            return if2728;
                          };
                          func2727.paramTypes = [];
                          func2727.paramTypes.push([]);
                          func2727.paramTypes.push([]);
                          func2727.paramCounts = [1, 1];
                          obj2724.methods["accept()from"] = func2727;
                          func2727.definitionLine = 417;
                          func2727.definitionModule = "ast";
                          var func2744 = function(argcv) {    // method map(1)ancestors(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_blk = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                            var var_as = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                            setModuleName("ast");
                            setLineNumber(430);    // compilenode call
                            onSelf = true;
                            var call2745 = callmethodChecked(this, "shallowCopy", [0]);
                            var var_n = call2745;
                            setLineNumber(431);    // compilenode identifier
                            var call2746 = callmethodChecked(var_as, "extend", [1], var_n);
                            var var_newChain = call2746;
                            setLineNumber(432);    // compilenode call
                            onSelf = true;
                            var call2747 = callmethodChecked(this, "value", [0]);
                            var call2748 = callmethodChecked(call2747, "map()ancestors", [1, 1], var_blk, var_newChain);
                            var call2749 = callmethodChecked(var_n, "value:=", [1], call2748);
                            setLineNumber(433);    // compilenode call
                            onSelf = true;
                            var call2750 = callmethodChecked(this, "cases", [0]);
                            var call2751 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call2752 = callmethodChecked(call2751, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call2753 = callmethodChecked(call2752, "listMap()ancestors", [2, 1], call2750, var_blk, var_newChain);
                            var call2754 = callmethodChecked(var_n, "cases:=", [1], call2753);
                            setLineNumber(434);    // compilenode call
                            onSelf = true;
                            var call2755 = callmethodChecked(this, "finally", [0]);
                            var call2756 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call2757 = callmethodChecked(call2756, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call2758 = callmethodChecked(call2757, "maybeMap()ancestors", [2, 1], call2755, var_blk, var_newChain);
                            var call2759 = callmethodChecked(var_n, "finally:=", [1], call2758);
                            setLineNumber(435);    // compilenode identifier
                            var call2760 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                            return call2760;
                          };
                          func2744.paramCounts = [1, 1];
                          obj2724.methods["map()ancestors"] = func2744;
                          func2744.definitionLine = 429;
                          func2744.definitionModule = "ast";
                          var func2761 = function(argcv) {    // method pretty(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_depth = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                            setModuleName("ast");
                            setLineNumber(438);    // compilenode string
                            var string2762 = new GraceString("");
                            var var_spc = string2762;
                            setLineNumber(439);    // compilenode num
                            var opresult2765 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                            var block2766 = new GraceBlock(this, 439, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2766.real = function(var_i) {
                              setLineNumber(440);    // compilenode string
                              var string2767 = new GraceString("  ");
                              var opresult2770 = callmethodChecked(var_spc, "++", [1], string2767);
                              var_spc = opresult2770;
                              return GraceDone;
                            };
                            var call2771 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult2765, block2766);
                            setLineNumber(442);    // compilenode string
                            var string2772 = new GraceString("\n");
                            var call2774 = callmethodsuper(this, "pretty", [1], var_depth);
                            var string2776 = new GraceString("");
                            var opresult2778 = callmethodChecked(string2776, "++", [1], call2774);
                            var opresult2780 = callmethodChecked(opresult2778, "++", [1], string2772);
                            var var_s = opresult2780;
                            setLineNumber(443);    // compilenode identifier
                            var opresult2783 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                            onSelf = true;
                            var call2784 = callmethodChecked(this, "value", [0]);
                            var call2785 = callmethodChecked(call2784, "pretty", [1], opresult2783);
                            var opresult2789 = callmethodChecked(var_s, "++", [1], var_spc);
                            var opresult2791 = callmethodChecked(opresult2789, "++", [1], call2785);
                            var_s = opresult2791;
                            setLineNumber(444);    // compilenode call
                            onSelf = true;
                            var call2792 = callmethodChecked(this, "cases", [0]);
                            var block2793 = new GraceBlock(this, 444, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2793.real = function(var_mx) {
                              setLineNumber(445);    // compilenode string
                              var string2794 = new GraceString("");
                              var opresult2798 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                              var call2799 = callmethodChecked(var_mx, "pretty", [1], opresult2798);
                              var string2801 = new GraceString("  ");
                              var string2804 = new GraceString("Case:\n");
                              var string2807 = new GraceString("\n");
                              var opresult2809 = callmethodChecked(string2807, "++", [1], var_spc);
                              var opresult2811 = callmethodChecked(opresult2809, "++", [1], string2804);
                              var opresult2813 = callmethodChecked(opresult2811, "++", [1], var_spc);
                              var opresult2815 = callmethodChecked(opresult2813, "++", [1], string2801);
                              var opresult2817 = callmethodChecked(opresult2815, "++", [1], call2799);
                              var opresult2819 = callmethodChecked(opresult2817, "++", [1], string2794);
                              var opresult2822 = callmethodChecked(var_s, "++", [1], opresult2819);
                              var_s = opresult2822;
                              return GraceDone;
                            };
                            var call2823 = callmethodChecked(var_prelude, "for()do", [1, 1], call2792, block2793);
                            var if2824 = GraceDone;
                            setLineNumber(447);    // compilenode call
                            onSelf = true;
                            var call2825 = callmethodChecked(this, "finally", [0]);
                            var opresult2828 = callmethodChecked(GraceFalse, "\u2260", [1], call2825);
                            if (Grace_isTrue(opresult2828)) {
                              setLineNumber(448);    // compilenode string
                              var string2829 = new GraceString("");
                              var opresult2833 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                              onSelf = true;
                              var call2834 = callmethodChecked(this, "finally", [0]);
                              var call2835 = callmethodChecked(call2834, "pretty", [1], opresult2833);
                              var string2837 = new GraceString("  ");
                              var string2840 = new GraceString("Finally:\n");
                              var string2843 = new GraceString("\n");
                              var opresult2845 = callmethodChecked(string2843, "++", [1], var_spc);
                              var opresult2847 = callmethodChecked(opresult2845, "++", [1], string2840);
                              var opresult2849 = callmethodChecked(opresult2847, "++", [1], var_spc);
                              var opresult2851 = callmethodChecked(opresult2849, "++", [1], string2837);
                              var opresult2853 = callmethodChecked(opresult2851, "++", [1], call2835);
                              var opresult2855 = callmethodChecked(opresult2853, "++", [1], string2829);
                              var opresult2858 = callmethodChecked(var_s, "++", [1], opresult2855);
                              var_s = opresult2858;
                              if2824 = GraceDone;
                            }
                            setLineNumber(450);    // compilenode identifier
                            return var_s;
                          };
                          func2761.paramCounts = [1];
                          obj2724.methods["pretty"] = func2761;
                          func2761.definitionLine = 437;
                          func2761.definitionModule = "ast";
                          var func2859 = function(argcv) {    // method toGrace(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_depth = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(452);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                        callmethod(var_Number, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("ast");
                            setLineNumber(453);    // compilenode string
                            var string2860 = new GraceString("");
                            var var_spc = string2860;
                            setLineNumber(454);    // compilenode identifier
                            var diff2863 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                            var opresult2866 = callmethodChecked(new GraceNum(0), "..", [1], diff2863);
                            var block2867 = new GraceBlock(this, 454, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2867.real = function(var_i) {
                              setLineNumber(455);    // compilenode string
                              var string2868 = new GraceString("    ");
                              var opresult2871 = callmethodChecked(var_spc, "++", [1], string2868);
                              var_spc = opresult2871;
                              return GraceDone;
                            };
                            var call2872 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult2866, block2867);
                            setLineNumber(457);    // compilenode string
                            var string2873 = new GraceString(" ");
                            var opresult2877 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                            onSelf = true;
                            var call2878 = callmethodChecked(this, "value", [0]);
                            var call2879 = callmethodChecked(call2878, "toGrace", [1], opresult2877);
                            var string2881 = new GraceString("try ");
                            var opresult2883 = callmethodChecked(string2881, "++", [1], call2879);
                            var opresult2885 = callmethodChecked(opresult2883, "++", [1], string2873);
                            var var_s = opresult2885;
                            setLineNumber(458);    // compilenode call
                            onSelf = true;
                            var call2886 = callmethodChecked(this, "cases", [0]);
                            var block2887 = new GraceBlock(this, 458, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2887.real = function(var_case) {
                              setLineNumber(459);    // compilenode identifier
                              var opresult2890 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                              var call2891 = callmethodChecked(var_case, "toGrace", [1], opresult2890);
                              var string2893 = new GraceString("catch ");
                              var string2895 = new GraceString("    ");
                              var string2898 = new GraceString("\n");
                              var opresult2901 = callmethodChecked(var_s, "++", [1], string2898);
                              var opresult2903 = callmethodChecked(opresult2901, "++", [1], var_spc);
                              var opresult2905 = callmethodChecked(opresult2903, "++", [1], string2895);
                              var opresult2907 = callmethodChecked(opresult2905, "++", [1], string2893);
                              var opresult2909 = callmethodChecked(opresult2907, "++", [1], call2891);
                              var_s = opresult2909;
                              return GraceDone;
                            };
                            var call2910 = callmethodChecked(var_prelude, "for()do", [1, 1], call2886, block2887);
                            var if2911 = GraceDone;
                            setLineNumber(461);    // compilenode call
                            onSelf = true;
                            var call2912 = callmethodChecked(this, "finally", [0]);
                            var opresult2915 = callmethodChecked(GraceFalse, "\u2260", [1], call2912);
                            if (Grace_isTrue(opresult2915)) {
                              setLineNumber(462);    // compilenode identifier
                              var opresult2918 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                              onSelf = true;
                              var call2919 = callmethodChecked(this, "finally", [0]);
                              var call2920 = callmethodChecked(call2919, "toGrace", [1], opresult2918);
                              var string2922 = new GraceString("finally ");
                              var string2924 = new GraceString("    ");
                              var string2927 = new GraceString("\n");
                              var opresult2930 = callmethodChecked(var_s, "++", [1], string2927);
                              var opresult2932 = callmethodChecked(opresult2930, "++", [1], var_spc);
                              var opresult2934 = callmethodChecked(opresult2932, "++", [1], string2924);
                              var opresult2936 = callmethodChecked(opresult2934, "++", [1], string2922);
                              var opresult2938 = callmethodChecked(opresult2936, "++", [1], call2920);
                              var_s = opresult2938;
                              if2911 = GraceDone;
                            }
                            setLineNumber(464);    // return value
                            if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method toGrace(1) does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            return var_s;
                          };
                          func2859.paramTypes = [];
                          func2859.paramTypes.push([type_Number, "depth"]);
                          func2859.paramCounts = [1];
                          obj2724.methods["toGrace"] = func2859;
                          func2859.definitionLine = 452;
                          func2859.definitionModule = "ast";
                          var func2939 = function(argcv) {    // method shallowCopy
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                            setModuleName("ast");
                            setLineNumber(467);    // compilenode identifier
                            var call2940 = callmethodChecked(var_tryCatchNode, "new", [3], var_nullNode, var_emptySeq, GraceFalse);
                            var call2941 = callmethodChecked(call2940, "shallowCopyFieldsFrom", [1], this);
                            return call2941;
                          };
                          func2939.paramCounts = [0];
                          obj2724.methods["shallowCopy"] = func2939;
                          func2939.definitionLine = 466;
                          func2939.definitionModule = "ast";
                          setLineNumber(410);    // compilenode call
                          var call2942 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2943 = callmethodChecked(call2942, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call2944 = callmethodChecked(call2943, "baseNode()object", [0, 1], this);
                          obj2724.superobj = call2944;
                          if (call2944.data) obj2724.data = call2944.data;
                          if (call2944.hasOwnProperty('_value'))
                              obj2724._value = call2944._value;
                          setLineNumber(411);    // compilenode string
                          var string2945 = new GraceString("trycatch");
                          obj2724.data["kind"] = string2945;
                          var reader_ast_kind2946 = function() {
                            return this.data["kind"];
                          };
                          reader_ast_kind2946.def = true;
                          obj2724.methods["kind"] = reader_ast_kind2946;
                          setLineNumber(412);    // compilenode identifier
                          obj2724.data["value"] = var_block;
                          var reader_ast_value2947 = function() {
                            return this.data["value"];
                          };
                          obj2724.methods["value"] = reader_ast_value2947;
                          obj2724.data["value"] = var_block;
                          var writer_ast_value2947 = function(argcv, o) {
                            this.data["value"] = o;
                            return GraceDone;
                          };
                          obj2724.methods["value:="] = writer_ast_value2947;
                          obj2724.mutable = true;
                          setLineNumber(413);    // compilenode identifier
                          obj2724.data["cases"] = var_cases__39__;
                          var reader_ast_cases2948 = function() {
                            return this.data["cases"];
                          };
                          obj2724.methods["cases"] = reader_ast_cases2948;
                          obj2724.data["cases"] = var_cases__39__;
                          var writer_ast_cases2948 = function(argcv, o) {
                            this.data["cases"] = o;
                            return GraceDone;
                          };
                          obj2724.methods["cases:="] = writer_ast_cases2948;
                          obj2724.mutable = true;
                          setLineNumber(414);    // compilenode identifier
                          obj2724.data["finally"] = var_finally__39__;
                          var reader_ast_finally2949 = function() {
                            return this.data["finally"];
                          };
                          obj2724.methods["finally"] = reader_ast_finally2949;
                          obj2724.data["finally"] = var_finally__39__;
                          var writer_ast_finally2949 = function(argcv, o) {
                            this.data["finally"] = o;
                            return GraceDone;
                          };
                          obj2724.methods["finally:="] = writer_ast_finally2949;
                          obj2724.mutable = true;
                          superDepth = origSuperDepth;
                        };
                        obj_init_2724.apply(inheritingObject, []);
                        return obj2724;
                        };
                        obj2494.methods["new()object"] = func2723;
                      superDepth = origSuperDepth;
                    };
                    obj_init_2494.apply(obj2494, []);
                    var var_tryCatchNode = obj2494;
                    setLineNumber(410);    // compilenode method
                    var func2950 = function(argcv) {    // method tryCatchNode
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for tryCatchNode"));
                      setModuleName("ast");
                      // tryCatchNode is a simple accessor - elide try ... catch
                      setLineNumber(408);    // compilenode identifier
                      return var_tryCatchNode;
                    };
                    func2950.paramCounts = [0];
                    this.methods["tryCatchNode"] = func2950;
                    func2950.definitionLine = 410;
                    func2950.definitionModule = "ast";
                    this.methods["tryCatchNode"].debug = "def";
                    setLineNumber(471);    // compilenode object
                    var obj2951 = Grace_allocObject(GraceObject, "matchCaseNode");
                    obj2951.definitionModule = "ast";
                    obj2951.definitionLine = 471;
                    obj2951.outer = this;
                    var reader_ast_outer2952 = function() {
                      return this.outer;
                    };
                    obj2951.methods["outer"] = reader_ast_outer2952;
                    var obj_init_2951 = function() {
                      var origSuperDepth = superDepth;
                      superDepth = obj2951;
                      var func2953 = function(argcv) {    // method new(3)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_matchee__39__ = arguments[curarg];
                        curarg++;
                        var var_cases__39__ = arguments[curarg];
                        curarg++;
                        var var_elsecase__39__ = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 3)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(3)"));
                        setModuleName("ast");
                        setLineNumber(472);    // compilenode object
                        var obj2954 = Grace_allocObject(null, "matchCaseNode.new");
                        obj2954.definitionModule = "ast";
                        obj2954.definitionLine = 472;
                        obj2954.outer = this;
                        var reader_ast_outer2955 = function() {
                          return this.outer;
                        };
                        obj2954.methods["outer"] = reader_ast_outer2955;
                        var obj_init_2954 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj2954;
                          var func2956 = function(argcv) {    // method isSimple
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isSimple"));
                            setModuleName("ast");
                            // isSimple is a simple accessor - elide try ... catch
                            setLineNumber(478);    // compilenode identifier
                            return GraceFalse;
                          };
                          func2956.paramCounts = [0];
                          obj2954.methods["isSimple"] = func2956;
                          func2956.definitionLine = 478;
                          func2956.definitionModule = "ast";
                          var func2957 = function(argcv) {    // method matchee
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for matchee"));
                            setModuleName("ast");
                            setLineNumber(479);    // compilenode call
                            onSelf = true;
                            var call2958 = callmethodChecked(this, "value", [0]);
                            return call2958;
                          };
                          func2957.paramCounts = [0];
                          obj2954.methods["matchee"] = func2957;
                          func2957.definitionLine = 479;
                          func2957.definitionModule = "ast";
                          var func2959 = function(argcv) {    // method accept(1)from(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_visitor = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                            var var_as = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(480);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                            curarg++;
                            curarg++;
                            // End argument checking
                            setModuleName("ast");
                            var if2960 = GraceDone;
                            setLineNumber(481);    // compilenode identifier
                            var call2961 = callmethodChecked(var_visitor, "visitMatchCase()up", [1, 1], this, var_as);
                            if (Grace_isTrue(call2961)) {
                              setLineNumber(482);    // compilenode identifier
                              var call2962 = callmethodChecked(var_as, "extend", [1], this);
                              var var_newChain = call2962;
                              setLineNumber(483);    // compilenode call
                              onSelf = true;
                              var call2963 = callmethodChecked(this, "value", [0]);
                              var call2964 = callmethodChecked(call2963, "accept()from", [1, 1], var_visitor, var_newChain);
                              setLineNumber(484);    // compilenode call
                              onSelf = true;
                              var call2965 = callmethodChecked(this, "cases", [0]);
                              var block2966 = new GraceBlock(this, 484, 1);
                              setLineNumber(1);    // compilenode identifier
                              block2966.real = function(var_mx) {
                                setLineNumber(485);    // compilenode identifier
                                var call2967 = callmethodChecked(var_mx, "accept()from", [1, 1], var_visitor, var_newChain);
                                return call2967;
                              };
                              var call2968 = callmethodChecked(var_prelude, "for()do", [1, 1], call2965, block2966);
                              var if2969 = GraceDone;
                              setLineNumber(487);    // compilenode call
                              onSelf = true;
                              var call2970 = callmethodChecked(this, "elsecase", [0]);
                              var opresult2973 = callmethodChecked(GraceFalse, "\u2260", [1], call2970);
                              if (Grace_isTrue(opresult2973)) {
                                setLineNumber(488);    // compilenode call
                                onSelf = true;
                                var call2974 = callmethodChecked(this, "elsecase", [0]);
                                var call2975 = callmethodChecked(call2974, "accept()from", [1, 1], var_visitor, var_newChain);
                                if2969 = call2975;
                              }
                              if2960 = if2969;
                            }
                            return if2960;
                          };
                          func2959.paramTypes = [];
                          func2959.paramTypes.push([]);
                          func2959.paramTypes.push([]);
                          func2959.paramCounts = [1, 1];
                          obj2954.methods["accept()from"] = func2959;
                          func2959.definitionLine = 480;
                          func2959.definitionModule = "ast";
                          var func2976 = function(argcv) {    // method map(1)ancestors(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_blk = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                            var var_as = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                            setModuleName("ast");
                            setLineNumber(493);    // compilenode call
                            onSelf = true;
                            var call2977 = callmethodChecked(this, "shallowCopy", [0]);
                            var var_n = call2977;
                            setLineNumber(494);    // compilenode identifier
                            var call2978 = callmethodChecked(var_as, "extend", [1], var_n);
                            var var_newChain = call2978;
                            setLineNumber(495);    // compilenode call
                            onSelf = true;
                            var call2979 = callmethodChecked(this, "value", [0]);
                            var call2980 = callmethodChecked(call2979, "map()ancestors", [1, 1], var_blk, var_newChain);
                            var call2981 = callmethodChecked(var_n, "value:=", [1], call2980);
                            setLineNumber(496);    // compilenode call
                            onSelf = true;
                            var call2982 = callmethodChecked(this, "cases", [0]);
                            var call2983 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call2984 = callmethodChecked(call2983, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call2985 = callmethodChecked(call2984, "listMap()ancestors", [2, 1], call2982, var_blk, var_newChain);
                            var call2986 = callmethodChecked(var_n, "cases:=", [1], call2985);
                            setLineNumber(497);    // compilenode call
                            onSelf = true;
                            var call2987 = callmethodChecked(this, "elsecase", [0]);
                            var call2988 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call2989 = callmethodChecked(call2988, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call2990 = callmethodChecked(call2989, "maybeMap()ancestors", [2, 1], call2987, var_blk, var_newChain);
                            var call2991 = callmethodChecked(var_n, "elsecase:=", [1], call2990);
                            setLineNumber(498);    // compilenode identifier
                            var call2992 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                            return call2992;
                          };
                          func2976.paramCounts = [1, 1];
                          obj2954.methods["map()ancestors"] = func2976;
                          func2976.definitionLine = 492;
                          func2976.definitionModule = "ast";
                          var func2993 = function(argcv) {    // method pretty(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_depth = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                            setModuleName("ast");
                            setLineNumber(501);    // compilenode string
                            var string2994 = new GraceString("");
                            var var_spc = string2994;
                            setLineNumber(502);    // compilenode num
                            var opresult2997 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                            var block2998 = new GraceBlock(this, 502, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2998.real = function(var_i) {
                              setLineNumber(503);    // compilenode string
                              var string2999 = new GraceString("  ");
                              var opresult3002 = callmethodChecked(var_spc, "++", [1], string2999);
                              var_spc = opresult3002;
                              return GraceDone;
                            };
                            var call3003 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult2997, block2998);
                            setLineNumber(505);    // compilenode string
                            var string3004 = new GraceString("\n");
                            var call3006 = callmethodsuper(this, "pretty", [1], var_depth);
                            var opresult3008 = callmethodChecked(call3006, "++", [1], string3004);
                            var var_s = opresult3008;
                            setLineNumber(506);    // compilenode identifier
                            var opresult3011 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                            onSelf = true;
                            var call3012 = callmethodChecked(this, "matchee", [0]);
                            var call3013 = callmethodChecked(call3012, "pretty", [1], opresult3011);
                            var opresult3017 = callmethodChecked(var_s, "++", [1], var_spc);
                            var opresult3019 = callmethodChecked(opresult3017, "++", [1], call3013);
                            var_s = opresult3019;
                            setLineNumber(507);    // compilenode call
                            onSelf = true;
                            var call3020 = callmethodChecked(this, "cases", [0]);
                            var block3021 = new GraceBlock(this, 507, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3021.real = function(var_mx) {
                              setLineNumber(508);    // compilenode string
                              var string3022 = new GraceString("");
                              var opresult3026 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                              var call3027 = callmethodChecked(var_mx, "pretty", [1], opresult3026);
                              var string3029 = new GraceString("  ");
                              var string3032 = new GraceString("Case:\n");
                              var string3035 = new GraceString("\n");
                              var opresult3037 = callmethodChecked(string3035, "++", [1], var_spc);
                              var opresult3039 = callmethodChecked(opresult3037, "++", [1], string3032);
                              var opresult3041 = callmethodChecked(opresult3039, "++", [1], var_spc);
                              var opresult3043 = callmethodChecked(opresult3041, "++", [1], string3029);
                              var opresult3045 = callmethodChecked(opresult3043, "++", [1], call3027);
                              var opresult3047 = callmethodChecked(opresult3045, "++", [1], string3022);
                              var opresult3050 = callmethodChecked(var_s, "++", [1], opresult3047);
                              var_s = opresult3050;
                              return GraceDone;
                            };
                            var call3051 = callmethodChecked(var_prelude, "for()do", [1, 1], call3020, block3021);
                            var if3052 = GraceDone;
                            setLineNumber(510);    // compilenode call
                            onSelf = true;
                            var call3053 = callmethodChecked(this, "elsecase", [0]);
                            var opresult3056 = callmethodChecked(GraceFalse, "\u2260", [1], call3053);
                            if (Grace_isTrue(opresult3056)) {
                              setLineNumber(511);    // compilenode string
                              var string3057 = new GraceString("");
                              var opresult3061 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                              onSelf = true;
                              var call3062 = callmethodChecked(this, "elsecase", [0]);
                              var call3063 = callmethodChecked(call3062, "pretty", [1], opresult3061);
                              var string3065 = new GraceString("  ");
                              var string3068 = new GraceString("Else:\n");
                              var string3071 = new GraceString("\n");
                              var opresult3073 = callmethodChecked(string3071, "++", [1], var_spc);
                              var opresult3075 = callmethodChecked(opresult3073, "++", [1], string3068);
                              var opresult3077 = callmethodChecked(opresult3075, "++", [1], var_spc);
                              var opresult3079 = callmethodChecked(opresult3077, "++", [1], string3065);
                              var opresult3081 = callmethodChecked(opresult3079, "++", [1], call3063);
                              var opresult3083 = callmethodChecked(opresult3081, "++", [1], string3057);
                              var opresult3086 = callmethodChecked(var_s, "++", [1], opresult3083);
                              var_s = opresult3086;
                              if3052 = GraceDone;
                            }
                            setLineNumber(513);    // compilenode identifier
                            return var_s;
                          };
                          func2993.paramCounts = [1];
                          obj2954.methods["pretty"] = func2993;
                          func2993.definitionLine = 500;
                          func2993.definitionModule = "ast";
                          var func3087 = function(argcv) {    // method toGrace(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_depth = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(515);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                        callmethod(var_Number, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("ast");
                            setLineNumber(516);    // compilenode string
                            var string3088 = new GraceString("");
                            var var_spc = string3088;
                            setLineNumber(517);    // compilenode identifier
                            var diff3091 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                            var opresult3094 = callmethodChecked(new GraceNum(0), "..", [1], diff3091);
                            var block3095 = new GraceBlock(this, 517, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3095.real = function(var_i) {
                              setLineNumber(518);    // compilenode string
                              var string3096 = new GraceString("    ");
                              var opresult3099 = callmethodChecked(var_spc, "++", [1], string3096);
                              var_spc = opresult3099;
                              return GraceDone;
                            };
                            var call3100 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult3094, block3095);
                            setLineNumber(520);    // compilenode string
                            var string3101 = new GraceString(")");
                            onSelf = true;
                            var call3103 = callmethodChecked(this, "value", [0]);
                            var call3104 = callmethodChecked(call3103, "toGrace", [1], new GraceNum(0));
                            var string3106 = new GraceString("match(");
                            var opresult3108 = callmethodChecked(string3106, "++", [1], call3104);
                            var opresult3110 = callmethodChecked(opresult3108, "++", [1], string3101);
                            var var_s = opresult3110;
                            setLineNumber(521);    // compilenode call
                            onSelf = true;
                            var call3111 = callmethodChecked(this, "cases", [0]);
                            var block3112 = new GraceBlock(this, 521, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3112.real = function(var_case) {
                              setLineNumber(522);    // compilenode identifier
                              var opresult3115 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                              var call3116 = callmethodChecked(var_case, "toGrace", [1], opresult3115);
                              var string3118 = new GraceString("case ");
                              var string3120 = new GraceString("    ");
                              var string3123 = new GraceString("\n");
                              var opresult3126 = callmethodChecked(var_s, "++", [1], string3123);
                              var opresult3128 = callmethodChecked(opresult3126, "++", [1], var_spc);
                              var opresult3130 = callmethodChecked(opresult3128, "++", [1], string3120);
                              var opresult3132 = callmethodChecked(opresult3130, "++", [1], string3118);
                              var opresult3134 = callmethodChecked(opresult3132, "++", [1], call3116);
                              var_s = opresult3134;
                              return GraceDone;
                            };
                            var call3135 = callmethodChecked(var_prelude, "for()do", [1, 1], call3111, block3112);
                            var if3136 = GraceDone;
                            setLineNumber(524);    // compilenode call
                            onSelf = true;
                            var call3137 = callmethodChecked(this, "elsecase", [0]);
                            var opresult3140 = callmethodChecked(GraceFalse, "\u2260", [1], call3137);
                            if (Grace_isTrue(opresult3140)) {
                              setLineNumber(525);    // compilenode identifier
                              var opresult3143 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                              onSelf = true;
                              var call3144 = callmethodChecked(this, "elsecase", [0]);
                              var call3145 = callmethodChecked(call3144, "toGrace", [1], opresult3143);
                              var string3147 = new GraceString("else ");
                              var string3149 = new GraceString("    ");
                              var string3152 = new GraceString("\n");
                              var opresult3155 = callmethodChecked(var_s, "++", [1], string3152);
                              var opresult3157 = callmethodChecked(opresult3155, "++", [1], var_spc);
                              var opresult3159 = callmethodChecked(opresult3157, "++", [1], string3149);
                              var opresult3161 = callmethodChecked(opresult3159, "++", [1], string3147);
                              var opresult3163 = callmethodChecked(opresult3161, "++", [1], call3145);
                              var_s = opresult3163;
                              if3136 = GraceDone;
                            }
                            setLineNumber(527);    // return value
                            if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method toGrace(1) does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            return var_s;
                          };
                          func3087.paramTypes = [];
                          func3087.paramTypes.push([type_Number, "depth"]);
                          func3087.paramCounts = [1];
                          obj2954.methods["toGrace"] = func3087;
                          func3087.definitionLine = 515;
                          func3087.definitionModule = "ast";
                          var func3164 = function(argcv) {    // method shallowCopy
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                            setModuleName("ast");
                            setLineNumber(530);    // compilenode identifier
                            var call3165 = callmethodChecked(var_matchCaseNode, "new", [3], var_nullNode, var_emptySeq, GraceFalse);
                            var call3166 = callmethodChecked(call3165, "shallowCopyFieldsFrom", [1], this);
                            return call3166;
                          };
                          func3164.paramCounts = [0];
                          obj2954.methods["shallowCopy"] = func3164;
                          func3164.definitionLine = 529;
                          func3164.definitionModule = "ast";
                          setLineNumber(473);    // compilenode call
                          var call3167 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call3168 = callmethodChecked(call3167, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call3169 = callmethodChecked(call3168, "baseNode()object", [0, 1], this);
                          obj2954.superobj = call3169;
                          if (call3169.data) obj2954.data = call3169.data;
                          if (call3169.hasOwnProperty('_value'))
                              obj2954._value = call3169._value;
                          setLineNumber(474);    // compilenode string
                          var string3170 = new GraceString("matchcase");
                          obj2954.data["kind"] = string3170;
                          var reader_ast_kind3171 = function() {
                            return this.data["kind"];
                          };
                          reader_ast_kind3171.def = true;
                          obj2954.methods["kind"] = reader_ast_kind3171;
                          setLineNumber(475);    // compilenode identifier
                          obj2954.data["value"] = var_matchee__39__;
                          var reader_ast_value3172 = function() {
                            return this.data["value"];
                          };
                          obj2954.methods["value"] = reader_ast_value3172;
                          obj2954.data["value"] = var_matchee__39__;
                          var writer_ast_value3172 = function(argcv, o) {
                            this.data["value"] = o;
                            return GraceDone;
                          };
                          obj2954.methods["value:="] = writer_ast_value3172;
                          obj2954.mutable = true;
                          setLineNumber(476);    // compilenode identifier
                          obj2954.data["cases"] = var_cases__39__;
                          var reader_ast_cases3173 = function() {
                            return this.data["cases"];
                          };
                          obj2954.methods["cases"] = reader_ast_cases3173;
                          obj2954.data["cases"] = var_cases__39__;
                          var writer_ast_cases3173 = function(argcv, o) {
                            this.data["cases"] = o;
                            return GraceDone;
                          };
                          obj2954.methods["cases:="] = writer_ast_cases3173;
                          obj2954.mutable = true;
                          setLineNumber(477);    // compilenode identifier
                          obj2954.data["elsecase"] = var_elsecase__39__;
                          var reader_ast_elsecase3174 = function() {
                            return this.data["elsecase"];
                          };
                          obj2954.methods["elsecase"] = reader_ast_elsecase3174;
                          obj2954.data["elsecase"] = var_elsecase__39__;
                          var writer_ast_elsecase3174 = function(argcv, o) {
                            this.data["elsecase"] = o;
                            return GraceDone;
                          };
                          obj2954.methods["elsecase:="] = writer_ast_elsecase3174;
                          obj2954.mutable = true;
                          superDepth = origSuperDepth;
                        };
                        obj_init_2954.apply(obj2954, []);
                        return obj2954;
                      };
                      func2953.paramCounts = [3];
                      obj2951.methods["new"] = func2953;
                      func2953.definitionLine = 472;
                      func2953.definitionModule = "ast";
                        var func3175 = function(argcv) {    // method new(3     )()object
                          var curarg = 1;
                          var var_matchee__39__ = arguments[curarg];
                          curarg++;
                          var var_cases__39__ = arguments[curarg];
                          curarg++;
                          var var_elsecase__39__ = arguments[curarg];
                          curarg++;
                          var inheritingObject = arguments[curarg++];
                          // Start argument processing
                          curarg = 1;
                          curarg++;
                          curarg++;
                          curarg++;
                          // End argument processing
                          setModuleName("ast");
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var obj3176 = Grace_allocObject(null, "new");
                          obj3176.definitionModule = "ast";
                          obj3176.definitionLine = 472;
                          var inho3176 = inheritingObject;
                          while (inho3176.superobj) inho3176 = inho3176.superobj;
                          inho3176.superobj = obj3176;
                          obj3176.data = inheritingObject.data;
                          if (inheritingObject.hasOwnProperty('_value'))
                            obj3176._value = inheritingObject._value;
                          obj3176.outer = this;
                          var reader_ast_outer3177 = function() {
                            return this.outer;
                          };
                          obj3176.methods["outer"] = reader_ast_outer3177;
                          var obj_init_3176 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj3176;
                            var func3178 = function(argcv) {    // method isSimple
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isSimple"));
                              setModuleName("ast");
                              // isSimple is a simple accessor - elide try ... catch
                              setLineNumber(478);    // compilenode identifier
                              return GraceFalse;
                            };
                            func3178.paramCounts = [0];
                            obj3176.methods["isSimple"] = func3178;
                            func3178.definitionLine = 478;
                            func3178.definitionModule = "ast";
                            var func3179 = function(argcv) {    // method matchee
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for matchee"));
                              setModuleName("ast");
                              setLineNumber(479);    // compilenode call
                              onSelf = true;
                              var call3180 = callmethodChecked(this, "value", [0]);
                              return call3180;
                            };
                            func3179.paramCounts = [0];
                            obj3176.methods["matchee"] = func3179;
                            func3179.definitionLine = 479;
                            func3179.definitionModule = "ast";
                            var func3181 = function(argcv) {    // method accept(1)from(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_visitor = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                              var var_as = arguments[curarg];
                              curarg++;
                              if (argcv[1] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                              // Start argument checking
                              curarg = 1;
                              setLineNumber(480);    // compilenode identifier
                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                              curarg++;
                              curarg++;
                              // End argument checking
                              setModuleName("ast");
                              var if3182 = GraceDone;
                              setLineNumber(481);    // compilenode identifier
                              var call3183 = callmethodChecked(var_visitor, "visitMatchCase()up", [1, 1], this, var_as);
                              if (Grace_isTrue(call3183)) {
                                setLineNumber(482);    // compilenode identifier
                                var call3184 = callmethodChecked(var_as, "extend", [1], this);
                                var var_newChain = call3184;
                                setLineNumber(483);    // compilenode call
                                onSelf = true;
                                var call3185 = callmethodChecked(this, "value", [0]);
                                var call3186 = callmethodChecked(call3185, "accept()from", [1, 1], var_visitor, var_newChain);
                                setLineNumber(484);    // compilenode call
                                onSelf = true;
                                var call3187 = callmethodChecked(this, "cases", [0]);
                                var block3188 = new GraceBlock(this, 484, 1);
                                setLineNumber(1);    // compilenode identifier
                                block3188.real = function(var_mx) {
                                  setLineNumber(485);    // compilenode identifier
                                  var call3189 = callmethodChecked(var_mx, "accept()from", [1, 1], var_visitor, var_newChain);
                                  return call3189;
                                };
                                var call3190 = callmethodChecked(var_prelude, "for()do", [1, 1], call3187, block3188);
                                var if3191 = GraceDone;
                                setLineNumber(487);    // compilenode call
                                onSelf = true;
                                var call3192 = callmethodChecked(this, "elsecase", [0]);
                                var opresult3195 = callmethodChecked(GraceFalse, "\u2260", [1], call3192);
                                if (Grace_isTrue(opresult3195)) {
                                  setLineNumber(488);    // compilenode call
                                  onSelf = true;
                                  var call3196 = callmethodChecked(this, "elsecase", [0]);
                                  var call3197 = callmethodChecked(call3196, "accept()from", [1, 1], var_visitor, var_newChain);
                                  if3191 = call3197;
                                }
                                if3182 = if3191;
                              }
                              return if3182;
                            };
                            func3181.paramTypes = [];
                            func3181.paramTypes.push([]);
                            func3181.paramTypes.push([]);
                            func3181.paramCounts = [1, 1];
                            obj3176.methods["accept()from"] = func3181;
                            func3181.definitionLine = 480;
                            func3181.definitionModule = "ast";
                            var func3198 = function(argcv) {    // method map(1)ancestors(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_blk = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                              var var_as = arguments[curarg];
                              curarg++;
                              if (argcv[1] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                              setModuleName("ast");
                              setLineNumber(493);    // compilenode call
                              onSelf = true;
                              var call3199 = callmethodChecked(this, "shallowCopy", [0]);
                              var var_n = call3199;
                              setLineNumber(494);    // compilenode identifier
                              var call3200 = callmethodChecked(var_as, "extend", [1], var_n);
                              var var_newChain = call3200;
                              setLineNumber(495);    // compilenode call
                              onSelf = true;
                              var call3201 = callmethodChecked(this, "value", [0]);
                              var call3202 = callmethodChecked(call3201, "map()ancestors", [1, 1], var_blk, var_newChain);
                              var call3203 = callmethodChecked(var_n, "value:=", [1], call3202);
                              setLineNumber(496);    // compilenode call
                              onSelf = true;
                              var call3204 = callmethodChecked(this, "cases", [0]);
                              var call3205 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3206 = callmethodChecked(call3205, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3207 = callmethodChecked(call3206, "listMap()ancestors", [2, 1], call3204, var_blk, var_newChain);
                              var call3208 = callmethodChecked(var_n, "cases:=", [1], call3207);
                              setLineNumber(497);    // compilenode call
                              onSelf = true;
                              var call3209 = callmethodChecked(this, "elsecase", [0]);
                              var call3210 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3211 = callmethodChecked(call3210, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3212 = callmethodChecked(call3211, "maybeMap()ancestors", [2, 1], call3209, var_blk, var_newChain);
                              var call3213 = callmethodChecked(var_n, "elsecase:=", [1], call3212);
                              setLineNumber(498);    // compilenode identifier
                              var call3214 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                              return call3214;
                            };
                            func3198.paramCounts = [1, 1];
                            obj3176.methods["map()ancestors"] = func3198;
                            func3198.definitionLine = 492;
                            func3198.definitionModule = "ast";
                            var func3215 = function(argcv) {    // method pretty(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_depth = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                              setModuleName("ast");
                              setLineNumber(501);    // compilenode string
                              var string3216 = new GraceString("");
                              var var_spc = string3216;
                              setLineNumber(502);    // compilenode num
                              var opresult3219 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                              var block3220 = new GraceBlock(this, 502, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3220.real = function(var_i) {
                                setLineNumber(503);    // compilenode string
                                var string3221 = new GraceString("  ");
                                var opresult3224 = callmethodChecked(var_spc, "++", [1], string3221);
                                var_spc = opresult3224;
                                return GraceDone;
                              };
                              var call3225 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult3219, block3220);
                              setLineNumber(505);    // compilenode string
                              var string3226 = new GraceString("\n");
                              var call3228 = callmethodsuper(this, "pretty", [1], var_depth);
                              var opresult3230 = callmethodChecked(call3228, "++", [1], string3226);
                              var var_s = opresult3230;
                              setLineNumber(506);    // compilenode identifier
                              var opresult3233 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                              onSelf = true;
                              var call3234 = callmethodChecked(this, "matchee", [0]);
                              var call3235 = callmethodChecked(call3234, "pretty", [1], opresult3233);
                              var opresult3239 = callmethodChecked(var_s, "++", [1], var_spc);
                              var opresult3241 = callmethodChecked(opresult3239, "++", [1], call3235);
                              var_s = opresult3241;
                              setLineNumber(507);    // compilenode call
                              onSelf = true;
                              var call3242 = callmethodChecked(this, "cases", [0]);
                              var block3243 = new GraceBlock(this, 507, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3243.real = function(var_mx) {
                                setLineNumber(508);    // compilenode string
                                var string3244 = new GraceString("");
                                var opresult3248 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                var call3249 = callmethodChecked(var_mx, "pretty", [1], opresult3248);
                                var string3251 = new GraceString("  ");
                                var string3254 = new GraceString("Case:\n");
                                var string3257 = new GraceString("\n");
                                var opresult3259 = callmethodChecked(string3257, "++", [1], var_spc);
                                var opresult3261 = callmethodChecked(opresult3259, "++", [1], string3254);
                                var opresult3263 = callmethodChecked(opresult3261, "++", [1], var_spc);
                                var opresult3265 = callmethodChecked(opresult3263, "++", [1], string3251);
                                var opresult3267 = callmethodChecked(opresult3265, "++", [1], call3249);
                                var opresult3269 = callmethodChecked(opresult3267, "++", [1], string3244);
                                var opresult3272 = callmethodChecked(var_s, "++", [1], opresult3269);
                                var_s = opresult3272;
                                return GraceDone;
                              };
                              var call3273 = callmethodChecked(var_prelude, "for()do", [1, 1], call3242, block3243);
                              var if3274 = GraceDone;
                              setLineNumber(510);    // compilenode call
                              onSelf = true;
                              var call3275 = callmethodChecked(this, "elsecase", [0]);
                              var opresult3278 = callmethodChecked(GraceFalse, "\u2260", [1], call3275);
                              if (Grace_isTrue(opresult3278)) {
                                setLineNumber(511);    // compilenode string
                                var string3279 = new GraceString("");
                                var opresult3283 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                onSelf = true;
                                var call3284 = callmethodChecked(this, "elsecase", [0]);
                                var call3285 = callmethodChecked(call3284, "pretty", [1], opresult3283);
                                var string3287 = new GraceString("  ");
                                var string3290 = new GraceString("Else:\n");
                                var string3293 = new GraceString("\n");
                                var opresult3295 = callmethodChecked(string3293, "++", [1], var_spc);
                                var opresult3297 = callmethodChecked(opresult3295, "++", [1], string3290);
                                var opresult3299 = callmethodChecked(opresult3297, "++", [1], var_spc);
                                var opresult3301 = callmethodChecked(opresult3299, "++", [1], string3287);
                                var opresult3303 = callmethodChecked(opresult3301, "++", [1], call3285);
                                var opresult3305 = callmethodChecked(opresult3303, "++", [1], string3279);
                                var opresult3308 = callmethodChecked(var_s, "++", [1], opresult3305);
                                var_s = opresult3308;
                                if3274 = GraceDone;
                              }
                              setLineNumber(513);    // compilenode identifier
                              return var_s;
                            };
                            func3215.paramCounts = [1];
                            obj3176.methods["pretty"] = func3215;
                            func3215.definitionLine = 500;
                            func3215.definitionModule = "ast";
                            var func3309 = function(argcv) {    // method toGrace(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_depth = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                              // Start argument checking
                              curarg = 1;
                              setLineNumber(515);    // compilenode identifier
                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                          callmethod(var_Number, "asString", [0])._value + "."));
                              curarg++;
                              // End argument checking
                              setModuleName("ast");
                              setLineNumber(516);    // compilenode string
                              var string3310 = new GraceString("");
                              var var_spc = string3310;
                              setLineNumber(517);    // compilenode identifier
                              var diff3313 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                              var opresult3316 = callmethodChecked(new GraceNum(0), "..", [1], diff3313);
                              var block3317 = new GraceBlock(this, 517, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3317.real = function(var_i) {
                                setLineNumber(518);    // compilenode string
                                var string3318 = new GraceString("    ");
                                var opresult3321 = callmethodChecked(var_spc, "++", [1], string3318);
                                var_spc = opresult3321;
                                return GraceDone;
                              };
                              var call3322 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult3316, block3317);
                              setLineNumber(520);    // compilenode string
                              var string3323 = new GraceString(")");
                              onSelf = true;
                              var call3325 = callmethodChecked(this, "value", [0]);
                              var call3326 = callmethodChecked(call3325, "toGrace", [1], new GraceNum(0));
                              var string3328 = new GraceString("match(");
                              var opresult3330 = callmethodChecked(string3328, "++", [1], call3326);
                              var opresult3332 = callmethodChecked(opresult3330, "++", [1], string3323);
                              var var_s = opresult3332;
                              setLineNumber(521);    // compilenode call
                              onSelf = true;
                              var call3333 = callmethodChecked(this, "cases", [0]);
                              var block3334 = new GraceBlock(this, 521, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3334.real = function(var_case) {
                                setLineNumber(522);    // compilenode identifier
                                var opresult3337 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                var call3338 = callmethodChecked(var_case, "toGrace", [1], opresult3337);
                                var string3340 = new GraceString("case ");
                                var string3342 = new GraceString("    ");
                                var string3345 = new GraceString("\n");
                                var opresult3348 = callmethodChecked(var_s, "++", [1], string3345);
                                var opresult3350 = callmethodChecked(opresult3348, "++", [1], var_spc);
                                var opresult3352 = callmethodChecked(opresult3350, "++", [1], string3342);
                                var opresult3354 = callmethodChecked(opresult3352, "++", [1], string3340);
                                var opresult3356 = callmethodChecked(opresult3354, "++", [1], call3338);
                                var_s = opresult3356;
                                return GraceDone;
                              };
                              var call3357 = callmethodChecked(var_prelude, "for()do", [1, 1], call3333, block3334);
                              var if3358 = GraceDone;
                              setLineNumber(524);    // compilenode call
                              onSelf = true;
                              var call3359 = callmethodChecked(this, "elsecase", [0]);
                              var opresult3362 = callmethodChecked(GraceFalse, "\u2260", [1], call3359);
                              if (Grace_isTrue(opresult3362)) {
                                setLineNumber(525);    // compilenode identifier
                                var opresult3365 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                onSelf = true;
                                var call3366 = callmethodChecked(this, "elsecase", [0]);
                                var call3367 = callmethodChecked(call3366, "toGrace", [1], opresult3365);
                                var string3369 = new GraceString("else ");
                                var string3371 = new GraceString("    ");
                                var string3374 = new GraceString("\n");
                                var opresult3377 = callmethodChecked(var_s, "++", [1], string3374);
                                var opresult3379 = callmethodChecked(opresult3377, "++", [1], var_spc);
                                var opresult3381 = callmethodChecked(opresult3379, "++", [1], string3371);
                                var opresult3383 = callmethodChecked(opresult3381, "++", [1], string3369);
                                var opresult3385 = callmethodChecked(opresult3383, "++", [1], call3367);
                                var_s = opresult3385;
                                if3358 = GraceDone;
                              }
                              setLineNumber(527);    // return value
                              if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("result of method toGrace(1) does not have " + 
                                          callmethod(var_String, "asString", [0])._value + "."));
                              return var_s;
                            };
                            func3309.paramTypes = [];
                            func3309.paramTypes.push([type_Number, "depth"]);
                            func3309.paramCounts = [1];
                            obj3176.methods["toGrace"] = func3309;
                            func3309.definitionLine = 515;
                            func3309.definitionModule = "ast";
                            var func3386 = function(argcv) {    // method shallowCopy
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                              setModuleName("ast");
                              setLineNumber(530);    // compilenode identifier
                              var call3387 = callmethodChecked(var_matchCaseNode, "new", [3], var_nullNode, var_emptySeq, GraceFalse);
                              var call3388 = callmethodChecked(call3387, "shallowCopyFieldsFrom", [1], this);
                              return call3388;
                            };
                            func3386.paramCounts = [0];
                            obj3176.methods["shallowCopy"] = func3386;
                            func3386.definitionLine = 529;
                            func3386.definitionModule = "ast";
                            setLineNumber(473);    // compilenode call
                            var call3389 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call3390 = callmethodChecked(call3389, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call3391 = callmethodChecked(call3390, "baseNode()object", [0, 1], this);
                            obj3176.superobj = call3391;
                            if (call3391.data) obj3176.data = call3391.data;
                            if (call3391.hasOwnProperty('_value'))
                                obj3176._value = call3391._value;
                            setLineNumber(474);    // compilenode string
                            var string3392 = new GraceString("matchcase");
                            obj3176.data["kind"] = string3392;
                            var reader_ast_kind3393 = function() {
                              return this.data["kind"];
                            };
                            reader_ast_kind3393.def = true;
                            obj3176.methods["kind"] = reader_ast_kind3393;
                            setLineNumber(475);    // compilenode identifier
                            obj3176.data["value"] = var_matchee__39__;
                            var reader_ast_value3394 = function() {
                              return this.data["value"];
                            };
                            obj3176.methods["value"] = reader_ast_value3394;
                            obj3176.data["value"] = var_matchee__39__;
                            var writer_ast_value3394 = function(argcv, o) {
                              this.data["value"] = o;
                              return GraceDone;
                            };
                            obj3176.methods["value:="] = writer_ast_value3394;
                            obj3176.mutable = true;
                            setLineNumber(476);    // compilenode identifier
                            obj3176.data["cases"] = var_cases__39__;
                            var reader_ast_cases3395 = function() {
                              return this.data["cases"];
                            };
                            obj3176.methods["cases"] = reader_ast_cases3395;
                            obj3176.data["cases"] = var_cases__39__;
                            var writer_ast_cases3395 = function(argcv, o) {
                              this.data["cases"] = o;
                              return GraceDone;
                            };
                            obj3176.methods["cases:="] = writer_ast_cases3395;
                            obj3176.mutable = true;
                            setLineNumber(477);    // compilenode identifier
                            obj3176.data["elsecase"] = var_elsecase__39__;
                            var reader_ast_elsecase3396 = function() {
                              return this.data["elsecase"];
                            };
                            obj3176.methods["elsecase"] = reader_ast_elsecase3396;
                            obj3176.data["elsecase"] = var_elsecase__39__;
                            var writer_ast_elsecase3396 = function(argcv, o) {
                              this.data["elsecase"] = o;
                              return GraceDone;
                            };
                            obj3176.methods["elsecase:="] = writer_ast_elsecase3396;
                            obj3176.mutable = true;
                            superDepth = origSuperDepth;
                          };
                          obj_init_3176.apply(inheritingObject, []);
                          return obj3176;
                          };
                          obj2951.methods["new()object"] = func3175;
                        superDepth = origSuperDepth;
                      };
                      obj_init_2951.apply(obj2951, []);
                      var var_matchCaseNode = obj2951;
                      setLineNumber(473);    // compilenode method
                      var func3397 = function(argcv) {    // method matchCaseNode
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for matchCaseNode"));
                        setModuleName("ast");
                        // matchCaseNode is a simple accessor - elide try ... catch
                        setLineNumber(471);    // compilenode identifier
                        return var_matchCaseNode;
                      };
                      func3397.paramCounts = [0];
                      this.methods["matchCaseNode"] = func3397;
                      func3397.definitionLine = 473;
                      func3397.definitionModule = "ast";
                      this.methods["matchCaseNode"].debug = "def";
                      setLineNumber(534);    // compilenode object
                      var obj3398 = Grace_allocObject(GraceObject, "methodTypeNode");
                      obj3398.definitionModule = "ast";
                      obj3398.definitionLine = 534;
                      obj3398.outer = this;
                      var reader_ast_outer3399 = function() {
                        return this.outer;
                      };
                      obj3398.methods["outer"] = reader_ast_outer3399;
                      var obj_init_3398 = function() {
                        var origSuperDepth = superDepth;
                        superDepth = obj3398;
                        var func3400 = function(argcv) {    // method new(3)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_name__39__ = arguments[curarg];
                          curarg++;
                          var var_signature__39__ = arguments[curarg];
                          curarg++;
                          var var_rtype__39__ = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 3)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(3)"));
                          setModuleName("ast");
                          setLineNumber(535);    // compilenode object
                          var obj3401 = Grace_allocObject(null, "methodTypeNode.new");
                          obj3401.definitionModule = "ast";
                          obj3401.definitionLine = 535;
                          obj3401.outer = this;
                          var reader_ast_outer3402 = function() {
                            return this.outer;
                          };
                          obj3401.methods["outer"] = reader_ast_outer3402;
                          var obj_init_3401 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj3401;
                            var func3403 = function(argcv) {    // method isExecutable
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                              setModuleName("ast");
                              // isExecutable is a simple accessor - elide try ... catch
                              setLineNumber(547);    // compilenode identifier
                              return GraceFalse;
                            };
                            func3403.paramCounts = [0];
                            obj3401.methods["isExecutable"] = func3403;
                            func3403.definitionLine = 547;
                            func3403.definitionModule = "ast";
                            var func3404 = function(argcv) {    // method parametersDo(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_b = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parametersDo(1)"));
                              setModuleName("ast");
                              setLineNumber(549);    // compilenode block
                              var block3405 = new GraceBlock(this, 549, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3405.real = function(var_part) {
                                setLineNumber(550);    // compilenode block
                                var block3406 = new GraceBlock(this, 550, 1);
                                setLineNumber(1);    // compilenode identifier
                                block3406.real = function(var_each) {
                                  setLineNumber(550);    // compilenode identifier
                                  var call3407 = callmethodChecked(var_b, "apply", [1], var_each);
                                  return call3407;
                                };
                                var call3408 = callmethodChecked(var_part, "params", [0]);
                                var call3409 = callmethodChecked(call3408, "do", [1], block3406);
                                return call3409;
                              };
                              setLineNumber(549);    // compilenode call
                              onSelf = true;
                              var call3410 = callmethodChecked(this, "signature", [0]);
                              var call3411 = callmethodChecked(call3410, "do", [1], block3405);
                              return call3411;
                            };
                            func3404.paramCounts = [1];
                            obj3401.methods["parametersDo"] = func3404;
                            func3404.definitionLine = 548;
                            func3404.definitionModule = "ast";
                            var func3412 = function(argcv) {    // method scope:=(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_st = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
                              setModuleName("ast");
                              setLineNumber(556);    // compilenode identifier
                              onSelf = true;
                              var call3413 = callmethodChecked(this, "symbolTable:=", [1], var_st);
                              setLineNumber(557);    // compilenode identifier
                              var call3414 = callmethodChecked(var_st, "node:=", [1], this);
                              return call3414;
                            };
                            func3412.paramCounts = [1];
                            obj3401.methods["scope:="] = func3412;
                            func3412.definitionLine = 553;
                            func3412.definitionModule = "ast";
                            var func3415 = function(argcv) {    // method declarationKindWithAncestors(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_as = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                              setModuleName("ast");
                              setLineNumber(559);    // compilenode identifier
                              var call3416 = callmethodChecked(var_k, "typedec", [0]);
                              return call3416;
                            };
                            func3415.paramCounts = [1];
                            obj3401.methods["declarationKindWithAncestors"] = func3415;
                            func3415.definitionLine = 559;
                            func3415.definitionModule = "ast";
                            var func3417 = function(argcv) {    // method accept(1)from(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_visitor = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                              var var_as = arguments[curarg];
                              curarg++;
                              if (argcv[1] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                              // Start argument checking
                              curarg = 1;
                              setLineNumber(560);    // compilenode identifier
                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                              curarg++;
                              curarg++;
                              // End argument checking
                              setModuleName("ast");
                              var if3418 = GraceDone;
                              setLineNumber(561);    // compilenode identifier
                              var call3419 = callmethodChecked(var_visitor, "visitMethodType()up", [1, 1], this, var_as);
                              if (Grace_isTrue(call3419)) {
                                setLineNumber(562);    // compilenode identifier
                                var call3420 = callmethodChecked(var_as, "extend", [1], this);
                                var var_newChain = call3420;
                                var if3421 = GraceDone;
                                setLineNumber(563);    // compilenode call
                                onSelf = true;
                                var call3422 = callmethodChecked(this, "typeParams", [0]);
                                var opresult3425 = callmethodChecked(GraceFalse, "\u2260", [1], call3422);
                                if (Grace_isTrue(opresult3425)) {
                                  setLineNumber(564);    // compilenode call
                                  onSelf = true;
                                  var call3426 = callmethodChecked(this, "typeParams", [0]);
                                  var call3427 = callmethodChecked(call3426, "accept()from", [1, 1], var_visitor, var_newChain);
                                  if3421 = call3427;
                                }
                                var if3428 = GraceDone;
                                setLineNumber(566);    // compilenode call
                                onSelf = true;
                                var call3429 = callmethodChecked(this, "rtype", [0]);
                                var opresult3432 = callmethodChecked(GraceFalse, "\u2260", [1], call3429);
                                if (Grace_isTrue(opresult3432)) {
                                  setLineNumber(567);    // compilenode call
                                  onSelf = true;
                                  var call3433 = callmethodChecked(this, "rtype", [0]);
                                  var call3434 = callmethodChecked(call3433, "accept()from", [1, 1], var_visitor, var_newChain);
                                  if3428 = call3434;
                                }
                                setLineNumber(569);    // compilenode call
                                onSelf = true;
                                var call3435 = callmethodChecked(this, "signature", [0]);
                                var block3436 = new GraceBlock(this, 569, 1);
                                setLineNumber(1);    // compilenode identifier
                                block3436.real = function(var_part) {
                                  setLineNumber(570);    // compilenode identifier
                                  var call3437 = callmethodChecked(var_part, "accept()from", [1, 1], var_visitor, var_newChain);
                                  return call3437;
                                };
                                var call3438 = callmethodChecked(var_prelude, "for()do", [1, 1], call3435, block3436);
                                if3418 = call3438;
                              }
                              return if3418;
                            };
                            func3417.paramTypes = [];
                            func3417.paramTypes.push([]);
                            func3417.paramTypes.push([]);
                            func3417.paramCounts = [1, 1];
                            obj3401.methods["accept()from"] = func3417;
                            func3417.definitionLine = 560;
                            func3417.definitionModule = "ast";
                            var func3439 = function(argcv) {    // method map(1)ancestors(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_blk = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                              var var_as = arguments[curarg];
                              curarg++;
                              if (argcv[1] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                              setModuleName("ast");
                              setLineNumber(575);    // compilenode call
                              onSelf = true;
                              var call3440 = callmethodChecked(this, "shallowCopy", [0]);
                              var var_n = call3440;
                              setLineNumber(576);    // compilenode identifier
                              var call3441 = callmethodChecked(var_as, "extend", [1], var_n);
                              var var_newChain = call3441;
                              setLineNumber(577);    // compilenode call
                              onSelf = true;
                              var call3442 = callmethodChecked(this, "rtype", [0]);
                              var call3443 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3444 = callmethodChecked(call3443, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3445 = callmethodChecked(call3444, "maybeMap()ancestors", [2, 1], call3442, var_blk, var_newChain);
                              var call3446 = callmethodChecked(var_n, "rtype:=", [1], call3445);
                              setLineNumber(578);    // compilenode call
                              onSelf = true;
                              var call3447 = callmethodChecked(this, "signature", [0]);
                              var call3448 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3449 = callmethodChecked(call3448, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3450 = callmethodChecked(call3449, "listMap()ancestors", [2, 1], call3447, var_blk, var_newChain);
                              var call3451 = callmethodChecked(var_n, "signature:=", [1], call3450);
                              setLineNumber(579);    // compilenode call
                              onSelf = true;
                              var call3452 = callmethodChecked(this, "typeParams", [0]);
                              var call3453 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3454 = callmethodChecked(call3453, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3455 = callmethodChecked(call3454, "maybeMap()ancestors", [2, 1], call3452, var_blk, var_newChain);
                              var call3456 = callmethodChecked(var_n, "typeParams:=", [1], call3455);
                              setLineNumber(580);    // compilenode identifier
                              var call3457 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                              return call3457;
                            };
                            func3439.paramCounts = [1, 1];
                            obj3401.methods["map()ancestors"] = func3439;
                            func3439.definitionLine = 574;
                            func3439.definitionModule = "ast";
                            var func3458 = function(argcv) {    // method pretty(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_depth = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                              setModuleName("ast");
                              setLineNumber(583);    // compilenode string
                              var string3459 = new GraceString("");
                              var var_spc = string3459;
                              setLineNumber(584);    // compilenode num
                              var opresult3462 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                              var block3463 = new GraceBlock(this, 584, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3463.real = function(var_i) {
                                setLineNumber(585);    // compilenode string
                                var string3464 = new GraceString("  ");
                                var opresult3467 = callmethodChecked(var_spc, "++", [1], string3464);
                                var_spc = opresult3467;
                                return GraceDone;
                              };
                              var call3468 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult3462, block3463);
                              setLineNumber(587);    // compilenode string
                              var string3469 = new GraceString("\n");
                              var call3471 = callmethodsuper(this, "pretty", [1], var_depth);
                              var opresult3473 = callmethodChecked(call3471, "++", [1], string3469);
                              var var_s = opresult3473;
                              setLineNumber(588);    // compilenode string
                              var string3474 = new GraceString("\n");
                              onSelf = true;
                              var call3476 = callmethodChecked(this, "value", [0]);
                              var string3478 = new GraceString("Name: ");
                              var string3481 = new GraceString("");
                              var string3484 = new GraceString("");
                              var opresult3486 = callmethodChecked(string3484, "++", [1], var_s);
                              var opresult3488 = callmethodChecked(opresult3486, "++", [1], string3481);
                              var opresult3490 = callmethodChecked(opresult3488, "++", [1], var_spc);
                              var opresult3492 = callmethodChecked(opresult3490, "++", [1], string3478);
                              var opresult3494 = callmethodChecked(opresult3492, "++", [1], call3476);
                              var opresult3496 = callmethodChecked(opresult3494, "++", [1], string3474);
                              var_s = opresult3496;
                              var if3497 = GraceDone;
                              setLineNumber(589);    // compilenode call
                              onSelf = true;
                              var call3498 = callmethodChecked(this, "rtype", [0]);
                              var opresult3501 = callmethodChecked(GraceFalse, "\u2260", [1], call3498);
                              if (Grace_isTrue(opresult3501)) {
                                setLineNumber(590);    // compilenode string
                                var string3502 = new GraceString("");
                                var opresult3506 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                onSelf = true;
                                var call3507 = callmethodChecked(this, "rtype", [0]);
                                var call3508 = callmethodChecked(call3507, "pretty", [1], opresult3506);
                                var string3510 = new GraceString("");
                                var string3513 = new GraceString("Returns:\n  ");
                                var string3516 = new GraceString("");
                                var string3519 = new GraceString("");
                                var opresult3521 = callmethodChecked(string3519, "++", [1], var_s);
                                var opresult3523 = callmethodChecked(opresult3521, "++", [1], string3516);
                                var opresult3525 = callmethodChecked(opresult3523, "++", [1], var_spc);
                                var opresult3527 = callmethodChecked(opresult3525, "++", [1], string3513);
                                var opresult3529 = callmethodChecked(opresult3527, "++", [1], var_spc);
                                var opresult3531 = callmethodChecked(opresult3529, "++", [1], string3510);
                                var opresult3533 = callmethodChecked(opresult3531, "++", [1], call3508);
                                var opresult3535 = callmethodChecked(opresult3533, "++", [1], string3502);
                                var_s = opresult3535;
                                if3497 = GraceDone;
                              }
                              var if3536 = GraceDone;
                              setLineNumber(592);    // compilenode call
                              onSelf = true;
                              var call3537 = callmethodChecked(this, "typeParams", [0]);
                              var opresult3540 = callmethodChecked(GraceFalse, "\u2260", [1], call3537);
                              if (Grace_isTrue(opresult3540)) {
                                setLineNumber(593);    // compilenode string
                                var string3541 = new GraceString("TypeParams:\n");
                                var string3544 = new GraceString("\n");
                                var string3547 = new GraceString("");
                                var opresult3549 = callmethodChecked(string3547, "++", [1], var_s);
                                var opresult3551 = callmethodChecked(opresult3549, "++", [1], string3544);
                                var opresult3553 = callmethodChecked(opresult3551, "++", [1], var_spc);
                                var opresult3555 = callmethodChecked(opresult3553, "++", [1], string3541);
                                var_s = opresult3555;
                                setLineNumber(594);    // compilenode identifier
                                var opresult3558 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                onSelf = true;
                                var call3559 = callmethodChecked(this, "typeParams", [0]);
                                var call3560 = callmethodChecked(call3559, "pretty", [1], opresult3558);
                                var opresult3563 = callmethodChecked(var_s, "++", [1], call3560);
                                var_s = opresult3563;
                                if3536 = GraceDone;
                              }
                              setLineNumber(596);    // compilenode string
                              var string3564 = new GraceString("Signature:");
                              var string3567 = new GraceString("\n");
                              var string3570 = new GraceString("");
                              var opresult3572 = callmethodChecked(string3570, "++", [1], var_s);
                              var opresult3574 = callmethodChecked(opresult3572, "++", [1], string3567);
                              var opresult3576 = callmethodChecked(opresult3574, "++", [1], var_spc);
                              var opresult3578 = callmethodChecked(opresult3576, "++", [1], string3564);
                              var_s = opresult3578;
                              setLineNumber(597);    // compilenode call
                              onSelf = true;
                              var call3579 = callmethodChecked(this, "signature", [0]);
                              var block3580 = new GraceBlock(this, 597, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3580.real = function(var_part) {
                                setLineNumber(598);    // compilenode string
                                var string3581 = new GraceString("");
                                var opresult3585 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                var call3586 = callmethodChecked(var_part, "pretty", [1], opresult3585);
                                var string3588 = new GraceString("");
                                var string3591 = new GraceString("\n  ");
                                var string3594 = new GraceString("");
                                var opresult3596 = callmethodChecked(string3594, "++", [1], var_s);
                                var opresult3598 = callmethodChecked(opresult3596, "++", [1], string3591);
                                var opresult3600 = callmethodChecked(opresult3598, "++", [1], var_spc);
                                var opresult3602 = callmethodChecked(opresult3600, "++", [1], string3588);
                                var opresult3604 = callmethodChecked(opresult3602, "++", [1], call3586);
                                var opresult3606 = callmethodChecked(opresult3604, "++", [1], string3581);
                                var_s = opresult3606;
                                return GraceDone;
                              };
                              var call3607 = callmethodChecked(var_prelude, "for()do", [1, 1], call3579, block3580);
                              setLineNumber(600);    // compilenode identifier
                              return var_s;
                            };
                            func3458.paramCounts = [1];
                            obj3401.methods["pretty"] = func3458;
                            func3458.definitionLine = 582;
                            func3458.definitionModule = "ast";
                            var func3608 = function(argcv) {    // method toGrace(1)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_depth = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 1)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                              // Start argument checking
                              curarg = 1;
                              setLineNumber(602);    // compilenode identifier
                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                          callmethod(var_Number, "asString", [0])._value + "."));
                              curarg++;
                              // End argument checking
                              setModuleName("ast");
                              setLineNumber(603);    // compilenode string
                              var string3609 = new GraceString("");
                              var var_s = string3609;
                              setLineNumber(604);    // compilenode identifier
                              var var_firstPart = GraceTrue;
                              setLineNumber(605);    // compilenode call
                              onSelf = true;
                              var call3610 = callmethodChecked(this, "signature", [0]);
                              var block3611 = new GraceBlock(this, 605, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3611.real = function(var_part) {
                                setLineNumber(606);    // compilenode identifier
                                var call3612 = callmethodChecked(var_part, "name", [0]);
                                var opresult3615 = callmethodChecked(var_s, "++", [1], call3612);
                                var_s = opresult3615;
                                var if3616 = GraceDone;
                                setLineNumber(607);    // compilenode identifier
                                if (Grace_isTrue(var_firstPart)) {
                                  setLineNumber(608);    // compilenode identifier
                                  var_firstPart = GraceFalse;
                                  var if3617 = GraceDone;
                                  setLineNumber(609);    // compilenode call
                                  onSelf = true;
                                  var call3618 = callmethodChecked(this, "typeParams", [0]);
                                  var opresult3621 = callmethodChecked(GraceFalse, "\u2260", [1], call3618);
                                  if (Grace_isTrue(opresult3621)) {
                                    setLineNumber(610);    // compilenode identifier
                                    var opresult3624 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                    onSelf = true;
                                    var call3625 = callmethodChecked(this, "typeParams", [0]);
                                    var call3626 = callmethodChecked(call3625, "toGrace", [1], opresult3624);
                                    if3617 = call3626;
                                  }
                                  if3616 = if3617;
                                }
                                var if3627 = GraceDone;
                                setLineNumber(613);    // compilenode identifier
                                var call3629 = callmethodChecked(var_part, "params", [0]);
                                var call3630 = callmethodChecked(call3629, "size", [0]);
                                var opresult3632 = callmethodChecked(call3630, ">", [1], new GraceNum(0));
                                if (Grace_isTrue(opresult3632)) {
                                  setLineNumber(614);    // compilenode string
                                  var string3633 = new GraceString("(");
                                  var opresult3636 = callmethodChecked(var_s, "++", [1], string3633);
                                  var_s = opresult3636;
                                  setLineNumber(615);    // compilenode identifier
                                  var call3637 = callmethodChecked(var_part, "params", [0]);
                                  var call3638 = callmethodChecked(call3637, "indices", [0]);
                                  var block3639 = new GraceBlock(this, 615, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block3639.real = function(var_pnr) {
                                    setLineNumber(616);    // compilenode identifier
                                    var call3640 = callmethodChecked(var_part, "params", [0]);
                                    var call3641 = callmethodChecked(call3640, "at", [1], var_pnr);
                                    var var_p = call3641;
                                    setLineNumber(617);    // compilenode identifier
                                    var opresult3644 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                    var call3645 = callmethodChecked(var_p, "toGrace", [1], opresult3644);
                                    var opresult3648 = callmethodChecked(var_s, "++", [1], call3645);
                                    var_s = opresult3648;
                                    var if3649 = GraceDone;
                                    setLineNumber(618);    // compilenode identifier
                                    var call3650 = callmethodChecked(var_part, "params", [0]);
                                    var call3651 = callmethodChecked(call3650, "size", [0]);
                                    var opresult3654 = callmethodChecked(var_pnr, "<", [1], call3651);
                                    if (Grace_isTrue(opresult3654)) {
                                      setLineNumber(619);    // compilenode string
                                      var string3655 = new GraceString(", ");
                                      var opresult3658 = callmethodChecked(var_s, "++", [1], string3655);
                                      var_s = opresult3658;
                                      if3649 = GraceDone;
                                    }
                                    return if3649;
                                  };
                                  var call3659 = callmethodChecked(var_prelude, "for()do", [1, 1], call3638, block3639);
                                  setLineNumber(622);    // compilenode string
                                  var string3660 = new GraceString(")");
                                  var opresult3663 = callmethodChecked(var_s, "++", [1], string3660);
                                  var_s = opresult3663;
                                  if3627 = GraceDone;
                                }
                                return if3627;
                              };
                              var call3664 = callmethodChecked(var_prelude, "for()do", [1, 1], call3610, block3611);
                              var if3665 = GraceDone;
                              setLineNumber(625);    // compilenode call
                              onSelf = true;
                              var call3666 = callmethodChecked(this, "rtype", [0]);
                              var opresult3669 = callmethodChecked(GraceFalse, "\u2260", [1], call3666);
                              if (Grace_isTrue(opresult3669)) {
                                setLineNumber(626);    // compilenode identifier
                                var opresult3672 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                onSelf = true;
                                var call3673 = callmethodChecked(this, "rtype", [0]);
                                var call3674 = callmethodChecked(call3673, "toGrace", [1], opresult3672);
                                var string3676 = new GraceString(" -> ");
                                var opresult3679 = callmethodChecked(var_s, "++", [1], string3676);
                                var opresult3681 = callmethodChecked(opresult3679, "++", [1], call3674);
                                var_s = opresult3681;
                                if3665 = GraceDone;
                              }
                              setLineNumber(628);    // return value
                              if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("result of method toGrace(1) does not have " + 
                                          callmethod(var_String, "asString", [0])._value + "."));
                              return var_s;
                            };
                            func3608.paramTypes = [];
                            func3608.paramTypes.push([type_Number, "depth"]);
                            func3608.paramCounts = [1];
                            obj3401.methods["toGrace"] = func3608;
                            func3608.definitionLine = 602;
                            func3608.definitionModule = "ast";
                            var func3682 = function(argcv) {    // method shallowCopy
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                              setModuleName("ast");
                              setLineNumber(631);    // compilenode call
                              onSelf = true;
                              var call3683 = callmethodChecked(this, "value", [0]);
                              var call3684 = callmethodChecked(var_methodTypeNode, "new", [3], call3683, var_emptySeq, GraceFalse);
                              var call3685 = callmethodChecked(call3684, "shallowCopyFieldsFrom", [1], this);
                              return call3685;
                            };
                            func3682.paramCounts = [0];
                            obj3401.methods["shallowCopy"] = func3682;
                            func3682.definitionLine = 630;
                            func3682.definitionModule = "ast";
                            setLineNumber(539);    // compilenode call
                            var call3686 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call3687 = callmethodChecked(call3686, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call3688 = callmethodChecked(call3687, "baseNode()object", [0, 1], this);
                            obj3401.superobj = call3688;
                            if (call3688.data) obj3401.data = call3688.data;
                            if (call3688.hasOwnProperty('_value'))
                                obj3401._value = call3688._value;
                            setLineNumber(540);    // compilenode string
                            var string3689 = new GraceString("methodtype");
                            obj3401.data["kind"] = string3689;
                            var reader_ast_kind3690 = function() {
                              return this.data["kind"];
                            };
                            reader_ast_kind3690.def = true;
                            obj3401.methods["kind"] = reader_ast_kind3690;
                            setLineNumber(541);    // compilenode identifier
                            obj3401.data["value"] = var_name__39__;
                            var reader_ast_value3691 = function() {
                              return this.data["value"];
                            };
                            obj3401.methods["value"] = reader_ast_value3691;
                            obj3401.data["value"] = var_name__39__;
                            var writer_ast_value3691 = function(argcv, o) {
                              this.data["value"] = o;
                              return GraceDone;
                            };
                            obj3401.methods["value:="] = writer_ast_value3691;
                            obj3401.mutable = true;
                            setLineNumber(542);    // compilenode identifier
                            obj3401.data["signature"] = var_signature__39__;
                            var reader_ast_signature3692 = function() {
                              return this.data["signature"];
                            };
                            obj3401.methods["signature"] = reader_ast_signature3692;
                            obj3401.data["signature"] = var_signature__39__;
                            var writer_ast_signature3692 = function(argcv, o) {
                              this.data["signature"] = o;
                              return GraceDone;
                            };
                            obj3401.methods["signature:="] = writer_ast_signature3692;
                            obj3401.mutable = true;
                            setLineNumber(543);    // compilenode identifier
                            obj3401.data["rtype"] = var_rtype__39__;
                            var reader_ast_rtype3693 = function() {
                              return this.data["rtype"];
                            };
                            obj3401.methods["rtype"] = reader_ast_rtype3693;
                            obj3401.data["rtype"] = var_rtype__39__;
                            var writer_ast_rtype3693 = function(argcv, o) {
                              this.data["rtype"] = o;
                              return GraceDone;
                            };
                            obj3401.methods["rtype:="] = writer_ast_rtype3693;
                            obj3401.mutable = true;
                            setLineNumber(544);    // compilenode identifier
                            obj3401.data["typeParams"] = GraceFalse;
                            var reader_ast_typeParams3694 = function() {
                              return this.data["typeParams"];
                            };
                            obj3401.methods["typeParams"] = reader_ast_typeParams3694;
                            obj3401.data["typeParams"] = GraceFalse;
                            var writer_ast_typeParams3694 = function(argcv, o) {
                              this.data["typeParams"] = o;
                              return GraceDone;
                            };
                            obj3401.methods["typeParams:="] = writer_ast_typeParams3694;
                            obj3401.mutable = true;
                            setLineNumber(545);    // compilenode call
                            onSelf = true;
                            var call3695 = callmethodChecked(this, "value", [0]);
                            obj3401.data["nameString"] = call3695;
                            var reader_ast_nameString3696 = function() {
                              return this.data["nameString"];
                            };
                            reader_ast_nameString3696.def = true;
                            obj3401.methods["nameString"] = reader_ast_nameString3696;
                            if (!Grace_isTrue(callmethod(var_String, "match", [1], call3695)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("value of def 'nameString' is not of type String"));
                            superDepth = origSuperDepth;
                          };
                          obj_init_3401.apply(obj3401, []);
                          return obj3401;
                        };
                        func3400.paramCounts = [3];
                        obj3398.methods["new"] = func3400;
                        func3400.definitionLine = 535;
                        func3400.definitionModule = "ast";
                          var func3697 = function(argcv) {    // method new(3     )()object
                            var curarg = 1;
                            var var_name__39__ = arguments[curarg];
                            curarg++;
                            var var_signature__39__ = arguments[curarg];
                            curarg++;
                            var var_rtype__39__ = arguments[curarg];
                            curarg++;
                            var inheritingObject = arguments[curarg++];
                            // Start argument processing
                            curarg = 1;
                            curarg++;
                            curarg++;
                            curarg++;
                            // End argument processing
                            setModuleName("ast");
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var obj3698 = Grace_allocObject(null, "new");
                            obj3698.definitionModule = "ast";
                            obj3698.definitionLine = 535;
                            var inho3698 = inheritingObject;
                            while (inho3698.superobj) inho3698 = inho3698.superobj;
                            inho3698.superobj = obj3698;
                            obj3698.data = inheritingObject.data;
                            if (inheritingObject.hasOwnProperty('_value'))
                              obj3698._value = inheritingObject._value;
                            obj3698.outer = this;
                            var reader_ast_outer3699 = function() {
                              return this.outer;
                            };
                            obj3698.methods["outer"] = reader_ast_outer3699;
                            var obj_init_3698 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj3698;
                              var func3700 = function(argcv) {    // method isExecutable
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                setModuleName("ast");
                                // isExecutable is a simple accessor - elide try ... catch
                                setLineNumber(547);    // compilenode identifier
                                return GraceFalse;
                              };
                              func3700.paramCounts = [0];
                              obj3698.methods["isExecutable"] = func3700;
                              func3700.definitionLine = 547;
                              func3700.definitionModule = "ast";
                              var func3701 = function(argcv) {    // method parametersDo(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_b = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parametersDo(1)"));
                                setModuleName("ast");
                                setLineNumber(549);    // compilenode block
                                var block3702 = new GraceBlock(this, 549, 1);
                                setLineNumber(1);    // compilenode identifier
                                block3702.real = function(var_part) {
                                  setLineNumber(550);    // compilenode block
                                  var block3703 = new GraceBlock(this, 550, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block3703.real = function(var_each) {
                                    setLineNumber(550);    // compilenode identifier
                                    var call3704 = callmethodChecked(var_b, "apply", [1], var_each);
                                    return call3704;
                                  };
                                  var call3705 = callmethodChecked(var_part, "params", [0]);
                                  var call3706 = callmethodChecked(call3705, "do", [1], block3703);
                                  return call3706;
                                };
                                setLineNumber(549);    // compilenode call
                                onSelf = true;
                                var call3707 = callmethodChecked(this, "signature", [0]);
                                var call3708 = callmethodChecked(call3707, "do", [1], block3702);
                                return call3708;
                              };
                              func3701.paramCounts = [1];
                              obj3698.methods["parametersDo"] = func3701;
                              func3701.definitionLine = 548;
                              func3701.definitionModule = "ast";
                              var func3709 = function(argcv) {    // method scope:=(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_st = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
                                setModuleName("ast");
                                setLineNumber(556);    // compilenode identifier
                                onSelf = true;
                                var call3710 = callmethodChecked(this, "symbolTable:=", [1], var_st);
                                setLineNumber(557);    // compilenode identifier
                                var call3711 = callmethodChecked(var_st, "node:=", [1], this);
                                return call3711;
                              };
                              func3709.paramCounts = [1];
                              obj3698.methods["scope:="] = func3709;
                              func3709.definitionLine = 553;
                              func3709.definitionModule = "ast";
                              var func3712 = function(argcv) {    // method declarationKindWithAncestors(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_as = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                setModuleName("ast");
                                setLineNumber(559);    // compilenode identifier
                                var call3713 = callmethodChecked(var_k, "typedec", [0]);
                                return call3713;
                              };
                              func3712.paramCounts = [1];
                              obj3698.methods["declarationKindWithAncestors"] = func3712;
                              func3712.definitionLine = 559;
                              func3712.definitionModule = "ast";
                              var func3714 = function(argcv) {    // method accept(1)from(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_visitor = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                var var_as = arguments[curarg];
                                curarg++;
                                if (argcv[1] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(560);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                curarg++;
                                curarg++;
                                // End argument checking
                                setModuleName("ast");
                                var if3715 = GraceDone;
                                setLineNumber(561);    // compilenode identifier
                                var call3716 = callmethodChecked(var_visitor, "visitMethodType()up", [1, 1], this, var_as);
                                if (Grace_isTrue(call3716)) {
                                  setLineNumber(562);    // compilenode identifier
                                  var call3717 = callmethodChecked(var_as, "extend", [1], this);
                                  var var_newChain = call3717;
                                  var if3718 = GraceDone;
                                  setLineNumber(563);    // compilenode call
                                  onSelf = true;
                                  var call3719 = callmethodChecked(this, "typeParams", [0]);
                                  var opresult3722 = callmethodChecked(GraceFalse, "\u2260", [1], call3719);
                                  if (Grace_isTrue(opresult3722)) {
                                    setLineNumber(564);    // compilenode call
                                    onSelf = true;
                                    var call3723 = callmethodChecked(this, "typeParams", [0]);
                                    var call3724 = callmethodChecked(call3723, "accept()from", [1, 1], var_visitor, var_newChain);
                                    if3718 = call3724;
                                  }
                                  var if3725 = GraceDone;
                                  setLineNumber(566);    // compilenode call
                                  onSelf = true;
                                  var call3726 = callmethodChecked(this, "rtype", [0]);
                                  var opresult3729 = callmethodChecked(GraceFalse, "\u2260", [1], call3726);
                                  if (Grace_isTrue(opresult3729)) {
                                    setLineNumber(567);    // compilenode call
                                    onSelf = true;
                                    var call3730 = callmethodChecked(this, "rtype", [0]);
                                    var call3731 = callmethodChecked(call3730, "accept()from", [1, 1], var_visitor, var_newChain);
                                    if3725 = call3731;
                                  }
                                  setLineNumber(569);    // compilenode call
                                  onSelf = true;
                                  var call3732 = callmethodChecked(this, "signature", [0]);
                                  var block3733 = new GraceBlock(this, 569, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block3733.real = function(var_part) {
                                    setLineNumber(570);    // compilenode identifier
                                    var call3734 = callmethodChecked(var_part, "accept()from", [1, 1], var_visitor, var_newChain);
                                    return call3734;
                                  };
                                  var call3735 = callmethodChecked(var_prelude, "for()do", [1, 1], call3732, block3733);
                                  if3715 = call3735;
                                }
                                return if3715;
                              };
                              func3714.paramTypes = [];
                              func3714.paramTypes.push([]);
                              func3714.paramTypes.push([]);
                              func3714.paramCounts = [1, 1];
                              obj3698.methods["accept()from"] = func3714;
                              func3714.definitionLine = 560;
                              func3714.definitionModule = "ast";
                              var func3736 = function(argcv) {    // method map(1)ancestors(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_blk = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                var var_as = arguments[curarg];
                                curarg++;
                                if (argcv[1] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                setModuleName("ast");
                                setLineNumber(575);    // compilenode call
                                onSelf = true;
                                var call3737 = callmethodChecked(this, "shallowCopy", [0]);
                                var var_n = call3737;
                                setLineNumber(576);    // compilenode identifier
                                var call3738 = callmethodChecked(var_as, "extend", [1], var_n);
                                var var_newChain = call3738;
                                setLineNumber(577);    // compilenode call
                                onSelf = true;
                                var call3739 = callmethodChecked(this, "rtype", [0]);
                                var call3740 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call3741 = callmethodChecked(call3740, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call3742 = callmethodChecked(call3741, "maybeMap()ancestors", [2, 1], call3739, var_blk, var_newChain);
                                var call3743 = callmethodChecked(var_n, "rtype:=", [1], call3742);
                                setLineNumber(578);    // compilenode call
                                onSelf = true;
                                var call3744 = callmethodChecked(this, "signature", [0]);
                                var call3745 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call3746 = callmethodChecked(call3745, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call3747 = callmethodChecked(call3746, "listMap()ancestors", [2, 1], call3744, var_blk, var_newChain);
                                var call3748 = callmethodChecked(var_n, "signature:=", [1], call3747);
                                setLineNumber(579);    // compilenode call
                                onSelf = true;
                                var call3749 = callmethodChecked(this, "typeParams", [0]);
                                var call3750 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call3751 = callmethodChecked(call3750, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call3752 = callmethodChecked(call3751, "maybeMap()ancestors", [2, 1], call3749, var_blk, var_newChain);
                                var call3753 = callmethodChecked(var_n, "typeParams:=", [1], call3752);
                                setLineNumber(580);    // compilenode identifier
                                var call3754 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                return call3754;
                              };
                              func3736.paramCounts = [1, 1];
                              obj3698.methods["map()ancestors"] = func3736;
                              func3736.definitionLine = 574;
                              func3736.definitionModule = "ast";
                              var func3755 = function(argcv) {    // method pretty(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_depth = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                setModuleName("ast");
                                setLineNumber(583);    // compilenode string
                                var string3756 = new GraceString("");
                                var var_spc = string3756;
                                setLineNumber(584);    // compilenode num
                                var opresult3759 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                var block3760 = new GraceBlock(this, 584, 1);
                                setLineNumber(1);    // compilenode identifier
                                block3760.real = function(var_i) {
                                  setLineNumber(585);    // compilenode string
                                  var string3761 = new GraceString("  ");
                                  var opresult3764 = callmethodChecked(var_spc, "++", [1], string3761);
                                  var_spc = opresult3764;
                                  return GraceDone;
                                };
                                var call3765 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult3759, block3760);
                                setLineNumber(587);    // compilenode string
                                var string3766 = new GraceString("\n");
                                var call3768 = callmethodsuper(this, "pretty", [1], var_depth);
                                var opresult3770 = callmethodChecked(call3768, "++", [1], string3766);
                                var var_s = opresult3770;
                                setLineNumber(588);    // compilenode string
                                var string3771 = new GraceString("\n");
                                onSelf = true;
                                var call3773 = callmethodChecked(this, "value", [0]);
                                var string3775 = new GraceString("Name: ");
                                var string3778 = new GraceString("");
                                var string3781 = new GraceString("");
                                var opresult3783 = callmethodChecked(string3781, "++", [1], var_s);
                                var opresult3785 = callmethodChecked(opresult3783, "++", [1], string3778);
                                var opresult3787 = callmethodChecked(opresult3785, "++", [1], var_spc);
                                var opresult3789 = callmethodChecked(opresult3787, "++", [1], string3775);
                                var opresult3791 = callmethodChecked(opresult3789, "++", [1], call3773);
                                var opresult3793 = callmethodChecked(opresult3791, "++", [1], string3771);
                                var_s = opresult3793;
                                var if3794 = GraceDone;
                                setLineNumber(589);    // compilenode call
                                onSelf = true;
                                var call3795 = callmethodChecked(this, "rtype", [0]);
                                var opresult3798 = callmethodChecked(GraceFalse, "\u2260", [1], call3795);
                                if (Grace_isTrue(opresult3798)) {
                                  setLineNumber(590);    // compilenode string
                                  var string3799 = new GraceString("");
                                  var opresult3803 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                  onSelf = true;
                                  var call3804 = callmethodChecked(this, "rtype", [0]);
                                  var call3805 = callmethodChecked(call3804, "pretty", [1], opresult3803);
                                  var string3807 = new GraceString("");
                                  var string3810 = new GraceString("Returns:\n  ");
                                  var string3813 = new GraceString("");
                                  var string3816 = new GraceString("");
                                  var opresult3818 = callmethodChecked(string3816, "++", [1], var_s);
                                  var opresult3820 = callmethodChecked(opresult3818, "++", [1], string3813);
                                  var opresult3822 = callmethodChecked(opresult3820, "++", [1], var_spc);
                                  var opresult3824 = callmethodChecked(opresult3822, "++", [1], string3810);
                                  var opresult3826 = callmethodChecked(opresult3824, "++", [1], var_spc);
                                  var opresult3828 = callmethodChecked(opresult3826, "++", [1], string3807);
                                  var opresult3830 = callmethodChecked(opresult3828, "++", [1], call3805);
                                  var opresult3832 = callmethodChecked(opresult3830, "++", [1], string3799);
                                  var_s = opresult3832;
                                  if3794 = GraceDone;
                                }
                                var if3833 = GraceDone;
                                setLineNumber(592);    // compilenode call
                                onSelf = true;
                                var call3834 = callmethodChecked(this, "typeParams", [0]);
                                var opresult3837 = callmethodChecked(GraceFalse, "\u2260", [1], call3834);
                                if (Grace_isTrue(opresult3837)) {
                                  setLineNumber(593);    // compilenode string
                                  var string3838 = new GraceString("TypeParams:\n");
                                  var string3841 = new GraceString("\n");
                                  var string3844 = new GraceString("");
                                  var opresult3846 = callmethodChecked(string3844, "++", [1], var_s);
                                  var opresult3848 = callmethodChecked(opresult3846, "++", [1], string3841);
                                  var opresult3850 = callmethodChecked(opresult3848, "++", [1], var_spc);
                                  var opresult3852 = callmethodChecked(opresult3850, "++", [1], string3838);
                                  var_s = opresult3852;
                                  setLineNumber(594);    // compilenode identifier
                                  var opresult3855 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                  onSelf = true;
                                  var call3856 = callmethodChecked(this, "typeParams", [0]);
                                  var call3857 = callmethodChecked(call3856, "pretty", [1], opresult3855);
                                  var opresult3860 = callmethodChecked(var_s, "++", [1], call3857);
                                  var_s = opresult3860;
                                  if3833 = GraceDone;
                                }
                                setLineNumber(596);    // compilenode string
                                var string3861 = new GraceString("Signature:");
                                var string3864 = new GraceString("\n");
                                var string3867 = new GraceString("");
                                var opresult3869 = callmethodChecked(string3867, "++", [1], var_s);
                                var opresult3871 = callmethodChecked(opresult3869, "++", [1], string3864);
                                var opresult3873 = callmethodChecked(opresult3871, "++", [1], var_spc);
                                var opresult3875 = callmethodChecked(opresult3873, "++", [1], string3861);
                                var_s = opresult3875;
                                setLineNumber(597);    // compilenode call
                                onSelf = true;
                                var call3876 = callmethodChecked(this, "signature", [0]);
                                var block3877 = new GraceBlock(this, 597, 1);
                                setLineNumber(1);    // compilenode identifier
                                block3877.real = function(var_part) {
                                  setLineNumber(598);    // compilenode string
                                  var string3878 = new GraceString("");
                                  var opresult3882 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                  var call3883 = callmethodChecked(var_part, "pretty", [1], opresult3882);
                                  var string3885 = new GraceString("");
                                  var string3888 = new GraceString("\n  ");
                                  var string3891 = new GraceString("");
                                  var opresult3893 = callmethodChecked(string3891, "++", [1], var_s);
                                  var opresult3895 = callmethodChecked(opresult3893, "++", [1], string3888);
                                  var opresult3897 = callmethodChecked(opresult3895, "++", [1], var_spc);
                                  var opresult3899 = callmethodChecked(opresult3897, "++", [1], string3885);
                                  var opresult3901 = callmethodChecked(opresult3899, "++", [1], call3883);
                                  var opresult3903 = callmethodChecked(opresult3901, "++", [1], string3878);
                                  var_s = opresult3903;
                                  return GraceDone;
                                };
                                var call3904 = callmethodChecked(var_prelude, "for()do", [1, 1], call3876, block3877);
                                setLineNumber(600);    // compilenode identifier
                                return var_s;
                              };
                              func3755.paramCounts = [1];
                              obj3698.methods["pretty"] = func3755;
                              func3755.definitionLine = 582;
                              func3755.definitionModule = "ast";
                              var func3905 = function(argcv) {    // method toGrace(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_depth = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(602);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("ast");
                                setLineNumber(603);    // compilenode string
                                var string3906 = new GraceString("");
                                var var_s = string3906;
                                setLineNumber(604);    // compilenode identifier
                                var var_firstPart = GraceTrue;
                                setLineNumber(605);    // compilenode call
                                onSelf = true;
                                var call3907 = callmethodChecked(this, "signature", [0]);
                                var block3908 = new GraceBlock(this, 605, 1);
                                setLineNumber(1);    // compilenode identifier
                                block3908.real = function(var_part) {
                                  setLineNumber(606);    // compilenode identifier
                                  var call3909 = callmethodChecked(var_part, "name", [0]);
                                  var opresult3912 = callmethodChecked(var_s, "++", [1], call3909);
                                  var_s = opresult3912;
                                  var if3913 = GraceDone;
                                  setLineNumber(607);    // compilenode identifier
                                  if (Grace_isTrue(var_firstPart)) {
                                    setLineNumber(608);    // compilenode identifier
                                    var_firstPart = GraceFalse;
                                    var if3914 = GraceDone;
                                    setLineNumber(609);    // compilenode call
                                    onSelf = true;
                                    var call3915 = callmethodChecked(this, "typeParams", [0]);
                                    var opresult3918 = callmethodChecked(GraceFalse, "\u2260", [1], call3915);
                                    if (Grace_isTrue(opresult3918)) {
                                      setLineNumber(610);    // compilenode identifier
                                      var opresult3921 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                      onSelf = true;
                                      var call3922 = callmethodChecked(this, "typeParams", [0]);
                                      var call3923 = callmethodChecked(call3922, "toGrace", [1], opresult3921);
                                      if3914 = call3923;
                                    }
                                    if3913 = if3914;
                                  }
                                  var if3924 = GraceDone;
                                  setLineNumber(613);    // compilenode identifier
                                  var call3926 = callmethodChecked(var_part, "params", [0]);
                                  var call3927 = callmethodChecked(call3926, "size", [0]);
                                  var opresult3929 = callmethodChecked(call3927, ">", [1], new GraceNum(0));
                                  if (Grace_isTrue(opresult3929)) {
                                    setLineNumber(614);    // compilenode string
                                    var string3930 = new GraceString("(");
                                    var opresult3933 = callmethodChecked(var_s, "++", [1], string3930);
                                    var_s = opresult3933;
                                    setLineNumber(615);    // compilenode identifier
                                    var call3934 = callmethodChecked(var_part, "params", [0]);
                                    var call3935 = callmethodChecked(call3934, "indices", [0]);
                                    var block3936 = new GraceBlock(this, 615, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block3936.real = function(var_pnr) {
                                      setLineNumber(616);    // compilenode identifier
                                      var call3937 = callmethodChecked(var_part, "params", [0]);
                                      var call3938 = callmethodChecked(call3937, "at", [1], var_pnr);
                                      var var_p = call3938;
                                      setLineNumber(617);    // compilenode identifier
                                      var opresult3941 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                      var call3942 = callmethodChecked(var_p, "toGrace", [1], opresult3941);
                                      var opresult3945 = callmethodChecked(var_s, "++", [1], call3942);
                                      var_s = opresult3945;
                                      var if3946 = GraceDone;
                                      setLineNumber(618);    // compilenode identifier
                                      var call3947 = callmethodChecked(var_part, "params", [0]);
                                      var call3948 = callmethodChecked(call3947, "size", [0]);
                                      var opresult3951 = callmethodChecked(var_pnr, "<", [1], call3948);
                                      if (Grace_isTrue(opresult3951)) {
                                        setLineNumber(619);    // compilenode string
                                        var string3952 = new GraceString(", ");
                                        var opresult3955 = callmethodChecked(var_s, "++", [1], string3952);
                                        var_s = opresult3955;
                                        if3946 = GraceDone;
                                      }
                                      return if3946;
                                    };
                                    var call3956 = callmethodChecked(var_prelude, "for()do", [1, 1], call3935, block3936);
                                    setLineNumber(622);    // compilenode string
                                    var string3957 = new GraceString(")");
                                    var opresult3960 = callmethodChecked(var_s, "++", [1], string3957);
                                    var_s = opresult3960;
                                    if3924 = GraceDone;
                                  }
                                  return if3924;
                                };
                                var call3961 = callmethodChecked(var_prelude, "for()do", [1, 1], call3907, block3908);
                                var if3962 = GraceDone;
                                setLineNumber(625);    // compilenode call
                                onSelf = true;
                                var call3963 = callmethodChecked(this, "rtype", [0]);
                                var opresult3966 = callmethodChecked(GraceFalse, "\u2260", [1], call3963);
                                if (Grace_isTrue(opresult3966)) {
                                  setLineNumber(626);    // compilenode identifier
                                  var opresult3969 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                  onSelf = true;
                                  var call3970 = callmethodChecked(this, "rtype", [0]);
                                  var call3971 = callmethodChecked(call3970, "toGrace", [1], opresult3969);
                                  var string3973 = new GraceString(" -> ");
                                  var opresult3976 = callmethodChecked(var_s, "++", [1], string3973);
                                  var opresult3978 = callmethodChecked(opresult3976, "++", [1], call3971);
                                  var_s = opresult3978;
                                  if3962 = GraceDone;
                                }
                                setLineNumber(628);    // return value
                                if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method toGrace(1) does not have " + 
                                            callmethod(var_String, "asString", [0])._value + "."));
                                return var_s;
                              };
                              func3905.paramTypes = [];
                              func3905.paramTypes.push([type_Number, "depth"]);
                              func3905.paramCounts = [1];
                              obj3698.methods["toGrace"] = func3905;
                              func3905.definitionLine = 602;
                              func3905.definitionModule = "ast";
                              var func3979 = function(argcv) {    // method shallowCopy
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                setModuleName("ast");
                                setLineNumber(631);    // compilenode call
                                onSelf = true;
                                var call3980 = callmethodChecked(this, "value", [0]);
                                var call3981 = callmethodChecked(var_methodTypeNode, "new", [3], call3980, var_emptySeq, GraceFalse);
                                var call3982 = callmethodChecked(call3981, "shallowCopyFieldsFrom", [1], this);
                                return call3982;
                              };
                              func3979.paramCounts = [0];
                              obj3698.methods["shallowCopy"] = func3979;
                              func3979.definitionLine = 630;
                              func3979.definitionModule = "ast";
                              setLineNumber(539);    // compilenode call
                              var call3983 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3984 = callmethodChecked(call3983, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call3985 = callmethodChecked(call3984, "baseNode()object", [0, 1], this);
                              obj3698.superobj = call3985;
                              if (call3985.data) obj3698.data = call3985.data;
                              if (call3985.hasOwnProperty('_value'))
                                  obj3698._value = call3985._value;
                              setLineNumber(540);    // compilenode string
                              var string3986 = new GraceString("methodtype");
                              obj3698.data["kind"] = string3986;
                              var reader_ast_kind3987 = function() {
                                return this.data["kind"];
                              };
                              reader_ast_kind3987.def = true;
                              obj3698.methods["kind"] = reader_ast_kind3987;
                              setLineNumber(541);    // compilenode identifier
                              obj3698.data["value"] = var_name__39__;
                              var reader_ast_value3988 = function() {
                                return this.data["value"];
                              };
                              obj3698.methods["value"] = reader_ast_value3988;
                              obj3698.data["value"] = var_name__39__;
                              var writer_ast_value3988 = function(argcv, o) {
                                this.data["value"] = o;
                                return GraceDone;
                              };
                              obj3698.methods["value:="] = writer_ast_value3988;
                              obj3698.mutable = true;
                              setLineNumber(542);    // compilenode identifier
                              obj3698.data["signature"] = var_signature__39__;
                              var reader_ast_signature3989 = function() {
                                return this.data["signature"];
                              };
                              obj3698.methods["signature"] = reader_ast_signature3989;
                              obj3698.data["signature"] = var_signature__39__;
                              var writer_ast_signature3989 = function(argcv, o) {
                                this.data["signature"] = o;
                                return GraceDone;
                              };
                              obj3698.methods["signature:="] = writer_ast_signature3989;
                              obj3698.mutable = true;
                              setLineNumber(543);    // compilenode identifier
                              obj3698.data["rtype"] = var_rtype__39__;
                              var reader_ast_rtype3990 = function() {
                                return this.data["rtype"];
                              };
                              obj3698.methods["rtype"] = reader_ast_rtype3990;
                              obj3698.data["rtype"] = var_rtype__39__;
                              var writer_ast_rtype3990 = function(argcv, o) {
                                this.data["rtype"] = o;
                                return GraceDone;
                              };
                              obj3698.methods["rtype:="] = writer_ast_rtype3990;
                              obj3698.mutable = true;
                              setLineNumber(544);    // compilenode identifier
                              obj3698.data["typeParams"] = GraceFalse;
                              var reader_ast_typeParams3991 = function() {
                                return this.data["typeParams"];
                              };
                              obj3698.methods["typeParams"] = reader_ast_typeParams3991;
                              obj3698.data["typeParams"] = GraceFalse;
                              var writer_ast_typeParams3991 = function(argcv, o) {
                                this.data["typeParams"] = o;
                                return GraceDone;
                              };
                              obj3698.methods["typeParams:="] = writer_ast_typeParams3991;
                              obj3698.mutable = true;
                              setLineNumber(545);    // compilenode call
                              onSelf = true;
                              var call3992 = callmethodChecked(this, "value", [0]);
                              obj3698.data["nameString"] = call3992;
                              var reader_ast_nameString3993 = function() {
                                return this.data["nameString"];
                              };
                              reader_ast_nameString3993.def = true;
                              obj3698.methods["nameString"] = reader_ast_nameString3993;
                              if (!Grace_isTrue(callmethod(var_String, "match", [1], call3992)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("value of def 'nameString' is not of type String"));
                              superDepth = origSuperDepth;
                            };
                            obj_init_3698.apply(inheritingObject, []);
                            return obj3698;
                            };
                            obj3398.methods["new()object"] = func3697;
                          superDepth = origSuperDepth;
                        };
                        obj_init_3398.apply(obj3398, []);
                        var var_methodTypeNode = obj3398;
                        var func3994 = function(argcv) {    // method methodTypeNode
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for methodTypeNode"));
                          setModuleName("ast");
                          // methodTypeNode is a simple accessor - elide try ... catch
                          setLineNumber(534);    // compilenode identifier
                          return var_methodTypeNode;
                        };
                        func3994.paramCounts = [0];
                        this.methods["methodTypeNode"] = func3994;
                        func3994.definitionLine = 545;
                        func3994.definitionModule = "ast";
                        this.methods["methodTypeNode"].debug = "def";
                        setLineNumber(635);    // compilenode object
                        var obj3995 = Grace_allocObject(GraceObject, "typeLiteralNode");
                        obj3995.definitionModule = "ast";
                        obj3995.definitionLine = 635;
                        obj3995.outer = this;
                        var reader_ast_outer3996 = function() {
                          return this.outer;
                        };
                        obj3995.methods["outer"] = reader_ast_outer3996;
                        var obj_init_3995 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj3995;
                          var func3997 = function(argcv) {    // method new(2)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_methods__39__ = arguments[curarg];
                            curarg++;
                            var var_types__39__ = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 2)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(2)"));
                            setModuleName("ast");
                            setLineNumber(636);    // compilenode object
                            var obj3998 = Grace_allocObject(null, "typeLiteralNode.new");
                            obj3998.definitionModule = "ast";
                            obj3998.definitionLine = 636;
                            obj3998.outer = this;
                            var reader_ast_outer3999 = function() {
                              return this.outer;
                            };
                            obj3998.methods["outer"] = reader_ast_outer3999;
                            var obj_init_3998 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj3998;
                              var func4000 = function(argcv) {    // method name
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for name"));
                                setModuleName("ast");
                                setLineNumber(645);    // compilenode call
                                onSelf = true;
                                var call4001 = callmethodChecked(this, "value", [0]);
                                return call4001;
                              };
                              func4000.paramCounts = [0];
                              obj3998.methods["name"] = func4000;
                              func4000.definitionLine = 645;
                              func4000.definitionModule = "ast";
                              var func4002 = function(argcv) {    // method name:=(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_n = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for name:=(1)"));
                                setModuleName("ast");
                                setLineNumber(647);    // compilenode identifier
                                onSelf = true;
                                var call4003 = callmethodChecked(this, "value:=", [1], var_n);
                                setLineNumber(648);    // compilenode identifier
                                onSelf = true;
                                var call4004 = callmethodChecked(this, "anonymous:=", [1], GraceFalse);
                                return call4004;
                              };
                              func4002.paramCounts = [1];
                              obj3998.methods["name:="] = func4002;
                              func4002.definitionLine = 646;
                              func4002.definitionModule = "ast";
                              var func4005 = function(argcv) {    // method asString
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                setModuleName("ast");
                                setLineNumber(651);    // compilenode string
                                var string4006 = new GraceString("");
                                onSelf = true;
                                var call4008 = callmethodChecked(this, "types", [0]);
                                var string4010 = new GraceString(", types = ");
                                onSelf = true;
                                var call4012 = callmethodChecked(this, "methods", [0]);
                                var string4014 = new GraceString("typeliteral: methods = ");
                                var opresult4016 = callmethodChecked(string4014, "++", [1], call4012);
                                var opresult4018 = callmethodChecked(opresult4016, "++", [1], string4010);
                                var opresult4020 = callmethodChecked(opresult4018, "++", [1], call4008);
                                var opresult4022 = callmethodChecked(opresult4020, "++", [1], string4006);
                                return opresult4022;
                              };
                              func4005.paramCounts = [0];
                              obj3998.methods["asString"] = func4005;
                              func4005.definitionLine = 650;
                              func4005.definitionModule = "ast";
                              var func4023 = function(argcv) {    // method declarationKindWithAncestors(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_as = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                setModuleName("ast");
                                setLineNumber(653);    // compilenode identifier
                                var call4024 = callmethodChecked(var_k, "typedec", [0]);
                                return call4024;
                              };
                              func4023.paramCounts = [1];
                              obj3998.methods["declarationKindWithAncestors"] = func4023;
                              func4023.definitionLine = 653;
                              func4023.definitionModule = "ast";
                              var func4025 = function(argcv) {    // method isExecutable
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                setModuleName("ast");
                                // isExecutable is a simple accessor - elide try ... catch
                                setLineNumber(654);    // compilenode identifier
                                return GraceFalse;
                              };
                              func4025.paramCounts = [0];
                              obj3998.methods["isExecutable"] = func4025;
                              func4025.definitionLine = 654;
                              func4025.definitionModule = "ast";
                              var func4026 = function(argcv) {    // method accept(1)from(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_visitor = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                var var_as = arguments[curarg];
                                curarg++;
                                if (argcv[1] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(656);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                curarg++;
                                curarg++;
                                // End argument checking
                                setModuleName("ast");
                                var if4027 = GraceDone;
                                setLineNumber(657);    // compilenode identifier
                                var call4028 = callmethodChecked(var_visitor, "visitTypeLiteral()up", [1, 1], this, var_as);
                                if (Grace_isTrue(call4028)) {
                                  setLineNumber(658);    // compilenode identifier
                                  var call4029 = callmethodChecked(var_as, "extend", [1], this);
                                  var var_newChain = call4029;
                                  setLineNumber(659);    // compilenode call
                                  onSelf = true;
                                  var call4030 = callmethodChecked(this, "methods", [0]);
                                  var block4031 = new GraceBlock(this, 659, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4031.real = function(var_each) {
                                    setLineNumber(660);    // compilenode identifier
                                    var call4032 = callmethodChecked(var_each, "accept()from", [1, 1], var_visitor, var_newChain);
                                    return call4032;
                                  };
                                  var call4033 = callmethodChecked(var_prelude, "for()do", [1, 1], call4030, block4031);
                                  setLineNumber(662);    // compilenode call
                                  onSelf = true;
                                  var call4034 = callmethodChecked(this, "types", [0]);
                                  var block4035 = new GraceBlock(this, 662, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4035.real = function(var_each) {
                                    setLineNumber(663);    // compilenode identifier
                                    var call4036 = callmethodChecked(var_each, "accept()from", [1, 1], var_visitor, var_newChain);
                                    return call4036;
                                  };
                                  var call4037 = callmethodChecked(var_prelude, "for()do", [1, 1], call4034, block4035);
                                  if4027 = call4037;
                                }
                                return if4027;
                              };
                              func4026.paramTypes = [];
                              func4026.paramTypes.push([]);
                              func4026.paramTypes.push([]);
                              func4026.paramCounts = [1, 1];
                              obj3998.methods["accept()from"] = func4026;
                              func4026.definitionLine = 656;
                              func4026.definitionModule = "ast";
                              var func4038 = function(argcv) {    // method map(1)ancestors(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_blk = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                var var_as = arguments[curarg];
                                curarg++;
                                if (argcv[1] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                setModuleName("ast");
                                setLineNumber(668);    // compilenode call
                                onSelf = true;
                                var call4039 = callmethodChecked(this, "shallowCopy", [0]);
                                var var_n = call4039;
                                setLineNumber(669);    // compilenode identifier
                                var call4040 = callmethodChecked(var_as, "extend", [1], var_n);
                                var var_newChain = call4040;
                                setLineNumber(670);    // compilenode call
                                onSelf = true;
                                var call4041 = callmethodChecked(this, "methods", [0]);
                                var call4042 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4043 = callmethodChecked(call4042, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4044 = callmethodChecked(call4043, "listMap()ancestors", [2, 1], call4041, var_blk, var_as);
                                var call4045 = callmethodChecked(var_n, "methods:=", [1], call4044);
                                setLineNumber(671);    // compilenode call
                                onSelf = true;
                                var call4046 = callmethodChecked(this, "types", [0]);
                                var call4047 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4048 = callmethodChecked(call4047, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4049 = callmethodChecked(call4048, "listMap()ancestors", [2, 1], call4046, var_blk, var_as);
                                var call4050 = callmethodChecked(var_n, "types:=", [1], call4049);
                                setLineNumber(672);    // compilenode identifier
                                var call4051 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                return call4051;
                              };
                              func4038.paramCounts = [1, 1];
                              obj3998.methods["map()ancestors"] = func4038;
                              func4038.definitionLine = 667;
                              func4038.definitionModule = "ast";
                              var func4052 = function(argcv) {    // method pretty(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_depth = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                setModuleName("ast");
                                setLineNumber(675);    // compilenode string
                                var string4053 = new GraceString("");
                                var var_spc = string4053;
                                setLineNumber(676);    // compilenode num
                                var opresult4056 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                var block4057 = new GraceBlock(this, 676, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4057.real = function(var_i) {
                                  setLineNumber(677);    // compilenode string
                                  var string4058 = new GraceString("  ");
                                  var opresult4061 = callmethodChecked(var_spc, "++", [1], string4058);
                                  var_spc = opresult4061;
                                  return GraceDone;
                                };
                                var call4062 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult4056, block4057);
                                setLineNumber(679);    // compilenode string
                                var string4063 = new GraceString("\n");
                                var call4065 = callmethodsuper(this, "pretty", [1], var_depth);
                                var string4067 = new GraceString("");
                                var opresult4069 = callmethodChecked(string4067, "++", [1], call4065);
                                var opresult4071 = callmethodChecked(opresult4069, "++", [1], string4063);
                                var var_s = opresult4071;
                                setLineNumber(680);    // compilenode string
                                var string4072 = new GraceString("Types:");
                                var opresult4076 = callmethodChecked(var_s, "++", [1], var_spc);
                                var opresult4078 = callmethodChecked(opresult4076, "++", [1], string4072);
                                var_s = opresult4078;
                                setLineNumber(681);    // compilenode call
                                onSelf = true;
                                var call4079 = callmethodChecked(this, "types", [0]);
                                var block4080 = new GraceBlock(this, 681, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4080.real = function(var_each) {
                                  setLineNumber(682);    // compilenode identifier
                                  var opresult4083 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                  var call4084 = callmethodChecked(var_each, "pretty", [1], opresult4083);
                                  var string4087 = new GraceString("\n  ");
                                  var opresult4090 = callmethodChecked(var_s, "++", [1], string4087);
                                  var opresult4092 = callmethodChecked(opresult4090, "++", [1], var_spc);
                                  var opresult4094 = callmethodChecked(opresult4092, "++", [1], call4084);
                                  var_s = opresult4094;
                                  return GraceDone;
                                };
                                var call4095 = callmethodChecked(var_prelude, "for()do", [1, 1], call4079, block4080);
                                setLineNumber(684);    // compilenode string
                                var string4096 = new GraceString("Methods:");
                                var string4099 = new GraceString("\n");
                                var opresult4102 = callmethodChecked(var_s, "++", [1], string4099);
                                var opresult4104 = callmethodChecked(opresult4102, "++", [1], var_spc);
                                var opresult4106 = callmethodChecked(opresult4104, "++", [1], string4096);
                                var_s = opresult4106;
                                setLineNumber(685);    // compilenode call
                                onSelf = true;
                                var call4107 = callmethodChecked(this, "methods", [0]);
                                var block4108 = new GraceBlock(this, 685, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4108.real = function(var_each) {
                                  setLineNumber(686);    // compilenode identifier
                                  var opresult4111 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                  var call4112 = callmethodChecked(var_each, "pretty", [1], opresult4111);
                                  var string4115 = new GraceString("\n  ");
                                  var opresult4118 = callmethodChecked(var_s, "++", [1], string4115);
                                  var opresult4120 = callmethodChecked(opresult4118, "++", [1], var_spc);
                                  var opresult4122 = callmethodChecked(opresult4120, "++", [1], call4112);
                                  var_s = opresult4122;
                                  return GraceDone;
                                };
                                var call4123 = callmethodChecked(var_prelude, "for()do", [1, 1], call4107, block4108);
                                setLineNumber(688);    // compilenode string
                                var string4124 = new GraceString("\n");
                                var opresult4127 = callmethodChecked(var_s, "++", [1], string4124);
                                var_s = opresult4127;
                                setLineNumber(689);    // compilenode identifier
                                return var_s;
                              };
                              func4052.paramCounts = [1];
                              obj3998.methods["pretty"] = func4052;
                              func4052.definitionLine = 674;
                              func4052.definitionModule = "ast";
                              var func4128 = function(argcv) {    // method toGrace(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_depth = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(691);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("ast");
                                setLineNumber(692);    // compilenode string
                                var string4129 = new GraceString("");
                                var var_spc = string4129;
                                setLineNumber(693);    // compilenode identifier
                                var diff4132 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                var opresult4135 = callmethodChecked(new GraceNum(0), "..", [1], diff4132);
                                var block4136 = new GraceBlock(this, 693, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4136.real = function(var_i) {
                                  setLineNumber(694);    // compilenode string
                                  var string4137 = new GraceString("    ");
                                  var opresult4140 = callmethodChecked(var_spc, "++", [1], string4137);
                                  var_spc = opresult4140;
                                  return GraceDone;
                                };
                                var call4141 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult4135, block4136);
                                setLineNumber(696);    // compilenode string
                                var string4142 = new GraceString("type");
                                var var_s = string4142;
                                setLineNumber(697);    // compilenode string
                                var string4143 = new GraceString(" = {");
                                var opresult4146 = callmethodChecked(var_s, "++", [1], string4143);
                                var_s = opresult4146;
                                setLineNumber(698);    // compilenode call
                                onSelf = true;
                                var call4147 = callmethodChecked(this, "methods", [0]);
                                var block4148 = new GraceBlock(this, 698, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4148.real = function(var_each) {
                                  setLineNumber(699);    // compilenode identifier
                                  var opresult4151 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                  var call4152 = callmethodChecked(var_each, "toGrace", [1], opresult4151);
                                  var string4154 = new GraceString("    ");
                                  var string4157 = new GraceString("\n");
                                  var opresult4160 = callmethodChecked(var_s, "++", [1], string4157);
                                  var opresult4162 = callmethodChecked(opresult4160, "++", [1], var_spc);
                                  var opresult4164 = callmethodChecked(opresult4162, "++", [1], string4154);
                                  var opresult4166 = callmethodChecked(opresult4164, "++", [1], call4152);
                                  var_s = opresult4166;
                                  return GraceDone;
                                };
                                var call4167 = callmethodChecked(var_prelude, "for()do", [1, 1], call4147, block4148);
                                setLineNumber(701);    // compilenode call
                                onSelf = true;
                                var call4168 = callmethodChecked(this, "types", [0]);
                                var block4169 = new GraceBlock(this, 701, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4169.real = function(var_each) {
                                  setLineNumber(702);    // compilenode identifier
                                  var opresult4172 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                  var call4173 = callmethodChecked(var_each, "toGrace", [1], opresult4172);
                                  var string4175 = new GraceString("    ");
                                  var string4178 = new GraceString("\n");
                                  var opresult4181 = callmethodChecked(var_s, "++", [1], string4178);
                                  var opresult4183 = callmethodChecked(opresult4181, "++", [1], var_spc);
                                  var opresult4185 = callmethodChecked(opresult4183, "++", [1], string4175);
                                  var opresult4187 = callmethodChecked(opresult4185, "++", [1], call4173);
                                  var_s = opresult4187;
                                  return GraceDone;
                                };
                                var call4188 = callmethodChecked(var_prelude, "for()do", [1, 1], call4168, block4169);
                                setLineNumber(704);    // compilenode string
                                var string4189 = new GraceString("}");
                                var opresult4192 = callmethodChecked(var_s, "++", [1], string4189);
                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4192)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method toGrace(1) does not have " + 
                                            callmethod(var_String, "asString", [0])._value + "."));
                                return opresult4192;
                              };
                              func4128.paramTypes = [];
                              func4128.paramTypes.push([type_Number, "depth"]);
                              func4128.paramCounts = [1];
                              obj3998.methods["toGrace"] = func4128;
                              func4128.definitionLine = 691;
                              func4128.definitionModule = "ast";
                              var func4193 = function(argcv) {    // method shallowCopy
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                setModuleName("ast");
                                setLineNumber(707);    // compilenode identifier
                                var call4194 = callmethodChecked(var_typeLiteralNode, "new", [2], var_emptySeq, var_emptySeq);
                                var call4195 = callmethodChecked(call4194, "shallowCopyFieldsFrom", [1], this);
                                return call4195;
                              };
                              func4193.paramCounts = [0];
                              obj3998.methods["shallowCopy"] = func4193;
                              func4193.definitionLine = 706;
                              func4193.definitionModule = "ast";
                              var func4196 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_other = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                setModuleName("ast");
                                setLineNumber(710);    // compilenode identifier
                                var call4197 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                setLineNumber(711);    // compilenode identifier
                                var call4198 = callmethodChecked(var_other, "nominal", [0]);
                                onSelf = true;
                                var call4199 = callmethodChecked(this, "nominal:=", [1], call4198);
                                setLineNumber(712);    // compilenode identifier
                                var call4200 = callmethodChecked(var_other, "anonymous", [0]);
                                onSelf = true;
                                var call4201 = callmethodChecked(this, "anonymous:=", [1], call4200);
                                setLineNumber(713);    // compilenode identifier
                                var call4202 = callmethodChecked(var_other, "value", [0]);
                                onSelf = true;
                                var call4203 = callmethodChecked(this, "value:=", [1], call4202);
                                setLineNumber(714);    // compilenode identifier
                                return this;
                              };
                              func4196.paramCounts = [1];
                              obj3998.methods["shallowCopyFieldsFrom"] = func4196;
                              func4196.definitionLine = 709;
                              func4196.definitionModule = "ast";
                              setLineNumber(637);    // compilenode call
                              var call4204 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call4205 = callmethodChecked(call4204, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call4206 = callmethodChecked(call4205, "baseNode()object", [0, 1], this);
                              obj3998.superobj = call4206;
                              if (call4206.data) obj3998.data = call4206.data;
                              if (call4206.hasOwnProperty('_value'))
                                  obj3998._value = call4206._value;
                              setLineNumber(638);    // compilenode string
                              var string4207 = new GraceString("typeliteral");
                              obj3998.data["kind"] = string4207;
                              var reader_ast_kind4208 = function() {
                                return this.data["kind"];
                              };
                              reader_ast_kind4208.def = true;
                              obj3998.methods["kind"] = reader_ast_kind4208;
                              setLineNumber(639);    // compilenode identifier
                              obj3998.data["methods"] = var_methods__39__;
                              var reader_ast_methods4209 = function() {
                                return this.data["methods"];
                              };
                              obj3998.methods["methods"] = reader_ast_methods4209;
                              obj3998.data["methods"] = var_methods__39__;
                              var writer_ast_methods4209 = function(argcv, o) {
                                this.data["methods"] = o;
                                return GraceDone;
                              };
                              obj3998.methods["methods:="] = writer_ast_methods4209;
                              obj3998.mutable = true;
                              setLineNumber(640);    // compilenode identifier
                              obj3998.data["types"] = var_types__39__;
                              var reader_ast_types4210 = function() {
                                return this.data["types"];
                              };
                              obj3998.methods["types"] = reader_ast_types4210;
                              obj3998.data["types"] = var_types__39__;
                              var writer_ast_types4210 = function(argcv, o) {
                                this.data["types"] = o;
                                return GraceDone;
                              };
                              obj3998.methods["types:="] = writer_ast_types4210;
                              obj3998.mutable = true;
                              setLineNumber(641);    // compilenode identifier
                              obj3998.data["nominal"] = GraceFalse;
                              var reader_ast_nominal4211 = function() {
                                return this.data["nominal"];
                              };
                              obj3998.methods["nominal"] = reader_ast_nominal4211;
                              obj3998.data["nominal"] = GraceFalse;
                              var writer_ast_nominal4211 = function(argcv, o) {
                                this.data["nominal"] = o;
                                return GraceDone;
                              };
                              obj3998.methods["nominal:="] = writer_ast_nominal4211;
                              obj3998.mutable = true;
                              setLineNumber(642);    // compilenode identifier
                              obj3998.data["anonymous"] = GraceTrue;
                              var reader_ast_anonymous4212 = function() {
                                return this.data["anonymous"];
                              };
                              obj3998.methods["anonymous"] = reader_ast_anonymous4212;
                              obj3998.data["anonymous"] = GraceTrue;
                              var writer_ast_anonymous4212 = function(argcv, o) {
                                this.data["anonymous"] = o;
                                return GraceDone;
                              };
                              obj3998.methods["anonymous:="] = writer_ast_anonymous4212;
                              obj3998.mutable = true;
                              setLineNumber(643);    // compilenode string
                              var string4213 = new GraceString("\u2039anon\u203a");
                              obj3998.data["value"] = string4213;
                              var reader_ast_value4214 = function() {
                                return this.data["value"];
                              };
                              obj3998.methods["value"] = reader_ast_value4214;
                              obj3998.data["value"] = string4213;
                              var writer_ast_value4214 = function(argcv, o) {
                                this.data["value"] = o;
                                return GraceDone;
                              };
                              obj3998.methods["value:="] = writer_ast_value4214;
                              obj3998.mutable = true;
                              superDepth = origSuperDepth;
                            };
                            obj_init_3998.apply(obj3998, []);
                            return obj3998;
                          };
                          func3997.paramCounts = [2];
                          obj3995.methods["new"] = func3997;
                          func3997.definitionLine = 636;
                          func3997.definitionModule = "ast";
                            var func4215 = function(argcv) {    // method new(2     )()object
                              var curarg = 1;
                              var var_methods__39__ = arguments[curarg];
                              curarg++;
                              var var_types__39__ = arguments[curarg];
                              curarg++;
                              var inheritingObject = arguments[curarg++];
                              // Start argument processing
                              curarg = 1;
                              curarg++;
                              curarg++;
                              // End argument processing
                              setModuleName("ast");
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var obj4216 = Grace_allocObject(null, "new");
                              obj4216.definitionModule = "ast";
                              obj4216.definitionLine = 636;
                              var inho4216 = inheritingObject;
                              while (inho4216.superobj) inho4216 = inho4216.superobj;
                              inho4216.superobj = obj4216;
                              obj4216.data = inheritingObject.data;
                              if (inheritingObject.hasOwnProperty('_value'))
                                obj4216._value = inheritingObject._value;
                              obj4216.outer = this;
                              var reader_ast_outer4217 = function() {
                                return this.outer;
                              };
                              obj4216.methods["outer"] = reader_ast_outer4217;
                              var obj_init_4216 = function() {
                                var origSuperDepth = superDepth;
                                superDepth = obj4216;
                                var func4218 = function(argcv) {    // method name
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for name"));
                                  setModuleName("ast");
                                  setLineNumber(645);    // compilenode call
                                  onSelf = true;
                                  var call4219 = callmethodChecked(this, "value", [0]);
                                  return call4219;
                                };
                                func4218.paramCounts = [0];
                                obj4216.methods["name"] = func4218;
                                func4218.definitionLine = 645;
                                func4218.definitionModule = "ast";
                                var func4220 = function(argcv) {    // method name:=(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_n = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for name:=(1)"));
                                  setModuleName("ast");
                                  setLineNumber(647);    // compilenode identifier
                                  onSelf = true;
                                  var call4221 = callmethodChecked(this, "value:=", [1], var_n);
                                  setLineNumber(648);    // compilenode identifier
                                  onSelf = true;
                                  var call4222 = callmethodChecked(this, "anonymous:=", [1], GraceFalse);
                                  return call4222;
                                };
                                func4220.paramCounts = [1];
                                obj4216.methods["name:="] = func4220;
                                func4220.definitionLine = 646;
                                func4220.definitionModule = "ast";
                                var func4223 = function(argcv) {    // method asString
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                  setModuleName("ast");
                                  setLineNumber(651);    // compilenode string
                                  var string4224 = new GraceString("");
                                  onSelf = true;
                                  var call4226 = callmethodChecked(this, "types", [0]);
                                  var string4228 = new GraceString(", types = ");
                                  onSelf = true;
                                  var call4230 = callmethodChecked(this, "methods", [0]);
                                  var string4232 = new GraceString("typeliteral: methods = ");
                                  var opresult4234 = callmethodChecked(string4232, "++", [1], call4230);
                                  var opresult4236 = callmethodChecked(opresult4234, "++", [1], string4228);
                                  var opresult4238 = callmethodChecked(opresult4236, "++", [1], call4226);
                                  var opresult4240 = callmethodChecked(opresult4238, "++", [1], string4224);
                                  return opresult4240;
                                };
                                func4223.paramCounts = [0];
                                obj4216.methods["asString"] = func4223;
                                func4223.definitionLine = 650;
                                func4223.definitionModule = "ast";
                                var func4241 = function(argcv) {    // method declarationKindWithAncestors(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                  setModuleName("ast");
                                  setLineNumber(653);    // compilenode identifier
                                  var call4242 = callmethodChecked(var_k, "typedec", [0]);
                                  return call4242;
                                };
                                func4241.paramCounts = [1];
                                obj4216.methods["declarationKindWithAncestors"] = func4241;
                                func4241.definitionLine = 653;
                                func4241.definitionModule = "ast";
                                var func4243 = function(argcv) {    // method isExecutable
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                  setModuleName("ast");
                                  // isExecutable is a simple accessor - elide try ... catch
                                  setLineNumber(654);    // compilenode identifier
                                  return GraceFalse;
                                };
                                func4243.paramCounts = [0];
                                obj4216.methods["isExecutable"] = func4243;
                                func4243.definitionLine = 654;
                                func4243.definitionModule = "ast";
                                var func4244 = function(argcv) {    // method accept(1)from(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_visitor = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  if (argcv[1] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(656);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                  curarg++;
                                  curarg++;
                                  // End argument checking
                                  setModuleName("ast");
                                  var if4245 = GraceDone;
                                  setLineNumber(657);    // compilenode identifier
                                  var call4246 = callmethodChecked(var_visitor, "visitTypeLiteral()up", [1, 1], this, var_as);
                                  if (Grace_isTrue(call4246)) {
                                    setLineNumber(658);    // compilenode identifier
                                    var call4247 = callmethodChecked(var_as, "extend", [1], this);
                                    var var_newChain = call4247;
                                    setLineNumber(659);    // compilenode call
                                    onSelf = true;
                                    var call4248 = callmethodChecked(this, "methods", [0]);
                                    var block4249 = new GraceBlock(this, 659, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block4249.real = function(var_each) {
                                      setLineNumber(660);    // compilenode identifier
                                      var call4250 = callmethodChecked(var_each, "accept()from", [1, 1], var_visitor, var_newChain);
                                      return call4250;
                                    };
                                    var call4251 = callmethodChecked(var_prelude, "for()do", [1, 1], call4248, block4249);
                                    setLineNumber(662);    // compilenode call
                                    onSelf = true;
                                    var call4252 = callmethodChecked(this, "types", [0]);
                                    var block4253 = new GraceBlock(this, 662, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block4253.real = function(var_each) {
                                      setLineNumber(663);    // compilenode identifier
                                      var call4254 = callmethodChecked(var_each, "accept()from", [1, 1], var_visitor, var_newChain);
                                      return call4254;
                                    };
                                    var call4255 = callmethodChecked(var_prelude, "for()do", [1, 1], call4252, block4253);
                                    if4245 = call4255;
                                  }
                                  return if4245;
                                };
                                func4244.paramTypes = [];
                                func4244.paramTypes.push([]);
                                func4244.paramTypes.push([]);
                                func4244.paramCounts = [1, 1];
                                obj4216.methods["accept()from"] = func4244;
                                func4244.definitionLine = 656;
                                func4244.definitionModule = "ast";
                                var func4256 = function(argcv) {    // method map(1)ancestors(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_blk = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  if (argcv[1] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                  setModuleName("ast");
                                  setLineNumber(668);    // compilenode call
                                  onSelf = true;
                                  var call4257 = callmethodChecked(this, "shallowCopy", [0]);
                                  var var_n = call4257;
                                  setLineNumber(669);    // compilenode identifier
                                  var call4258 = callmethodChecked(var_as, "extend", [1], var_n);
                                  var var_newChain = call4258;
                                  setLineNumber(670);    // compilenode call
                                  onSelf = true;
                                  var call4259 = callmethodChecked(this, "methods", [0]);
                                  var call4260 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4261 = callmethodChecked(call4260, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4262 = callmethodChecked(call4261, "listMap()ancestors", [2, 1], call4259, var_blk, var_as);
                                  var call4263 = callmethodChecked(var_n, "methods:=", [1], call4262);
                                  setLineNumber(671);    // compilenode call
                                  onSelf = true;
                                  var call4264 = callmethodChecked(this, "types", [0]);
                                  var call4265 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4266 = callmethodChecked(call4265, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4267 = callmethodChecked(call4266, "listMap()ancestors", [2, 1], call4264, var_blk, var_as);
                                  var call4268 = callmethodChecked(var_n, "types:=", [1], call4267);
                                  setLineNumber(672);    // compilenode identifier
                                  var call4269 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                  return call4269;
                                };
                                func4256.paramCounts = [1, 1];
                                obj4216.methods["map()ancestors"] = func4256;
                                func4256.definitionLine = 667;
                                func4256.definitionModule = "ast";
                                var func4270 = function(argcv) {    // method pretty(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_depth = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                  setModuleName("ast");
                                  setLineNumber(675);    // compilenode string
                                  var string4271 = new GraceString("");
                                  var var_spc = string4271;
                                  setLineNumber(676);    // compilenode num
                                  var opresult4274 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                  var block4275 = new GraceBlock(this, 676, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4275.real = function(var_i) {
                                    setLineNumber(677);    // compilenode string
                                    var string4276 = new GraceString("  ");
                                    var opresult4279 = callmethodChecked(var_spc, "++", [1], string4276);
                                    var_spc = opresult4279;
                                    return GraceDone;
                                  };
                                  var call4280 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult4274, block4275);
                                  setLineNumber(679);    // compilenode string
                                  var string4281 = new GraceString("\n");
                                  var call4283 = callmethodsuper(this, "pretty", [1], var_depth);
                                  var string4285 = new GraceString("");
                                  var opresult4287 = callmethodChecked(string4285, "++", [1], call4283);
                                  var opresult4289 = callmethodChecked(opresult4287, "++", [1], string4281);
                                  var var_s = opresult4289;
                                  setLineNumber(680);    // compilenode string
                                  var string4290 = new GraceString("Types:");
                                  var opresult4294 = callmethodChecked(var_s, "++", [1], var_spc);
                                  var opresult4296 = callmethodChecked(opresult4294, "++", [1], string4290);
                                  var_s = opresult4296;
                                  setLineNumber(681);    // compilenode call
                                  onSelf = true;
                                  var call4297 = callmethodChecked(this, "types", [0]);
                                  var block4298 = new GraceBlock(this, 681, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4298.real = function(var_each) {
                                    setLineNumber(682);    // compilenode identifier
                                    var opresult4301 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                    var call4302 = callmethodChecked(var_each, "pretty", [1], opresult4301);
                                    var string4305 = new GraceString("\n  ");
                                    var opresult4308 = callmethodChecked(var_s, "++", [1], string4305);
                                    var opresult4310 = callmethodChecked(opresult4308, "++", [1], var_spc);
                                    var opresult4312 = callmethodChecked(opresult4310, "++", [1], call4302);
                                    var_s = opresult4312;
                                    return GraceDone;
                                  };
                                  var call4313 = callmethodChecked(var_prelude, "for()do", [1, 1], call4297, block4298);
                                  setLineNumber(684);    // compilenode string
                                  var string4314 = new GraceString("Methods:");
                                  var string4317 = new GraceString("\n");
                                  var opresult4320 = callmethodChecked(var_s, "++", [1], string4317);
                                  var opresult4322 = callmethodChecked(opresult4320, "++", [1], var_spc);
                                  var opresult4324 = callmethodChecked(opresult4322, "++", [1], string4314);
                                  var_s = opresult4324;
                                  setLineNumber(685);    // compilenode call
                                  onSelf = true;
                                  var call4325 = callmethodChecked(this, "methods", [0]);
                                  var block4326 = new GraceBlock(this, 685, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4326.real = function(var_each) {
                                    setLineNumber(686);    // compilenode identifier
                                    var opresult4329 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                    var call4330 = callmethodChecked(var_each, "pretty", [1], opresult4329);
                                    var string4333 = new GraceString("\n  ");
                                    var opresult4336 = callmethodChecked(var_s, "++", [1], string4333);
                                    var opresult4338 = callmethodChecked(opresult4336, "++", [1], var_spc);
                                    var opresult4340 = callmethodChecked(opresult4338, "++", [1], call4330);
                                    var_s = opresult4340;
                                    return GraceDone;
                                  };
                                  var call4341 = callmethodChecked(var_prelude, "for()do", [1, 1], call4325, block4326);
                                  setLineNumber(688);    // compilenode string
                                  var string4342 = new GraceString("\n");
                                  var opresult4345 = callmethodChecked(var_s, "++", [1], string4342);
                                  var_s = opresult4345;
                                  setLineNumber(689);    // compilenode identifier
                                  return var_s;
                                };
                                func4270.paramCounts = [1];
                                obj4216.methods["pretty"] = func4270;
                                func4270.definitionLine = 674;
                                func4270.definitionModule = "ast";
                                var func4346 = function(argcv) {    // method toGrace(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_depth = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(691);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("ast");
                                  setLineNumber(692);    // compilenode string
                                  var string4347 = new GraceString("");
                                  var var_spc = string4347;
                                  setLineNumber(693);    // compilenode identifier
                                  var diff4350 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                  var opresult4353 = callmethodChecked(new GraceNum(0), "..", [1], diff4350);
                                  var block4354 = new GraceBlock(this, 693, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4354.real = function(var_i) {
                                    setLineNumber(694);    // compilenode string
                                    var string4355 = new GraceString("    ");
                                    var opresult4358 = callmethodChecked(var_spc, "++", [1], string4355);
                                    var_spc = opresult4358;
                                    return GraceDone;
                                  };
                                  var call4359 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult4353, block4354);
                                  setLineNumber(696);    // compilenode string
                                  var string4360 = new GraceString("type");
                                  var var_s = string4360;
                                  setLineNumber(697);    // compilenode string
                                  var string4361 = new GraceString(" = {");
                                  var opresult4364 = callmethodChecked(var_s, "++", [1], string4361);
                                  var_s = opresult4364;
                                  setLineNumber(698);    // compilenode call
                                  onSelf = true;
                                  var call4365 = callmethodChecked(this, "methods", [0]);
                                  var block4366 = new GraceBlock(this, 698, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4366.real = function(var_each) {
                                    setLineNumber(699);    // compilenode identifier
                                    var opresult4369 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                    var call4370 = callmethodChecked(var_each, "toGrace", [1], opresult4369);
                                    var string4372 = new GraceString("    ");
                                    var string4375 = new GraceString("\n");
                                    var opresult4378 = callmethodChecked(var_s, "++", [1], string4375);
                                    var opresult4380 = callmethodChecked(opresult4378, "++", [1], var_spc);
                                    var opresult4382 = callmethodChecked(opresult4380, "++", [1], string4372);
                                    var opresult4384 = callmethodChecked(opresult4382, "++", [1], call4370);
                                    var_s = opresult4384;
                                    return GraceDone;
                                  };
                                  var call4385 = callmethodChecked(var_prelude, "for()do", [1, 1], call4365, block4366);
                                  setLineNumber(701);    // compilenode call
                                  onSelf = true;
                                  var call4386 = callmethodChecked(this, "types", [0]);
                                  var block4387 = new GraceBlock(this, 701, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4387.real = function(var_each) {
                                    setLineNumber(702);    // compilenode identifier
                                    var opresult4390 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                    var call4391 = callmethodChecked(var_each, "toGrace", [1], opresult4390);
                                    var string4393 = new GraceString("    ");
                                    var string4396 = new GraceString("\n");
                                    var opresult4399 = callmethodChecked(var_s, "++", [1], string4396);
                                    var opresult4401 = callmethodChecked(opresult4399, "++", [1], var_spc);
                                    var opresult4403 = callmethodChecked(opresult4401, "++", [1], string4393);
                                    var opresult4405 = callmethodChecked(opresult4403, "++", [1], call4391);
                                    var_s = opresult4405;
                                    return GraceDone;
                                  };
                                  var call4406 = callmethodChecked(var_prelude, "for()do", [1, 1], call4386, block4387);
                                  setLineNumber(704);    // compilenode string
                                  var string4407 = new GraceString("}");
                                  var opresult4410 = callmethodChecked(var_s, "++", [1], string4407);
                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4410)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method toGrace(1) does not have " + 
                                              callmethod(var_String, "asString", [0])._value + "."));
                                  return opresult4410;
                                };
                                func4346.paramTypes = [];
                                func4346.paramTypes.push([type_Number, "depth"]);
                                func4346.paramCounts = [1];
                                obj4216.methods["toGrace"] = func4346;
                                func4346.definitionLine = 691;
                                func4346.definitionModule = "ast";
                                var func4411 = function(argcv) {    // method shallowCopy
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                  setModuleName("ast");
                                  setLineNumber(707);    // compilenode identifier
                                  var call4412 = callmethodChecked(var_typeLiteralNode, "new", [2], var_emptySeq, var_emptySeq);
                                  var call4413 = callmethodChecked(call4412, "shallowCopyFieldsFrom", [1], this);
                                  return call4413;
                                };
                                func4411.paramCounts = [0];
                                obj4216.methods["shallowCopy"] = func4411;
                                func4411.definitionLine = 706;
                                func4411.definitionModule = "ast";
                                var func4414 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_other = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                  setModuleName("ast");
                                  setLineNumber(710);    // compilenode identifier
                                  var call4415 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                  setLineNumber(711);    // compilenode identifier
                                  var call4416 = callmethodChecked(var_other, "nominal", [0]);
                                  onSelf = true;
                                  var call4417 = callmethodChecked(this, "nominal:=", [1], call4416);
                                  setLineNumber(712);    // compilenode identifier
                                  var call4418 = callmethodChecked(var_other, "anonymous", [0]);
                                  onSelf = true;
                                  var call4419 = callmethodChecked(this, "anonymous:=", [1], call4418);
                                  setLineNumber(713);    // compilenode identifier
                                  var call4420 = callmethodChecked(var_other, "value", [0]);
                                  onSelf = true;
                                  var call4421 = callmethodChecked(this, "value:=", [1], call4420);
                                  setLineNumber(714);    // compilenode identifier
                                  return this;
                                };
                                func4414.paramCounts = [1];
                                obj4216.methods["shallowCopyFieldsFrom"] = func4414;
                                func4414.definitionLine = 709;
                                func4414.definitionModule = "ast";
                                setLineNumber(637);    // compilenode call
                                var call4422 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4423 = callmethodChecked(call4422, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4424 = callmethodChecked(call4423, "baseNode()object", [0, 1], this);
                                obj4216.superobj = call4424;
                                if (call4424.data) obj4216.data = call4424.data;
                                if (call4424.hasOwnProperty('_value'))
                                    obj4216._value = call4424._value;
                                setLineNumber(638);    // compilenode string
                                var string4425 = new GraceString("typeliteral");
                                obj4216.data["kind"] = string4425;
                                var reader_ast_kind4426 = function() {
                                  return this.data["kind"];
                                };
                                reader_ast_kind4426.def = true;
                                obj4216.methods["kind"] = reader_ast_kind4426;
                                setLineNumber(639);    // compilenode identifier
                                obj4216.data["methods"] = var_methods__39__;
                                var reader_ast_methods4427 = function() {
                                  return this.data["methods"];
                                };
                                obj4216.methods["methods"] = reader_ast_methods4427;
                                obj4216.data["methods"] = var_methods__39__;
                                var writer_ast_methods4427 = function(argcv, o) {
                                  this.data["methods"] = o;
                                  return GraceDone;
                                };
                                obj4216.methods["methods:="] = writer_ast_methods4427;
                                obj4216.mutable = true;
                                setLineNumber(640);    // compilenode identifier
                                obj4216.data["types"] = var_types__39__;
                                var reader_ast_types4428 = function() {
                                  return this.data["types"];
                                };
                                obj4216.methods["types"] = reader_ast_types4428;
                                obj4216.data["types"] = var_types__39__;
                                var writer_ast_types4428 = function(argcv, o) {
                                  this.data["types"] = o;
                                  return GraceDone;
                                };
                                obj4216.methods["types:="] = writer_ast_types4428;
                                obj4216.mutable = true;
                                setLineNumber(641);    // compilenode identifier
                                obj4216.data["nominal"] = GraceFalse;
                                var reader_ast_nominal4429 = function() {
                                  return this.data["nominal"];
                                };
                                obj4216.methods["nominal"] = reader_ast_nominal4429;
                                obj4216.data["nominal"] = GraceFalse;
                                var writer_ast_nominal4429 = function(argcv, o) {
                                  this.data["nominal"] = o;
                                  return GraceDone;
                                };
                                obj4216.methods["nominal:="] = writer_ast_nominal4429;
                                obj4216.mutable = true;
                                setLineNumber(642);    // compilenode identifier
                                obj4216.data["anonymous"] = GraceTrue;
                                var reader_ast_anonymous4430 = function() {
                                  return this.data["anonymous"];
                                };
                                obj4216.methods["anonymous"] = reader_ast_anonymous4430;
                                obj4216.data["anonymous"] = GraceTrue;
                                var writer_ast_anonymous4430 = function(argcv, o) {
                                  this.data["anonymous"] = o;
                                  return GraceDone;
                                };
                                obj4216.methods["anonymous:="] = writer_ast_anonymous4430;
                                obj4216.mutable = true;
                                setLineNumber(643);    // compilenode string
                                var string4431 = new GraceString("\u2039anon\u203a");
                                obj4216.data["value"] = string4431;
                                var reader_ast_value4432 = function() {
                                  return this.data["value"];
                                };
                                obj4216.methods["value"] = reader_ast_value4432;
                                obj4216.data["value"] = string4431;
                                var writer_ast_value4432 = function(argcv, o) {
                                  this.data["value"] = o;
                                  return GraceDone;
                                };
                                obj4216.methods["value:="] = writer_ast_value4432;
                                obj4216.mutable = true;
                                superDepth = origSuperDepth;
                              };
                              obj_init_4216.apply(inheritingObject, []);
                              return obj4216;
                              };
                              obj3995.methods["new()object"] = func4215;
                            superDepth = origSuperDepth;
                          };
                          obj_init_3995.apply(obj3995, []);
                          var var_typeLiteralNode = obj3995;
                          setLineNumber(637);    // compilenode method
                          var func4433 = function(argcv) {    // method typeLiteralNode
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for typeLiteralNode"));
                            setModuleName("ast");
                            // typeLiteralNode is a simple accessor - elide try ... catch
                            setLineNumber(635);    // compilenode identifier
                            return var_typeLiteralNode;
                          };
                          func4433.paramCounts = [0];
                          this.methods["typeLiteralNode"] = func4433;
                          func4433.definitionLine = 637;
                          func4433.definitionModule = "ast";
                          this.methods["typeLiteralNode"].debug = "def";
                          setLineNumber(719);    // compilenode object
                          var obj4434 = Grace_allocObject(GraceObject, "typeDecNode");
                          obj4434.definitionModule = "ast";
                          obj4434.definitionLine = 719;
                          obj4434.outer = this;
                          var reader_ast_outer4435 = function() {
                            return this.outer;
                          };
                          obj4434.methods["outer"] = reader_ast_outer4435;
                          var obj_init_4434 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj4434;
                            var func4436 = function(argcv) {    // method new(2)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_name__39__ = arguments[curarg];
                              curarg++;
                              var var_typeValue = arguments[curarg];
                              curarg++;
                              if (argcv[0] !== 2)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(2)"));
                              setModuleName("ast");
                              setLineNumber(720);    // compilenode object
                              var obj4437 = Grace_allocObject(null, "typeDecNode.new");
                              obj4437.definitionModule = "ast";
                              obj4437.definitionLine = 720;
                              obj4437.outer = this;
                              var reader_ast_outer4438 = function() {
                                return this.outer;
                              };
                              obj4437.methods["outer"] = reader_ast_outer4438;
                              var obj_init_4437 = function() {
                                var origSuperDepth = superDepth;
                                superDepth = obj4437;
                                var func4439 = function(argcv) {    // method isLegalInTrait
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLegalInTrait"));
                                  setModuleName("ast");
                                  // isLegalInTrait is a simple accessor - elide try ... catch
                                  setLineNumber(729);    // compilenode identifier
                                  return GraceTrue;
                                };
                                func4439.paramCounts = [0];
                                obj4437.methods["isLegalInTrait"] = func4439;
                                func4439.definitionLine = 729;
                                func4439.definitionModule = "ast";
                                var func4440 = function(argcv) {    // method isTypeDec
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isTypeDec"));
                                  setModuleName("ast");
                                  // isTypeDec is a simple accessor - elide try ... catch
                                  setLineNumber(730);    // compilenode identifier
                                  return GraceTrue;
                                };
                                func4440.paramCounts = [0];
                                obj4437.methods["isTypeDec"] = func4440;
                                func4440.definitionLine = 730;
                                func4440.definitionModule = "ast";
                                var func4441 = function(argcv) {    // method scope:=(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_st = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
                                  setModuleName("ast");
                                  setLineNumber(734);    // compilenode identifier
                                  onSelf = true;
                                  var call4442 = callmethodChecked(this, "symbolTable:=", [1], var_st);
                                  setLineNumber(735);    // compilenode identifier
                                  var call4443 = callmethodChecked(var_st, "node:=", [1], this);
                                  return call4443;
                                };
                                func4441.paramCounts = [1];
                                obj4437.methods["scope:="] = func4441;
                                func4441.definitionLine = 731;
                                func4441.definitionModule = "ast";
                                var func4444 = function(argcv) {    // method isExecutable
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                  setModuleName("ast");
                                  // isExecutable is a simple accessor - elide try ... catch
                                  setLineNumber(738);    // compilenode identifier
                                  return GraceTrue;
                                };
                                func4444.paramCounts = [0];
                                obj4437.methods["isExecutable"] = func4444;
                                func4444.definitionLine = 738;
                                func4444.definitionModule = "ast";
                                var func4445 = function(argcv) {    // method declarationKindWithAncestors(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                  setModuleName("ast");
                                  setLineNumber(739);    // compilenode identifier
                                  var call4446 = callmethodChecked(var_k, "typeparam", [0]);
                                  return call4446;
                                };
                                func4445.paramCounts = [1];
                                obj4437.methods["declarationKindWithAncestors"] = func4445;
                                func4445.definitionLine = 739;
                                func4445.definitionModule = "ast";
                                var func4447 = function(argcv) {    // method isConfidential
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isConfidential"));
                                  setModuleName("ast");
                                  var if4448 = GraceDone;
                                  setLineNumber(741);    // compilenode call
                                  onSelf = true;
                                  var call4450 = callmethodChecked(this, "annotations", [0]);
                                  var call4451 = callmethodChecked(call4450, "size", [0]);
                                  var opresult4453 = callmethodChecked(call4451, "==", [1], new GraceNum(0));
                                  if (Grace_isTrue(opresult4453)) {
                                    return GraceFalse;
                                  }
                                  setLineNumber(742);    // compilenode string
                                  var string4454 = new GraceString("confidential");
                                  var call4455 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4456 = callmethodChecked(call4455, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4457 = callmethodChecked(call4456, "findAnnotation", [2], this, string4454);
                                  return call4457;
                                };
                                func4447.paramCounts = [0];
                                obj4437.methods["isConfidential"] = func4447;
                                func4447.definitionLine = 740;
                                func4447.definitionModule = "ast";
                                var func4458 = function(argcv) {    // method isPublic
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
                                  setModuleName("ast");
                                  setLineNumber(744);    // compilenode call
                                  onSelf = true;
                                  var call4459 = callmethodChecked(this, "isConfidential", [0]);
                                  var call4460 = callmethodChecked(call4459, "not", [0]);
                                  return call4460;
                                };
                                func4458.paramCounts = [0];
                                obj4437.methods["isPublic"] = func4458;
                                func4458.definitionLine = 744;
                                func4458.definitionModule = "ast";
                                var func4461 = function(argcv) {    // method isWritable
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
                                  setModuleName("ast");
                                  // isWritable is a simple accessor - elide try ... catch
                                  setLineNumber(745);    // compilenode identifier
                                  return GraceFalse;
                                };
                                func4461.paramCounts = [0];
                                obj4437.methods["isWritable"] = func4461;
                                func4461.definitionLine = 745;
                                func4461.definitionModule = "ast";
                                var func4462 = function(argcv) {    // method isReadable
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
                                  setModuleName("ast");
                                  setLineNumber(746);    // compilenode call
                                  onSelf = true;
                                  var call4463 = callmethodChecked(this, "isPublic", [0]);
                                  return call4463;
                                };
                                func4462.paramCounts = [0];
                                obj4437.methods["isReadable"] = func4462;
                                func4462.definitionLine = 746;
                                func4462.definitionModule = "ast";
                                var func4464 = function(argcv) {    // method accept(1)from(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_visitor = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  if (argcv[1] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(748);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                  curarg++;
                                  curarg++;
                                  // End argument checking
                                  setModuleName("ast");
                                  var if4465 = GraceDone;
                                  setLineNumber(749);    // compilenode identifier
                                  var call4466 = callmethodChecked(var_visitor, "visitTypeDec()up", [1, 1], this, var_as);
                                  if (Grace_isTrue(call4466)) {
                                    setLineNumber(750);    // compilenode identifier
                                    var call4467 = callmethodChecked(var_as, "extend", [1], this);
                                    var var_newChain = call4467;
                                    setLineNumber(751);    // compilenode call
                                    onSelf = true;
                                    var call4468 = callmethodChecked(this, "name", [0]);
                                    var call4469 = callmethodChecked(call4468, "accept()from", [1, 1], var_visitor, var_newChain);
                                    var if4470 = GraceDone;
                                    setLineNumber(752);    // compilenode call
                                    onSelf = true;
                                    var call4471 = callmethodChecked(this, "typeParams", [0]);
                                    var opresult4474 = callmethodChecked(GraceFalse, "\u2260", [1], call4471);
                                    if (Grace_isTrue(opresult4474)) {
                                      setLineNumber(753);    // compilenode call
                                      onSelf = true;
                                      var call4475 = callmethodChecked(this, "typeParams", [0]);
                                      var call4476 = callmethodChecked(call4475, "accept()from", [1, 1], var_visitor, var_newChain);
                                      if4470 = call4476;
                                    }
                                    setLineNumber(755);    // compilenode block
                                    var block4477 = new GraceBlock(this, 755, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block4477.real = function(var_each) {
                                      setLineNumber(755);    // compilenode identifier
                                      var call4478 = callmethodChecked(var_each, "accept()from", [1, 1], var_visitor, var_newChain);
                                      return call4478;
                                    };
                                    onSelf = true;
                                    var call4479 = callmethodChecked(this, "annotations", [0]);
                                    var call4480 = callmethodChecked(call4479, "do", [1], block4477);
                                    setLineNumber(756);    // compilenode call
                                    onSelf = true;
                                    var call4481 = callmethodChecked(this, "value", [0]);
                                    var call4482 = callmethodChecked(call4481, "accept()from", [1, 1], var_visitor, var_newChain);
                                    if4465 = call4482;
                                  }
                                  return if4465;
                                };
                                func4464.paramTypes = [];
                                func4464.paramTypes.push([]);
                                func4464.paramTypes.push([]);
                                func4464.paramCounts = [1, 1];
                                obj4437.methods["accept()from"] = func4464;
                                func4464.definitionLine = 748;
                                func4464.definitionModule = "ast";
                                var func4483 = function(argcv) {    // method map(1)ancestors(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_blk = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  if (argcv[1] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                  setModuleName("ast");
                                  setLineNumber(760);    // compilenode call
                                  onSelf = true;
                                  var call4484 = callmethodChecked(this, "shallowCopy", [0]);
                                  var var_n = call4484;
                                  setLineNumber(761);    // compilenode identifier
                                  var call4485 = callmethodChecked(var_as, "extend", [1], var_n);
                                  var var_newChain = call4485;
                                  setLineNumber(762);    // compilenode call
                                  onSelf = true;
                                  var call4486 = callmethodChecked(this, "name", [0]);
                                  var call4487 = callmethodChecked(call4486, "map()ancestors", [1, 1], var_blk, var_newChain);
                                  var call4488 = callmethodChecked(var_n, "name:=", [1], call4487);
                                  setLineNumber(763);    // compilenode call
                                  onSelf = true;
                                  var call4489 = callmethodChecked(this, "typeParams", [0]);
                                  var call4490 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4491 = callmethodChecked(call4490, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4492 = callmethodChecked(call4491, "maybeMap()ancestors", [2, 1], call4489, var_blk, var_newChain);
                                  var call4493 = callmethodChecked(var_n, "typeParams:=", [1], call4492);
                                  setLineNumber(764);    // compilenode call
                                  onSelf = true;
                                  var call4494 = callmethodChecked(this, "value", [0]);
                                  var call4495 = callmethodChecked(call4494, "map()ancestors", [1, 1], var_blk, var_newChain);
                                  var call4496 = callmethodChecked(var_n, "value:=", [1], call4495);
                                  setLineNumber(765);    // compilenode call
                                  onSelf = true;
                                  var call4497 = callmethodChecked(this, "annotations", [0]);
                                  var call4498 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4499 = callmethodChecked(call4498, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4500 = callmethodChecked(call4499, "listMap()ancestors", [2, 1], call4497, var_blk, var_newChain);
                                  var call4501 = callmethodChecked(var_n, "annotations:=", [1], call4500);
                                  setLineNumber(766);    // compilenode identifier
                                  var call4502 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                  return call4502;
                                };
                                func4483.paramCounts = [1, 1];
                                obj4437.methods["map()ancestors"] = func4483;
                                func4483.definitionLine = 759;
                                func4483.definitionModule = "ast";
                                var func4503 = function(argcv) {    // method pretty(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_depth = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                  setModuleName("ast");
                                  setLineNumber(769);    // compilenode string
                                  var string4504 = new GraceString("");
                                  var var_spc = string4504;
                                  setLineNumber(770);    // compilenode num
                                  var opresult4507 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                  var block4508 = new GraceBlock(this, 770, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4508.real = function(var_i) {
                                    setLineNumber(771);    // compilenode string
                                    var string4509 = new GraceString("  ");
                                    var opresult4512 = callmethodChecked(var_spc, "++", [1], string4509);
                                    var_spc = opresult4512;
                                    return GraceDone;
                                  };
                                  var call4513 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult4507, block4508);
                                  setLineNumber(773);    // compilenode string
                                  var string4514 = new GraceString("\n");
                                  var call4516 = callmethodsuper(this, "pretty", [1], var_depth);
                                  var opresult4518 = callmethodChecked(call4516, "++", [1], string4514);
                                  var var_s = opresult4518;
                                  setLineNumber(774);    // compilenode string
                                  var string4519 = new GraceString("\n");
                                  var opresult4523 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                  onSelf = true;
                                  var call4524 = callmethodChecked(this, "name", [0]);
                                  var call4525 = callmethodChecked(call4524, "pretty", [1], opresult4523);
                                  var opresult4529 = callmethodChecked(var_s, "++", [1], var_spc);
                                  var opresult4531 = callmethodChecked(opresult4529, "++", [1], call4525);
                                  var opresult4533 = callmethodChecked(opresult4531, "++", [1], string4519);
                                  var_s = opresult4533;
                                  var if4534 = GraceDone;
                                  setLineNumber(775);    // compilenode call
                                  onSelf = true;
                                  var call4535 = callmethodChecked(this, "typeParams", [0]);
                                  var opresult4538 = callmethodChecked(GraceFalse, "\u2260", [1], call4535);
                                  if (Grace_isTrue(opresult4538)) {
                                    setLineNumber(776);    // compilenode string
                                    var string4539 = new GraceString("\n");
                                    var opresult4543 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                    onSelf = true;
                                    var call4544 = callmethodChecked(this, "typeParams", [0]);
                                    var call4545 = callmethodChecked(call4544, "pretty", [1], opresult4543);
                                    var string4547 = new GraceString("Type parameters:\n");
                                    var string4550 = new GraceString("");
                                    var string4553 = new GraceString("");
                                    var opresult4555 = callmethodChecked(string4553, "++", [1], var_s);
                                    var opresult4557 = callmethodChecked(opresult4555, "++", [1], string4550);
                                    var opresult4559 = callmethodChecked(opresult4557, "++", [1], var_spc);
                                    var opresult4561 = callmethodChecked(opresult4559, "++", [1], string4547);
                                    var opresult4563 = callmethodChecked(opresult4561, "++", [1], call4545);
                                    var opresult4565 = callmethodChecked(opresult4563, "++", [1], string4539);
                                    var_s = opresult4565;
                                    if4534 = GraceDone;
                                  }
                                  setLineNumber(778);    // compilenode string
                                  var string4566 = new GraceString("Value:");
                                  var opresult4570 = callmethodChecked(var_s, "++", [1], var_spc);
                                  var opresult4572 = callmethodChecked(opresult4570, "++", [1], string4566);
                                  var_s = opresult4572;
                                  setLineNumber(779);    // compilenode identifier
                                  var opresult4575 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                  onSelf = true;
                                  var call4576 = callmethodChecked(this, "value", [0]);
                                  var call4577 = callmethodChecked(call4576, "pretty", [1], opresult4575);
                                  var opresult4580 = callmethodChecked(var_s, "++", [1], call4577);
                                  var_s = opresult4580;
                                  setLineNumber(780);    // compilenode string
                                  var string4581 = new GraceString("\n");
                                  var opresult4584 = callmethodChecked(var_s, "++", [1], string4581);
                                  var_s = opresult4584;
                                  var if4585 = GraceDone;
                                  setLineNumber(781);    // compilenode call
                                  onSelf = true;
                                  var call4586 = callmethodChecked(this, "comments", [0]);
                                  var opresult4589 = callmethodChecked(GraceFalse, "\u2260", [1], call4586);
                                  if (Grace_isTrue(opresult4589)) {
                                    setLineNumber(782);    // compilenode identifier
                                    var opresult4592 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                    onSelf = true;
                                    var call4593 = callmethodChecked(this, "comments", [0]);
                                    var call4594 = callmethodChecked(call4593, "pretty", [1], opresult4592);
                                    var opresult4597 = callmethodChecked(var_s, "++", [1], call4594);
                                    var_s = opresult4597;
                                    if4585 = GraceDone;
                                  }
                                  setLineNumber(784);    // compilenode identifier
                                  return var_s;
                                };
                                func4503.paramCounts = [1];
                                obj4437.methods["pretty"] = func4503;
                                func4503.definitionLine = 768;
                                func4503.definitionModule = "ast";
                                var func4598 = function(argcv) {    // method toGrace(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_depth = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(786);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("ast");
                                  setLineNumber(787);    // compilenode string
                                  var string4599 = new GraceString("");
                                  var var_spc = string4599;
                                  setLineNumber(788);    // compilenode identifier
                                  var diff4602 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                  var opresult4605 = callmethodChecked(new GraceNum(0), "..", [1], diff4602);
                                  var block4606 = new GraceBlock(this, 788, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4606.real = function(var_i) {
                                    setLineNumber(789);    // compilenode string
                                    var string4607 = new GraceString("    ");
                                    var opresult4610 = callmethodChecked(var_spc, "++", [1], string4607);
                                    var_spc = opresult4610;
                                    return GraceDone;
                                  };
                                  var call4611 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult4605, block4606);
                                  setLineNumber(791);    // compilenode string
                                  var string4612 = new GraceString("");
                                  var var_s = string4612;
                                  setLineNumber(792);    // compilenode string
                                  var string4613 = new GraceString("");
                                  onSelf = true;
                                  var call4615 = callmethodChecked(this, "name", [0]);
                                  var string4617 = new GraceString("type ");
                                  var opresult4619 = callmethodChecked(string4617, "++", [1], call4615);
                                  var opresult4621 = callmethodChecked(opresult4619, "++", [1], string4613);
                                  var_s = opresult4621;
                                  var if4622 = GraceDone;
                                  setLineNumber(793);    // compilenode call
                                  onSelf = true;
                                  var call4623 = callmethodChecked(this, "typeParams", [0]);
                                  var opresult4626 = callmethodChecked(GraceFalse, "\u2260", [1], call4623);
                                  if (Grace_isTrue(opresult4626)) {
                                    setLineNumber(794);    // compilenode call
                                    onSelf = true;
                                    var call4627 = callmethodChecked(this, "typeParams", [0]);
                                    var call4628 = callmethodChecked(call4627, "toGrace", [1], new GraceNum(0));
                                    if4622 = call4628;
                                  }
                                  setLineNumber(796);    // compilenode identifier
                                  var opresult4631 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                  onSelf = true;
                                  var call4632 = callmethodChecked(this, "value", [0]);
                                  var call4633 = callmethodChecked(call4632, "toGrace", [1], opresult4631);
                                  var string4635 = new GraceString(" = ");
                                  var opresult4638 = callmethodChecked(var_s, "++", [1], string4635);
                                  var opresult4640 = callmethodChecked(opresult4638, "++", [1], call4633);
                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4640)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method toGrace(1) does not have " + 
                                              callmethod(var_String, "asString", [0])._value + "."));
                                  return opresult4640;
                                };
                                func4598.paramTypes = [];
                                func4598.paramTypes.push([type_Number, "depth"]);
                                func4598.paramCounts = [1];
                                obj4437.methods["toGrace"] = func4598;
                                func4598.definitionLine = 786;
                                func4598.definitionModule = "ast";
                                var func4641 = function(argcv) {    // method shallowCopy
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                  setModuleName("ast");
                                  setLineNumber(799);    // compilenode call
                                  onSelf = true;
                                  var call4642 = callmethodChecked(this, "name", [0]);
                                  var call4643 = callmethodChecked(var_typeDecNode, "new", [2], call4642, var_nullNode);
                                  var call4644 = callmethodChecked(call4643, "shallowCopyFieldsFrom", [1], this);
                                  return call4644;
                                };
                                func4641.paramCounts = [0];
                                obj4437.methods["shallowCopy"] = func4641;
                                func4641.definitionLine = 798;
                                func4641.definitionModule = "ast";
                                setLineNumber(721);    // compilenode call
                                var call4645 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4646 = callmethodChecked(call4645, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call4647 = callmethodChecked(call4646, "baseNode()object", [0, 1], this);
                                obj4437.superobj = call4647;
                                if (call4647.data) obj4437.data = call4647.data;
                                if (call4647.hasOwnProperty('_value'))
                                    obj4437._value = call4647._value;
                                setLineNumber(722);    // compilenode string
                                var string4648 = new GraceString("typedec");
                                obj4437.data["kind"] = string4648;
                                var reader_ast_kind4649 = function() {
                                  return this.data["kind"];
                                };
                                reader_ast_kind4649.def = true;
                                obj4437.methods["kind"] = reader_ast_kind4649;
                                setLineNumber(723);    // compilenode identifier
                                obj4437.data["name"] = var_name__39__;
                                var reader_ast_name4650 = function() {
                                  return this.data["name"];
                                };
                                obj4437.methods["name"] = reader_ast_name4650;
                                obj4437.data["name"] = var_name__39__;
                                var writer_ast_name4650 = function(argcv, o) {
                                  this.data["name"] = o;
                                  return GraceDone;
                                };
                                obj4437.methods["name:="] = writer_ast_name4650;
                                obj4437.mutable = true;
                                setLineNumber(724);    // compilenode identifier
                                obj4437.data["value"] = var_typeValue;
                                var reader_ast_value4651 = function() {
                                  return this.data["value"];
                                };
                                obj4437.methods["value"] = reader_ast_value4651;
                                obj4437.data["value"] = var_typeValue;
                                var writer_ast_value4651 = function(argcv, o) {
                                  this.data["value"] = o;
                                  return GraceDone;
                                };
                                obj4437.methods["value:="] = writer_ast_value4651;
                                obj4437.mutable = true;
                                setLineNumber(725);    // compilenode call
                                onSelf = true;
                                var call4652 = callmethodChecked(this, "name", [0]);
                                var call4653 = callmethodChecked(call4652, "value", [0]);
                                obj4437.data["nameString"] = call4653;
                                var reader_ast_nameString4654 = function() {
                                  return this.data["nameString"];
                                };
                                reader_ast_nameString4654.def = true;
                                obj4437.methods["nameString"] = reader_ast_nameString4654;
                                if (!Grace_isTrue(callmethod(var_String, "match", [1], call4653)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("value of def 'nameString' is not of type String"));
                                setLineNumber(726);    // compilenode array
                                var array4655 = new PrimitiveGraceList([]);
                                obj4437.data["annotations"] = array4655;
                                var reader_ast_annotations4656 = function() {
                                  return this.data["annotations"];
                                };
                                obj4437.methods["annotations"] = reader_ast_annotations4656;
                                obj4437.data["annotations"] = array4655;
                                var writer_ast_annotations4656 = function(argcv, o) {
                                  this.data["annotations"] = o;
                                  return GraceDone;
                                };
                                obj4437.methods["annotations:="] = writer_ast_annotations4656;
                                obj4437.mutable = true;
                                setLineNumber(727);    // compilenode identifier
                                obj4437.data["typeParams"] = GraceFalse;
                                var reader_ast_typeParams4657 = function() {
                                  return this.data["typeParams"];
                                };
                                obj4437.methods["typeParams"] = reader_ast_typeParams4657;
                                obj4437.data["typeParams"] = GraceFalse;
                                var writer_ast_typeParams4657 = function(argcv, o) {
                                  this.data["typeParams"] = o;
                                  return GraceDone;
                                };
                                obj4437.methods["typeParams:="] = writer_ast_typeParams4657;
                                obj4437.mutable = true;
                                superDepth = origSuperDepth;
                              };
                              obj_init_4437.apply(obj4437, []);
                              return obj4437;
                            };
                            func4436.paramCounts = [2];
                            obj4434.methods["new"] = func4436;
                            func4436.definitionLine = 720;
                            func4436.definitionModule = "ast";
                              var func4658 = function(argcv) {    // method new(2     )()object
                                var curarg = 1;
                                var var_name__39__ = arguments[curarg];
                                curarg++;
                                var var_typeValue = arguments[curarg];
                                curarg++;
                                var inheritingObject = arguments[curarg++];
                                // Start argument processing
                                curarg = 1;
                                curarg++;
                                curarg++;
                                // End argument processing
                                setModuleName("ast");
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var obj4659 = Grace_allocObject(null, "new");
                                obj4659.definitionModule = "ast";
                                obj4659.definitionLine = 720;
                                var inho4659 = inheritingObject;
                                while (inho4659.superobj) inho4659 = inho4659.superobj;
                                inho4659.superobj = obj4659;
                                obj4659.data = inheritingObject.data;
                                if (inheritingObject.hasOwnProperty('_value'))
                                  obj4659._value = inheritingObject._value;
                                obj4659.outer = this;
                                var reader_ast_outer4660 = function() {
                                  return this.outer;
                                };
                                obj4659.methods["outer"] = reader_ast_outer4660;
                                var obj_init_4659 = function() {
                                  var origSuperDepth = superDepth;
                                  superDepth = obj4659;
                                  var func4661 = function(argcv) {    // method isLegalInTrait
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLegalInTrait"));
                                    setModuleName("ast");
                                    // isLegalInTrait is a simple accessor - elide try ... catch
                                    setLineNumber(729);    // compilenode identifier
                                    return GraceTrue;
                                  };
                                  func4661.paramCounts = [0];
                                  obj4659.methods["isLegalInTrait"] = func4661;
                                  func4661.definitionLine = 729;
                                  func4661.definitionModule = "ast";
                                  var func4662 = function(argcv) {    // method isTypeDec
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isTypeDec"));
                                    setModuleName("ast");
                                    // isTypeDec is a simple accessor - elide try ... catch
                                    setLineNumber(730);    // compilenode identifier
                                    return GraceTrue;
                                  };
                                  func4662.paramCounts = [0];
                                  obj4659.methods["isTypeDec"] = func4662;
                                  func4662.definitionLine = 730;
                                  func4662.definitionModule = "ast";
                                  var func4663 = function(argcv) {    // method scope:=(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_st = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
                                    setModuleName("ast");
                                    setLineNumber(734);    // compilenode identifier
                                    onSelf = true;
                                    var call4664 = callmethodChecked(this, "symbolTable:=", [1], var_st);
                                    setLineNumber(735);    // compilenode identifier
                                    var call4665 = callmethodChecked(var_st, "node:=", [1], this);
                                    return call4665;
                                  };
                                  func4663.paramCounts = [1];
                                  obj4659.methods["scope:="] = func4663;
                                  func4663.definitionLine = 731;
                                  func4663.definitionModule = "ast";
                                  var func4666 = function(argcv) {    // method isExecutable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                    setModuleName("ast");
                                    // isExecutable is a simple accessor - elide try ... catch
                                    setLineNumber(738);    // compilenode identifier
                                    return GraceTrue;
                                  };
                                  func4666.paramCounts = [0];
                                  obj4659.methods["isExecutable"] = func4666;
                                  func4666.definitionLine = 738;
                                  func4666.definitionModule = "ast";
                                  var func4667 = function(argcv) {    // method declarationKindWithAncestors(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                    setModuleName("ast");
                                    setLineNumber(739);    // compilenode identifier
                                    var call4668 = callmethodChecked(var_k, "typeparam", [0]);
                                    return call4668;
                                  };
                                  func4667.paramCounts = [1];
                                  obj4659.methods["declarationKindWithAncestors"] = func4667;
                                  func4667.definitionLine = 739;
                                  func4667.definitionModule = "ast";
                                  var func4669 = function(argcv) {    // method isConfidential
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isConfidential"));
                                    setModuleName("ast");
                                    var if4670 = GraceDone;
                                    setLineNumber(741);    // compilenode call
                                    onSelf = true;
                                    var call4672 = callmethodChecked(this, "annotations", [0]);
                                    var call4673 = callmethodChecked(call4672, "size", [0]);
                                    var opresult4675 = callmethodChecked(call4673, "==", [1], new GraceNum(0));
                                    if (Grace_isTrue(opresult4675)) {
                                      return GraceFalse;
                                    }
                                    setLineNumber(742);    // compilenode string
                                    var string4676 = new GraceString("confidential");
                                    var call4677 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call4678 = callmethodChecked(call4677, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call4679 = callmethodChecked(call4678, "findAnnotation", [2], this, string4676);
                                    return call4679;
                                  };
                                  func4669.paramCounts = [0];
                                  obj4659.methods["isConfidential"] = func4669;
                                  func4669.definitionLine = 740;
                                  func4669.definitionModule = "ast";
                                  var func4680 = function(argcv) {    // method isPublic
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
                                    setModuleName("ast");
                                    setLineNumber(744);    // compilenode call
                                    onSelf = true;
                                    var call4681 = callmethodChecked(this, "isConfidential", [0]);
                                    var call4682 = callmethodChecked(call4681, "not", [0]);
                                    return call4682;
                                  };
                                  func4680.paramCounts = [0];
                                  obj4659.methods["isPublic"] = func4680;
                                  func4680.definitionLine = 744;
                                  func4680.definitionModule = "ast";
                                  var func4683 = function(argcv) {    // method isWritable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
                                    setModuleName("ast");
                                    // isWritable is a simple accessor - elide try ... catch
                                    setLineNumber(745);    // compilenode identifier
                                    return GraceFalse;
                                  };
                                  func4683.paramCounts = [0];
                                  obj4659.methods["isWritable"] = func4683;
                                  func4683.definitionLine = 745;
                                  func4683.definitionModule = "ast";
                                  var func4684 = function(argcv) {    // method isReadable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
                                    setModuleName("ast");
                                    setLineNumber(746);    // compilenode call
                                    onSelf = true;
                                    var call4685 = callmethodChecked(this, "isPublic", [0]);
                                    return call4685;
                                  };
                                  func4684.paramCounts = [0];
                                  obj4659.methods["isReadable"] = func4684;
                                  func4684.definitionLine = 746;
                                  func4684.definitionModule = "ast";
                                  var func4686 = function(argcv) {    // method accept(1)from(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_visitor = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    if (argcv[1] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                    // Start argument checking
                                    curarg = 1;
                                    setLineNumber(748);    // compilenode identifier
                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                    curarg++;
                                    curarg++;
                                    // End argument checking
                                    setModuleName("ast");
                                    var if4687 = GraceDone;
                                    setLineNumber(749);    // compilenode identifier
                                    var call4688 = callmethodChecked(var_visitor, "visitTypeDec()up", [1, 1], this, var_as);
                                    if (Grace_isTrue(call4688)) {
                                      setLineNumber(750);    // compilenode identifier
                                      var call4689 = callmethodChecked(var_as, "extend", [1], this);
                                      var var_newChain = call4689;
                                      setLineNumber(751);    // compilenode call
                                      onSelf = true;
                                      var call4690 = callmethodChecked(this, "name", [0]);
                                      var call4691 = callmethodChecked(call4690, "accept()from", [1, 1], var_visitor, var_newChain);
                                      var if4692 = GraceDone;
                                      setLineNumber(752);    // compilenode call
                                      onSelf = true;
                                      var call4693 = callmethodChecked(this, "typeParams", [0]);
                                      var opresult4696 = callmethodChecked(GraceFalse, "\u2260", [1], call4693);
                                      if (Grace_isTrue(opresult4696)) {
                                        setLineNumber(753);    // compilenode call
                                        onSelf = true;
                                        var call4697 = callmethodChecked(this, "typeParams", [0]);
                                        var call4698 = callmethodChecked(call4697, "accept()from", [1, 1], var_visitor, var_newChain);
                                        if4692 = call4698;
                                      }
                                      setLineNumber(755);    // compilenode block
                                      var block4699 = new GraceBlock(this, 755, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block4699.real = function(var_each) {
                                        setLineNumber(755);    // compilenode identifier
                                        var call4700 = callmethodChecked(var_each, "accept()from", [1, 1], var_visitor, var_newChain);
                                        return call4700;
                                      };
                                      onSelf = true;
                                      var call4701 = callmethodChecked(this, "annotations", [0]);
                                      var call4702 = callmethodChecked(call4701, "do", [1], block4699);
                                      setLineNumber(756);    // compilenode call
                                      onSelf = true;
                                      var call4703 = callmethodChecked(this, "value", [0]);
                                      var call4704 = callmethodChecked(call4703, "accept()from", [1, 1], var_visitor, var_newChain);
                                      if4687 = call4704;
                                    }
                                    return if4687;
                                  };
                                  func4686.paramTypes = [];
                                  func4686.paramTypes.push([]);
                                  func4686.paramTypes.push([]);
                                  func4686.paramCounts = [1, 1];
                                  obj4659.methods["accept()from"] = func4686;
                                  func4686.definitionLine = 748;
                                  func4686.definitionModule = "ast";
                                  var func4705 = function(argcv) {    // method map(1)ancestors(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_blk = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    if (argcv[1] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                    setModuleName("ast");
                                    setLineNumber(760);    // compilenode call
                                    onSelf = true;
                                    var call4706 = callmethodChecked(this, "shallowCopy", [0]);
                                    var var_n = call4706;
                                    setLineNumber(761);    // compilenode identifier
                                    var call4707 = callmethodChecked(var_as, "extend", [1], var_n);
                                    var var_newChain = call4707;
                                    setLineNumber(762);    // compilenode call
                                    onSelf = true;
                                    var call4708 = callmethodChecked(this, "name", [0]);
                                    var call4709 = callmethodChecked(call4708, "map()ancestors", [1, 1], var_blk, var_newChain);
                                    var call4710 = callmethodChecked(var_n, "name:=", [1], call4709);
                                    setLineNumber(763);    // compilenode call
                                    onSelf = true;
                                    var call4711 = callmethodChecked(this, "typeParams", [0]);
                                    var call4712 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call4713 = callmethodChecked(call4712, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call4714 = callmethodChecked(call4713, "maybeMap()ancestors", [2, 1], call4711, var_blk, var_newChain);
                                    var call4715 = callmethodChecked(var_n, "typeParams:=", [1], call4714);
                                    setLineNumber(764);    // compilenode call
                                    onSelf = true;
                                    var call4716 = callmethodChecked(this, "value", [0]);
                                    var call4717 = callmethodChecked(call4716, "map()ancestors", [1, 1], var_blk, var_newChain);
                                    var call4718 = callmethodChecked(var_n, "value:=", [1], call4717);
                                    setLineNumber(765);    // compilenode call
                                    onSelf = true;
                                    var call4719 = callmethodChecked(this, "annotations", [0]);
                                    var call4720 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call4721 = callmethodChecked(call4720, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call4722 = callmethodChecked(call4721, "listMap()ancestors", [2, 1], call4719, var_blk, var_newChain);
                                    var call4723 = callmethodChecked(var_n, "annotations:=", [1], call4722);
                                    setLineNumber(766);    // compilenode identifier
                                    var call4724 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                    return call4724;
                                  };
                                  func4705.paramCounts = [1, 1];
                                  obj4659.methods["map()ancestors"] = func4705;
                                  func4705.definitionLine = 759;
                                  func4705.definitionModule = "ast";
                                  var func4725 = function(argcv) {    // method pretty(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_depth = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                    setModuleName("ast");
                                    setLineNumber(769);    // compilenode string
                                    var string4726 = new GraceString("");
                                    var var_spc = string4726;
                                    setLineNumber(770);    // compilenode num
                                    var opresult4729 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                    var block4730 = new GraceBlock(this, 770, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block4730.real = function(var_i) {
                                      setLineNumber(771);    // compilenode string
                                      var string4731 = new GraceString("  ");
                                      var opresult4734 = callmethodChecked(var_spc, "++", [1], string4731);
                                      var_spc = opresult4734;
                                      return GraceDone;
                                    };
                                    var call4735 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult4729, block4730);
                                    setLineNumber(773);    // compilenode string
                                    var string4736 = new GraceString("\n");
                                    var call4738 = callmethodsuper(this, "pretty", [1], var_depth);
                                    var opresult4740 = callmethodChecked(call4738, "++", [1], string4736);
                                    var var_s = opresult4740;
                                    setLineNumber(774);    // compilenode string
                                    var string4741 = new GraceString("\n");
                                    var opresult4745 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                    onSelf = true;
                                    var call4746 = callmethodChecked(this, "name", [0]);
                                    var call4747 = callmethodChecked(call4746, "pretty", [1], opresult4745);
                                    var opresult4751 = callmethodChecked(var_s, "++", [1], var_spc);
                                    var opresult4753 = callmethodChecked(opresult4751, "++", [1], call4747);
                                    var opresult4755 = callmethodChecked(opresult4753, "++", [1], string4741);
                                    var_s = opresult4755;
                                    var if4756 = GraceDone;
                                    setLineNumber(775);    // compilenode call
                                    onSelf = true;
                                    var call4757 = callmethodChecked(this, "typeParams", [0]);
                                    var opresult4760 = callmethodChecked(GraceFalse, "\u2260", [1], call4757);
                                    if (Grace_isTrue(opresult4760)) {
                                      setLineNumber(776);    // compilenode string
                                      var string4761 = new GraceString("\n");
                                      var opresult4765 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                      onSelf = true;
                                      var call4766 = callmethodChecked(this, "typeParams", [0]);
                                      var call4767 = callmethodChecked(call4766, "pretty", [1], opresult4765);
                                      var string4769 = new GraceString("Type parameters:\n");
                                      var string4772 = new GraceString("");
                                      var string4775 = new GraceString("");
                                      var opresult4777 = callmethodChecked(string4775, "++", [1], var_s);
                                      var opresult4779 = callmethodChecked(opresult4777, "++", [1], string4772);
                                      var opresult4781 = callmethodChecked(opresult4779, "++", [1], var_spc);
                                      var opresult4783 = callmethodChecked(opresult4781, "++", [1], string4769);
                                      var opresult4785 = callmethodChecked(opresult4783, "++", [1], call4767);
                                      var opresult4787 = callmethodChecked(opresult4785, "++", [1], string4761);
                                      var_s = opresult4787;
                                      if4756 = GraceDone;
                                    }
                                    setLineNumber(778);    // compilenode string
                                    var string4788 = new GraceString("Value:");
                                    var opresult4792 = callmethodChecked(var_s, "++", [1], var_spc);
                                    var opresult4794 = callmethodChecked(opresult4792, "++", [1], string4788);
                                    var_s = opresult4794;
                                    setLineNumber(779);    // compilenode identifier
                                    var opresult4797 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                    onSelf = true;
                                    var call4798 = callmethodChecked(this, "value", [0]);
                                    var call4799 = callmethodChecked(call4798, "pretty", [1], opresult4797);
                                    var opresult4802 = callmethodChecked(var_s, "++", [1], call4799);
                                    var_s = opresult4802;
                                    setLineNumber(780);    // compilenode string
                                    var string4803 = new GraceString("\n");
                                    var opresult4806 = callmethodChecked(var_s, "++", [1], string4803);
                                    var_s = opresult4806;
                                    var if4807 = GraceDone;
                                    setLineNumber(781);    // compilenode call
                                    onSelf = true;
                                    var call4808 = callmethodChecked(this, "comments", [0]);
                                    var opresult4811 = callmethodChecked(GraceFalse, "\u2260", [1], call4808);
                                    if (Grace_isTrue(opresult4811)) {
                                      setLineNumber(782);    // compilenode identifier
                                      var opresult4814 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                      onSelf = true;
                                      var call4815 = callmethodChecked(this, "comments", [0]);
                                      var call4816 = callmethodChecked(call4815, "pretty", [1], opresult4814);
                                      var opresult4819 = callmethodChecked(var_s, "++", [1], call4816);
                                      var_s = opresult4819;
                                      if4807 = GraceDone;
                                    }
                                    setLineNumber(784);    // compilenode identifier
                                    return var_s;
                                  };
                                  func4725.paramCounts = [1];
                                  obj4659.methods["pretty"] = func4725;
                                  func4725.definitionLine = 768;
                                  func4725.definitionModule = "ast";
                                  var func4820 = function(argcv) {    // method toGrace(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_depth = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                    // Start argument checking
                                    curarg = 1;
                                    setLineNumber(786);    // compilenode identifier
                                    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                callmethod(var_Number, "asString", [0])._value + "."));
                                    curarg++;
                                    // End argument checking
                                    setModuleName("ast");
                                    setLineNumber(787);    // compilenode string
                                    var string4821 = new GraceString("");
                                    var var_spc = string4821;
                                    setLineNumber(788);    // compilenode identifier
                                    var diff4824 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                    var opresult4827 = callmethodChecked(new GraceNum(0), "..", [1], diff4824);
                                    var block4828 = new GraceBlock(this, 788, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block4828.real = function(var_i) {
                                      setLineNumber(789);    // compilenode string
                                      var string4829 = new GraceString("    ");
                                      var opresult4832 = callmethodChecked(var_spc, "++", [1], string4829);
                                      var_spc = opresult4832;
                                      return GraceDone;
                                    };
                                    var call4833 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult4827, block4828);
                                    setLineNumber(791);    // compilenode string
                                    var string4834 = new GraceString("");
                                    var var_s = string4834;
                                    setLineNumber(792);    // compilenode string
                                    var string4835 = new GraceString("");
                                    onSelf = true;
                                    var call4837 = callmethodChecked(this, "name", [0]);
                                    var string4839 = new GraceString("type ");
                                    var opresult4841 = callmethodChecked(string4839, "++", [1], call4837);
                                    var opresult4843 = callmethodChecked(opresult4841, "++", [1], string4835);
                                    var_s = opresult4843;
                                    var if4844 = GraceDone;
                                    setLineNumber(793);    // compilenode call
                                    onSelf = true;
                                    var call4845 = callmethodChecked(this, "typeParams", [0]);
                                    var opresult4848 = callmethodChecked(GraceFalse, "\u2260", [1], call4845);
                                    if (Grace_isTrue(opresult4848)) {
                                      setLineNumber(794);    // compilenode call
                                      onSelf = true;
                                      var call4849 = callmethodChecked(this, "typeParams", [0]);
                                      var call4850 = callmethodChecked(call4849, "toGrace", [1], new GraceNum(0));
                                      if4844 = call4850;
                                    }
                                    setLineNumber(796);    // compilenode identifier
                                    var opresult4853 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                    onSelf = true;
                                    var call4854 = callmethodChecked(this, "value", [0]);
                                    var call4855 = callmethodChecked(call4854, "toGrace", [1], opresult4853);
                                    var string4857 = new GraceString(" = ");
                                    var opresult4860 = callmethodChecked(var_s, "++", [1], string4857);
                                    var opresult4862 = callmethodChecked(opresult4860, "++", [1], call4855);
                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4862)))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("result of method toGrace(1) does not have " + 
                                                callmethod(var_String, "asString", [0])._value + "."));
                                    return opresult4862;
                                  };
                                  func4820.paramTypes = [];
                                  func4820.paramTypes.push([type_Number, "depth"]);
                                  func4820.paramCounts = [1];
                                  obj4659.methods["toGrace"] = func4820;
                                  func4820.definitionLine = 786;
                                  func4820.definitionModule = "ast";
                                  var func4863 = function(argcv) {    // method shallowCopy
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                    setModuleName("ast");
                                    setLineNumber(799);    // compilenode call
                                    onSelf = true;
                                    var call4864 = callmethodChecked(this, "name", [0]);
                                    var call4865 = callmethodChecked(var_typeDecNode, "new", [2], call4864, var_nullNode);
                                    var call4866 = callmethodChecked(call4865, "shallowCopyFieldsFrom", [1], this);
                                    return call4866;
                                  };
                                  func4863.paramCounts = [0];
                                  obj4659.methods["shallowCopy"] = func4863;
                                  func4863.definitionLine = 798;
                                  func4863.definitionModule = "ast";
                                  setLineNumber(721);    // compilenode call
                                  var call4867 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4868 = callmethodChecked(call4867, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call4869 = callmethodChecked(call4868, "baseNode()object", [0, 1], this);
                                  obj4659.superobj = call4869;
                                  if (call4869.data) obj4659.data = call4869.data;
                                  if (call4869.hasOwnProperty('_value'))
                                      obj4659._value = call4869._value;
                                  setLineNumber(722);    // compilenode string
                                  var string4870 = new GraceString("typedec");
                                  obj4659.data["kind"] = string4870;
                                  var reader_ast_kind4871 = function() {
                                    return this.data["kind"];
                                  };
                                  reader_ast_kind4871.def = true;
                                  obj4659.methods["kind"] = reader_ast_kind4871;
                                  setLineNumber(723);    // compilenode identifier
                                  obj4659.data["name"] = var_name__39__;
                                  var reader_ast_name4872 = function() {
                                    return this.data["name"];
                                  };
                                  obj4659.methods["name"] = reader_ast_name4872;
                                  obj4659.data["name"] = var_name__39__;
                                  var writer_ast_name4872 = function(argcv, o) {
                                    this.data["name"] = o;
                                    return GraceDone;
                                  };
                                  obj4659.methods["name:="] = writer_ast_name4872;
                                  obj4659.mutable = true;
                                  setLineNumber(724);    // compilenode identifier
                                  obj4659.data["value"] = var_typeValue;
                                  var reader_ast_value4873 = function() {
                                    return this.data["value"];
                                  };
                                  obj4659.methods["value"] = reader_ast_value4873;
                                  obj4659.data["value"] = var_typeValue;
                                  var writer_ast_value4873 = function(argcv, o) {
                                    this.data["value"] = o;
                                    return GraceDone;
                                  };
                                  obj4659.methods["value:="] = writer_ast_value4873;
                                  obj4659.mutable = true;
                                  setLineNumber(725);    // compilenode call
                                  onSelf = true;
                                  var call4874 = callmethodChecked(this, "name", [0]);
                                  var call4875 = callmethodChecked(call4874, "value", [0]);
                                  obj4659.data["nameString"] = call4875;
                                  var reader_ast_nameString4876 = function() {
                                    return this.data["nameString"];
                                  };
                                  reader_ast_nameString4876.def = true;
                                  obj4659.methods["nameString"] = reader_ast_nameString4876;
                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], call4875)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("value of def 'nameString' is not of type String"));
                                  setLineNumber(726);    // compilenode array
                                  var array4877 = new PrimitiveGraceList([]);
                                  obj4659.data["annotations"] = array4877;
                                  var reader_ast_annotations4878 = function() {
                                    return this.data["annotations"];
                                  };
                                  obj4659.methods["annotations"] = reader_ast_annotations4878;
                                  obj4659.data["annotations"] = array4877;
                                  var writer_ast_annotations4878 = function(argcv, o) {
                                    this.data["annotations"] = o;
                                    return GraceDone;
                                  };
                                  obj4659.methods["annotations:="] = writer_ast_annotations4878;
                                  obj4659.mutable = true;
                                  setLineNumber(727);    // compilenode identifier
                                  obj4659.data["typeParams"] = GraceFalse;
                                  var reader_ast_typeParams4879 = function() {
                                    return this.data["typeParams"];
                                  };
                                  obj4659.methods["typeParams"] = reader_ast_typeParams4879;
                                  obj4659.data["typeParams"] = GraceFalse;
                                  var writer_ast_typeParams4879 = function(argcv, o) {
                                    this.data["typeParams"] = o;
                                    return GraceDone;
                                  };
                                  obj4659.methods["typeParams:="] = writer_ast_typeParams4879;
                                  obj4659.mutable = true;
                                  superDepth = origSuperDepth;
                                };
                                obj_init_4659.apply(inheritingObject, []);
                                return obj4659;
                                };
                                obj4434.methods["new()object"] = func4658;
                              superDepth = origSuperDepth;
                            };
                            obj_init_4434.apply(obj4434, []);
                            var var_typeDecNode = obj4434;
                            setLineNumber(725);    // compilenode method
                            var func4880 = function(argcv) {    // method typeDecNode
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for typeDecNode"));
                              setModuleName("ast");
                              // typeDecNode is a simple accessor - elide try ... catch
                              setLineNumber(719);    // compilenode identifier
                              return var_typeDecNode;
                            };
                            func4880.paramCounts = [0];
                            this.methods["typeDecNode"] = func4880;
                            func4880.definitionLine = 725;
                            func4880.definitionModule = "ast";
                            this.methods["typeDecNode"].debug = "def";
                            setLineNumber(804);    // compilenode object
                            var obj4881 = Grace_allocObject(GraceObject, "methodNode");
                            obj4881.definitionModule = "ast";
                            obj4881.definitionLine = 804;
                            obj4881.outer = this;
                            var reader_ast_outer4882 = function() {
                              return this.outer;
                            };
                            obj4881.methods["outer"] = reader_ast_outer4882;
                            var obj_init_4881 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj4881;
                              var func4883 = function(argcv) {    // method new(4)scope(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_name = arguments[curarg];
                                curarg++;
                                var var_signature = arguments[curarg];
                                curarg++;
                                var var_body = arguments[curarg];
                                curarg++;
                                var var_dtype = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 4)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new (arg list 1) of new(4)scope(1)"));
                                var var_s = arguments[curarg];
                                curarg++;
                                if (argcv[1] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 2) of new(4)scope(1)"));
                                setModuleName("ast");
                                setLineNumber(806);    // compilenode identifier
                                onSelf = true;
                                var call4884 = callmethodChecked(this, "new", [4], var_name, var_signature, var_body, var_dtype);
                                var var_result = call4884;
                                setLineNumber(807);    // compilenode identifier
                                var call4885 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                setLineNumber(808);    // compilenode identifier
                                return var_result;
                              };
                              func4883.paramCounts = [4, 1];
                              obj4881.methods["new()scope"] = func4883;
                              func4883.definitionLine = 805;
                              func4883.definitionModule = "ast";
                              var func4886 = function(argcv) {    // method new(4)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_name__39__ = arguments[curarg];
                                curarg++;
                                var var_signature__39__ = arguments[curarg];
                                curarg++;
                                var var_body__39__ = arguments[curarg];
                                curarg++;
                                var var_dtype__39__ = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 4)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(4)"));
                                setModuleName("ast");
                                setLineNumber(811);    // compilenode object
                                var obj4887 = Grace_allocObject(null, "methodNode.new");
                                obj4887.definitionModule = "ast";
                                obj4887.definitionLine = 811;
                                obj4887.outer = this;
                                var reader_ast_outer4888 = function() {
                                  return this.outer;
                                };
                                obj4887.methods["outer"] = reader_ast_outer4888;
                                var obj_init_4887 = function() {
                                  var origSuperDepth = superDepth;
                                  superDepth = obj4887;
                                  var func4889 = function(argcv) {    // method isMethod
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMethod"));
                                    setModuleName("ast");
                                    // isMethod is a simple accessor - elide try ... catch
                                    setLineNumber(831);    // compilenode identifier
                                    return GraceTrue;
                                  };
                                  func4889.paramCounts = [0];
                                  obj4887.methods["isMethod"] = func4889;
                                  func4889.definitionLine = 831;
                                  func4889.definitionModule = "ast";
                                  var func4890 = function(argcv) {    // method isExecutable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                    setModuleName("ast");
                                    // isExecutable is a simple accessor - elide try ... catch
                                    setLineNumber(832);    // compilenode identifier
                                    return GraceFalse;
                                  };
                                  func4890.paramCounts = [0];
                                  obj4887.methods["isExecutable"] = func4890;
                                  func4890.definitionLine = 832;
                                  func4890.definitionModule = "ast";
                                  var func4891 = function(argcv) {    // method isLegalInTrait
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLegalInTrait"));
                                    setModuleName("ast");
                                    // isLegalInTrait is a simple accessor - elide try ... catch
                                    setLineNumber(833);    // compilenode identifier
                                    return GraceTrue;
                                  };
                                  func4891.paramCounts = [0];
                                  obj4887.methods["isLegalInTrait"] = func4891;
                                  func4891.definitionLine = 833;
                                  func4891.definitionModule = "ast";
                                  var func4892 = function(argcv) {    // method isClass
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isClass"));
                                    setModuleName("ast");
                                    setLineNumber(834);    // compilenode call
                                    onSelf = true;
                                    var call4893 = callmethodChecked(this, "usesClassSyntax", [0]);
                                    onSelf = true;
                                    var call4895 = callmethodChecked(this, "isFresh", [0]);
                                    var opresult4897 = callmethodChecked(call4895, "||", [1], call4893);
                                    return opresult4897;
                                  };
                                  func4892.paramCounts = [0];
                                  obj4887.methods["isClass"] = func4892;
                                  func4892.definitionLine = 834;
                                  func4892.definitionModule = "ast";
                                  var func4898 = function(argcv) {    // method isTrait
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isTrait"));
                                    setModuleName("ast");
                                    var if4899 = GraceDone;
                                    setLineNumber(836);    // compilenode call
                                    onSelf = true;
                                    var call4900 = callmethodChecked(this, "isFresh", [0]);
                                    if (Grace_isTrue(call4900)) {
                                      setLineNumber(837);    // compilenode call
                                      onSelf = true;
                                      var call4901 = callmethodChecked(this, "body", [0]);
                                      var call4902 = callmethodChecked(call4901, "last", [0]);
                                      var call4903 = callmethodChecked(call4902, "isTrait", [0]);
                                      if4899 = call4903;
                                    } else {
                                      setLineNumber(839);    // compilenode identifier
                                      if4899 = GraceFalse;
                                    }
                                    return if4899;
                                  };
                                  func4898.paramCounts = [0];
                                  obj4887.methods["isTrait"] = func4898;
                                  func4898.definitionLine = 835;
                                  func4898.definitionModule = "ast";
                                  var func4904 = function(argcv) {    // method needsArgChecks
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for needsArgChecks"));
                                    setModuleName("ast");
                                    setLineNumber(843);    // compilenode block
                                    var block4905 = new GraceBlock(this, 843, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block4905.real = function(var_part) {
                                      setLineNumber(844);    // compilenode block
                                      var block4906 = new GraceBlock(this, 844, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block4906.real = function(var_p) {
                                        var if4907 = GraceDone;
                                        setLineNumber(845);    // compilenode block
                                        var block4908 = new GraceBlock(this, 845, 0);
                                        block4908.real = function() {
                                          setLineNumber(846);    // compilenode string
                                          var string4909 = new GraceString("Unknown");
                                          var call4911 = callmethodChecked(var_p, "dtype", [0]);
                                          var call4912 = callmethodChecked(call4911, "nameString", [0]);
                                          var opresult4914 = callmethodChecked(call4912, "\u2260", [1], string4909);
                                          return opresult4914;
                                        };
                                        setLineNumber(845);    // compilenode identifier
                                        var call4916 = callmethodChecked(var_p, "dtype", [0]);
                                        var opresult4919 = callmethodChecked(GraceFalse, "\u2260", [1], call4916);
                                        var opresult4921 = callmethodChecked(opresult4919, "&&", [1], block4908);
                                        if (Grace_isTrue(opresult4921)) {
                                          setLineNumber(847);    // compilenode identifier
                                          throw new ReturnException(GraceTrue, returnTarget);
                                        }
                                        return if4907;
                                      };
                                      setLineNumber(844);    // compilenode identifier
                                      var call4922 = callmethodChecked(var_part, "params", [0]);
                                      var call4923 = callmethodChecked(call4922, "do", [1], block4906);
                                      return call4923;
                                    };
                                    setLineNumber(843);    // compilenode call
                                    onSelf = true;
                                    var call4924 = callmethodChecked(this, "signature", [0]);
                                    var call4925 = callmethodChecked(call4924, "do", [1], block4905);
                                    setLineNumber(851);    // compilenode identifier
                                    return GraceFalse;
                                  };
                                  func4904.paramCounts = [0];
                                  obj4887.methods["needsArgChecks"] = func4904;
                                  func4904.definitionLine = 842;
                                  func4904.definitionModule = "ast";
                                  var func4926 = function(argcv) {    // method scope:=(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_st = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
                                    setModuleName("ast");
                                    setLineNumber(856);    // compilenode identifier
                                    onSelf = true;
                                    var call4927 = callmethodChecked(this, "symbolTable:=", [1], var_st);
                                    setLineNumber(857);    // compilenode identifier
                                    var call4928 = callmethodChecked(var_st, "node:=", [1], this);
                                    return call4928;
                                  };
                                  func4926.paramCounts = [1];
                                  obj4887.methods["scope:="] = func4926;
                                  func4926.definitionLine = 853;
                                  func4926.definitionModule = "ast";
                                  var func4929 = function(argcv) {    // method declarationKindWithAncestors(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                    setModuleName("ast");
                                    setLineNumber(859);    // compilenode identifier
                                    var call4930 = callmethodChecked(var_k, "parameter", [0]);
                                    return call4930;
                                  };
                                  func4929.paramCounts = [1];
                                  obj4887.methods["declarationKindWithAncestors"] = func4929;
                                  func4929.definitionLine = 859;
                                  func4929.definitionModule = "ast";
                                  var func4931 = function(argcv) {    // method isConfidential
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isConfidential"));
                                    setModuleName("ast");
                                    var if4932 = GraceDone;
                                    setLineNumber(861);    // compilenode call
                                    onSelf = true;
                                    var call4934 = callmethodChecked(this, "annotations", [0]);
                                    var call4935 = callmethodChecked(call4934, "size", [0]);
                                    var opresult4937 = callmethodChecked(call4935, "==", [1], new GraceNum(0));
                                    if (Grace_isTrue(opresult4937)) {
                                      return GraceFalse;
                                    }
                                    setLineNumber(862);    // compilenode string
                                    var string4938 = new GraceString("confidential");
                                    var call4939 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call4940 = callmethodChecked(call4939, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call4941 = callmethodChecked(call4940, "findAnnotation", [2], this, string4938);
                                    return call4941;
                                  };
                                  func4931.paramCounts = [0];
                                  obj4887.methods["isConfidential"] = func4931;
                                  func4931.definitionLine = 860;
                                  func4931.definitionModule = "ast";
                                  var func4942 = function(argcv) {    // method isPublic
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
                                    setModuleName("ast");
                                    setLineNumber(864);    // compilenode call
                                    onSelf = true;
                                    var call4943 = callmethodChecked(this, "isConfidential", [0]);
                                    var call4944 = callmethodChecked(call4943, "not", [0]);
                                    return call4944;
                                  };
                                  func4942.paramCounts = [0];
                                  obj4887.methods["isPublic"] = func4942;
                                  func4942.definitionLine = 864;
                                  func4942.definitionModule = "ast";
                                  var func4945 = function(argcv) {    // method isWritable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
                                    setModuleName("ast");
                                    // isWritable is a simple accessor - elide try ... catch
                                    setLineNumber(865);    // compilenode identifier
                                    return GraceFalse;
                                  };
                                  func4945.paramCounts = [0];
                                  obj4887.methods["isWritable"] = func4945;
                                  func4945.definitionLine = 865;
                                  func4945.definitionModule = "ast";
                                  var func4946 = function(argcv) {    // method isReadable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
                                    setModuleName("ast");
                                    setLineNumber(866);    // compilenode call
                                    onSelf = true;
                                    var call4947 = callmethodChecked(this, "isPublic", [0]);
                                    return call4947;
                                  };
                                  func4946.paramCounts = [0];
                                  obj4887.methods["isReadable"] = func4946;
                                  func4946.definitionLine = 866;
                                  func4946.definitionModule = "ast";
                                  var func4948 = function(argcv) {    // method usesAsType(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_aNode = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
                                    setModuleName("ast");
                                    setLineNumber(868);    // compilenode call
                                    onSelf = true;
                                    var call4949 = callmethodChecked(this, "dtype", [0]);
                                    var opresult4952 = callmethodChecked(var_aNode, "==", [1], call4949);
                                    return opresult4952;
                                  };
                                  func4948.paramCounts = [1];
                                  obj4887.methods["usesAsType"] = func4948;
                                  func4948.definitionLine = 867;
                                  func4948.definitionModule = "ast";
                                  var func4953 = function(argcv) {    // method returnsObject
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                                    setModuleName("ast");
                                    setLineNumber(871);    // compilenode block
                                    var block4954 = new GraceBlock(this, 871, 0);
                                    block4954.real = function() {
                                      onSelf = true;
                                      var call4955 = callmethodChecked(this, "body", [0]);
                                      var call4956 = callmethodChecked(call4955, "last", [0]);
                                      var call4957 = callmethodChecked(call4956, "returnsObject", [0]);
                                      return call4957;
                                    };
                                    onSelf = true;
                                    var call4959 = callmethodChecked(this, "body", [0]);
                                    var call4960 = callmethodChecked(call4959, "isEmpty", [0]);
                                    var call4961 = callmethodChecked(call4960, "not", [0]);
                                    var opresult4963 = callmethodChecked(call4961, "&&", [1], block4954);
                                    return opresult4963;
                                  };
                                  func4953.paramCounts = [0];
                                  obj4887.methods["returnsObject"] = func4953;
                                  func4953.definitionLine = 870;
                                  func4953.definitionModule = "ast";
                                  var func4964 = function(argcv) {    // method returnedObjectScope
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnedObjectScope"));
                                    setModuleName("ast");
                                    setLineNumber(875);    // compilenode call
                                    onSelf = true;
                                    var call4965 = callmethodChecked(this, "body", [0]);
                                    var call4966 = callmethodChecked(call4965, "last", [0]);
                                    var call4967 = callmethodChecked(call4966, "returnedObjectScope", [0]);
                                    return call4967;
                                  };
                                  func4964.paramCounts = [0];
                                  obj4887.methods["returnedObjectScope"] = func4964;
                                  func4964.definitionLine = 873;
                                  func4964.definitionModule = "ast";
                                  var func4968 = function(argcv) {    // method accept(1)from(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_visitor = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    if (argcv[1] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                    // Start argument checking
                                    curarg = 1;
                                    setLineNumber(877);    // compilenode identifier
                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                    curarg++;
                                    curarg++;
                                    // End argument checking
                                    setModuleName("ast");
                                    var if4969 = GraceDone;
                                    setLineNumber(878);    // compilenode identifier
                                    var call4970 = callmethodChecked(var_visitor, "visitMethod()up", [1, 1], this, var_as);
                                    if (Grace_isTrue(call4970)) {
                                      setLineNumber(879);    // compilenode identifier
                                      var call4971 = callmethodChecked(var_as, "extend", [1], this);
                                      var var_newChain = call4971;
                                      setLineNumber(880);    // compilenode call
                                      onSelf = true;
                                      var call4972 = callmethodChecked(this, "value", [0]);
                                      var call4973 = callmethodChecked(call4972, "accept()from", [1, 1], var_visitor, var_newChain);
                                      var if4974 = GraceDone;
                                      setLineNumber(881);    // compilenode call
                                      onSelf = true;
                                      var call4975 = callmethodChecked(this, "typeParams", [0]);
                                      var opresult4978 = callmethodChecked(GraceFalse, "\u2260", [1], call4975);
                                      if (Grace_isTrue(opresult4978)) {
                                        setLineNumber(882);    // compilenode call
                                        onSelf = true;
                                        var call4979 = callmethodChecked(this, "typeParams", [0]);
                                        var call4980 = callmethodChecked(call4979, "accept()from", [1, 1], var_visitor, var_newChain);
                                        if4974 = call4980;
                                      }
                                      setLineNumber(884);    // compilenode call
                                      onSelf = true;
                                      var call4981 = callmethodChecked(this, "signature", [0]);
                                      var block4982 = new GraceBlock(this, 884, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block4982.real = function(var_part) {
                                        setLineNumber(885);    // compilenode identifier
                                        var call4983 = callmethodChecked(var_part, "params", [0]);
                                        var block4984 = new GraceBlock(this, 885, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block4984.real = function(var_p) {
                                          setLineNumber(886);    // compilenode identifier
                                          var call4985 = callmethodChecked(var_p, "accept()from", [1, 1], var_visitor, var_newChain);
                                          return call4985;
                                        };
                                        var call4986 = callmethodChecked(var_prelude, "for()do", [1, 1], call4983, block4984);
                                        return call4986;
                                      };
                                      var call4987 = callmethodChecked(var_prelude, "for()do", [1, 1], call4981, block4982);
                                      var if4988 = GraceDone;
                                      setLineNumber(889);    // compilenode call
                                      onSelf = true;
                                      var call4989 = callmethodChecked(this, "dtype", [0]);
                                      var opresult4992 = callmethodChecked(GraceFalse, "\u2260", [1], call4989);
                                      if (Grace_isTrue(opresult4992)) {
                                        setLineNumber(890);    // compilenode call
                                        onSelf = true;
                                        var call4993 = callmethodChecked(this, "dtype", [0]);
                                        var call4994 = callmethodChecked(call4993, "accept()from", [1, 1], var_visitor, var_newChain);
                                        if4988 = call4994;
                                      }
                                      setLineNumber(892);    // compilenode call
                                      onSelf = true;
                                      var call4995 = callmethodChecked(this, "annotations", [0]);
                                      var block4996 = new GraceBlock(this, 892, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block4996.real = function(var_ann) {
                                        setLineNumber(893);    // compilenode identifier
                                        var call4997 = callmethodChecked(var_ann, "accept()from", [1, 1], var_visitor, var_newChain);
                                        return call4997;
                                      };
                                      var call4998 = callmethodChecked(var_prelude, "for()do", [1, 1], call4995, block4996);
                                      setLineNumber(895);    // compilenode call
                                      onSelf = true;
                                      var call4999 = callmethodChecked(this, "body", [0]);
                                      var block5000 = new GraceBlock(this, 895, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block5000.real = function(var_mx) {
                                        setLineNumber(896);    // compilenode identifier
                                        var call5001 = callmethodChecked(var_mx, "accept()from", [1, 1], var_visitor, var_newChain);
                                        return call5001;
                                      };
                                      var call5002 = callmethodChecked(var_prelude, "for()do", [1, 1], call4999, block5000);
                                      if4969 = call5002;
                                    }
                                    return if4969;
                                  };
                                  func4968.paramTypes = [];
                                  func4968.paramTypes.push([]);
                                  func4968.paramTypes.push([]);
                                  func4968.paramCounts = [1, 1];
                                  obj4887.methods["accept()from"] = func4968;
                                  func4968.definitionLine = 877;
                                  func4968.definitionModule = "ast";
                                  var func5003 = function(argcv) {    // method map(1)ancestors(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_blk = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    if (argcv[1] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                    setModuleName("ast");
                                    setLineNumber(901);    // compilenode call
                                    onSelf = true;
                                    var call5004 = callmethodChecked(this, "shallowCopy", [0]);
                                    var var_n = call5004;
                                    setLineNumber(902);    // compilenode identifier
                                    var call5005 = callmethodChecked(var_as, "extend", [1], var_n);
                                    var var_newChain = call5005;
                                    setLineNumber(903);    // compilenode call
                                    onSelf = true;
                                    var call5006 = callmethodChecked(this, "body", [0]);
                                    var call5007 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call5008 = callmethodChecked(call5007, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call5009 = callmethodChecked(call5008, "listMap()ancestors", [2, 1], call5006, var_blk, var_newChain);
                                    var call5010 = callmethodChecked(var_n, "body:=", [1], call5009);
                                    setLineNumber(904);    // compilenode call
                                    onSelf = true;
                                    var call5011 = callmethodChecked(this, "typeParams", [0]);
                                    var call5012 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call5013 = callmethodChecked(call5012, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call5014 = callmethodChecked(call5013, "maybeMap()ancestors", [2, 1], call5011, var_blk, var_newChain);
                                    var call5015 = callmethodChecked(var_n, "typeParams:=", [1], call5014);
                                    setLineNumber(905);    // compilenode call
                                    onSelf = true;
                                    var call5016 = callmethodChecked(this, "signature", [0]);
                                    var call5017 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call5018 = callmethodChecked(call5017, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call5019 = callmethodChecked(call5018, "listMap()ancestors", [2, 1], call5016, var_blk, var_newChain);
                                    var call5020 = callmethodChecked(var_n, "signature:=", [1], call5019);
                                    setLineNumber(906);    // compilenode call
                                    onSelf = true;
                                    var call5021 = callmethodChecked(this, "annotations", [0]);
                                    var call5022 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call5023 = callmethodChecked(call5022, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call5024 = callmethodChecked(call5023, "listMap()ancestors", [2, 1], call5021, var_blk, var_newChain);
                                    var call5025 = callmethodChecked(var_n, "annotations:=", [1], call5024);
                                    setLineNumber(907);    // compilenode call
                                    onSelf = true;
                                    var call5026 = callmethodChecked(this, "dtype", [0]);
                                    var call5027 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call5028 = callmethodChecked(call5027, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call5029 = callmethodChecked(call5028, "maybeMap()ancestors", [2, 1], call5026, var_blk, var_newChain);
                                    var call5030 = callmethodChecked(var_n, "dtype:=", [1], call5029);
                                    setLineNumber(908);    // compilenode identifier
                                    var call5031 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                    return call5031;
                                  };
                                  func5003.paramCounts = [1, 1];
                                  obj4887.methods["map()ancestors"] = func5003;
                                  func5003.definitionLine = 900;
                                  func5003.definitionModule = "ast";
                                  var func5032 = function(argcv) {    // method pretty(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_depth = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                    setModuleName("ast");
                                    setLineNumber(911);    // compilenode string
                                    var string5033 = new GraceString("");
                                    var var_spc = string5033;
                                    setLineNumber(912);    // compilenode num
                                    var opresult5036 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                    var block5037 = new GraceBlock(this, 912, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block5037.real = function(var_i) {
                                      setLineNumber(913);    // compilenode string
                                      var string5038 = new GraceString("  ");
                                      var opresult5041 = callmethodChecked(var_spc, "++", [1], string5038);
                                      var_spc = opresult5041;
                                      return GraceDone;
                                    };
                                    var call5042 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult5036, block5037);
                                    setLineNumber(915);    // compilenode string
                                    var string5043 = new GraceString("\n");
                                    var call5045 = callmethodsuper(this, "pretty", [1], var_depth);
                                    var opresult5047 = callmethodChecked(call5045, "++", [1], string5043);
                                    var var_s = opresult5047;
                                    setLineNumber(916);    // compilenode identifier
                                    var opresult5050 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                    onSelf = true;
                                    var call5051 = callmethodChecked(this, "value", [0]);
                                    var call5052 = callmethodChecked(call5051, "pretty", [1], opresult5050);
                                    var string5054 = new GraceString("Name: ");
                                    var opresult5058 = callmethodChecked(var_s, "++", [1], var_spc);
                                    var opresult5060 = callmethodChecked(opresult5058, "++", [1], string5054);
                                    var opresult5062 = callmethodChecked(opresult5060, "++", [1], call5052);
                                    var_s = opresult5062;
                                    setLineNumber(917);    // compilenode string
                                    var string5063 = new GraceString("\n");
                                    var opresult5066 = callmethodChecked(var_s, "++", [1], string5063);
                                    var_s = opresult5066;
                                    var if5067 = GraceDone;
                                    setLineNumber(918);    // compilenode call
                                    onSelf = true;
                                    var call5068 = callmethodChecked(this, "dtype", [0]);
                                    var opresult5071 = callmethodChecked(GraceFalse, "\u2260", [1], call5068);
                                    if (Grace_isTrue(opresult5071)) {
                                      setLineNumber(919);    // compilenode string
                                      var string5072 = new GraceString("  ");
                                      var string5075 = new GraceString("Returns:\n");
                                      var opresult5079 = callmethodChecked(var_s, "++", [1], var_spc);
                                      var opresult5081 = callmethodChecked(opresult5079, "++", [1], string5075);
                                      var opresult5083 = callmethodChecked(opresult5081, "++", [1], var_spc);
                                      var opresult5085 = callmethodChecked(opresult5083, "++", [1], string5072);
                                      var_s = opresult5085;
                                      setLineNumber(920);    // compilenode string
                                      var string5086 = new GraceString("\n");
                                      var opresult5090 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                      onSelf = true;
                                      var call5091 = callmethodChecked(this, "dtype", [0]);
                                      var call5092 = callmethodChecked(call5091, "pretty", [1], opresult5090);
                                      var opresult5095 = callmethodChecked(var_s, "++", [1], call5092);
                                      var opresult5097 = callmethodChecked(opresult5095, "++", [1], string5086);
                                      var_s = opresult5097;
                                      if5067 = GraceDone;
                                    }
                                    var if5098 = GraceDone;
                                    setLineNumber(922);    // compilenode call
                                    onSelf = true;
                                    var call5099 = callmethodChecked(this, "isFresh", [0]);
                                    if (Grace_isTrue(call5099)) {
                                      var string5100 = new GraceString("Fresh\n");
                                      var opresult5104 = callmethodChecked(var_s, "++", [1], var_spc);
                                      var opresult5106 = callmethodChecked(opresult5104, "++", [1], string5100);
                                      var_s = opresult5106;
                                      if5098 = GraceDone;
                                    }
                                    setLineNumber(923);    // compilenode string
                                    var string5107 = new GraceString("Signature:");
                                    var string5110 = new GraceString("");
                                    var string5113 = new GraceString("");
                                    var opresult5115 = callmethodChecked(string5113, "++", [1], var_s);
                                    var opresult5117 = callmethodChecked(opresult5115, "++", [1], string5110);
                                    var opresult5119 = callmethodChecked(opresult5117, "++", [1], var_spc);
                                    var opresult5121 = callmethodChecked(opresult5119, "++", [1], string5107);
                                    var_s = opresult5121;
                                    setLineNumber(924);    // compilenode call
                                    onSelf = true;
                                    var call5122 = callmethodChecked(this, "signature", [0]);
                                    var block5123 = new GraceBlock(this, 924, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block5123.real = function(var_part) {
                                      setLineNumber(925);    // compilenode string
                                      var string5124 = new GraceString("");
                                      var call5126 = callmethodChecked(var_part, "name", [0]);
                                      var string5128 = new GraceString("Part: ");
                                      var string5131 = new GraceString("\n  ");
                                      var string5134 = new GraceString("");
                                      var opresult5136 = callmethodChecked(string5134, "++", [1], var_s);
                                      var opresult5138 = callmethodChecked(opresult5136, "++", [1], string5131);
                                      var opresult5140 = callmethodChecked(opresult5138, "++", [1], var_spc);
                                      var opresult5142 = callmethodChecked(opresult5140, "++", [1], string5128);
                                      var opresult5144 = callmethodChecked(opresult5142, "++", [1], call5126);
                                      var opresult5146 = callmethodChecked(opresult5144, "++", [1], string5124);
                                      var_s = opresult5146;
                                      setLineNumber(926);    // compilenode string
                                      var string5147 = new GraceString("Parameters:");
                                      var string5150 = new GraceString("\n    ");
                                      var string5153 = new GraceString("");
                                      var opresult5155 = callmethodChecked(string5153, "++", [1], var_s);
                                      var opresult5157 = callmethodChecked(opresult5155, "++", [1], string5150);
                                      var opresult5159 = callmethodChecked(opresult5157, "++", [1], var_spc);
                                      var opresult5161 = callmethodChecked(opresult5159, "++", [1], string5147);
                                      var_s = opresult5161;
                                      setLineNumber(927);    // compilenode identifier
                                      var call5162 = callmethodChecked(var_part, "params", [0]);
                                      var block5163 = new GraceBlock(this, 927, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block5163.real = function(var_p) {
                                        setLineNumber(928);    // compilenode string
                                        var string5164 = new GraceString("");
                                        var opresult5168 = callmethodChecked(var_depth, "+", [1], new GraceNum(4));
                                        var call5169 = callmethodChecked(var_p, "pretty", [1], opresult5168);
                                        var string5171 = new GraceString("");
                                        var string5174 = new GraceString("\n      ");
                                        var string5177 = new GraceString("");
                                        var opresult5179 = callmethodChecked(string5177, "++", [1], var_s);
                                        var opresult5181 = callmethodChecked(opresult5179, "++", [1], string5174);
                                        var opresult5183 = callmethodChecked(opresult5181, "++", [1], var_spc);
                                        var opresult5185 = callmethodChecked(opresult5183, "++", [1], string5171);
                                        var opresult5187 = callmethodChecked(opresult5185, "++", [1], call5169);
                                        var opresult5189 = callmethodChecked(opresult5187, "++", [1], string5164);
                                        var_s = opresult5189;
                                        return GraceDone;
                                      };
                                      var call5190 = callmethodChecked(var_prelude, "for()do", [1, 1], call5162, block5163);
                                      return call5190;
                                    };
                                    var call5191 = callmethodChecked(var_prelude, "for()do", [1, 1], call5122, block5123);
                                    setLineNumber(931);    // compilenode string
                                    var string5192 = new GraceString("\n");
                                    var opresult5195 = callmethodChecked(var_s, "++", [1], string5192);
                                    var_s = opresult5195;
                                    var if5196 = GraceDone;
                                    setLineNumber(932);    // compilenode call
                                    onSelf = true;
                                    var call5197 = callmethodChecked(this, "typeParams", [0]);
                                    var opresult5200 = callmethodChecked(GraceFalse, "\u2260", [1], call5197);
                                    if (Grace_isTrue(opresult5200)) {
                                      setLineNumber(933);    // compilenode string
                                      var string5201 = new GraceString("Generics:");
                                      var string5204 = new GraceString("");
                                      var string5207 = new GraceString("");
                                      var opresult5209 = callmethodChecked(string5207, "++", [1], var_s);
                                      var opresult5211 = callmethodChecked(opresult5209, "++", [1], string5204);
                                      var opresult5213 = callmethodChecked(opresult5211, "++", [1], var_spc);
                                      var opresult5215 = callmethodChecked(opresult5213, "++", [1], string5201);
                                      var_s = opresult5215;
                                      setLineNumber(934);    // compilenode block
                                      var block5216 = new GraceBlock(this, 934, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block5216.real = function(var_g) {
                                        setLineNumber(935);    // compilenode string
                                        var string5217 = new GraceString("");
                                        var call5219 = callmethodChecked(var_g, "pretty", [1], new GraceNum(0));
                                        var string5221 = new GraceString("  ");
                                        var string5224 = new GraceString("\n");
                                        var string5227 = new GraceString("");
                                        var opresult5229 = callmethodChecked(string5227, "++", [1], var_s);
                                        var opresult5231 = callmethodChecked(opresult5229, "++", [1], string5224);
                                        var opresult5233 = callmethodChecked(opresult5231, "++", [1], var_spc);
                                        var opresult5235 = callmethodChecked(opresult5233, "++", [1], string5221);
                                        var opresult5237 = callmethodChecked(opresult5235, "++", [1], call5219);
                                        var opresult5239 = callmethodChecked(opresult5237, "++", [1], string5217);
                                        var_s = opresult5239;
                                        return GraceDone;
                                      };
                                      setLineNumber(934);    // compilenode call
                                      onSelf = true;
                                      var call5240 = callmethodChecked(this, "typeParams", [0]);
                                      var call5241 = callmethodChecked(call5240, "do", [1], block5216);
                                      setLineNumber(937);    // compilenode string
                                      var string5242 = new GraceString("\n");
                                      var opresult5245 = callmethodChecked(var_s, "++", [1], string5242);
                                      var_s = opresult5245;
                                      if5196 = GraceDone;
                                    }
                                    var if5246 = GraceDone;
                                    setLineNumber(939);    // compilenode call
                                    onSelf = true;
                                    var call5248 = callmethodChecked(this, "annotations", [0]);
                                    var call5249 = callmethodChecked(call5248, "size", [0]);
                                    var opresult5251 = callmethodChecked(call5249, ">", [1], new GraceNum(0));
                                    if (Grace_isTrue(opresult5251)) {
                                      setLineNumber(940);    // compilenode string
                                      var string5252 = new GraceString("Annotations:");
                                      var string5255 = new GraceString("");
                                      var string5258 = new GraceString("");
                                      var opresult5260 = callmethodChecked(string5258, "++", [1], var_s);
                                      var opresult5262 = callmethodChecked(opresult5260, "++", [1], string5255);
                                      var opresult5264 = callmethodChecked(opresult5262, "++", [1], var_spc);
                                      var opresult5266 = callmethodChecked(opresult5264, "++", [1], string5252);
                                      var_s = opresult5266;
                                      setLineNumber(941);    // compilenode call
                                      onSelf = true;
                                      var call5267 = callmethodChecked(this, "annotations", [0]);
                                      var block5268 = new GraceBlock(this, 941, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block5268.real = function(var_an) {
                                        setLineNumber(942);    // compilenode string
                                        var string5269 = new GraceString("");
                                        var opresult5273 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                        var call5274 = callmethodChecked(var_an, "pretty", [1], opresult5273);
                                        var string5276 = new GraceString("  ");
                                        var string5279 = new GraceString("\n");
                                        var string5282 = new GraceString("");
                                        var opresult5284 = callmethodChecked(string5282, "++", [1], var_s);
                                        var opresult5286 = callmethodChecked(opresult5284, "++", [1], string5279);
                                        var opresult5288 = callmethodChecked(opresult5286, "++", [1], var_spc);
                                        var opresult5290 = callmethodChecked(opresult5288, "++", [1], string5276);
                                        var opresult5292 = callmethodChecked(opresult5290, "++", [1], call5274);
                                        var opresult5294 = callmethodChecked(opresult5292, "++", [1], string5269);
                                        var_s = opresult5294;
                                        return GraceDone;
                                      };
                                      var call5295 = callmethodChecked(var_prelude, "for()do", [1, 1], call5267, block5268);
                                      setLineNumber(944);    // compilenode string
                                      var string5296 = new GraceString("\n");
                                      var opresult5299 = callmethodChecked(var_s, "++", [1], string5296);
                                      var_s = opresult5299;
                                      if5246 = GraceDone;
                                    }
                                    setLineNumber(946);    // compilenode string
                                    var string5300 = new GraceString("Body:");
                                    var opresult5304 = callmethodChecked(var_s, "++", [1], var_spc);
                                    var opresult5306 = callmethodChecked(opresult5304, "++", [1], string5300);
                                    var_s = opresult5306;
                                    setLineNumber(947);    // compilenode call
                                    onSelf = true;
                                    var call5307 = callmethodChecked(this, "body", [0]);
                                    var block5308 = new GraceBlock(this, 947, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block5308.real = function(var_mx) {
                                      setLineNumber(948);    // compilenode identifier
                                      var opresult5311 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                      var call5312 = callmethodChecked(var_mx, "pretty", [1], opresult5311);
                                      var string5315 = new GraceString("\n  ");
                                      var opresult5318 = callmethodChecked(var_s, "++", [1], string5315);
                                      var opresult5320 = callmethodChecked(opresult5318, "++", [1], var_spc);
                                      var opresult5322 = callmethodChecked(opresult5320, "++", [1], call5312);
                                      var_s = opresult5322;
                                      return GraceDone;
                                    };
                                    var call5323 = callmethodChecked(var_prelude, "for()do", [1, 1], call5307, block5308);
                                    var if5324 = GraceDone;
                                    setLineNumber(950);    // compilenode call
                                    onSelf = true;
                                    var call5325 = callmethodChecked(this, "comments", [0]);
                                    var opresult5328 = callmethodChecked(GraceFalse, "\u2260", [1], call5325);
                                    if (Grace_isTrue(opresult5328)) {
                                      setLineNumber(951);    // compilenode identifier
                                      var opresult5331 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                      onSelf = true;
                                      var call5332 = callmethodChecked(this, "comments", [0]);
                                      var call5333 = callmethodChecked(call5332, "pretty", [1], opresult5331);
                                      var opresult5336 = callmethodChecked(var_s, "++", [1], call5333);
                                      var_s = opresult5336;
                                      if5324 = GraceDone;
                                    }
                                    setLineNumber(953);    // compilenode identifier
                                    return var_s;
                                  };
                                  func5032.paramCounts = [1];
                                  obj4887.methods["pretty"] = func5032;
                                  func5032.definitionLine = 910;
                                  func5032.definitionModule = "ast";
                                  var func5337 = function(argcv) {    // method toGrace(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_depth = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                    // Start argument checking
                                    curarg = 1;
                                    setLineNumber(955);    // compilenode identifier
                                    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                callmethod(var_Number, "asString", [0])._value + "."));
                                    curarg++;
                                    // End argument checking
                                    setModuleName("ast");
                                    setLineNumber(956);    // compilenode string
                                    var string5338 = new GraceString("");
                                    var var_spc = string5338;
                                    setLineNumber(957);    // compilenode identifier
                                    var diff5341 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                    var opresult5344 = callmethodChecked(new GraceNum(0), "..", [1], diff5341);
                                    var block5345 = new GraceBlock(this, 957, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block5345.real = function(var_i) {
                                      setLineNumber(958);    // compilenode string
                                      var string5346 = new GraceString("    ");
                                      var opresult5349 = callmethodChecked(var_spc, "++", [1], string5346);
                                      var_spc = opresult5349;
                                      return GraceDone;
                                    };
                                    var call5350 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult5344, block5345);
                                    setLineNumber(960);    // compilenode string
                                    var string5351 = new GraceString("method ");
                                    var var_s = string5351;
                                    setLineNumber(961);    // compilenode identifier
                                    var var_firstPart = GraceTrue;
                                    setLineNumber(962);    // compilenode call
                                    onSelf = true;
                                    var call5352 = callmethodChecked(this, "signature", [0]);
                                    var block5353 = new GraceBlock(this, 962, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block5353.real = function(var_part) {
                                      setLineNumber(963);    // compilenode identifier
                                      var call5354 = callmethodChecked(var_part, "name", [0]);
                                      var opresult5357 = callmethodChecked(var_s, "++", [1], call5354);
                                      var_s = opresult5357;
                                      var if5358 = GraceDone;
                                      setLineNumber(964);    // compilenode block
                                      var block5359 = new GraceBlock(this, 964, 0);
                                      block5359.real = function() {
                                        onSelf = true;
                                        var call5360 = callmethodChecked(this, "typeParams", [0]);
                                        var opresult5363 = callmethodChecked(GraceFalse, "\u2260", [1], call5360);
                                        return opresult5363;
                                      };
                                      var opresult5366 = callmethodChecked(var_firstPart, "&&", [1], block5359);
                                      if (Grace_isTrue(opresult5366)) {
                                        setLineNumber(965);    // compilenode identifier
                                        var opresult5369 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                        onSelf = true;
                                        var call5370 = callmethodChecked(this, "typeParams", [0]);
                                        var call5371 = callmethodChecked(call5370, "toGrace", [1], opresult5369);
                                        var opresult5374 = callmethodChecked(var_s, "++", [1], call5371);
                                        var_s = opresult5374;
                                        if5358 = GraceDone;
                                      }
                                      setLineNumber(967);    // compilenode identifier
                                      var_firstPart = GraceFalse;
                                      var if5375 = GraceDone;
                                      setLineNumber(968);    // compilenode identifier
                                      var call5377 = callmethodChecked(var_part, "params", [0]);
                                      var call5378 = callmethodChecked(call5377, "size", [0]);
                                      var opresult5380 = callmethodChecked(call5378, ">", [1], new GraceNum(0));
                                      if (Grace_isTrue(opresult5380)) {
                                        setLineNumber(969);    // compilenode string
                                        var string5381 = new GraceString("(");
                                        var opresult5384 = callmethodChecked(var_s, "++", [1], string5381);
                                        var_s = opresult5384;
                                        setLineNumber(970);    // compilenode identifier
                                        var call5385 = callmethodChecked(var_part, "params", [0]);
                                        var call5386 = callmethodChecked(call5385, "indices", [0]);
                                        var block5387 = new GraceBlock(this, 970, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block5387.real = function(var_pnr) {
                                          setLineNumber(971);    // compilenode identifier
                                          var call5388 = callmethodChecked(var_part, "params", [0]);
                                          var call5389 = callmethodChecked(call5388, "at", [1], var_pnr);
                                          var var_p = call5389;
                                          setLineNumber(972);    // compilenode identifier
                                          var opresult5392 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                          var call5393 = callmethodChecked(var_p, "toGrace", [1], opresult5392);
                                          var opresult5396 = callmethodChecked(var_s, "++", [1], call5393);
                                          var_s = opresult5396;
                                          var if5397 = GraceDone;
                                          setLineNumber(973);    // compilenode identifier
                                          var call5398 = callmethodChecked(var_part, "params", [0]);
                                          var call5399 = callmethodChecked(call5398, "size", [0]);
                                          var opresult5402 = callmethodChecked(var_pnr, "<", [1], call5399);
                                          if (Grace_isTrue(opresult5402)) {
                                            setLineNumber(974);    // compilenode string
                                            var string5403 = new GraceString(", ");
                                            var opresult5406 = callmethodChecked(var_s, "++", [1], string5403);
                                            var_s = opresult5406;
                                            if5397 = GraceDone;
                                          }
                                          return if5397;
                                        };
                                        var call5407 = callmethodChecked(var_prelude, "for()do", [1, 1], call5386, block5387);
                                        setLineNumber(977);    // compilenode string
                                        var string5408 = new GraceString(")");
                                        var opresult5411 = callmethodChecked(var_s, "++", [1], string5408);
                                        var_s = opresult5411;
                                        if5375 = GraceDone;
                                      }
                                      return if5375;
                                    };
                                    var call5412 = callmethodChecked(var_prelude, "for()do", [1, 1], call5352, block5353);
                                    var if5413 = GraceDone;
                                    setLineNumber(980);    // compilenode call
                                    onSelf = true;
                                    var call5414 = callmethodChecked(this, "dtype", [0]);
                                    var opresult5417 = callmethodChecked(GraceFalse, "\u2260", [1], call5414);
                                    if (Grace_isTrue(opresult5417)) {
                                      setLineNumber(981);    // compilenode string
                                      var string5418 = new GraceString("");
                                      onSelf = true;
                                      var call5420 = callmethodChecked(this, "dtype", [0]);
                                      var call5421 = callmethodChecked(call5420, "toGrace", [1], new GraceNum(0));
                                      var string5423 = new GraceString(" -> ");
                                      var opresult5425 = callmethodChecked(string5423, "++", [1], call5421);
                                      var opresult5427 = callmethodChecked(opresult5425, "++", [1], string5418);
                                      var opresult5430 = callmethodChecked(var_s, "++", [1], opresult5427);
                                      var_s = opresult5430;
                                      if5413 = GraceDone;
                                    }
                                    var if5431 = GraceDone;
                                    setLineNumber(983);    // compilenode call
                                    onSelf = true;
                                    var call5433 = callmethodChecked(this, "annotations", [0]);
                                    var call5434 = callmethodChecked(call5433, "size", [0]);
                                    var opresult5436 = callmethodChecked(call5434, ">", [1], new GraceNum(0));
                                    if (Grace_isTrue(opresult5436)) {
                                      setLineNumber(984);    // compilenode string
                                      var string5437 = new GraceString(" is ");
                                      var opresult5440 = callmethodChecked(var_s, "++", [1], string5437);
                                      var_s = opresult5440;
                                      setLineNumber(985);    // compilenode block
                                      var block5441 = new GraceBlock(this, 985, 2);
                                      setLineNumber(1);    // compilenode identifier
                                      block5441.real = function(var_a, var_b) {
                                        setLineNumber(986);    // compilenode identifier
                                        var call5442 = callmethodChecked(var_b, "toGrace", [1], new GraceNum(0));
                                        var if5444 = GraceDone;
                                        var string5445 = new GraceString("");
                                        var opresult5448 = callmethodChecked(var_a, "\u2260", [1], string5445);
                                        if (Grace_isTrue(opresult5448)) {
                                          var string5449 = new GraceString(", ");
                                          var opresult5452 = callmethodChecked(var_a, "++", [1], string5449);
                                          if5444 = opresult5452;
                                        } else {
                                          var string5453 = new GraceString("");
                                          if5444 = string5453;
                                        }
                                        var opresult5455 = callmethodChecked(if5444, "++", [1], call5442);
                                        return opresult5455;
                                      };
                                      setLineNumber(987);    // compilenode string
                                      var string5456 = new GraceString("");
                                      setLineNumber(985);    // compilenode call
                                      onSelf = true;
                                      var call5457 = callmethodChecked(this, "annotations", [0]);
                                      var call5458 = callmethodChecked(call5457, "fold()startingWith", [1, 1], block5441, string5456);
                                      var opresult5461 = callmethodChecked(var_s, "++", [1], call5458);
                                      var_s = opresult5461;
                                      if5431 = GraceDone;
                                    }
                                    setLineNumber(989);    // compilenode string
                                    var string5462 = new GraceString(" {");
                                    var opresult5465 = callmethodChecked(var_s, "++", [1], string5462);
                                    var_s = opresult5465;
                                    var if5466 = GraceDone;
                                    setLineNumber(990);    // compilenode call
                                    onSelf = true;
                                    var call5467 = callmethodChecked(this, "comments", [0]);
                                    var opresult5470 = callmethodChecked(GraceFalse, "\u2260", [1], call5467);
                                    if (Grace_isTrue(opresult5470)) {
                                      setLineNumber(991);    // compilenode identifier
                                      var opresult5473 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                      onSelf = true;
                                      var call5474 = callmethodChecked(this, "comments", [0]);
                                      var call5475 = callmethodChecked(call5474, "toGrace", [1], opresult5473);
                                      var opresult5478 = callmethodChecked(var_s, "++", [1], call5475);
                                      var_s = opresult5478;
                                      if5466 = GraceDone;
                                    }
                                    setLineNumber(993);    // compilenode call
                                    onSelf = true;
                                    var call5479 = callmethodChecked(this, "body", [0]);
                                    var block5480 = new GraceBlock(this, 993, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block5480.real = function(var_mx) {
                                      setLineNumber(994);    // compilenode identifier
                                      var opresult5483 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                      var call5484 = callmethodChecked(var_mx, "toGrace", [1], opresult5483);
                                      var string5486 = new GraceString("    ");
                                      var string5489 = new GraceString("\n");
                                      var opresult5492 = callmethodChecked(var_s, "++", [1], string5489);
                                      var opresult5494 = callmethodChecked(opresult5492, "++", [1], var_spc);
                                      var opresult5496 = callmethodChecked(opresult5494, "++", [1], string5486);
                                      var opresult5498 = callmethodChecked(opresult5496, "++", [1], call5484);
                                      var_s = opresult5498;
                                      return GraceDone;
                                    };
                                    var call5499 = callmethodChecked(var_prelude, "for()do", [1, 1], call5479, block5480);
                                    setLineNumber(996);    // compilenode string
                                    var string5500 = new GraceString("}");
                                    var string5503 = new GraceString("\n");
                                    var opresult5506 = callmethodChecked(var_s, "++", [1], string5503);
                                    var opresult5508 = callmethodChecked(opresult5506, "++", [1], var_spc);
                                    var opresult5510 = callmethodChecked(opresult5508, "++", [1], string5500);
                                    var_s = opresult5510;
                                    setLineNumber(997);    // return value
                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("result of method toGrace(1) does not have " + 
                                                callmethod(var_String, "asString", [0])._value + "."));
                                    return var_s;
                                  };
                                  func5337.paramTypes = [];
                                  func5337.paramTypes.push([type_Number, "depth"]);
                                  func5337.paramCounts = [1];
                                  obj4887.methods["toGrace"] = func5337;
                                  func5337.definitionLine = 955;
                                  func5337.definitionModule = "ast";
                                  var func5511 = function(argcv) {    // method shallowCopy
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                    setModuleName("ast");
                                    setLineNumber(1000);    // compilenode call
                                    onSelf = true;
                                    var call5512 = callmethodChecked(this, "value", [0]);
                                    onSelf = true;
                                    var call5513 = callmethodChecked(this, "signature", [0]);
                                    onSelf = true;
                                    var call5514 = callmethodChecked(this, "body", [0]);
                                    onSelf = true;
                                    var call5515 = callmethodChecked(this, "dtype", [0]);
                                    var call5516 = callmethodChecked(var_methodNode, "new", [4], call5512, call5513, call5514, call5515);
                                    var call5517 = callmethodChecked(call5516, "shallowCopyFieldsFrom", [1], this);
                                    return call5517;
                                  };
                                  func5511.paramCounts = [0];
                                  obj4887.methods["shallowCopy"] = func5511;
                                  func5511.definitionLine = 999;
                                  func5511.definitionModule = "ast";
                                  var func5518 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_other = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                    setModuleName("ast");
                                    setLineNumber(1003);    // compilenode identifier
                                    var call5519 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                    setLineNumber(1004);    // compilenode identifier
                                    var call5520 = callmethodChecked(var_other, "isFresh", [0]);
                                    onSelf = true;
                                    var call5521 = callmethodChecked(this, "isFresh:=", [1], call5520);
                                    setLineNumber(1005);    // compilenode identifier
                                    var call5522 = callmethodChecked(var_other, "selfclosure", [0]);
                                    onSelf = true;
                                    var call5523 = callmethodChecked(this, "selfclosure:=", [1], call5522);
                                    setLineNumber(1006);    // compilenode identifier
                                    return this;
                                  };
                                  func5518.paramCounts = [1];
                                  obj4887.methods["shallowCopyFieldsFrom"] = func5518;
                                  func5518.definitionLine = 1002;
                                  func5518.definitionModule = "ast";
                                  setLineNumber(818);    // compilenode call
                                  var call5524 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call5525 = callmethodChecked(call5524, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call5526 = callmethodChecked(call5525, "baseNode()object", [0, 1], this);
                                  obj4887.superobj = call5526;
                                  if (call5526.data) obj4887.data = call5526.data;
                                  if (call5526.hasOwnProperty('_value'))
                                      obj4887._value = call5526._value;
                                  setLineNumber(819);    // compilenode string
                                  var string5527 = new GraceString("method");
                                  obj4887.data["kind"] = string5527;
                                  var reader_ast_kind5528 = function() {
                                    return this.data["kind"];
                                  };
                                  reader_ast_kind5528.def = true;
                                  obj4887.methods["kind"] = reader_ast_kind5528;
                                  setLineNumber(820);    // compilenode identifier
                                  obj4887.data["value"] = var_name__39__;
                                  var reader_ast_value5529 = function() {
                                    return this.data["value"];
                                  };
                                  obj4887.methods["value"] = reader_ast_value5529;
                                  obj4887.data["value"] = var_name__39__;
                                  var writer_ast_value5529 = function(argcv, o) {
                                    this.data["value"] = o;
                                    return GraceDone;
                                  };
                                  obj4887.methods["value:="] = writer_ast_value5529;
                                  obj4887.mutable = true;
                                  setLineNumber(821);    // compilenode identifier
                                  obj4887.data["signature"] = var_signature__39__;
                                  var reader_ast_signature5530 = function() {
                                    return this.data["signature"];
                                  };
                                  obj4887.methods["signature"] = reader_ast_signature5530;
                                  obj4887.data["signature"] = var_signature__39__;
                                  var writer_ast_signature5530 = function(argcv, o) {
                                    this.data["signature"] = o;
                                    return GraceDone;
                                  };
                                  obj4887.methods["signature:="] = writer_ast_signature5530;
                                  obj4887.mutable = true;
                                  setLineNumber(822);    // compilenode identifier
                                  obj4887.data["body"] = var_body__39__;
                                  var reader_ast_body5531 = function() {
                                    return this.data["body"];
                                  };
                                  obj4887.methods["body"] = reader_ast_body5531;
                                  obj4887.data["body"] = var_body__39__;
                                  var writer_ast_body5531 = function(argcv, o) {
                                    this.data["body"] = o;
                                    return GraceDone;
                                  };
                                  obj4887.methods["body:="] = writer_ast_body5531;
                                  obj4887.mutable = true;
                                  setLineNumber(823);    // compilenode identifier
                                  obj4887.data["dtype"] = var_dtype__39__;
                                  var reader_ast_dtype5532 = function() {
                                    return this.data["dtype"];
                                  };
                                  obj4887.methods["dtype"] = reader_ast_dtype5532;
                                  obj4887.data["dtype"] = var_dtype__39__;
                                  var writer_ast_dtype5532 = function(argcv, o) {
                                    this.data["dtype"] = o;
                                    return GraceDone;
                                  };
                                  obj4887.methods["dtype:="] = writer_ast_dtype5532;
                                  obj4887.mutable = true;
                                  setLineNumber(824);    // compilenode identifier
                                  obj4887.data["typeParams"] = GraceFalse;
                                  var reader_ast_typeParams5533 = function() {
                                    return this.data["typeParams"];
                                  };
                                  obj4887.methods["typeParams"] = reader_ast_typeParams5533;
                                  obj4887.data["typeParams"] = GraceFalse;
                                  var writer_ast_typeParams5533 = function(argcv, o) {
                                    this.data["typeParams"] = o;
                                    return GraceDone;
                                  };
                                  obj4887.methods["typeParams:="] = writer_ast_typeParams5533;
                                  obj4887.mutable = true;
                                  setLineNumber(825);    // compilenode identifier
                                  obj4887.data["selfclosure"] = GraceFalse;
                                  var reader_ast_selfclosure5534 = function() {
                                    return this.data["selfclosure"];
                                  };
                                  obj4887.methods["selfclosure"] = reader_ast_selfclosure5534;
                                  obj4887.data["selfclosure"] = GraceFalse;
                                  var writer_ast_selfclosure5534 = function(argcv, o) {
                                    this.data["selfclosure"] = o;
                                    return GraceDone;
                                  };
                                  obj4887.methods["selfclosure:="] = writer_ast_selfclosure5534;
                                  obj4887.mutable = true;
                                  setLineNumber(826);    // compilenode call
                                  onSelf = true;
                                  var call5535 = callmethodChecked(this, "value", [0]);
                                  var call5536 = callmethodChecked(call5535, "value", [0]);
                                  obj4887.data["nameString"] = call5536;
                                  var reader_ast_nameString5537 = function() {
                                    return this.data["nameString"];
                                  };
                                  reader_ast_nameString5537.def = true;
                                  obj4887.methods["nameString"] = reader_ast_nameString5537;
                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], call5536)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("value of def 'nameString' is not of type String"));
                                  setLineNumber(827);    // compilenode array
                                  var array5538 = new PrimitiveGraceList([]);
                                  obj4887.data["annotations"] = array5538;
                                  var reader_ast_annotations5539 = function() {
                                    return this.data["annotations"];
                                  };
                                  obj4887.methods["annotations"] = reader_ast_annotations5539;
                                  obj4887.data["annotations"] = array5538;
                                  var writer_ast_annotations5539 = function(argcv, o) {
                                    this.data["annotations"] = o;
                                    return GraceDone;
                                  };
                                  obj4887.methods["annotations:="] = writer_ast_annotations5539;
                                  obj4887.mutable = true;
                                  setLineNumber(828);    // compilenode identifier
                                  obj4887.data["isFresh"] = GraceFalse;
                                  var reader_ast_isFresh5540 = function() {
                                    return this.data["isFresh"];
                                  };
                                  obj4887.methods["isFresh"] = reader_ast_isFresh5540;
                                  obj4887.data["isFresh"] = GraceFalse;
                                  var writer_ast_isFresh5540 = function(argcv, o) {
                                    this.data["isFresh"] = o;
                                    return GraceDone;
                                  };
                                  obj4887.methods["isFresh:="] = writer_ast_isFresh5540;
                                  obj4887.mutable = true;
                                  setLineNumber(829);    // compilenode identifier
                                  obj4887.data["usesClassSyntax"] = GraceFalse;
                                  var reader_ast_usesClassSyntax5541 = function() {
                                    return this.data["usesClassSyntax"];
                                  };
                                  obj4887.methods["usesClassSyntax"] = reader_ast_usesClassSyntax5541;
                                  obj4887.data["usesClassSyntax"] = GraceFalse;
                                  var writer_ast_usesClassSyntax5541 = function(argcv, o) {
                                    this.data["usesClassSyntax"] = o;
                                    return GraceDone;
                                  };
                                  obj4887.methods["usesClassSyntax:="] = writer_ast_usesClassSyntax5541;
                                  obj4887.mutable = true;
                                  superDepth = origSuperDepth;
                                };
                                obj_init_4887.apply(obj4887, []);
                                return obj4887;
                              };
                              func4886.paramCounts = [4];
                              obj4881.methods["new"] = func4886;
                              func4886.definitionLine = 811;
                              func4886.definitionModule = "ast";
                                var func5542 = function(argcv) {    // method new(4     )()object
                                  var curarg = 1;
                                  var var_name__39__ = arguments[curarg];
                                  curarg++;
                                  var var_signature__39__ = arguments[curarg];
                                  curarg++;
                                  var var_body__39__ = arguments[curarg];
                                  curarg++;
                                  var var_dtype__39__ = arguments[curarg];
                                  curarg++;
                                  var inheritingObject = arguments[curarg++];
                                  // Start argument processing
                                  curarg = 1;
                                  curarg++;
                                  curarg++;
                                  curarg++;
                                  curarg++;
                                  // End argument processing
                                  setModuleName("ast");
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var obj5543 = Grace_allocObject(null, "new");
                                  obj5543.definitionModule = "ast";
                                  obj5543.definitionLine = 811;
                                  var inho5543 = inheritingObject;
                                  while (inho5543.superobj) inho5543 = inho5543.superobj;
                                  inho5543.superobj = obj5543;
                                  obj5543.data = inheritingObject.data;
                                  if (inheritingObject.hasOwnProperty('_value'))
                                    obj5543._value = inheritingObject._value;
                                  obj5543.outer = this;
                                  var reader_ast_outer5544 = function() {
                                    return this.outer;
                                  };
                                  obj5543.methods["outer"] = reader_ast_outer5544;
                                  var obj_init_5543 = function() {
                                    var origSuperDepth = superDepth;
                                    superDepth = obj5543;
                                    var func5545 = function(argcv) {    // method isMethod
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMethod"));
                                      setModuleName("ast");
                                      // isMethod is a simple accessor - elide try ... catch
                                      setLineNumber(831);    // compilenode identifier
                                      return GraceTrue;
                                    };
                                    func5545.paramCounts = [0];
                                    obj5543.methods["isMethod"] = func5545;
                                    func5545.definitionLine = 831;
                                    func5545.definitionModule = "ast";
                                    var func5546 = function(argcv) {    // method isExecutable
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                      setModuleName("ast");
                                      // isExecutable is a simple accessor - elide try ... catch
                                      setLineNumber(832);    // compilenode identifier
                                      return GraceFalse;
                                    };
                                    func5546.paramCounts = [0];
                                    obj5543.methods["isExecutable"] = func5546;
                                    func5546.definitionLine = 832;
                                    func5546.definitionModule = "ast";
                                    var func5547 = function(argcv) {    // method isLegalInTrait
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLegalInTrait"));
                                      setModuleName("ast");
                                      // isLegalInTrait is a simple accessor - elide try ... catch
                                      setLineNumber(833);    // compilenode identifier
                                      return GraceTrue;
                                    };
                                    func5547.paramCounts = [0];
                                    obj5543.methods["isLegalInTrait"] = func5547;
                                    func5547.definitionLine = 833;
                                    func5547.definitionModule = "ast";
                                    var func5548 = function(argcv) {    // method isClass
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isClass"));
                                      setModuleName("ast");
                                      setLineNumber(834);    // compilenode call
                                      onSelf = true;
                                      var call5549 = callmethodChecked(this, "usesClassSyntax", [0]);
                                      onSelf = true;
                                      var call5551 = callmethodChecked(this, "isFresh", [0]);
                                      var opresult5553 = callmethodChecked(call5551, "||", [1], call5549);
                                      return opresult5553;
                                    };
                                    func5548.paramCounts = [0];
                                    obj5543.methods["isClass"] = func5548;
                                    func5548.definitionLine = 834;
                                    func5548.definitionModule = "ast";
                                    var func5554 = function(argcv) {    // method isTrait
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isTrait"));
                                      setModuleName("ast");
                                      var if5555 = GraceDone;
                                      setLineNumber(836);    // compilenode call
                                      onSelf = true;
                                      var call5556 = callmethodChecked(this, "isFresh", [0]);
                                      if (Grace_isTrue(call5556)) {
                                        setLineNumber(837);    // compilenode call
                                        onSelf = true;
                                        var call5557 = callmethodChecked(this, "body", [0]);
                                        var call5558 = callmethodChecked(call5557, "last", [0]);
                                        var call5559 = callmethodChecked(call5558, "isTrait", [0]);
                                        if5555 = call5559;
                                      } else {
                                        setLineNumber(839);    // compilenode identifier
                                        if5555 = GraceFalse;
                                      }
                                      return if5555;
                                    };
                                    func5554.paramCounts = [0];
                                    obj5543.methods["isTrait"] = func5554;
                                    func5554.definitionLine = 835;
                                    func5554.definitionModule = "ast";
                                    var func5560 = function(argcv) {    // method needsArgChecks
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for needsArgChecks"));
                                      setModuleName("ast");
                                      setLineNumber(843);    // compilenode block
                                      var block5561 = new GraceBlock(this, 843, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block5561.real = function(var_part) {
                                        setLineNumber(844);    // compilenode block
                                        var block5562 = new GraceBlock(this, 844, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block5562.real = function(var_p) {
                                          var if5563 = GraceDone;
                                          setLineNumber(845);    // compilenode block
                                          var block5564 = new GraceBlock(this, 845, 0);
                                          block5564.real = function() {
                                            setLineNumber(846);    // compilenode string
                                            var string5565 = new GraceString("Unknown");
                                            var call5567 = callmethodChecked(var_p, "dtype", [0]);
                                            var call5568 = callmethodChecked(call5567, "nameString", [0]);
                                            var opresult5570 = callmethodChecked(call5568, "\u2260", [1], string5565);
                                            return opresult5570;
                                          };
                                          setLineNumber(845);    // compilenode identifier
                                          var call5572 = callmethodChecked(var_p, "dtype", [0]);
                                          var opresult5575 = callmethodChecked(GraceFalse, "\u2260", [1], call5572);
                                          var opresult5577 = callmethodChecked(opresult5575, "&&", [1], block5564);
                                          if (Grace_isTrue(opresult5577)) {
                                            setLineNumber(847);    // compilenode identifier
                                            throw new ReturnException(GraceTrue, returnTarget);
                                          }
                                          return if5563;
                                        };
                                        setLineNumber(844);    // compilenode identifier
                                        var call5578 = callmethodChecked(var_part, "params", [0]);
                                        var call5579 = callmethodChecked(call5578, "do", [1], block5562);
                                        return call5579;
                                      };
                                      setLineNumber(843);    // compilenode call
                                      onSelf = true;
                                      var call5580 = callmethodChecked(this, "signature", [0]);
                                      var call5581 = callmethodChecked(call5580, "do", [1], block5561);
                                      setLineNumber(851);    // compilenode identifier
                                      return GraceFalse;
                                    };
                                    func5560.paramCounts = [0];
                                    obj5543.methods["needsArgChecks"] = func5560;
                                    func5560.definitionLine = 842;
                                    func5560.definitionModule = "ast";
                                    var func5582 = function(argcv) {    // method scope:=(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_st = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
                                      setModuleName("ast");
                                      setLineNumber(856);    // compilenode identifier
                                      onSelf = true;
                                      var call5583 = callmethodChecked(this, "symbolTable:=", [1], var_st);
                                      setLineNumber(857);    // compilenode identifier
                                      var call5584 = callmethodChecked(var_st, "node:=", [1], this);
                                      return call5584;
                                    };
                                    func5582.paramCounts = [1];
                                    obj5543.methods["scope:="] = func5582;
                                    func5582.definitionLine = 853;
                                    func5582.definitionModule = "ast";
                                    var func5585 = function(argcv) {    // method declarationKindWithAncestors(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_as = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                      setModuleName("ast");
                                      setLineNumber(859);    // compilenode identifier
                                      var call5586 = callmethodChecked(var_k, "parameter", [0]);
                                      return call5586;
                                    };
                                    func5585.paramCounts = [1];
                                    obj5543.methods["declarationKindWithAncestors"] = func5585;
                                    func5585.definitionLine = 859;
                                    func5585.definitionModule = "ast";
                                    var func5587 = function(argcv) {    // method isConfidential
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isConfidential"));
                                      setModuleName("ast");
                                      var if5588 = GraceDone;
                                      setLineNumber(861);    // compilenode call
                                      onSelf = true;
                                      var call5590 = callmethodChecked(this, "annotations", [0]);
                                      var call5591 = callmethodChecked(call5590, "size", [0]);
                                      var opresult5593 = callmethodChecked(call5591, "==", [1], new GraceNum(0));
                                      if (Grace_isTrue(opresult5593)) {
                                        return GraceFalse;
                                      }
                                      setLineNumber(862);    // compilenode string
                                      var string5594 = new GraceString("confidential");
                                      var call5595 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5596 = callmethodChecked(call5595, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5597 = callmethodChecked(call5596, "findAnnotation", [2], this, string5594);
                                      return call5597;
                                    };
                                    func5587.paramCounts = [0];
                                    obj5543.methods["isConfidential"] = func5587;
                                    func5587.definitionLine = 860;
                                    func5587.definitionModule = "ast";
                                    var func5598 = function(argcv) {    // method isPublic
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
                                      setModuleName("ast");
                                      setLineNumber(864);    // compilenode call
                                      onSelf = true;
                                      var call5599 = callmethodChecked(this, "isConfidential", [0]);
                                      var call5600 = callmethodChecked(call5599, "not", [0]);
                                      return call5600;
                                    };
                                    func5598.paramCounts = [0];
                                    obj5543.methods["isPublic"] = func5598;
                                    func5598.definitionLine = 864;
                                    func5598.definitionModule = "ast";
                                    var func5601 = function(argcv) {    // method isWritable
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
                                      setModuleName("ast");
                                      // isWritable is a simple accessor - elide try ... catch
                                      setLineNumber(865);    // compilenode identifier
                                      return GraceFalse;
                                    };
                                    func5601.paramCounts = [0];
                                    obj5543.methods["isWritable"] = func5601;
                                    func5601.definitionLine = 865;
                                    func5601.definitionModule = "ast";
                                    var func5602 = function(argcv) {    // method isReadable
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
                                      setModuleName("ast");
                                      setLineNumber(866);    // compilenode call
                                      onSelf = true;
                                      var call5603 = callmethodChecked(this, "isPublic", [0]);
                                      return call5603;
                                    };
                                    func5602.paramCounts = [0];
                                    obj5543.methods["isReadable"] = func5602;
                                    func5602.definitionLine = 866;
                                    func5602.definitionModule = "ast";
                                    var func5604 = function(argcv) {    // method usesAsType(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_aNode = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
                                      setModuleName("ast");
                                      setLineNumber(868);    // compilenode call
                                      onSelf = true;
                                      var call5605 = callmethodChecked(this, "dtype", [0]);
                                      var opresult5608 = callmethodChecked(var_aNode, "==", [1], call5605);
                                      return opresult5608;
                                    };
                                    func5604.paramCounts = [1];
                                    obj5543.methods["usesAsType"] = func5604;
                                    func5604.definitionLine = 867;
                                    func5604.definitionModule = "ast";
                                    var func5609 = function(argcv) {    // method returnsObject
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                                      setModuleName("ast");
                                      setLineNumber(871);    // compilenode block
                                      var block5610 = new GraceBlock(this, 871, 0);
                                      block5610.real = function() {
                                        onSelf = true;
                                        var call5611 = callmethodChecked(this, "body", [0]);
                                        var call5612 = callmethodChecked(call5611, "last", [0]);
                                        var call5613 = callmethodChecked(call5612, "returnsObject", [0]);
                                        return call5613;
                                      };
                                      onSelf = true;
                                      var call5615 = callmethodChecked(this, "body", [0]);
                                      var call5616 = callmethodChecked(call5615, "isEmpty", [0]);
                                      var call5617 = callmethodChecked(call5616, "not", [0]);
                                      var opresult5619 = callmethodChecked(call5617, "&&", [1], block5610);
                                      return opresult5619;
                                    };
                                    func5609.paramCounts = [0];
                                    obj5543.methods["returnsObject"] = func5609;
                                    func5609.definitionLine = 870;
                                    func5609.definitionModule = "ast";
                                    var func5620 = function(argcv) {    // method returnedObjectScope
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnedObjectScope"));
                                      setModuleName("ast");
                                      setLineNumber(875);    // compilenode call
                                      onSelf = true;
                                      var call5621 = callmethodChecked(this, "body", [0]);
                                      var call5622 = callmethodChecked(call5621, "last", [0]);
                                      var call5623 = callmethodChecked(call5622, "returnedObjectScope", [0]);
                                      return call5623;
                                    };
                                    func5620.paramCounts = [0];
                                    obj5543.methods["returnedObjectScope"] = func5620;
                                    func5620.definitionLine = 873;
                                    func5620.definitionModule = "ast";
                                    var func5624 = function(argcv) {    // method accept(1)from(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_visitor = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                      var var_as = arguments[curarg];
                                      curarg++;
                                      if (argcv[1] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(877);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                      curarg++;
                                      curarg++;
                                      // End argument checking
                                      setModuleName("ast");
                                      var if5625 = GraceDone;
                                      setLineNumber(878);    // compilenode identifier
                                      var call5626 = callmethodChecked(var_visitor, "visitMethod()up", [1, 1], this, var_as);
                                      if (Grace_isTrue(call5626)) {
                                        setLineNumber(879);    // compilenode identifier
                                        var call5627 = callmethodChecked(var_as, "extend", [1], this);
                                        var var_newChain = call5627;
                                        setLineNumber(880);    // compilenode call
                                        onSelf = true;
                                        var call5628 = callmethodChecked(this, "value", [0]);
                                        var call5629 = callmethodChecked(call5628, "accept()from", [1, 1], var_visitor, var_newChain);
                                        var if5630 = GraceDone;
                                        setLineNumber(881);    // compilenode call
                                        onSelf = true;
                                        var call5631 = callmethodChecked(this, "typeParams", [0]);
                                        var opresult5634 = callmethodChecked(GraceFalse, "\u2260", [1], call5631);
                                        if (Grace_isTrue(opresult5634)) {
                                          setLineNumber(882);    // compilenode call
                                          onSelf = true;
                                          var call5635 = callmethodChecked(this, "typeParams", [0]);
                                          var call5636 = callmethodChecked(call5635, "accept()from", [1, 1], var_visitor, var_newChain);
                                          if5630 = call5636;
                                        }
                                        setLineNumber(884);    // compilenode call
                                        onSelf = true;
                                        var call5637 = callmethodChecked(this, "signature", [0]);
                                        var block5638 = new GraceBlock(this, 884, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block5638.real = function(var_part) {
                                          setLineNumber(885);    // compilenode identifier
                                          var call5639 = callmethodChecked(var_part, "params", [0]);
                                          var block5640 = new GraceBlock(this, 885, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block5640.real = function(var_p) {
                                            setLineNumber(886);    // compilenode identifier
                                            var call5641 = callmethodChecked(var_p, "accept()from", [1, 1], var_visitor, var_newChain);
                                            return call5641;
                                          };
                                          var call5642 = callmethodChecked(var_prelude, "for()do", [1, 1], call5639, block5640);
                                          return call5642;
                                        };
                                        var call5643 = callmethodChecked(var_prelude, "for()do", [1, 1], call5637, block5638);
                                        var if5644 = GraceDone;
                                        setLineNumber(889);    // compilenode call
                                        onSelf = true;
                                        var call5645 = callmethodChecked(this, "dtype", [0]);
                                        var opresult5648 = callmethodChecked(GraceFalse, "\u2260", [1], call5645);
                                        if (Grace_isTrue(opresult5648)) {
                                          setLineNumber(890);    // compilenode call
                                          onSelf = true;
                                          var call5649 = callmethodChecked(this, "dtype", [0]);
                                          var call5650 = callmethodChecked(call5649, "accept()from", [1, 1], var_visitor, var_newChain);
                                          if5644 = call5650;
                                        }
                                        setLineNumber(892);    // compilenode call
                                        onSelf = true;
                                        var call5651 = callmethodChecked(this, "annotations", [0]);
                                        var block5652 = new GraceBlock(this, 892, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block5652.real = function(var_ann) {
                                          setLineNumber(893);    // compilenode identifier
                                          var call5653 = callmethodChecked(var_ann, "accept()from", [1, 1], var_visitor, var_newChain);
                                          return call5653;
                                        };
                                        var call5654 = callmethodChecked(var_prelude, "for()do", [1, 1], call5651, block5652);
                                        setLineNumber(895);    // compilenode call
                                        onSelf = true;
                                        var call5655 = callmethodChecked(this, "body", [0]);
                                        var block5656 = new GraceBlock(this, 895, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block5656.real = function(var_mx) {
                                          setLineNumber(896);    // compilenode identifier
                                          var call5657 = callmethodChecked(var_mx, "accept()from", [1, 1], var_visitor, var_newChain);
                                          return call5657;
                                        };
                                        var call5658 = callmethodChecked(var_prelude, "for()do", [1, 1], call5655, block5656);
                                        if5625 = call5658;
                                      }
                                      return if5625;
                                    };
                                    func5624.paramTypes = [];
                                    func5624.paramTypes.push([]);
                                    func5624.paramTypes.push([]);
                                    func5624.paramCounts = [1, 1];
                                    obj5543.methods["accept()from"] = func5624;
                                    func5624.definitionLine = 877;
                                    func5624.definitionModule = "ast";
                                    var func5659 = function(argcv) {    // method map(1)ancestors(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_blk = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                      var var_as = arguments[curarg];
                                      curarg++;
                                      if (argcv[1] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                      setModuleName("ast");
                                      setLineNumber(901);    // compilenode call
                                      onSelf = true;
                                      var call5660 = callmethodChecked(this, "shallowCopy", [0]);
                                      var var_n = call5660;
                                      setLineNumber(902);    // compilenode identifier
                                      var call5661 = callmethodChecked(var_as, "extend", [1], var_n);
                                      var var_newChain = call5661;
                                      setLineNumber(903);    // compilenode call
                                      onSelf = true;
                                      var call5662 = callmethodChecked(this, "body", [0]);
                                      var call5663 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5664 = callmethodChecked(call5663, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5665 = callmethodChecked(call5664, "listMap()ancestors", [2, 1], call5662, var_blk, var_newChain);
                                      var call5666 = callmethodChecked(var_n, "body:=", [1], call5665);
                                      setLineNumber(904);    // compilenode call
                                      onSelf = true;
                                      var call5667 = callmethodChecked(this, "typeParams", [0]);
                                      var call5668 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5669 = callmethodChecked(call5668, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5670 = callmethodChecked(call5669, "maybeMap()ancestors", [2, 1], call5667, var_blk, var_newChain);
                                      var call5671 = callmethodChecked(var_n, "typeParams:=", [1], call5670);
                                      setLineNumber(905);    // compilenode call
                                      onSelf = true;
                                      var call5672 = callmethodChecked(this, "signature", [0]);
                                      var call5673 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5674 = callmethodChecked(call5673, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5675 = callmethodChecked(call5674, "listMap()ancestors", [2, 1], call5672, var_blk, var_newChain);
                                      var call5676 = callmethodChecked(var_n, "signature:=", [1], call5675);
                                      setLineNumber(906);    // compilenode call
                                      onSelf = true;
                                      var call5677 = callmethodChecked(this, "annotations", [0]);
                                      var call5678 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5679 = callmethodChecked(call5678, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5680 = callmethodChecked(call5679, "listMap()ancestors", [2, 1], call5677, var_blk, var_newChain);
                                      var call5681 = callmethodChecked(var_n, "annotations:=", [1], call5680);
                                      setLineNumber(907);    // compilenode call
                                      onSelf = true;
                                      var call5682 = callmethodChecked(this, "dtype", [0]);
                                      var call5683 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5684 = callmethodChecked(call5683, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call5685 = callmethodChecked(call5684, "maybeMap()ancestors", [2, 1], call5682, var_blk, var_newChain);
                                      var call5686 = callmethodChecked(var_n, "dtype:=", [1], call5685);
                                      setLineNumber(908);    // compilenode identifier
                                      var call5687 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                      return call5687;
                                    };
                                    func5659.paramCounts = [1, 1];
                                    obj5543.methods["map()ancestors"] = func5659;
                                    func5659.definitionLine = 900;
                                    func5659.definitionModule = "ast";
                                    var func5688 = function(argcv) {    // method pretty(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_depth = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                      setModuleName("ast");
                                      setLineNumber(911);    // compilenode string
                                      var string5689 = new GraceString("");
                                      var var_spc = string5689;
                                      setLineNumber(912);    // compilenode num
                                      var opresult5692 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                      var block5693 = new GraceBlock(this, 912, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block5693.real = function(var_i) {
                                        setLineNumber(913);    // compilenode string
                                        var string5694 = new GraceString("  ");
                                        var opresult5697 = callmethodChecked(var_spc, "++", [1], string5694);
                                        var_spc = opresult5697;
                                        return GraceDone;
                                      };
                                      var call5698 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult5692, block5693);
                                      setLineNumber(915);    // compilenode string
                                      var string5699 = new GraceString("\n");
                                      var call5701 = callmethodsuper(this, "pretty", [1], var_depth);
                                      var opresult5703 = callmethodChecked(call5701, "++", [1], string5699);
                                      var var_s = opresult5703;
                                      setLineNumber(916);    // compilenode identifier
                                      var opresult5706 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                      onSelf = true;
                                      var call5707 = callmethodChecked(this, "value", [0]);
                                      var call5708 = callmethodChecked(call5707, "pretty", [1], opresult5706);
                                      var string5710 = new GraceString("Name: ");
                                      var opresult5714 = callmethodChecked(var_s, "++", [1], var_spc);
                                      var opresult5716 = callmethodChecked(opresult5714, "++", [1], string5710);
                                      var opresult5718 = callmethodChecked(opresult5716, "++", [1], call5708);
                                      var_s = opresult5718;
                                      setLineNumber(917);    // compilenode string
                                      var string5719 = new GraceString("\n");
                                      var opresult5722 = callmethodChecked(var_s, "++", [1], string5719);
                                      var_s = opresult5722;
                                      var if5723 = GraceDone;
                                      setLineNumber(918);    // compilenode call
                                      onSelf = true;
                                      var call5724 = callmethodChecked(this, "dtype", [0]);
                                      var opresult5727 = callmethodChecked(GraceFalse, "\u2260", [1], call5724);
                                      if (Grace_isTrue(opresult5727)) {
                                        setLineNumber(919);    // compilenode string
                                        var string5728 = new GraceString("  ");
                                        var string5731 = new GraceString("Returns:\n");
                                        var opresult5735 = callmethodChecked(var_s, "++", [1], var_spc);
                                        var opresult5737 = callmethodChecked(opresult5735, "++", [1], string5731);
                                        var opresult5739 = callmethodChecked(opresult5737, "++", [1], var_spc);
                                        var opresult5741 = callmethodChecked(opresult5739, "++", [1], string5728);
                                        var_s = opresult5741;
                                        setLineNumber(920);    // compilenode string
                                        var string5742 = new GraceString("\n");
                                        var opresult5746 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                        onSelf = true;
                                        var call5747 = callmethodChecked(this, "dtype", [0]);
                                        var call5748 = callmethodChecked(call5747, "pretty", [1], opresult5746);
                                        var opresult5751 = callmethodChecked(var_s, "++", [1], call5748);
                                        var opresult5753 = callmethodChecked(opresult5751, "++", [1], string5742);
                                        var_s = opresult5753;
                                        if5723 = GraceDone;
                                      }
                                      var if5754 = GraceDone;
                                      setLineNumber(922);    // compilenode call
                                      onSelf = true;
                                      var call5755 = callmethodChecked(this, "isFresh", [0]);
                                      if (Grace_isTrue(call5755)) {
                                        var string5756 = new GraceString("Fresh\n");
                                        var opresult5760 = callmethodChecked(var_s, "++", [1], var_spc);
                                        var opresult5762 = callmethodChecked(opresult5760, "++", [1], string5756);
                                        var_s = opresult5762;
                                        if5754 = GraceDone;
                                      }
                                      setLineNumber(923);    // compilenode string
                                      var string5763 = new GraceString("Signature:");
                                      var string5766 = new GraceString("");
                                      var string5769 = new GraceString("");
                                      var opresult5771 = callmethodChecked(string5769, "++", [1], var_s);
                                      var opresult5773 = callmethodChecked(opresult5771, "++", [1], string5766);
                                      var opresult5775 = callmethodChecked(opresult5773, "++", [1], var_spc);
                                      var opresult5777 = callmethodChecked(opresult5775, "++", [1], string5763);
                                      var_s = opresult5777;
                                      setLineNumber(924);    // compilenode call
                                      onSelf = true;
                                      var call5778 = callmethodChecked(this, "signature", [0]);
                                      var block5779 = new GraceBlock(this, 924, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block5779.real = function(var_part) {
                                        setLineNumber(925);    // compilenode string
                                        var string5780 = new GraceString("");
                                        var call5782 = callmethodChecked(var_part, "name", [0]);
                                        var string5784 = new GraceString("Part: ");
                                        var string5787 = new GraceString("\n  ");
                                        var string5790 = new GraceString("");
                                        var opresult5792 = callmethodChecked(string5790, "++", [1], var_s);
                                        var opresult5794 = callmethodChecked(opresult5792, "++", [1], string5787);
                                        var opresult5796 = callmethodChecked(opresult5794, "++", [1], var_spc);
                                        var opresult5798 = callmethodChecked(opresult5796, "++", [1], string5784);
                                        var opresult5800 = callmethodChecked(opresult5798, "++", [1], call5782);
                                        var opresult5802 = callmethodChecked(opresult5800, "++", [1], string5780);
                                        var_s = opresult5802;
                                        setLineNumber(926);    // compilenode string
                                        var string5803 = new GraceString("Parameters:");
                                        var string5806 = new GraceString("\n    ");
                                        var string5809 = new GraceString("");
                                        var opresult5811 = callmethodChecked(string5809, "++", [1], var_s);
                                        var opresult5813 = callmethodChecked(opresult5811, "++", [1], string5806);
                                        var opresult5815 = callmethodChecked(opresult5813, "++", [1], var_spc);
                                        var opresult5817 = callmethodChecked(opresult5815, "++", [1], string5803);
                                        var_s = opresult5817;
                                        setLineNumber(927);    // compilenode identifier
                                        var call5818 = callmethodChecked(var_part, "params", [0]);
                                        var block5819 = new GraceBlock(this, 927, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block5819.real = function(var_p) {
                                          setLineNumber(928);    // compilenode string
                                          var string5820 = new GraceString("");
                                          var opresult5824 = callmethodChecked(var_depth, "+", [1], new GraceNum(4));
                                          var call5825 = callmethodChecked(var_p, "pretty", [1], opresult5824);
                                          var string5827 = new GraceString("");
                                          var string5830 = new GraceString("\n      ");
                                          var string5833 = new GraceString("");
                                          var opresult5835 = callmethodChecked(string5833, "++", [1], var_s);
                                          var opresult5837 = callmethodChecked(opresult5835, "++", [1], string5830);
                                          var opresult5839 = callmethodChecked(opresult5837, "++", [1], var_spc);
                                          var opresult5841 = callmethodChecked(opresult5839, "++", [1], string5827);
                                          var opresult5843 = callmethodChecked(opresult5841, "++", [1], call5825);
                                          var opresult5845 = callmethodChecked(opresult5843, "++", [1], string5820);
                                          var_s = opresult5845;
                                          return GraceDone;
                                        };
                                        var call5846 = callmethodChecked(var_prelude, "for()do", [1, 1], call5818, block5819);
                                        return call5846;
                                      };
                                      var call5847 = callmethodChecked(var_prelude, "for()do", [1, 1], call5778, block5779);
                                      setLineNumber(931);    // compilenode string
                                      var string5848 = new GraceString("\n");
                                      var opresult5851 = callmethodChecked(var_s, "++", [1], string5848);
                                      var_s = opresult5851;
                                      var if5852 = GraceDone;
                                      setLineNumber(932);    // compilenode call
                                      onSelf = true;
                                      var call5853 = callmethodChecked(this, "typeParams", [0]);
                                      var opresult5856 = callmethodChecked(GraceFalse, "\u2260", [1], call5853);
                                      if (Grace_isTrue(opresult5856)) {
                                        setLineNumber(933);    // compilenode string
                                        var string5857 = new GraceString("Generics:");
                                        var string5860 = new GraceString("");
                                        var string5863 = new GraceString("");
                                        var opresult5865 = callmethodChecked(string5863, "++", [1], var_s);
                                        var opresult5867 = callmethodChecked(opresult5865, "++", [1], string5860);
                                        var opresult5869 = callmethodChecked(opresult5867, "++", [1], var_spc);
                                        var opresult5871 = callmethodChecked(opresult5869, "++", [1], string5857);
                                        var_s = opresult5871;
                                        setLineNumber(934);    // compilenode block
                                        var block5872 = new GraceBlock(this, 934, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block5872.real = function(var_g) {
                                          setLineNumber(935);    // compilenode string
                                          var string5873 = new GraceString("");
                                          var call5875 = callmethodChecked(var_g, "pretty", [1], new GraceNum(0));
                                          var string5877 = new GraceString("  ");
                                          var string5880 = new GraceString("\n");
                                          var string5883 = new GraceString("");
                                          var opresult5885 = callmethodChecked(string5883, "++", [1], var_s);
                                          var opresult5887 = callmethodChecked(opresult5885, "++", [1], string5880);
                                          var opresult5889 = callmethodChecked(opresult5887, "++", [1], var_spc);
                                          var opresult5891 = callmethodChecked(opresult5889, "++", [1], string5877);
                                          var opresult5893 = callmethodChecked(opresult5891, "++", [1], call5875);
                                          var opresult5895 = callmethodChecked(opresult5893, "++", [1], string5873);
                                          var_s = opresult5895;
                                          return GraceDone;
                                        };
                                        setLineNumber(934);    // compilenode call
                                        onSelf = true;
                                        var call5896 = callmethodChecked(this, "typeParams", [0]);
                                        var call5897 = callmethodChecked(call5896, "do", [1], block5872);
                                        setLineNumber(937);    // compilenode string
                                        var string5898 = new GraceString("\n");
                                        var opresult5901 = callmethodChecked(var_s, "++", [1], string5898);
                                        var_s = opresult5901;
                                        if5852 = GraceDone;
                                      }
                                      var if5902 = GraceDone;
                                      setLineNumber(939);    // compilenode call
                                      onSelf = true;
                                      var call5904 = callmethodChecked(this, "annotations", [0]);
                                      var call5905 = callmethodChecked(call5904, "size", [0]);
                                      var opresult5907 = callmethodChecked(call5905, ">", [1], new GraceNum(0));
                                      if (Grace_isTrue(opresult5907)) {
                                        setLineNumber(940);    // compilenode string
                                        var string5908 = new GraceString("Annotations:");
                                        var string5911 = new GraceString("");
                                        var string5914 = new GraceString("");
                                        var opresult5916 = callmethodChecked(string5914, "++", [1], var_s);
                                        var opresult5918 = callmethodChecked(opresult5916, "++", [1], string5911);
                                        var opresult5920 = callmethodChecked(opresult5918, "++", [1], var_spc);
                                        var opresult5922 = callmethodChecked(opresult5920, "++", [1], string5908);
                                        var_s = opresult5922;
                                        setLineNumber(941);    // compilenode call
                                        onSelf = true;
                                        var call5923 = callmethodChecked(this, "annotations", [0]);
                                        var block5924 = new GraceBlock(this, 941, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block5924.real = function(var_an) {
                                          setLineNumber(942);    // compilenode string
                                          var string5925 = new GraceString("");
                                          var opresult5929 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                          var call5930 = callmethodChecked(var_an, "pretty", [1], opresult5929);
                                          var string5932 = new GraceString("  ");
                                          var string5935 = new GraceString("\n");
                                          var string5938 = new GraceString("");
                                          var opresult5940 = callmethodChecked(string5938, "++", [1], var_s);
                                          var opresult5942 = callmethodChecked(opresult5940, "++", [1], string5935);
                                          var opresult5944 = callmethodChecked(opresult5942, "++", [1], var_spc);
                                          var opresult5946 = callmethodChecked(opresult5944, "++", [1], string5932);
                                          var opresult5948 = callmethodChecked(opresult5946, "++", [1], call5930);
                                          var opresult5950 = callmethodChecked(opresult5948, "++", [1], string5925);
                                          var_s = opresult5950;
                                          return GraceDone;
                                        };
                                        var call5951 = callmethodChecked(var_prelude, "for()do", [1, 1], call5923, block5924);
                                        setLineNumber(944);    // compilenode string
                                        var string5952 = new GraceString("\n");
                                        var opresult5955 = callmethodChecked(var_s, "++", [1], string5952);
                                        var_s = opresult5955;
                                        if5902 = GraceDone;
                                      }
                                      setLineNumber(946);    // compilenode string
                                      var string5956 = new GraceString("Body:");
                                      var opresult5960 = callmethodChecked(var_s, "++", [1], var_spc);
                                      var opresult5962 = callmethodChecked(opresult5960, "++", [1], string5956);
                                      var_s = opresult5962;
                                      setLineNumber(947);    // compilenode call
                                      onSelf = true;
                                      var call5963 = callmethodChecked(this, "body", [0]);
                                      var block5964 = new GraceBlock(this, 947, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block5964.real = function(var_mx) {
                                        setLineNumber(948);    // compilenode identifier
                                        var opresult5967 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                        var call5968 = callmethodChecked(var_mx, "pretty", [1], opresult5967);
                                        var string5971 = new GraceString("\n  ");
                                        var opresult5974 = callmethodChecked(var_s, "++", [1], string5971);
                                        var opresult5976 = callmethodChecked(opresult5974, "++", [1], var_spc);
                                        var opresult5978 = callmethodChecked(opresult5976, "++", [1], call5968);
                                        var_s = opresult5978;
                                        return GraceDone;
                                      };
                                      var call5979 = callmethodChecked(var_prelude, "for()do", [1, 1], call5963, block5964);
                                      var if5980 = GraceDone;
                                      setLineNumber(950);    // compilenode call
                                      onSelf = true;
                                      var call5981 = callmethodChecked(this, "comments", [0]);
                                      var opresult5984 = callmethodChecked(GraceFalse, "\u2260", [1], call5981);
                                      if (Grace_isTrue(opresult5984)) {
                                        setLineNumber(951);    // compilenode identifier
                                        var opresult5987 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                        onSelf = true;
                                        var call5988 = callmethodChecked(this, "comments", [0]);
                                        var call5989 = callmethodChecked(call5988, "pretty", [1], opresult5987);
                                        var opresult5992 = callmethodChecked(var_s, "++", [1], call5989);
                                        var_s = opresult5992;
                                        if5980 = GraceDone;
                                      }
                                      setLineNumber(953);    // compilenode identifier
                                      return var_s;
                                    };
                                    func5688.paramCounts = [1];
                                    obj5543.methods["pretty"] = func5688;
                                    func5688.definitionLine = 910;
                                    func5688.definitionModule = "ast";
                                    var func5993 = function(argcv) {    // method toGrace(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_depth = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(955);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("ast");
                                      setLineNumber(956);    // compilenode string
                                      var string5994 = new GraceString("");
                                      var var_spc = string5994;
                                      setLineNumber(957);    // compilenode identifier
                                      var diff5997 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                      var opresult6000 = callmethodChecked(new GraceNum(0), "..", [1], diff5997);
                                      var block6001 = new GraceBlock(this, 957, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6001.real = function(var_i) {
                                        setLineNumber(958);    // compilenode string
                                        var string6002 = new GraceString("    ");
                                        var opresult6005 = callmethodChecked(var_spc, "++", [1], string6002);
                                        var_spc = opresult6005;
                                        return GraceDone;
                                      };
                                      var call6006 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult6000, block6001);
                                      setLineNumber(960);    // compilenode string
                                      var string6007 = new GraceString("method ");
                                      var var_s = string6007;
                                      setLineNumber(961);    // compilenode identifier
                                      var var_firstPart = GraceTrue;
                                      setLineNumber(962);    // compilenode call
                                      onSelf = true;
                                      var call6008 = callmethodChecked(this, "signature", [0]);
                                      var block6009 = new GraceBlock(this, 962, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6009.real = function(var_part) {
                                        setLineNumber(963);    // compilenode identifier
                                        var call6010 = callmethodChecked(var_part, "name", [0]);
                                        var opresult6013 = callmethodChecked(var_s, "++", [1], call6010);
                                        var_s = opresult6013;
                                        var if6014 = GraceDone;
                                        setLineNumber(964);    // compilenode block
                                        var block6015 = new GraceBlock(this, 964, 0);
                                        block6015.real = function() {
                                          onSelf = true;
                                          var call6016 = callmethodChecked(this, "typeParams", [0]);
                                          var opresult6019 = callmethodChecked(GraceFalse, "\u2260", [1], call6016);
                                          return opresult6019;
                                        };
                                        var opresult6022 = callmethodChecked(var_firstPart, "&&", [1], block6015);
                                        if (Grace_isTrue(opresult6022)) {
                                          setLineNumber(965);    // compilenode identifier
                                          var opresult6025 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                          onSelf = true;
                                          var call6026 = callmethodChecked(this, "typeParams", [0]);
                                          var call6027 = callmethodChecked(call6026, "toGrace", [1], opresult6025);
                                          var opresult6030 = callmethodChecked(var_s, "++", [1], call6027);
                                          var_s = opresult6030;
                                          if6014 = GraceDone;
                                        }
                                        setLineNumber(967);    // compilenode identifier
                                        var_firstPart = GraceFalse;
                                        var if6031 = GraceDone;
                                        setLineNumber(968);    // compilenode identifier
                                        var call6033 = callmethodChecked(var_part, "params", [0]);
                                        var call6034 = callmethodChecked(call6033, "size", [0]);
                                        var opresult6036 = callmethodChecked(call6034, ">", [1], new GraceNum(0));
                                        if (Grace_isTrue(opresult6036)) {
                                          setLineNumber(969);    // compilenode string
                                          var string6037 = new GraceString("(");
                                          var opresult6040 = callmethodChecked(var_s, "++", [1], string6037);
                                          var_s = opresult6040;
                                          setLineNumber(970);    // compilenode identifier
                                          var call6041 = callmethodChecked(var_part, "params", [0]);
                                          var call6042 = callmethodChecked(call6041, "indices", [0]);
                                          var block6043 = new GraceBlock(this, 970, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6043.real = function(var_pnr) {
                                            setLineNumber(971);    // compilenode identifier
                                            var call6044 = callmethodChecked(var_part, "params", [0]);
                                            var call6045 = callmethodChecked(call6044, "at", [1], var_pnr);
                                            var var_p = call6045;
                                            setLineNumber(972);    // compilenode identifier
                                            var opresult6048 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                            var call6049 = callmethodChecked(var_p, "toGrace", [1], opresult6048);
                                            var opresult6052 = callmethodChecked(var_s, "++", [1], call6049);
                                            var_s = opresult6052;
                                            var if6053 = GraceDone;
                                            setLineNumber(973);    // compilenode identifier
                                            var call6054 = callmethodChecked(var_part, "params", [0]);
                                            var call6055 = callmethodChecked(call6054, "size", [0]);
                                            var opresult6058 = callmethodChecked(var_pnr, "<", [1], call6055);
                                            if (Grace_isTrue(opresult6058)) {
                                              setLineNumber(974);    // compilenode string
                                              var string6059 = new GraceString(", ");
                                              var opresult6062 = callmethodChecked(var_s, "++", [1], string6059);
                                              var_s = opresult6062;
                                              if6053 = GraceDone;
                                            }
                                            return if6053;
                                          };
                                          var call6063 = callmethodChecked(var_prelude, "for()do", [1, 1], call6042, block6043);
                                          setLineNumber(977);    // compilenode string
                                          var string6064 = new GraceString(")");
                                          var opresult6067 = callmethodChecked(var_s, "++", [1], string6064);
                                          var_s = opresult6067;
                                          if6031 = GraceDone;
                                        }
                                        return if6031;
                                      };
                                      var call6068 = callmethodChecked(var_prelude, "for()do", [1, 1], call6008, block6009);
                                      var if6069 = GraceDone;
                                      setLineNumber(980);    // compilenode call
                                      onSelf = true;
                                      var call6070 = callmethodChecked(this, "dtype", [0]);
                                      var opresult6073 = callmethodChecked(GraceFalse, "\u2260", [1], call6070);
                                      if (Grace_isTrue(opresult6073)) {
                                        setLineNumber(981);    // compilenode string
                                        var string6074 = new GraceString("");
                                        onSelf = true;
                                        var call6076 = callmethodChecked(this, "dtype", [0]);
                                        var call6077 = callmethodChecked(call6076, "toGrace", [1], new GraceNum(0));
                                        var string6079 = new GraceString(" -> ");
                                        var opresult6081 = callmethodChecked(string6079, "++", [1], call6077);
                                        var opresult6083 = callmethodChecked(opresult6081, "++", [1], string6074);
                                        var opresult6086 = callmethodChecked(var_s, "++", [1], opresult6083);
                                        var_s = opresult6086;
                                        if6069 = GraceDone;
                                      }
                                      var if6087 = GraceDone;
                                      setLineNumber(983);    // compilenode call
                                      onSelf = true;
                                      var call6089 = callmethodChecked(this, "annotations", [0]);
                                      var call6090 = callmethodChecked(call6089, "size", [0]);
                                      var opresult6092 = callmethodChecked(call6090, ">", [1], new GraceNum(0));
                                      if (Grace_isTrue(opresult6092)) {
                                        setLineNumber(984);    // compilenode string
                                        var string6093 = new GraceString(" is ");
                                        var opresult6096 = callmethodChecked(var_s, "++", [1], string6093);
                                        var_s = opresult6096;
                                        setLineNumber(985);    // compilenode block
                                        var block6097 = new GraceBlock(this, 985, 2);
                                        setLineNumber(1);    // compilenode identifier
                                        block6097.real = function(var_a, var_b) {
                                          setLineNumber(986);    // compilenode identifier
                                          var call6098 = callmethodChecked(var_b, "toGrace", [1], new GraceNum(0));
                                          var if6100 = GraceDone;
                                          var string6101 = new GraceString("");
                                          var opresult6104 = callmethodChecked(var_a, "\u2260", [1], string6101);
                                          if (Grace_isTrue(opresult6104)) {
                                            var string6105 = new GraceString(", ");
                                            var opresult6108 = callmethodChecked(var_a, "++", [1], string6105);
                                            if6100 = opresult6108;
                                          } else {
                                            var string6109 = new GraceString("");
                                            if6100 = string6109;
                                          }
                                          var opresult6111 = callmethodChecked(if6100, "++", [1], call6098);
                                          return opresult6111;
                                        };
                                        setLineNumber(987);    // compilenode string
                                        var string6112 = new GraceString("");
                                        setLineNumber(985);    // compilenode call
                                        onSelf = true;
                                        var call6113 = callmethodChecked(this, "annotations", [0]);
                                        var call6114 = callmethodChecked(call6113, "fold()startingWith", [1, 1], block6097, string6112);
                                        var opresult6117 = callmethodChecked(var_s, "++", [1], call6114);
                                        var_s = opresult6117;
                                        if6087 = GraceDone;
                                      }
                                      setLineNumber(989);    // compilenode string
                                      var string6118 = new GraceString(" {");
                                      var opresult6121 = callmethodChecked(var_s, "++", [1], string6118);
                                      var_s = opresult6121;
                                      var if6122 = GraceDone;
                                      setLineNumber(990);    // compilenode call
                                      onSelf = true;
                                      var call6123 = callmethodChecked(this, "comments", [0]);
                                      var opresult6126 = callmethodChecked(GraceFalse, "\u2260", [1], call6123);
                                      if (Grace_isTrue(opresult6126)) {
                                        setLineNumber(991);    // compilenode identifier
                                        var opresult6129 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                        onSelf = true;
                                        var call6130 = callmethodChecked(this, "comments", [0]);
                                        var call6131 = callmethodChecked(call6130, "toGrace", [1], opresult6129);
                                        var opresult6134 = callmethodChecked(var_s, "++", [1], call6131);
                                        var_s = opresult6134;
                                        if6122 = GraceDone;
                                      }
                                      setLineNumber(993);    // compilenode call
                                      onSelf = true;
                                      var call6135 = callmethodChecked(this, "body", [0]);
                                      var block6136 = new GraceBlock(this, 993, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6136.real = function(var_mx) {
                                        setLineNumber(994);    // compilenode identifier
                                        var opresult6139 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                        var call6140 = callmethodChecked(var_mx, "toGrace", [1], opresult6139);
                                        var string6142 = new GraceString("    ");
                                        var string6145 = new GraceString("\n");
                                        var opresult6148 = callmethodChecked(var_s, "++", [1], string6145);
                                        var opresult6150 = callmethodChecked(opresult6148, "++", [1], var_spc);
                                        var opresult6152 = callmethodChecked(opresult6150, "++", [1], string6142);
                                        var opresult6154 = callmethodChecked(opresult6152, "++", [1], call6140);
                                        var_s = opresult6154;
                                        return GraceDone;
                                      };
                                      var call6155 = callmethodChecked(var_prelude, "for()do", [1, 1], call6135, block6136);
                                      setLineNumber(996);    // compilenode string
                                      var string6156 = new GraceString("}");
                                      var string6159 = new GraceString("\n");
                                      var opresult6162 = callmethodChecked(var_s, "++", [1], string6159);
                                      var opresult6164 = callmethodChecked(opresult6162, "++", [1], var_spc);
                                      var opresult6166 = callmethodChecked(opresult6164, "++", [1], string6156);
                                      var_s = opresult6166;
                                      setLineNumber(997);    // return value
                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method toGrace(1) does not have " + 
                                                  callmethod(var_String, "asString", [0])._value + "."));
                                      return var_s;
                                    };
                                    func5993.paramTypes = [];
                                    func5993.paramTypes.push([type_Number, "depth"]);
                                    func5993.paramCounts = [1];
                                    obj5543.methods["toGrace"] = func5993;
                                    func5993.definitionLine = 955;
                                    func5993.definitionModule = "ast";
                                    var func6167 = function(argcv) {    // method shallowCopy
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                      setModuleName("ast");
                                      setLineNumber(1000);    // compilenode call
                                      onSelf = true;
                                      var call6168 = callmethodChecked(this, "value", [0]);
                                      onSelf = true;
                                      var call6169 = callmethodChecked(this, "signature", [0]);
                                      onSelf = true;
                                      var call6170 = callmethodChecked(this, "body", [0]);
                                      onSelf = true;
                                      var call6171 = callmethodChecked(this, "dtype", [0]);
                                      var call6172 = callmethodChecked(var_methodNode, "new", [4], call6168, call6169, call6170, call6171);
                                      var call6173 = callmethodChecked(call6172, "shallowCopyFieldsFrom", [1], this);
                                      return call6173;
                                    };
                                    func6167.paramCounts = [0];
                                    obj5543.methods["shallowCopy"] = func6167;
                                    func6167.definitionLine = 999;
                                    func6167.definitionModule = "ast";
                                    var func6174 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_other = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                      setModuleName("ast");
                                      setLineNumber(1003);    // compilenode identifier
                                      var call6175 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                      setLineNumber(1004);    // compilenode identifier
                                      var call6176 = callmethodChecked(var_other, "isFresh", [0]);
                                      onSelf = true;
                                      var call6177 = callmethodChecked(this, "isFresh:=", [1], call6176);
                                      setLineNumber(1005);    // compilenode identifier
                                      var call6178 = callmethodChecked(var_other, "selfclosure", [0]);
                                      onSelf = true;
                                      var call6179 = callmethodChecked(this, "selfclosure:=", [1], call6178);
                                      setLineNumber(1006);    // compilenode identifier
                                      return this;
                                    };
                                    func6174.paramCounts = [1];
                                    obj5543.methods["shallowCopyFieldsFrom"] = func6174;
                                    func6174.definitionLine = 1002;
                                    func6174.definitionModule = "ast";
                                    setLineNumber(818);    // compilenode call
                                    var call6180 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call6181 = callmethodChecked(call6180, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call6182 = callmethodChecked(call6181, "baseNode()object", [0, 1], this);
                                    obj5543.superobj = call6182;
                                    if (call6182.data) obj5543.data = call6182.data;
                                    if (call6182.hasOwnProperty('_value'))
                                        obj5543._value = call6182._value;
                                    setLineNumber(819);    // compilenode string
                                    var string6183 = new GraceString("method");
                                    obj5543.data["kind"] = string6183;
                                    var reader_ast_kind6184 = function() {
                                      return this.data["kind"];
                                    };
                                    reader_ast_kind6184.def = true;
                                    obj5543.methods["kind"] = reader_ast_kind6184;
                                    setLineNumber(820);    // compilenode identifier
                                    obj5543.data["value"] = var_name__39__;
                                    var reader_ast_value6185 = function() {
                                      return this.data["value"];
                                    };
                                    obj5543.methods["value"] = reader_ast_value6185;
                                    obj5543.data["value"] = var_name__39__;
                                    var writer_ast_value6185 = function(argcv, o) {
                                      this.data["value"] = o;
                                      return GraceDone;
                                    };
                                    obj5543.methods["value:="] = writer_ast_value6185;
                                    obj5543.mutable = true;
                                    setLineNumber(821);    // compilenode identifier
                                    obj5543.data["signature"] = var_signature__39__;
                                    var reader_ast_signature6186 = function() {
                                      return this.data["signature"];
                                    };
                                    obj5543.methods["signature"] = reader_ast_signature6186;
                                    obj5543.data["signature"] = var_signature__39__;
                                    var writer_ast_signature6186 = function(argcv, o) {
                                      this.data["signature"] = o;
                                      return GraceDone;
                                    };
                                    obj5543.methods["signature:="] = writer_ast_signature6186;
                                    obj5543.mutable = true;
                                    setLineNumber(822);    // compilenode identifier
                                    obj5543.data["body"] = var_body__39__;
                                    var reader_ast_body6187 = function() {
                                      return this.data["body"];
                                    };
                                    obj5543.methods["body"] = reader_ast_body6187;
                                    obj5543.data["body"] = var_body__39__;
                                    var writer_ast_body6187 = function(argcv, o) {
                                      this.data["body"] = o;
                                      return GraceDone;
                                    };
                                    obj5543.methods["body:="] = writer_ast_body6187;
                                    obj5543.mutable = true;
                                    setLineNumber(823);    // compilenode identifier
                                    obj5543.data["dtype"] = var_dtype__39__;
                                    var reader_ast_dtype6188 = function() {
                                      return this.data["dtype"];
                                    };
                                    obj5543.methods["dtype"] = reader_ast_dtype6188;
                                    obj5543.data["dtype"] = var_dtype__39__;
                                    var writer_ast_dtype6188 = function(argcv, o) {
                                      this.data["dtype"] = o;
                                      return GraceDone;
                                    };
                                    obj5543.methods["dtype:="] = writer_ast_dtype6188;
                                    obj5543.mutable = true;
                                    setLineNumber(824);    // compilenode identifier
                                    obj5543.data["typeParams"] = GraceFalse;
                                    var reader_ast_typeParams6189 = function() {
                                      return this.data["typeParams"];
                                    };
                                    obj5543.methods["typeParams"] = reader_ast_typeParams6189;
                                    obj5543.data["typeParams"] = GraceFalse;
                                    var writer_ast_typeParams6189 = function(argcv, o) {
                                      this.data["typeParams"] = o;
                                      return GraceDone;
                                    };
                                    obj5543.methods["typeParams:="] = writer_ast_typeParams6189;
                                    obj5543.mutable = true;
                                    setLineNumber(825);    // compilenode identifier
                                    obj5543.data["selfclosure"] = GraceFalse;
                                    var reader_ast_selfclosure6190 = function() {
                                      return this.data["selfclosure"];
                                    };
                                    obj5543.methods["selfclosure"] = reader_ast_selfclosure6190;
                                    obj5543.data["selfclosure"] = GraceFalse;
                                    var writer_ast_selfclosure6190 = function(argcv, o) {
                                      this.data["selfclosure"] = o;
                                      return GraceDone;
                                    };
                                    obj5543.methods["selfclosure:="] = writer_ast_selfclosure6190;
                                    obj5543.mutable = true;
                                    setLineNumber(826);    // compilenode call
                                    onSelf = true;
                                    var call6191 = callmethodChecked(this, "value", [0]);
                                    var call6192 = callmethodChecked(call6191, "value", [0]);
                                    obj5543.data["nameString"] = call6192;
                                    var reader_ast_nameString6193 = function() {
                                      return this.data["nameString"];
                                    };
                                    reader_ast_nameString6193.def = true;
                                    obj5543.methods["nameString"] = reader_ast_nameString6193;
                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], call6192)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("value of def 'nameString' is not of type String"));
                                    setLineNumber(827);    // compilenode array
                                    var array6194 = new PrimitiveGraceList([]);
                                    obj5543.data["annotations"] = array6194;
                                    var reader_ast_annotations6195 = function() {
                                      return this.data["annotations"];
                                    };
                                    obj5543.methods["annotations"] = reader_ast_annotations6195;
                                    obj5543.data["annotations"] = array6194;
                                    var writer_ast_annotations6195 = function(argcv, o) {
                                      this.data["annotations"] = o;
                                      return GraceDone;
                                    };
                                    obj5543.methods["annotations:="] = writer_ast_annotations6195;
                                    obj5543.mutable = true;
                                    setLineNumber(828);    // compilenode identifier
                                    obj5543.data["isFresh"] = GraceFalse;
                                    var reader_ast_isFresh6196 = function() {
                                      return this.data["isFresh"];
                                    };
                                    obj5543.methods["isFresh"] = reader_ast_isFresh6196;
                                    obj5543.data["isFresh"] = GraceFalse;
                                    var writer_ast_isFresh6196 = function(argcv, o) {
                                      this.data["isFresh"] = o;
                                      return GraceDone;
                                    };
                                    obj5543.methods["isFresh:="] = writer_ast_isFresh6196;
                                    obj5543.mutable = true;
                                    setLineNumber(829);    // compilenode identifier
                                    obj5543.data["usesClassSyntax"] = GraceFalse;
                                    var reader_ast_usesClassSyntax6197 = function() {
                                      return this.data["usesClassSyntax"];
                                    };
                                    obj5543.methods["usesClassSyntax"] = reader_ast_usesClassSyntax6197;
                                    obj5543.data["usesClassSyntax"] = GraceFalse;
                                    var writer_ast_usesClassSyntax6197 = function(argcv, o) {
                                      this.data["usesClassSyntax"] = o;
                                      return GraceDone;
                                    };
                                    obj5543.methods["usesClassSyntax:="] = writer_ast_usesClassSyntax6197;
                                    obj5543.mutable = true;
                                    superDepth = origSuperDepth;
                                  };
                                  obj_init_5543.apply(inheritingObject, []);
                                  return obj5543;
                                  };
                                  obj4881.methods["new()object"] = func5542;
                                superDepth = origSuperDepth;
                              };
                              obj_init_4881.apply(obj4881, []);
                              var var_methodNode = obj4881;
                              setLineNumber(826);    // compilenode method
                              var func6198 = function(argcv) {    // method methodNode
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for methodNode"));
                                setModuleName("ast");
                                // methodNode is a simple accessor - elide try ... catch
                                setLineNumber(804);    // compilenode identifier
                                return var_methodNode;
                              };
                              func6198.paramCounts = [0];
                              this.methods["methodNode"] = func6198;
                              func6198.definitionLine = 826;
                              func6198.definitionModule = "ast";
                              this.methods["methodNode"].debug = "def";
                              setLineNumber(1010);    // compilenode object
                              var obj6199 = Grace_allocObject(GraceObject, "callNode");
                              obj6199.definitionModule = "ast";
                              obj6199.definitionLine = 1010;
                              obj6199.outer = this;
                              var reader_ast_outer6200 = function() {
                                return this.outer;
                              };
                              obj6199.methods["outer"] = reader_ast_outer6200;
                              var obj_init_6199 = function() {
                                var origSuperDepth = superDepth;
                                superDepth = obj6199;
                                var func6201 = function(argcv) {    // method new(2)scope(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_what = arguments[curarg];
                                  curarg++;
                                  var var_with = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 2)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new (arg list 1) of new(2)scope(1)"));
                                  var var_s = arguments[curarg];
                                  curarg++;
                                  if (argcv[1] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 2) of new(2)scope(1)"));
                                  setModuleName("ast");
                                  setLineNumber(1012);    // compilenode identifier
                                  onSelf = true;
                                  var call6202 = callmethodChecked(this, "new", [2], var_what, var_with);
                                  var var_result = call6202;
                                  setLineNumber(1013);    // compilenode identifier
                                  var call6203 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                  setLineNumber(1014);    // compilenode identifier
                                  return var_result;
                                };
                                func6201.paramCounts = [2, 1];
                                obj6199.methods["new()scope"] = func6201;
                                func6201.definitionLine = 1011;
                                func6201.definitionModule = "ast";
                                var func6204 = function(argcv) {    // method new(2)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_what = arguments[curarg];
                                  curarg++;
                                  var var_with__39__ = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 2)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(2)"));
                                  setModuleName("ast");
                                  setLineNumber(1016);    // compilenode object
                                  var obj6205 = Grace_allocObject(null, "callNode.new");
                                  obj6205.definitionModule = "ast";
                                  obj6205.definitionLine = 1016;
                                  obj6205.outer = this;
                                  var reader_ast_outer6206 = function() {
                                    return this.outer;
                                  };
                                  obj6205.methods["outer"] = reader_ast_outer6206;
                                  var obj_init_6205 = function() {
                                    var origSuperDepth = superDepth;
                                    superDepth = obj6205;
                                    var func6207 = function(argcv) {    // method target
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for target"));
                                      setModuleName("ast");
                                      setLineNumber(1042);    // compilenode call
                                      onSelf = true;
                                      var call6208 = callmethodChecked(this, "value", [0]);
                                      return call6208;
                                    };
                                    func6207.paramCounts = [0];
                                    obj6205.methods["target"] = func6207;
                                    func6207.definitionLine = 1042;
                                    func6207.definitionModule = "ast";
                                    var func6209 = function(argcv) {    // method isCall
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isCall"));
                                      setModuleName("ast");
                                      // isCall is a simple accessor - elide try ... catch
                                      setLineNumber(1043);    // compilenode identifier
                                      return GraceTrue;
                                    };
                                    func6209.paramCounts = [0];
                                    obj6205.methods["isCall"] = func6209;
                                    func6209.definitionLine = 1043;
                                    func6209.definitionModule = "ast";
                                    var func6210 = function(argcv) {    // method returnsObject
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                                      setModuleName("ast");
                                      var if6211 = GraceDone;
                                      setLineNumber(1045);    // compilenode call
                                      onSelf = true;
                                      var call6212 = callmethodChecked(this, "value", [0]);
                                      var call6213 = callmethodChecked(call6212, "isMember", [0]);
                                      var call6214 = callmethodChecked(call6213, "not", [0]);
                                      if (Grace_isTrue(call6214)) {
                                        return GraceFalse;
                                      }
                                      var if6215 = GraceDone;
                                      setLineNumber(1046);    // compilenode string
                                      var string6216 = new GraceString("clone");
                                      onSelf = true;
                                      var call6218 = callmethodChecked(this, "value", [0]);
                                      var call6219 = callmethodChecked(call6218, "nameString", [0]);
                                      var opresult6221 = callmethodChecked(call6219, "==", [1], string6216);
                                      if (Grace_isTrue(opresult6221)) {
                                        return GraceTrue;
                                      }
                                      var if6222 = GraceDone;
                                      setLineNumber(1047);    // compilenode string
                                      var string6223 = new GraceString("copy");
                                      onSelf = true;
                                      var call6225 = callmethodChecked(this, "value", [0]);
                                      var call6226 = callmethodChecked(call6225, "nameString", [0]);
                                      var opresult6228 = callmethodChecked(call6226, "==", [1], string6223);
                                      if (Grace_isTrue(opresult6228)) {
                                        return GraceTrue;
                                      }
                                      setLineNumber(1048);    // compilenode identifier
                                      return GraceFalse;
                                    };
                                    func6210.paramCounts = [0];
                                    obj6205.methods["returnsObject"] = func6210;
                                    func6210.definitionLine = 1044;
                                    func6210.definitionModule = "ast";
                                    var func6229 = function(argcv) {    // method returnedObjectScope
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnedObjectScope"));
                                      setModuleName("ast");
                                      setLineNumber(1052);    // compilenode call
                                      onSelf = true;
                                      var call6230 = callmethodChecked(this, "scope", [0]);
                                      return call6230;
                                    };
                                    func6229.paramCounts = [0];
                                    obj6205.methods["returnedObjectScope"] = func6229;
                                    func6229.definitionLine = 1050;
                                    func6229.definitionModule = "ast";
                                    var func6231 = function(argcv) {    // method accept(1)from(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_visitor = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                      var var_as = arguments[curarg];
                                      curarg++;
                                      if (argcv[1] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(1054);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                      curarg++;
                                      curarg++;
                                      // End argument checking
                                      setModuleName("ast");
                                      var if6232 = GraceDone;
                                      setLineNumber(1055);    // compilenode identifier
                                      var call6233 = callmethodChecked(var_visitor, "visitCall()up", [1, 1], this, var_as);
                                      if (Grace_isTrue(call6233)) {
                                        setLineNumber(1056);    // compilenode identifier
                                        var call6234 = callmethodChecked(var_as, "extend", [1], this);
                                        var var_newChain = call6234;
                                        setLineNumber(1057);    // compilenode call
                                        onSelf = true;
                                        var call6235 = callmethodChecked(this, "value", [0]);
                                        var call6236 = callmethodChecked(call6235, "accept()from", [1, 1], var_visitor, var_newChain);
                                        setLineNumber(1058);    // compilenode call
                                        onSelf = true;
                                        var call6237 = callmethodChecked(this, "with", [0]);
                                        var block6238 = new GraceBlock(this, 1058, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6238.real = function(var_part) {
                                          setLineNumber(1059);    // compilenode identifier
                                          var call6239 = callmethodChecked(var_part, "args", [0]);
                                          var block6240 = new GraceBlock(this, 1059, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6240.real = function(var_arg) {
                                            setLineNumber(1060);    // compilenode identifier
                                            var call6241 = callmethodChecked(var_arg, "accept()from", [1, 1], var_visitor, var_newChain);
                                            return call6241;
                                          };
                                          var call6242 = callmethodChecked(var_prelude, "for()do", [1, 1], call6239, block6240);
                                          return call6242;
                                        };
                                        var call6243 = callmethodChecked(var_prelude, "for()do", [1, 1], call6237, block6238);
                                        var if6244 = GraceDone;
                                        setLineNumber(1063);    // compilenode call
                                        onSelf = true;
                                        var call6245 = callmethodChecked(this, "generics", [0]);
                                        var opresult6248 = callmethodChecked(GraceFalse, "\u2260", [1], call6245);
                                        if (Grace_isTrue(opresult6248)) {
                                          setLineNumber(1064);    // compilenode block
                                          var block6249 = new GraceBlock(this, 1064, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6249.real = function(var_each) {
                                            setLineNumber(1065);    // compilenode identifier
                                            var call6250 = callmethodChecked(var_each, "accept()from", [1, 1], var_visitor, var_newChain);
                                            return call6250;
                                          };
                                          setLineNumber(1064);    // compilenode call
                                          onSelf = true;
                                          var call6251 = callmethodChecked(this, "generics", [0]);
                                          var call6252 = callmethodChecked(call6251, "do", [1], block6249);
                                          if6244 = call6252;
                                        }
                                        if6232 = if6244;
                                      }
                                      return if6232;
                                    };
                                    func6231.paramTypes = [];
                                    func6231.paramTypes.push([]);
                                    func6231.paramTypes.push([]);
                                    func6231.paramCounts = [1, 1];
                                    obj6205.methods["accept()from"] = func6231;
                                    func6231.definitionLine = 1054;
                                    func6231.definitionModule = "ast";
                                    var func6253 = function(argcv) {    // method map(1)ancestors(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_blk = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                      var var_as = arguments[curarg];
                                      curarg++;
                                      if (argcv[1] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                      setModuleName("ast");
                                      setLineNumber(1071);    // compilenode call
                                      onSelf = true;
                                      var call6254 = callmethodChecked(this, "shallowCopy", [0]);
                                      var var_n = call6254;
                                      setLineNumber(1072);    // compilenode identifier
                                      var call6255 = callmethodChecked(var_as, "extend", [1], var_n);
                                      var var_newChain = call6255;
                                      setLineNumber(1073);    // compilenode call
                                      onSelf = true;
                                      var call6256 = callmethodChecked(this, "value", [0]);
                                      var call6257 = callmethodChecked(call6256, "map()ancestors", [1, 1], var_blk, var_newChain);
                                      var call6258 = callmethodChecked(var_n, "value:=", [1], call6257);
                                      setLineNumber(1074);    // compilenode call
                                      onSelf = true;
                                      var call6259 = callmethodChecked(this, "with", [0]);
                                      var call6260 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call6261 = callmethodChecked(call6260, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call6262 = callmethodChecked(call6261, "listMap()ancestors", [2, 1], call6259, var_blk, var_newChain);
                                      var call6263 = callmethodChecked(var_n, "with:=", [1], call6262);
                                      setLineNumber(1075);    // compilenode call
                                      onSelf = true;
                                      var call6264 = callmethodChecked(this, "generics", [0]);
                                      var call6265 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call6266 = callmethodChecked(call6265, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call6267 = callmethodChecked(call6266, "maybeListMap()ancestors", [2, 1], call6264, var_blk, var_newChain);
                                      var call6268 = callmethodChecked(var_n, "generics:=", [1], call6267);
                                      setLineNumber(1076);    // compilenode identifier
                                      var call6269 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                      return call6269;
                                    };
                                    func6253.paramCounts = [1, 1];
                                    obj6205.methods["map()ancestors"] = func6253;
                                    func6253.definitionLine = 1070;
                                    func6253.definitionModule = "ast";
                                    var func6270 = function(argcv) {    // method pretty(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_depth = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                      setModuleName("ast");
                                      setLineNumber(1079);    // compilenode string
                                      var string6271 = new GraceString("");
                                      var var_spc = string6271;
                                      setLineNumber(1080);    // compilenode num
                                      var opresult6274 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                      var block6275 = new GraceBlock(this, 1080, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6275.real = function(var_i) {
                                        setLineNumber(1081);    // compilenode string
                                        var string6276 = new GraceString("  ");
                                        var opresult6279 = callmethodChecked(var_spc, "++", [1], string6276);
                                        var_spc = opresult6279;
                                        return GraceDone;
                                      };
                                      var call6280 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult6274, block6275);
                                      setLineNumber(1083);    // compilenode string
                                      var string6281 = new GraceString("\n");
                                      var call6283 = callmethodsuper(this, "pretty", [1], var_depth);
                                      var opresult6285 = callmethodChecked(call6283, "++", [1], string6281);
                                      var var_s = opresult6285;
                                      setLineNumber(1084);    // compilenode string
                                      var string6286 = new GraceString("");
                                      var opresult6290 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                      onSelf = true;
                                      var call6291 = callmethodChecked(this, "value", [0]);
                                      var call6292 = callmethodChecked(call6291, "pretty", [1], opresult6290);
                                      var string6294 = new GraceString("Method Name: ");
                                      var opresult6296 = callmethodChecked(string6294, "++", [1], call6292);
                                      var opresult6298 = callmethodChecked(opresult6296, "++", [1], string6286);
                                      var opresult6302 = callmethodChecked(var_s, "++", [1], var_spc);
                                      var opresult6304 = callmethodChecked(opresult6302, "++", [1], opresult6298);
                                      var_s = opresult6304;
                                      setLineNumber(1085);    // compilenode string
                                      var string6305 = new GraceString("\n");
                                      var opresult6308 = callmethodChecked(var_s, "++", [1], string6305);
                                      var_s = opresult6308;
                                      var if6309 = GraceDone;
                                      setLineNumber(1086);    // compilenode call
                                      onSelf = true;
                                      var call6310 = callmethodChecked(this, "generics", [0]);
                                      var opresult6313 = callmethodChecked(GraceFalse, "\u2260", [1], call6310);
                                      if (Grace_isTrue(opresult6313)) {
                                        setLineNumber(1087);    // compilenode string
                                        var string6314 = new GraceString("  Generics:\n");
                                        var opresult6318 = callmethodChecked(var_s, "++", [1], var_spc);
                                        var opresult6320 = callmethodChecked(opresult6318, "++", [1], string6314);
                                        var_s = opresult6320;
                                        setLineNumber(1088);    // compilenode call
                                        onSelf = true;
                                        var call6321 = callmethodChecked(this, "generics", [0]);
                                        var block6322 = new GraceBlock(this, 1088, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6322.real = function(var_g) {
                                          setLineNumber(1089);    // compilenode string
                                          var string6323 = new GraceString("\n");
                                          var opresult6327 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                          var call6328 = callmethodChecked(var_g, "pretty", [1], opresult6327);
                                          var string6330 = new GraceString("    ");
                                          var opresult6334 = callmethodChecked(var_s, "++", [1], var_spc);
                                          var opresult6336 = callmethodChecked(opresult6334, "++", [1], string6330);
                                          var opresult6338 = callmethodChecked(opresult6336, "++", [1], call6328);
                                          var opresult6340 = callmethodChecked(opresult6338, "++", [1], string6323);
                                          var_s = opresult6340;
                                          return GraceDone;
                                        };
                                        var call6341 = callmethodChecked(var_prelude, "for()do", [1, 1], call6321, block6322);
                                        if6309 = call6341;
                                      }
                                      setLineNumber(1092);    // compilenode string
                                      var string6342 = new GraceString("Arguments:");
                                      var opresult6346 = callmethodChecked(var_s, "++", [1], var_spc);
                                      var opresult6348 = callmethodChecked(opresult6346, "++", [1], string6342);
                                      var_s = opresult6348;
                                      setLineNumber(1093);    // compilenode call
                                      onSelf = true;
                                      var call6349 = callmethodChecked(this, "with", [0]);
                                      var block6350 = new GraceBlock(this, 1093, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6350.real = function(var_part) {
                                        setLineNumber(1094);    // compilenode identifier
                                        var call6351 = callmethodChecked(var_part, "name", [0]);
                                        var string6353 = new GraceString("Part: ");
                                        var string6356 = new GraceString("\n  ");
                                        var opresult6359 = callmethodChecked(var_s, "++", [1], string6356);
                                        var opresult6361 = callmethodChecked(opresult6359, "++", [1], var_spc);
                                        var opresult6363 = callmethodChecked(opresult6361, "++", [1], string6353);
                                        var opresult6365 = callmethodChecked(opresult6363, "++", [1], call6351);
                                        var_s = opresult6365;
                                        setLineNumber(1095);    // compilenode identifier
                                        var call6366 = callmethodChecked(var_part, "args", [0]);
                                        var block6367 = new GraceBlock(this, 1095, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6367.real = function(var_arg) {
                                          setLineNumber(1096);    // compilenode identifier
                                          var opresult6370 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                          var call6371 = callmethodChecked(var_arg, "pretty", [1], opresult6370);
                                          var string6374 = new GraceString("\n      ");
                                          var opresult6377 = callmethodChecked(var_s, "++", [1], string6374);
                                          var opresult6379 = callmethodChecked(opresult6377, "++", [1], var_spc);
                                          var opresult6381 = callmethodChecked(opresult6379, "++", [1], call6371);
                                          var_s = opresult6381;
                                          return GraceDone;
                                        };
                                        var call6382 = callmethodChecked(var_prelude, "for()do", [1, 1], call6366, block6367);
                                        return call6382;
                                      };
                                      var call6383 = callmethodChecked(var_prelude, "for()do", [1, 1], call6349, block6350);
                                      setLineNumber(1099);    // compilenode identifier
                                      return var_s;
                                    };
                                    func6270.paramCounts = [1];
                                    obj6205.methods["pretty"] = func6270;
                                    func6270.definitionLine = 1078;
                                    func6270.definitionModule = "ast";
                                    var func6384 = function(argcv) {    // method toGrace(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_depth = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(1101);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("ast");
                                      setLineNumber(1102);    // compilenode string
                                      var string6385 = new GraceString("");
                                      var var_spc = string6385;
                                      setLineNumber(1103);    // compilenode block
                                      var block6386 = new GraceBlock(this, 1103, 0);
                                      block6386.real = function() {
                                        setLineNumber(1104);    // compilenode string
                                        var string6387 = new GraceString("    ");
                                        var opresult6390 = callmethodChecked(var_spc, "++", [1], string6387);
                                        var_spc = opresult6390;
                                        return GraceDone;
                                      };
                                      var call6391 = callmethodChecked(var_prelude, "repeat()times", [1, 1], var_depth, block6386);
                                      setLineNumber(1106);    // compilenode string
                                      var string6392 = new GraceString("");
                                      var var_s = string6392;
                                      var if6393 = GraceDone;
                                      setLineNumber(1108);    // compilenode string
                                      var string6394 = new GraceString("member");
                                      onSelf = true;
                                      var call6396 = callmethodChecked(this, "value", [0]);
                                      var call6397 = callmethodChecked(call6396, "kind", [0]);
                                      var opresult6399 = callmethodChecked(call6397, "==", [1], string6394);
                                      if (Grace_isTrue(opresult6399)) {
                                        setLineNumber(1109);    // compilenode call
                                        onSelf = true;
                                        var call6400 = callmethodChecked(this, "value", [0]);
                                        var var_member = call6400;
                                        var if6401 = GraceDone;
                                        setLineNumber(1110);    // compilenode string
                                        var string6402 = new GraceString("prefix");
                                        var call6404 = callmethodChecked(var_member, "value", [0]);
                                        var call6405 = callmethodChecked(call6404, "substringFrom()to", [1, 1], new GraceNum(1), new GraceNum(6));
                                        var opresult6407 = callmethodChecked(call6405, "==", [1], string6402);
                                        if (Grace_isTrue(opresult6407)) {
                                          setLineNumber(1111);    // compilenode identifier
                                          var call6408 = callmethodChecked(var_member, "value", [0]);
                                          var call6409 = callmethodChecked(call6408, "size", [0]);
                                          var call6410 = callmethodChecked(var_member, "value", [0]);
                                          var call6411 = callmethodChecked(call6410, "substringFrom()to", [1, 1], new GraceNum(7), call6409);
                                          var_s = call6411;
                                          setLineNumber(1112);    // compilenode identifier
                                          var call6412 = callmethodChecked(var_member, "in", [0]);
                                          var call6413 = callmethodChecked(call6412, "toGrace", [1], new GraceNum(0));
                                          var opresult6416 = callmethodChecked(var_s, "++", [1], call6413);
                                          return opresult6416;
                                        }
                                        var if6417 = GraceDone;
                                        setLineNumber(1114);    // compilenode identifier
                                        var call6418 = callmethodChecked(var_member, "in", [0]);
                                        var call6419 = callmethodChecked(call6418, "isSimple", [0]);
                                        if (Grace_isTrue(call6419)) {
                                          setLineNumber(1115);    // compilenode string
                                          var string6420 = new GraceString(".");
                                          var call6422 = callmethodChecked(var_member, "in", [0]);
                                          var call6423 = callmethodChecked(call6422, "toGrace", [1], new GraceNum(0));
                                          var string6425 = new GraceString("");
                                          var opresult6427 = callmethodChecked(string6425, "++", [1], call6423);
                                          var opresult6429 = callmethodChecked(opresult6427, "++", [1], string6420);
                                          var_s = opresult6429;
                                          if6417 = GraceDone;
                                        } else {
                                          setLineNumber(1117);    // compilenode string
                                          var string6430 = new GraceString(").");
                                          var call6432 = callmethodChecked(var_member, "in", [0]);
                                          var call6433 = callmethodChecked(call6432, "toGrace", [1], new GraceNum(0));
                                          var string6435 = new GraceString("(");
                                          var opresult6437 = callmethodChecked(string6435, "++", [1], call6433);
                                          var opresult6439 = callmethodChecked(opresult6437, "++", [1], string6430);
                                          var_s = opresult6439;
                                          if6417 = GraceDone;
                                        }
                                        if6393 = if6417;
                                      }
                                      setLineNumber(1120);    // compilenode identifier
                                      var var_firstPart = GraceTrue;
                                      setLineNumber(1121);    // compilenode call
                                      onSelf = true;
                                      var call6440 = callmethodChecked(this, "with", [0]);
                                      var block6441 = new GraceBlock(this, 1121, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6441.real = function(var_part) {
                                        setLineNumber(1122);    // compilenode identifier
                                        var call6442 = callmethodChecked(var_part, "name", [0]);
                                        var opresult6445 = callmethodChecked(var_s, "++", [1], call6442);
                                        var_s = opresult6445;
                                        var if6446 = GraceDone;
                                        setLineNumber(1123);    // compilenode block
                                        var block6447 = new GraceBlock(this, 1123, 0);
                                        block6447.real = function() {
                                          onSelf = true;
                                          var call6448 = callmethodChecked(this, "generics", [0]);
                                          var opresult6451 = callmethodChecked(GraceFalse, "\u2260", [1], call6448);
                                          return opresult6451;
                                        };
                                        var opresult6454 = callmethodChecked(var_firstPart, "&&", [1], block6447);
                                        if (Grace_isTrue(opresult6454)) {
                                          setLineNumber(1124);    // compilenode string
                                          var string6455 = new GraceString("<");
                                          var opresult6458 = callmethodChecked(var_s, "++", [1], string6455);
                                          var_s = opresult6458;
                                          setLineNumber(1125);    // compilenode call
                                          onSelf = true;
                                          var call6460 = callmethodChecked(this, "generics", [0]);
                                          var call6461 = callmethodChecked(call6460, "size", [0]);
                                          var diff6463 = callmethodChecked(call6461, "-", [1], new GraceNum(1));
                                          var opresult6466 = callmethodChecked(new GraceNum(1), "..", [1], diff6463);
                                          var block6467 = new GraceBlock(this, 1125, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6467.real = function(var_ix) {
                                            setLineNumber(1126);    // compilenode identifier
                                            var opresult6470 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                            onSelf = true;
                                            var call6471 = callmethodChecked(this, "generics", [0]);
                                            var call6472 = callmethodChecked(call6471, "at", [1], var_ix);
                                            var call6473 = callmethodChecked(call6472, "toGrace", [1], opresult6470);
                                            var opresult6476 = callmethodChecked(var_s, "++", [1], call6473);
                                            var_s = opresult6476;
                                            return GraceDone;
                                          };
                                          var call6477 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult6466, block6467);
                                          setLineNumber(1128);    // compilenode string
                                          var string6478 = new GraceString(">");
                                          var opresult6482 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                          onSelf = true;
                                          var call6483 = callmethodChecked(this, "generics", [0]);
                                          var call6484 = callmethodChecked(call6483, "last", [0]);
                                          var call6485 = callmethodChecked(call6484, "toGrace", [1], opresult6482);
                                          var opresult6488 = callmethodChecked(var_s, "++", [1], call6485);
                                          var opresult6490 = callmethodChecked(opresult6488, "++", [1], string6478);
                                          var_s = opresult6490;
                                          if6446 = GraceDone;
                                        }
                                        setLineNumber(1130);    // compilenode identifier
                                        var_firstPart = GraceFalse;
                                        var if6491 = GraceDone;
                                        setLineNumber(1131);    // compilenode identifier
                                        var call6493 = callmethodChecked(var_part, "args", [0]);
                                        var call6494 = callmethodChecked(call6493, "size", [0]);
                                        var opresult6496 = callmethodChecked(call6494, ">", [1], new GraceNum(0));
                                        if (Grace_isTrue(opresult6496)) {
                                          setLineNumber(1132);    // compilenode string
                                          var string6497 = new GraceString("(");
                                          var opresult6500 = callmethodChecked(var_s, "++", [1], string6497);
                                          var_s = opresult6500;
                                          setLineNumber(1133);    // compilenode identifier
                                          var call6501 = callmethodChecked(var_part, "args", [0]);
                                          var call6502 = callmethodChecked(call6501, "indices", [0]);
                                          var block6503 = new GraceBlock(this, 1133, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6503.real = function(var_anr) {
                                            setLineNumber(1134);    // compilenode identifier
                                            var call6504 = callmethodChecked(var_part, "args", [0]);
                                            var call6505 = callmethodChecked(call6504, "at", [1], var_anr);
                                            var var_arg = call6505;
                                            setLineNumber(1135);    // compilenode identifier
                                            var opresult6508 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                            var call6509 = callmethodChecked(var_arg, "toGrace", [1], opresult6508);
                                            var opresult6512 = callmethodChecked(var_s, "++", [1], call6509);
                                            var_s = opresult6512;
                                            var if6513 = GraceDone;
                                            setLineNumber(1136);    // compilenode identifier
                                            var call6514 = callmethodChecked(var_part, "args", [0]);
                                            var call6515 = callmethodChecked(call6514, "size", [0]);
                                            var opresult6518 = callmethodChecked(var_anr, "<", [1], call6515);
                                            if (Grace_isTrue(opresult6518)) {
                                              setLineNumber(1137);    // compilenode string
                                              var string6519 = new GraceString(", ");
                                              var opresult6522 = callmethodChecked(var_s, "++", [1], string6519);
                                              var_s = opresult6522;
                                              if6513 = GraceDone;
                                            }
                                            return if6513;
                                          };
                                          var call6523 = callmethodChecked(var_prelude, "for()do", [1, 1], call6502, block6503);
                                          setLineNumber(1140);    // compilenode string
                                          var string6524 = new GraceString(")");
                                          var opresult6527 = callmethodChecked(var_s, "++", [1], string6524);
                                          var_s = opresult6527;
                                          if6491 = GraceDone;
                                        }
                                        return if6491;
                                      };
                                      var call6528 = callmethodChecked(var_prelude, "for()do", [1, 1], call6440, block6441);
                                      setLineNumber(1143);    // return value
                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method toGrace(1) does not have " + 
                                                  callmethod(var_String, "asString", [0])._value + "."));
                                      return var_s;
                                    };
                                    func6384.paramTypes = [];
                                    func6384.paramTypes.push([type_Number, "depth"]);
                                    func6384.paramCounts = [1];
                                    obj6205.methods["toGrace"] = func6384;
                                    func6384.definitionLine = 1101;
                                    func6384.definitionModule = "ast";
                                    var func6529 = function(argcv) {    // method asString
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                      setModuleName("ast");
                                      setLineNumber(1145);    // compilenode string
                                      var string6530 = new GraceString("");
                                      var call6532 = callmethodChecked(var_what, "pretty", [1], new GraceNum(0));
                                      var string6534 = new GraceString("call ");
                                      var opresult6536 = callmethodChecked(string6534, "++", [1], call6532);
                                      var opresult6538 = callmethodChecked(opresult6536, "++", [1], string6530);
                                      return opresult6538;
                                    };
                                    func6529.paramCounts = [0];
                                    obj6205.methods["asString"] = func6529;
                                    func6529.definitionLine = 1145;
                                    func6529.definitionModule = "ast";
                                    var func6539 = function(argcv) {    // method shallowCopy
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                      setModuleName("ast");
                                      setLineNumber(1147);    // compilenode call
                                      onSelf = true;
                                      var call6540 = callmethodChecked(this, "value", [0]);
                                      onSelf = true;
                                      var call6541 = callmethodChecked(this, "with", [0]);
                                      var call6542 = callmethodChecked(var_callNode, "new", [2], call6540, call6541);
                                      var call6543 = callmethodChecked(call6542, "shallowCopyFieldsFrom", [1], this);
                                      return call6543;
                                    };
                                    func6539.paramCounts = [0];
                                    obj6205.methods["shallowCopy"] = func6539;
                                    func6539.definitionLine = 1146;
                                    func6539.definitionModule = "ast";
                                    var func6544 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_other = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                      setModuleName("ast");
                                      setLineNumber(1150);    // compilenode identifier
                                      var call6545 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                      setLineNumber(1151);    // compilenode identifier
                                      var call6546 = callmethodChecked(var_other, "isPattern", [0]);
                                      onSelf = true;
                                      var call6547 = callmethodChecked(this, "isPattern:=", [1], call6546);
                                      setLineNumber(1152);    // compilenode identifier
                                      return this;
                                    };
                                    func6544.paramCounts = [1];
                                    obj6205.methods["shallowCopyFieldsFrom"] = func6544;
                                    func6544.definitionLine = 1149;
                                    func6544.definitionModule = "ast";
                                    var func6548 = function(argcv) {    // method statementName
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                      setModuleName("ast");
                                      setLineNumber(1154);    // compilenode string
                                      var string6549 = new GraceString("request");
                                      return string6549;
                                    };
                                    func6548.paramCounts = [0];
                                    obj6205.methods["statementName"] = func6548;
                                    func6548.definitionLine = 1154;
                                    func6548.definitionModule = "ast";
                                    setLineNumber(1034);    // compilenode call
                                    var call6550 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call6551 = callmethodChecked(call6550, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call6552 = callmethodChecked(call6551, "baseNode()object", [0, 1], this);
                                    obj6205.superobj = call6552;
                                    if (call6552.data) obj6205.data = call6552.data;
                                    if (call6552.hasOwnProperty('_value'))
                                        obj6205._value = call6552._value;
                                    setLineNumber(1035);    // compilenode string
                                    var string6553 = new GraceString("call");
                                    obj6205.data["kind"] = string6553;
                                    var reader_ast_kind6554 = function() {
                                      return this.data["kind"];
                                    };
                                    reader_ast_kind6554.def = true;
                                    obj6205.methods["kind"] = reader_ast_kind6554;
                                    setLineNumber(1036);    // compilenode identifier
                                    obj6205.data["value"] = var_what;
                                    var reader_ast_value6555 = function() {
                                      return this.data["value"];
                                    };
                                    obj6205.methods["value"] = reader_ast_value6555;
                                    obj6205.data["value"] = var_what;
                                    var writer_ast_value6555 = function(argcv, o) {
                                      this.data["value"] = o;
                                      return GraceDone;
                                    };
                                    obj6205.methods["value:="] = writer_ast_value6555;
                                    obj6205.mutable = true;
                                    setLineNumber(1037);    // compilenode identifier
                                    obj6205.data["with"] = var_with__39__;
                                    var reader_ast_with6556 = function() {
                                      return this.data["with"];
                                    };
                                    obj6205.methods["with"] = reader_ast_with6556;
                                    obj6205.data["with"] = var_with__39__;
                                    var writer_ast_with6556 = function(argcv, o) {
                                      this.data["with"] = o;
                                      return GraceDone;
                                    };
                                    obj6205.methods["with:="] = writer_ast_with6556;
                                    obj6205.mutable = true;
                                    setLineNumber(1038);    // compilenode identifier
                                    obj6205.data["generics"] = GraceFalse;
                                    var reader_ast_generics6557 = function() {
                                      return this.data["generics"];
                                    };
                                    obj6205.methods["generics"] = reader_ast_generics6557;
                                    obj6205.data["generics"] = GraceFalse;
                                    var writer_ast_generics6557 = function(argcv, o) {
                                      this.data["generics"] = o;
                                      return GraceDone;
                                    };
                                    obj6205.methods["generics:="] = writer_ast_generics6557;
                                    obj6205.mutable = true;
                                    setLineNumber(1039);    // compilenode identifier
                                    obj6205.data["isPattern"] = GraceFalse;
                                    var reader_ast_isPattern6558 = function() {
                                      return this.data["isPattern"];
                                    };
                                    obj6205.methods["isPattern"] = reader_ast_isPattern6558;
                                    obj6205.data["isPattern"] = GraceFalse;
                                    var writer_ast_isPattern6558 = function(argcv, o) {
                                      this.data["isPattern"] = o;
                                      return GraceDone;
                                    };
                                    obj6205.methods["isPattern:="] = writer_ast_isPattern6558;
                                    obj6205.mutable = true;
                                    setLineNumber(1040);    // compilenode call
                                    onSelf = true;
                                    var call6559 = callmethodChecked(this, "value", [0]);
                                    var call6560 = callmethodChecked(call6559, "nameString", [0]);
                                    obj6205.data["nameString"] = call6560;
                                    var reader_ast_nameString6561 = function() {
                                      return this.data["nameString"];
                                    };
                                    reader_ast_nameString6561.def = true;
                                    obj6205.methods["nameString"] = reader_ast_nameString6561;
                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], call6560)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("value of def 'nameString' is not of type String"));
                                    superDepth = origSuperDepth;
                                  };
                                  obj_init_6205.apply(obj6205, []);
                                  return obj6205;
                                };
                                func6204.paramCounts = [2];
                                obj6199.methods["new"] = func6204;
                                func6204.definitionLine = 1016;
                                func6204.definitionModule = "ast";
                                  var func6562 = function(argcv) {    // method new(2     )()object
                                    var curarg = 1;
                                    var var_what = arguments[curarg];
                                    curarg++;
                                    var var_with__39__ = arguments[curarg];
                                    curarg++;
                                    var inheritingObject = arguments[curarg++];
                                    // Start argument processing
                                    curarg = 1;
                                    curarg++;
                                    curarg++;
                                    // End argument processing
                                    setModuleName("ast");
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var obj6563 = Grace_allocObject(null, "new");
                                    obj6563.definitionModule = "ast";
                                    obj6563.definitionLine = 1016;
                                    var inho6563 = inheritingObject;
                                    while (inho6563.superobj) inho6563 = inho6563.superobj;
                                    inho6563.superobj = obj6563;
                                    obj6563.data = inheritingObject.data;
                                    if (inheritingObject.hasOwnProperty('_value'))
                                      obj6563._value = inheritingObject._value;
                                    obj6563.outer = this;
                                    var reader_ast_outer6564 = function() {
                                      return this.outer;
                                    };
                                    obj6563.methods["outer"] = reader_ast_outer6564;
                                    var obj_init_6563 = function() {
                                      var origSuperDepth = superDepth;
                                      superDepth = obj6563;
                                      var func6565 = function(argcv) {    // method target
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for target"));
                                        setModuleName("ast");
                                        setLineNumber(1042);    // compilenode call
                                        onSelf = true;
                                        var call6566 = callmethodChecked(this, "value", [0]);
                                        return call6566;
                                      };
                                      func6565.paramCounts = [0];
                                      obj6563.methods["target"] = func6565;
                                      func6565.definitionLine = 1042;
                                      func6565.definitionModule = "ast";
                                      var func6567 = function(argcv) {    // method isCall
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isCall"));
                                        setModuleName("ast");
                                        // isCall is a simple accessor - elide try ... catch
                                        setLineNumber(1043);    // compilenode identifier
                                        return GraceTrue;
                                      };
                                      func6567.paramCounts = [0];
                                      obj6563.methods["isCall"] = func6567;
                                      func6567.definitionLine = 1043;
                                      func6567.definitionModule = "ast";
                                      var func6568 = function(argcv) {    // method returnsObject
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                                        setModuleName("ast");
                                        var if6569 = GraceDone;
                                        setLineNumber(1045);    // compilenode call
                                        onSelf = true;
                                        var call6570 = callmethodChecked(this, "value", [0]);
                                        var call6571 = callmethodChecked(call6570, "isMember", [0]);
                                        var call6572 = callmethodChecked(call6571, "not", [0]);
                                        if (Grace_isTrue(call6572)) {
                                          return GraceFalse;
                                        }
                                        var if6573 = GraceDone;
                                        setLineNumber(1046);    // compilenode string
                                        var string6574 = new GraceString("clone");
                                        onSelf = true;
                                        var call6576 = callmethodChecked(this, "value", [0]);
                                        var call6577 = callmethodChecked(call6576, "nameString", [0]);
                                        var opresult6579 = callmethodChecked(call6577, "==", [1], string6574);
                                        if (Grace_isTrue(opresult6579)) {
                                          return GraceTrue;
                                        }
                                        var if6580 = GraceDone;
                                        setLineNumber(1047);    // compilenode string
                                        var string6581 = new GraceString("copy");
                                        onSelf = true;
                                        var call6583 = callmethodChecked(this, "value", [0]);
                                        var call6584 = callmethodChecked(call6583, "nameString", [0]);
                                        var opresult6586 = callmethodChecked(call6584, "==", [1], string6581);
                                        if (Grace_isTrue(opresult6586)) {
                                          return GraceTrue;
                                        }
                                        setLineNumber(1048);    // compilenode identifier
                                        return GraceFalse;
                                      };
                                      func6568.paramCounts = [0];
                                      obj6563.methods["returnsObject"] = func6568;
                                      func6568.definitionLine = 1044;
                                      func6568.definitionModule = "ast";
                                      var func6587 = function(argcv) {    // method returnedObjectScope
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnedObjectScope"));
                                        setModuleName("ast");
                                        setLineNumber(1052);    // compilenode call
                                        onSelf = true;
                                        var call6588 = callmethodChecked(this, "scope", [0]);
                                        return call6588;
                                      };
                                      func6587.paramCounts = [0];
                                      obj6563.methods["returnedObjectScope"] = func6587;
                                      func6587.definitionLine = 1050;
                                      func6587.definitionModule = "ast";
                                      var func6589 = function(argcv) {    // method accept(1)from(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_visitor = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                        var var_as = arguments[curarg];
                                        curarg++;
                                        if (argcv[1] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(1054);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                        curarg++;
                                        curarg++;
                                        // End argument checking
                                        setModuleName("ast");
                                        var if6590 = GraceDone;
                                        setLineNumber(1055);    // compilenode identifier
                                        var call6591 = callmethodChecked(var_visitor, "visitCall()up", [1, 1], this, var_as);
                                        if (Grace_isTrue(call6591)) {
                                          setLineNumber(1056);    // compilenode identifier
                                          var call6592 = callmethodChecked(var_as, "extend", [1], this);
                                          var var_newChain = call6592;
                                          setLineNumber(1057);    // compilenode call
                                          onSelf = true;
                                          var call6593 = callmethodChecked(this, "value", [0]);
                                          var call6594 = callmethodChecked(call6593, "accept()from", [1, 1], var_visitor, var_newChain);
                                          setLineNumber(1058);    // compilenode call
                                          onSelf = true;
                                          var call6595 = callmethodChecked(this, "with", [0]);
                                          var block6596 = new GraceBlock(this, 1058, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6596.real = function(var_part) {
                                            setLineNumber(1059);    // compilenode identifier
                                            var call6597 = callmethodChecked(var_part, "args", [0]);
                                            var block6598 = new GraceBlock(this, 1059, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block6598.real = function(var_arg) {
                                              setLineNumber(1060);    // compilenode identifier
                                              var call6599 = callmethodChecked(var_arg, "accept()from", [1, 1], var_visitor, var_newChain);
                                              return call6599;
                                            };
                                            var call6600 = callmethodChecked(var_prelude, "for()do", [1, 1], call6597, block6598);
                                            return call6600;
                                          };
                                          var call6601 = callmethodChecked(var_prelude, "for()do", [1, 1], call6595, block6596);
                                          var if6602 = GraceDone;
                                          setLineNumber(1063);    // compilenode call
                                          onSelf = true;
                                          var call6603 = callmethodChecked(this, "generics", [0]);
                                          var opresult6606 = callmethodChecked(GraceFalse, "\u2260", [1], call6603);
                                          if (Grace_isTrue(opresult6606)) {
                                            setLineNumber(1064);    // compilenode block
                                            var block6607 = new GraceBlock(this, 1064, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block6607.real = function(var_each) {
                                              setLineNumber(1065);    // compilenode identifier
                                              var call6608 = callmethodChecked(var_each, "accept()from", [1, 1], var_visitor, var_newChain);
                                              return call6608;
                                            };
                                            setLineNumber(1064);    // compilenode call
                                            onSelf = true;
                                            var call6609 = callmethodChecked(this, "generics", [0]);
                                            var call6610 = callmethodChecked(call6609, "do", [1], block6607);
                                            if6602 = call6610;
                                          }
                                          if6590 = if6602;
                                        }
                                        return if6590;
                                      };
                                      func6589.paramTypes = [];
                                      func6589.paramTypes.push([]);
                                      func6589.paramTypes.push([]);
                                      func6589.paramCounts = [1, 1];
                                      obj6563.methods["accept()from"] = func6589;
                                      func6589.definitionLine = 1054;
                                      func6589.definitionModule = "ast";
                                      var func6611 = function(argcv) {    // method map(1)ancestors(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_blk = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                        var var_as = arguments[curarg];
                                        curarg++;
                                        if (argcv[1] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                        setModuleName("ast");
                                        setLineNumber(1071);    // compilenode call
                                        onSelf = true;
                                        var call6612 = callmethodChecked(this, "shallowCopy", [0]);
                                        var var_n = call6612;
                                        setLineNumber(1072);    // compilenode identifier
                                        var call6613 = callmethodChecked(var_as, "extend", [1], var_n);
                                        var var_newChain = call6613;
                                        setLineNumber(1073);    // compilenode call
                                        onSelf = true;
                                        var call6614 = callmethodChecked(this, "value", [0]);
                                        var call6615 = callmethodChecked(call6614, "map()ancestors", [1, 1], var_blk, var_newChain);
                                        var call6616 = callmethodChecked(var_n, "value:=", [1], call6615);
                                        setLineNumber(1074);    // compilenode call
                                        onSelf = true;
                                        var call6617 = callmethodChecked(this, "with", [0]);
                                        var call6618 = callmethodChecked(superDepth, "outer", [0]);
                                        onOuter = true;
                                        onSelf = true;
                                        var call6619 = callmethodChecked(call6618, "outer", [0]);
                                        onOuter = true;
                                        onSelf = true;
                                        var call6620 = callmethodChecked(call6619, "listMap()ancestors", [2, 1], call6617, var_blk, var_newChain);
                                        var call6621 = callmethodChecked(var_n, "with:=", [1], call6620);
                                        setLineNumber(1075);    // compilenode call
                                        onSelf = true;
                                        var call6622 = callmethodChecked(this, "generics", [0]);
                                        var call6623 = callmethodChecked(superDepth, "outer", [0]);
                                        onOuter = true;
                                        onSelf = true;
                                        var call6624 = callmethodChecked(call6623, "outer", [0]);
                                        onOuter = true;
                                        onSelf = true;
                                        var call6625 = callmethodChecked(call6624, "maybeListMap()ancestors", [2, 1], call6622, var_blk, var_newChain);
                                        var call6626 = callmethodChecked(var_n, "generics:=", [1], call6625);
                                        setLineNumber(1076);    // compilenode identifier
                                        var call6627 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                        return call6627;
                                      };
                                      func6611.paramCounts = [1, 1];
                                      obj6563.methods["map()ancestors"] = func6611;
                                      func6611.definitionLine = 1070;
                                      func6611.definitionModule = "ast";
                                      var func6628 = function(argcv) {    // method pretty(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_depth = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                        setModuleName("ast");
                                        setLineNumber(1079);    // compilenode string
                                        var string6629 = new GraceString("");
                                        var var_spc = string6629;
                                        setLineNumber(1080);    // compilenode num
                                        var opresult6632 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                        var block6633 = new GraceBlock(this, 1080, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6633.real = function(var_i) {
                                          setLineNumber(1081);    // compilenode string
                                          var string6634 = new GraceString("  ");
                                          var opresult6637 = callmethodChecked(var_spc, "++", [1], string6634);
                                          var_spc = opresult6637;
                                          return GraceDone;
                                        };
                                        var call6638 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult6632, block6633);
                                        setLineNumber(1083);    // compilenode string
                                        var string6639 = new GraceString("\n");
                                        var call6641 = callmethodsuper(this, "pretty", [1], var_depth);
                                        var opresult6643 = callmethodChecked(call6641, "++", [1], string6639);
                                        var var_s = opresult6643;
                                        setLineNumber(1084);    // compilenode string
                                        var string6644 = new GraceString("");
                                        var opresult6648 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                        onSelf = true;
                                        var call6649 = callmethodChecked(this, "value", [0]);
                                        var call6650 = callmethodChecked(call6649, "pretty", [1], opresult6648);
                                        var string6652 = new GraceString("Method Name: ");
                                        var opresult6654 = callmethodChecked(string6652, "++", [1], call6650);
                                        var opresult6656 = callmethodChecked(opresult6654, "++", [1], string6644);
                                        var opresult6660 = callmethodChecked(var_s, "++", [1], var_spc);
                                        var opresult6662 = callmethodChecked(opresult6660, "++", [1], opresult6656);
                                        var_s = opresult6662;
                                        setLineNumber(1085);    // compilenode string
                                        var string6663 = new GraceString("\n");
                                        var opresult6666 = callmethodChecked(var_s, "++", [1], string6663);
                                        var_s = opresult6666;
                                        var if6667 = GraceDone;
                                        setLineNumber(1086);    // compilenode call
                                        onSelf = true;
                                        var call6668 = callmethodChecked(this, "generics", [0]);
                                        var opresult6671 = callmethodChecked(GraceFalse, "\u2260", [1], call6668);
                                        if (Grace_isTrue(opresult6671)) {
                                          setLineNumber(1087);    // compilenode string
                                          var string6672 = new GraceString("  Generics:\n");
                                          var opresult6676 = callmethodChecked(var_s, "++", [1], var_spc);
                                          var opresult6678 = callmethodChecked(opresult6676, "++", [1], string6672);
                                          var_s = opresult6678;
                                          setLineNumber(1088);    // compilenode call
                                          onSelf = true;
                                          var call6679 = callmethodChecked(this, "generics", [0]);
                                          var block6680 = new GraceBlock(this, 1088, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6680.real = function(var_g) {
                                            setLineNumber(1089);    // compilenode string
                                            var string6681 = new GraceString("\n");
                                            var opresult6685 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                            var call6686 = callmethodChecked(var_g, "pretty", [1], opresult6685);
                                            var string6688 = new GraceString("    ");
                                            var opresult6692 = callmethodChecked(var_s, "++", [1], var_spc);
                                            var opresult6694 = callmethodChecked(opresult6692, "++", [1], string6688);
                                            var opresult6696 = callmethodChecked(opresult6694, "++", [1], call6686);
                                            var opresult6698 = callmethodChecked(opresult6696, "++", [1], string6681);
                                            var_s = opresult6698;
                                            return GraceDone;
                                          };
                                          var call6699 = callmethodChecked(var_prelude, "for()do", [1, 1], call6679, block6680);
                                          if6667 = call6699;
                                        }
                                        setLineNumber(1092);    // compilenode string
                                        var string6700 = new GraceString("Arguments:");
                                        var opresult6704 = callmethodChecked(var_s, "++", [1], var_spc);
                                        var opresult6706 = callmethodChecked(opresult6704, "++", [1], string6700);
                                        var_s = opresult6706;
                                        setLineNumber(1093);    // compilenode call
                                        onSelf = true;
                                        var call6707 = callmethodChecked(this, "with", [0]);
                                        var block6708 = new GraceBlock(this, 1093, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6708.real = function(var_part) {
                                          setLineNumber(1094);    // compilenode identifier
                                          var call6709 = callmethodChecked(var_part, "name", [0]);
                                          var string6711 = new GraceString("Part: ");
                                          var string6714 = new GraceString("\n  ");
                                          var opresult6717 = callmethodChecked(var_s, "++", [1], string6714);
                                          var opresult6719 = callmethodChecked(opresult6717, "++", [1], var_spc);
                                          var opresult6721 = callmethodChecked(opresult6719, "++", [1], string6711);
                                          var opresult6723 = callmethodChecked(opresult6721, "++", [1], call6709);
                                          var_s = opresult6723;
                                          setLineNumber(1095);    // compilenode identifier
                                          var call6724 = callmethodChecked(var_part, "args", [0]);
                                          var block6725 = new GraceBlock(this, 1095, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6725.real = function(var_arg) {
                                            setLineNumber(1096);    // compilenode identifier
                                            var opresult6728 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                            var call6729 = callmethodChecked(var_arg, "pretty", [1], opresult6728);
                                            var string6732 = new GraceString("\n      ");
                                            var opresult6735 = callmethodChecked(var_s, "++", [1], string6732);
                                            var opresult6737 = callmethodChecked(opresult6735, "++", [1], var_spc);
                                            var opresult6739 = callmethodChecked(opresult6737, "++", [1], call6729);
                                            var_s = opresult6739;
                                            return GraceDone;
                                          };
                                          var call6740 = callmethodChecked(var_prelude, "for()do", [1, 1], call6724, block6725);
                                          return call6740;
                                        };
                                        var call6741 = callmethodChecked(var_prelude, "for()do", [1, 1], call6707, block6708);
                                        setLineNumber(1099);    // compilenode identifier
                                        return var_s;
                                      };
                                      func6628.paramCounts = [1];
                                      obj6563.methods["pretty"] = func6628;
                                      func6628.definitionLine = 1078;
                                      func6628.definitionModule = "ast";
                                      var func6742 = function(argcv) {    // method toGrace(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_depth = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(1101);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                        curarg++;
                                        // End argument checking
                                        setModuleName("ast");
                                        setLineNumber(1102);    // compilenode string
                                        var string6743 = new GraceString("");
                                        var var_spc = string6743;
                                        setLineNumber(1103);    // compilenode block
                                        var block6744 = new GraceBlock(this, 1103, 0);
                                        block6744.real = function() {
                                          setLineNumber(1104);    // compilenode string
                                          var string6745 = new GraceString("    ");
                                          var opresult6748 = callmethodChecked(var_spc, "++", [1], string6745);
                                          var_spc = opresult6748;
                                          return GraceDone;
                                        };
                                        var call6749 = callmethodChecked(var_prelude, "repeat()times", [1, 1], var_depth, block6744);
                                        setLineNumber(1106);    // compilenode string
                                        var string6750 = new GraceString("");
                                        var var_s = string6750;
                                        var if6751 = GraceDone;
                                        setLineNumber(1108);    // compilenode string
                                        var string6752 = new GraceString("member");
                                        onSelf = true;
                                        var call6754 = callmethodChecked(this, "value", [0]);
                                        var call6755 = callmethodChecked(call6754, "kind", [0]);
                                        var opresult6757 = callmethodChecked(call6755, "==", [1], string6752);
                                        if (Grace_isTrue(opresult6757)) {
                                          setLineNumber(1109);    // compilenode call
                                          onSelf = true;
                                          var call6758 = callmethodChecked(this, "value", [0]);
                                          var var_member = call6758;
                                          var if6759 = GraceDone;
                                          setLineNumber(1110);    // compilenode string
                                          var string6760 = new GraceString("prefix");
                                          var call6762 = callmethodChecked(var_member, "value", [0]);
                                          var call6763 = callmethodChecked(call6762, "substringFrom()to", [1, 1], new GraceNum(1), new GraceNum(6));
                                          var opresult6765 = callmethodChecked(call6763, "==", [1], string6760);
                                          if (Grace_isTrue(opresult6765)) {
                                            setLineNumber(1111);    // compilenode identifier
                                            var call6766 = callmethodChecked(var_member, "value", [0]);
                                            var call6767 = callmethodChecked(call6766, "size", [0]);
                                            var call6768 = callmethodChecked(var_member, "value", [0]);
                                            var call6769 = callmethodChecked(call6768, "substringFrom()to", [1, 1], new GraceNum(7), call6767);
                                            var_s = call6769;
                                            setLineNumber(1112);    // compilenode identifier
                                            var call6770 = callmethodChecked(var_member, "in", [0]);
                                            var call6771 = callmethodChecked(call6770, "toGrace", [1], new GraceNum(0));
                                            var opresult6774 = callmethodChecked(var_s, "++", [1], call6771);
                                            return opresult6774;
                                          }
                                          var if6775 = GraceDone;
                                          setLineNumber(1114);    // compilenode identifier
                                          var call6776 = callmethodChecked(var_member, "in", [0]);
                                          var call6777 = callmethodChecked(call6776, "isSimple", [0]);
                                          if (Grace_isTrue(call6777)) {
                                            setLineNumber(1115);    // compilenode string
                                            var string6778 = new GraceString(".");
                                            var call6780 = callmethodChecked(var_member, "in", [0]);
                                            var call6781 = callmethodChecked(call6780, "toGrace", [1], new GraceNum(0));
                                            var string6783 = new GraceString("");
                                            var opresult6785 = callmethodChecked(string6783, "++", [1], call6781);
                                            var opresult6787 = callmethodChecked(opresult6785, "++", [1], string6778);
                                            var_s = opresult6787;
                                            if6775 = GraceDone;
                                          } else {
                                            setLineNumber(1117);    // compilenode string
                                            var string6788 = new GraceString(").");
                                            var call6790 = callmethodChecked(var_member, "in", [0]);
                                            var call6791 = callmethodChecked(call6790, "toGrace", [1], new GraceNum(0));
                                            var string6793 = new GraceString("(");
                                            var opresult6795 = callmethodChecked(string6793, "++", [1], call6791);
                                            var opresult6797 = callmethodChecked(opresult6795, "++", [1], string6788);
                                            var_s = opresult6797;
                                            if6775 = GraceDone;
                                          }
                                          if6751 = if6775;
                                        }
                                        setLineNumber(1120);    // compilenode identifier
                                        var var_firstPart = GraceTrue;
                                        setLineNumber(1121);    // compilenode call
                                        onSelf = true;
                                        var call6798 = callmethodChecked(this, "with", [0]);
                                        var block6799 = new GraceBlock(this, 1121, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6799.real = function(var_part) {
                                          setLineNumber(1122);    // compilenode identifier
                                          var call6800 = callmethodChecked(var_part, "name", [0]);
                                          var opresult6803 = callmethodChecked(var_s, "++", [1], call6800);
                                          var_s = opresult6803;
                                          var if6804 = GraceDone;
                                          setLineNumber(1123);    // compilenode block
                                          var block6805 = new GraceBlock(this, 1123, 0);
                                          block6805.real = function() {
                                            onSelf = true;
                                            var call6806 = callmethodChecked(this, "generics", [0]);
                                            var opresult6809 = callmethodChecked(GraceFalse, "\u2260", [1], call6806);
                                            return opresult6809;
                                          };
                                          var opresult6812 = callmethodChecked(var_firstPart, "&&", [1], block6805);
                                          if (Grace_isTrue(opresult6812)) {
                                            setLineNumber(1124);    // compilenode string
                                            var string6813 = new GraceString("<");
                                            var opresult6816 = callmethodChecked(var_s, "++", [1], string6813);
                                            var_s = opresult6816;
                                            setLineNumber(1125);    // compilenode call
                                            onSelf = true;
                                            var call6818 = callmethodChecked(this, "generics", [0]);
                                            var call6819 = callmethodChecked(call6818, "size", [0]);
                                            var diff6821 = callmethodChecked(call6819, "-", [1], new GraceNum(1));
                                            var opresult6824 = callmethodChecked(new GraceNum(1), "..", [1], diff6821);
                                            var block6825 = new GraceBlock(this, 1125, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block6825.real = function(var_ix) {
                                              setLineNumber(1126);    // compilenode identifier
                                              var opresult6828 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                              onSelf = true;
                                              var call6829 = callmethodChecked(this, "generics", [0]);
                                              var call6830 = callmethodChecked(call6829, "at", [1], var_ix);
                                              var call6831 = callmethodChecked(call6830, "toGrace", [1], opresult6828);
                                              var opresult6834 = callmethodChecked(var_s, "++", [1], call6831);
                                              var_s = opresult6834;
                                              return GraceDone;
                                            };
                                            var call6835 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult6824, block6825);
                                            setLineNumber(1128);    // compilenode string
                                            var string6836 = new GraceString(">");
                                            var opresult6840 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                            onSelf = true;
                                            var call6841 = callmethodChecked(this, "generics", [0]);
                                            var call6842 = callmethodChecked(call6841, "last", [0]);
                                            var call6843 = callmethodChecked(call6842, "toGrace", [1], opresult6840);
                                            var opresult6846 = callmethodChecked(var_s, "++", [1], call6843);
                                            var opresult6848 = callmethodChecked(opresult6846, "++", [1], string6836);
                                            var_s = opresult6848;
                                            if6804 = GraceDone;
                                          }
                                          setLineNumber(1130);    // compilenode identifier
                                          var_firstPart = GraceFalse;
                                          var if6849 = GraceDone;
                                          setLineNumber(1131);    // compilenode identifier
                                          var call6851 = callmethodChecked(var_part, "args", [0]);
                                          var call6852 = callmethodChecked(call6851, "size", [0]);
                                          var opresult6854 = callmethodChecked(call6852, ">", [1], new GraceNum(0));
                                          if (Grace_isTrue(opresult6854)) {
                                            setLineNumber(1132);    // compilenode string
                                            var string6855 = new GraceString("(");
                                            var opresult6858 = callmethodChecked(var_s, "++", [1], string6855);
                                            var_s = opresult6858;
                                            setLineNumber(1133);    // compilenode identifier
                                            var call6859 = callmethodChecked(var_part, "args", [0]);
                                            var call6860 = callmethodChecked(call6859, "indices", [0]);
                                            var block6861 = new GraceBlock(this, 1133, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block6861.real = function(var_anr) {
                                              setLineNumber(1134);    // compilenode identifier
                                              var call6862 = callmethodChecked(var_part, "args", [0]);
                                              var call6863 = callmethodChecked(call6862, "at", [1], var_anr);
                                              var var_arg = call6863;
                                              setLineNumber(1135);    // compilenode identifier
                                              var opresult6866 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                              var call6867 = callmethodChecked(var_arg, "toGrace", [1], opresult6866);
                                              var opresult6870 = callmethodChecked(var_s, "++", [1], call6867);
                                              var_s = opresult6870;
                                              var if6871 = GraceDone;
                                              setLineNumber(1136);    // compilenode identifier
                                              var call6872 = callmethodChecked(var_part, "args", [0]);
                                              var call6873 = callmethodChecked(call6872, "size", [0]);
                                              var opresult6876 = callmethodChecked(var_anr, "<", [1], call6873);
                                              if (Grace_isTrue(opresult6876)) {
                                                setLineNumber(1137);    // compilenode string
                                                var string6877 = new GraceString(", ");
                                                var opresult6880 = callmethodChecked(var_s, "++", [1], string6877);
                                                var_s = opresult6880;
                                                if6871 = GraceDone;
                                              }
                                              return if6871;
                                            };
                                            var call6881 = callmethodChecked(var_prelude, "for()do", [1, 1], call6860, block6861);
                                            setLineNumber(1140);    // compilenode string
                                            var string6882 = new GraceString(")");
                                            var opresult6885 = callmethodChecked(var_s, "++", [1], string6882);
                                            var_s = opresult6885;
                                            if6849 = GraceDone;
                                          }
                                          return if6849;
                                        };
                                        var call6886 = callmethodChecked(var_prelude, "for()do", [1, 1], call6798, block6799);
                                        setLineNumber(1143);    // return value
                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method toGrace(1) does not have " + 
                                                    callmethod(var_String, "asString", [0])._value + "."));
                                        return var_s;
                                      };
                                      func6742.paramTypes = [];
                                      func6742.paramTypes.push([type_Number, "depth"]);
                                      func6742.paramCounts = [1];
                                      obj6563.methods["toGrace"] = func6742;
                                      func6742.definitionLine = 1101;
                                      func6742.definitionModule = "ast";
                                      var func6887 = function(argcv) {    // method asString
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                        setModuleName("ast");
                                        setLineNumber(1145);    // compilenode string
                                        var string6888 = new GraceString("");
                                        var call6890 = callmethodChecked(var_what, "pretty", [1], new GraceNum(0));
                                        var string6892 = new GraceString("call ");
                                        var opresult6894 = callmethodChecked(string6892, "++", [1], call6890);
                                        var opresult6896 = callmethodChecked(opresult6894, "++", [1], string6888);
                                        return opresult6896;
                                      };
                                      func6887.paramCounts = [0];
                                      obj6563.methods["asString"] = func6887;
                                      func6887.definitionLine = 1145;
                                      func6887.definitionModule = "ast";
                                      var func6897 = function(argcv) {    // method shallowCopy
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                        setModuleName("ast");
                                        setLineNumber(1147);    // compilenode call
                                        onSelf = true;
                                        var call6898 = callmethodChecked(this, "value", [0]);
                                        onSelf = true;
                                        var call6899 = callmethodChecked(this, "with", [0]);
                                        var call6900 = callmethodChecked(var_callNode, "new", [2], call6898, call6899);
                                        var call6901 = callmethodChecked(call6900, "shallowCopyFieldsFrom", [1], this);
                                        return call6901;
                                      };
                                      func6897.paramCounts = [0];
                                      obj6563.methods["shallowCopy"] = func6897;
                                      func6897.definitionLine = 1146;
                                      func6897.definitionModule = "ast";
                                      var func6902 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_other = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                        setModuleName("ast");
                                        setLineNumber(1150);    // compilenode identifier
                                        var call6903 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                        setLineNumber(1151);    // compilenode identifier
                                        var call6904 = callmethodChecked(var_other, "isPattern", [0]);
                                        onSelf = true;
                                        var call6905 = callmethodChecked(this, "isPattern:=", [1], call6904);
                                        setLineNumber(1152);    // compilenode identifier
                                        return this;
                                      };
                                      func6902.paramCounts = [1];
                                      obj6563.methods["shallowCopyFieldsFrom"] = func6902;
                                      func6902.definitionLine = 1149;
                                      func6902.definitionModule = "ast";
                                      var func6906 = function(argcv) {    // method statementName
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                        setModuleName("ast");
                                        setLineNumber(1154);    // compilenode string
                                        var string6907 = new GraceString("request");
                                        return string6907;
                                      };
                                      func6906.paramCounts = [0];
                                      obj6563.methods["statementName"] = func6906;
                                      func6906.definitionLine = 1154;
                                      func6906.definitionModule = "ast";
                                      setLineNumber(1034);    // compilenode call
                                      var call6908 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call6909 = callmethodChecked(call6908, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call6910 = callmethodChecked(call6909, "baseNode()object", [0, 1], this);
                                      obj6563.superobj = call6910;
                                      if (call6910.data) obj6563.data = call6910.data;
                                      if (call6910.hasOwnProperty('_value'))
                                          obj6563._value = call6910._value;
                                      setLineNumber(1035);    // compilenode string
                                      var string6911 = new GraceString("call");
                                      obj6563.data["kind"] = string6911;
                                      var reader_ast_kind6912 = function() {
                                        return this.data["kind"];
                                      };
                                      reader_ast_kind6912.def = true;
                                      obj6563.methods["kind"] = reader_ast_kind6912;
                                      setLineNumber(1036);    // compilenode identifier
                                      obj6563.data["value"] = var_what;
                                      var reader_ast_value6913 = function() {
                                        return this.data["value"];
                                      };
                                      obj6563.methods["value"] = reader_ast_value6913;
                                      obj6563.data["value"] = var_what;
                                      var writer_ast_value6913 = function(argcv, o) {
                                        this.data["value"] = o;
                                        return GraceDone;
                                      };
                                      obj6563.methods["value:="] = writer_ast_value6913;
                                      obj6563.mutable = true;
                                      setLineNumber(1037);    // compilenode identifier
                                      obj6563.data["with"] = var_with__39__;
                                      var reader_ast_with6914 = function() {
                                        return this.data["with"];
                                      };
                                      obj6563.methods["with"] = reader_ast_with6914;
                                      obj6563.data["with"] = var_with__39__;
                                      var writer_ast_with6914 = function(argcv, o) {
                                        this.data["with"] = o;
                                        return GraceDone;
                                      };
                                      obj6563.methods["with:="] = writer_ast_with6914;
                                      obj6563.mutable = true;
                                      setLineNumber(1038);    // compilenode identifier
                                      obj6563.data["generics"] = GraceFalse;
                                      var reader_ast_generics6915 = function() {
                                        return this.data["generics"];
                                      };
                                      obj6563.methods["generics"] = reader_ast_generics6915;
                                      obj6563.data["generics"] = GraceFalse;
                                      var writer_ast_generics6915 = function(argcv, o) {
                                        this.data["generics"] = o;
                                        return GraceDone;
                                      };
                                      obj6563.methods["generics:="] = writer_ast_generics6915;
                                      obj6563.mutable = true;
                                      setLineNumber(1039);    // compilenode identifier
                                      obj6563.data["isPattern"] = GraceFalse;
                                      var reader_ast_isPattern6916 = function() {
                                        return this.data["isPattern"];
                                      };
                                      obj6563.methods["isPattern"] = reader_ast_isPattern6916;
                                      obj6563.data["isPattern"] = GraceFalse;
                                      var writer_ast_isPattern6916 = function(argcv, o) {
                                        this.data["isPattern"] = o;
                                        return GraceDone;
                                      };
                                      obj6563.methods["isPattern:="] = writer_ast_isPattern6916;
                                      obj6563.mutable = true;
                                      setLineNumber(1040);    // compilenode call
                                      onSelf = true;
                                      var call6917 = callmethodChecked(this, "value", [0]);
                                      var call6918 = callmethodChecked(call6917, "nameString", [0]);
                                      obj6563.data["nameString"] = call6918;
                                      var reader_ast_nameString6919 = function() {
                                        return this.data["nameString"];
                                      };
                                      reader_ast_nameString6919.def = true;
                                      obj6563.methods["nameString"] = reader_ast_nameString6919;
                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], call6918)))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("value of def 'nameString' is not of type String"));
                                      superDepth = origSuperDepth;
                                    };
                                    obj_init_6563.apply(inheritingObject, []);
                                    return obj6563;
                                    };
                                    obj6199.methods["new()object"] = func6562;
                                  superDepth = origSuperDepth;
                                };
                                obj_init_6199.apply(obj6199, []);
                                var var_callNode = obj6199;
                                var func6920 = function(argcv) {    // method callNode
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for callNode"));
                                  setModuleName("ast");
                                  // callNode is a simple accessor - elide try ... catch
                                  setLineNumber(1010);    // compilenode identifier
                                  return var_callNode;
                                };
                                func6920.paramCounts = [0];
                                this.methods["callNode"] = func6920;
                                func6920.definitionLine = 1040;
                                func6920.definitionModule = "ast";
                                this.methods["callNode"].debug = "def";
                                setLineNumber(1157);    // compilenode object
                                var obj6921 = Grace_allocObject(GraceObject, "moduleNode");
                                obj6921.definitionModule = "ast";
                                obj6921.definitionLine = 1157;
                                obj6921.outer = this;
                                var reader_ast_outer6922 = function() {
                                  return this.outer;
                                };
                                obj6921.methods["outer"] = reader_ast_outer6922;
                                var obj_init_6921 = function() {
                                  var origSuperDepth = superDepth;
                                  superDepth = obj6921;
                                  var func6923 = function(argcv) {    // method body(1)named(1)scope(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_b = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for body (arg list 1) of body(1)named(1)scope(1)"));
                                    var var_n = arguments[curarg];
                                    curarg++;
                                    if (argcv[1] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for named (arg list 2) of body(1)named(1)scope(1)"));
                                    var var_s = arguments[curarg];
                                    curarg++;
                                    if (argcv[2] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 3) of body(1)named(1)scope(1)"));
                                    setModuleName("ast");
                                    setLineNumber(1159);    // compilenode identifier
                                    onSelf = true;
                                    var call6924 = callmethodChecked(this, "body", [1], var_b);
                                    var var_result = call6924;
                                    setLineNumber(1160);    // compilenode identifier
                                    var call6925 = callmethodChecked(var_result, "name:=", [1], var_n);
                                    setLineNumber(1161);    // compilenode identifier
                                    var call6926 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                    setLineNumber(1162);    // compilenode identifier
                                    return var_result;
                                  };
                                  func6923.paramCounts = [1, 1, 1];
                                  obj6921.methods["body()named()scope"] = func6923;
                                  func6923.definitionLine = 1158;
                                  func6923.definitionModule = "ast";
                                  var func6927 = function(argcv) {    // method body(1)named(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_b = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for body (arg list 1) of body(1)named(1)"));
                                    var var_n = arguments[curarg];
                                    curarg++;
                                    if (argcv[1] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for named (arg list 2) of body(1)named(1)"));
                                    setModuleName("ast");
                                    setLineNumber(1165);    // compilenode identifier
                                    onSelf = true;
                                    var call6928 = callmethodChecked(this, "body", [1], var_b);
                                    var var_result = call6928;
                                    setLineNumber(1166);    // compilenode identifier
                                    var call6929 = callmethodChecked(var_result, "name:=", [1], var_n);
                                    setLineNumber(1167);    // compilenode identifier
                                    return var_result;
                                  };
                                  func6927.paramCounts = [1, 1];
                                  obj6921.methods["body()named"] = func6927;
                                  func6927.definitionLine = 1164;
                                  func6927.definitionModule = "ast";
                                  var func6930 = function(argcv) {    // method body(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_b = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for body(1)"));
                                    setModuleName("ast");
                                    setLineNumber(1169);    // compilenode object
                                    var obj6931 = Grace_allocObject(null, "moduleNode.body");
                                    obj6931.definitionModule = "ast";
                                    obj6931.definitionLine = 1169;
                                    obj6931.outer = this;
                                    var reader_ast_outer6932 = function() {
                                      return this.outer;
                                    };
                                    obj6931.methods["outer"] = reader_ast_outer6932;
                                    var obj_init_6931 = function() {
                                      var origSuperDepth = superDepth;
                                      superDepth = obj6931;
                                      var func6933 = function(argcv) {    // method isModule
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isModule"));
                                        setModuleName("ast");
                                        // isModule is a simple accessor - elide try ... catch
                                        setLineNumber(1177);    // compilenode identifier
                                        return GraceTrue;
                                      };
                                      func6933.paramCounts = [0];
                                      obj6931.methods["isModule"] = func6933;
                                      func6933.definitionLine = 1177;
                                      func6933.definitionModule = "ast";
                                      var func6934 = function(argcv) {    // method returnsObject
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                                        setModuleName("ast");
                                        // returnsObject is a simple accessor - elide try ... catch
                                        setLineNumber(1178);    // compilenode identifier
                                        return GraceFalse;
                                      };
                                      func6934.paramCounts = [0];
                                      obj6931.methods["returnsObject"] = func6934;
                                      func6934.definitionLine = 1178;
                                      func6934.definitionModule = "ast";
                                      var func6935 = function(argcv) {    // method externalsDo(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_action = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for externalsDo(1)"));
                                        setModuleName("ast");
                                        setLineNumber(1180);    // compilenode block
                                        var block6936 = new GraceBlock(this, 1180, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6936.real = function(var_o) {
                                          var if6937 = GraceDone;
                                          setLineNumber(1181);    // compilenode identifier
                                          var call6938 = callmethodChecked(var_o, "isExternal", [0]);
                                          if (Grace_isTrue(call6938)) {
                                            var call6939 = callmethodChecked(var_action, "apply", [1], var_o);
                                            if6937 = call6939;
                                          }
                                          return if6937;
                                        };
                                        setLineNumber(1180);    // compilenode call
                                        onSelf = true;
                                        var call6940 = callmethodChecked(this, "value", [0]);
                                        var call6941 = callmethodChecked(call6940, "do", [1], block6936);
                                        return call6941;
                                      };
                                      func6935.paramCounts = [1];
                                      obj6931.methods["externalsDo"] = func6935;
                                      func6935.definitionLine = 1179;
                                      func6935.definitionModule = "ast";
                                      var func6942 = function(argcv) {    // method accept(1)from(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_visitor = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                        var var_as = arguments[curarg];
                                        curarg++;
                                        if (argcv[1] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(1184);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                        curarg++;
                                        curarg++;
                                        // End argument checking
                                        setModuleName("ast");
                                        var if6943 = GraceDone;
                                        setLineNumber(1185);    // compilenode identifier
                                        var call6944 = callmethodChecked(var_visitor, "visitModule()up", [1, 1], this, var_as);
                                        if (Grace_isTrue(call6944)) {
                                          setLineNumber(1186);    // compilenode identifier
                                          var call6945 = callmethodChecked(var_as, "extend", [1], this);
                                          var var_newChain = call6945;
                                          var if6946 = GraceDone;
                                          setLineNumber(1187);    // compilenode call
                                          onSelf = true;
                                          var call6947 = callmethodChecked(this, "superclass", [0]);
                                          var opresult6950 = callmethodChecked(GraceFalse, "\u2260", [1], call6947);
                                          if (Grace_isTrue(opresult6950)) {
                                            setLineNumber(1188);    // compilenode call
                                            onSelf = true;
                                            var call6951 = callmethodChecked(this, "superclass", [0]);
                                            var call6952 = callmethodChecked(call6951, "accept()from", [1, 1], var_visitor, var_newChain);
                                            if6946 = call6952;
                                          }
                                          setLineNumber(1190);    // compilenode call
                                          onSelf = true;
                                          var call6953 = callmethodChecked(this, "value", [0]);
                                          var block6954 = new GraceBlock(this, 1190, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6954.real = function(var_x) {
                                            setLineNumber(1191);    // compilenode identifier
                                            var call6955 = callmethodChecked(var_x, "accept()from", [1, 1], var_visitor, var_newChain);
                                            return call6955;
                                          };
                                          var call6956 = callmethodChecked(var_prelude, "for()do", [1, 1], call6953, block6954);
                                          if6943 = call6956;
                                        }
                                        return if6943;
                                      };
                                      func6942.paramTypes = [];
                                      func6942.paramTypes.push([]);
                                      func6942.paramTypes.push([]);
                                      func6942.paramCounts = [1, 1];
                                      obj6931.methods["accept()from"] = func6942;
                                      func6942.definitionLine = 1184;
                                      func6942.definitionModule = "ast";
                                      var func6957 = function(argcv) {    // method shallowCopy
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                        setModuleName("ast");
                                        setLineNumber(1196);    // compilenode identifier
                                        var call6958 = callmethodChecked(var_moduleNode, "body", [1], var_emptySeq);
                                        var call6959 = callmethodChecked(call6958, "shallowCopyFieldsFrom", [1], this);
                                        return call6959;
                                      };
                                      func6957.paramCounts = [0];
                                      obj6931.methods["shallowCopy"] = func6957;
                                      func6957.definitionLine = 1195;
                                      func6957.definitionModule = "ast";
                                      var func6960 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_other = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                        setModuleName("ast");
                                        setLineNumber(1199);    // compilenode identifier
                                        var call6961 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                        setLineNumber(1200);    // compilenode identifier
                                        var call6962 = callmethodChecked(var_other, "imports", [0]);
                                        onSelf = true;
                                        var call6963 = callmethodChecked(this, "imports:=", [1], call6962);
                                        setLineNumber(1201);    // compilenode identifier
                                        return this;
                                      };
                                      func6960.paramCounts = [1];
                                      obj6931.methods["shallowCopyFieldsFrom"] = func6960;
                                      func6960.definitionLine = 1198;
                                      func6960.definitionModule = "ast";
                                      setLineNumber(1170);    // compilenode identifier
                                      var call6964 = callmethodChecked(var_objectNode, "new()object", [2, 1], var_b, GraceFalse, this);
                                      obj6931.superobj = call6964;
                                      if (call6964.data) obj6931.data = call6964.data;
                                      if (call6964.hasOwnProperty('_value'))
                                          obj6931._value = call6964._value;
                                      setLineNumber(1171);    // compilenode string
                                      var string6965 = new GraceString("module");
                                      obj6931.data["kind"] = string6965;
                                      var reader_ast_kind6966 = function() {
                                        return this.data["kind"];
                                      };
                                      reader_ast_kind6966.def = true;
                                      obj6931.methods["kind"] = reader_ast_kind6966;
                                      setLineNumber(1172);    // compilenode identifier
                                      var call6967 = callmethodChecked(var_util, "lines", [0]);
                                      obj6931.data["sourceLines"] = call6967;
                                      var reader_ast_sourceLines6968 = function() {
                                        return this.data["sourceLines"];
                                      };
                                      reader_ast_sourceLines6968.def = true;
                                      reader_ast_sourceLines6968.confidential = true;
                                      obj6931.methods["sourceLines"] = reader_ast_sourceLines6968;
                                      setLineNumber(1173);    // compilenode num
                                      onSelf = true;
                                      var call6969 = callmethodChecked(this, "line:=", [1], new GraceNum(0));
                                      setLineNumber(1174);    // compilenode num
                                      onSelf = true;
                                      var call6970 = callmethodChecked(this, "linePos:=", [1], new GraceNum(0));
                                      setLineNumber(1175);    // compilenode array
                                      var array6971 = new PrimitiveGraceList([]);
                                      obj6931.data["imports"] = array6971;
                                      var reader_ast_imports6972 = function() {
                                        return this.data["imports"];
                                      };
                                      obj6931.methods["imports"] = reader_ast_imports6972;
                                      obj6931.data["imports"] = array6971;
                                      var writer_ast_imports6972 = function(argcv, o) {
                                        this.data["imports"] = o;
                                        return GraceDone;
                                      };
                                      obj6931.methods["imports:="] = writer_ast_imports6972;
                                      obj6931.mutable = true;
                                      superDepth = origSuperDepth;
                                    };
                                    obj_init_6931.apply(obj6931, []);
                                    return obj6931;
                                  };
                                  func6930.paramCounts = [1];
                                  obj6921.methods["body"] = func6930;
                                  func6930.definitionLine = 1169;
                                  func6930.definitionModule = "ast";
                                    var func6973 = function(argcv) {    // method body(1     )()object
                                      var curarg = 1;
                                      var var_b = arguments[curarg];
                                      curarg++;
                                      var inheritingObject = arguments[curarg++];
                                      // Start argument processing
                                      curarg = 1;
                                      curarg++;
                                      // End argument processing
                                      setModuleName("ast");
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var obj6974 = Grace_allocObject(null, "body");
                                      obj6974.definitionModule = "ast";
                                      obj6974.definitionLine = 1169;
                                      var inho6974 = inheritingObject;
                                      while (inho6974.superobj) inho6974 = inho6974.superobj;
                                      inho6974.superobj = obj6974;
                                      obj6974.data = inheritingObject.data;
                                      if (inheritingObject.hasOwnProperty('_value'))
                                        obj6974._value = inheritingObject._value;
                                      obj6974.outer = this;
                                      var reader_ast_outer6975 = function() {
                                        return this.outer;
                                      };
                                      obj6974.methods["outer"] = reader_ast_outer6975;
                                      var obj_init_6974 = function() {
                                        var origSuperDepth = superDepth;
                                        superDepth = obj6974;
                                        var func6976 = function(argcv) {    // method isModule
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isModule"));
                                          setModuleName("ast");
                                          // isModule is a simple accessor - elide try ... catch
                                          setLineNumber(1177);    // compilenode identifier
                                          return GraceTrue;
                                        };
                                        func6976.paramCounts = [0];
                                        obj6974.methods["isModule"] = func6976;
                                        func6976.definitionLine = 1177;
                                        func6976.definitionModule = "ast";
                                        var func6977 = function(argcv) {    // method returnsObject
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                                          setModuleName("ast");
                                          // returnsObject is a simple accessor - elide try ... catch
                                          setLineNumber(1178);    // compilenode identifier
                                          return GraceFalse;
                                        };
                                        func6977.paramCounts = [0];
                                        obj6974.methods["returnsObject"] = func6977;
                                        func6977.definitionLine = 1178;
                                        func6977.definitionModule = "ast";
                                        var func6978 = function(argcv) {    // method externalsDo(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_action = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for externalsDo(1)"));
                                          setModuleName("ast");
                                          setLineNumber(1180);    // compilenode block
                                          var block6979 = new GraceBlock(this, 1180, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block6979.real = function(var_o) {
                                            var if6980 = GraceDone;
                                            setLineNumber(1181);    // compilenode identifier
                                            var call6981 = callmethodChecked(var_o, "isExternal", [0]);
                                            if (Grace_isTrue(call6981)) {
                                              var call6982 = callmethodChecked(var_action, "apply", [1], var_o);
                                              if6980 = call6982;
                                            }
                                            return if6980;
                                          };
                                          setLineNumber(1180);    // compilenode call
                                          onSelf = true;
                                          var call6983 = callmethodChecked(this, "value", [0]);
                                          var call6984 = callmethodChecked(call6983, "do", [1], block6979);
                                          return call6984;
                                        };
                                        func6978.paramCounts = [1];
                                        obj6974.methods["externalsDo"] = func6978;
                                        func6978.definitionLine = 1179;
                                        func6978.definitionModule = "ast";
                                        var func6985 = function(argcv) {    // method accept(1)from(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_visitor = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                          var var_as = arguments[curarg];
                                          curarg++;
                                          if (argcv[1] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                          // Start argument checking
                                          curarg = 1;
                                          setLineNumber(1184);    // compilenode identifier
                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                          curarg++;
                                          curarg++;
                                          // End argument checking
                                          setModuleName("ast");
                                          var if6986 = GraceDone;
                                          setLineNumber(1185);    // compilenode identifier
                                          var call6987 = callmethodChecked(var_visitor, "visitModule()up", [1, 1], this, var_as);
                                          if (Grace_isTrue(call6987)) {
                                            setLineNumber(1186);    // compilenode identifier
                                            var call6988 = callmethodChecked(var_as, "extend", [1], this);
                                            var var_newChain = call6988;
                                            var if6989 = GraceDone;
                                            setLineNumber(1187);    // compilenode call
                                            onSelf = true;
                                            var call6990 = callmethodChecked(this, "superclass", [0]);
                                            var opresult6993 = callmethodChecked(GraceFalse, "\u2260", [1], call6990);
                                            if (Grace_isTrue(opresult6993)) {
                                              setLineNumber(1188);    // compilenode call
                                              onSelf = true;
                                              var call6994 = callmethodChecked(this, "superclass", [0]);
                                              var call6995 = callmethodChecked(call6994, "accept()from", [1, 1], var_visitor, var_newChain);
                                              if6989 = call6995;
                                            }
                                            setLineNumber(1190);    // compilenode call
                                            onSelf = true;
                                            var call6996 = callmethodChecked(this, "value", [0]);
                                            var block6997 = new GraceBlock(this, 1190, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block6997.real = function(var_x) {
                                              setLineNumber(1191);    // compilenode identifier
                                              var call6998 = callmethodChecked(var_x, "accept()from", [1, 1], var_visitor, var_newChain);
                                              return call6998;
                                            };
                                            var call6999 = callmethodChecked(var_prelude, "for()do", [1, 1], call6996, block6997);
                                            if6986 = call6999;
                                          }
                                          return if6986;
                                        };
                                        func6985.paramTypes = [];
                                        func6985.paramTypes.push([]);
                                        func6985.paramTypes.push([]);
                                        func6985.paramCounts = [1, 1];
                                        obj6974.methods["accept()from"] = func6985;
                                        func6985.definitionLine = 1184;
                                        func6985.definitionModule = "ast";
                                        var func7000 = function(argcv) {    // method shallowCopy
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                          setModuleName("ast");
                                          setLineNumber(1196);    // compilenode identifier
                                          var call7001 = callmethodChecked(var_moduleNode, "body", [1], var_emptySeq);
                                          var call7002 = callmethodChecked(call7001, "shallowCopyFieldsFrom", [1], this);
                                          return call7002;
                                        };
                                        func7000.paramCounts = [0];
                                        obj6974.methods["shallowCopy"] = func7000;
                                        func7000.definitionLine = 1195;
                                        func7000.definitionModule = "ast";
                                        var func7003 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_other = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                          setModuleName("ast");
                                          setLineNumber(1199);    // compilenode identifier
                                          var call7004 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                          setLineNumber(1200);    // compilenode identifier
                                          var call7005 = callmethodChecked(var_other, "imports", [0]);
                                          onSelf = true;
                                          var call7006 = callmethodChecked(this, "imports:=", [1], call7005);
                                          setLineNumber(1201);    // compilenode identifier
                                          return this;
                                        };
                                        func7003.paramCounts = [1];
                                        obj6974.methods["shallowCopyFieldsFrom"] = func7003;
                                        func7003.definitionLine = 1198;
                                        func7003.definitionModule = "ast";
                                        setLineNumber(1170);    // compilenode identifier
                                        var call7007 = callmethodChecked(var_objectNode, "new()object", [2, 1], var_b, GraceFalse, this);
                                        obj6974.superobj = call7007;
                                        if (call7007.data) obj6974.data = call7007.data;
                                        if (call7007.hasOwnProperty('_value'))
                                            obj6974._value = call7007._value;
                                        setLineNumber(1171);    // compilenode string
                                        var string7008 = new GraceString("module");
                                        obj6974.data["kind"] = string7008;
                                        var reader_ast_kind7009 = function() {
                                          return this.data["kind"];
                                        };
                                        reader_ast_kind7009.def = true;
                                        obj6974.methods["kind"] = reader_ast_kind7009;
                                        setLineNumber(1172);    // compilenode identifier
                                        var call7010 = callmethodChecked(var_util, "lines", [0]);
                                        obj6974.data["sourceLines"] = call7010;
                                        var reader_ast_sourceLines7011 = function() {
                                          return this.data["sourceLines"];
                                        };
                                        reader_ast_sourceLines7011.def = true;
                                        reader_ast_sourceLines7011.confidential = true;
                                        obj6974.methods["sourceLines"] = reader_ast_sourceLines7011;
                                        setLineNumber(1173);    // compilenode num
                                        onSelf = true;
                                        var call7012 = callmethodChecked(this, "line:=", [1], new GraceNum(0));
                                        setLineNumber(1174);    // compilenode num
                                        onSelf = true;
                                        var call7013 = callmethodChecked(this, "linePos:=", [1], new GraceNum(0));
                                        setLineNumber(1175);    // compilenode array
                                        var array7014 = new PrimitiveGraceList([]);
                                        obj6974.data["imports"] = array7014;
                                        var reader_ast_imports7015 = function() {
                                          return this.data["imports"];
                                        };
                                        obj6974.methods["imports"] = reader_ast_imports7015;
                                        obj6974.data["imports"] = array7014;
                                        var writer_ast_imports7015 = function(argcv, o) {
                                          this.data["imports"] = o;
                                          return GraceDone;
                                        };
                                        obj6974.methods["imports:="] = writer_ast_imports7015;
                                        obj6974.mutable = true;
                                        superDepth = origSuperDepth;
                                      };
                                      obj_init_6974.apply(inheritingObject, []);
                                      return obj6974;
                                      };
                                      obj6921.methods["body()object"] = func6973;
                                    superDepth = origSuperDepth;
                                  };
                                  obj_init_6921.apply(obj6921, []);
                                  var var_moduleNode = obj6921;
                                  setLineNumber(1172);    // compilenode method
                                  var func7016 = function(argcv) {    // method moduleNode
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    if (argcv[0] !== 0)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moduleNode"));
                                    setModuleName("ast");
                                    // moduleNode is a simple accessor - elide try ... catch
                                    setLineNumber(1157);    // compilenode identifier
                                    return var_moduleNode;
                                  };
                                  func7016.paramCounts = [0];
                                  this.methods["moduleNode"] = func7016;
                                  func7016.definitionLine = 1172;
                                  func7016.definitionModule = "ast";
                                  this.methods["moduleNode"].debug = "def";
                                  setLineNumber(1205);    // compilenode object
                                  var obj7017 = Grace_allocObject(GraceObject, "objectNode");
                                  obj7017.definitionModule = "ast";
                                  obj7017.definitionLine = 1205;
                                  obj7017.outer = this;
                                  var reader_ast_outer7018 = function() {
                                    return this.outer;
                                  };
                                  obj7017.methods["outer"] = reader_ast_outer7018;
                                  var obj_init_7017 = function() {
                                    var origSuperDepth = superDepth;
                                    superDepth = obj7017;
                                    var func7019 = function(argcv) {    // method body(1)named(1)scope(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_b = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for body (arg list 1) of body(1)named(1)scope(1)"));
                                      var var_n = arguments[curarg];
                                      curarg++;
                                      if (argcv[1] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for named (arg list 2) of body(1)named(1)scope(1)"));
                                      var var_s = arguments[curarg];
                                      curarg++;
                                      if (argcv[2] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 3) of body(1)named(1)scope(1)"));
                                      setModuleName("ast");
                                      setLineNumber(1207);    // compilenode identifier
                                      onSelf = true;
                                      var call7020 = callmethodChecked(this, "new", [2], var_b, GraceFalse);
                                      var var_result = call7020;
                                      setLineNumber(1208);    // compilenode identifier
                                      var call7021 = callmethodChecked(var_result, "name:=", [1], var_n);
                                      setLineNumber(1209);    // compilenode identifier
                                      var call7022 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                      setLineNumber(1210);    // compilenode identifier
                                      return var_result;
                                    };
                                    func7019.paramCounts = [1, 1, 1];
                                    obj7017.methods["body()named()scope"] = func7019;
                                    func7019.definitionLine = 1206;
                                    func7019.definitionModule = "ast";
                                    var func7023 = function(argcv) {    // method body(1)named(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_b = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for body (arg list 1) of body(1)named(1)"));
                                      var var_n = arguments[curarg];
                                      curarg++;
                                      if (argcv[1] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for named (arg list 2) of body(1)named(1)"));
                                      setModuleName("ast");
                                      setLineNumber(1213);    // compilenode identifier
                                      onSelf = true;
                                      var call7024 = callmethodChecked(this, "body()named()scope", [1, 1, 1], var_b, var_n, var_fakeSymbolTable);
                                      return call7024;
                                    };
                                    func7023.paramCounts = [1, 1];
                                    obj7017.methods["body()named"] = func7023;
                                    func7023.definitionLine = 1212;
                                    func7023.definitionModule = "ast";
                                    var func7025 = function(argcv) {    // method new(2)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_b = arguments[curarg];
                                      curarg++;
                                      var var_superclass__39__ = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 2)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(2)"));
                                      setModuleName("ast");
                                      setLineNumber(1215);    // compilenode object
                                      var obj7026 = Grace_allocObject(null, "objectNode.new");
                                      obj7026.definitionModule = "ast";
                                      obj7026.definitionLine = 1215;
                                      obj7026.outer = this;
                                      var reader_ast_outer7027 = function() {
                                        return this.outer;
                                      };
                                      obj7026.methods["outer"] = reader_ast_outer7027;
                                      var obj_init_7026 = function() {
                                        var origSuperDepth = superDepth;
                                        superDepth = obj7026;
                                        var func7028 = function(argcv) {    // method description
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for description"));
                                          setModuleName("ast");
                                          var if7029 = GraceDone;
                                          setLineNumber(1228);    // compilenode call
                                          onSelf = true;
                                          var call7030 = callmethodChecked(this, "isTrait", [0]);
                                          if (Grace_isTrue(call7030)) {
                                            setLineNumber(1229);    // compilenode string
                                            var string7031 = new GraceString(" (trait)");
                                            onSelf = true;
                                            var call7033 = callmethodChecked(this, "kind", [0]);
                                            var string7035 = new GraceString("");
                                            var opresult7037 = callmethodChecked(string7035, "++", [1], call7033);
                                            var opresult7039 = callmethodChecked(opresult7037, "++", [1], string7031);
                                            if7029 = opresult7039;
                                          } else {
                                            var if7040 = GraceDone;
                                            setLineNumber(1230);    // compilenode call
                                            onSelf = true;
                                            var call7041 = callmethodChecked(this, "inClass", [0]);
                                            if (Grace_isTrue(call7041)) {
                                              setLineNumber(1231);    // compilenode string
                                              var string7042 = new GraceString(" (class)");
                                              onSelf = true;
                                              var call7044 = callmethodChecked(this, "kind", [0]);
                                              var string7046 = new GraceString("");
                                              var opresult7048 = callmethodChecked(string7046, "++", [1], call7044);
                                              var opresult7050 = callmethodChecked(opresult7048, "++", [1], string7042);
                                              if7040 = opresult7050;
                                            } else {
                                              setLineNumber(1233);    // compilenode call
                                              onSelf = true;
                                              var call7051 = callmethodChecked(this, "kind", [0]);
                                              if7040 = call7051;
                                            }
                                            if7029 = if7040;
                                          }
                                          setLineNumber(1228);    // return value
                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], if7029)))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("result of method description does not have " + 
                                                      callmethod(var_String, "asString", [0])._value + "."));
                                          return if7029;
                                        };
                                        func7028.paramCounts = [0];
                                        obj7026.methods["description"] = func7028;
                                        func7028.definitionLine = 1227;
                                        func7028.definitionModule = "ast";
                                        var func7052 = function(argcv) {    // method isTrait
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isTrait"));
                                          setModuleName("ast");
                                          var if7053 = GraceDone;
                                          setLineNumber(1239);    // compilenode call
                                          onSelf = true;
                                          var call7054 = callmethodChecked(this, "inTrait", [0]);
                                          if (Grace_isTrue(call7054)) {
                                            return GraceTrue;
                                          }
                                          var if7055 = GraceDone;
                                          setLineNumber(1240);    // compilenode call
                                          onSelf = true;
                                          var call7056 = callmethodChecked(this, "superclass", [0]);
                                          var opresult7059 = callmethodChecked(GraceFalse, "\u2260", [1], call7056);
                                          if (Grace_isTrue(opresult7059)) {
                                            return GraceFalse;
                                          }
                                          setLineNumber(1241);    // compilenode block
                                          var block7060 = new GraceBlock(this, 1241, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7060.real = function(var_each) {
                                            var if7061 = GraceDone;
                                            setLineNumber(1242);    // compilenode identifier
                                            var call7062 = callmethodChecked(var_each, "isLegalInTrait", [0]);
                                            var call7063 = callmethodChecked(call7062, "not", [0]);
                                            if (Grace_isTrue(call7063)) {
                                              throw new ReturnException(GraceFalse, returnTarget);
                                            }
                                            return if7061;
                                          };
                                          setLineNumber(1241);    // compilenode call
                                          onSelf = true;
                                          var call7064 = callmethodChecked(this, "value", [0]);
                                          var call7065 = callmethodChecked(call7064, "do", [1], block7060);
                                          setLineNumber(1244);    // compilenode identifier
                                          return GraceTrue;
                                        };
                                        func7052.paramCounts = [0];
                                        obj7026.methods["isTrait"] = func7052;
                                        func7052.definitionLine = 1236;
                                        func7052.definitionModule = "ast";
                                        var func7066 = function(argcv) {    // method localNames
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for localNames"));
                                          setModuleName("ast");
                                          var if7067 = GraceDone;
                                          setLineNumber(1250);    // compilenode call
                                          onSelf = true;
                                          var call7068 = callmethodChecked(this, "myLocalNames", [0]);
                                          var opresult7071 = callmethodChecked(GraceFalse, "==", [1], call7068);
                                          if (Grace_isTrue(opresult7071)) {
                                            setLineNumber(1251);    // compilenode call
                                            var call7072 = callmethodChecked(var_prelude, "emptySet", [0]);
                                            onSelf = true;
                                            var call7073 = callmethodChecked(this, "myLocalNames:=", [1], call7072);
                                            setLineNumber(1252);    // compilenode block
                                            var block7074 = new GraceBlock(this, 1252, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7074.real = function(var_node) {
                                              var if7075 = GraceDone;
                                              setLineNumber(1253);    // compilenode identifier
                                              var call7076 = callmethodChecked(var_node, "isMethod", [0]);
                                              var call7078 = callmethodChecked(var_node, "isFieldDec", [0]);
                                              var opresult7080 = callmethodChecked(call7078, "||", [1], call7076);
                                              if (Grace_isTrue(opresult7080)) {
                                                setLineNumber(1254);    // compilenode identifier
                                                var call7081 = callmethodChecked(var_node, "nameString", [0]);
                                                onSelf = true;
                                                var call7082 = callmethodChecked(this, "myLocalNames", [0]);
                                                var call7083 = callmethodChecked(call7082, "add", [1], call7081);
                                                if7075 = call7083;
                                              }
                                              return if7075;
                                            };
                                            setLineNumber(1252);    // compilenode call
                                            onSelf = true;
                                            var call7084 = callmethodChecked(this, "value", [0]);
                                            var call7085 = callmethodChecked(call7084, "do", [1], block7074);
                                            if7067 = call7085;
                                          }
                                          setLineNumber(1258);    // compilenode call
                                          onSelf = true;
                                          var call7086 = callmethodChecked(this, "myLocalNames", [0]);
                                          setLineNumber(1247);    // compilenode call
                                          var call7087 = callmethodChecked(var_prelude, "Set", [0]);
                                          setLineNumber(1258);    // return value
                                          if (!Grace_isTrue(callmethod(call7087, "match", [1], call7086)))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("result of method localNames does not have " + 
                                                      callmethod(call7087, "asString", [0])._value + "."));
                                          return call7086;
                                        };
                                        func7066.paramCounts = [0];
                                        obj7026.methods["localNames"] = func7066;
                                        func7066.definitionLine = 1247;
                                        func7066.definitionModule = "ast";
                                        var func7088 = function(argcv) {    // method parentsDo(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_action = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parentsDo(1)"));
                                          setModuleName("ast");
                                          var if7089 = GraceDone;
                                          setLineNumber(1264);    // compilenode call
                                          onSelf = true;
                                          var call7090 = callmethodChecked(this, "superclass", [0]);
                                          var opresult7093 = callmethodChecked(GraceFalse, "\u2260", [1], call7090);
                                          if (Grace_isTrue(opresult7093)) {
                                            onSelf = true;
                                            var call7094 = callmethodChecked(this, "superclass", [0]);
                                            var call7095 = callmethodChecked(var_action, "apply", [1], call7094);
                                            if7089 = call7095;
                                          }
                                          setLineNumber(1265);    // compilenode block
                                          var block7096 = new GraceBlock(this, 1265, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7096.real = function(var_t) {
                                            setLineNumber(1265);    // compilenode identifier
                                            var call7097 = callmethodChecked(var_action, "apply", [1], var_t);
                                            return call7097;
                                          };
                                          onSelf = true;
                                          var call7098 = callmethodChecked(this, "usedTraits", [0]);
                                          var call7099 = callmethodChecked(call7098, "do", [1], block7096);
                                          return call7099;
                                        };
                                        func7088.paramCounts = [1];
                                        obj7026.methods["parentsDo"] = func7088;
                                        func7088.definitionLine = 1261;
                                        func7088.definitionModule = "ast";
                                        var func7100 = function(argcv) {    // method methodsDo(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_action = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for methodsDo(1)"));
                                          setModuleName("ast");
                                          setLineNumber(1271);    // compilenode block
                                          var block7101 = new GraceBlock(this, 1271, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7101.real = function(var_o) {
                                            var if7102 = GraceDone;
                                            setLineNumber(1272);    // compilenode identifier
                                            var call7103 = callmethodChecked(var_o, "isMethod", [0]);
                                            if (Grace_isTrue(call7103)) {
                                              var call7104 = callmethodChecked(var_action, "apply", [1], var_o);
                                              if7102 = call7104;
                                            }
                                            return if7102;
                                          };
                                          setLineNumber(1271);    // compilenode call
                                          onSelf = true;
                                          var call7105 = callmethodChecked(this, "value", [0]);
                                          var call7106 = callmethodChecked(call7105, "do", [1], block7101);
                                          return call7106;
                                        };
                                        func7100.paramCounts = [1];
                                        obj7026.methods["methodsDo"] = func7100;
                                        func7100.definitionLine = 1268;
                                        func7100.definitionModule = "ast";
                                        var func7107 = function(argcv) {    // method executableComponentsDo(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_action = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for executableComponentsDo(1)"));
                                          setModuleName("ast");
                                          setLineNumber(1279);    // compilenode block
                                          var block7108 = new GraceBlock(this, 1279, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7108.real = function(var_o) {
                                            var if7109 = GraceDone;
                                            setLineNumber(1280);    // compilenode identifier
                                            var call7110 = callmethodChecked(var_o, "isExecutable", [0]);
                                            if (Grace_isTrue(call7110)) {
                                              var call7111 = callmethodChecked(var_action, "apply", [1], var_o);
                                              if7109 = call7111;
                                            }
                                            return if7109;
                                          };
                                          setLineNumber(1279);    // compilenode call
                                          onSelf = true;
                                          var call7112 = callmethodChecked(this, "value", [0]);
                                          var call7113 = callmethodChecked(call7112, "do", [1], block7108);
                                          return call7113;
                                        };
                                        func7107.paramCounts = [1];
                                        obj7026.methods["executableComponentsDo"] = func7107;
                                        func7107.definitionLine = 1276;
                                        func7107.definitionModule = "ast";
                                        var func7114 = function(argcv) {    // method scope:=(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_st = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
                                          setModuleName("ast");
                                          setLineNumber(1287);    // compilenode identifier
                                          onSelf = true;
                                          var call7115 = callmethodChecked(this, "symbolTable:=", [1], var_st);
                                          setLineNumber(1288);    // compilenode identifier
                                          var call7116 = callmethodChecked(var_st, "node:=", [1], this);
                                          return call7116;
                                        };
                                        func7114.paramCounts = [1];
                                        obj7026.methods["scope:="] = func7114;
                                        func7114.definitionLine = 1284;
                                        func7114.definitionModule = "ast";
                                        var func7117 = function(argcv) {    // method body
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for body"));
                                          setModuleName("ast");
                                          setLineNumber(1290);    // compilenode call
                                          onSelf = true;
                                          var call7118 = callmethodChecked(this, "value", [0]);
                                          return call7118;
                                        };
                                        func7117.paramCounts = [0];
                                        obj7026.methods["body"] = func7117;
                                        func7117.definitionLine = 1290;
                                        func7117.definitionModule = "ast";
                                        var func7119 = function(argcv) {    // method returnsObject
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                                          setModuleName("ast");
                                          // returnsObject is a simple accessor - elide try ... catch
                                          setLineNumber(1291);    // compilenode identifier
                                          return GraceTrue;
                                        };
                                        func7119.paramCounts = [0];
                                        obj7026.methods["returnsObject"] = func7119;
                                        func7119.definitionLine = 1291;
                                        func7119.definitionModule = "ast";
                                        var func7120 = function(argcv) {    // method returnedObjectScope
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnedObjectScope"));
                                          setModuleName("ast");
                                          setLineNumber(1292);    // compilenode call
                                          onSelf = true;
                                          var call7121 = callmethodChecked(this, "scope", [0]);
                                          return call7121;
                                        };
                                        func7120.paramCounts = [0];
                                        obj7026.methods["returnedObjectScope"] = func7120;
                                        func7120.definitionLine = 1292;
                                        func7120.definitionModule = "ast";
                                        var func7122 = function(argcv) {    // method canInherit
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for canInherit"));
                                          setModuleName("ast");
                                          setLineNumber(1293);    // compilenode call
                                          onSelf = true;
                                          var call7123 = callmethodChecked(this, "inTrait", [0]);
                                          var call7124 = callmethodChecked(call7123, "not", [0]);
                                          return call7124;
                                        };
                                        func7122.paramCounts = [0];
                                        obj7026.methods["canInherit"] = func7122;
                                        func7122.definitionLine = 1293;
                                        func7122.definitionModule = "ast";
                                        var func7125 = function(argcv) {    // method canUse
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for canUse"));
                                          setModuleName("ast");
                                          // canUse is a simple accessor - elide try ... catch
                                          setLineNumber(1294);    // compilenode identifier
                                          return GraceTrue;
                                        };
                                        func7125.paramCounts = [0];
                                        obj7026.methods["canUse"] = func7125;
                                        func7125.definitionLine = 1294;
                                        func7125.definitionModule = "ast";
                                        var func7126 = function(argcv) {    // method isObject
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isObject"));
                                          setModuleName("ast");
                                          // isObject is a simple accessor - elide try ... catch
                                          setLineNumber(1295);    // compilenode identifier
                                          return GraceTrue;
                                        };
                                        func7126.paramCounts = [0];
                                        obj7026.methods["isObject"] = func7126;
                                        func7126.definitionLine = 1295;
                                        func7126.definitionModule = "ast";
                                        var func7127 = function(argcv) {    // method accept(1)from(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_visitor = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                          var var_as = arguments[curarg];
                                          curarg++;
                                          if (argcv[1] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                          // Start argument checking
                                          curarg = 1;
                                          setLineNumber(1296);    // compilenode identifier
                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                          curarg++;
                                          curarg++;
                                          // End argument checking
                                          setModuleName("ast");
                                          var if7128 = GraceDone;
                                          setLineNumber(1297);    // compilenode identifier
                                          var call7129 = callmethodChecked(var_visitor, "visitObject()up", [1, 1], this, var_as);
                                          if (Grace_isTrue(call7129)) {
                                            setLineNumber(1298);    // compilenode identifier
                                            var call7130 = callmethodChecked(var_as, "extend", [1], this);
                                            var var_newChain = call7130;
                                            var if7131 = GraceDone;
                                            setLineNumber(1299);    // compilenode call
                                            onSelf = true;
                                            var call7132 = callmethodChecked(this, "superclass", [0]);
                                            var opresult7135 = callmethodChecked(GraceFalse, "\u2260", [1], call7132);
                                            if (Grace_isTrue(opresult7135)) {
                                              setLineNumber(1300);    // compilenode call
                                              onSelf = true;
                                              var call7136 = callmethodChecked(this, "superclass", [0]);
                                              var call7137 = callmethodChecked(call7136, "accept()from", [1, 1], var_visitor, var_newChain);
                                              if7131 = call7137;
                                            }
                                            setLineNumber(1302);    // compilenode block
                                            var block7138 = new GraceBlock(this, 1302, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7138.real = function(var_t) {
                                              setLineNumber(1302);    // compilenode identifier
                                              var call7139 = callmethodChecked(var_t, "accept()from", [1, 1], var_visitor, var_newChain);
                                              return call7139;
                                            };
                                            onSelf = true;
                                            var call7140 = callmethodChecked(this, "usedTraits", [0]);
                                            var call7141 = callmethodChecked(call7140, "do", [1], block7138);
                                            setLineNumber(1303);    // compilenode block
                                            var block7142 = new GraceBlock(this, 1303, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7142.real = function(var_x) {
                                              setLineNumber(1303);    // compilenode identifier
                                              var call7143 = callmethodChecked(var_x, "accept()from", [1, 1], var_visitor, var_newChain);
                                              return call7143;
                                            };
                                            onSelf = true;
                                            var call7144 = callmethodChecked(this, "value", [0]);
                                            var call7145 = callmethodChecked(call7144, "do", [1], block7142);
                                            if7128 = call7145;
                                          }
                                          return if7128;
                                        };
                                        func7127.paramTypes = [];
                                        func7127.paramTypes.push([]);
                                        func7127.paramTypes.push([]);
                                        func7127.paramCounts = [1, 1];
                                        obj7026.methods["accept()from"] = func7127;
                                        func7127.definitionLine = 1296;
                                        func7127.definitionModule = "ast";
                                        var func7146 = function(argcv) {    // method nameString
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                          setModuleName("ast");
                                          var if7147 = GraceDone;
                                          setLineNumber(1307);    // compilenode string
                                          var string7148 = new GraceString("object");
                                          onSelf = true;
                                          var call7150 = callmethodChecked(this, "name", [0]);
                                          var opresult7152 = callmethodChecked(call7150, "==", [1], string7148);
                                          if (Grace_isTrue(opresult7152)) {
                                            setLineNumber(1308);    // compilenode string
                                            var string7153 = new GraceString("");
                                            onSelf = true;
                                            var call7155 = callmethodChecked(this, "line", [0]);
                                            var string7157 = new GraceString("object_on_line_");
                                            var opresult7159 = callmethodChecked(string7157, "++", [1], call7155);
                                            var opresult7161 = callmethodChecked(opresult7159, "++", [1], string7153);
                                            if7147 = opresult7161;
                                          } else {
                                            setLineNumber(1310);    // compilenode call
                                            onSelf = true;
                                            var call7162 = callmethodChecked(this, "name", [0]);
                                            if7147 = call7162;
                                          }
                                          return if7147;
                                        };
                                        func7146.paramCounts = [0];
                                        obj7026.methods["nameString"] = func7146;
                                        func7146.definitionLine = 1306;
                                        func7146.definitionModule = "ast";
                                        var func7163 = function(argcv) {    // method map(1)ancestors(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_blk = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                          var var_as = arguments[curarg];
                                          curarg++;
                                          if (argcv[1] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                          setModuleName("ast");
                                          setLineNumber(1314);    // compilenode call
                                          onSelf = true;
                                          var call7164 = callmethodChecked(this, "shallowCopy", [0]);
                                          var var_n = call7164;
                                          setLineNumber(1315);    // compilenode identifier
                                          var call7165 = callmethodChecked(var_as, "extend", [1], var_n);
                                          var var_newChain = call7165;
                                          setLineNumber(1316);    // compilenode call
                                          onSelf = true;
                                          var call7166 = callmethodChecked(this, "value", [0]);
                                          var call7167 = callmethodChecked(superDepth, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call7168 = callmethodChecked(call7167, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call7169 = callmethodChecked(call7168, "listMap()ancestors", [2, 1], call7166, var_blk, var_newChain);
                                          var call7170 = callmethodChecked(var_n, "value:=", [1], call7169);
                                          setLineNumber(1317);    // compilenode call
                                          onSelf = true;
                                          var call7171 = callmethodChecked(this, "superclass", [0]);
                                          var call7172 = callmethodChecked(superDepth, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call7173 = callmethodChecked(call7172, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call7174 = callmethodChecked(call7173, "maybeMap()ancestors", [2, 1], call7171, var_blk, var_newChain);
                                          var call7175 = callmethodChecked(var_n, "superclass:=", [1], call7174);
                                          setLineNumber(1318);    // compilenode call
                                          onSelf = true;
                                          var call7176 = callmethodChecked(this, "usedTraits", [0]);
                                          var call7177 = callmethodChecked(superDepth, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call7178 = callmethodChecked(call7177, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call7179 = callmethodChecked(call7178, "listMap()ancestors", [2, 1], call7176, var_blk, var_newChain);
                                          var call7180 = callmethodChecked(var_n, "usedTraits:=", [1], call7179);
                                          setLineNumber(1319);    // compilenode identifier
                                          var call7181 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                          return call7181;
                                        };
                                        func7163.paramCounts = [1, 1];
                                        obj7026.methods["map()ancestors"] = func7163;
                                        func7163.definitionLine = 1313;
                                        func7163.definitionModule = "ast";
                                        var func7182 = function(argcv) {    // method pretty(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_depth__39__ = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                          setModuleName("ast");
                                          setLineNumber(1322);    // compilenode identifier
                                          var var_depth = var_depth__39__;
                                          setLineNumber(1323);    // compilenode string
                                          var string7183 = new GraceString("");
                                          var var_spc = string7183;
                                          setLineNumber(1324);    // compilenode num
                                          var opresult7186 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                          var block7187 = new GraceBlock(this, 1324, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7187.real = function(var_i) {
                                            setLineNumber(1325);    // compilenode string
                                            var string7188 = new GraceString("  ");
                                            var opresult7191 = callmethodChecked(var_spc, "++", [1], string7188);
                                            var_spc = opresult7191;
                                            return GraceDone;
                                          };
                                          var call7192 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult7186, block7187);
                                          setLineNumber(1327);    // compilenode identifier
                                          var call7193 = callmethodsuper(this, "pretty", [1], var_depth);
                                          var var_s = call7193;
                                          setLineNumber(1328);    // compilenode string
                                          var string7194 = new GraceString("");
                                          onSelf = true;
                                          var call7196 = callmethodChecked(this, "name", [0]);
                                          var string7198 = new GraceString("Name: ");
                                          var string7201 = new GraceString("\n");
                                          var string7204 = new GraceString("");
                                          var opresult7206 = callmethodChecked(string7204, "++", [1], var_s);
                                          var opresult7208 = callmethodChecked(opresult7206, "++", [1], string7201);
                                          var opresult7210 = callmethodChecked(opresult7208, "++", [1], var_spc);
                                          var opresult7212 = callmethodChecked(opresult7210, "++", [1], string7198);
                                          var opresult7214 = callmethodChecked(opresult7212, "++", [1], call7196);
                                          var opresult7216 = callmethodChecked(opresult7214, "++", [1], string7194);
                                          var_s = opresult7216;
                                          var if7217 = GraceDone;
                                          setLineNumber(1329);    // compilenode call
                                          onSelf = true;
                                          var call7218 = callmethodChecked(this, "superclass", [0]);
                                          var opresult7221 = callmethodChecked(GraceFalse, "\u2260", [1], call7218);
                                          if (Grace_isTrue(opresult7221)) {
                                            setLineNumber(1331);    // compilenode identifier
                                            var opresult7224 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                            onSelf = true;
                                            var call7225 = callmethodChecked(this, "superclass", [0]);
                                            var call7226 = callmethodChecked(call7225, "pretty", [1], opresult7224);
                                            setLineNumber(1330);    // compilenode string
                                            var string7228 = new GraceString("Superclass: ");
                                            var string7231 = new GraceString("\n");
                                            var opresult7234 = callmethodChecked(var_s, "++", [1], string7231);
                                            var opresult7236 = callmethodChecked(opresult7234, "++", [1], var_spc);
                                            var opresult7238 = callmethodChecked(opresult7236, "++", [1], string7228);
                                            var opresult7240 = callmethodChecked(opresult7238, "++", [1], call7226);
                                            var_s = opresult7240;
                                            if7217 = GraceDone;
                                          }
                                          var if7241 = GraceDone;
                                          setLineNumber(1333);    // compilenode call
                                          onSelf = true;
                                          var call7242 = callmethodChecked(this, "usedTraits", [0]);
                                          var call7243 = callmethodChecked(call7242, "isEmpty", [0]);
                                          var call7244 = callmethodChecked(call7243, "not", [0]);
                                          if (Grace_isTrue(call7244)) {
                                            setLineNumber(1334);    // compilenode string
                                            var string7245 = new GraceString("Traits:");
                                            var string7248 = new GraceString("\n");
                                            var opresult7251 = callmethodChecked(var_s, "++", [1], string7248);
                                            var opresult7253 = callmethodChecked(opresult7251, "++", [1], var_spc);
                                            var opresult7255 = callmethodChecked(opresult7253, "++", [1], string7245);
                                            var_s = opresult7255;
                                            setLineNumber(1335);    // compilenode block
                                            var block7256 = new GraceBlock(this, 1335, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7256.real = function(var_t) {
                                              setLineNumber(1336);    // compilenode string
                                              var string7257 = new GraceString("");
                                              var opresult7261 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                              var call7262 = callmethodChecked(var_t, "pretty", [1], opresult7261);
                                              var string7264 = new GraceString("  ");
                                              var string7267 = new GraceString("\n");
                                              var string7270 = new GraceString("");
                                              var opresult7272 = callmethodChecked(string7270, "++", [1], var_s);
                                              var opresult7274 = callmethodChecked(opresult7272, "++", [1], string7267);
                                              var opresult7276 = callmethodChecked(opresult7274, "++", [1], var_spc);
                                              var opresult7278 = callmethodChecked(opresult7276, "++", [1], string7264);
                                              var opresult7280 = callmethodChecked(opresult7278, "++", [1], call7262);
                                              var opresult7282 = callmethodChecked(opresult7280, "++", [1], string7257);
                                              var_s = opresult7282;
                                              return GraceDone;
                                            };
                                            setLineNumber(1335);    // compilenode call
                                            onSelf = true;
                                            var call7283 = callmethodChecked(this, "usedTraits", [0]);
                                            var call7284 = callmethodChecked(call7283, "do", [1], block7256);
                                            if7241 = call7284;
                                          }
                                          setLineNumber(1339);    // compilenode block
                                          var block7285 = new GraceBlock(this, 1339, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7285.real = function(var_x) {
                                            setLineNumber(1340);    // compilenode identifier
                                            var opresult7288 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                            var call7289 = callmethodChecked(var_x, "pretty", [1], opresult7288);
                                            var string7292 = new GraceString("\n");
                                            var opresult7295 = callmethodChecked(var_s, "++", [1], string7292);
                                            var opresult7297 = callmethodChecked(opresult7295, "++", [1], var_spc);
                                            var opresult7299 = callmethodChecked(opresult7297, "++", [1], call7289);
                                            var_s = opresult7299;
                                            return GraceDone;
                                          };
                                          setLineNumber(1339);    // compilenode call
                                          onSelf = true;
                                          var call7300 = callmethodChecked(this, "value", [0]);
                                          var call7301 = callmethodChecked(call7300, "do", [1], block7285);
                                          setLineNumber(1342);    // compilenode identifier
                                          return var_s;
                                        };
                                        func7182.paramCounts = [1];
                                        obj7026.methods["pretty"] = func7182;
                                        func7182.definitionLine = 1321;
                                        func7182.definitionModule = "ast";
                                        var func7302 = function(argcv) {    // method toGrace(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_depth = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                          // Start argument checking
                                          curarg = 1;
                                          setLineNumber(1344);    // compilenode identifier
                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                          curarg++;
                                          // End argument checking
                                          setModuleName("ast");
                                          setLineNumber(1345);    // compilenode string
                                          var string7303 = new GraceString("");
                                          var var_spc = string7303;
                                          setLineNumber(1346);    // compilenode identifier
                                          var diff7306 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                          var opresult7309 = callmethodChecked(new GraceNum(0), "..", [1], diff7306);
                                          var block7310 = new GraceBlock(this, 1346, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7310.real = function(var_i) {
                                            setLineNumber(1347);    // compilenode string
                                            var string7311 = new GraceString("    ");
                                            var opresult7314 = callmethodChecked(var_spc, "++", [1], string7311);
                                            var_spc = opresult7314;
                                            return GraceDone;
                                          };
                                          var call7315 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult7309, block7310);
                                          setLineNumber(1349);    // compilenode string
                                          var string7316 = new GraceString("object {");
                                          var var_s = string7316;
                                          var if7317 = GraceDone;
                                          setLineNumber(1350);    // compilenode call
                                          onSelf = true;
                                          var call7318 = callmethodChecked(this, "inTrait", [0]);
                                          if (Grace_isTrue(call7318)) {
                                            var string7319 = new GraceString("   // trait");
                                            var opresult7322 = callmethodChecked(var_s, "++", [1], string7319);
                                            var_s = opresult7322;
                                            if7317 = GraceDone;
                                          }
                                          var if7323 = GraceDone;
                                          setLineNumber(1351);    // compilenode call
                                          onSelf = true;
                                          var call7324 = callmethodChecked(this, "inClass", [0]);
                                          if (Grace_isTrue(call7324)) {
                                            var string7325 = new GraceString("   // class");
                                            var opresult7328 = callmethodChecked(var_s, "++", [1], string7325);
                                            var_s = opresult7328;
                                            if7323 = GraceDone;
                                          }
                                          var if7329 = GraceDone;
                                          setLineNumber(1352);    // compilenode call
                                          onSelf = true;
                                          var call7330 = callmethodChecked(this, "superclass", [0]);
                                          var opresult7333 = callmethodChecked(GraceFalse, "\u2260", [1], call7330);
                                          if (Grace_isTrue(opresult7333)) {
                                            setLineNumber(1353);    // compilenode identifier
                                            var opresult7336 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                            onSelf = true;
                                            var call7337 = callmethodChecked(this, "superclass", [0]);
                                            var call7338 = callmethodChecked(call7337, "toGrace", [1], opresult7336);
                                            var string7340 = new GraceString("\n");
                                            var opresult7343 = callmethodChecked(var_s, "++", [1], string7340);
                                            var opresult7345 = callmethodChecked(opresult7343, "++", [1], call7338);
                                            var_s = opresult7345;
                                            if7329 = GraceDone;
                                          }
                                          setLineNumber(1355);    // compilenode block
                                          var block7346 = new GraceBlock(this, 1355, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7346.real = function(var_t) {
                                            setLineNumber(1355);    // compilenode identifier
                                            var opresult7349 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                            var call7350 = callmethodChecked(var_t, "toGrace", [1], opresult7349);
                                            var string7352 = new GraceString("\n");
                                            var opresult7355 = callmethodChecked(var_s, "++", [1], string7352);
                                            var opresult7357 = callmethodChecked(opresult7355, "++", [1], call7350);
                                            var_s = opresult7357;
                                            return GraceDone;
                                          };
                                          onSelf = true;
                                          var call7358 = callmethodChecked(this, "usedTraits", [0]);
                                          var call7359 = callmethodChecked(call7358, "do", [1], block7346);
                                          setLineNumber(1356);    // compilenode block
                                          var block7360 = new GraceBlock(this, 1356, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7360.real = function(var_x) {
                                            setLineNumber(1357);    // compilenode identifier
                                            var opresult7363 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                            var call7364 = callmethodChecked(var_x, "toGrace", [1], opresult7363);
                                            var string7366 = new GraceString("    ");
                                            var string7369 = new GraceString("\n");
                                            var opresult7372 = callmethodChecked(var_s, "++", [1], string7369);
                                            var opresult7374 = callmethodChecked(opresult7372, "++", [1], var_spc);
                                            var opresult7376 = callmethodChecked(opresult7374, "++", [1], string7366);
                                            var opresult7378 = callmethodChecked(opresult7376, "++", [1], call7364);
                                            var_s = opresult7378;
                                            return GraceDone;
                                          };
                                          setLineNumber(1356);    // compilenode call
                                          onSelf = true;
                                          var call7379 = callmethodChecked(this, "value", [0]);
                                          var call7380 = callmethodChecked(call7379, "do", [1], block7360);
                                          setLineNumber(1359);    // compilenode string
                                          var string7381 = new GraceString("}");
                                          var string7384 = new GraceString("\n");
                                          var opresult7387 = callmethodChecked(var_s, "++", [1], string7384);
                                          var opresult7389 = callmethodChecked(opresult7387, "++", [1], var_spc);
                                          var opresult7391 = callmethodChecked(opresult7389, "++", [1], string7381);
                                          var_s = opresult7391;
                                          setLineNumber(1360);    // return value
                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("result of method toGrace(1) does not have " + 
                                                      callmethod(var_String, "asString", [0])._value + "."));
                                          return var_s;
                                        };
                                        func7302.paramTypes = [];
                                        func7302.paramTypes.push([type_Number, "depth"]);
                                        func7302.paramCounts = [1];
                                        obj7026.methods["toGrace"] = func7302;
                                        func7302.definitionLine = 1344;
                                        func7302.definitionModule = "ast";
                                        var func7392 = function(argcv) {    // method shallowCopy
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                          setModuleName("ast");
                                          setLineNumber(1363);    // compilenode identifier
                                          var call7393 = callmethodChecked(var_objectNode, "new", [2], var_emptySeq, GraceFalse);
                                          var call7394 = callmethodChecked(call7393, "shallowCopyFieldsFrom", [1], this);
                                          return call7394;
                                        };
                                        func7392.paramCounts = [0];
                                        obj7026.methods["shallowCopy"] = func7392;
                                        func7392.definitionLine = 1362;
                                        func7392.definitionModule = "ast";
                                        var func7395 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_other = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                          setModuleName("ast");
                                          setLineNumber(1366);    // compilenode identifier
                                          var call7396 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                          setLineNumber(1367);    // compilenode identifier
                                          var call7397 = callmethodChecked(var_other, "name", [0]);
                                          onSelf = true;
                                          var call7398 = callmethodChecked(this, "name:=", [1], call7397);
                                          setLineNumber(1368);    // compilenode identifier
                                          var call7399 = callmethodChecked(var_other, "value", [0]);
                                          onSelf = true;
                                          var call7400 = callmethodChecked(this, "value:=", [1], call7399);
                                          setLineNumber(1369);    // compilenode identifier
                                          var call7401 = callmethodChecked(var_other, "superclass", [0]);
                                          onSelf = true;
                                          var call7402 = callmethodChecked(this, "superclass:=", [1], call7401);
                                          setLineNumber(1370);    // compilenode identifier
                                          var call7403 = callmethodChecked(var_other, "usedTraits", [0]);
                                          onSelf = true;
                                          var call7404 = callmethodChecked(this, "usedTraits:=", [1], call7403);
                                          setLineNumber(1371);    // compilenode identifier
                                          var call7405 = callmethodChecked(var_other, "inClass", [0]);
                                          onSelf = true;
                                          var call7406 = callmethodChecked(this, "inClass:=", [1], call7405);
                                          setLineNumber(1372);    // compilenode identifier
                                          var call7407 = callmethodChecked(var_other, "inTrait", [0]);
                                          onSelf = true;
                                          var call7408 = callmethodChecked(this, "inTrait:=", [1], call7407);
                                          setLineNumber(1373);    // compilenode identifier
                                          var call7409 = callmethodChecked(var_other, "annotations", [0]);
                                          onSelf = true;
                                          var call7410 = callmethodChecked(this, "annotations:=", [1], call7409);
                                          setLineNumber(1374);    // compilenode identifier
                                          return this;
                                        };
                                        func7395.paramCounts = [1];
                                        obj7026.methods["shallowCopyFieldsFrom"] = func7395;
                                        func7395.definitionLine = 1365;
                                        func7395.definitionModule = "ast";
                                        var func7411 = function(argcv) {    // method asString
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                          setModuleName("ast");
                                          setLineNumber(1377);    // compilenode string
                                          var string7412 = new GraceString("");
                                          onSelf = true;
                                          var call7414 = callmethodChecked(this, "nameString", [0]);
                                          var string7416 = new GraceString("object ");
                                          var opresult7418 = callmethodChecked(string7416, "++", [1], call7414);
                                          var opresult7420 = callmethodChecked(opresult7418, "++", [1], string7412);
                                          return opresult7420;
                                        };
                                        func7411.paramCounts = [0];
                                        obj7026.methods["asString"] = func7411;
                                        func7411.definitionLine = 1376;
                                        func7411.definitionModule = "ast";
                                        setLineNumber(1216);    // compilenode call
                                        var call7421 = callmethodChecked(superDepth, "outer", [0]);
                                        onOuter = true;
                                        onSelf = true;
                                        var call7422 = callmethodChecked(call7421, "outer", [0]);
                                        onOuter = true;
                                        onSelf = true;
                                        var call7423 = callmethodChecked(call7422, "baseNode()object", [0, 1], this);
                                        obj7026.superobj = call7423;
                                        if (call7423.data) obj7026.data = call7423.data;
                                        if (call7423.hasOwnProperty('_value'))
                                            obj7026._value = call7423._value;
                                        setLineNumber(1217);    // compilenode string
                                        var string7424 = new GraceString("object");
                                        obj7026.data["kind"] = string7424;
                                        var reader_ast_kind7425 = function() {
                                          return this.data["kind"];
                                        };
                                        reader_ast_kind7425.def = true;
                                        obj7026.methods["kind"] = reader_ast_kind7425;
                                        setLineNumber(1218);    // compilenode identifier
                                        obj7026.data["value"] = var_b;
                                        var reader_ast_value7426 = function() {
                                          return this.data["value"];
                                        };
                                        obj7026.methods["value"] = reader_ast_value7426;
                                        obj7026.data["value"] = var_b;
                                        var writer_ast_value7426 = function(argcv, o) {
                                          this.data["value"] = o;
                                          return GraceDone;
                                        };
                                        obj7026.methods["value:="] = writer_ast_value7426;
                                        obj7026.mutable = true;
                                        setLineNumber(1219);    // compilenode identifier
                                        obj7026.data["superclass"] = var_superclass__39__;
                                        var reader_ast_superclass7427 = function() {
                                          return this.data["superclass"];
                                        };
                                        obj7026.methods["superclass"] = reader_ast_superclass7427;
                                        obj7026.data["superclass"] = var_superclass__39__;
                                        var writer_ast_superclass7427 = function(argcv, o) {
                                          this.data["superclass"] = o;
                                          return GraceDone;
                                        };
                                        obj7026.methods["superclass:="] = writer_ast_superclass7427;
                                        obj7026.mutable = true;
                                        setLineNumber(1220);    // compilenode array
                                        var array7428 = new PrimitiveGraceList([]);
                                        obj7026.data["usedTraits"] = array7428;
                                        var reader_ast_usedTraits7429 = function() {
                                          return this.data["usedTraits"];
                                        };
                                        obj7026.methods["usedTraits"] = reader_ast_usedTraits7429;
                                        obj7026.data["usedTraits"] = array7428;
                                        var writer_ast_usedTraits7429 = function(argcv, o) {
                                          this.data["usedTraits"] = o;
                                          return GraceDone;
                                        };
                                        obj7026.methods["usedTraits:="] = writer_ast_usedTraits7429;
                                        obj7026.mutable = true;
                                        setLineNumber(1221);    // compilenode string
                                        var string7430 = new GraceString("object");
                                        obj7026.data["name"] = string7430;
                                        var reader_ast_name7431 = function() {
                                          return this.data["name"];
                                        };
                                        obj7026.methods["name"] = reader_ast_name7431;
                                        obj7026.data["name"] = string7430;
                                        var writer_ast_name7431 = function(argcv, o) {
                                          this.data["name"] = o;
                                          return GraceDone;
                                        };
                                        obj7026.methods["name:="] = writer_ast_name7431;
                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], string7430)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("initial value of var 'name' is not of type String"));
                                        obj7026.mutable = true;
                                        setLineNumber(1222);    // compilenode identifier
                                        obj7026.data["inClass"] = GraceFalse;
                                        var reader_ast_inClass7432 = function() {
                                          return this.data["inClass"];
                                        };
                                        obj7026.methods["inClass"] = reader_ast_inClass7432;
                                        obj7026.data["inClass"] = GraceFalse;
                                        var writer_ast_inClass7432 = function(argcv, o) {
                                          this.data["inClass"] = o;
                                          return GraceDone;
                                        };
                                        obj7026.methods["inClass:="] = writer_ast_inClass7432;
                                        obj7026.mutable = true;
                                        setLineNumber(1223);    // compilenode identifier
                                        obj7026.data["inTrait"] = GraceFalse;
                                        var reader_ast_inTrait7433 = function() {
                                          return this.data["inTrait"];
                                        };
                                        obj7026.methods["inTrait"] = reader_ast_inTrait7433;
                                        obj7026.data["inTrait"] = GraceFalse;
                                        var writer_ast_inTrait7433 = function(argcv, o) {
                                          this.data["inTrait"] = o;
                                          return GraceDone;
                                        };
                                        obj7026.methods["inTrait:="] = writer_ast_inTrait7433;
                                        obj7026.mutable = true;
                                        setLineNumber(1224);    // compilenode identifier
                                        obj7026.data["myLocalNames"] = GraceFalse;
                                        var reader_ast_myLocalNames7434 = function() {
                                          return this.data["myLocalNames"];
                                        };
                                        obj7026.methods["myLocalNames"] = reader_ast_myLocalNames7434;
                                        obj7026.data["myLocalNames"] = GraceFalse;
                                        var writer_ast_myLocalNames7434 = function(argcv, o) {
                                          this.data["myLocalNames"] = o;
                                          return GraceDone;
                                        };
                                        obj7026.methods["myLocalNames:="] = writer_ast_myLocalNames7434;
                                        reader_ast_myLocalNames7434.confidential = true;
                                        writer_ast_myLocalNames7434.confidential = true;
                                        obj7026.mutable = true;
                                        setLineNumber(1225);    // compilenode array
                                        var array7435 = new PrimitiveGraceList([]);
                                        obj7026.data["annotations"] = array7435;
                                        var reader_ast_annotations7436 = function() {
                                          return this.data["annotations"];
                                        };
                                        obj7026.methods["annotations"] = reader_ast_annotations7436;
                                        obj7026.data["annotations"] = array7435;
                                        var writer_ast_annotations7436 = function(argcv, o) {
                                          this.data["annotations"] = o;
                                          return GraceDone;
                                        };
                                        obj7026.methods["annotations:="] = writer_ast_annotations7436;
                                        obj7026.mutable = true;
                                        superDepth = origSuperDepth;
                                      };
                                      obj_init_7026.apply(obj7026, []);
                                      return obj7026;
                                    };
                                    func7025.paramCounts = [2];
                                    obj7017.methods["new"] = func7025;
                                    func7025.definitionLine = 1215;
                                    func7025.definitionModule = "ast";
                                      var func7437 = function(argcv) {    // method new(2     )()object
                                        var curarg = 1;
                                        var var_b = arguments[curarg];
                                        curarg++;
                                        var var_superclass__39__ = arguments[curarg];
                                        curarg++;
                                        var inheritingObject = arguments[curarg++];
                                        // Start argument processing
                                        curarg = 1;
                                        curarg++;
                                        curarg++;
                                        // End argument processing
                                        setModuleName("ast");
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var obj7438 = Grace_allocObject(null, "new");
                                        obj7438.definitionModule = "ast";
                                        obj7438.definitionLine = 1215;
                                        var inho7438 = inheritingObject;
                                        while (inho7438.superobj) inho7438 = inho7438.superobj;
                                        inho7438.superobj = obj7438;
                                        obj7438.data = inheritingObject.data;
                                        if (inheritingObject.hasOwnProperty('_value'))
                                          obj7438._value = inheritingObject._value;
                                        obj7438.outer = this;
                                        var reader_ast_outer7439 = function() {
                                          return this.outer;
                                        };
                                        obj7438.methods["outer"] = reader_ast_outer7439;
                                        var obj_init_7438 = function() {
                                          var origSuperDepth = superDepth;
                                          superDepth = obj7438;
                                          var func7440 = function(argcv) {    // method description
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for description"));
                                            setModuleName("ast");
                                            var if7441 = GraceDone;
                                            setLineNumber(1228);    // compilenode call
                                            onSelf = true;
                                            var call7442 = callmethodChecked(this, "isTrait", [0]);
                                            if (Grace_isTrue(call7442)) {
                                              setLineNumber(1229);    // compilenode string
                                              var string7443 = new GraceString(" (trait)");
                                              onSelf = true;
                                              var call7445 = callmethodChecked(this, "kind", [0]);
                                              var string7447 = new GraceString("");
                                              var opresult7449 = callmethodChecked(string7447, "++", [1], call7445);
                                              var opresult7451 = callmethodChecked(opresult7449, "++", [1], string7443);
                                              if7441 = opresult7451;
                                            } else {
                                              var if7452 = GraceDone;
                                              setLineNumber(1230);    // compilenode call
                                              onSelf = true;
                                              var call7453 = callmethodChecked(this, "inClass", [0]);
                                              if (Grace_isTrue(call7453)) {
                                                setLineNumber(1231);    // compilenode string
                                                var string7454 = new GraceString(" (class)");
                                                onSelf = true;
                                                var call7456 = callmethodChecked(this, "kind", [0]);
                                                var string7458 = new GraceString("");
                                                var opresult7460 = callmethodChecked(string7458, "++", [1], call7456);
                                                var opresult7462 = callmethodChecked(opresult7460, "++", [1], string7454);
                                                if7452 = opresult7462;
                                              } else {
                                                setLineNumber(1233);    // compilenode call
                                                onSelf = true;
                                                var call7463 = callmethodChecked(this, "kind", [0]);
                                                if7452 = call7463;
                                              }
                                              if7441 = if7452;
                                            }
                                            setLineNumber(1228);    // return value
                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], if7441)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method description does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            return if7441;
                                          };
                                          func7440.paramCounts = [0];
                                          obj7438.methods["description"] = func7440;
                                          func7440.definitionLine = 1227;
                                          func7440.definitionModule = "ast";
                                          var func7464 = function(argcv) {    // method isTrait
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isTrait"));
                                            setModuleName("ast");
                                            var if7465 = GraceDone;
                                            setLineNumber(1239);    // compilenode call
                                            onSelf = true;
                                            var call7466 = callmethodChecked(this, "inTrait", [0]);
                                            if (Grace_isTrue(call7466)) {
                                              return GraceTrue;
                                            }
                                            var if7467 = GraceDone;
                                            setLineNumber(1240);    // compilenode call
                                            onSelf = true;
                                            var call7468 = callmethodChecked(this, "superclass", [0]);
                                            var opresult7471 = callmethodChecked(GraceFalse, "\u2260", [1], call7468);
                                            if (Grace_isTrue(opresult7471)) {
                                              return GraceFalse;
                                            }
                                            setLineNumber(1241);    // compilenode block
                                            var block7472 = new GraceBlock(this, 1241, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7472.real = function(var_each) {
                                              var if7473 = GraceDone;
                                              setLineNumber(1242);    // compilenode identifier
                                              var call7474 = callmethodChecked(var_each, "isLegalInTrait", [0]);
                                              var call7475 = callmethodChecked(call7474, "not", [0]);
                                              if (Grace_isTrue(call7475)) {
                                                throw new ReturnException(GraceFalse, returnTarget);
                                              }
                                              return if7473;
                                            };
                                            setLineNumber(1241);    // compilenode call
                                            onSelf = true;
                                            var call7476 = callmethodChecked(this, "value", [0]);
                                            var call7477 = callmethodChecked(call7476, "do", [1], block7472);
                                            setLineNumber(1244);    // compilenode identifier
                                            return GraceTrue;
                                          };
                                          func7464.paramCounts = [0];
                                          obj7438.methods["isTrait"] = func7464;
                                          func7464.definitionLine = 1236;
                                          func7464.definitionModule = "ast";
                                          var func7478 = function(argcv) {    // method localNames
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for localNames"));
                                            setModuleName("ast");
                                            var if7479 = GraceDone;
                                            setLineNumber(1250);    // compilenode call
                                            onSelf = true;
                                            var call7480 = callmethodChecked(this, "myLocalNames", [0]);
                                            var opresult7483 = callmethodChecked(GraceFalse, "==", [1], call7480);
                                            if (Grace_isTrue(opresult7483)) {
                                              setLineNumber(1251);    // compilenode call
                                              var call7484 = callmethodChecked(var_prelude, "emptySet", [0]);
                                              onSelf = true;
                                              var call7485 = callmethodChecked(this, "myLocalNames:=", [1], call7484);
                                              setLineNumber(1252);    // compilenode block
                                              var block7486 = new GraceBlock(this, 1252, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block7486.real = function(var_node) {
                                                var if7487 = GraceDone;
                                                setLineNumber(1253);    // compilenode identifier
                                                var call7488 = callmethodChecked(var_node, "isMethod", [0]);
                                                var call7490 = callmethodChecked(var_node, "isFieldDec", [0]);
                                                var opresult7492 = callmethodChecked(call7490, "||", [1], call7488);
                                                if (Grace_isTrue(opresult7492)) {
                                                  setLineNumber(1254);    // compilenode identifier
                                                  var call7493 = callmethodChecked(var_node, "nameString", [0]);
                                                  onSelf = true;
                                                  var call7494 = callmethodChecked(this, "myLocalNames", [0]);
                                                  var call7495 = callmethodChecked(call7494, "add", [1], call7493);
                                                  if7487 = call7495;
                                                }
                                                return if7487;
                                              };
                                              setLineNumber(1252);    // compilenode call
                                              onSelf = true;
                                              var call7496 = callmethodChecked(this, "value", [0]);
                                              var call7497 = callmethodChecked(call7496, "do", [1], block7486);
                                              if7479 = call7497;
                                            }
                                            setLineNumber(1258);    // compilenode call
                                            onSelf = true;
                                            var call7498 = callmethodChecked(this, "myLocalNames", [0]);
                                            setLineNumber(1247);    // compilenode call
                                            var call7499 = callmethodChecked(var_prelude, "Set", [0]);
                                            setLineNumber(1258);    // return value
                                            if (!Grace_isTrue(callmethod(call7499, "match", [1], call7498)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method localNames does not have " + 
                                                        callmethod(call7499, "asString", [0])._value + "."));
                                            return call7498;
                                          };
                                          func7478.paramCounts = [0];
                                          obj7438.methods["localNames"] = func7478;
                                          func7478.definitionLine = 1247;
                                          func7478.definitionModule = "ast";
                                          var func7500 = function(argcv) {    // method parentsDo(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_action = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for parentsDo(1)"));
                                            setModuleName("ast");
                                            var if7501 = GraceDone;
                                            setLineNumber(1264);    // compilenode call
                                            onSelf = true;
                                            var call7502 = callmethodChecked(this, "superclass", [0]);
                                            var opresult7505 = callmethodChecked(GraceFalse, "\u2260", [1], call7502);
                                            if (Grace_isTrue(opresult7505)) {
                                              onSelf = true;
                                              var call7506 = callmethodChecked(this, "superclass", [0]);
                                              var call7507 = callmethodChecked(var_action, "apply", [1], call7506);
                                              if7501 = call7507;
                                            }
                                            setLineNumber(1265);    // compilenode block
                                            var block7508 = new GraceBlock(this, 1265, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7508.real = function(var_t) {
                                              setLineNumber(1265);    // compilenode identifier
                                              var call7509 = callmethodChecked(var_action, "apply", [1], var_t);
                                              return call7509;
                                            };
                                            onSelf = true;
                                            var call7510 = callmethodChecked(this, "usedTraits", [0]);
                                            var call7511 = callmethodChecked(call7510, "do", [1], block7508);
                                            return call7511;
                                          };
                                          func7500.paramCounts = [1];
                                          obj7438.methods["parentsDo"] = func7500;
                                          func7500.definitionLine = 1261;
                                          func7500.definitionModule = "ast";
                                          var func7512 = function(argcv) {    // method methodsDo(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_action = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for methodsDo(1)"));
                                            setModuleName("ast");
                                            setLineNumber(1271);    // compilenode block
                                            var block7513 = new GraceBlock(this, 1271, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7513.real = function(var_o) {
                                              var if7514 = GraceDone;
                                              setLineNumber(1272);    // compilenode identifier
                                              var call7515 = callmethodChecked(var_o, "isMethod", [0]);
                                              if (Grace_isTrue(call7515)) {
                                                var call7516 = callmethodChecked(var_action, "apply", [1], var_o);
                                                if7514 = call7516;
                                              }
                                              return if7514;
                                            };
                                            setLineNumber(1271);    // compilenode call
                                            onSelf = true;
                                            var call7517 = callmethodChecked(this, "value", [0]);
                                            var call7518 = callmethodChecked(call7517, "do", [1], block7513);
                                            return call7518;
                                          };
                                          func7512.paramCounts = [1];
                                          obj7438.methods["methodsDo"] = func7512;
                                          func7512.definitionLine = 1268;
                                          func7512.definitionModule = "ast";
                                          var func7519 = function(argcv) {    // method executableComponentsDo(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_action = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for executableComponentsDo(1)"));
                                            setModuleName("ast");
                                            setLineNumber(1279);    // compilenode block
                                            var block7520 = new GraceBlock(this, 1279, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7520.real = function(var_o) {
                                              var if7521 = GraceDone;
                                              setLineNumber(1280);    // compilenode identifier
                                              var call7522 = callmethodChecked(var_o, "isExecutable", [0]);
                                              if (Grace_isTrue(call7522)) {
                                                var call7523 = callmethodChecked(var_action, "apply", [1], var_o);
                                                if7521 = call7523;
                                              }
                                              return if7521;
                                            };
                                            setLineNumber(1279);    // compilenode call
                                            onSelf = true;
                                            var call7524 = callmethodChecked(this, "value", [0]);
                                            var call7525 = callmethodChecked(call7524, "do", [1], block7520);
                                            return call7525;
                                          };
                                          func7519.paramCounts = [1];
                                          obj7438.methods["executableComponentsDo"] = func7519;
                                          func7519.definitionLine = 1276;
                                          func7519.definitionModule = "ast";
                                          var func7526 = function(argcv) {    // method scope:=(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_st = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope:=(1)"));
                                            setModuleName("ast");
                                            setLineNumber(1287);    // compilenode identifier
                                            onSelf = true;
                                            var call7527 = callmethodChecked(this, "symbolTable:=", [1], var_st);
                                            setLineNumber(1288);    // compilenode identifier
                                            var call7528 = callmethodChecked(var_st, "node:=", [1], this);
                                            return call7528;
                                          };
                                          func7526.paramCounts = [1];
                                          obj7438.methods["scope:="] = func7526;
                                          func7526.definitionLine = 1284;
                                          func7526.definitionModule = "ast";
                                          var func7529 = function(argcv) {    // method body
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for body"));
                                            setModuleName("ast");
                                            setLineNumber(1290);    // compilenode call
                                            onSelf = true;
                                            var call7530 = callmethodChecked(this, "value", [0]);
                                            return call7530;
                                          };
                                          func7529.paramCounts = [0];
                                          obj7438.methods["body"] = func7529;
                                          func7529.definitionLine = 1290;
                                          func7529.definitionModule = "ast";
                                          var func7531 = function(argcv) {    // method returnsObject
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                                            setModuleName("ast");
                                            // returnsObject is a simple accessor - elide try ... catch
                                            setLineNumber(1291);    // compilenode identifier
                                            return GraceTrue;
                                          };
                                          func7531.paramCounts = [0];
                                          obj7438.methods["returnsObject"] = func7531;
                                          func7531.definitionLine = 1291;
                                          func7531.definitionModule = "ast";
                                          var func7532 = function(argcv) {    // method returnedObjectScope
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnedObjectScope"));
                                            setModuleName("ast");
                                            setLineNumber(1292);    // compilenode call
                                            onSelf = true;
                                            var call7533 = callmethodChecked(this, "scope", [0]);
                                            return call7533;
                                          };
                                          func7532.paramCounts = [0];
                                          obj7438.methods["returnedObjectScope"] = func7532;
                                          func7532.definitionLine = 1292;
                                          func7532.definitionModule = "ast";
                                          var func7534 = function(argcv) {    // method canInherit
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for canInherit"));
                                            setModuleName("ast");
                                            setLineNumber(1293);    // compilenode call
                                            onSelf = true;
                                            var call7535 = callmethodChecked(this, "inTrait", [0]);
                                            var call7536 = callmethodChecked(call7535, "not", [0]);
                                            return call7536;
                                          };
                                          func7534.paramCounts = [0];
                                          obj7438.methods["canInherit"] = func7534;
                                          func7534.definitionLine = 1293;
                                          func7534.definitionModule = "ast";
                                          var func7537 = function(argcv) {    // method canUse
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for canUse"));
                                            setModuleName("ast");
                                            // canUse is a simple accessor - elide try ... catch
                                            setLineNumber(1294);    // compilenode identifier
                                            return GraceTrue;
                                          };
                                          func7537.paramCounts = [0];
                                          obj7438.methods["canUse"] = func7537;
                                          func7537.definitionLine = 1294;
                                          func7537.definitionModule = "ast";
                                          var func7538 = function(argcv) {    // method isObject
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isObject"));
                                            setModuleName("ast");
                                            // isObject is a simple accessor - elide try ... catch
                                            setLineNumber(1295);    // compilenode identifier
                                            return GraceTrue;
                                          };
                                          func7538.paramCounts = [0];
                                          obj7438.methods["isObject"] = func7538;
                                          func7538.definitionLine = 1295;
                                          func7538.definitionModule = "ast";
                                          var func7539 = function(argcv) {    // method accept(1)from(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_visitor = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                            var var_as = arguments[curarg];
                                            curarg++;
                                            if (argcv[1] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                            // Start argument checking
                                            curarg = 1;
                                            setLineNumber(1296);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                            curarg++;
                                            curarg++;
                                            // End argument checking
                                            setModuleName("ast");
                                            var if7540 = GraceDone;
                                            setLineNumber(1297);    // compilenode identifier
                                            var call7541 = callmethodChecked(var_visitor, "visitObject()up", [1, 1], this, var_as);
                                            if (Grace_isTrue(call7541)) {
                                              setLineNumber(1298);    // compilenode identifier
                                              var call7542 = callmethodChecked(var_as, "extend", [1], this);
                                              var var_newChain = call7542;
                                              var if7543 = GraceDone;
                                              setLineNumber(1299);    // compilenode call
                                              onSelf = true;
                                              var call7544 = callmethodChecked(this, "superclass", [0]);
                                              var opresult7547 = callmethodChecked(GraceFalse, "\u2260", [1], call7544);
                                              if (Grace_isTrue(opresult7547)) {
                                                setLineNumber(1300);    // compilenode call
                                                onSelf = true;
                                                var call7548 = callmethodChecked(this, "superclass", [0]);
                                                var call7549 = callmethodChecked(call7548, "accept()from", [1, 1], var_visitor, var_newChain);
                                                if7543 = call7549;
                                              }
                                              setLineNumber(1302);    // compilenode block
                                              var block7550 = new GraceBlock(this, 1302, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block7550.real = function(var_t) {
                                                setLineNumber(1302);    // compilenode identifier
                                                var call7551 = callmethodChecked(var_t, "accept()from", [1, 1], var_visitor, var_newChain);
                                                return call7551;
                                              };
                                              onSelf = true;
                                              var call7552 = callmethodChecked(this, "usedTraits", [0]);
                                              var call7553 = callmethodChecked(call7552, "do", [1], block7550);
                                              setLineNumber(1303);    // compilenode block
                                              var block7554 = new GraceBlock(this, 1303, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block7554.real = function(var_x) {
                                                setLineNumber(1303);    // compilenode identifier
                                                var call7555 = callmethodChecked(var_x, "accept()from", [1, 1], var_visitor, var_newChain);
                                                return call7555;
                                              };
                                              onSelf = true;
                                              var call7556 = callmethodChecked(this, "value", [0]);
                                              var call7557 = callmethodChecked(call7556, "do", [1], block7554);
                                              if7540 = call7557;
                                            }
                                            return if7540;
                                          };
                                          func7539.paramTypes = [];
                                          func7539.paramTypes.push([]);
                                          func7539.paramTypes.push([]);
                                          func7539.paramCounts = [1, 1];
                                          obj7438.methods["accept()from"] = func7539;
                                          func7539.definitionLine = 1296;
                                          func7539.definitionModule = "ast";
                                          var func7558 = function(argcv) {    // method nameString
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                            setModuleName("ast");
                                            var if7559 = GraceDone;
                                            setLineNumber(1307);    // compilenode string
                                            var string7560 = new GraceString("object");
                                            onSelf = true;
                                            var call7562 = callmethodChecked(this, "name", [0]);
                                            var opresult7564 = callmethodChecked(call7562, "==", [1], string7560);
                                            if (Grace_isTrue(opresult7564)) {
                                              setLineNumber(1308);    // compilenode string
                                              var string7565 = new GraceString("");
                                              onSelf = true;
                                              var call7567 = callmethodChecked(this, "line", [0]);
                                              var string7569 = new GraceString("object_on_line_");
                                              var opresult7571 = callmethodChecked(string7569, "++", [1], call7567);
                                              var opresult7573 = callmethodChecked(opresult7571, "++", [1], string7565);
                                              if7559 = opresult7573;
                                            } else {
                                              setLineNumber(1310);    // compilenode call
                                              onSelf = true;
                                              var call7574 = callmethodChecked(this, "name", [0]);
                                              if7559 = call7574;
                                            }
                                            return if7559;
                                          };
                                          func7558.paramCounts = [0];
                                          obj7438.methods["nameString"] = func7558;
                                          func7558.definitionLine = 1306;
                                          func7558.definitionModule = "ast";
                                          var func7575 = function(argcv) {    // method map(1)ancestors(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_blk = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                            var var_as = arguments[curarg];
                                            curarg++;
                                            if (argcv[1] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                            setModuleName("ast");
                                            setLineNumber(1314);    // compilenode call
                                            onSelf = true;
                                            var call7576 = callmethodChecked(this, "shallowCopy", [0]);
                                            var var_n = call7576;
                                            setLineNumber(1315);    // compilenode identifier
                                            var call7577 = callmethodChecked(var_as, "extend", [1], var_n);
                                            var var_newChain = call7577;
                                            setLineNumber(1316);    // compilenode call
                                            onSelf = true;
                                            var call7578 = callmethodChecked(this, "value", [0]);
                                            var call7579 = callmethodChecked(superDepth, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call7580 = callmethodChecked(call7579, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call7581 = callmethodChecked(call7580, "listMap()ancestors", [2, 1], call7578, var_blk, var_newChain);
                                            var call7582 = callmethodChecked(var_n, "value:=", [1], call7581);
                                            setLineNumber(1317);    // compilenode call
                                            onSelf = true;
                                            var call7583 = callmethodChecked(this, "superclass", [0]);
                                            var call7584 = callmethodChecked(superDepth, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call7585 = callmethodChecked(call7584, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call7586 = callmethodChecked(call7585, "maybeMap()ancestors", [2, 1], call7583, var_blk, var_newChain);
                                            var call7587 = callmethodChecked(var_n, "superclass:=", [1], call7586);
                                            setLineNumber(1318);    // compilenode call
                                            onSelf = true;
                                            var call7588 = callmethodChecked(this, "usedTraits", [0]);
                                            var call7589 = callmethodChecked(superDepth, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call7590 = callmethodChecked(call7589, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call7591 = callmethodChecked(call7590, "listMap()ancestors", [2, 1], call7588, var_blk, var_newChain);
                                            var call7592 = callmethodChecked(var_n, "usedTraits:=", [1], call7591);
                                            setLineNumber(1319);    // compilenode identifier
                                            var call7593 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                            return call7593;
                                          };
                                          func7575.paramCounts = [1, 1];
                                          obj7438.methods["map()ancestors"] = func7575;
                                          func7575.definitionLine = 1313;
                                          func7575.definitionModule = "ast";
                                          var func7594 = function(argcv) {    // method pretty(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_depth__39__ = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                            setModuleName("ast");
                                            setLineNumber(1322);    // compilenode identifier
                                            var var_depth = var_depth__39__;
                                            setLineNumber(1323);    // compilenode string
                                            var string7595 = new GraceString("");
                                            var var_spc = string7595;
                                            setLineNumber(1324);    // compilenode num
                                            var opresult7598 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                            var block7599 = new GraceBlock(this, 1324, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7599.real = function(var_i) {
                                              setLineNumber(1325);    // compilenode string
                                              var string7600 = new GraceString("  ");
                                              var opresult7603 = callmethodChecked(var_spc, "++", [1], string7600);
                                              var_spc = opresult7603;
                                              return GraceDone;
                                            };
                                            var call7604 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult7598, block7599);
                                            setLineNumber(1327);    // compilenode identifier
                                            var call7605 = callmethodsuper(this, "pretty", [1], var_depth);
                                            var var_s = call7605;
                                            setLineNumber(1328);    // compilenode string
                                            var string7606 = new GraceString("");
                                            onSelf = true;
                                            var call7608 = callmethodChecked(this, "name", [0]);
                                            var string7610 = new GraceString("Name: ");
                                            var string7613 = new GraceString("\n");
                                            var string7616 = new GraceString("");
                                            var opresult7618 = callmethodChecked(string7616, "++", [1], var_s);
                                            var opresult7620 = callmethodChecked(opresult7618, "++", [1], string7613);
                                            var opresult7622 = callmethodChecked(opresult7620, "++", [1], var_spc);
                                            var opresult7624 = callmethodChecked(opresult7622, "++", [1], string7610);
                                            var opresult7626 = callmethodChecked(opresult7624, "++", [1], call7608);
                                            var opresult7628 = callmethodChecked(opresult7626, "++", [1], string7606);
                                            var_s = opresult7628;
                                            var if7629 = GraceDone;
                                            setLineNumber(1329);    // compilenode call
                                            onSelf = true;
                                            var call7630 = callmethodChecked(this, "superclass", [0]);
                                            var opresult7633 = callmethodChecked(GraceFalse, "\u2260", [1], call7630);
                                            if (Grace_isTrue(opresult7633)) {
                                              setLineNumber(1331);    // compilenode identifier
                                              var opresult7636 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                              onSelf = true;
                                              var call7637 = callmethodChecked(this, "superclass", [0]);
                                              var call7638 = callmethodChecked(call7637, "pretty", [1], opresult7636);
                                              setLineNumber(1330);    // compilenode string
                                              var string7640 = new GraceString("Superclass: ");
                                              var string7643 = new GraceString("\n");
                                              var opresult7646 = callmethodChecked(var_s, "++", [1], string7643);
                                              var opresult7648 = callmethodChecked(opresult7646, "++", [1], var_spc);
                                              var opresult7650 = callmethodChecked(opresult7648, "++", [1], string7640);
                                              var opresult7652 = callmethodChecked(opresult7650, "++", [1], call7638);
                                              var_s = opresult7652;
                                              if7629 = GraceDone;
                                            }
                                            var if7653 = GraceDone;
                                            setLineNumber(1333);    // compilenode call
                                            onSelf = true;
                                            var call7654 = callmethodChecked(this, "usedTraits", [0]);
                                            var call7655 = callmethodChecked(call7654, "isEmpty", [0]);
                                            var call7656 = callmethodChecked(call7655, "not", [0]);
                                            if (Grace_isTrue(call7656)) {
                                              setLineNumber(1334);    // compilenode string
                                              var string7657 = new GraceString("Traits:");
                                              var string7660 = new GraceString("\n");
                                              var opresult7663 = callmethodChecked(var_s, "++", [1], string7660);
                                              var opresult7665 = callmethodChecked(opresult7663, "++", [1], var_spc);
                                              var opresult7667 = callmethodChecked(opresult7665, "++", [1], string7657);
                                              var_s = opresult7667;
                                              setLineNumber(1335);    // compilenode block
                                              var block7668 = new GraceBlock(this, 1335, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block7668.real = function(var_t) {
                                                setLineNumber(1336);    // compilenode string
                                                var string7669 = new GraceString("");
                                                var opresult7673 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                var call7674 = callmethodChecked(var_t, "pretty", [1], opresult7673);
                                                var string7676 = new GraceString("  ");
                                                var string7679 = new GraceString("\n");
                                                var string7682 = new GraceString("");
                                                var opresult7684 = callmethodChecked(string7682, "++", [1], var_s);
                                                var opresult7686 = callmethodChecked(opresult7684, "++", [1], string7679);
                                                var opresult7688 = callmethodChecked(opresult7686, "++", [1], var_spc);
                                                var opresult7690 = callmethodChecked(opresult7688, "++", [1], string7676);
                                                var opresult7692 = callmethodChecked(opresult7690, "++", [1], call7674);
                                                var opresult7694 = callmethodChecked(opresult7692, "++", [1], string7669);
                                                var_s = opresult7694;
                                                return GraceDone;
                                              };
                                              setLineNumber(1335);    // compilenode call
                                              onSelf = true;
                                              var call7695 = callmethodChecked(this, "usedTraits", [0]);
                                              var call7696 = callmethodChecked(call7695, "do", [1], block7668);
                                              if7653 = call7696;
                                            }
                                            setLineNumber(1339);    // compilenode block
                                            var block7697 = new GraceBlock(this, 1339, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7697.real = function(var_x) {
                                              setLineNumber(1340);    // compilenode identifier
                                              var opresult7700 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                              var call7701 = callmethodChecked(var_x, "pretty", [1], opresult7700);
                                              var string7704 = new GraceString("\n");
                                              var opresult7707 = callmethodChecked(var_s, "++", [1], string7704);
                                              var opresult7709 = callmethodChecked(opresult7707, "++", [1], var_spc);
                                              var opresult7711 = callmethodChecked(opresult7709, "++", [1], call7701);
                                              var_s = opresult7711;
                                              return GraceDone;
                                            };
                                            setLineNumber(1339);    // compilenode call
                                            onSelf = true;
                                            var call7712 = callmethodChecked(this, "value", [0]);
                                            var call7713 = callmethodChecked(call7712, "do", [1], block7697);
                                            setLineNumber(1342);    // compilenode identifier
                                            return var_s;
                                          };
                                          func7594.paramCounts = [1];
                                          obj7438.methods["pretty"] = func7594;
                                          func7594.definitionLine = 1321;
                                          func7594.definitionModule = "ast";
                                          var func7714 = function(argcv) {    // method toGrace(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_depth = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                            // Start argument checking
                                            curarg = 1;
                                            setLineNumber(1344);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                            curarg++;
                                            // End argument checking
                                            setModuleName("ast");
                                            setLineNumber(1345);    // compilenode string
                                            var string7715 = new GraceString("");
                                            var var_spc = string7715;
                                            setLineNumber(1346);    // compilenode identifier
                                            var diff7718 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                            var opresult7721 = callmethodChecked(new GraceNum(0), "..", [1], diff7718);
                                            var block7722 = new GraceBlock(this, 1346, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7722.real = function(var_i) {
                                              setLineNumber(1347);    // compilenode string
                                              var string7723 = new GraceString("    ");
                                              var opresult7726 = callmethodChecked(var_spc, "++", [1], string7723);
                                              var_spc = opresult7726;
                                              return GraceDone;
                                            };
                                            var call7727 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult7721, block7722);
                                            setLineNumber(1349);    // compilenode string
                                            var string7728 = new GraceString("object {");
                                            var var_s = string7728;
                                            var if7729 = GraceDone;
                                            setLineNumber(1350);    // compilenode call
                                            onSelf = true;
                                            var call7730 = callmethodChecked(this, "inTrait", [0]);
                                            if (Grace_isTrue(call7730)) {
                                              var string7731 = new GraceString("   // trait");
                                              var opresult7734 = callmethodChecked(var_s, "++", [1], string7731);
                                              var_s = opresult7734;
                                              if7729 = GraceDone;
                                            }
                                            var if7735 = GraceDone;
                                            setLineNumber(1351);    // compilenode call
                                            onSelf = true;
                                            var call7736 = callmethodChecked(this, "inClass", [0]);
                                            if (Grace_isTrue(call7736)) {
                                              var string7737 = new GraceString("   // class");
                                              var opresult7740 = callmethodChecked(var_s, "++", [1], string7737);
                                              var_s = opresult7740;
                                              if7735 = GraceDone;
                                            }
                                            var if7741 = GraceDone;
                                            setLineNumber(1352);    // compilenode call
                                            onSelf = true;
                                            var call7742 = callmethodChecked(this, "superclass", [0]);
                                            var opresult7745 = callmethodChecked(GraceFalse, "\u2260", [1], call7742);
                                            if (Grace_isTrue(opresult7745)) {
                                              setLineNumber(1353);    // compilenode identifier
                                              var opresult7748 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                              onSelf = true;
                                              var call7749 = callmethodChecked(this, "superclass", [0]);
                                              var call7750 = callmethodChecked(call7749, "toGrace", [1], opresult7748);
                                              var string7752 = new GraceString("\n");
                                              var opresult7755 = callmethodChecked(var_s, "++", [1], string7752);
                                              var opresult7757 = callmethodChecked(opresult7755, "++", [1], call7750);
                                              var_s = opresult7757;
                                              if7741 = GraceDone;
                                            }
                                            setLineNumber(1355);    // compilenode block
                                            var block7758 = new GraceBlock(this, 1355, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7758.real = function(var_t) {
                                              setLineNumber(1355);    // compilenode identifier
                                              var opresult7761 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                              var call7762 = callmethodChecked(var_t, "toGrace", [1], opresult7761);
                                              var string7764 = new GraceString("\n");
                                              var opresult7767 = callmethodChecked(var_s, "++", [1], string7764);
                                              var opresult7769 = callmethodChecked(opresult7767, "++", [1], call7762);
                                              var_s = opresult7769;
                                              return GraceDone;
                                            };
                                            onSelf = true;
                                            var call7770 = callmethodChecked(this, "usedTraits", [0]);
                                            var call7771 = callmethodChecked(call7770, "do", [1], block7758);
                                            setLineNumber(1356);    // compilenode block
                                            var block7772 = new GraceBlock(this, 1356, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7772.real = function(var_x) {
                                              setLineNumber(1357);    // compilenode identifier
                                              var opresult7775 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                              var call7776 = callmethodChecked(var_x, "toGrace", [1], opresult7775);
                                              var string7778 = new GraceString("    ");
                                              var string7781 = new GraceString("\n");
                                              var opresult7784 = callmethodChecked(var_s, "++", [1], string7781);
                                              var opresult7786 = callmethodChecked(opresult7784, "++", [1], var_spc);
                                              var opresult7788 = callmethodChecked(opresult7786, "++", [1], string7778);
                                              var opresult7790 = callmethodChecked(opresult7788, "++", [1], call7776);
                                              var_s = opresult7790;
                                              return GraceDone;
                                            };
                                            setLineNumber(1356);    // compilenode call
                                            onSelf = true;
                                            var call7791 = callmethodChecked(this, "value", [0]);
                                            var call7792 = callmethodChecked(call7791, "do", [1], block7772);
                                            setLineNumber(1359);    // compilenode string
                                            var string7793 = new GraceString("}");
                                            var string7796 = new GraceString("\n");
                                            var opresult7799 = callmethodChecked(var_s, "++", [1], string7796);
                                            var opresult7801 = callmethodChecked(opresult7799, "++", [1], var_spc);
                                            var opresult7803 = callmethodChecked(opresult7801, "++", [1], string7793);
                                            var_s = opresult7803;
                                            setLineNumber(1360);    // return value
                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method toGrace(1) does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            return var_s;
                                          };
                                          func7714.paramTypes = [];
                                          func7714.paramTypes.push([type_Number, "depth"]);
                                          func7714.paramCounts = [1];
                                          obj7438.methods["toGrace"] = func7714;
                                          func7714.definitionLine = 1344;
                                          func7714.definitionModule = "ast";
                                          var func7804 = function(argcv) {    // method shallowCopy
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                            setModuleName("ast");
                                            setLineNumber(1363);    // compilenode identifier
                                            var call7805 = callmethodChecked(var_objectNode, "new", [2], var_emptySeq, GraceFalse);
                                            var call7806 = callmethodChecked(call7805, "shallowCopyFieldsFrom", [1], this);
                                            return call7806;
                                          };
                                          func7804.paramCounts = [0];
                                          obj7438.methods["shallowCopy"] = func7804;
                                          func7804.definitionLine = 1362;
                                          func7804.definitionModule = "ast";
                                          var func7807 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_other = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                            setModuleName("ast");
                                            setLineNumber(1366);    // compilenode identifier
                                            var call7808 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                            setLineNumber(1367);    // compilenode identifier
                                            var call7809 = callmethodChecked(var_other, "name", [0]);
                                            onSelf = true;
                                            var call7810 = callmethodChecked(this, "name:=", [1], call7809);
                                            setLineNumber(1368);    // compilenode identifier
                                            var call7811 = callmethodChecked(var_other, "value", [0]);
                                            onSelf = true;
                                            var call7812 = callmethodChecked(this, "value:=", [1], call7811);
                                            setLineNumber(1369);    // compilenode identifier
                                            var call7813 = callmethodChecked(var_other, "superclass", [0]);
                                            onSelf = true;
                                            var call7814 = callmethodChecked(this, "superclass:=", [1], call7813);
                                            setLineNumber(1370);    // compilenode identifier
                                            var call7815 = callmethodChecked(var_other, "usedTraits", [0]);
                                            onSelf = true;
                                            var call7816 = callmethodChecked(this, "usedTraits:=", [1], call7815);
                                            setLineNumber(1371);    // compilenode identifier
                                            var call7817 = callmethodChecked(var_other, "inClass", [0]);
                                            onSelf = true;
                                            var call7818 = callmethodChecked(this, "inClass:=", [1], call7817);
                                            setLineNumber(1372);    // compilenode identifier
                                            var call7819 = callmethodChecked(var_other, "inTrait", [0]);
                                            onSelf = true;
                                            var call7820 = callmethodChecked(this, "inTrait:=", [1], call7819);
                                            setLineNumber(1373);    // compilenode identifier
                                            var call7821 = callmethodChecked(var_other, "annotations", [0]);
                                            onSelf = true;
                                            var call7822 = callmethodChecked(this, "annotations:=", [1], call7821);
                                            setLineNumber(1374);    // compilenode identifier
                                            return this;
                                          };
                                          func7807.paramCounts = [1];
                                          obj7438.methods["shallowCopyFieldsFrom"] = func7807;
                                          func7807.definitionLine = 1365;
                                          func7807.definitionModule = "ast";
                                          var func7823 = function(argcv) {    // method asString
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                            setModuleName("ast");
                                            setLineNumber(1377);    // compilenode string
                                            var string7824 = new GraceString("");
                                            onSelf = true;
                                            var call7826 = callmethodChecked(this, "nameString", [0]);
                                            var string7828 = new GraceString("object ");
                                            var opresult7830 = callmethodChecked(string7828, "++", [1], call7826);
                                            var opresult7832 = callmethodChecked(opresult7830, "++", [1], string7824);
                                            return opresult7832;
                                          };
                                          func7823.paramCounts = [0];
                                          obj7438.methods["asString"] = func7823;
                                          func7823.definitionLine = 1376;
                                          func7823.definitionModule = "ast";
                                          setLineNumber(1216);    // compilenode call
                                          var call7833 = callmethodChecked(superDepth, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call7834 = callmethodChecked(call7833, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call7835 = callmethodChecked(call7834, "baseNode()object", [0, 1], this);
                                          obj7438.superobj = call7835;
                                          if (call7835.data) obj7438.data = call7835.data;
                                          if (call7835.hasOwnProperty('_value'))
                                              obj7438._value = call7835._value;
                                          setLineNumber(1217);    // compilenode string
                                          var string7836 = new GraceString("object");
                                          obj7438.data["kind"] = string7836;
                                          var reader_ast_kind7837 = function() {
                                            return this.data["kind"];
                                          };
                                          reader_ast_kind7837.def = true;
                                          obj7438.methods["kind"] = reader_ast_kind7837;
                                          setLineNumber(1218);    // compilenode identifier
                                          obj7438.data["value"] = var_b;
                                          var reader_ast_value7838 = function() {
                                            return this.data["value"];
                                          };
                                          obj7438.methods["value"] = reader_ast_value7838;
                                          obj7438.data["value"] = var_b;
                                          var writer_ast_value7838 = function(argcv, o) {
                                            this.data["value"] = o;
                                            return GraceDone;
                                          };
                                          obj7438.methods["value:="] = writer_ast_value7838;
                                          obj7438.mutable = true;
                                          setLineNumber(1219);    // compilenode identifier
                                          obj7438.data["superclass"] = var_superclass__39__;
                                          var reader_ast_superclass7839 = function() {
                                            return this.data["superclass"];
                                          };
                                          obj7438.methods["superclass"] = reader_ast_superclass7839;
                                          obj7438.data["superclass"] = var_superclass__39__;
                                          var writer_ast_superclass7839 = function(argcv, o) {
                                            this.data["superclass"] = o;
                                            return GraceDone;
                                          };
                                          obj7438.methods["superclass:="] = writer_ast_superclass7839;
                                          obj7438.mutable = true;
                                          setLineNumber(1220);    // compilenode array
                                          var array7840 = new PrimitiveGraceList([]);
                                          obj7438.data["usedTraits"] = array7840;
                                          var reader_ast_usedTraits7841 = function() {
                                            return this.data["usedTraits"];
                                          };
                                          obj7438.methods["usedTraits"] = reader_ast_usedTraits7841;
                                          obj7438.data["usedTraits"] = array7840;
                                          var writer_ast_usedTraits7841 = function(argcv, o) {
                                            this.data["usedTraits"] = o;
                                            return GraceDone;
                                          };
                                          obj7438.methods["usedTraits:="] = writer_ast_usedTraits7841;
                                          obj7438.mutable = true;
                                          setLineNumber(1221);    // compilenode string
                                          var string7842 = new GraceString("object");
                                          obj7438.data["name"] = string7842;
                                          var reader_ast_name7843 = function() {
                                            return this.data["name"];
                                          };
                                          obj7438.methods["name"] = reader_ast_name7843;
                                          obj7438.data["name"] = string7842;
                                          var writer_ast_name7843 = function(argcv, o) {
                                            this.data["name"] = o;
                                            return GraceDone;
                                          };
                                          obj7438.methods["name:="] = writer_ast_name7843;
                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], string7842)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("initial value of var 'name' is not of type String"));
                                          obj7438.mutable = true;
                                          setLineNumber(1222);    // compilenode identifier
                                          obj7438.data["inClass"] = GraceFalse;
                                          var reader_ast_inClass7844 = function() {
                                            return this.data["inClass"];
                                          };
                                          obj7438.methods["inClass"] = reader_ast_inClass7844;
                                          obj7438.data["inClass"] = GraceFalse;
                                          var writer_ast_inClass7844 = function(argcv, o) {
                                            this.data["inClass"] = o;
                                            return GraceDone;
                                          };
                                          obj7438.methods["inClass:="] = writer_ast_inClass7844;
                                          obj7438.mutable = true;
                                          setLineNumber(1223);    // compilenode identifier
                                          obj7438.data["inTrait"] = GraceFalse;
                                          var reader_ast_inTrait7845 = function() {
                                            return this.data["inTrait"];
                                          };
                                          obj7438.methods["inTrait"] = reader_ast_inTrait7845;
                                          obj7438.data["inTrait"] = GraceFalse;
                                          var writer_ast_inTrait7845 = function(argcv, o) {
                                            this.data["inTrait"] = o;
                                            return GraceDone;
                                          };
                                          obj7438.methods["inTrait:="] = writer_ast_inTrait7845;
                                          obj7438.mutable = true;
                                          setLineNumber(1224);    // compilenode identifier
                                          obj7438.data["myLocalNames"] = GraceFalse;
                                          var reader_ast_myLocalNames7846 = function() {
                                            return this.data["myLocalNames"];
                                          };
                                          obj7438.methods["myLocalNames"] = reader_ast_myLocalNames7846;
                                          obj7438.data["myLocalNames"] = GraceFalse;
                                          var writer_ast_myLocalNames7846 = function(argcv, o) {
                                            this.data["myLocalNames"] = o;
                                            return GraceDone;
                                          };
                                          obj7438.methods["myLocalNames:="] = writer_ast_myLocalNames7846;
                                          reader_ast_myLocalNames7846.confidential = true;
                                          writer_ast_myLocalNames7846.confidential = true;
                                          obj7438.mutable = true;
                                          setLineNumber(1225);    // compilenode array
                                          var array7847 = new PrimitiveGraceList([]);
                                          obj7438.data["annotations"] = array7847;
                                          var reader_ast_annotations7848 = function() {
                                            return this.data["annotations"];
                                          };
                                          obj7438.methods["annotations"] = reader_ast_annotations7848;
                                          obj7438.data["annotations"] = array7847;
                                          var writer_ast_annotations7848 = function(argcv, o) {
                                            this.data["annotations"] = o;
                                            return GraceDone;
                                          };
                                          obj7438.methods["annotations:="] = writer_ast_annotations7848;
                                          obj7438.mutable = true;
                                          superDepth = origSuperDepth;
                                        };
                                        obj_init_7438.apply(inheritingObject, []);
                                        return obj7438;
                                        };
                                        obj7017.methods["new()object"] = func7437;
                                      superDepth = origSuperDepth;
                                    };
                                    obj_init_7017.apply(obj7017, []);
                                    var var_objectNode = obj7017;
                                    setLineNumber(1216);    // compilenode method
                                    var func7849 = function(argcv) {    // method objectNode
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for objectNode"));
                                      setModuleName("ast");
                                      // objectNode is a simple accessor - elide try ... catch
                                      setLineNumber(1205);    // compilenode identifier
                                      return var_objectNode;
                                    };
                                    func7849.paramCounts = [0];
                                    this.methods["objectNode"] = func7849;
                                    func7849.definitionLine = 1216;
                                    func7849.definitionModule = "ast";
                                    this.methods["objectNode"].debug = "def";
                                    setLineNumber(1381);    // compilenode object
                                    var obj7850 = Grace_allocObject(GraceObject, "arrayNode");
                                    obj7850.definitionModule = "ast";
                                    obj7850.definitionLine = 1381;
                                    obj7850.outer = this;
                                    var reader_ast_outer7851 = function() {
                                      return this.outer;
                                    };
                                    obj7850.methods["outer"] = reader_ast_outer7851;
                                    var obj_init_7850 = function() {
                                      var origSuperDepth = superDepth;
                                      superDepth = obj7850;
                                      var func7852 = function(argcv) {    // method new(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_values = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(1)"));
                                        setModuleName("ast");
                                        setLineNumber(1382);    // compilenode object
                                        var obj7853 = Grace_allocObject(null, "arrayNode.new");
                                        obj7853.definitionModule = "ast";
                                        obj7853.definitionLine = 1382;
                                        obj7853.outer = this;
                                        var reader_ast_outer7854 = function() {
                                          return this.outer;
                                        };
                                        obj7853.methods["outer"] = reader_ast_outer7854;
                                        var obj_init_7853 = function() {
                                          var origSuperDepth = superDepth;
                                          superDepth = obj7853;
                                          var func7855 = function(argcv) {    // method accept(1)from(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_visitor = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                            var var_as = arguments[curarg];
                                            curarg++;
                                            if (argcv[1] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                            // Start argument checking
                                            curarg = 1;
                                            setLineNumber(1386);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                            curarg++;
                                            curarg++;
                                            // End argument checking
                                            setModuleName("ast");
                                            var if7856 = GraceDone;
                                            setLineNumber(1387);    // compilenode identifier
                                            var call7857 = callmethodChecked(var_visitor, "visitArray()up", [1, 1], this, var_as);
                                            if (Grace_isTrue(call7857)) {
                                              setLineNumber(1388);    // compilenode identifier
                                              var call7858 = callmethodChecked(var_as, "extend", [1], this);
                                              var var_newChain = call7858;
                                              setLineNumber(1389);    // compilenode call
                                              onSelf = true;
                                              var call7859 = callmethodChecked(this, "value", [0]);
                                              var block7860 = new GraceBlock(this, 1389, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block7860.real = function(var_ax) {
                                                setLineNumber(1390);    // compilenode identifier
                                                var call7861 = callmethodChecked(var_ax, "accept()from", [1, 1], var_visitor, var_newChain);
                                                return call7861;
                                              };
                                              var call7862 = callmethodChecked(var_prelude, "for()do", [1, 1], call7859, block7860);
                                              if7856 = call7862;
                                            }
                                            return if7856;
                                          };
                                          func7855.paramTypes = [];
                                          func7855.paramTypes.push([]);
                                          func7855.paramTypes.push([]);
                                          func7855.paramCounts = [1, 1];
                                          obj7853.methods["accept()from"] = func7855;
                                          func7855.definitionLine = 1386;
                                          func7855.definitionModule = "ast";
                                          var func7863 = function(argcv) {    // method map(1)ancestors(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_blk = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                            var var_as = arguments[curarg];
                                            curarg++;
                                            if (argcv[1] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                            setModuleName("ast");
                                            setLineNumber(1395);    // compilenode call
                                            onSelf = true;
                                            var call7864 = callmethodChecked(this, "shallowCopy", [0]);
                                            var var_n = call7864;
                                            setLineNumber(1396);    // compilenode identifier
                                            var call7865 = callmethodChecked(var_as, "extend", [1], var_n);
                                            var var_newChain = call7865;
                                            setLineNumber(1397);    // compilenode call
                                            onSelf = true;
                                            var call7866 = callmethodChecked(this, "value", [0]);
                                            var call7867 = callmethodChecked(superDepth, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call7868 = callmethodChecked(call7867, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call7869 = callmethodChecked(call7868, "listMap()ancestors", [2, 1], call7866, var_blk, var_newChain);
                                            var call7870 = callmethodChecked(var_n, "value:=", [1], call7869);
                                            setLineNumber(1398);    // compilenode identifier
                                            var call7871 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                            return call7871;
                                          };
                                          func7863.paramCounts = [1, 1];
                                          obj7853.methods["map()ancestors"] = func7863;
                                          func7863.definitionLine = 1394;
                                          func7863.definitionModule = "ast";
                                          var func7872 = function(argcv) {    // method pretty(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_depth = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                            setModuleName("ast");
                                            setLineNumber(1401);    // compilenode string
                                            var string7873 = new GraceString("");
                                            var var_spc = string7873;
                                            setLineNumber(1402);    // compilenode num
                                            var opresult7876 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                            var block7877 = new GraceBlock(this, 1402, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7877.real = function(var_ai) {
                                              setLineNumber(1403);    // compilenode string
                                              var string7878 = new GraceString("  ");
                                              var opresult7881 = callmethodChecked(var_spc, "++", [1], string7878);
                                              var_spc = opresult7881;
                                              return GraceDone;
                                            };
                                            var call7882 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult7876, block7877);
                                            setLineNumber(1405);    // compilenode identifier
                                            var call7883 = callmethodsuper(this, "pretty", [1], var_depth);
                                            var var_s = call7883;
                                            setLineNumber(1406);    // compilenode call
                                            onSelf = true;
                                            var call7884 = callmethodChecked(this, "value", [0]);
                                            var block7885 = new GraceBlock(this, 1406, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7885.real = function(var_ax) {
                                              setLineNumber(1407);    // compilenode identifier
                                              var opresult7888 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                              var call7889 = callmethodChecked(var_ax, "pretty", [1], opresult7888);
                                              var string7892 = new GraceString("\n");
                                              var opresult7895 = callmethodChecked(var_s, "++", [1], string7892);
                                              var opresult7897 = callmethodChecked(opresult7895, "++", [1], var_spc);
                                              var opresult7899 = callmethodChecked(opresult7897, "++", [1], call7889);
                                              var_s = opresult7899;
                                              return GraceDone;
                                            };
                                            var call7900 = callmethodChecked(var_prelude, "for()do", [1, 1], call7884, block7885);
                                            setLineNumber(1409);    // compilenode identifier
                                            return var_s;
                                          };
                                          func7872.paramCounts = [1];
                                          obj7853.methods["pretty"] = func7872;
                                          func7872.definitionLine = 1400;
                                          func7872.definitionModule = "ast";
                                          var func7901 = function(argcv) {    // method toGrace(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_depth = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                            // Start argument checking
                                            curarg = 1;
                                            setLineNumber(1411);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                            curarg++;
                                            // End argument checking
                                            setModuleName("ast");
                                            setLineNumber(1412);    // compilenode string
                                            var string7902 = new GraceString("[");
                                            var var_s = string7902;
                                            setLineNumber(1413);    // compilenode call
                                            onSelf = true;
                                            var call7903 = callmethodChecked(this, "value", [0]);
                                            var call7904 = callmethodChecked(call7903, "indices", [0]);
                                            var block7905 = new GraceBlock(this, 1413, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block7905.real = function(var_i) {
                                              setLineNumber(1414);    // compilenode call
                                              onSelf = true;
                                              var call7906 = callmethodChecked(this, "value", [0]);
                                              var call7907 = callmethodChecked(call7906, "at", [1], var_i);
                                              var call7908 = callmethodChecked(call7907, "toGrace", [1], new GraceNum(0));
                                              var opresult7911 = callmethodChecked(var_s, "++", [1], call7908);
                                              var_s = opresult7911;
                                              var if7912 = GraceDone;
                                              setLineNumber(1415);    // compilenode call
                                              onSelf = true;
                                              var call7913 = callmethodChecked(this, "value", [0]);
                                              var call7914 = callmethodChecked(call7913, "size", [0]);
                                              var opresult7917 = callmethodChecked(var_i, "<", [1], call7914);
                                              if (Grace_isTrue(opresult7917)) {
                                                setLineNumber(1416);    // compilenode string
                                                var string7918 = new GraceString(", ");
                                                var opresult7921 = callmethodChecked(var_s, "++", [1], string7918);
                                                var_s = opresult7921;
                                                if7912 = GraceDone;
                                              }
                                              return if7912;
                                            };
                                            var call7922 = callmethodChecked(var_prelude, "for()do", [1, 1], call7904, block7905);
                                            setLineNumber(1419);    // compilenode string
                                            var string7923 = new GraceString("]");
                                            var opresult7926 = callmethodChecked(var_s, "++", [1], string7923);
                                            var_s = opresult7926;
                                            setLineNumber(1420);    // return value
                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method toGrace(1) does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            return var_s;
                                          };
                                          func7901.paramTypes = [];
                                          func7901.paramTypes.push([type_Number, "depth"]);
                                          func7901.paramCounts = [1];
                                          obj7853.methods["toGrace"] = func7901;
                                          func7901.definitionLine = 1411;
                                          func7901.definitionModule = "ast";
                                          var func7927 = function(argcv) {    // method shallowCopy
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                            setModuleName("ast");
                                            setLineNumber(1423);    // compilenode identifier
                                            var call7928 = callmethodChecked(var_arrayNode, "new", [1], var_emptySeq);
                                            var call7929 = callmethodChecked(call7928, "shallowCopyFieldsFrom", [1], this);
                                            return call7929;
                                          };
                                          func7927.paramCounts = [0];
                                          obj7853.methods["shallowCopy"] = func7927;
                                          func7927.definitionLine = 1422;
                                          func7927.definitionModule = "ast";
                                          setLineNumber(1383);    // compilenode call
                                          var call7930 = callmethodChecked(superDepth, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call7931 = callmethodChecked(call7930, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call7932 = callmethodChecked(call7931, "baseNode()object", [0, 1], this);
                                          obj7853.superobj = call7932;
                                          if (call7932.data) obj7853.data = call7932.data;
                                          if (call7932.hasOwnProperty('_value'))
                                              obj7853._value = call7932._value;
                                          setLineNumber(1384);    // compilenode string
                                          var string7933 = new GraceString("array");
                                          obj7853.data["kind"] = string7933;
                                          var reader_ast_kind7934 = function() {
                                            return this.data["kind"];
                                          };
                                          reader_ast_kind7934.def = true;
                                          obj7853.methods["kind"] = reader_ast_kind7934;
                                          setLineNumber(1385);    // compilenode identifier
                                          obj7853.data["value"] = var_values;
                                          var reader_ast_value7935 = function() {
                                            return this.data["value"];
                                          };
                                          obj7853.methods["value"] = reader_ast_value7935;
                                          obj7853.data["value"] = var_values;
                                          var writer_ast_value7935 = function(argcv, o) {
                                            this.data["value"] = o;
                                            return GraceDone;
                                          };
                                          obj7853.methods["value:="] = writer_ast_value7935;
                                          obj7853.mutable = true;
                                          superDepth = origSuperDepth;
                                        };
                                        obj_init_7853.apply(obj7853, []);
                                        return obj7853;
                                      };
                                      func7852.paramCounts = [1];
                                      obj7850.methods["new"] = func7852;
                                      func7852.definitionLine = 1382;
                                      func7852.definitionModule = "ast";
                                        var func7936 = function(argcv) {    // method new(1     )()object
                                          var curarg = 1;
                                          var var_values = arguments[curarg];
                                          curarg++;
                                          var inheritingObject = arguments[curarg++];
                                          // Start argument processing
                                          curarg = 1;
                                          curarg++;
                                          // End argument processing
                                          setModuleName("ast");
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var obj7937 = Grace_allocObject(null, "new");
                                          obj7937.definitionModule = "ast";
                                          obj7937.definitionLine = 1382;
                                          var inho7937 = inheritingObject;
                                          while (inho7937.superobj) inho7937 = inho7937.superobj;
                                          inho7937.superobj = obj7937;
                                          obj7937.data = inheritingObject.data;
                                          if (inheritingObject.hasOwnProperty('_value'))
                                            obj7937._value = inheritingObject._value;
                                          obj7937.outer = this;
                                          var reader_ast_outer7938 = function() {
                                            return this.outer;
                                          };
                                          obj7937.methods["outer"] = reader_ast_outer7938;
                                          var obj_init_7937 = function() {
                                            var origSuperDepth = superDepth;
                                            superDepth = obj7937;
                                            var func7939 = function(argcv) {    // method accept(1)from(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_visitor = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                              var var_as = arguments[curarg];
                                              curarg++;
                                              if (argcv[1] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                              // Start argument checking
                                              curarg = 1;
                                              setLineNumber(1386);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                              curarg++;
                                              curarg++;
                                              // End argument checking
                                              setModuleName("ast");
                                              var if7940 = GraceDone;
                                              setLineNumber(1387);    // compilenode identifier
                                              var call7941 = callmethodChecked(var_visitor, "visitArray()up", [1, 1], this, var_as);
                                              if (Grace_isTrue(call7941)) {
                                                setLineNumber(1388);    // compilenode identifier
                                                var call7942 = callmethodChecked(var_as, "extend", [1], this);
                                                var var_newChain = call7942;
                                                setLineNumber(1389);    // compilenode call
                                                onSelf = true;
                                                var call7943 = callmethodChecked(this, "value", [0]);
                                                var block7944 = new GraceBlock(this, 1389, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block7944.real = function(var_ax) {
                                                  setLineNumber(1390);    // compilenode identifier
                                                  var call7945 = callmethodChecked(var_ax, "accept()from", [1, 1], var_visitor, var_newChain);
                                                  return call7945;
                                                };
                                                var call7946 = callmethodChecked(var_prelude, "for()do", [1, 1], call7943, block7944);
                                                if7940 = call7946;
                                              }
                                              return if7940;
                                            };
                                            func7939.paramTypes = [];
                                            func7939.paramTypes.push([]);
                                            func7939.paramTypes.push([]);
                                            func7939.paramCounts = [1, 1];
                                            obj7937.methods["accept()from"] = func7939;
                                            func7939.definitionLine = 1386;
                                            func7939.definitionModule = "ast";
                                            var func7947 = function(argcv) {    // method map(1)ancestors(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_blk = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                              var var_as = arguments[curarg];
                                              curarg++;
                                              if (argcv[1] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                              setModuleName("ast");
                                              setLineNumber(1395);    // compilenode call
                                              onSelf = true;
                                              var call7948 = callmethodChecked(this, "shallowCopy", [0]);
                                              var var_n = call7948;
                                              setLineNumber(1396);    // compilenode identifier
                                              var call7949 = callmethodChecked(var_as, "extend", [1], var_n);
                                              var var_newChain = call7949;
                                              setLineNumber(1397);    // compilenode call
                                              onSelf = true;
                                              var call7950 = callmethodChecked(this, "value", [0]);
                                              var call7951 = callmethodChecked(superDepth, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call7952 = callmethodChecked(call7951, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call7953 = callmethodChecked(call7952, "listMap()ancestors", [2, 1], call7950, var_blk, var_newChain);
                                              var call7954 = callmethodChecked(var_n, "value:=", [1], call7953);
                                              setLineNumber(1398);    // compilenode identifier
                                              var call7955 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                              return call7955;
                                            };
                                            func7947.paramCounts = [1, 1];
                                            obj7937.methods["map()ancestors"] = func7947;
                                            func7947.definitionLine = 1394;
                                            func7947.definitionModule = "ast";
                                            var func7956 = function(argcv) {    // method pretty(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_depth = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                              setModuleName("ast");
                                              setLineNumber(1401);    // compilenode string
                                              var string7957 = new GraceString("");
                                              var var_spc = string7957;
                                              setLineNumber(1402);    // compilenode num
                                              var opresult7960 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                              var block7961 = new GraceBlock(this, 1402, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block7961.real = function(var_ai) {
                                                setLineNumber(1403);    // compilenode string
                                                var string7962 = new GraceString("  ");
                                                var opresult7965 = callmethodChecked(var_spc, "++", [1], string7962);
                                                var_spc = opresult7965;
                                                return GraceDone;
                                              };
                                              var call7966 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult7960, block7961);
                                              setLineNumber(1405);    // compilenode identifier
                                              var call7967 = callmethodsuper(this, "pretty", [1], var_depth);
                                              var var_s = call7967;
                                              setLineNumber(1406);    // compilenode call
                                              onSelf = true;
                                              var call7968 = callmethodChecked(this, "value", [0]);
                                              var block7969 = new GraceBlock(this, 1406, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block7969.real = function(var_ax) {
                                                setLineNumber(1407);    // compilenode identifier
                                                var opresult7972 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                var call7973 = callmethodChecked(var_ax, "pretty", [1], opresult7972);
                                                var string7976 = new GraceString("\n");
                                                var opresult7979 = callmethodChecked(var_s, "++", [1], string7976);
                                                var opresult7981 = callmethodChecked(opresult7979, "++", [1], var_spc);
                                                var opresult7983 = callmethodChecked(opresult7981, "++", [1], call7973);
                                                var_s = opresult7983;
                                                return GraceDone;
                                              };
                                              var call7984 = callmethodChecked(var_prelude, "for()do", [1, 1], call7968, block7969);
                                              setLineNumber(1409);    // compilenode identifier
                                              return var_s;
                                            };
                                            func7956.paramCounts = [1];
                                            obj7937.methods["pretty"] = func7956;
                                            func7956.definitionLine = 1400;
                                            func7956.definitionModule = "ast";
                                            var func7985 = function(argcv) {    // method toGrace(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_depth = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                              // Start argument checking
                                              curarg = 1;
                                              setLineNumber(1411);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                              curarg++;
                                              // End argument checking
                                              setModuleName("ast");
                                              setLineNumber(1412);    // compilenode string
                                              var string7986 = new GraceString("[");
                                              var var_s = string7986;
                                              setLineNumber(1413);    // compilenode call
                                              onSelf = true;
                                              var call7987 = callmethodChecked(this, "value", [0]);
                                              var call7988 = callmethodChecked(call7987, "indices", [0]);
                                              var block7989 = new GraceBlock(this, 1413, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block7989.real = function(var_i) {
                                                setLineNumber(1414);    // compilenode call
                                                onSelf = true;
                                                var call7990 = callmethodChecked(this, "value", [0]);
                                                var call7991 = callmethodChecked(call7990, "at", [1], var_i);
                                                var call7992 = callmethodChecked(call7991, "toGrace", [1], new GraceNum(0));
                                                var opresult7995 = callmethodChecked(var_s, "++", [1], call7992);
                                                var_s = opresult7995;
                                                var if7996 = GraceDone;
                                                setLineNumber(1415);    // compilenode call
                                                onSelf = true;
                                                var call7997 = callmethodChecked(this, "value", [0]);
                                                var call7998 = callmethodChecked(call7997, "size", [0]);
                                                var opresult8001 = callmethodChecked(var_i, "<", [1], call7998);
                                                if (Grace_isTrue(opresult8001)) {
                                                  setLineNumber(1416);    // compilenode string
                                                  var string8002 = new GraceString(", ");
                                                  var opresult8005 = callmethodChecked(var_s, "++", [1], string8002);
                                                  var_s = opresult8005;
                                                  if7996 = GraceDone;
                                                }
                                                return if7996;
                                              };
                                              var call8006 = callmethodChecked(var_prelude, "for()do", [1, 1], call7988, block7989);
                                              setLineNumber(1419);    // compilenode string
                                              var string8007 = new GraceString("]");
                                              var opresult8010 = callmethodChecked(var_s, "++", [1], string8007);
                                              var_s = opresult8010;
                                              setLineNumber(1420);    // return value
                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method toGrace(1) does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              return var_s;
                                            };
                                            func7985.paramTypes = [];
                                            func7985.paramTypes.push([type_Number, "depth"]);
                                            func7985.paramCounts = [1];
                                            obj7937.methods["toGrace"] = func7985;
                                            func7985.definitionLine = 1411;
                                            func7985.definitionModule = "ast";
                                            var func8011 = function(argcv) {    // method shallowCopy
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                              setModuleName("ast");
                                              setLineNumber(1423);    // compilenode identifier
                                              var call8012 = callmethodChecked(var_arrayNode, "new", [1], var_emptySeq);
                                              var call8013 = callmethodChecked(call8012, "shallowCopyFieldsFrom", [1], this);
                                              return call8013;
                                            };
                                            func8011.paramCounts = [0];
                                            obj7937.methods["shallowCopy"] = func8011;
                                            func8011.definitionLine = 1422;
                                            func8011.definitionModule = "ast";
                                            setLineNumber(1383);    // compilenode call
                                            var call8014 = callmethodChecked(superDepth, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call8015 = callmethodChecked(call8014, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call8016 = callmethodChecked(call8015, "baseNode()object", [0, 1], this);
                                            obj7937.superobj = call8016;
                                            if (call8016.data) obj7937.data = call8016.data;
                                            if (call8016.hasOwnProperty('_value'))
                                                obj7937._value = call8016._value;
                                            setLineNumber(1384);    // compilenode string
                                            var string8017 = new GraceString("array");
                                            obj7937.data["kind"] = string8017;
                                            var reader_ast_kind8018 = function() {
                                              return this.data["kind"];
                                            };
                                            reader_ast_kind8018.def = true;
                                            obj7937.methods["kind"] = reader_ast_kind8018;
                                            setLineNumber(1385);    // compilenode identifier
                                            obj7937.data["value"] = var_values;
                                            var reader_ast_value8019 = function() {
                                              return this.data["value"];
                                            };
                                            obj7937.methods["value"] = reader_ast_value8019;
                                            obj7937.data["value"] = var_values;
                                            var writer_ast_value8019 = function(argcv, o) {
                                              this.data["value"] = o;
                                              return GraceDone;
                                            };
                                            obj7937.methods["value:="] = writer_ast_value8019;
                                            obj7937.mutable = true;
                                            superDepth = origSuperDepth;
                                          };
                                          obj_init_7937.apply(inheritingObject, []);
                                          return obj7937;
                                          };
                                          obj7850.methods["new()object"] = func7936;
                                        superDepth = origSuperDepth;
                                      };
                                      obj_init_7850.apply(obj7850, []);
                                      var var_arrayNode = obj7850;
                                      setLineNumber(1383);    // compilenode method
                                      var func8020 = function(argcv) {    // method arrayNode
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrayNode"));
                                        setModuleName("ast");
                                        // arrayNode is a simple accessor - elide try ... catch
                                        setLineNumber(1381);    // compilenode identifier
                                        return var_arrayNode;
                                      };
                                      func8020.paramCounts = [0];
                                      this.methods["arrayNode"] = func8020;
                                      func8020.definitionLine = 1383;
                                      func8020.definitionModule = "ast";
                                      this.methods["arrayNode"].debug = "def";
                                      setLineNumber(1427);    // compilenode object
                                      var obj8021 = Grace_allocObject(GraceObject, "memberNode");
                                      obj8021.definitionModule = "ast";
                                      obj8021.definitionLine = 1427;
                                      obj8021.outer = this;
                                      var reader_ast_outer8022 = function() {
                                        return this.outer;
                                      };
                                      obj8021.methods["outer"] = reader_ast_outer8022;
                                      var obj_init_8021 = function() {
                                        var origSuperDepth = superDepth;
                                        superDepth = obj8021;
                                        var func8023 = function(argcv) {    // method new(2)scope(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_request = arguments[curarg];
                                          curarg++;
                                          var var_receiver = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 2)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new (arg list 1) of new(2)scope(1)"));
                                          var var_s = arguments[curarg];
                                          curarg++;
                                          if (argcv[1] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 2) of new(2)scope(1)"));
                                          setModuleName("ast");
                                          setLineNumber(1429);    // compilenode identifier
                                          onSelf = true;
                                          var call8024 = callmethodChecked(this, "new", [2], var_request, var_receiver);
                                          var var_result = call8024;
                                          setLineNumber(1430);    // compilenode identifier
                                          var call8025 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                          setLineNumber(1431);    // compilenode identifier
                                          return var_result;
                                        };
                                        func8023.paramCounts = [2, 1];
                                        obj8021.methods["new()scope"] = func8023;
                                        func8023.definitionLine = 1428;
                                        func8023.definitionModule = "ast";
                                        var func8026 = function(argcv) {    // method new(2)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_request = arguments[curarg];
                                          curarg++;
                                          var var_receiver = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 2)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(2)"));
                                          setModuleName("ast");
                                          setLineNumber(1433);    // compilenode object
                                          var obj8027 = Grace_allocObject(null, "memberNode.new");
                                          obj8027.definitionModule = "ast";
                                          obj8027.definitionLine = 1433;
                                          obj8027.outer = this;
                                          var reader_ast_outer8028 = function() {
                                            return this.outer;
                                          };
                                          obj8027.methods["outer"] = reader_ast_outer8028;
                                          var obj_init_8027 = function() {
                                            var origSuperDepth = superDepth;
                                            superDepth = obj8027;
                                            var func8029 = function(argcv) {    // method target
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for target"));
                                              setModuleName("ast");
                                              setLineNumber(1441);    // compilenode call
                                              onSelf = true;
                                              var call8030 = callmethodChecked(this, "in", [0]);
                                              return call8030;
                                            };
                                            func8029.paramCounts = [0];
                                            obj8027.methods["target"] = func8029;
                                            func8029.definitionLine = 1441;
                                            func8029.definitionModule = "ast";
                                            var func8031 = function(argcv) {    // method nameString
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                              setModuleName("ast");
                                              setLineNumber(1442);    // compilenode call
                                              onSelf = true;
                                              var call8032 = callmethodChecked(this, "value", [0]);
                                              return call8032;
                                            };
                                            func8031.paramCounts = [0];
                                            obj8027.methods["nameString"] = func8031;
                                            func8031.definitionLine = 1442;
                                            func8031.definitionModule = "ast";
                                            var func8033 = function(argcv) {    // method isMember
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMember"));
                                              setModuleName("ast");
                                              // isMember is a simple accessor - elide try ... catch
                                              setLineNumber(1443);    // compilenode identifier
                                              return GraceTrue;
                                            };
                                            func8033.paramCounts = [0];
                                            obj8027.methods["isMember"] = func8033;
                                            func8033.definitionLine = 1443;
                                            func8033.definitionModule = "ast";
                                            var func8034 = function(argcv) {    // method accept(1)from(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_visitor = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                              var var_as = arguments[curarg];
                                              curarg++;
                                              if (argcv[1] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                              // Start argument checking
                                              curarg = 1;
                                              setLineNumber(1444);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                              curarg++;
                                              curarg++;
                                              // End argument checking
                                              setModuleName("ast");
                                              var if8035 = GraceDone;
                                              setLineNumber(1445);    // compilenode identifier
                                              var call8036 = callmethodChecked(var_visitor, "visitMember()up", [1, 1], this, var_as);
                                              if (Grace_isTrue(call8036)) {
                                                setLineNumber(1446);    // compilenode identifier
                                                var call8037 = callmethodChecked(var_as, "extend", [1], this);
                                                var var_newChain = call8037;
                                                var if8038 = GraceDone;
                                                setLineNumber(1447);    // compilenode call
                                                onSelf = true;
                                                var call8039 = callmethodChecked(this, "generics", [0]);
                                                var opresult8042 = callmethodChecked(GraceFalse, "\u2260", [1], call8039);
                                                if (Grace_isTrue(opresult8042)) {
                                                  setLineNumber(1448);    // compilenode block
                                                  var block8043 = new GraceBlock(this, 1448, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block8043.real = function(var_each) {
                                                    setLineNumber(1448);    // compilenode identifier
                                                    var call8044 = callmethodChecked(var_each, "accept()from", [1, 1], var_visitor, var_newChain);
                                                    return call8044;
                                                  };
                                                  onSelf = true;
                                                  var call8045 = callmethodChecked(this, "generics", [0]);
                                                  var call8046 = callmethodChecked(call8045, "do", [1], block8043);
                                                  if8038 = call8046;
                                                }
                                                setLineNumber(1450);    // compilenode call
                                                onSelf = true;
                                                var call8047 = callmethodChecked(this, "in", [0]);
                                                var call8048 = callmethodChecked(call8047, "accept()from", [1, 1], var_visitor, var_newChain);
                                                if8035 = call8048;
                                              }
                                              return if8035;
                                            };
                                            func8034.paramTypes = [];
                                            func8034.paramTypes.push([]);
                                            func8034.paramTypes.push([]);
                                            func8034.paramCounts = [1, 1];
                                            obj8027.methods["accept()from"] = func8034;
                                            func8034.definitionLine = 1444;
                                            func8034.definitionModule = "ast";
                                            var func8049 = function(argcv) {    // method map(1)ancestors(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_blk = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                              var var_as = arguments[curarg];
                                              curarg++;
                                              if (argcv[1] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                              setModuleName("ast");
                                              setLineNumber(1454);    // compilenode call
                                              onSelf = true;
                                              var call8050 = callmethodChecked(this, "shallowCopy", [0]);
                                              var var_n = call8050;
                                              setLineNumber(1455);    // compilenode identifier
                                              var call8051 = callmethodChecked(var_as, "extend", [1], var_n);
                                              var var_newChain = call8051;
                                              setLineNumber(1456);    // compilenode call
                                              onSelf = true;
                                              var call8052 = callmethodChecked(this, "in", [0]);
                                              var call8053 = callmethodChecked(call8052, "map()ancestors", [1, 1], var_blk, var_newChain);
                                              var call8054 = callmethodChecked(var_n, "in:=", [1], call8053);
                                              setLineNumber(1457);    // compilenode call
                                              onSelf = true;
                                              var call8055 = callmethodChecked(this, "generics", [0]);
                                              var call8056 = callmethodChecked(superDepth, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call8057 = callmethodChecked(call8056, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call8058 = callmethodChecked(call8057, "maybeListMap()ancestors", [2, 1], call8055, var_blk, var_newChain);
                                              var call8059 = callmethodChecked(var_n, "generics:=", [1], call8058);
                                              setLineNumber(1458);    // compilenode identifier
                                              var call8060 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                              return call8060;
                                            };
                                            func8049.paramCounts = [1, 1];
                                            obj8027.methods["map()ancestors"] = func8049;
                                            func8049.definitionLine = 1453;
                                            func8049.definitionModule = "ast";
                                            var func8061 = function(argcv) {    // method pretty(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_depth = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                              setModuleName("ast");
                                              setLineNumber(1461);    // compilenode string
                                              var string8062 = new GraceString("");
                                              var var_spc = string8062;
                                              setLineNumber(1462);    // compilenode num
                                              var opresult8065 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                              var block8066 = new GraceBlock(this, 1462, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block8066.real = function(var_i) {
                                                setLineNumber(1463);    // compilenode string
                                                var string8067 = new GraceString("  ");
                                                var opresult8070 = callmethodChecked(var_spc, "++", [1], string8067);
                                                var_spc = opresult8070;
                                                return GraceDone;
                                              };
                                              var call8071 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult8065, block8066);
                                              setLineNumber(1465);    // compilenode string
                                              var string8072 = new GraceString("\u203a\n");
                                              onSelf = true;
                                              var call8074 = callmethodChecked(this, "value", [0]);
                                              var string8076 = new GraceString("\u2039");
                                              var call8078 = callmethodsuper(this, "pretty", [1], var_depth);
                                              var string8080 = new GraceString("");
                                              var opresult8082 = callmethodChecked(string8080, "++", [1], call8078);
                                              var opresult8084 = callmethodChecked(opresult8082, "++", [1], string8076);
                                              var opresult8086 = callmethodChecked(opresult8084, "++", [1], call8074);
                                              var opresult8088 = callmethodChecked(opresult8086, "++", [1], string8072);
                                              var var_s = opresult8088;
                                              setLineNumber(1466);    // compilenode call
                                              onSelf = true;
                                              var call8089 = callmethodChecked(this, "in", [0]);
                                              var call8090 = callmethodChecked(call8089, "pretty", [1], var_depth);
                                              var opresult8094 = callmethodChecked(var_s, "++", [1], var_spc);
                                              var opresult8096 = callmethodChecked(opresult8094, "++", [1], call8090);
                                              var_s = opresult8096;
                                              var if8097 = GraceDone;
                                              setLineNumber(1467);    // compilenode call
                                              onSelf = true;
                                              var call8098 = callmethodChecked(this, "generics", [0]);
                                              var opresult8101 = callmethodChecked(GraceFalse, "\u2260", [1], call8098);
                                              if (Grace_isTrue(opresult8101)) {
                                                setLineNumber(1468);    // compilenode string
                                                var string8102 = new GraceString("  Generics:");
                                                var string8105 = new GraceString("\n");
                                                var opresult8108 = callmethodChecked(var_s, "++", [1], string8105);
                                                var opresult8110 = callmethodChecked(opresult8108, "++", [1], var_spc);
                                                var opresult8112 = callmethodChecked(opresult8110, "++", [1], string8102);
                                                var_s = opresult8112;
                                                setLineNumber(1469);    // compilenode call
                                                onSelf = true;
                                                var call8113 = callmethodChecked(this, "generics", [0]);
                                                var block8114 = new GraceBlock(this, 1469, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block8114.real = function(var_g) {
                                                  setLineNumber(1470);    // compilenode identifier
                                                  var call8115 = callmethodChecked(var_g, "pretty", [1], new GraceNum(0));
                                                  var string8117 = new GraceString("    ");
                                                  var string8120 = new GraceString("\n");
                                                  var opresult8123 = callmethodChecked(var_s, "++", [1], string8120);
                                                  var opresult8125 = callmethodChecked(opresult8123, "++", [1], var_spc);
                                                  var opresult8127 = callmethodChecked(opresult8125, "++", [1], string8117);
                                                  var opresult8129 = callmethodChecked(opresult8127, "++", [1], call8115);
                                                  var_s = opresult8129;
                                                  return GraceDone;
                                                };
                                                var call8130 = callmethodChecked(var_prelude, "for()do", [1, 1], call8113, block8114);
                                                if8097 = call8130;
                                              }
                                              setLineNumber(1473);    // compilenode identifier
                                              return var_s;
                                            };
                                            func8061.paramCounts = [1];
                                            obj8027.methods["pretty"] = func8061;
                                            func8061.definitionLine = 1460;
                                            func8061.definitionModule = "ast";
                                            var func8131 = function(argcv) {    // method toGrace(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_depth = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                              // Start argument checking
                                              curarg = 1;
                                              setLineNumber(1475);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                              curarg++;
                                              // End argument checking
                                              setModuleName("ast");
                                              setLineNumber(1476);    // compilenode string
                                              var string8132 = new GraceString("");
                                              var var_s = string8132;
                                              var if8133 = GraceDone;
                                              setLineNumber(1477);    // compilenode string
                                              var string8134 = new GraceString("prefix");
                                              onSelf = true;
                                              var call8136 = callmethodChecked(this, "value", [0]);
                                              var call8137 = callmethodChecked(call8136, "substringFrom()to", [1, 1], new GraceNum(1), new GraceNum(6));
                                              var opresult8139 = callmethodChecked(call8137, "==", [1], string8134);
                                              if (Grace_isTrue(opresult8139)) {
                                                setLineNumber(1478);    // compilenode call
                                                onSelf = true;
                                                var call8140 = callmethodChecked(this, "value", [0]);
                                                var call8141 = callmethodChecked(call8140, "size", [0]);
                                                onSelf = true;
                                                var call8142 = callmethodChecked(this, "value", [0]);
                                                var call8143 = callmethodChecked(call8142, "substringFrom()to", [1, 1], new GraceNum(7), call8141);
                                                var_s = call8143;
                                                setLineNumber(1479);    // compilenode call
                                                onSelf = true;
                                                var call8144 = callmethodChecked(this, "in", [0]);
                                                var call8145 = callmethodChecked(call8144, "toGrace", [1], new GraceNum(0));
                                                var string8147 = new GraceString(" ");
                                                var opresult8150 = callmethodChecked(var_s, "++", [1], string8147);
                                                var opresult8152 = callmethodChecked(opresult8150, "++", [1], call8145);
                                                var_s = opresult8152;
                                                if8133 = GraceDone;
                                              } else {
                                                setLineNumber(1481);    // compilenode call
                                                onSelf = true;
                                                var call8153 = callmethodChecked(this, "value", [0]);
                                                var string8155 = new GraceString(".");
                                                onSelf = true;
                                                var call8157 = callmethodChecked(this, "in", [0]);
                                                var call8158 = callmethodChecked(call8157, "toGrace", [1], var_depth);
                                                var opresult8160 = callmethodChecked(call8158, "++", [1], string8155);
                                                var opresult8162 = callmethodChecked(opresult8160, "++", [1], call8153);
                                                var_s = opresult8162;
                                                if8133 = GraceDone;
                                              }
                                              var if8163 = GraceDone;
                                              setLineNumber(1483);    // compilenode call
                                              onSelf = true;
                                              var call8164 = callmethodChecked(this, "generics", [0]);
                                              var opresult8167 = callmethodChecked(GraceFalse, "\u2260", [1], call8164);
                                              if (Grace_isTrue(opresult8167)) {
                                                setLineNumber(1484);    // compilenode string
                                                var string8168 = new GraceString("<");
                                                var opresult8171 = callmethodChecked(var_s, "++", [1], string8168);
                                                var_s = opresult8171;
                                                setLineNumber(1485);    // compilenode call
                                                onSelf = true;
                                                var call8173 = callmethodChecked(this, "generics", [0]);
                                                var call8174 = callmethodChecked(call8173, "size", [0]);
                                                var diff8176 = callmethodChecked(call8174, "-", [1], new GraceNum(1));
                                                var opresult8179 = callmethodChecked(new GraceNum(1), "..", [1], diff8176);
                                                var block8180 = new GraceBlock(this, 1485, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block8180.real = function(var_ix) {
                                                  setLineNumber(1486);    // compilenode identifier
                                                  var opresult8183 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                  onSelf = true;
                                                  var call8184 = callmethodChecked(this, "generics", [0]);
                                                  var call8185 = callmethodChecked(call8184, "at", [1], var_ix);
                                                  var call8186 = callmethodChecked(call8185, "toGrace", [1], opresult8183);
                                                  var opresult8189 = callmethodChecked(var_s, "++", [1], call8186);
                                                  var_s = opresult8189;
                                                  return GraceDone;
                                                };
                                                var call8190 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult8179, block8180);
                                                setLineNumber(1488);    // compilenode string
                                                var string8191 = new GraceString(">");
                                                var opresult8195 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                onSelf = true;
                                                var call8196 = callmethodChecked(this, "generics", [0]);
                                                var call8197 = callmethodChecked(call8196, "last", [0]);
                                                var call8198 = callmethodChecked(call8197, "toGrace", [1], opresult8195);
                                                var opresult8201 = callmethodChecked(var_s, "++", [1], call8198);
                                                var opresult8203 = callmethodChecked(opresult8201, "++", [1], string8191);
                                                var_s = opresult8203;
                                                if8163 = GraceDone;
                                              }
                                              setLineNumber(1490);    // return value
                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method toGrace(1) does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              return var_s;
                                            };
                                            func8131.paramTypes = [];
                                            func8131.paramTypes.push([type_Number, "depth"]);
                                            func8131.paramCounts = [1];
                                            obj8027.methods["toGrace"] = func8131;
                                            func8131.definitionLine = 1475;
                                            func8131.definitionModule = "ast";
                                            var func8204 = function(argcv) {    // method asString
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                              setModuleName("ast");
                                              setLineNumber(1492);    // compilenode string
                                              var string8205 = new GraceString("");
                                              onSelf = true;
                                              var call8207 = callmethodChecked(this, "value", [0]);
                                              var string8209 = new GraceString(".");
                                              onSelf = true;
                                              var call8211 = callmethodChecked(this, "in", [0]);
                                              var string8213 = new GraceString("");
                                              var opresult8215 = callmethodChecked(string8213, "++", [1], call8211);
                                              var opresult8217 = callmethodChecked(opresult8215, "++", [1], string8209);
                                              var opresult8219 = callmethodChecked(opresult8217, "++", [1], call8207);
                                              var opresult8221 = callmethodChecked(opresult8219, "++", [1], string8205);
                                              return opresult8221;
                                            };
                                            func8204.paramCounts = [0];
                                            obj8027.methods["asString"] = func8204;
                                            func8204.definitionLine = 1492;
                                            func8204.definitionModule = "ast";
                                            var func8222 = function(argcv) {    // method asIdentifier
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asIdentifier"));
                                              setModuleName("ast");
                                              var if8223 = GraceDone;
                                              setLineNumber(1495);    // compilenode call
                                              onSelf = true;
                                              var call8224 = callmethodChecked(this, "scope", [0]);
                                              var opresult8227 = callmethodChecked(var_fakeSymbolTable, "==", [1], call8224);
                                              if (Grace_isTrue(opresult8227)) {
                                                setLineNumber(1496);    // compilenode string
                                                var string8228 = new GraceString(" when scope was fake");
                                                onSelf = true;
                                                var call8230 = callmethodChecked(this, "pretty", [1], new GraceNum(0));
                                                var string8232 = new GraceString("asIdentifier requested on ");
                                                var opresult8234 = callmethodChecked(string8232, "++", [1], call8230);
                                                var opresult8236 = callmethodChecked(opresult8234, "++", [1], string8228);
                                                var call8237 = callmethodChecked(var_prelude, "ProgrammingError", [0]);
                                                var call8238 = callmethodChecked(call8237, "raise", [1], opresult8236);
                                                if8223 = call8238;
                                              }
                                              setLineNumber(1498);    // compilenode call
                                              onSelf = true;
                                              var call8239 = callmethodChecked(this, "value", [0]);
                                              onSelf = true;
                                              var call8240 = callmethodChecked(this, "scope", [0]);
                                              var call8241 = callmethodChecked(var_identifierNode, "new()scope", [2, 1], call8239, GraceFalse, call8240);
                                              var var_resultNode = call8241;
                                              setLineNumber(1499);    // compilenode identifier
                                              var call8242 = callmethodChecked(var_resultNode, "inRequest:=", [1], GraceTrue);
                                              setLineNumber(1500);    // compilenode call
                                              onSelf = true;
                                              var call8243 = callmethodChecked(this, "line", [0]);
                                              var call8244 = callmethodChecked(var_resultNode, "line:=", [1], call8243);
                                              setLineNumber(1501);    // compilenode call
                                              onSelf = true;
                                              var call8245 = callmethodChecked(this, "linePos", [0]);
                                              var call8246 = callmethodChecked(var_resultNode, "linePos:=", [1], call8245);
                                              setLineNumber(1502);    // compilenode identifier
                                              return var_resultNode;
                                            };
                                            func8222.paramCounts = [0];
                                            obj8027.methods["asIdentifier"] = func8222;
                                            func8222.definitionLine = 1493;
                                            func8222.definitionModule = "ast";
                                            var func8247 = function(argcv) {    // method shallowCopy
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                              setModuleName("ast");
                                              setLineNumber(1505);    // compilenode call
                                              onSelf = true;
                                              var call8248 = callmethodChecked(this, "value", [0]);
                                              var call8249 = callmethodChecked(var_memberNode, "new", [2], call8248, var_nullNode);
                                              var call8250 = callmethodChecked(call8249, "shallowCopyFieldsFrom", [1], this);
                                              return call8250;
                                            };
                                            func8247.paramCounts = [0];
                                            obj8027.methods["shallowCopy"] = func8247;
                                            func8247.definitionLine = 1504;
                                            func8247.definitionModule = "ast";
                                            var func8251 = function(argcv) {    // method statementName
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                              setModuleName("ast");
                                              setLineNumber(1507);    // compilenode string
                                              var string8252 = new GraceString("expression");
                                              return string8252;
                                            };
                                            func8251.paramCounts = [0];
                                            obj8027.methods["statementName"] = func8251;
                                            func8251.definitionLine = 1507;
                                            func8251.definitionModule = "ast";
                                            setLineNumber(1435);    // compilenode call
                                            var call8253 = callmethodChecked(superDepth, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call8254 = callmethodChecked(call8253, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call8255 = callmethodChecked(call8254, "baseNode()object", [0, 1], this);
                                            obj8027.superobj = call8255;
                                            if (call8255.data) obj8027.data = call8255.data;
                                            if (call8255.hasOwnProperty('_value'))
                                                obj8027._value = call8255._value;
                                            setLineNumber(1436);    // compilenode string
                                            var string8256 = new GraceString("member");
                                            obj8027.data["kind"] = string8256;
                                            var reader_ast_kind8257 = function() {
                                              return this.data["kind"];
                                            };
                                            reader_ast_kind8257.def = true;
                                            obj8027.methods["kind"] = reader_ast_kind8257;
                                            setLineNumber(1437);    // compilenode identifier
                                            obj8027.data["value"] = var_request;
                                            var reader_ast_value8258 = function() {
                                              return this.data["value"];
                                            };
                                            obj8027.methods["value"] = reader_ast_value8258;
                                            obj8027.data["value"] = var_request;
                                            var writer_ast_value8258 = function(argcv, o) {
                                              this.data["value"] = o;
                                              return GraceDone;
                                            };
                                            obj8027.methods["value:="] = writer_ast_value8258;
                                            obj8027.mutable = true;
                                            setLineNumber(1438);    // compilenode identifier
                                            obj8027.data["in"] = var_receiver;
                                            var reader_ast_in8259 = function() {
                                              return this.data["in"];
                                            };
                                            obj8027.methods["in"] = reader_ast_in8259;
                                            obj8027.data["in"] = var_receiver;
                                            var writer_ast_in8259 = function(argcv, o) {
                                              this.data["in"] = o;
                                              return GraceDone;
                                            };
                                            obj8027.methods["in:="] = writer_ast_in8259;
                                            obj8027.mutable = true;
                                            setLineNumber(1439);    // compilenode identifier
                                            obj8027.data["generics"] = GraceFalse;
                                            var reader_ast_generics8260 = function() {
                                              return this.data["generics"];
                                            };
                                            obj8027.methods["generics"] = reader_ast_generics8260;
                                            obj8027.data["generics"] = GraceFalse;
                                            var writer_ast_generics8260 = function(argcv, o) {
                                              this.data["generics"] = o;
                                              return GraceDone;
                                            };
                                            obj8027.methods["generics:="] = writer_ast_generics8260;
                                            obj8027.mutable = true;
                                            superDepth = origSuperDepth;
                                          };
                                          obj_init_8027.apply(obj8027, []);
                                          return obj8027;
                                        };
                                        func8026.paramCounts = [2];
                                        obj8021.methods["new"] = func8026;
                                        func8026.definitionLine = 1433;
                                        func8026.definitionModule = "ast";
                                          var func8261 = function(argcv) {    // method new(2     )()object
                                            var curarg = 1;
                                            var var_request = arguments[curarg];
                                            curarg++;
                                            var var_receiver = arguments[curarg];
                                            curarg++;
                                            var inheritingObject = arguments[curarg++];
                                            // Start argument processing
                                            curarg = 1;
                                            curarg++;
                                            curarg++;
                                            // End argument processing
                                            setModuleName("ast");
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var obj8262 = Grace_allocObject(null, "new");
                                            obj8262.definitionModule = "ast";
                                            obj8262.definitionLine = 1433;
                                            var inho8262 = inheritingObject;
                                            while (inho8262.superobj) inho8262 = inho8262.superobj;
                                            inho8262.superobj = obj8262;
                                            obj8262.data = inheritingObject.data;
                                            if (inheritingObject.hasOwnProperty('_value'))
                                              obj8262._value = inheritingObject._value;
                                            obj8262.outer = this;
                                            var reader_ast_outer8263 = function() {
                                              return this.outer;
                                            };
                                            obj8262.methods["outer"] = reader_ast_outer8263;
                                            var obj_init_8262 = function() {
                                              var origSuperDepth = superDepth;
                                              superDepth = obj8262;
                                              var func8264 = function(argcv) {    // method target
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for target"));
                                                setModuleName("ast");
                                                setLineNumber(1441);    // compilenode call
                                                onSelf = true;
                                                var call8265 = callmethodChecked(this, "in", [0]);
                                                return call8265;
                                              };
                                              func8264.paramCounts = [0];
                                              obj8262.methods["target"] = func8264;
                                              func8264.definitionLine = 1441;
                                              func8264.definitionModule = "ast";
                                              var func8266 = function(argcv) {    // method nameString
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                setModuleName("ast");
                                                setLineNumber(1442);    // compilenode call
                                                onSelf = true;
                                                var call8267 = callmethodChecked(this, "value", [0]);
                                                return call8267;
                                              };
                                              func8266.paramCounts = [0];
                                              obj8262.methods["nameString"] = func8266;
                                              func8266.definitionLine = 1442;
                                              func8266.definitionModule = "ast";
                                              var func8268 = function(argcv) {    // method isMember
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isMember"));
                                                setModuleName("ast");
                                                // isMember is a simple accessor - elide try ... catch
                                                setLineNumber(1443);    // compilenode identifier
                                                return GraceTrue;
                                              };
                                              func8268.paramCounts = [0];
                                              obj8262.methods["isMember"] = func8268;
                                              func8268.definitionLine = 1443;
                                              func8268.definitionModule = "ast";
                                              var func8269 = function(argcv) {    // method accept(1)from(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_visitor = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                var var_as = arguments[curarg];
                                                curarg++;
                                                if (argcv[1] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                // Start argument checking
                                                curarg = 1;
                                                setLineNumber(1444);    // compilenode identifier
                                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                curarg++;
                                                curarg++;
                                                // End argument checking
                                                setModuleName("ast");
                                                var if8270 = GraceDone;
                                                setLineNumber(1445);    // compilenode identifier
                                                var call8271 = callmethodChecked(var_visitor, "visitMember()up", [1, 1], this, var_as);
                                                if (Grace_isTrue(call8271)) {
                                                  setLineNumber(1446);    // compilenode identifier
                                                  var call8272 = callmethodChecked(var_as, "extend", [1], this);
                                                  var var_newChain = call8272;
                                                  var if8273 = GraceDone;
                                                  setLineNumber(1447);    // compilenode call
                                                  onSelf = true;
                                                  var call8274 = callmethodChecked(this, "generics", [0]);
                                                  var opresult8277 = callmethodChecked(GraceFalse, "\u2260", [1], call8274);
                                                  if (Grace_isTrue(opresult8277)) {
                                                    setLineNumber(1448);    // compilenode block
                                                    var block8278 = new GraceBlock(this, 1448, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block8278.real = function(var_each) {
                                                      setLineNumber(1448);    // compilenode identifier
                                                      var call8279 = callmethodChecked(var_each, "accept()from", [1, 1], var_visitor, var_newChain);
                                                      return call8279;
                                                    };
                                                    onSelf = true;
                                                    var call8280 = callmethodChecked(this, "generics", [0]);
                                                    var call8281 = callmethodChecked(call8280, "do", [1], block8278);
                                                    if8273 = call8281;
                                                  }
                                                  setLineNumber(1450);    // compilenode call
                                                  onSelf = true;
                                                  var call8282 = callmethodChecked(this, "in", [0]);
                                                  var call8283 = callmethodChecked(call8282, "accept()from", [1, 1], var_visitor, var_newChain);
                                                  if8270 = call8283;
                                                }
                                                return if8270;
                                              };
                                              func8269.paramTypes = [];
                                              func8269.paramTypes.push([]);
                                              func8269.paramTypes.push([]);
                                              func8269.paramCounts = [1, 1];
                                              obj8262.methods["accept()from"] = func8269;
                                              func8269.definitionLine = 1444;
                                              func8269.definitionModule = "ast";
                                              var func8284 = function(argcv) {    // method map(1)ancestors(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_blk = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                var var_as = arguments[curarg];
                                                curarg++;
                                                if (argcv[1] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                setModuleName("ast");
                                                setLineNumber(1454);    // compilenode call
                                                onSelf = true;
                                                var call8285 = callmethodChecked(this, "shallowCopy", [0]);
                                                var var_n = call8285;
                                                setLineNumber(1455);    // compilenode identifier
                                                var call8286 = callmethodChecked(var_as, "extend", [1], var_n);
                                                var var_newChain = call8286;
                                                setLineNumber(1456);    // compilenode call
                                                onSelf = true;
                                                var call8287 = callmethodChecked(this, "in", [0]);
                                                var call8288 = callmethodChecked(call8287, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                var call8289 = callmethodChecked(var_n, "in:=", [1], call8288);
                                                setLineNumber(1457);    // compilenode call
                                                onSelf = true;
                                                var call8290 = callmethodChecked(this, "generics", [0]);
                                                var call8291 = callmethodChecked(superDepth, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call8292 = callmethodChecked(call8291, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call8293 = callmethodChecked(call8292, "maybeListMap()ancestors", [2, 1], call8290, var_blk, var_newChain);
                                                var call8294 = callmethodChecked(var_n, "generics:=", [1], call8293);
                                                setLineNumber(1458);    // compilenode identifier
                                                var call8295 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                return call8295;
                                              };
                                              func8284.paramCounts = [1, 1];
                                              obj8262.methods["map()ancestors"] = func8284;
                                              func8284.definitionLine = 1453;
                                              func8284.definitionModule = "ast";
                                              var func8296 = function(argcv) {    // method pretty(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_depth = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                setModuleName("ast");
                                                setLineNumber(1461);    // compilenode string
                                                var string8297 = new GraceString("");
                                                var var_spc = string8297;
                                                setLineNumber(1462);    // compilenode num
                                                var opresult8300 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                var block8301 = new GraceBlock(this, 1462, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block8301.real = function(var_i) {
                                                  setLineNumber(1463);    // compilenode string
                                                  var string8302 = new GraceString("  ");
                                                  var opresult8305 = callmethodChecked(var_spc, "++", [1], string8302);
                                                  var_spc = opresult8305;
                                                  return GraceDone;
                                                };
                                                var call8306 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult8300, block8301);
                                                setLineNumber(1465);    // compilenode string
                                                var string8307 = new GraceString("\u203a\n");
                                                onSelf = true;
                                                var call8309 = callmethodChecked(this, "value", [0]);
                                                var string8311 = new GraceString("\u2039");
                                                var call8313 = callmethodsuper(this, "pretty", [1], var_depth);
                                                var string8315 = new GraceString("");
                                                var opresult8317 = callmethodChecked(string8315, "++", [1], call8313);
                                                var opresult8319 = callmethodChecked(opresult8317, "++", [1], string8311);
                                                var opresult8321 = callmethodChecked(opresult8319, "++", [1], call8309);
                                                var opresult8323 = callmethodChecked(opresult8321, "++", [1], string8307);
                                                var var_s = opresult8323;
                                                setLineNumber(1466);    // compilenode call
                                                onSelf = true;
                                                var call8324 = callmethodChecked(this, "in", [0]);
                                                var call8325 = callmethodChecked(call8324, "pretty", [1], var_depth);
                                                var opresult8329 = callmethodChecked(var_s, "++", [1], var_spc);
                                                var opresult8331 = callmethodChecked(opresult8329, "++", [1], call8325);
                                                var_s = opresult8331;
                                                var if8332 = GraceDone;
                                                setLineNumber(1467);    // compilenode call
                                                onSelf = true;
                                                var call8333 = callmethodChecked(this, "generics", [0]);
                                                var opresult8336 = callmethodChecked(GraceFalse, "\u2260", [1], call8333);
                                                if (Grace_isTrue(opresult8336)) {
                                                  setLineNumber(1468);    // compilenode string
                                                  var string8337 = new GraceString("  Generics:");
                                                  var string8340 = new GraceString("\n");
                                                  var opresult8343 = callmethodChecked(var_s, "++", [1], string8340);
                                                  var opresult8345 = callmethodChecked(opresult8343, "++", [1], var_spc);
                                                  var opresult8347 = callmethodChecked(opresult8345, "++", [1], string8337);
                                                  var_s = opresult8347;
                                                  setLineNumber(1469);    // compilenode call
                                                  onSelf = true;
                                                  var call8348 = callmethodChecked(this, "generics", [0]);
                                                  var block8349 = new GraceBlock(this, 1469, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block8349.real = function(var_g) {
                                                    setLineNumber(1470);    // compilenode identifier
                                                    var call8350 = callmethodChecked(var_g, "pretty", [1], new GraceNum(0));
                                                    var string8352 = new GraceString("    ");
                                                    var string8355 = new GraceString("\n");
                                                    var opresult8358 = callmethodChecked(var_s, "++", [1], string8355);
                                                    var opresult8360 = callmethodChecked(opresult8358, "++", [1], var_spc);
                                                    var opresult8362 = callmethodChecked(opresult8360, "++", [1], string8352);
                                                    var opresult8364 = callmethodChecked(opresult8362, "++", [1], call8350);
                                                    var_s = opresult8364;
                                                    return GraceDone;
                                                  };
                                                  var call8365 = callmethodChecked(var_prelude, "for()do", [1, 1], call8348, block8349);
                                                  if8332 = call8365;
                                                }
                                                setLineNumber(1473);    // compilenode identifier
                                                return var_s;
                                              };
                                              func8296.paramCounts = [1];
                                              obj8262.methods["pretty"] = func8296;
                                              func8296.definitionLine = 1460;
                                              func8296.definitionModule = "ast";
                                              var func8366 = function(argcv) {    // method toGrace(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_depth = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                // Start argument checking
                                                curarg = 1;
                                                setLineNumber(1475);    // compilenode identifier
                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                curarg++;
                                                // End argument checking
                                                setModuleName("ast");
                                                setLineNumber(1476);    // compilenode string
                                                var string8367 = new GraceString("");
                                                var var_s = string8367;
                                                var if8368 = GraceDone;
                                                setLineNumber(1477);    // compilenode string
                                                var string8369 = new GraceString("prefix");
                                                onSelf = true;
                                                var call8371 = callmethodChecked(this, "value", [0]);
                                                var call8372 = callmethodChecked(call8371, "substringFrom()to", [1, 1], new GraceNum(1), new GraceNum(6));
                                                var opresult8374 = callmethodChecked(call8372, "==", [1], string8369);
                                                if (Grace_isTrue(opresult8374)) {
                                                  setLineNumber(1478);    // compilenode call
                                                  onSelf = true;
                                                  var call8375 = callmethodChecked(this, "value", [0]);
                                                  var call8376 = callmethodChecked(call8375, "size", [0]);
                                                  onSelf = true;
                                                  var call8377 = callmethodChecked(this, "value", [0]);
                                                  var call8378 = callmethodChecked(call8377, "substringFrom()to", [1, 1], new GraceNum(7), call8376);
                                                  var_s = call8378;
                                                  setLineNumber(1479);    // compilenode call
                                                  onSelf = true;
                                                  var call8379 = callmethodChecked(this, "in", [0]);
                                                  var call8380 = callmethodChecked(call8379, "toGrace", [1], new GraceNum(0));
                                                  var string8382 = new GraceString(" ");
                                                  var opresult8385 = callmethodChecked(var_s, "++", [1], string8382);
                                                  var opresult8387 = callmethodChecked(opresult8385, "++", [1], call8380);
                                                  var_s = opresult8387;
                                                  if8368 = GraceDone;
                                                } else {
                                                  setLineNumber(1481);    // compilenode call
                                                  onSelf = true;
                                                  var call8388 = callmethodChecked(this, "value", [0]);
                                                  var string8390 = new GraceString(".");
                                                  onSelf = true;
                                                  var call8392 = callmethodChecked(this, "in", [0]);
                                                  var call8393 = callmethodChecked(call8392, "toGrace", [1], var_depth);
                                                  var opresult8395 = callmethodChecked(call8393, "++", [1], string8390);
                                                  var opresult8397 = callmethodChecked(opresult8395, "++", [1], call8388);
                                                  var_s = opresult8397;
                                                  if8368 = GraceDone;
                                                }
                                                var if8398 = GraceDone;
                                                setLineNumber(1483);    // compilenode call
                                                onSelf = true;
                                                var call8399 = callmethodChecked(this, "generics", [0]);
                                                var opresult8402 = callmethodChecked(GraceFalse, "\u2260", [1], call8399);
                                                if (Grace_isTrue(opresult8402)) {
                                                  setLineNumber(1484);    // compilenode string
                                                  var string8403 = new GraceString("<");
                                                  var opresult8406 = callmethodChecked(var_s, "++", [1], string8403);
                                                  var_s = opresult8406;
                                                  setLineNumber(1485);    // compilenode call
                                                  onSelf = true;
                                                  var call8408 = callmethodChecked(this, "generics", [0]);
                                                  var call8409 = callmethodChecked(call8408, "size", [0]);
                                                  var diff8411 = callmethodChecked(call8409, "-", [1], new GraceNum(1));
                                                  var opresult8414 = callmethodChecked(new GraceNum(1), "..", [1], diff8411);
                                                  var block8415 = new GraceBlock(this, 1485, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block8415.real = function(var_ix) {
                                                    setLineNumber(1486);    // compilenode identifier
                                                    var opresult8418 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                    onSelf = true;
                                                    var call8419 = callmethodChecked(this, "generics", [0]);
                                                    var call8420 = callmethodChecked(call8419, "at", [1], var_ix);
                                                    var call8421 = callmethodChecked(call8420, "toGrace", [1], opresult8418);
                                                    var opresult8424 = callmethodChecked(var_s, "++", [1], call8421);
                                                    var_s = opresult8424;
                                                    return GraceDone;
                                                  };
                                                  var call8425 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult8414, block8415);
                                                  setLineNumber(1488);    // compilenode string
                                                  var string8426 = new GraceString(">");
                                                  var opresult8430 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                  onSelf = true;
                                                  var call8431 = callmethodChecked(this, "generics", [0]);
                                                  var call8432 = callmethodChecked(call8431, "last", [0]);
                                                  var call8433 = callmethodChecked(call8432, "toGrace", [1], opresult8430);
                                                  var opresult8436 = callmethodChecked(var_s, "++", [1], call8433);
                                                  var opresult8438 = callmethodChecked(opresult8436, "++", [1], string8426);
                                                  var_s = opresult8438;
                                                  if8398 = GraceDone;
                                                }
                                                setLineNumber(1490);    // return value
                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("result of method toGrace(1) does not have " + 
                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                return var_s;
                                              };
                                              func8366.paramTypes = [];
                                              func8366.paramTypes.push([type_Number, "depth"]);
                                              func8366.paramCounts = [1];
                                              obj8262.methods["toGrace"] = func8366;
                                              func8366.definitionLine = 1475;
                                              func8366.definitionModule = "ast";
                                              var func8439 = function(argcv) {    // method asString
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                setModuleName("ast");
                                                setLineNumber(1492);    // compilenode string
                                                var string8440 = new GraceString("");
                                                onSelf = true;
                                                var call8442 = callmethodChecked(this, "value", [0]);
                                                var string8444 = new GraceString(".");
                                                onSelf = true;
                                                var call8446 = callmethodChecked(this, "in", [0]);
                                                var string8448 = new GraceString("");
                                                var opresult8450 = callmethodChecked(string8448, "++", [1], call8446);
                                                var opresult8452 = callmethodChecked(opresult8450, "++", [1], string8444);
                                                var opresult8454 = callmethodChecked(opresult8452, "++", [1], call8442);
                                                var opresult8456 = callmethodChecked(opresult8454, "++", [1], string8440);
                                                return opresult8456;
                                              };
                                              func8439.paramCounts = [0];
                                              obj8262.methods["asString"] = func8439;
                                              func8439.definitionLine = 1492;
                                              func8439.definitionModule = "ast";
                                              var func8457 = function(argcv) {    // method asIdentifier
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asIdentifier"));
                                                setModuleName("ast");
                                                var if8458 = GraceDone;
                                                setLineNumber(1495);    // compilenode call
                                                onSelf = true;
                                                var call8459 = callmethodChecked(this, "scope", [0]);
                                                var opresult8462 = callmethodChecked(var_fakeSymbolTable, "==", [1], call8459);
                                                if (Grace_isTrue(opresult8462)) {
                                                  setLineNumber(1496);    // compilenode string
                                                  var string8463 = new GraceString(" when scope was fake");
                                                  onSelf = true;
                                                  var call8465 = callmethodChecked(this, "pretty", [1], new GraceNum(0));
                                                  var string8467 = new GraceString("asIdentifier requested on ");
                                                  var opresult8469 = callmethodChecked(string8467, "++", [1], call8465);
                                                  var opresult8471 = callmethodChecked(opresult8469, "++", [1], string8463);
                                                  var call8472 = callmethodChecked(var_prelude, "ProgrammingError", [0]);
                                                  var call8473 = callmethodChecked(call8472, "raise", [1], opresult8471);
                                                  if8458 = call8473;
                                                }
                                                setLineNumber(1498);    // compilenode call
                                                onSelf = true;
                                                var call8474 = callmethodChecked(this, "value", [0]);
                                                onSelf = true;
                                                var call8475 = callmethodChecked(this, "scope", [0]);
                                                var call8476 = callmethodChecked(var_identifierNode, "new()scope", [2, 1], call8474, GraceFalse, call8475);
                                                var var_resultNode = call8476;
                                                setLineNumber(1499);    // compilenode identifier
                                                var call8477 = callmethodChecked(var_resultNode, "inRequest:=", [1], GraceTrue);
                                                setLineNumber(1500);    // compilenode call
                                                onSelf = true;
                                                var call8478 = callmethodChecked(this, "line", [0]);
                                                var call8479 = callmethodChecked(var_resultNode, "line:=", [1], call8478);
                                                setLineNumber(1501);    // compilenode call
                                                onSelf = true;
                                                var call8480 = callmethodChecked(this, "linePos", [0]);
                                                var call8481 = callmethodChecked(var_resultNode, "linePos:=", [1], call8480);
                                                setLineNumber(1502);    // compilenode identifier
                                                return var_resultNode;
                                              };
                                              func8457.paramCounts = [0];
                                              obj8262.methods["asIdentifier"] = func8457;
                                              func8457.definitionLine = 1493;
                                              func8457.definitionModule = "ast";
                                              var func8482 = function(argcv) {    // method shallowCopy
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                setModuleName("ast");
                                                setLineNumber(1505);    // compilenode call
                                                onSelf = true;
                                                var call8483 = callmethodChecked(this, "value", [0]);
                                                var call8484 = callmethodChecked(var_memberNode, "new", [2], call8483, var_nullNode);
                                                var call8485 = callmethodChecked(call8484, "shallowCopyFieldsFrom", [1], this);
                                                return call8485;
                                              };
                                              func8482.paramCounts = [0];
                                              obj8262.methods["shallowCopy"] = func8482;
                                              func8482.definitionLine = 1504;
                                              func8482.definitionModule = "ast";
                                              var func8486 = function(argcv) {    // method statementName
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                setModuleName("ast");
                                                setLineNumber(1507);    // compilenode string
                                                var string8487 = new GraceString("expression");
                                                return string8487;
                                              };
                                              func8486.paramCounts = [0];
                                              obj8262.methods["statementName"] = func8486;
                                              func8486.definitionLine = 1507;
                                              func8486.definitionModule = "ast";
                                              setLineNumber(1435);    // compilenode call
                                              var call8488 = callmethodChecked(superDepth, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call8489 = callmethodChecked(call8488, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call8490 = callmethodChecked(call8489, "baseNode()object", [0, 1], this);
                                              obj8262.superobj = call8490;
                                              if (call8490.data) obj8262.data = call8490.data;
                                              if (call8490.hasOwnProperty('_value'))
                                                  obj8262._value = call8490._value;
                                              setLineNumber(1436);    // compilenode string
                                              var string8491 = new GraceString("member");
                                              obj8262.data["kind"] = string8491;
                                              var reader_ast_kind8492 = function() {
                                                return this.data["kind"];
                                              };
                                              reader_ast_kind8492.def = true;
                                              obj8262.methods["kind"] = reader_ast_kind8492;
                                              setLineNumber(1437);    // compilenode identifier
                                              obj8262.data["value"] = var_request;
                                              var reader_ast_value8493 = function() {
                                                return this.data["value"];
                                              };
                                              obj8262.methods["value"] = reader_ast_value8493;
                                              obj8262.data["value"] = var_request;
                                              var writer_ast_value8493 = function(argcv, o) {
                                                this.data["value"] = o;
                                                return GraceDone;
                                              };
                                              obj8262.methods["value:="] = writer_ast_value8493;
                                              obj8262.mutable = true;
                                              setLineNumber(1438);    // compilenode identifier
                                              obj8262.data["in"] = var_receiver;
                                              var reader_ast_in8494 = function() {
                                                return this.data["in"];
                                              };
                                              obj8262.methods["in"] = reader_ast_in8494;
                                              obj8262.data["in"] = var_receiver;
                                              var writer_ast_in8494 = function(argcv, o) {
                                                this.data["in"] = o;
                                                return GraceDone;
                                              };
                                              obj8262.methods["in:="] = writer_ast_in8494;
                                              obj8262.mutable = true;
                                              setLineNumber(1439);    // compilenode identifier
                                              obj8262.data["generics"] = GraceFalse;
                                              var reader_ast_generics8495 = function() {
                                                return this.data["generics"];
                                              };
                                              obj8262.methods["generics"] = reader_ast_generics8495;
                                              obj8262.data["generics"] = GraceFalse;
                                              var writer_ast_generics8495 = function(argcv, o) {
                                                this.data["generics"] = o;
                                                return GraceDone;
                                              };
                                              obj8262.methods["generics:="] = writer_ast_generics8495;
                                              obj8262.mutable = true;
                                              superDepth = origSuperDepth;
                                            };
                                            obj_init_8262.apply(inheritingObject, []);
                                            return obj8262;
                                            };
                                            obj8021.methods["new()object"] = func8261;
                                          superDepth = origSuperDepth;
                                        };
                                        obj_init_8021.apply(obj8021, []);
                                        var var_memberNode = obj8021;
                                        setLineNumber(1435);    // compilenode method
                                        var func8496 = function(argcv) {    // method memberNode
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          if (argcv[0] !== 0)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for memberNode"));
                                          setModuleName("ast");
                                          // memberNode is a simple accessor - elide try ... catch
                                          setLineNumber(1427);    // compilenode identifier
                                          return var_memberNode;
                                        };
                                        func8496.paramCounts = [0];
                                        this.methods["memberNode"] = func8496;
                                        func8496.definitionLine = 1435;
                                        func8496.definitionModule = "ast";
                                        this.methods["memberNode"].debug = "def";
                                        setLineNumber(1510);    // compilenode object
                                        var obj8497 = Grace_allocObject(GraceObject, "genericNode");
                                        obj8497.definitionModule = "ast";
                                        obj8497.definitionLine = 1510;
                                        obj8497.outer = this;
                                        var reader_ast_outer8498 = function() {
                                          return this.outer;
                                        };
                                        obj8497.methods["outer"] = reader_ast_outer8498;
                                        var obj_init_8497 = function() {
                                          var origSuperDepth = superDepth;
                                          superDepth = obj8497;
                                          var func8499 = function(argcv) {    // method new(2)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_base = arguments[curarg];
                                            curarg++;
                                            var var_arguments = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 2)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(2)"));
                                            setModuleName("ast");
                                            setLineNumber(1511);    // compilenode object
                                            var obj8500 = Grace_allocObject(null, "genericNode.new");
                                            obj8500.definitionModule = "ast";
                                            obj8500.definitionLine = 1511;
                                            obj8500.outer = this;
                                            var reader_ast_outer8501 = function() {
                                              return this.outer;
                                            };
                                            obj8500.methods["outer"] = reader_ast_outer8501;
                                            var obj_init_8500 = function() {
                                              var origSuperDepth = superDepth;
                                              superDepth = obj8500;
                                              var func8502 = function(argcv) {    // method nameString
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                setModuleName("ast");
                                                setLineNumber(1519);    // compilenode call
                                                onSelf = true;
                                                var call8503 = callmethodChecked(this, "value", [0]);
                                                var call8504 = callmethodChecked(call8503, "nameString", [0]);
                                                return call8504;
                                              };
                                              func8502.paramCounts = [0];
                                              obj8500.methods["nameString"] = func8502;
                                              func8502.definitionLine = 1519;
                                              func8502.definitionModule = "ast";
                                              var func8505 = function(argcv) {    // method asString
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                setModuleName("ast");
                                                setLineNumber(1520);    // compilenode num
                                                onSelf = true;
                                                var call8506 = callmethodChecked(this, "toGrace", [1], new GraceNum(0));
                                                return call8506;
                                              };
                                              func8505.paramCounts = [0];
                                              obj8500.methods["asString"] = func8505;
                                              func8505.definitionLine = 1520;
                                              func8505.definitionModule = "ast";
                                              var func8507 = function(argcv) {    // method accept(1)from(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_visitor = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                var var_as = arguments[curarg];
                                                curarg++;
                                                if (argcv[1] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                // Start argument checking
                                                curarg = 1;
                                                setLineNumber(1521);    // compilenode identifier
                                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                curarg++;
                                                curarg++;
                                                // End argument checking
                                                setModuleName("ast");
                                                var if8508 = GraceDone;
                                                setLineNumber(1522);    // compilenode identifier
                                                var call8509 = callmethodChecked(var_visitor, "visitGeneric()up", [1, 1], this, var_as);
                                                if (Grace_isTrue(call8509)) {
                                                  setLineNumber(1523);    // compilenode identifier
                                                  var call8510 = callmethodChecked(var_as, "extend", [1], this);
                                                  var var_newChain = call8510;
                                                  setLineNumber(1524);    // compilenode call
                                                  onSelf = true;
                                                  var call8511 = callmethodChecked(this, "value", [0]);
                                                  var call8512 = callmethodChecked(call8511, "accept()from", [1, 1], var_visitor, var_newChain);
                                                  setLineNumber(1525);    // compilenode call
                                                  onSelf = true;
                                                  var call8513 = callmethodChecked(this, "args", [0]);
                                                  var block8514 = new GraceBlock(this, 1525, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block8514.real = function(var_p) {
                                                    setLineNumber(1526);    // compilenode identifier
                                                    var call8515 = callmethodChecked(var_p, "accept()from", [1, 1], var_visitor, var_newChain);
                                                    return call8515;
                                                  };
                                                  var call8516 = callmethodChecked(var_prelude, "for()do", [1, 1], call8513, block8514);
                                                  if8508 = call8516;
                                                }
                                                return if8508;
                                              };
                                              func8507.paramTypes = [];
                                              func8507.paramTypes.push([]);
                                              func8507.paramTypes.push([]);
                                              func8507.paramCounts = [1, 1];
                                              obj8500.methods["accept()from"] = func8507;
                                              func8507.definitionLine = 1521;
                                              func8507.definitionModule = "ast";
                                              var func8517 = function(argcv) {    // method map(1)ancestors(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_blk = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                var var_as = arguments[curarg];
                                                curarg++;
                                                if (argcv[1] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                setModuleName("ast");
                                                setLineNumber(1531);    // compilenode call
                                                onSelf = true;
                                                var call8518 = callmethodChecked(this, "shallowCopy", [0]);
                                                var var_n = call8518;
                                                setLineNumber(1532);    // compilenode identifier
                                                var call8519 = callmethodChecked(var_as, "extend", [1], var_n);
                                                var var_newChain = call8519;
                                                setLineNumber(1533);    // compilenode call
                                                onSelf = true;
                                                var call8520 = callmethodChecked(this, "value", [0]);
                                                var call8521 = callmethodChecked(call8520, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                var call8522 = callmethodChecked(var_n, "value:=", [1], call8521);
                                                setLineNumber(1534);    // compilenode call
                                                onSelf = true;
                                                var call8523 = callmethodChecked(this, "args", [0]);
                                                var call8524 = callmethodChecked(superDepth, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call8525 = callmethodChecked(call8524, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call8526 = callmethodChecked(call8525, "listMap()ancestors", [2, 1], call8523, var_blk, var_newChain);
                                                var call8527 = callmethodChecked(var_n, "args:=", [1], call8526);
                                                setLineNumber(1535);    // compilenode identifier
                                                var call8528 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                return call8528;
                                              };
                                              func8517.paramCounts = [1, 1];
                                              obj8500.methods["map()ancestors"] = func8517;
                                              func8517.definitionLine = 1530;
                                              func8517.definitionModule = "ast";
                                              var func8529 = function(argcv) {    // method pretty(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_depth = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                setModuleName("ast");
                                                setLineNumber(1538);    // compilenode string
                                                var string8530 = new GraceString(")<");
                                                onSelf = true;
                                                var call8532 = callmethodChecked(this, "value", [0]);
                                                var call8533 = callmethodChecked(call8532, "pretty", [1], var_depth);
                                                var string8535 = new GraceString("(");
                                                var call8537 = callmethodsuper(this, "pretty", [1], var_depth);
                                                var string8539 = new GraceString("");
                                                var opresult8541 = callmethodChecked(string8539, "++", [1], call8537);
                                                var opresult8543 = callmethodChecked(opresult8541, "++", [1], string8535);
                                                var opresult8545 = callmethodChecked(opresult8543, "++", [1], call8533);
                                                var opresult8547 = callmethodChecked(opresult8545, "++", [1], string8530);
                                                var var_s = opresult8547;
                                                setLineNumber(1539);    // compilenode block
                                                var block8548 = new GraceBlock(this, 1539, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block8548.real = function(var_each) {
                                                  setLineNumber(1539);    // compilenode identifier
                                                  var opresult8551 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                  var call8552 = callmethodChecked(var_each, "pretty", [1], opresult8551);
                                                  var opresult8555 = callmethodChecked(var_s, "++", [1], call8552);
                                                  var_s = opresult8555;
                                                  return GraceDone;
                                                };
                                                setLineNumber(1540);    // compilenode block
                                                var block8556 = new GraceBlock(this, 1540, 0);
                                                block8556.real = function() {
                                                  var string8557 = new GraceString(", ");
                                                  var opresult8560 = callmethodChecked(var_s, "++", [1], string8557);
                                                  var_s = opresult8560;
                                                  return GraceDone;
                                                };
                                                setLineNumber(1539);    // compilenode call
                                                onSelf = true;
                                                var call8561 = callmethodChecked(this, "args", [0]);
                                                var call8562 = callmethodChecked(call8561, "do()separatedBy", [1, 1], block8548, block8556);
                                                setLineNumber(1541);    // compilenode string
                                                var string8563 = new GraceString(">");
                                                var opresult8566 = callmethodChecked(var_s, "++", [1], string8563);
                                                return opresult8566;
                                              };
                                              func8529.paramCounts = [1];
                                              obj8500.methods["pretty"] = func8529;
                                              func8529.definitionLine = 1537;
                                              func8529.definitionModule = "ast";
                                              var func8567 = function(argcv) {    // method toGrace(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_depth = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                // Start argument checking
                                                curarg = 1;
                                                setLineNumber(1543);    // compilenode identifier
                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                curarg++;
                                                // End argument checking
                                                setModuleName("ast");
                                                setLineNumber(1544);    // compilenode string
                                                var string8568 = new GraceString("<");
                                                onSelf = true;
                                                var call8570 = callmethodChecked(this, "nameString", [0]);
                                                var opresult8572 = callmethodChecked(call8570, "++", [1], string8568);
                                                var var_s = opresult8572;
                                                setLineNumber(1545);    // compilenode block
                                                var block8573 = new GraceBlock(this, 1545, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block8573.real = function(var_each) {
                                                  setLineNumber(1545);    // compilenode identifier
                                                  var call8574 = callmethodChecked(var_each, "toGrace", [1], new GraceNum(0));
                                                  var opresult8577 = callmethodChecked(var_s, "++", [1], call8574);
                                                  var_s = opresult8577;
                                                  return GraceDone;
                                                };
                                                setLineNumber(1546);    // compilenode block
                                                var block8578 = new GraceBlock(this, 1546, 0);
                                                block8578.real = function() {
                                                  var string8579 = new GraceString(", ");
                                                  var opresult8582 = callmethodChecked(var_s, "++", [1], string8579);
                                                  var_s = opresult8582;
                                                  return GraceDone;
                                                };
                                                setLineNumber(1545);    // compilenode call
                                                onSelf = true;
                                                var call8583 = callmethodChecked(this, "args", [0]);
                                                var call8584 = callmethodChecked(call8583, "do()separatedBy", [1, 1], block8573, block8578);
                                                setLineNumber(1547);    // compilenode string
                                                var string8585 = new GraceString(">");
                                                var opresult8588 = callmethodChecked(var_s, "++", [1], string8585);
                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult8588)))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("result of method toGrace(1) does not have " + 
                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                return opresult8588;
                                              };
                                              func8567.paramTypes = [];
                                              func8567.paramTypes.push([type_Number, "depth"]);
                                              func8567.paramCounts = [1];
                                              obj8500.methods["toGrace"] = func8567;
                                              func8567.definitionLine = 1543;
                                              func8567.definitionModule = "ast";
                                              var func8589 = function(argcv) {    // method shallowCopy
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                setModuleName("ast");
                                                setLineNumber(1550);    // compilenode call
                                                onSelf = true;
                                                var call8590 = callmethodChecked(this, "value", [0]);
                                                onSelf = true;
                                                var call8591 = callmethodChecked(this, "args", [0]);
                                                var call8592 = callmethodChecked(var_genericNode, "new", [2], call8590, call8591);
                                                var call8593 = callmethodChecked(call8592, "shallowCopyFieldsFrom", [1], this);
                                                return call8593;
                                              };
                                              func8589.paramCounts = [0];
                                              obj8500.methods["shallowCopy"] = func8589;
                                              func8589.definitionLine = 1549;
                                              func8589.definitionModule = "ast";
                                              setLineNumber(1513);    // compilenode call
                                              var call8594 = callmethodChecked(superDepth, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call8595 = callmethodChecked(call8594, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call8596 = callmethodChecked(call8595, "baseNode()object", [0, 1], this);
                                              obj8500.superobj = call8596;
                                              if (call8596.data) obj8500.data = call8596.data;
                                              if (call8596.hasOwnProperty('_value'))
                                                  obj8500._value = call8596._value;
                                              setLineNumber(1514);    // compilenode string
                                              var string8597 = new GraceString("generic");
                                              obj8500.data["kind"] = string8597;
                                              var reader_ast_kind8598 = function() {
                                                return this.data["kind"];
                                              };
                                              reader_ast_kind8598.def = true;
                                              obj8500.methods["kind"] = reader_ast_kind8598;
                                              setLineNumber(1515);    // compilenode identifier
                                              obj8500.data["value"] = var_base;
                                              var reader_ast_value8599 = function() {
                                                return this.data["value"];
                                              };
                                              obj8500.methods["value"] = reader_ast_value8599;
                                              obj8500.data["value"] = var_base;
                                              var writer_ast_value8599 = function(argcv, o) {
                                                this.data["value"] = o;
                                                return GraceDone;
                                              };
                                              obj8500.methods["value:="] = writer_ast_value8599;
                                              obj8500.mutable = true;
                                              setLineNumber(1518);    // compilenode identifier
                                              obj8500.data["args"] = var_arguments;
                                              var reader_ast_args8600 = function() {
                                                return this.data["args"];
                                              };
                                              obj8500.methods["args"] = reader_ast_args8600;
                                              obj8500.data["args"] = var_arguments;
                                              var writer_ast_args8600 = function(argcv, o) {
                                                this.data["args"] = o;
                                                return GraceDone;
                                              };
                                              obj8500.methods["args:="] = writer_ast_args8600;
                                              obj8500.mutable = true;
                                              superDepth = origSuperDepth;
                                            };
                                            obj_init_8500.apply(obj8500, []);
                                            return obj8500;
                                          };
                                          func8499.paramCounts = [2];
                                          obj8497.methods["new"] = func8499;
                                          func8499.definitionLine = 1511;
                                          func8499.definitionModule = "ast";
                                            var func8601 = function(argcv) {    // method new(2     )()object
                                              var curarg = 1;
                                              var var_base = arguments[curarg];
                                              curarg++;
                                              var var_arguments = arguments[curarg];
                                              curarg++;
                                              var inheritingObject = arguments[curarg++];
                                              // Start argument processing
                                              curarg = 1;
                                              curarg++;
                                              curarg++;
                                              // End argument processing
                                              setModuleName("ast");
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var obj8602 = Grace_allocObject(null, "new");
                                              obj8602.definitionModule = "ast";
                                              obj8602.definitionLine = 1511;
                                              var inho8602 = inheritingObject;
                                              while (inho8602.superobj) inho8602 = inho8602.superobj;
                                              inho8602.superobj = obj8602;
                                              obj8602.data = inheritingObject.data;
                                              if (inheritingObject.hasOwnProperty('_value'))
                                                obj8602._value = inheritingObject._value;
                                              obj8602.outer = this;
                                              var reader_ast_outer8603 = function() {
                                                return this.outer;
                                              };
                                              obj8602.methods["outer"] = reader_ast_outer8603;
                                              var obj_init_8602 = function() {
                                                var origSuperDepth = superDepth;
                                                superDepth = obj8602;
                                                var func8604 = function(argcv) {    // method nameString
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                  setModuleName("ast");
                                                  setLineNumber(1519);    // compilenode call
                                                  onSelf = true;
                                                  var call8605 = callmethodChecked(this, "value", [0]);
                                                  var call8606 = callmethodChecked(call8605, "nameString", [0]);
                                                  return call8606;
                                                };
                                                func8604.paramCounts = [0];
                                                obj8602.methods["nameString"] = func8604;
                                                func8604.definitionLine = 1519;
                                                func8604.definitionModule = "ast";
                                                var func8607 = function(argcv) {    // method asString
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                  setModuleName("ast");
                                                  setLineNumber(1520);    // compilenode num
                                                  onSelf = true;
                                                  var call8608 = callmethodChecked(this, "toGrace", [1], new GraceNum(0));
                                                  return call8608;
                                                };
                                                func8607.paramCounts = [0];
                                                obj8602.methods["asString"] = func8607;
                                                func8607.definitionLine = 1520;
                                                func8607.definitionModule = "ast";
                                                var func8609 = function(argcv) {    // method accept(1)from(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_visitor = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                  var var_as = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[1] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                  // Start argument checking
                                                  curarg = 1;
                                                  setLineNumber(1521);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                  curarg++;
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("ast");
                                                  var if8610 = GraceDone;
                                                  setLineNumber(1522);    // compilenode identifier
                                                  var call8611 = callmethodChecked(var_visitor, "visitGeneric()up", [1, 1], this, var_as);
                                                  if (Grace_isTrue(call8611)) {
                                                    setLineNumber(1523);    // compilenode identifier
                                                    var call8612 = callmethodChecked(var_as, "extend", [1], this);
                                                    var var_newChain = call8612;
                                                    setLineNumber(1524);    // compilenode call
                                                    onSelf = true;
                                                    var call8613 = callmethodChecked(this, "value", [0]);
                                                    var call8614 = callmethodChecked(call8613, "accept()from", [1, 1], var_visitor, var_newChain);
                                                    setLineNumber(1525);    // compilenode call
                                                    onSelf = true;
                                                    var call8615 = callmethodChecked(this, "args", [0]);
                                                    var block8616 = new GraceBlock(this, 1525, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block8616.real = function(var_p) {
                                                      setLineNumber(1526);    // compilenode identifier
                                                      var call8617 = callmethodChecked(var_p, "accept()from", [1, 1], var_visitor, var_newChain);
                                                      return call8617;
                                                    };
                                                    var call8618 = callmethodChecked(var_prelude, "for()do", [1, 1], call8615, block8616);
                                                    if8610 = call8618;
                                                  }
                                                  return if8610;
                                                };
                                                func8609.paramTypes = [];
                                                func8609.paramTypes.push([]);
                                                func8609.paramTypes.push([]);
                                                func8609.paramCounts = [1, 1];
                                                obj8602.methods["accept()from"] = func8609;
                                                func8609.definitionLine = 1521;
                                                func8609.definitionModule = "ast";
                                                var func8619 = function(argcv) {    // method map(1)ancestors(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_blk = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                  var var_as = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[1] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                  setModuleName("ast");
                                                  setLineNumber(1531);    // compilenode call
                                                  onSelf = true;
                                                  var call8620 = callmethodChecked(this, "shallowCopy", [0]);
                                                  var var_n = call8620;
                                                  setLineNumber(1532);    // compilenode identifier
                                                  var call8621 = callmethodChecked(var_as, "extend", [1], var_n);
                                                  var var_newChain = call8621;
                                                  setLineNumber(1533);    // compilenode call
                                                  onSelf = true;
                                                  var call8622 = callmethodChecked(this, "value", [0]);
                                                  var call8623 = callmethodChecked(call8622, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                  var call8624 = callmethodChecked(var_n, "value:=", [1], call8623);
                                                  setLineNumber(1534);    // compilenode call
                                                  onSelf = true;
                                                  var call8625 = callmethodChecked(this, "args", [0]);
                                                  var call8626 = callmethodChecked(superDepth, "outer", [0]);
                                                  onOuter = true;
                                                  onSelf = true;
                                                  var call8627 = callmethodChecked(call8626, "outer", [0]);
                                                  onOuter = true;
                                                  onSelf = true;
                                                  var call8628 = callmethodChecked(call8627, "listMap()ancestors", [2, 1], call8625, var_blk, var_newChain);
                                                  var call8629 = callmethodChecked(var_n, "args:=", [1], call8628);
                                                  setLineNumber(1535);    // compilenode identifier
                                                  var call8630 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                  return call8630;
                                                };
                                                func8619.paramCounts = [1, 1];
                                                obj8602.methods["map()ancestors"] = func8619;
                                                func8619.definitionLine = 1530;
                                                func8619.definitionModule = "ast";
                                                var func8631 = function(argcv) {    // method pretty(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_depth = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                  setModuleName("ast");
                                                  setLineNumber(1538);    // compilenode string
                                                  var string8632 = new GraceString(")<");
                                                  onSelf = true;
                                                  var call8634 = callmethodChecked(this, "value", [0]);
                                                  var call8635 = callmethodChecked(call8634, "pretty", [1], var_depth);
                                                  var string8637 = new GraceString("(");
                                                  var call8639 = callmethodsuper(this, "pretty", [1], var_depth);
                                                  var string8641 = new GraceString("");
                                                  var opresult8643 = callmethodChecked(string8641, "++", [1], call8639);
                                                  var opresult8645 = callmethodChecked(opresult8643, "++", [1], string8637);
                                                  var opresult8647 = callmethodChecked(opresult8645, "++", [1], call8635);
                                                  var opresult8649 = callmethodChecked(opresult8647, "++", [1], string8632);
                                                  var var_s = opresult8649;
                                                  setLineNumber(1539);    // compilenode block
                                                  var block8650 = new GraceBlock(this, 1539, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block8650.real = function(var_each) {
                                                    setLineNumber(1539);    // compilenode identifier
                                                    var opresult8653 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                    var call8654 = callmethodChecked(var_each, "pretty", [1], opresult8653);
                                                    var opresult8657 = callmethodChecked(var_s, "++", [1], call8654);
                                                    var_s = opresult8657;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1540);    // compilenode block
                                                  var block8658 = new GraceBlock(this, 1540, 0);
                                                  block8658.real = function() {
                                                    var string8659 = new GraceString(", ");
                                                    var opresult8662 = callmethodChecked(var_s, "++", [1], string8659);
                                                    var_s = opresult8662;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1539);    // compilenode call
                                                  onSelf = true;
                                                  var call8663 = callmethodChecked(this, "args", [0]);
                                                  var call8664 = callmethodChecked(call8663, "do()separatedBy", [1, 1], block8650, block8658);
                                                  setLineNumber(1541);    // compilenode string
                                                  var string8665 = new GraceString(">");
                                                  var opresult8668 = callmethodChecked(var_s, "++", [1], string8665);
                                                  return opresult8668;
                                                };
                                                func8631.paramCounts = [1];
                                                obj8602.methods["pretty"] = func8631;
                                                func8631.definitionLine = 1537;
                                                func8631.definitionModule = "ast";
                                                var func8669 = function(argcv) {    // method toGrace(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_depth = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                  // Start argument checking
                                                  curarg = 1;
                                                  setLineNumber(1543);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("ast");
                                                  setLineNumber(1544);    // compilenode string
                                                  var string8670 = new GraceString("<");
                                                  onSelf = true;
                                                  var call8672 = callmethodChecked(this, "nameString", [0]);
                                                  var opresult8674 = callmethodChecked(call8672, "++", [1], string8670);
                                                  var var_s = opresult8674;
                                                  setLineNumber(1545);    // compilenode block
                                                  var block8675 = new GraceBlock(this, 1545, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block8675.real = function(var_each) {
                                                    setLineNumber(1545);    // compilenode identifier
                                                    var call8676 = callmethodChecked(var_each, "toGrace", [1], new GraceNum(0));
                                                    var opresult8679 = callmethodChecked(var_s, "++", [1], call8676);
                                                    var_s = opresult8679;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1546);    // compilenode block
                                                  var block8680 = new GraceBlock(this, 1546, 0);
                                                  block8680.real = function() {
                                                    var string8681 = new GraceString(", ");
                                                    var opresult8684 = callmethodChecked(var_s, "++", [1], string8681);
                                                    var_s = opresult8684;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1545);    // compilenode call
                                                  onSelf = true;
                                                  var call8685 = callmethodChecked(this, "args", [0]);
                                                  var call8686 = callmethodChecked(call8685, "do()separatedBy", [1, 1], block8675, block8680);
                                                  setLineNumber(1547);    // compilenode string
                                                  var string8687 = new GraceString(">");
                                                  var opresult8690 = callmethodChecked(var_s, "++", [1], string8687);
                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult8690)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method toGrace(1) does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  return opresult8690;
                                                };
                                                func8669.paramTypes = [];
                                                func8669.paramTypes.push([type_Number, "depth"]);
                                                func8669.paramCounts = [1];
                                                obj8602.methods["toGrace"] = func8669;
                                                func8669.definitionLine = 1543;
                                                func8669.definitionModule = "ast";
                                                var func8691 = function(argcv) {    // method shallowCopy
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                  setModuleName("ast");
                                                  setLineNumber(1550);    // compilenode call
                                                  onSelf = true;
                                                  var call8692 = callmethodChecked(this, "value", [0]);
                                                  onSelf = true;
                                                  var call8693 = callmethodChecked(this, "args", [0]);
                                                  var call8694 = callmethodChecked(var_genericNode, "new", [2], call8692, call8693);
                                                  var call8695 = callmethodChecked(call8694, "shallowCopyFieldsFrom", [1], this);
                                                  return call8695;
                                                };
                                                func8691.paramCounts = [0];
                                                obj8602.methods["shallowCopy"] = func8691;
                                                func8691.definitionLine = 1549;
                                                func8691.definitionModule = "ast";
                                                setLineNumber(1513);    // compilenode call
                                                var call8696 = callmethodChecked(superDepth, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call8697 = callmethodChecked(call8696, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call8698 = callmethodChecked(call8697, "baseNode()object", [0, 1], this);
                                                obj8602.superobj = call8698;
                                                if (call8698.data) obj8602.data = call8698.data;
                                                if (call8698.hasOwnProperty('_value'))
                                                    obj8602._value = call8698._value;
                                                setLineNumber(1514);    // compilenode string
                                                var string8699 = new GraceString("generic");
                                                obj8602.data["kind"] = string8699;
                                                var reader_ast_kind8700 = function() {
                                                  return this.data["kind"];
                                                };
                                                reader_ast_kind8700.def = true;
                                                obj8602.methods["kind"] = reader_ast_kind8700;
                                                setLineNumber(1515);    // compilenode identifier
                                                obj8602.data["value"] = var_base;
                                                var reader_ast_value8701 = function() {
                                                  return this.data["value"];
                                                };
                                                obj8602.methods["value"] = reader_ast_value8701;
                                                obj8602.data["value"] = var_base;
                                                var writer_ast_value8701 = function(argcv, o) {
                                                  this.data["value"] = o;
                                                  return GraceDone;
                                                };
                                                obj8602.methods["value:="] = writer_ast_value8701;
                                                obj8602.mutable = true;
                                                setLineNumber(1518);    // compilenode identifier
                                                obj8602.data["args"] = var_arguments;
                                                var reader_ast_args8702 = function() {
                                                  return this.data["args"];
                                                };
                                                obj8602.methods["args"] = reader_ast_args8702;
                                                obj8602.data["args"] = var_arguments;
                                                var writer_ast_args8702 = function(argcv, o) {
                                                  this.data["args"] = o;
                                                  return GraceDone;
                                                };
                                                obj8602.methods["args:="] = writer_ast_args8702;
                                                obj8602.mutable = true;
                                                superDepth = origSuperDepth;
                                              };
                                              obj_init_8602.apply(inheritingObject, []);
                                              return obj8602;
                                              };
                                              obj8497.methods["new()object"] = func8601;
                                            superDepth = origSuperDepth;
                                          };
                                          obj_init_8497.apply(obj8497, []);
                                          var var_genericNode = obj8497;
                                          setLineNumber(1513);    // compilenode method
                                          var func8703 = function(argcv) {    // method genericNode
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for genericNode"));
                                            setModuleName("ast");
                                            // genericNode is a simple accessor - elide try ... catch
                                            setLineNumber(1510);    // compilenode identifier
                                            return var_genericNode;
                                          };
                                          func8703.paramCounts = [0];
                                          this.methods["genericNode"] = func8703;
                                          func8703.definitionLine = 1513;
                                          func8703.definitionModule = "ast";
                                          this.methods["genericNode"].debug = "def";
                                          setLineNumber(1555);    // compilenode object
                                          var obj8704 = Grace_allocObject(GraceObject, "typeParametersNode");
                                          obj8704.definitionModule = "ast";
                                          obj8704.definitionLine = 1555;
                                          obj8704.outer = this;
                                          var reader_ast_outer8705 = function() {
                                            return this.outer;
                                          };
                                          obj8704.methods["outer"] = reader_ast_outer8705;
                                          var obj_init_8704 = function() {
                                            var origSuperDepth = superDepth;
                                            superDepth = obj8704;
                                            var func8706 = function(argcv) {    // method new(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_params__39__ = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(1)"));
                                              setModuleName("ast");
                                              setLineNumber(1556);    // compilenode object
                                              var obj8707 = Grace_allocObject(null, "typeParametersNode.new");
                                              obj8707.definitionModule = "ast";
                                              obj8707.definitionLine = 1556;
                                              obj8707.outer = this;
                                              var reader_ast_outer8708 = function() {
                                                return this.outer;
                                              };
                                              obj8707.methods["outer"] = reader_ast_outer8708;
                                              var obj_init_8707 = function() {
                                                var origSuperDepth = superDepth;
                                                superDepth = obj8707;
                                                var func8709 = function(argcv) {    // method asString
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                  setModuleName("ast");
                                                  setLineNumber(1560);    // compilenode num
                                                  onSelf = true;
                                                  var call8710 = callmethodChecked(this, "toGrace", [1], new GraceNum(0));
                                                  return call8710;
                                                };
                                                func8709.paramCounts = [0];
                                                obj8707.methods["asString"] = func8709;
                                                func8709.definitionLine = 1560;
                                                func8709.definitionModule = "ast";
                                                var func8711 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_as = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                  setModuleName("ast");
                                                  setLineNumber(1561);    // compilenode identifier
                                                  var call8712 = callmethodChecked(var_k, "typeparam", [0]);
                                                  return call8712;
                                                };
                                                func8711.paramCounts = [1];
                                                obj8707.methods["declarationKindWithAncestors"] = func8711;
                                                func8711.definitionLine = 1561;
                                                func8711.definitionModule = "ast";
                                                var func8713 = function(argcv) {    // method accept(1)from(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_visitor = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                  var var_as = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[1] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                  // Start argument checking
                                                  curarg = 1;
                                                  setLineNumber(1563);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                  curarg++;
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("ast");
                                                  var if8714 = GraceDone;
                                                  setLineNumber(1564);    // compilenode identifier
                                                  var call8715 = callmethodChecked(var_visitor, "visitTypeParameters()up", [1, 1], this, var_as);
                                                  if (Grace_isTrue(call8715)) {
                                                    setLineNumber(1565);    // compilenode identifier
                                                    var call8716 = callmethodChecked(var_as, "extend", [1], this);
                                                    var var_newChain = call8716;
                                                    setLineNumber(1566);    // compilenode block
                                                    var block8717 = new GraceBlock(this, 1566, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block8717.real = function(var_p) {
                                                      setLineNumber(1567);    // compilenode identifier
                                                      var call8718 = callmethodChecked(var_p, "accept()from", [1, 1], var_visitor, var_newChain);
                                                      return call8718;
                                                    };
                                                    setLineNumber(1566);    // compilenode call
                                                    onSelf = true;
                                                    var call8719 = callmethodChecked(this, "params", [0]);
                                                    var call8720 = callmethodChecked(call8719, "do", [1], block8717);
                                                    if8714 = call8720;
                                                  }
                                                  return if8714;
                                                };
                                                func8713.paramTypes = [];
                                                func8713.paramTypes.push([]);
                                                func8713.paramTypes.push([]);
                                                func8713.paramCounts = [1, 1];
                                                obj8707.methods["accept()from"] = func8713;
                                                func8713.definitionLine = 1563;
                                                func8713.definitionModule = "ast";
                                                var func8721 = function(argcv) {    // method do(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_blk = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do(1)"));
                                                  setModuleName("ast");
                                                  setLineNumber(1572);    // compilenode call
                                                  onSelf = true;
                                                  var call8722 = callmethodChecked(this, "params", [0]);
                                                  var call8723 = callmethodChecked(call8722, "do", [1], var_blk);
                                                  return call8723;
                                                };
                                                func8721.paramCounts = [1];
                                                obj8707.methods["do"] = func8721;
                                                func8721.definitionLine = 1571;
                                                func8721.definitionModule = "ast";
                                                var func8724 = function(argcv) {    // method size
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                                  setModuleName("ast");
                                                  setLineNumber(1574);    // compilenode call
                                                  onSelf = true;
                                                  var call8725 = callmethodChecked(this, "params", [0]);
                                                  var call8726 = callmethodChecked(call8725, "size", [0]);
                                                  return call8726;
                                                };
                                                func8724.paramCounts = [0];
                                                obj8707.methods["size"] = func8724;
                                                func8724.definitionLine = 1574;
                                                func8724.definitionModule = "ast";
                                                var func8727 = function(argcv) {    // method map(1)ancestors(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_blk = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                  var var_as = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[1] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                  setModuleName("ast");
                                                  setLineNumber(1576);    // compilenode call
                                                  onSelf = true;
                                                  var call8728 = callmethodChecked(this, "shallowCopy", [0]);
                                                  var var_n = call8728;
                                                  setLineNumber(1577);    // compilenode identifier
                                                  var call8729 = callmethodChecked(var_as, "extend", [1], var_n);
                                                  var var_newChain = call8729;
                                                  setLineNumber(1578);    // compilenode call
                                                  onSelf = true;
                                                  var call8730 = callmethodChecked(this, "params", [0]);
                                                  var call8731 = callmethodChecked(superDepth, "outer", [0]);
                                                  onOuter = true;
                                                  onSelf = true;
                                                  var call8732 = callmethodChecked(call8731, "outer", [0]);
                                                  onOuter = true;
                                                  onSelf = true;
                                                  var call8733 = callmethodChecked(call8732, "listMap()ancestors", [2, 1], call8730, var_blk, var_newChain);
                                                  var call8734 = callmethodChecked(var_n, "params:=", [1], call8733);
                                                  setLineNumber(1579);    // compilenode identifier
                                                  var call8735 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                  return call8735;
                                                };
                                                func8727.paramCounts = [1, 1];
                                                obj8707.methods["map()ancestors"] = func8727;
                                                func8727.definitionLine = 1575;
                                                func8727.definitionModule = "ast";
                                                var func8736 = function(argcv) {    // method pretty(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_depth = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                  setModuleName("ast");
                                                  setLineNumber(1582);    // compilenode string
                                                  var string8737 = new GraceString("");
                                                  var var_spc = string8737;
                                                  setLineNumber(1583);    // compilenode num
                                                  var opresult8740 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                  var block8741 = new GraceBlock(this, 1583, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block8741.real = function(var_i) {
                                                    setLineNumber(1584);    // compilenode string
                                                    var string8742 = new GraceString("  ");
                                                    var opresult8745 = callmethodChecked(var_spc, "++", [1], string8742);
                                                    var_spc = opresult8745;
                                                    return GraceDone;
                                                  };
                                                  var call8746 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult8740, block8741);
                                                  setLineNumber(1586);    // compilenode string
                                                  var string8747 = new GraceString("<");
                                                  var call8749 = callmethodsuper(this, "pretty", [1], var_depth);
                                                  var opresult8752 = callmethodChecked(var_spc, "++", [1], call8749);
                                                  var opresult8754 = callmethodChecked(opresult8752, "++", [1], string8747);
                                                  var var_s = opresult8754;
                                                  setLineNumber(1587);    // compilenode block
                                                  var block8755 = new GraceBlock(this, 1587, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block8755.real = function(var_each) {
                                                    setLineNumber(1587);    // compilenode identifier
                                                    var opresult8758 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                    var call8759 = callmethodChecked(var_each, "pretty", [1], opresult8758);
                                                    var opresult8762 = callmethodChecked(var_s, "++", [1], call8759);
                                                    var_s = opresult8762;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1588);    // compilenode block
                                                  var block8763 = new GraceBlock(this, 1588, 0);
                                                  block8763.real = function() {
                                                    var string8764 = new GraceString(", ");
                                                    var opresult8767 = callmethodChecked(var_s, "++", [1], string8764);
                                                    var_s = opresult8767;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1587);    // compilenode call
                                                  onSelf = true;
                                                  var call8768 = callmethodChecked(this, "params", [0]);
                                                  var call8769 = callmethodChecked(call8768, "do()separatedBy", [1, 1], block8755, block8763);
                                                  setLineNumber(1589);    // compilenode string
                                                  var string8770 = new GraceString(">");
                                                  var opresult8773 = callmethodChecked(var_s, "++", [1], string8770);
                                                  return opresult8773;
                                                };
                                                func8736.paramCounts = [1];
                                                obj8707.methods["pretty"] = func8736;
                                                func8736.definitionLine = 1581;
                                                func8736.definitionModule = "ast";
                                                var func8774 = function(argcv) {    // method toGrace(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_depth = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                  // Start argument checking
                                                  curarg = 1;
                                                  setLineNumber(1591);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("ast");
                                                  setLineNumber(1592);    // compilenode string
                                                  var string8775 = new GraceString("<");
                                                  var var_s = string8775;
                                                  setLineNumber(1593);    // compilenode block
                                                  var block8776 = new GraceBlock(this, 1593, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block8776.real = function(var_each) {
                                                    setLineNumber(1593);    // compilenode string
                                                    var string8777 = new GraceString("");
                                                    var call8779 = callmethodChecked(var_each, "toGrace", [1], var_depth);
                                                    var string8781 = new GraceString("");
                                                    var string8784 = new GraceString("");
                                                    var opresult8786 = callmethodChecked(string8784, "++", [1], var_s);
                                                    var opresult8788 = callmethodChecked(opresult8786, "++", [1], string8781);
                                                    var opresult8790 = callmethodChecked(opresult8788, "++", [1], call8779);
                                                    var opresult8792 = callmethodChecked(opresult8790, "++", [1], string8777);
                                                    var_s = opresult8792;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1594);    // compilenode block
                                                  var block8793 = new GraceBlock(this, 1594, 0);
                                                  block8793.real = function() {
                                                    var string8794 = new GraceString(", ");
                                                    var opresult8797 = callmethodChecked(var_s, "++", [1], string8794);
                                                    var_s = opresult8797;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1593);    // compilenode call
                                                  onSelf = true;
                                                  var call8798 = callmethodChecked(this, "params", [0]);
                                                  var call8799 = callmethodChecked(call8798, "do()separatedBy", [1, 1], block8776, block8793);
                                                  setLineNumber(1595);    // compilenode string
                                                  var string8800 = new GraceString(">");
                                                  var opresult8803 = callmethodChecked(var_s, "++", [1], string8800);
                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult8803)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method toGrace(1) does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  return opresult8803;
                                                };
                                                func8774.paramTypes = [];
                                                func8774.paramTypes.push([type_Number, "depth"]);
                                                func8774.paramCounts = [1];
                                                obj8707.methods["toGrace"] = func8774;
                                                func8774.definitionLine = 1591;
                                                func8774.definitionModule = "ast";
                                                var func8804 = function(argcv) {    // method shallowCopy
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                  setModuleName("ast");
                                                  setLineNumber(1598);    // compilenode identifier
                                                  var call8805 = callmethodChecked(var_typeParametersNode, "new", [1], var_emptySeq);
                                                  var call8806 = callmethodChecked(call8805, "shallowCopyFieldsFrom", [1], this);
                                                  return call8806;
                                                };
                                                func8804.paramCounts = [0];
                                                obj8707.methods["shallowCopy"] = func8804;
                                                func8804.definitionLine = 1597;
                                                func8804.definitionModule = "ast";
                                                setLineNumber(1557);    // compilenode call
                                                var call8807 = callmethodChecked(superDepth, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call8808 = callmethodChecked(call8807, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call8809 = callmethodChecked(call8808, "baseNode()object", [0, 1], this);
                                                obj8707.superobj = call8809;
                                                if (call8809.data) obj8707.data = call8809.data;
                                                if (call8809.hasOwnProperty('_value'))
                                                    obj8707._value = call8809._value;
                                                setLineNumber(1558);    // compilenode string
                                                var string8810 = new GraceString("typeparams");
                                                obj8707.data["kind"] = string8810;
                                                var reader_ast_kind8811 = function() {
                                                  return this.data["kind"];
                                                };
                                                reader_ast_kind8811.def = true;
                                                obj8707.methods["kind"] = reader_ast_kind8811;
                                                setLineNumber(1559);    // compilenode identifier
                                                obj8707.data["params"] = var_params__39__;
                                                var reader_ast_params8812 = function() {
                                                  return this.data["params"];
                                                };
                                                obj8707.methods["params"] = reader_ast_params8812;
                                                obj8707.data["params"] = var_params__39__;
                                                var writer_ast_params8812 = function(argcv, o) {
                                                  this.data["params"] = o;
                                                  return GraceDone;
                                                };
                                                obj8707.methods["params:="] = writer_ast_params8812;
                                                obj8707.mutable = true;
                                                superDepth = origSuperDepth;
                                              };
                                              obj_init_8707.apply(obj8707, []);
                                              return obj8707;
                                            };
                                            func8706.paramCounts = [1];
                                            obj8704.methods["new"] = func8706;
                                            func8706.definitionLine = 1556;
                                            func8706.definitionModule = "ast";
                                              var func8813 = function(argcv) {    // method new(1     )()object
                                                var curarg = 1;
                                                var var_params__39__ = arguments[curarg];
                                                curarg++;
                                                var inheritingObject = arguments[curarg++];
                                                // Start argument processing
                                                curarg = 1;
                                                curarg++;
                                                // End argument processing
                                                setModuleName("ast");
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var obj8814 = Grace_allocObject(null, "new");
                                                obj8814.definitionModule = "ast";
                                                obj8814.definitionLine = 1556;
                                                var inho8814 = inheritingObject;
                                                while (inho8814.superobj) inho8814 = inho8814.superobj;
                                                inho8814.superobj = obj8814;
                                                obj8814.data = inheritingObject.data;
                                                if (inheritingObject.hasOwnProperty('_value'))
                                                  obj8814._value = inheritingObject._value;
                                                obj8814.outer = this;
                                                var reader_ast_outer8815 = function() {
                                                  return this.outer;
                                                };
                                                obj8814.methods["outer"] = reader_ast_outer8815;
                                                var obj_init_8814 = function() {
                                                  var origSuperDepth = superDepth;
                                                  superDepth = obj8814;
                                                  var func8816 = function(argcv) {    // method asString
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                    setModuleName("ast");
                                                    setLineNumber(1560);    // compilenode num
                                                    onSelf = true;
                                                    var call8817 = callmethodChecked(this, "toGrace", [1], new GraceNum(0));
                                                    return call8817;
                                                  };
                                                  func8816.paramCounts = [0];
                                                  obj8814.methods["asString"] = func8816;
                                                  func8816.definitionLine = 1560;
                                                  func8816.definitionModule = "ast";
                                                  var func8818 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                    setModuleName("ast");
                                                    setLineNumber(1561);    // compilenode identifier
                                                    var call8819 = callmethodChecked(var_k, "typeparam", [0]);
                                                    return call8819;
                                                  };
                                                  func8818.paramCounts = [1];
                                                  obj8814.methods["declarationKindWithAncestors"] = func8818;
                                                  func8818.definitionLine = 1561;
                                                  func8818.definitionModule = "ast";
                                                  var func8820 = function(argcv) {    // method accept(1)from(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_visitor = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[1] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                    // Start argument checking
                                                    curarg = 1;
                                                    setLineNumber(1563);    // compilenode identifier
                                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                    curarg++;
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("ast");
                                                    var if8821 = GraceDone;
                                                    setLineNumber(1564);    // compilenode identifier
                                                    var call8822 = callmethodChecked(var_visitor, "visitTypeParameters()up", [1, 1], this, var_as);
                                                    if (Grace_isTrue(call8822)) {
                                                      setLineNumber(1565);    // compilenode identifier
                                                      var call8823 = callmethodChecked(var_as, "extend", [1], this);
                                                      var var_newChain = call8823;
                                                      setLineNumber(1566);    // compilenode block
                                                      var block8824 = new GraceBlock(this, 1566, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block8824.real = function(var_p) {
                                                        setLineNumber(1567);    // compilenode identifier
                                                        var call8825 = callmethodChecked(var_p, "accept()from", [1, 1], var_visitor, var_newChain);
                                                        return call8825;
                                                      };
                                                      setLineNumber(1566);    // compilenode call
                                                      onSelf = true;
                                                      var call8826 = callmethodChecked(this, "params", [0]);
                                                      var call8827 = callmethodChecked(call8826, "do", [1], block8824);
                                                      if8821 = call8827;
                                                    }
                                                    return if8821;
                                                  };
                                                  func8820.paramTypes = [];
                                                  func8820.paramTypes.push([]);
                                                  func8820.paramTypes.push([]);
                                                  func8820.paramCounts = [1, 1];
                                                  obj8814.methods["accept()from"] = func8820;
                                                  func8820.definitionLine = 1563;
                                                  func8820.definitionModule = "ast";
                                                  var func8828 = function(argcv) {    // method do(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_blk = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do(1)"));
                                                    setModuleName("ast");
                                                    setLineNumber(1572);    // compilenode call
                                                    onSelf = true;
                                                    var call8829 = callmethodChecked(this, "params", [0]);
                                                    var call8830 = callmethodChecked(call8829, "do", [1], var_blk);
                                                    return call8830;
                                                  };
                                                  func8828.paramCounts = [1];
                                                  obj8814.methods["do"] = func8828;
                                                  func8828.definitionLine = 1571;
                                                  func8828.definitionModule = "ast";
                                                  var func8831 = function(argcv) {    // method size
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                                    setModuleName("ast");
                                                    setLineNumber(1574);    // compilenode call
                                                    onSelf = true;
                                                    var call8832 = callmethodChecked(this, "params", [0]);
                                                    var call8833 = callmethodChecked(call8832, "size", [0]);
                                                    return call8833;
                                                  };
                                                  func8831.paramCounts = [0];
                                                  obj8814.methods["size"] = func8831;
                                                  func8831.definitionLine = 1574;
                                                  func8831.definitionModule = "ast";
                                                  var func8834 = function(argcv) {    // method map(1)ancestors(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_blk = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[1] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                    setModuleName("ast");
                                                    setLineNumber(1576);    // compilenode call
                                                    onSelf = true;
                                                    var call8835 = callmethodChecked(this, "shallowCopy", [0]);
                                                    var var_n = call8835;
                                                    setLineNumber(1577);    // compilenode identifier
                                                    var call8836 = callmethodChecked(var_as, "extend", [1], var_n);
                                                    var var_newChain = call8836;
                                                    setLineNumber(1578);    // compilenode call
                                                    onSelf = true;
                                                    var call8837 = callmethodChecked(this, "params", [0]);
                                                    var call8838 = callmethodChecked(superDepth, "outer", [0]);
                                                    onOuter = true;
                                                    onSelf = true;
                                                    var call8839 = callmethodChecked(call8838, "outer", [0]);
                                                    onOuter = true;
                                                    onSelf = true;
                                                    var call8840 = callmethodChecked(call8839, "listMap()ancestors", [2, 1], call8837, var_blk, var_newChain);
                                                    var call8841 = callmethodChecked(var_n, "params:=", [1], call8840);
                                                    setLineNumber(1579);    // compilenode identifier
                                                    var call8842 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                    return call8842;
                                                  };
                                                  func8834.paramCounts = [1, 1];
                                                  obj8814.methods["map()ancestors"] = func8834;
                                                  func8834.definitionLine = 1575;
                                                  func8834.definitionModule = "ast";
                                                  var func8843 = function(argcv) {    // method pretty(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_depth = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                    setModuleName("ast");
                                                    setLineNumber(1582);    // compilenode string
                                                    var string8844 = new GraceString("");
                                                    var var_spc = string8844;
                                                    setLineNumber(1583);    // compilenode num
                                                    var opresult8847 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                    var block8848 = new GraceBlock(this, 1583, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block8848.real = function(var_i) {
                                                      setLineNumber(1584);    // compilenode string
                                                      var string8849 = new GraceString("  ");
                                                      var opresult8852 = callmethodChecked(var_spc, "++", [1], string8849);
                                                      var_spc = opresult8852;
                                                      return GraceDone;
                                                    };
                                                    var call8853 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult8847, block8848);
                                                    setLineNumber(1586);    // compilenode string
                                                    var string8854 = new GraceString("<");
                                                    var call8856 = callmethodsuper(this, "pretty", [1], var_depth);
                                                    var opresult8859 = callmethodChecked(var_spc, "++", [1], call8856);
                                                    var opresult8861 = callmethodChecked(opresult8859, "++", [1], string8854);
                                                    var var_s = opresult8861;
                                                    setLineNumber(1587);    // compilenode block
                                                    var block8862 = new GraceBlock(this, 1587, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block8862.real = function(var_each) {
                                                      setLineNumber(1587);    // compilenode identifier
                                                      var opresult8865 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                      var call8866 = callmethodChecked(var_each, "pretty", [1], opresult8865);
                                                      var opresult8869 = callmethodChecked(var_s, "++", [1], call8866);
                                                      var_s = opresult8869;
                                                      return GraceDone;
                                                    };
                                                    setLineNumber(1588);    // compilenode block
                                                    var block8870 = new GraceBlock(this, 1588, 0);
                                                    block8870.real = function() {
                                                      var string8871 = new GraceString(", ");
                                                      var opresult8874 = callmethodChecked(var_s, "++", [1], string8871);
                                                      var_s = opresult8874;
                                                      return GraceDone;
                                                    };
                                                    setLineNumber(1587);    // compilenode call
                                                    onSelf = true;
                                                    var call8875 = callmethodChecked(this, "params", [0]);
                                                    var call8876 = callmethodChecked(call8875, "do()separatedBy", [1, 1], block8862, block8870);
                                                    setLineNumber(1589);    // compilenode string
                                                    var string8877 = new GraceString(">");
                                                    var opresult8880 = callmethodChecked(var_s, "++", [1], string8877);
                                                    return opresult8880;
                                                  };
                                                  func8843.paramCounts = [1];
                                                  obj8814.methods["pretty"] = func8843;
                                                  func8843.definitionLine = 1581;
                                                  func8843.definitionModule = "ast";
                                                  var func8881 = function(argcv) {    // method toGrace(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_depth = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                    // Start argument checking
                                                    curarg = 1;
                                                    setLineNumber(1591);    // compilenode identifier
                                                    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("ast");
                                                    setLineNumber(1592);    // compilenode string
                                                    var string8882 = new GraceString("<");
                                                    var var_s = string8882;
                                                    setLineNumber(1593);    // compilenode block
                                                    var block8883 = new GraceBlock(this, 1593, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block8883.real = function(var_each) {
                                                      setLineNumber(1593);    // compilenode string
                                                      var string8884 = new GraceString("");
                                                      var call8886 = callmethodChecked(var_each, "toGrace", [1], var_depth);
                                                      var string8888 = new GraceString("");
                                                      var string8891 = new GraceString("");
                                                      var opresult8893 = callmethodChecked(string8891, "++", [1], var_s);
                                                      var opresult8895 = callmethodChecked(opresult8893, "++", [1], string8888);
                                                      var opresult8897 = callmethodChecked(opresult8895, "++", [1], call8886);
                                                      var opresult8899 = callmethodChecked(opresult8897, "++", [1], string8884);
                                                      var_s = opresult8899;
                                                      return GraceDone;
                                                    };
                                                    setLineNumber(1594);    // compilenode block
                                                    var block8900 = new GraceBlock(this, 1594, 0);
                                                    block8900.real = function() {
                                                      var string8901 = new GraceString(", ");
                                                      var opresult8904 = callmethodChecked(var_s, "++", [1], string8901);
                                                      var_s = opresult8904;
                                                      return GraceDone;
                                                    };
                                                    setLineNumber(1593);    // compilenode call
                                                    onSelf = true;
                                                    var call8905 = callmethodChecked(this, "params", [0]);
                                                    var call8906 = callmethodChecked(call8905, "do()separatedBy", [1, 1], block8883, block8900);
                                                    setLineNumber(1595);    // compilenode string
                                                    var string8907 = new GraceString(">");
                                                    var opresult8910 = callmethodChecked(var_s, "++", [1], string8907);
                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult8910)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method toGrace(1) does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    return opresult8910;
                                                  };
                                                  func8881.paramTypes = [];
                                                  func8881.paramTypes.push([type_Number, "depth"]);
                                                  func8881.paramCounts = [1];
                                                  obj8814.methods["toGrace"] = func8881;
                                                  func8881.definitionLine = 1591;
                                                  func8881.definitionModule = "ast";
                                                  var func8911 = function(argcv) {    // method shallowCopy
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                    setModuleName("ast");
                                                    setLineNumber(1598);    // compilenode identifier
                                                    var call8912 = callmethodChecked(var_typeParametersNode, "new", [1], var_emptySeq);
                                                    var call8913 = callmethodChecked(call8912, "shallowCopyFieldsFrom", [1], this);
                                                    return call8913;
                                                  };
                                                  func8911.paramCounts = [0];
                                                  obj8814.methods["shallowCopy"] = func8911;
                                                  func8911.definitionLine = 1597;
                                                  func8911.definitionModule = "ast";
                                                  setLineNumber(1557);    // compilenode call
                                                  var call8914 = callmethodChecked(superDepth, "outer", [0]);
                                                  onOuter = true;
                                                  onSelf = true;
                                                  var call8915 = callmethodChecked(call8914, "outer", [0]);
                                                  onOuter = true;
                                                  onSelf = true;
                                                  var call8916 = callmethodChecked(call8915, "baseNode()object", [0, 1], this);
                                                  obj8814.superobj = call8916;
                                                  if (call8916.data) obj8814.data = call8916.data;
                                                  if (call8916.hasOwnProperty('_value'))
                                                      obj8814._value = call8916._value;
                                                  setLineNumber(1558);    // compilenode string
                                                  var string8917 = new GraceString("typeparams");
                                                  obj8814.data["kind"] = string8917;
                                                  var reader_ast_kind8918 = function() {
                                                    return this.data["kind"];
                                                  };
                                                  reader_ast_kind8918.def = true;
                                                  obj8814.methods["kind"] = reader_ast_kind8918;
                                                  setLineNumber(1559);    // compilenode identifier
                                                  obj8814.data["params"] = var_params__39__;
                                                  var reader_ast_params8919 = function() {
                                                    return this.data["params"];
                                                  };
                                                  obj8814.methods["params"] = reader_ast_params8919;
                                                  obj8814.data["params"] = var_params__39__;
                                                  var writer_ast_params8919 = function(argcv, o) {
                                                    this.data["params"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj8814.methods["params:="] = writer_ast_params8919;
                                                  obj8814.mutable = true;
                                                  superDepth = origSuperDepth;
                                                };
                                                obj_init_8814.apply(inheritingObject, []);
                                                return obj8814;
                                                };
                                                obj8704.methods["new()object"] = func8813;
                                              superDepth = origSuperDepth;
                                            };
                                            obj_init_8704.apply(obj8704, []);
                                            var var_typeParametersNode = obj8704;
                                            setLineNumber(1557);    // compilenode method
                                            var func8920 = function(argcv) {    // method typeParametersNode
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for typeParametersNode"));
                                              setModuleName("ast");
                                              // typeParametersNode is a simple accessor - elide try ... catch
                                              setLineNumber(1555);    // compilenode identifier
                                              return var_typeParametersNode;
                                            };
                                            func8920.paramCounts = [0];
                                            this.methods["typeParametersNode"] = func8920;
                                            func8920.definitionLine = 1557;
                                            func8920.definitionModule = "ast";
                                            this.methods["typeParametersNode"].debug = "def";
                                            setLineNumber(1602);    // compilenode object
                                            var obj8921 = Grace_allocObject(GraceObject, "identifierNode");
                                            obj8921.definitionModule = "ast";
                                            obj8921.definitionLine = 1602;
                                            obj8921.outer = this;
                                            var reader_ast_outer8922 = function() {
                                              return this.outer;
                                            };
                                            obj8921.methods["outer"] = reader_ast_outer8922;
                                            var obj_init_8921 = function() {
                                              var origSuperDepth = superDepth;
                                              superDepth = obj8921;
                                              var func8923 = function(argcv) {    // method new(2)scope(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_name = arguments[curarg];
                                                curarg++;
                                                var var_dtype = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 2)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new (arg list 1) of new(2)scope(1)"));
                                                var var_s = arguments[curarg];
                                                curarg++;
                                                if (argcv[1] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 2) of new(2)scope(1)"));
                                                setModuleName("ast");
                                                setLineNumber(1605);    // compilenode identifier
                                                onSelf = true;
                                                var call8924 = callmethodChecked(this, "new", [2], var_name, var_dtype);
                                                var var_result = call8924;
                                                setLineNumber(1606);    // compilenode identifier
                                                var call8925 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                                setLineNumber(1607);    // compilenode identifier
                                                return var_result;
                                              };
                                              func8923.paramCounts = [2, 1];
                                              obj8921.methods["new()scope"] = func8923;
                                              func8923.definitionLine = 1604;
                                              func8923.definitionModule = "ast";
                                              var func8926 = function(argcv) {    // method new(2)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_name = arguments[curarg];
                                                curarg++;
                                                var var_dtype__39__ = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 2)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(2)"));
                                                setModuleName("ast");
                                                setLineNumber(1610);    // compilenode object
                                                var obj8927 = Grace_allocObject(null, "identifierNode.new");
                                                obj8927.definitionModule = "ast";
                                                obj8927.definitionLine = 1610;
                                                obj8927.outer = this;
                                                var reader_ast_outer8928 = function() {
                                                  return this.outer;
                                                };
                                                obj8927.methods["outer"] = reader_ast_outer8928;
                                                var obj_init_8927 = function() {
                                                  var origSuperDepth = superDepth;
                                                  superDepth = obj8927;
                                                  var func8929 = function(argcv) {    // method nameString
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                    setModuleName("ast");
                                                    setLineNumber(1622);    // compilenode call
                                                    onSelf = true;
                                                    var call8930 = callmethodChecked(this, "value", [0]);
                                                    return call8930;
                                                  };
                                                  func8929.paramCounts = [0];
                                                  obj8927.methods["nameString"] = func8929;
                                                  func8929.definitionLine = 1622;
                                                  func8929.definitionModule = "ast";
                                                  var func8931 = function(argcv) {    // method quoted
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for quoted"));
                                                    setModuleName("ast");
                                                    setLineNumber(1623);    // compilenode call
                                                    onSelf = true;
                                                    var call8932 = callmethodChecked(this, "value", [0]);
                                                    var call8933 = callmethodChecked(call8932, "quoted", [0]);
                                                    return call8933;
                                                  };
                                                  func8931.paramCounts = [0];
                                                  obj8927.methods["quoted"] = func8931;
                                                  func8931.definitionLine = 1623;
                                                  func8931.definitionModule = "ast";
                                                  var func8934 = function(argcv) {    // method isIdentifier
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isIdentifier"));
                                                    setModuleName("ast");
                                                    // isIdentifier is a simple accessor - elide try ... catch
                                                    setLineNumber(1624);    // compilenode identifier
                                                    return GraceTrue;
                                                  };
                                                  func8934.paramCounts = [0];
                                                  obj8927.methods["isIdentifier"] = func8934;
                                                  func8934.definitionLine = 1624;
                                                  func8934.definitionModule = "ast";
                                                  var func8935 = function(argcv) {    // method isAppliedOccurenceOfIdentifier
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isAppliedOccurenceOfIdentifier"));
                                                    setModuleName("ast");
                                                    var if8936 = GraceDone;
                                                    setLineNumber(1627);    // compilenode call
                                                    onSelf = true;
                                                    var call8937 = callmethodChecked(this, "wildcard", [0]);
                                                    if (Grace_isTrue(call8937)) {
                                                      setLineNumber(1628);    // compilenode identifier
                                                      if8936 = GraceFalse;
                                                    } else {
                                                      setLineNumber(1630);    // compilenode call
                                                      onSelf = true;
                                                      var call8938 = callmethodChecked(this, "isBindingOccurrence", [0]);
                                                      var call8939 = callmethodChecked(call8938, "not", [0]);
                                                      if8936 = call8939;
                                                    }
                                                    return if8936;
                                                  };
                                                  func8935.paramCounts = [0];
                                                  obj8927.methods["isAppliedOccurenceOfIdentifier"] = func8935;
                                                  func8935.definitionLine = 1626;
                                                  func8935.definitionModule = "ast";
                                                  var func8940 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                    setModuleName("ast");
                                                    setLineNumber(1634);    // compilenode identifier
                                                    var call8941 = callmethodChecked(var_as, "parent", [0]);
                                                    var call8942 = callmethodChecked(call8941, "declarationKindWithAncestors", [1], var_as);
                                                    return call8942;
                                                  };
                                                  func8940.paramCounts = [1];
                                                  obj8927.methods["declarationKindWithAncestors"] = func8940;
                                                  func8940.definitionLine = 1633;
                                                  func8940.definitionModule = "ast";
                                                  var func8943 = function(argcv) {    // method inTypePositionWithAncestors(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inTypePositionWithAncestors(1)"));
                                                    setModuleName("ast");
                                                    var if8944 = GraceDone;
                                                    setLineNumber(1640);    // compilenode identifier
                                                    var call8945 = callmethodChecked(var_as, "isEmpty", [0]);
                                                    if (Grace_isTrue(call8945)) {
                                                      return GraceFalse;
                                                    }
                                                    setLineNumber(1641);    // compilenode identifier
                                                    var call8946 = callmethodChecked(var_as, "parent", [0]);
                                                    var call8947 = callmethodChecked(call8946, "usesAsType", [1], this);
                                                    return call8947;
                                                  };
                                                  func8943.paramCounts = [1];
                                                  obj8927.methods["inTypePositionWithAncestors"] = func8943;
                                                  func8943.definitionLine = 1636;
                                                  func8943.definitionModule = "ast";
                                                  var func8948 = function(argcv) {    // method usesAsType(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_aNode = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
                                                    setModuleName("ast");
                                                    setLineNumber(1644);    // compilenode call
                                                    onSelf = true;
                                                    var call8949 = callmethodChecked(this, "dtype", [0]);
                                                    var opresult8952 = callmethodChecked(var_aNode, "==", [1], call8949);
                                                    return opresult8952;
                                                  };
                                                  func8948.paramCounts = [1];
                                                  obj8927.methods["usesAsType"] = func8948;
                                                  func8948.definitionLine = 1643;
                                                  func8948.definitionModule = "ast";
                                                  var func8953 = function(argcv) {    // method accept(1)from(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_visitor = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[1] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                    // Start argument checking
                                                    curarg = 1;
                                                    setLineNumber(1646);    // compilenode identifier
                                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                    curarg++;
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("ast");
                                                    var if8954 = GraceDone;
                                                    setLineNumber(1647);    // compilenode identifier
                                                    var call8955 = callmethodChecked(var_visitor, "visitIdentifier()up", [1, 1], this, var_as);
                                                    if (Grace_isTrue(call8955)) {
                                                      setLineNumber(1648);    // compilenode identifier
                                                      var call8956 = callmethodChecked(var_as, "extend", [1], this);
                                                      var var_newChain = call8956;
                                                      var if8957 = GraceDone;
                                                      setLineNumber(1649);    // compilenode call
                                                      onSelf = true;
                                                      var call8958 = callmethodChecked(this, "dtype", [0]);
                                                      var opresult8961 = callmethodChecked(GraceFalse, "\u2260", [1], call8958);
                                                      if (Grace_isTrue(opresult8961)) {
                                                        setLineNumber(1650);    // compilenode call
                                                        onSelf = true;
                                                        var call8962 = callmethodChecked(this, "dtype", [0]);
                                                        var call8963 = callmethodChecked(call8962, "accept()from", [1, 1], var_visitor, var_newChain);
                                                        if8957 = call8963;
                                                      }
                                                      if8954 = if8957;
                                                    }
                                                    return if8954;
                                                  };
                                                  func8953.paramTypes = [];
                                                  func8953.paramTypes.push([]);
                                                  func8953.paramTypes.push([]);
                                                  func8953.paramCounts = [1, 1];
                                                  obj8927.methods["accept()from"] = func8953;
                                                  func8953.definitionLine = 1646;
                                                  func8953.definitionModule = "ast";
                                                  var func8964 = function(argcv) {    // method map(1)ancestors(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_blk = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[1] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                    setModuleName("ast");
                                                    setLineNumber(1655);    // compilenode call
                                                    onSelf = true;
                                                    var call8965 = callmethodChecked(this, "shallowCopy", [0]);
                                                    var var_n = call8965;
                                                    setLineNumber(1656);    // compilenode identifier
                                                    var call8966 = callmethodChecked(var_as, "extend", [1], var_n);
                                                    var var_newChain = call8966;
                                                    setLineNumber(1657);    // compilenode call
                                                    onSelf = true;
                                                    var call8967 = callmethodChecked(this, "dtype", [0]);
                                                    var call8968 = callmethodChecked(superDepth, "outer", [0]);
                                                    onOuter = true;
                                                    onSelf = true;
                                                    var call8969 = callmethodChecked(call8968, "outer", [0]);
                                                    onOuter = true;
                                                    onSelf = true;
                                                    var call8970 = callmethodChecked(call8969, "maybeMap()ancestors", [2, 1], call8967, var_blk, var_newChain);
                                                    var call8971 = callmethodChecked(var_n, "dtype:=", [1], call8970);
                                                    setLineNumber(1658);    // compilenode identifier
                                                    var call8972 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                    return call8972;
                                                  };
                                                  func8964.paramCounts = [1, 1];
                                                  obj8927.methods["map()ancestors"] = func8964;
                                                  func8964.definitionLine = 1654;
                                                  func8964.definitionModule = "ast";
                                                  var func8973 = function(argcv) {    // method pretty(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_depth = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                    setModuleName("ast");
                                                    setLineNumber(1661);    // compilenode string
                                                    var string8974 = new GraceString("");
                                                    var var_spc = string8974;
                                                    setLineNumber(1662);    // compilenode num
                                                    var opresult8977 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                    var block8978 = new GraceBlock(this, 1662, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block8978.real = function(var_i) {
                                                      setLineNumber(1663);    // compilenode string
                                                      var string8979 = new GraceString("  ");
                                                      var opresult8982 = callmethodChecked(var_spc, "++", [1], string8979);
                                                      var_spc = opresult8982;
                                                      return GraceDone;
                                                    };
                                                    var call8983 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult8977, block8978);
                                                    setLineNumber(1665);    // compilenode identifier
                                                    var call8984 = callmethodsuper(this, "pretty", [1], var_depth);
                                                    var var_s = call8984;
                                                    var if8985 = GraceDone;
                                                    setLineNumber(1666);    // compilenode call
                                                    onSelf = true;
                                                    var call8986 = callmethodChecked(this, "wildcard", [0]);
                                                    if (Grace_isTrue(call8986)) {
                                                      setLineNumber(1667);    // compilenode string
                                                      var string8987 = new GraceString(" Wildcard");
                                                      var opresult8990 = callmethodChecked(var_s, "++", [1], string8987);
                                                      var_s = opresult8990;
                                                      if8985 = GraceDone;
                                                    } else {
                                                      var if8991 = GraceDone;
                                                      setLineNumber(1668);    // compilenode call
                                                      onSelf = true;
                                                      var call8992 = callmethodChecked(this, "isBindingOccurrence", [0]);
                                                      if (Grace_isTrue(call8992)) {
                                                        setLineNumber(1669);    // compilenode string
                                                        var string8993 = new GraceString("\u203a");
                                                        onSelf = true;
                                                        var call8995 = callmethodChecked(this, "value", [0]);
                                                        var string8997 = new GraceString("Binding\u2039");
                                                        var opresult8999 = callmethodChecked(string8997, "++", [1], call8995);
                                                        var opresult9001 = callmethodChecked(opresult8999, "++", [1], string8993);
                                                        var opresult9004 = callmethodChecked(var_s, "++", [1], opresult9001);
                                                        var_s = opresult9004;
                                                        if8991 = GraceDone;
                                                      } else {
                                                        setLineNumber(1671);    // compilenode string
                                                        var string9005 = new GraceString("\u203a");
                                                        onSelf = true;
                                                        var call9007 = callmethodChecked(this, "value", [0]);
                                                        var string9009 = new GraceString("\u2039");
                                                        var opresult9011 = callmethodChecked(string9009, "++", [1], call9007);
                                                        var opresult9013 = callmethodChecked(opresult9011, "++", [1], string9005);
                                                        var opresult9016 = callmethodChecked(var_s, "++", [1], opresult9013);
                                                        var_s = opresult9016;
                                                        if8991 = GraceDone;
                                                      }
                                                      if8985 = if8991;
                                                    }
                                                    var if9017 = GraceDone;
                                                    setLineNumber(1673);    // compilenode call
                                                    onSelf = true;
                                                    var call9018 = callmethodChecked(this, "dtype", [0]);
                                                    var opresult9021 = callmethodChecked(GraceFalse, "\u2260", [1], call9018);
                                                    if (Grace_isTrue(opresult9021)) {
                                                      setLineNumber(1674);    // compilenode string
                                                      var string9022 = new GraceString("  Type: ");
                                                      var string9025 = new GraceString("\n");
                                                      var opresult9028 = callmethodChecked(var_s, "++", [1], string9025);
                                                      var opresult9030 = callmethodChecked(opresult9028, "++", [1], var_spc);
                                                      var opresult9032 = callmethodChecked(opresult9030, "++", [1], string9022);
                                                      var_s = opresult9032;
                                                      setLineNumber(1675);    // compilenode identifier
                                                      var opresult9035 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                      onSelf = true;
                                                      var call9036 = callmethodChecked(this, "dtype", [0]);
                                                      var call9037 = callmethodChecked(call9036, "pretty", [1], opresult9035);
                                                      var opresult9040 = callmethodChecked(var_s, "++", [1], call9037);
                                                      var_s = opresult9040;
                                                      if9017 = GraceDone;
                                                    }
                                                    var if9041 = GraceDone;
                                                    setLineNumber(1677);    // compilenode call
                                                    onSelf = true;
                                                    var call9042 = callmethodChecked(this, "generics", [0]);
                                                    var opresult9045 = callmethodChecked(GraceFalse, "\u2260", [1], call9042);
                                                    if (Grace_isTrue(opresult9045)) {
                                                      setLineNumber(1678);    // compilenode string
                                                      var string9046 = new GraceString("Generics:");
                                                      var string9049 = new GraceString("\n");
                                                      var opresult9052 = callmethodChecked(var_s, "++", [1], string9049);
                                                      var opresult9054 = callmethodChecked(opresult9052, "++", [1], var_spc);
                                                      var opresult9056 = callmethodChecked(opresult9054, "++", [1], string9046);
                                                      var_s = opresult9056;
                                                      setLineNumber(1679);    // compilenode call
                                                      onSelf = true;
                                                      var call9057 = callmethodChecked(this, "generics", [0]);
                                                      var block9058 = new GraceBlock(this, 1679, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block9058.real = function(var_g) {
                                                        setLineNumber(1680);    // compilenode identifier
                                                        var opresult9061 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                        var call9062 = callmethodChecked(var_g, "pretty", [1], opresult9061);
                                                        var string9064 = new GraceString("  ");
                                                        var string9067 = new GraceString("\n");
                                                        var opresult9070 = callmethodChecked(var_s, "++", [1], string9067);
                                                        var opresult9072 = callmethodChecked(opresult9070, "++", [1], var_spc);
                                                        var opresult9074 = callmethodChecked(opresult9072, "++", [1], string9064);
                                                        var opresult9076 = callmethodChecked(opresult9074, "++", [1], call9062);
                                                        var_s = opresult9076;
                                                        return GraceDone;
                                                      };
                                                      var call9077 = callmethodChecked(var_prelude, "for()do", [1, 1], call9057, block9058);
                                                      if9041 = call9077;
                                                    }
                                                    setLineNumber(1683);    // compilenode identifier
                                                    return var_s;
                                                  };
                                                  func8973.paramCounts = [1];
                                                  obj8927.methods["pretty"] = func8973;
                                                  func8973.definitionLine = 1660;
                                                  func8973.definitionModule = "ast";
                                                  var func9078 = function(argcv) {    // method toGrace(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_depth = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                    // Start argument checking
                                                    curarg = 1;
                                                    setLineNumber(1685);    // compilenode identifier
                                                    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("ast");
                                                    setLineNumber(1686);    // compilenode vardec
                                                    var var_s;
                                                    var if9079 = GraceDone;
                                                    setLineNumber(1687);    // compilenode call
                                                    onSelf = true;
                                                    var call9080 = callmethodChecked(this, "wildcard", [0]);
                                                    if (Grace_isTrue(call9080)) {
                                                      setLineNumber(1688);    // compilenode string
                                                      var string9081 = new GraceString("_");
                                                      var_s = string9081;
                                                      if9079 = GraceDone;
                                                    } else {
                                                      setLineNumber(1690);    // compilenode call
                                                      onSelf = true;
                                                      var call9082 = callmethodChecked(this, "value", [0]);
                                                      var_s = call9082;
                                                      if9079 = GraceDone;
                                                    }
                                                    var if9083 = GraceDone;
                                                    setLineNumber(1692);    // compilenode call
                                                    onSelf = true;
                                                    var call9084 = callmethodChecked(this, "dtype", [0]);
                                                    var opresult9087 = callmethodChecked(GraceFalse, "\u2260", [1], call9084);
                                                    if (Grace_isTrue(opresult9087)) {
                                                      setLineNumber(1693);    // compilenode identifier
                                                      var opresult9090 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                      onSelf = true;
                                                      var call9091 = callmethodChecked(this, "dtype", [0]);
                                                      var call9092 = callmethodChecked(call9091, "toGrace", [1], opresult9090);
                                                      var string9094 = new GraceString(" : ");
                                                      var opresult9097 = callmethodChecked(var_s, "++", [1], string9094);
                                                      var opresult9099 = callmethodChecked(opresult9097, "++", [1], call9092);
                                                      var_s = opresult9099;
                                                      if9083 = GraceDone;
                                                    }
                                                    var if9100 = GraceDone;
                                                    setLineNumber(1695);    // compilenode call
                                                    onSelf = true;
                                                    var call9101 = callmethodChecked(this, "generics", [0]);
                                                    var opresult9104 = callmethodChecked(GraceFalse, "\u2260", [1], call9101);
                                                    if (Grace_isTrue(opresult9104)) {
                                                      setLineNumber(1696);    // compilenode string
                                                      var string9105 = new GraceString("<");
                                                      var opresult9108 = callmethodChecked(var_s, "++", [1], string9105);
                                                      var_s = opresult9108;
                                                      setLineNumber(1697);    // compilenode call
                                                      onSelf = true;
                                                      var call9110 = callmethodChecked(this, "generics", [0]);
                                                      var call9111 = callmethodChecked(call9110, "size", [0]);
                                                      var diff9113 = callmethodChecked(call9111, "-", [1], new GraceNum(1));
                                                      var opresult9116 = callmethodChecked(new GraceNum(1), "..", [1], diff9113);
                                                      var block9117 = new GraceBlock(this, 1697, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block9117.real = function(var_ix) {
                                                        setLineNumber(1698);    // compilenode identifier
                                                        var opresult9120 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                        onSelf = true;
                                                        var call9121 = callmethodChecked(this, "generics", [0]);
                                                        var call9122 = callmethodChecked(call9121, "at", [1], var_ix);
                                                        var call9123 = callmethodChecked(call9122, "toGrace", [1], opresult9120);
                                                        var opresult9126 = callmethodChecked(var_s, "++", [1], call9123);
                                                        var_s = opresult9126;
                                                        return GraceDone;
                                                      };
                                                      var call9127 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult9116, block9117);
                                                      setLineNumber(1700);    // compilenode string
                                                      var string9128 = new GraceString(">");
                                                      var opresult9132 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                      onSelf = true;
                                                      var call9133 = callmethodChecked(this, "generics", [0]);
                                                      var call9134 = callmethodChecked(call9133, "last", [0]);
                                                      var call9135 = callmethodChecked(call9134, "toGrace", [1], opresult9132);
                                                      var opresult9138 = callmethodChecked(var_s, "++", [1], call9135);
                                                      var opresult9140 = callmethodChecked(opresult9138, "++", [1], string9128);
                                                      var_s = opresult9140;
                                                      if9100 = GraceDone;
                                                    }
                                                    setLineNumber(1702);    // return value
                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method toGrace(1) does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    return var_s;
                                                  };
                                                  func9078.paramTypes = [];
                                                  func9078.paramTypes.push([type_Number, "depth"]);
                                                  func9078.paramCounts = [1];
                                                  obj8927.methods["toGrace"] = func9078;
                                                  func9078.definitionLine = 1685;
                                                  func9078.definitionModule = "ast";
                                                  var func9141 = function(argcv) {    // method asString
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                    setModuleName("ast");
                                                    var if9142 = GraceDone;
                                                    setLineNumber(1706);    // compilenode call
                                                    onSelf = true;
                                                    var call9143 = callmethodChecked(this, "isBindingOccurrence", [0]);
                                                    if (Grace_isTrue(call9143)) {
                                                      setLineNumber(1707);    // compilenode string
                                                      var string9144 = new GraceString("\u203a");
                                                      onSelf = true;
                                                      var call9146 = callmethodChecked(this, "value", [0]);
                                                      var string9148 = new GraceString("identifierBinding\u2039");
                                                      var opresult9150 = callmethodChecked(string9148, "++", [1], call9146);
                                                      var opresult9152 = callmethodChecked(opresult9150, "++", [1], string9144);
                                                      if9142 = opresult9152;
                                                    } else {
                                                      setLineNumber(1709);    // compilenode string
                                                      var string9153 = new GraceString("\u203a");
                                                      onSelf = true;
                                                      var call9155 = callmethodChecked(this, "value", [0]);
                                                      var string9157 = new GraceString("identifier\u2039");
                                                      var opresult9159 = callmethodChecked(string9157, "++", [1], call9155);
                                                      var opresult9161 = callmethodChecked(opresult9159, "++", [1], string9153);
                                                      if9142 = opresult9161;
                                                    }
                                                    return if9142;
                                                  };
                                                  func9141.paramCounts = [0];
                                                  obj8927.methods["asString"] = func9141;
                                                  func9141.definitionLine = 1705;
                                                  func9141.definitionModule = "ast";
                                                  var func9162 = function(argcv) {    // method shallowCopy
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                    setModuleName("ast");
                                                    setLineNumber(1713);    // compilenode call
                                                    onSelf = true;
                                                    var call9163 = callmethodChecked(this, "value", [0]);
                                                    var call9164 = callmethodChecked(var_identifierNode, "new", [2], call9163, GraceFalse);
                                                    var call9165 = callmethodChecked(call9164, "shallowCopyFieldsFrom", [1], this);
                                                    return call9165;
                                                  };
                                                  func9162.paramCounts = [0];
                                                  obj8927.methods["shallowCopy"] = func9162;
                                                  func9162.definitionLine = 1712;
                                                  func9162.definitionModule = "ast";
                                                  var func9166 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_other = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                    setModuleName("ast");
                                                    setLineNumber(1716);    // compilenode identifier
                                                    var call9167 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                    setLineNumber(1717);    // compilenode identifier
                                                    var call9168 = callmethodChecked(var_other, "wildcard", [0]);
                                                    onSelf = true;
                                                    var call9169 = callmethodChecked(this, "wildcard:=", [1], call9168);
                                                    setLineNumber(1718);    // compilenode identifier
                                                    var call9170 = callmethodChecked(var_other, "isBindingOccurrence", [0]);
                                                    onSelf = true;
                                                    var call9171 = callmethodChecked(this, "isBindingOccurrence:=", [1], call9170);
                                                    setLineNumber(1719);    // compilenode identifier
                                                    var call9172 = callmethodChecked(var_other, "isDeclaredByParent", [0]);
                                                    onSelf = true;
                                                    var call9173 = callmethodChecked(this, "isDeclaredByParent:=", [1], call9172);
                                                    setLineNumber(1720);    // compilenode identifier
                                                    var call9174 = callmethodChecked(var_other, "isAssigned", [0]);
                                                    onSelf = true;
                                                    var call9175 = callmethodChecked(this, "isAssigned:=", [1], call9174);
                                                    setLineNumber(1721);    // compilenode identifier
                                                    var call9176 = callmethodChecked(var_other, "inRequest", [0]);
                                                    onSelf = true;
                                                    var call9177 = callmethodChecked(this, "inRequest:=", [1], call9176);
                                                    setLineNumber(1722);    // compilenode identifier
                                                    return this;
                                                  };
                                                  func9166.paramCounts = [1];
                                                  obj8927.methods["shallowCopyFieldsFrom"] = func9166;
                                                  func9166.definitionLine = 1715;
                                                  func9166.definitionModule = "ast";
                                                  var func9178 = function(argcv) {    // method statementName
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                    setModuleName("ast");
                                                    setLineNumber(1724);    // compilenode string
                                                    var string9179 = new GraceString("expression");
                                                    return string9179;
                                                  };
                                                  func9178.paramCounts = [0];
                                                  obj8927.methods["statementName"] = func9178;
                                                  func9178.definitionLine = 1724;
                                                  func9178.definitionModule = "ast";
                                                  setLineNumber(1611);    // compilenode call
                                                  var call9180 = callmethodChecked(superDepth, "outer", [0]);
                                                  onOuter = true;
                                                  onSelf = true;
                                                  var call9181 = callmethodChecked(call9180, "outer", [0]);
                                                  onOuter = true;
                                                  onSelf = true;
                                                  var call9182 = callmethodChecked(call9181, "baseNode()object", [0, 1], this);
                                                  obj8927.superobj = call9182;
                                                  if (call9182.data) obj8927.data = call9182.data;
                                                  if (call9182.hasOwnProperty('_value'))
                                                      obj8927._value = call9182._value;
                                                  setLineNumber(1612);    // compilenode string
                                                  var string9183 = new GraceString("identifier");
                                                  obj8927.data["kind"] = string9183;
                                                  var reader_ast_kind9184 = function() {
                                                    return this.data["kind"];
                                                  };
                                                  reader_ast_kind9184.def = true;
                                                  obj8927.methods["kind"] = reader_ast_kind9184;
                                                  setLineNumber(1613);    // compilenode identifier
                                                  obj8927.data["value"] = var_name;
                                                  var reader_ast_value9185 = function() {
                                                    return this.data["value"];
                                                  };
                                                  obj8927.methods["value"] = reader_ast_value9185;
                                                  obj8927.data["value"] = var_name;
                                                  var writer_ast_value9185 = function(argcv, o) {
                                                    this.data["value"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj8927.methods["value:="] = writer_ast_value9185;
                                                  obj8927.mutable = true;
                                                  setLineNumber(1614);    // compilenode identifier
                                                  obj8927.data["wildcard"] = GraceFalse;
                                                  var reader_ast_wildcard9186 = function() {
                                                    return this.data["wildcard"];
                                                  };
                                                  obj8927.methods["wildcard"] = reader_ast_wildcard9186;
                                                  obj8927.data["wildcard"] = GraceFalse;
                                                  var writer_ast_wildcard9186 = function(argcv, o) {
                                                    this.data["wildcard"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj8927.methods["wildcard:="] = writer_ast_wildcard9186;
                                                  obj8927.mutable = true;
                                                  setLineNumber(1615);    // compilenode identifier
                                                  obj8927.data["dtype"] = var_dtype__39__;
                                                  var reader_ast_dtype9187 = function() {
                                                    return this.data["dtype"];
                                                  };
                                                  obj8927.methods["dtype"] = reader_ast_dtype9187;
                                                  obj8927.data["dtype"] = var_dtype__39__;
                                                  var writer_ast_dtype9187 = function(argcv, o) {
                                                    this.data["dtype"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj8927.methods["dtype:="] = writer_ast_dtype9187;
                                                  obj8927.mutable = true;
                                                  setLineNumber(1616);    // compilenode identifier
                                                  obj8927.data["isBindingOccurrence"] = GraceFalse;
                                                  var reader_ast_isBindingOccurrence9188 = function() {
                                                    return this.data["isBindingOccurrence"];
                                                  };
                                                  obj8927.methods["isBindingOccurrence"] = reader_ast_isBindingOccurrence9188;
                                                  obj8927.data["isBindingOccurrence"] = GraceFalse;
                                                  var writer_ast_isBindingOccurrence9188 = function(argcv, o) {
                                                    this.data["isBindingOccurrence"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj8927.methods["isBindingOccurrence:="] = writer_ast_isBindingOccurrence9188;
                                                  obj8927.mutable = true;
                                                  setLineNumber(1617);    // compilenode identifier
                                                  obj8927.data["isAssigned"] = GraceFalse;
                                                  var reader_ast_isAssigned9189 = function() {
                                                    return this.data["isAssigned"];
                                                  };
                                                  obj8927.methods["isAssigned"] = reader_ast_isAssigned9189;
                                                  obj8927.data["isAssigned"] = GraceFalse;
                                                  var writer_ast_isAssigned9189 = function(argcv, o) {
                                                    this.data["isAssigned"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj8927.methods["isAssigned:="] = writer_ast_isAssigned9189;
                                                  obj8927.mutable = true;
                                                  setLineNumber(1618);    // compilenode identifier
                                                  obj8927.data["inRequest"] = GraceFalse;
                                                  var reader_ast_inRequest9190 = function() {
                                                    return this.data["inRequest"];
                                                  };
                                                  obj8927.methods["inRequest"] = reader_ast_inRequest9190;
                                                  obj8927.data["inRequest"] = GraceFalse;
                                                  var writer_ast_inRequest9190 = function(argcv, o) {
                                                    this.data["inRequest"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj8927.methods["inRequest:="] = writer_ast_inRequest9190;
                                                  obj8927.mutable = true;
                                                  setLineNumber(1619);    // compilenode identifier
                                                  obj8927.data["generics"] = GraceFalse;
                                                  var reader_ast_generics9191 = function() {
                                                    return this.data["generics"];
                                                  };
                                                  obj8927.methods["generics"] = reader_ast_generics9191;
                                                  obj8927.data["generics"] = GraceFalse;
                                                  var writer_ast_generics9191 = function(argcv, o) {
                                                    this.data["generics"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj8927.methods["generics:="] = writer_ast_generics9191;
                                                  obj8927.mutable = true;
                                                  setLineNumber(1620);    // compilenode identifier
                                                  obj8927.data["isDeclaredByParent"] = GraceFalse;
                                                  var reader_ast_isDeclaredByParent9192 = function() {
                                                    return this.data["isDeclaredByParent"];
                                                  };
                                                  obj8927.methods["isDeclaredByParent"] = reader_ast_isDeclaredByParent9192;
                                                  obj8927.data["isDeclaredByParent"] = GraceFalse;
                                                  var writer_ast_isDeclaredByParent9192 = function(argcv, o) {
                                                    this.data["isDeclaredByParent"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj8927.methods["isDeclaredByParent:="] = writer_ast_isDeclaredByParent9192;
                                                  obj8927.mutable = true;
                                                  superDepth = origSuperDepth;
                                                };
                                                obj_init_8927.apply(obj8927, []);
                                                return obj8927;
                                              };
                                              func8926.paramCounts = [2];
                                              obj8921.methods["new"] = func8926;
                                              func8926.definitionLine = 1610;
                                              func8926.definitionModule = "ast";
                                                var func9193 = function(argcv) {    // method new(2     )()object
                                                  var curarg = 1;
                                                  var var_name = arguments[curarg];
                                                  curarg++;
                                                  var var_dtype__39__ = arguments[curarg];
                                                  curarg++;
                                                  var inheritingObject = arguments[curarg++];
                                                  // Start argument processing
                                                  curarg = 1;
                                                  curarg++;
                                                  curarg++;
                                                  // End argument processing
                                                  setModuleName("ast");
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var obj9194 = Grace_allocObject(null, "new");
                                                  obj9194.definitionModule = "ast";
                                                  obj9194.definitionLine = 1610;
                                                  var inho9194 = inheritingObject;
                                                  while (inho9194.superobj) inho9194 = inho9194.superobj;
                                                  inho9194.superobj = obj9194;
                                                  obj9194.data = inheritingObject.data;
                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                    obj9194._value = inheritingObject._value;
                                                  obj9194.outer = this;
                                                  var reader_ast_outer9195 = function() {
                                                    return this.outer;
                                                  };
                                                  obj9194.methods["outer"] = reader_ast_outer9195;
                                                  var obj_init_9194 = function() {
                                                    var origSuperDepth = superDepth;
                                                    superDepth = obj9194;
                                                    var func9196 = function(argcv) {    // method nameString
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                      setModuleName("ast");
                                                      setLineNumber(1622);    // compilenode call
                                                      onSelf = true;
                                                      var call9197 = callmethodChecked(this, "value", [0]);
                                                      return call9197;
                                                    };
                                                    func9196.paramCounts = [0];
                                                    obj9194.methods["nameString"] = func9196;
                                                    func9196.definitionLine = 1622;
                                                    func9196.definitionModule = "ast";
                                                    var func9198 = function(argcv) {    // method quoted
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for quoted"));
                                                      setModuleName("ast");
                                                      setLineNumber(1623);    // compilenode call
                                                      onSelf = true;
                                                      var call9199 = callmethodChecked(this, "value", [0]);
                                                      var call9200 = callmethodChecked(call9199, "quoted", [0]);
                                                      return call9200;
                                                    };
                                                    func9198.paramCounts = [0];
                                                    obj9194.methods["quoted"] = func9198;
                                                    func9198.definitionLine = 1623;
                                                    func9198.definitionModule = "ast";
                                                    var func9201 = function(argcv) {    // method isIdentifier
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isIdentifier"));
                                                      setModuleName("ast");
                                                      // isIdentifier is a simple accessor - elide try ... catch
                                                      setLineNumber(1624);    // compilenode identifier
                                                      return GraceTrue;
                                                    };
                                                    func9201.paramCounts = [0];
                                                    obj9194.methods["isIdentifier"] = func9201;
                                                    func9201.definitionLine = 1624;
                                                    func9201.definitionModule = "ast";
                                                    var func9202 = function(argcv) {    // method isAppliedOccurenceOfIdentifier
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isAppliedOccurenceOfIdentifier"));
                                                      setModuleName("ast");
                                                      var if9203 = GraceDone;
                                                      setLineNumber(1627);    // compilenode call
                                                      onSelf = true;
                                                      var call9204 = callmethodChecked(this, "wildcard", [0]);
                                                      if (Grace_isTrue(call9204)) {
                                                        setLineNumber(1628);    // compilenode identifier
                                                        if9203 = GraceFalse;
                                                      } else {
                                                        setLineNumber(1630);    // compilenode call
                                                        onSelf = true;
                                                        var call9205 = callmethodChecked(this, "isBindingOccurrence", [0]);
                                                        var call9206 = callmethodChecked(call9205, "not", [0]);
                                                        if9203 = call9206;
                                                      }
                                                      return if9203;
                                                    };
                                                    func9202.paramCounts = [0];
                                                    obj9194.methods["isAppliedOccurenceOfIdentifier"] = func9202;
                                                    func9202.definitionLine = 1626;
                                                    func9202.definitionModule = "ast";
                                                    var func9207 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                      setModuleName("ast");
                                                      setLineNumber(1634);    // compilenode identifier
                                                      var call9208 = callmethodChecked(var_as, "parent", [0]);
                                                      var call9209 = callmethodChecked(call9208, "declarationKindWithAncestors", [1], var_as);
                                                      return call9209;
                                                    };
                                                    func9207.paramCounts = [1];
                                                    obj9194.methods["declarationKindWithAncestors"] = func9207;
                                                    func9207.definitionLine = 1633;
                                                    func9207.definitionModule = "ast";
                                                    var func9210 = function(argcv) {    // method inTypePositionWithAncestors(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inTypePositionWithAncestors(1)"));
                                                      setModuleName("ast");
                                                      var if9211 = GraceDone;
                                                      setLineNumber(1640);    // compilenode identifier
                                                      var call9212 = callmethodChecked(var_as, "isEmpty", [0]);
                                                      if (Grace_isTrue(call9212)) {
                                                        return GraceFalse;
                                                      }
                                                      setLineNumber(1641);    // compilenode identifier
                                                      var call9213 = callmethodChecked(var_as, "parent", [0]);
                                                      var call9214 = callmethodChecked(call9213, "usesAsType", [1], this);
                                                      return call9214;
                                                    };
                                                    func9210.paramCounts = [1];
                                                    obj9194.methods["inTypePositionWithAncestors"] = func9210;
                                                    func9210.definitionLine = 1636;
                                                    func9210.definitionModule = "ast";
                                                    var func9215 = function(argcv) {    // method usesAsType(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_aNode = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
                                                      setModuleName("ast");
                                                      setLineNumber(1644);    // compilenode call
                                                      onSelf = true;
                                                      var call9216 = callmethodChecked(this, "dtype", [0]);
                                                      var opresult9219 = callmethodChecked(var_aNode, "==", [1], call9216);
                                                      return opresult9219;
                                                    };
                                                    func9215.paramCounts = [1];
                                                    obj9194.methods["usesAsType"] = func9215;
                                                    func9215.definitionLine = 1643;
                                                    func9215.definitionModule = "ast";
                                                    var func9220 = function(argcv) {    // method accept(1)from(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_visitor = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[1] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1646);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                      curarg++;
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("ast");
                                                      var if9221 = GraceDone;
                                                      setLineNumber(1647);    // compilenode identifier
                                                      var call9222 = callmethodChecked(var_visitor, "visitIdentifier()up", [1, 1], this, var_as);
                                                      if (Grace_isTrue(call9222)) {
                                                        setLineNumber(1648);    // compilenode identifier
                                                        var call9223 = callmethodChecked(var_as, "extend", [1], this);
                                                        var var_newChain = call9223;
                                                        var if9224 = GraceDone;
                                                        setLineNumber(1649);    // compilenode call
                                                        onSelf = true;
                                                        var call9225 = callmethodChecked(this, "dtype", [0]);
                                                        var opresult9228 = callmethodChecked(GraceFalse, "\u2260", [1], call9225);
                                                        if (Grace_isTrue(opresult9228)) {
                                                          setLineNumber(1650);    // compilenode call
                                                          onSelf = true;
                                                          var call9229 = callmethodChecked(this, "dtype", [0]);
                                                          var call9230 = callmethodChecked(call9229, "accept()from", [1, 1], var_visitor, var_newChain);
                                                          if9224 = call9230;
                                                        }
                                                        if9221 = if9224;
                                                      }
                                                      return if9221;
                                                    };
                                                    func9220.paramTypes = [];
                                                    func9220.paramTypes.push([]);
                                                    func9220.paramTypes.push([]);
                                                    func9220.paramCounts = [1, 1];
                                                    obj9194.methods["accept()from"] = func9220;
                                                    func9220.definitionLine = 1646;
                                                    func9220.definitionModule = "ast";
                                                    var func9231 = function(argcv) {    // method map(1)ancestors(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_blk = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[1] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                      setModuleName("ast");
                                                      setLineNumber(1655);    // compilenode call
                                                      onSelf = true;
                                                      var call9232 = callmethodChecked(this, "shallowCopy", [0]);
                                                      var var_n = call9232;
                                                      setLineNumber(1656);    // compilenode identifier
                                                      var call9233 = callmethodChecked(var_as, "extend", [1], var_n);
                                                      var var_newChain = call9233;
                                                      setLineNumber(1657);    // compilenode call
                                                      onSelf = true;
                                                      var call9234 = callmethodChecked(this, "dtype", [0]);
                                                      var call9235 = callmethodChecked(superDepth, "outer", [0]);
                                                      onOuter = true;
                                                      onSelf = true;
                                                      var call9236 = callmethodChecked(call9235, "outer", [0]);
                                                      onOuter = true;
                                                      onSelf = true;
                                                      var call9237 = callmethodChecked(call9236, "maybeMap()ancestors", [2, 1], call9234, var_blk, var_newChain);
                                                      var call9238 = callmethodChecked(var_n, "dtype:=", [1], call9237);
                                                      setLineNumber(1658);    // compilenode identifier
                                                      var call9239 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                      return call9239;
                                                    };
                                                    func9231.paramCounts = [1, 1];
                                                    obj9194.methods["map()ancestors"] = func9231;
                                                    func9231.definitionLine = 1654;
                                                    func9231.definitionModule = "ast";
                                                    var func9240 = function(argcv) {    // method pretty(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_depth = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                      setModuleName("ast");
                                                      setLineNumber(1661);    // compilenode string
                                                      var string9241 = new GraceString("");
                                                      var var_spc = string9241;
                                                      setLineNumber(1662);    // compilenode num
                                                      var opresult9244 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                      var block9245 = new GraceBlock(this, 1662, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block9245.real = function(var_i) {
                                                        setLineNumber(1663);    // compilenode string
                                                        var string9246 = new GraceString("  ");
                                                        var opresult9249 = callmethodChecked(var_spc, "++", [1], string9246);
                                                        var_spc = opresult9249;
                                                        return GraceDone;
                                                      };
                                                      var call9250 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult9244, block9245);
                                                      setLineNumber(1665);    // compilenode identifier
                                                      var call9251 = callmethodsuper(this, "pretty", [1], var_depth);
                                                      var var_s = call9251;
                                                      var if9252 = GraceDone;
                                                      setLineNumber(1666);    // compilenode call
                                                      onSelf = true;
                                                      var call9253 = callmethodChecked(this, "wildcard", [0]);
                                                      if (Grace_isTrue(call9253)) {
                                                        setLineNumber(1667);    // compilenode string
                                                        var string9254 = new GraceString(" Wildcard");
                                                        var opresult9257 = callmethodChecked(var_s, "++", [1], string9254);
                                                        var_s = opresult9257;
                                                        if9252 = GraceDone;
                                                      } else {
                                                        var if9258 = GraceDone;
                                                        setLineNumber(1668);    // compilenode call
                                                        onSelf = true;
                                                        var call9259 = callmethodChecked(this, "isBindingOccurrence", [0]);
                                                        if (Grace_isTrue(call9259)) {
                                                          setLineNumber(1669);    // compilenode string
                                                          var string9260 = new GraceString("\u203a");
                                                          onSelf = true;
                                                          var call9262 = callmethodChecked(this, "value", [0]);
                                                          var string9264 = new GraceString("Binding\u2039");
                                                          var opresult9266 = callmethodChecked(string9264, "++", [1], call9262);
                                                          var opresult9268 = callmethodChecked(opresult9266, "++", [1], string9260);
                                                          var opresult9271 = callmethodChecked(var_s, "++", [1], opresult9268);
                                                          var_s = opresult9271;
                                                          if9258 = GraceDone;
                                                        } else {
                                                          setLineNumber(1671);    // compilenode string
                                                          var string9272 = new GraceString("\u203a");
                                                          onSelf = true;
                                                          var call9274 = callmethodChecked(this, "value", [0]);
                                                          var string9276 = new GraceString("\u2039");
                                                          var opresult9278 = callmethodChecked(string9276, "++", [1], call9274);
                                                          var opresult9280 = callmethodChecked(opresult9278, "++", [1], string9272);
                                                          var opresult9283 = callmethodChecked(var_s, "++", [1], opresult9280);
                                                          var_s = opresult9283;
                                                          if9258 = GraceDone;
                                                        }
                                                        if9252 = if9258;
                                                      }
                                                      var if9284 = GraceDone;
                                                      setLineNumber(1673);    // compilenode call
                                                      onSelf = true;
                                                      var call9285 = callmethodChecked(this, "dtype", [0]);
                                                      var opresult9288 = callmethodChecked(GraceFalse, "\u2260", [1], call9285);
                                                      if (Grace_isTrue(opresult9288)) {
                                                        setLineNumber(1674);    // compilenode string
                                                        var string9289 = new GraceString("  Type: ");
                                                        var string9292 = new GraceString("\n");
                                                        var opresult9295 = callmethodChecked(var_s, "++", [1], string9292);
                                                        var opresult9297 = callmethodChecked(opresult9295, "++", [1], var_spc);
                                                        var opresult9299 = callmethodChecked(opresult9297, "++", [1], string9289);
                                                        var_s = opresult9299;
                                                        setLineNumber(1675);    // compilenode identifier
                                                        var opresult9302 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                        onSelf = true;
                                                        var call9303 = callmethodChecked(this, "dtype", [0]);
                                                        var call9304 = callmethodChecked(call9303, "pretty", [1], opresult9302);
                                                        var opresult9307 = callmethodChecked(var_s, "++", [1], call9304);
                                                        var_s = opresult9307;
                                                        if9284 = GraceDone;
                                                      }
                                                      var if9308 = GraceDone;
                                                      setLineNumber(1677);    // compilenode call
                                                      onSelf = true;
                                                      var call9309 = callmethodChecked(this, "generics", [0]);
                                                      var opresult9312 = callmethodChecked(GraceFalse, "\u2260", [1], call9309);
                                                      if (Grace_isTrue(opresult9312)) {
                                                        setLineNumber(1678);    // compilenode string
                                                        var string9313 = new GraceString("Generics:");
                                                        var string9316 = new GraceString("\n");
                                                        var opresult9319 = callmethodChecked(var_s, "++", [1], string9316);
                                                        var opresult9321 = callmethodChecked(opresult9319, "++", [1], var_spc);
                                                        var opresult9323 = callmethodChecked(opresult9321, "++", [1], string9313);
                                                        var_s = opresult9323;
                                                        setLineNumber(1679);    // compilenode call
                                                        onSelf = true;
                                                        var call9324 = callmethodChecked(this, "generics", [0]);
                                                        var block9325 = new GraceBlock(this, 1679, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block9325.real = function(var_g) {
                                                          setLineNumber(1680);    // compilenode identifier
                                                          var opresult9328 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                          var call9329 = callmethodChecked(var_g, "pretty", [1], opresult9328);
                                                          var string9331 = new GraceString("  ");
                                                          var string9334 = new GraceString("\n");
                                                          var opresult9337 = callmethodChecked(var_s, "++", [1], string9334);
                                                          var opresult9339 = callmethodChecked(opresult9337, "++", [1], var_spc);
                                                          var opresult9341 = callmethodChecked(opresult9339, "++", [1], string9331);
                                                          var opresult9343 = callmethodChecked(opresult9341, "++", [1], call9329);
                                                          var_s = opresult9343;
                                                          return GraceDone;
                                                        };
                                                        var call9344 = callmethodChecked(var_prelude, "for()do", [1, 1], call9324, block9325);
                                                        if9308 = call9344;
                                                      }
                                                      setLineNumber(1683);    // compilenode identifier
                                                      return var_s;
                                                    };
                                                    func9240.paramCounts = [1];
                                                    obj9194.methods["pretty"] = func9240;
                                                    func9240.definitionLine = 1660;
                                                    func9240.definitionModule = "ast";
                                                    var func9345 = function(argcv) {    // method toGrace(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_depth = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1685);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("ast");
                                                      setLineNumber(1686);    // compilenode vardec
                                                      var var_s;
                                                      var if9346 = GraceDone;
                                                      setLineNumber(1687);    // compilenode call
                                                      onSelf = true;
                                                      var call9347 = callmethodChecked(this, "wildcard", [0]);
                                                      if (Grace_isTrue(call9347)) {
                                                        setLineNumber(1688);    // compilenode string
                                                        var string9348 = new GraceString("_");
                                                        var_s = string9348;
                                                        if9346 = GraceDone;
                                                      } else {
                                                        setLineNumber(1690);    // compilenode call
                                                        onSelf = true;
                                                        var call9349 = callmethodChecked(this, "value", [0]);
                                                        var_s = call9349;
                                                        if9346 = GraceDone;
                                                      }
                                                      var if9350 = GraceDone;
                                                      setLineNumber(1692);    // compilenode call
                                                      onSelf = true;
                                                      var call9351 = callmethodChecked(this, "dtype", [0]);
                                                      var opresult9354 = callmethodChecked(GraceFalse, "\u2260", [1], call9351);
                                                      if (Grace_isTrue(opresult9354)) {
                                                        setLineNumber(1693);    // compilenode identifier
                                                        var opresult9357 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                        onSelf = true;
                                                        var call9358 = callmethodChecked(this, "dtype", [0]);
                                                        var call9359 = callmethodChecked(call9358, "toGrace", [1], opresult9357);
                                                        var string9361 = new GraceString(" : ");
                                                        var opresult9364 = callmethodChecked(var_s, "++", [1], string9361);
                                                        var opresult9366 = callmethodChecked(opresult9364, "++", [1], call9359);
                                                        var_s = opresult9366;
                                                        if9350 = GraceDone;
                                                      }
                                                      var if9367 = GraceDone;
                                                      setLineNumber(1695);    // compilenode call
                                                      onSelf = true;
                                                      var call9368 = callmethodChecked(this, "generics", [0]);
                                                      var opresult9371 = callmethodChecked(GraceFalse, "\u2260", [1], call9368);
                                                      if (Grace_isTrue(opresult9371)) {
                                                        setLineNumber(1696);    // compilenode string
                                                        var string9372 = new GraceString("<");
                                                        var opresult9375 = callmethodChecked(var_s, "++", [1], string9372);
                                                        var_s = opresult9375;
                                                        setLineNumber(1697);    // compilenode call
                                                        onSelf = true;
                                                        var call9377 = callmethodChecked(this, "generics", [0]);
                                                        var call9378 = callmethodChecked(call9377, "size", [0]);
                                                        var diff9380 = callmethodChecked(call9378, "-", [1], new GraceNum(1));
                                                        var opresult9383 = callmethodChecked(new GraceNum(1), "..", [1], diff9380);
                                                        var block9384 = new GraceBlock(this, 1697, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block9384.real = function(var_ix) {
                                                          setLineNumber(1698);    // compilenode identifier
                                                          var opresult9387 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                          onSelf = true;
                                                          var call9388 = callmethodChecked(this, "generics", [0]);
                                                          var call9389 = callmethodChecked(call9388, "at", [1], var_ix);
                                                          var call9390 = callmethodChecked(call9389, "toGrace", [1], opresult9387);
                                                          var opresult9393 = callmethodChecked(var_s, "++", [1], call9390);
                                                          var_s = opresult9393;
                                                          return GraceDone;
                                                        };
                                                        var call9394 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult9383, block9384);
                                                        setLineNumber(1700);    // compilenode string
                                                        var string9395 = new GraceString(">");
                                                        var opresult9399 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                        onSelf = true;
                                                        var call9400 = callmethodChecked(this, "generics", [0]);
                                                        var call9401 = callmethodChecked(call9400, "last", [0]);
                                                        var call9402 = callmethodChecked(call9401, "toGrace", [1], opresult9399);
                                                        var opresult9405 = callmethodChecked(var_s, "++", [1], call9402);
                                                        var opresult9407 = callmethodChecked(opresult9405, "++", [1], string9395);
                                                        var_s = opresult9407;
                                                        if9367 = GraceDone;
                                                      }
                                                      setLineNumber(1702);    // return value
                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method toGrace(1) does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      return var_s;
                                                    };
                                                    func9345.paramTypes = [];
                                                    func9345.paramTypes.push([type_Number, "depth"]);
                                                    func9345.paramCounts = [1];
                                                    obj9194.methods["toGrace"] = func9345;
                                                    func9345.definitionLine = 1685;
                                                    func9345.definitionModule = "ast";
                                                    var func9408 = function(argcv) {    // method asString
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                      setModuleName("ast");
                                                      var if9409 = GraceDone;
                                                      setLineNumber(1706);    // compilenode call
                                                      onSelf = true;
                                                      var call9410 = callmethodChecked(this, "isBindingOccurrence", [0]);
                                                      if (Grace_isTrue(call9410)) {
                                                        setLineNumber(1707);    // compilenode string
                                                        var string9411 = new GraceString("\u203a");
                                                        onSelf = true;
                                                        var call9413 = callmethodChecked(this, "value", [0]);
                                                        var string9415 = new GraceString("identifierBinding\u2039");
                                                        var opresult9417 = callmethodChecked(string9415, "++", [1], call9413);
                                                        var opresult9419 = callmethodChecked(opresult9417, "++", [1], string9411);
                                                        if9409 = opresult9419;
                                                      } else {
                                                        setLineNumber(1709);    // compilenode string
                                                        var string9420 = new GraceString("\u203a");
                                                        onSelf = true;
                                                        var call9422 = callmethodChecked(this, "value", [0]);
                                                        var string9424 = new GraceString("identifier\u2039");
                                                        var opresult9426 = callmethodChecked(string9424, "++", [1], call9422);
                                                        var opresult9428 = callmethodChecked(opresult9426, "++", [1], string9420);
                                                        if9409 = opresult9428;
                                                      }
                                                      return if9409;
                                                    };
                                                    func9408.paramCounts = [0];
                                                    obj9194.methods["asString"] = func9408;
                                                    func9408.definitionLine = 1705;
                                                    func9408.definitionModule = "ast";
                                                    var func9429 = function(argcv) {    // method shallowCopy
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                      setModuleName("ast");
                                                      setLineNumber(1713);    // compilenode call
                                                      onSelf = true;
                                                      var call9430 = callmethodChecked(this, "value", [0]);
                                                      var call9431 = callmethodChecked(var_identifierNode, "new", [2], call9430, GraceFalse);
                                                      var call9432 = callmethodChecked(call9431, "shallowCopyFieldsFrom", [1], this);
                                                      return call9432;
                                                    };
                                                    func9429.paramCounts = [0];
                                                    obj9194.methods["shallowCopy"] = func9429;
                                                    func9429.definitionLine = 1712;
                                                    func9429.definitionModule = "ast";
                                                    var func9433 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_other = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                      setModuleName("ast");
                                                      setLineNumber(1716);    // compilenode identifier
                                                      var call9434 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                      setLineNumber(1717);    // compilenode identifier
                                                      var call9435 = callmethodChecked(var_other, "wildcard", [0]);
                                                      onSelf = true;
                                                      var call9436 = callmethodChecked(this, "wildcard:=", [1], call9435);
                                                      setLineNumber(1718);    // compilenode identifier
                                                      var call9437 = callmethodChecked(var_other, "isBindingOccurrence", [0]);
                                                      onSelf = true;
                                                      var call9438 = callmethodChecked(this, "isBindingOccurrence:=", [1], call9437);
                                                      setLineNumber(1719);    // compilenode identifier
                                                      var call9439 = callmethodChecked(var_other, "isDeclaredByParent", [0]);
                                                      onSelf = true;
                                                      var call9440 = callmethodChecked(this, "isDeclaredByParent:=", [1], call9439);
                                                      setLineNumber(1720);    // compilenode identifier
                                                      var call9441 = callmethodChecked(var_other, "isAssigned", [0]);
                                                      onSelf = true;
                                                      var call9442 = callmethodChecked(this, "isAssigned:=", [1], call9441);
                                                      setLineNumber(1721);    // compilenode identifier
                                                      var call9443 = callmethodChecked(var_other, "inRequest", [0]);
                                                      onSelf = true;
                                                      var call9444 = callmethodChecked(this, "inRequest:=", [1], call9443);
                                                      setLineNumber(1722);    // compilenode identifier
                                                      return this;
                                                    };
                                                    func9433.paramCounts = [1];
                                                    obj9194.methods["shallowCopyFieldsFrom"] = func9433;
                                                    func9433.definitionLine = 1715;
                                                    func9433.definitionModule = "ast";
                                                    var func9445 = function(argcv) {    // method statementName
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                      setModuleName("ast");
                                                      setLineNumber(1724);    // compilenode string
                                                      var string9446 = new GraceString("expression");
                                                      return string9446;
                                                    };
                                                    func9445.paramCounts = [0];
                                                    obj9194.methods["statementName"] = func9445;
                                                    func9445.definitionLine = 1724;
                                                    func9445.definitionModule = "ast";
                                                    setLineNumber(1611);    // compilenode call
                                                    var call9447 = callmethodChecked(superDepth, "outer", [0]);
                                                    onOuter = true;
                                                    onSelf = true;
                                                    var call9448 = callmethodChecked(call9447, "outer", [0]);
                                                    onOuter = true;
                                                    onSelf = true;
                                                    var call9449 = callmethodChecked(call9448, "baseNode()object", [0, 1], this);
                                                    obj9194.superobj = call9449;
                                                    if (call9449.data) obj9194.data = call9449.data;
                                                    if (call9449.hasOwnProperty('_value'))
                                                        obj9194._value = call9449._value;
                                                    setLineNumber(1612);    // compilenode string
                                                    var string9450 = new GraceString("identifier");
                                                    obj9194.data["kind"] = string9450;
                                                    var reader_ast_kind9451 = function() {
                                                      return this.data["kind"];
                                                    };
                                                    reader_ast_kind9451.def = true;
                                                    obj9194.methods["kind"] = reader_ast_kind9451;
                                                    setLineNumber(1613);    // compilenode identifier
                                                    obj9194.data["value"] = var_name;
                                                    var reader_ast_value9452 = function() {
                                                      return this.data["value"];
                                                    };
                                                    obj9194.methods["value"] = reader_ast_value9452;
                                                    obj9194.data["value"] = var_name;
                                                    var writer_ast_value9452 = function(argcv, o) {
                                                      this.data["value"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj9194.methods["value:="] = writer_ast_value9452;
                                                    obj9194.mutable = true;
                                                    setLineNumber(1614);    // compilenode identifier
                                                    obj9194.data["wildcard"] = GraceFalse;
                                                    var reader_ast_wildcard9453 = function() {
                                                      return this.data["wildcard"];
                                                    };
                                                    obj9194.methods["wildcard"] = reader_ast_wildcard9453;
                                                    obj9194.data["wildcard"] = GraceFalse;
                                                    var writer_ast_wildcard9453 = function(argcv, o) {
                                                      this.data["wildcard"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj9194.methods["wildcard:="] = writer_ast_wildcard9453;
                                                    obj9194.mutable = true;
                                                    setLineNumber(1615);    // compilenode identifier
                                                    obj9194.data["dtype"] = var_dtype__39__;
                                                    var reader_ast_dtype9454 = function() {
                                                      return this.data["dtype"];
                                                    };
                                                    obj9194.methods["dtype"] = reader_ast_dtype9454;
                                                    obj9194.data["dtype"] = var_dtype__39__;
                                                    var writer_ast_dtype9454 = function(argcv, o) {
                                                      this.data["dtype"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj9194.methods["dtype:="] = writer_ast_dtype9454;
                                                    obj9194.mutable = true;
                                                    setLineNumber(1616);    // compilenode identifier
                                                    obj9194.data["isBindingOccurrence"] = GraceFalse;
                                                    var reader_ast_isBindingOccurrence9455 = function() {
                                                      return this.data["isBindingOccurrence"];
                                                    };
                                                    obj9194.methods["isBindingOccurrence"] = reader_ast_isBindingOccurrence9455;
                                                    obj9194.data["isBindingOccurrence"] = GraceFalse;
                                                    var writer_ast_isBindingOccurrence9455 = function(argcv, o) {
                                                      this.data["isBindingOccurrence"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj9194.methods["isBindingOccurrence:="] = writer_ast_isBindingOccurrence9455;
                                                    obj9194.mutable = true;
                                                    setLineNumber(1617);    // compilenode identifier
                                                    obj9194.data["isAssigned"] = GraceFalse;
                                                    var reader_ast_isAssigned9456 = function() {
                                                      return this.data["isAssigned"];
                                                    };
                                                    obj9194.methods["isAssigned"] = reader_ast_isAssigned9456;
                                                    obj9194.data["isAssigned"] = GraceFalse;
                                                    var writer_ast_isAssigned9456 = function(argcv, o) {
                                                      this.data["isAssigned"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj9194.methods["isAssigned:="] = writer_ast_isAssigned9456;
                                                    obj9194.mutable = true;
                                                    setLineNumber(1618);    // compilenode identifier
                                                    obj9194.data["inRequest"] = GraceFalse;
                                                    var reader_ast_inRequest9457 = function() {
                                                      return this.data["inRequest"];
                                                    };
                                                    obj9194.methods["inRequest"] = reader_ast_inRequest9457;
                                                    obj9194.data["inRequest"] = GraceFalse;
                                                    var writer_ast_inRequest9457 = function(argcv, o) {
                                                      this.data["inRequest"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj9194.methods["inRequest:="] = writer_ast_inRequest9457;
                                                    obj9194.mutable = true;
                                                    setLineNumber(1619);    // compilenode identifier
                                                    obj9194.data["generics"] = GraceFalse;
                                                    var reader_ast_generics9458 = function() {
                                                      return this.data["generics"];
                                                    };
                                                    obj9194.methods["generics"] = reader_ast_generics9458;
                                                    obj9194.data["generics"] = GraceFalse;
                                                    var writer_ast_generics9458 = function(argcv, o) {
                                                      this.data["generics"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj9194.methods["generics:="] = writer_ast_generics9458;
                                                    obj9194.mutable = true;
                                                    setLineNumber(1620);    // compilenode identifier
                                                    obj9194.data["isDeclaredByParent"] = GraceFalse;
                                                    var reader_ast_isDeclaredByParent9459 = function() {
                                                      return this.data["isDeclaredByParent"];
                                                    };
                                                    obj9194.methods["isDeclaredByParent"] = reader_ast_isDeclaredByParent9459;
                                                    obj9194.data["isDeclaredByParent"] = GraceFalse;
                                                    var writer_ast_isDeclaredByParent9459 = function(argcv, o) {
                                                      this.data["isDeclaredByParent"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj9194.methods["isDeclaredByParent:="] = writer_ast_isDeclaredByParent9459;
                                                    obj9194.mutable = true;
                                                    superDepth = origSuperDepth;
                                                  };
                                                  obj_init_9194.apply(inheritingObject, []);
                                                  return obj9194;
                                                  };
                                                  obj8921.methods["new()object"] = func9193;
                                                superDepth = origSuperDepth;
                                              };
                                              obj_init_8921.apply(obj8921, []);
                                              var var_identifierNode = obj8921;
                                              setLineNumber(1611);    // compilenode method
                                              var func9460 = function(argcv) {    // method identifierNode
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for identifierNode"));
                                                setModuleName("ast");
                                                // identifierNode is a simple accessor - elide try ... catch
                                                setLineNumber(1602);    // compilenode identifier
                                                return var_identifierNode;
                                              };
                                              func9460.paramCounts = [0];
                                              this.methods["identifierNode"] = func9460;
                                              func9460.definitionLine = 1611;
                                              func9460.definitionModule = "ast";
                                              this.methods["identifierNode"].debug = "def";
                                              setLineNumber(1728);    // compilenode string
                                              var string9461 = new GraceString("Type");
                                              var call9462 = callmethodChecked(var_identifierNode, "new", [2], string9461, GraceFalse);
                                              var var_typeType = call9462;
                                              setLineNumber(1611);    // compilenode method
                                              var func9463 = function(argcv) {    // method typeType
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for typeType"));
                                                setModuleName("ast");
                                                // typeType is a simple accessor - elide try ... catch
                                                setLineNumber(1728);    // compilenode identifier
                                                return var_typeType;
                                              };
                                              func9463.paramCounts = [0];
                                              this.methods["typeType"] = func9463;
                                              func9463.definitionLine = 1611;
                                              func9463.definitionModule = "ast";
                                              this.methods["typeType"].debug = "def";
                                              setLineNumber(1729);    // compilenode string
                                              var string9464 = new GraceString("Unknown");
                                              var call9465 = callmethodChecked(var_identifierNode, "new", [2], string9464, var_typeType);
                                              var var_unknownType = call9465;
                                              setLineNumber(1611);    // compilenode method
                                              var func9466 = function(argcv) {    // method unknownType
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                if (argcv[0] !== 0)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for unknownType"));
                                                setModuleName("ast");
                                                // unknownType is a simple accessor - elide try ... catch
                                                setLineNumber(1729);    // compilenode identifier
                                                return var_unknownType;
                                              };
                                              func9466.paramCounts = [0];
                                              this.methods["unknownType"] = func9466;
                                              func9466.definitionLine = 1611;
                                              func9466.definitionModule = "ast";
                                              this.methods["unknownType"].debug = "def";
                                              setLineNumber(1731);    // compilenode object
                                              var obj9467 = Grace_allocObject(GraceObject, "stringNode");
                                              obj9467.definitionModule = "ast";
                                              obj9467.definitionLine = 1731;
                                              obj9467.outer = this;
                                              var reader_ast_outer9468 = function() {
                                                return this.outer;
                                              };
                                              obj9467.methods["outer"] = reader_ast_outer9468;
                                              var obj_init_9467 = function() {
                                                var origSuperDepth = superDepth;
                                                superDepth = obj9467;
                                                var func9469 = function(argcv) {    // method new(1)scope(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_v = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new (arg list 1) of new(1)scope(1)"));
                                                  var var_s = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[1] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 2) of new(1)scope(1)"));
                                                  setModuleName("ast");
                                                  setLineNumber(1733);    // compilenode identifier
                                                  onSelf = true;
                                                  var call9470 = callmethodChecked(this, "new", [1], var_v);
                                                  var var_result = call9470;
                                                  setLineNumber(1734);    // compilenode identifier
                                                  var call9471 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                                  setLineNumber(1735);    // compilenode identifier
                                                  return var_result;
                                                };
                                                func9469.paramCounts = [1, 1];
                                                obj9467.methods["new()scope"] = func9469;
                                                func9469.definitionLine = 1732;
                                                func9469.definitionModule = "ast";
                                                var func9472 = function(argcv) {    // method new(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_v = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(1)"));
                                                  setModuleName("ast");
                                                  setLineNumber(1738);    // compilenode object
                                                  var obj9473 = Grace_allocObject(null, "stringNode.new");
                                                  obj9473.definitionModule = "ast";
                                                  obj9473.definitionLine = 1738;
                                                  obj9473.outer = this;
                                                  var reader_ast_outer9474 = function() {
                                                    return this.outer;
                                                  };
                                                  obj9473.methods["outer"] = reader_ast_outer9474;
                                                  var obj_init_9473 = function() {
                                                    var origSuperDepth = superDepth;
                                                    superDepth = obj9473;
                                                    var func9475 = function(argcv) {    // method accept(1)from(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_visitor = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[1] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1742);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                      curarg++;
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("ast");
                                                      setLineNumber(1743);    // compilenode identifier
                                                      var call9476 = callmethodChecked(var_visitor, "visitString()up", [1, 1], this, var_as);
                                                      return call9476;
                                                    };
                                                    func9475.paramTypes = [];
                                                    func9475.paramTypes.push([]);
                                                    func9475.paramTypes.push([]);
                                                    func9475.paramCounts = [1, 1];
                                                    obj9473.methods["accept()from"] = func9475;
                                                    func9475.definitionLine = 1742;
                                                    func9475.definitionModule = "ast";
                                                    var func9477 = function(argcv) {    // method map(1)ancestors(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_blk = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[1] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                      setModuleName("ast");
                                                      setLineNumber(1746);    // compilenode call
                                                      onSelf = true;
                                                      var call9478 = callmethodChecked(this, "shallowCopy", [0]);
                                                      var var_n = call9478;
                                                      setLineNumber(1747);    // compilenode identifier
                                                      var call9479 = callmethodChecked(var_as, "extend", [1], var_n);
                                                      var var_newChain = call9479;
                                                      setLineNumber(1748);    // compilenode identifier
                                                      var call9480 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                      return call9480;
                                                    };
                                                    func9477.paramCounts = [1, 1];
                                                    obj9473.methods["map()ancestors"] = func9477;
                                                    func9477.definitionLine = 1745;
                                                    func9477.definitionModule = "ast";
                                                    var func9481 = function(argcv) {    // method pretty(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_depth = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                      setModuleName("ast");
                                                      setLineNumber(1751);    // compilenode string
                                                      var string9482 = new GraceString(")");
                                                      onSelf = true;
                                                      var call9484 = callmethodChecked(this, "value", [0]);
                                                      var string9486 = new GraceString("(");
                                                      var call9488 = callmethodsuper(this, "pretty", [1], var_depth);
                                                      var string9490 = new GraceString("");
                                                      var opresult9492 = callmethodChecked(string9490, "++", [1], call9488);
                                                      var opresult9494 = callmethodChecked(opresult9492, "++", [1], string9486);
                                                      var opresult9496 = callmethodChecked(opresult9494, "++", [1], call9484);
                                                      var opresult9498 = callmethodChecked(opresult9496, "++", [1], string9482);
                                                      return opresult9498;
                                                    };
                                                    func9481.paramCounts = [1];
                                                    obj9473.methods["pretty"] = func9481;
                                                    func9481.definitionLine = 1750;
                                                    func9481.definitionModule = "ast";
                                                    var func9499 = function(argcv) {    // method toGrace(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_depth = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1753);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("ast");
                                                      setLineNumber(1754);    // compilenode string
                                                      var string9500 = new GraceString("\"");
                                                      var var_q = string9500;
                                                      setLineNumber(1755);    // compilenode call
                                                      onSelf = true;
                                                      var call9502 = callmethodChecked(this, "value", [0]);
                                                      var call9503 = callmethodChecked(call9502, "quoted", [0]);
                                                      var opresult9506 = callmethodChecked(var_q, "++", [1], call9503);
                                                      var opresult9508 = callmethodChecked(opresult9506, "++", [1], var_q);
                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult9508)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method toGrace(1) does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      return opresult9508;
                                                    };
                                                    func9499.paramTypes = [];
                                                    func9499.paramTypes.push([type_Number, "depth"]);
                                                    func9499.paramCounts = [1];
                                                    obj9473.methods["toGrace"] = func9499;
                                                    func9499.definitionLine = 1753;
                                                    func9499.definitionModule = "ast";
                                                    var func9509 = function(argcv) {    // method shallowCopy
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                      setModuleName("ast");
                                                      setLineNumber(1758);    // compilenode call
                                                      onSelf = true;
                                                      var call9510 = callmethodChecked(this, "value", [0]);
                                                      var call9511 = callmethodChecked(var_stringNode, "new", [1], call9510);
                                                      var call9512 = callmethodChecked(call9511, "shallowCopyFieldsFrom", [1], this);
                                                      return call9512;
                                                    };
                                                    func9509.paramCounts = [0];
                                                    obj9473.methods["shallowCopy"] = func9509;
                                                    func9509.definitionLine = 1757;
                                                    func9509.definitionModule = "ast";
                                                    var func9513 = function(argcv) {    // method statementName
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                      setModuleName("ast");
                                                      setLineNumber(1760);    // compilenode string
                                                      var string9514 = new GraceString("expression");
                                                      return string9514;
                                                    };
                                                    func9513.paramCounts = [0];
                                                    obj9473.methods["statementName"] = func9513;
                                                    func9513.definitionLine = 1760;
                                                    func9513.definitionModule = "ast";
                                                    setLineNumber(1739);    // compilenode call
                                                    var call9515 = callmethodChecked(superDepth, "outer", [0]);
                                                    onOuter = true;
                                                    onSelf = true;
                                                    var call9516 = callmethodChecked(call9515, "outer", [0]);
                                                    onOuter = true;
                                                    onSelf = true;
                                                    var call9517 = callmethodChecked(call9516, "baseNode()object", [0, 1], this);
                                                    obj9473.superobj = call9517;
                                                    if (call9517.data) obj9473.data = call9517.data;
                                                    if (call9517.hasOwnProperty('_value'))
                                                        obj9473._value = call9517._value;
                                                    setLineNumber(1740);    // compilenode string
                                                    var string9518 = new GraceString("string");
                                                    obj9473.data["kind"] = string9518;
                                                    var reader_ast_kind9519 = function() {
                                                      return this.data["kind"];
                                                    };
                                                    reader_ast_kind9519.def = true;
                                                    obj9473.methods["kind"] = reader_ast_kind9519;
                                                    setLineNumber(1741);    // compilenode identifier
                                                    obj9473.data["value"] = var_v;
                                                    var reader_ast_value9520 = function() {
                                                      return this.data["value"];
                                                    };
                                                    obj9473.methods["value"] = reader_ast_value9520;
                                                    obj9473.data["value"] = var_v;
                                                    var writer_ast_value9520 = function(argcv, o) {
                                                      this.data["value"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj9473.methods["value:="] = writer_ast_value9520;
                                                    obj9473.mutable = true;
                                                    superDepth = origSuperDepth;
                                                  };
                                                  obj_init_9473.apply(obj9473, []);
                                                  return obj9473;
                                                };
                                                func9472.paramCounts = [1];
                                                obj9467.methods["new"] = func9472;
                                                func9472.definitionLine = 1738;
                                                func9472.definitionModule = "ast";
                                                  var func9521 = function(argcv) {    // method new(1     )()object
                                                    var curarg = 1;
                                                    var var_v = arguments[curarg];
                                                    curarg++;
                                                    var inheritingObject = arguments[curarg++];
                                                    // Start argument processing
                                                    curarg = 1;
                                                    curarg++;
                                                    // End argument processing
                                                    setModuleName("ast");
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var obj9522 = Grace_allocObject(null, "new");
                                                    obj9522.definitionModule = "ast";
                                                    obj9522.definitionLine = 1738;
                                                    var inho9522 = inheritingObject;
                                                    while (inho9522.superobj) inho9522 = inho9522.superobj;
                                                    inho9522.superobj = obj9522;
                                                    obj9522.data = inheritingObject.data;
                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                      obj9522._value = inheritingObject._value;
                                                    obj9522.outer = this;
                                                    var reader_ast_outer9523 = function() {
                                                      return this.outer;
                                                    };
                                                    obj9522.methods["outer"] = reader_ast_outer9523;
                                                    var obj_init_9522 = function() {
                                                      var origSuperDepth = superDepth;
                                                      superDepth = obj9522;
                                                      var func9524 = function(argcv) {    // method accept(1)from(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_visitor = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                        var var_as = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[1] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1742);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                        curarg++;
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("ast");
                                                        setLineNumber(1743);    // compilenode identifier
                                                        var call9525 = callmethodChecked(var_visitor, "visitString()up", [1, 1], this, var_as);
                                                        return call9525;
                                                      };
                                                      func9524.paramTypes = [];
                                                      func9524.paramTypes.push([]);
                                                      func9524.paramTypes.push([]);
                                                      func9524.paramCounts = [1, 1];
                                                      obj9522.methods["accept()from"] = func9524;
                                                      func9524.definitionLine = 1742;
                                                      func9524.definitionModule = "ast";
                                                      var func9526 = function(argcv) {    // method map(1)ancestors(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_blk = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                        var var_as = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[1] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                        setModuleName("ast");
                                                        setLineNumber(1746);    // compilenode call
                                                        onSelf = true;
                                                        var call9527 = callmethodChecked(this, "shallowCopy", [0]);
                                                        var var_n = call9527;
                                                        setLineNumber(1747);    // compilenode identifier
                                                        var call9528 = callmethodChecked(var_as, "extend", [1], var_n);
                                                        var var_newChain = call9528;
                                                        setLineNumber(1748);    // compilenode identifier
                                                        var call9529 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                        return call9529;
                                                      };
                                                      func9526.paramCounts = [1, 1];
                                                      obj9522.methods["map()ancestors"] = func9526;
                                                      func9526.definitionLine = 1745;
                                                      func9526.definitionModule = "ast";
                                                      var func9530 = function(argcv) {    // method pretty(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_depth = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                        setModuleName("ast");
                                                        setLineNumber(1751);    // compilenode string
                                                        var string9531 = new GraceString(")");
                                                        onSelf = true;
                                                        var call9533 = callmethodChecked(this, "value", [0]);
                                                        var string9535 = new GraceString("(");
                                                        var call9537 = callmethodsuper(this, "pretty", [1], var_depth);
                                                        var string9539 = new GraceString("");
                                                        var opresult9541 = callmethodChecked(string9539, "++", [1], call9537);
                                                        var opresult9543 = callmethodChecked(opresult9541, "++", [1], string9535);
                                                        var opresult9545 = callmethodChecked(opresult9543, "++", [1], call9533);
                                                        var opresult9547 = callmethodChecked(opresult9545, "++", [1], string9531);
                                                        return opresult9547;
                                                      };
                                                      func9530.paramCounts = [1];
                                                      obj9522.methods["pretty"] = func9530;
                                                      func9530.definitionLine = 1750;
                                                      func9530.definitionModule = "ast";
                                                      var func9548 = function(argcv) {    // method toGrace(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_depth = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1753);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("ast");
                                                        setLineNumber(1754);    // compilenode string
                                                        var string9549 = new GraceString("\"");
                                                        var var_q = string9549;
                                                        setLineNumber(1755);    // compilenode call
                                                        onSelf = true;
                                                        var call9551 = callmethodChecked(this, "value", [0]);
                                                        var call9552 = callmethodChecked(call9551, "quoted", [0]);
                                                        var opresult9555 = callmethodChecked(var_q, "++", [1], call9552);
                                                        var opresult9557 = callmethodChecked(opresult9555, "++", [1], var_q);
                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult9557)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method toGrace(1) does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        return opresult9557;
                                                      };
                                                      func9548.paramTypes = [];
                                                      func9548.paramTypes.push([type_Number, "depth"]);
                                                      func9548.paramCounts = [1];
                                                      obj9522.methods["toGrace"] = func9548;
                                                      func9548.definitionLine = 1753;
                                                      func9548.definitionModule = "ast";
                                                      var func9558 = function(argcv) {    // method shallowCopy
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                        setModuleName("ast");
                                                        setLineNumber(1758);    // compilenode call
                                                        onSelf = true;
                                                        var call9559 = callmethodChecked(this, "value", [0]);
                                                        var call9560 = callmethodChecked(var_stringNode, "new", [1], call9559);
                                                        var call9561 = callmethodChecked(call9560, "shallowCopyFieldsFrom", [1], this);
                                                        return call9561;
                                                      };
                                                      func9558.paramCounts = [0];
                                                      obj9522.methods["shallowCopy"] = func9558;
                                                      func9558.definitionLine = 1757;
                                                      func9558.definitionModule = "ast";
                                                      var func9562 = function(argcv) {    // method statementName
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                        setModuleName("ast");
                                                        setLineNumber(1760);    // compilenode string
                                                        var string9563 = new GraceString("expression");
                                                        return string9563;
                                                      };
                                                      func9562.paramCounts = [0];
                                                      obj9522.methods["statementName"] = func9562;
                                                      func9562.definitionLine = 1760;
                                                      func9562.definitionModule = "ast";
                                                      setLineNumber(1739);    // compilenode call
                                                      var call9564 = callmethodChecked(superDepth, "outer", [0]);
                                                      onOuter = true;
                                                      onSelf = true;
                                                      var call9565 = callmethodChecked(call9564, "outer", [0]);
                                                      onOuter = true;
                                                      onSelf = true;
                                                      var call9566 = callmethodChecked(call9565, "baseNode()object", [0, 1], this);
                                                      obj9522.superobj = call9566;
                                                      if (call9566.data) obj9522.data = call9566.data;
                                                      if (call9566.hasOwnProperty('_value'))
                                                          obj9522._value = call9566._value;
                                                      setLineNumber(1740);    // compilenode string
                                                      var string9567 = new GraceString("string");
                                                      obj9522.data["kind"] = string9567;
                                                      var reader_ast_kind9568 = function() {
                                                        return this.data["kind"];
                                                      };
                                                      reader_ast_kind9568.def = true;
                                                      obj9522.methods["kind"] = reader_ast_kind9568;
                                                      setLineNumber(1741);    // compilenode identifier
                                                      obj9522.data["value"] = var_v;
                                                      var reader_ast_value9569 = function() {
                                                        return this.data["value"];
                                                      };
                                                      obj9522.methods["value"] = reader_ast_value9569;
                                                      obj9522.data["value"] = var_v;
                                                      var writer_ast_value9569 = function(argcv, o) {
                                                        this.data["value"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj9522.methods["value:="] = writer_ast_value9569;
                                                      obj9522.mutable = true;
                                                      superDepth = origSuperDepth;
                                                    };
                                                    obj_init_9522.apply(inheritingObject, []);
                                                    return obj9522;
                                                    };
                                                    obj9467.methods["new()object"] = func9521;
                                                  superDepth = origSuperDepth;
                                                };
                                                obj_init_9467.apply(obj9467, []);
                                                var var_stringNode = obj9467;
                                                setLineNumber(1739);    // compilenode method
                                                var func9570 = function(argcv) {    // method stringNode
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for stringNode"));
                                                  setModuleName("ast");
                                                  // stringNode is a simple accessor - elide try ... catch
                                                  setLineNumber(1731);    // compilenode identifier
                                                  return var_stringNode;
                                                };
                                                func9570.paramCounts = [0];
                                                this.methods["stringNode"] = func9570;
                                                func9570.definitionLine = 1739;
                                                func9570.definitionModule = "ast";
                                                this.methods["stringNode"].debug = "def";
                                                setLineNumber(1763);    // compilenode object
                                                var obj9571 = Grace_allocObject(GraceObject, "numNode");
                                                obj9571.definitionModule = "ast";
                                                obj9571.definitionLine = 1763;
                                                obj9571.outer = this;
                                                var reader_ast_outer9572 = function() {
                                                  return this.outer;
                                                };
                                                obj9571.methods["outer"] = reader_ast_outer9572;
                                                var obj_init_9571 = function() {
                                                  var origSuperDepth = superDepth;
                                                  superDepth = obj9571;
                                                  var func9573 = function(argcv) {    // method new(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_val = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(1)"));
                                                    setModuleName("ast");
                                                    setLineNumber(1764);    // compilenode object
                                                    var obj9574 = Grace_allocObject(null, "numNode.new");
                                                    obj9574.definitionModule = "ast";
                                                    obj9574.definitionLine = 1764;
                                                    obj9574.outer = this;
                                                    var reader_ast_outer9575 = function() {
                                                      return this.outer;
                                                    };
                                                    obj9574.methods["outer"] = reader_ast_outer9575;
                                                    var obj_init_9574 = function() {
                                                      var origSuperDepth = superDepth;
                                                      superDepth = obj9574;
                                                      var func9576 = function(argcv) {    // method accept(1)from(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_visitor = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                        var var_as = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[1] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1768);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                        curarg++;
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("ast");
                                                        setLineNumber(1769);    // compilenode identifier
                                                        var call9577 = callmethodChecked(var_visitor, "visitNum()up", [1, 1], this, var_as);
                                                        return call9577;
                                                      };
                                                      func9576.paramTypes = [];
                                                      func9576.paramTypes.push([]);
                                                      func9576.paramTypes.push([]);
                                                      func9576.paramCounts = [1, 1];
                                                      obj9574.methods["accept()from"] = func9576;
                                                      func9576.definitionLine = 1768;
                                                      func9576.definitionModule = "ast";
                                                      var func9578 = function(argcv) {    // method map(1)ancestors(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_blk = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                        var var_as = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[1] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                        setModuleName("ast");
                                                        setLineNumber(1772);    // compilenode call
                                                        onSelf = true;
                                                        var call9579 = callmethodChecked(this, "shallowCopy", [0]);
                                                        var var_n = call9579;
                                                        setLineNumber(1773);    // compilenode identifier
                                                        var call9580 = callmethodChecked(var_as, "extend", [1], var_n);
                                                        var var_newChain = call9580;
                                                        setLineNumber(1774);    // compilenode identifier
                                                        var call9581 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                        return call9581;
                                                      };
                                                      func9578.paramCounts = [1, 1];
                                                      obj9574.methods["map()ancestors"] = func9578;
                                                      func9578.definitionLine = 1771;
                                                      func9578.definitionModule = "ast";
                                                      var func9582 = function(argcv) {    // method pretty(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_depth = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                        setModuleName("ast");
                                                        setLineNumber(1777);    // compilenode string
                                                        var string9583 = new GraceString(")");
                                                        onSelf = true;
                                                        var call9585 = callmethodChecked(this, "value", [0]);
                                                        var string9587 = new GraceString("(");
                                                        var call9589 = callmethodsuper(this, "pretty", [1], var_depth);
                                                        var string9591 = new GraceString("");
                                                        var opresult9593 = callmethodChecked(string9591, "++", [1], call9589);
                                                        var opresult9595 = callmethodChecked(opresult9593, "++", [1], string9587);
                                                        var opresult9597 = callmethodChecked(opresult9595, "++", [1], call9585);
                                                        var opresult9599 = callmethodChecked(opresult9597, "++", [1], string9583);
                                                        return opresult9599;
                                                      };
                                                      func9582.paramCounts = [1];
                                                      obj9574.methods["pretty"] = func9582;
                                                      func9582.definitionLine = 1776;
                                                      func9582.definitionModule = "ast";
                                                      var func9600 = function(argcv) {    // method toGrace(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_depth = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1779);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("ast");
                                                        setLineNumber(1780);    // compilenode call
                                                        onSelf = true;
                                                        var call9601 = callmethodChecked(this, "value", [0]);
                                                        var call9602 = callmethodChecked(call9601, "asString", [0]);
                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], call9602)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method toGrace(1) does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        return call9602;
                                                      };
                                                      func9600.paramTypes = [];
                                                      func9600.paramTypes.push([type_Number, "depth"]);
                                                      func9600.paramCounts = [1];
                                                      obj9574.methods["toGrace"] = func9600;
                                                      func9600.definitionLine = 1779;
                                                      func9600.definitionModule = "ast";
                                                      var func9603 = function(argcv) {    // method asString
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                        setModuleName("ast");
                                                        setLineNumber(1782);    // compilenode string
                                                        var string9604 = new GraceString("");
                                                        onSelf = true;
                                                        var call9606 = callmethodChecked(this, "value", [0]);
                                                        var string9608 = new GraceString("num ");
                                                        var opresult9610 = callmethodChecked(string9608, "++", [1], call9606);
                                                        var opresult9612 = callmethodChecked(opresult9610, "++", [1], string9604);
                                                        return opresult9612;
                                                      };
                                                      func9603.paramCounts = [0];
                                                      obj9574.methods["asString"] = func9603;
                                                      func9603.definitionLine = 1782;
                                                      func9603.definitionModule = "ast";
                                                      var func9613 = function(argcv) {    // method shallowCopy
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                        setModuleName("ast");
                                                        setLineNumber(1784);    // compilenode call
                                                        onSelf = true;
                                                        var call9614 = callmethodChecked(this, "value", [0]);
                                                        var call9615 = callmethodChecked(var_numNode, "new", [1], call9614);
                                                        var call9616 = callmethodChecked(call9615, "shallowCopyFieldsFrom", [1], this);
                                                        return call9616;
                                                      };
                                                      func9613.paramCounts = [0];
                                                      obj9574.methods["shallowCopy"] = func9613;
                                                      func9613.definitionLine = 1783;
                                                      func9613.definitionModule = "ast";
                                                      var func9617 = function(argcv) {    // method statementName
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                        setModuleName("ast");
                                                        setLineNumber(1786);    // compilenode string
                                                        var string9618 = new GraceString("expression");
                                                        return string9618;
                                                      };
                                                      func9617.paramCounts = [0];
                                                      obj9574.methods["statementName"] = func9617;
                                                      func9617.definitionLine = 1786;
                                                      func9617.definitionModule = "ast";
                                                      setLineNumber(1765);    // compilenode call
                                                      var call9619 = callmethodChecked(superDepth, "outer", [0]);
                                                      onOuter = true;
                                                      onSelf = true;
                                                      var call9620 = callmethodChecked(call9619, "outer", [0]);
                                                      onOuter = true;
                                                      onSelf = true;
                                                      var call9621 = callmethodChecked(call9620, "baseNode()object", [0, 1], this);
                                                      obj9574.superobj = call9621;
                                                      if (call9621.data) obj9574.data = call9621.data;
                                                      if (call9621.hasOwnProperty('_value'))
                                                          obj9574._value = call9621._value;
                                                      setLineNumber(1766);    // compilenode string
                                                      var string9622 = new GraceString("num");
                                                      obj9574.data["kind"] = string9622;
                                                      var reader_ast_kind9623 = function() {
                                                        return this.data["kind"];
                                                      };
                                                      reader_ast_kind9623.def = true;
                                                      obj9574.methods["kind"] = reader_ast_kind9623;
                                                      setLineNumber(1767);    // compilenode identifier
                                                      obj9574.data["value"] = var_val;
                                                      var reader_ast_value9624 = function() {
                                                        return this.data["value"];
                                                      };
                                                      obj9574.methods["value"] = reader_ast_value9624;
                                                      obj9574.data["value"] = var_val;
                                                      var writer_ast_value9624 = function(argcv, o) {
                                                        this.data["value"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj9574.methods["value:="] = writer_ast_value9624;
                                                      obj9574.mutable = true;
                                                      superDepth = origSuperDepth;
                                                    };
                                                    obj_init_9574.apply(obj9574, []);
                                                    return obj9574;
                                                  };
                                                  func9573.paramCounts = [1];
                                                  obj9571.methods["new"] = func9573;
                                                  func9573.definitionLine = 1764;
                                                  func9573.definitionModule = "ast";
                                                    var func9625 = function(argcv) {    // method new(1     )()object
                                                      var curarg = 1;
                                                      var var_val = arguments[curarg];
                                                      curarg++;
                                                      var inheritingObject = arguments[curarg++];
                                                      // Start argument processing
                                                      curarg = 1;
                                                      curarg++;
                                                      // End argument processing
                                                      setModuleName("ast");
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var obj9626 = Grace_allocObject(null, "new");
                                                      obj9626.definitionModule = "ast";
                                                      obj9626.definitionLine = 1764;
                                                      var inho9626 = inheritingObject;
                                                      while (inho9626.superobj) inho9626 = inho9626.superobj;
                                                      inho9626.superobj = obj9626;
                                                      obj9626.data = inheritingObject.data;
                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                        obj9626._value = inheritingObject._value;
                                                      obj9626.outer = this;
                                                      var reader_ast_outer9627 = function() {
                                                        return this.outer;
                                                      };
                                                      obj9626.methods["outer"] = reader_ast_outer9627;
                                                      var obj_init_9626 = function() {
                                                        var origSuperDepth = superDepth;
                                                        superDepth = obj9626;
                                                        var func9628 = function(argcv) {    // method accept(1)from(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_visitor = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                          var var_as = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[1] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1768);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                          curarg++;
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("ast");
                                                          setLineNumber(1769);    // compilenode identifier
                                                          var call9629 = callmethodChecked(var_visitor, "visitNum()up", [1, 1], this, var_as);
                                                          return call9629;
                                                        };
                                                        func9628.paramTypes = [];
                                                        func9628.paramTypes.push([]);
                                                        func9628.paramTypes.push([]);
                                                        func9628.paramCounts = [1, 1];
                                                        obj9626.methods["accept()from"] = func9628;
                                                        func9628.definitionLine = 1768;
                                                        func9628.definitionModule = "ast";
                                                        var func9630 = function(argcv) {    // method map(1)ancestors(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_blk = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                          var var_as = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[1] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                          setModuleName("ast");
                                                          setLineNumber(1772);    // compilenode call
                                                          onSelf = true;
                                                          var call9631 = callmethodChecked(this, "shallowCopy", [0]);
                                                          var var_n = call9631;
                                                          setLineNumber(1773);    // compilenode identifier
                                                          var call9632 = callmethodChecked(var_as, "extend", [1], var_n);
                                                          var var_newChain = call9632;
                                                          setLineNumber(1774);    // compilenode identifier
                                                          var call9633 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                          return call9633;
                                                        };
                                                        func9630.paramCounts = [1, 1];
                                                        obj9626.methods["map()ancestors"] = func9630;
                                                        func9630.definitionLine = 1771;
                                                        func9630.definitionModule = "ast";
                                                        var func9634 = function(argcv) {    // method pretty(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_depth = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                          setModuleName("ast");
                                                          setLineNumber(1777);    // compilenode string
                                                          var string9635 = new GraceString(")");
                                                          onSelf = true;
                                                          var call9637 = callmethodChecked(this, "value", [0]);
                                                          var string9639 = new GraceString("(");
                                                          var call9641 = callmethodsuper(this, "pretty", [1], var_depth);
                                                          var string9643 = new GraceString("");
                                                          var opresult9645 = callmethodChecked(string9643, "++", [1], call9641);
                                                          var opresult9647 = callmethodChecked(opresult9645, "++", [1], string9639);
                                                          var opresult9649 = callmethodChecked(opresult9647, "++", [1], call9637);
                                                          var opresult9651 = callmethodChecked(opresult9649, "++", [1], string9635);
                                                          return opresult9651;
                                                        };
                                                        func9634.paramCounts = [1];
                                                        obj9626.methods["pretty"] = func9634;
                                                        func9634.definitionLine = 1776;
                                                        func9634.definitionModule = "ast";
                                                        var func9652 = function(argcv) {    // method toGrace(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_depth = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1779);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("ast");
                                                          setLineNumber(1780);    // compilenode call
                                                          onSelf = true;
                                                          var call9653 = callmethodChecked(this, "value", [0]);
                                                          var call9654 = callmethodChecked(call9653, "asString", [0]);
                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], call9654)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method toGrace(1) does not have " + 
                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                          return call9654;
                                                        };
                                                        func9652.paramTypes = [];
                                                        func9652.paramTypes.push([type_Number, "depth"]);
                                                        func9652.paramCounts = [1];
                                                        obj9626.methods["toGrace"] = func9652;
                                                        func9652.definitionLine = 1779;
                                                        func9652.definitionModule = "ast";
                                                        var func9655 = function(argcv) {    // method asString
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                          setModuleName("ast");
                                                          setLineNumber(1782);    // compilenode string
                                                          var string9656 = new GraceString("");
                                                          onSelf = true;
                                                          var call9658 = callmethodChecked(this, "value", [0]);
                                                          var string9660 = new GraceString("num ");
                                                          var opresult9662 = callmethodChecked(string9660, "++", [1], call9658);
                                                          var opresult9664 = callmethodChecked(opresult9662, "++", [1], string9656);
                                                          return opresult9664;
                                                        };
                                                        func9655.paramCounts = [0];
                                                        obj9626.methods["asString"] = func9655;
                                                        func9655.definitionLine = 1782;
                                                        func9655.definitionModule = "ast";
                                                        var func9665 = function(argcv) {    // method shallowCopy
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                          setModuleName("ast");
                                                          setLineNumber(1784);    // compilenode call
                                                          onSelf = true;
                                                          var call9666 = callmethodChecked(this, "value", [0]);
                                                          var call9667 = callmethodChecked(var_numNode, "new", [1], call9666);
                                                          var call9668 = callmethodChecked(call9667, "shallowCopyFieldsFrom", [1], this);
                                                          return call9668;
                                                        };
                                                        func9665.paramCounts = [0];
                                                        obj9626.methods["shallowCopy"] = func9665;
                                                        func9665.definitionLine = 1783;
                                                        func9665.definitionModule = "ast";
                                                        var func9669 = function(argcv) {    // method statementName
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                          setModuleName("ast");
                                                          setLineNumber(1786);    // compilenode string
                                                          var string9670 = new GraceString("expression");
                                                          return string9670;
                                                        };
                                                        func9669.paramCounts = [0];
                                                        obj9626.methods["statementName"] = func9669;
                                                        func9669.definitionLine = 1786;
                                                        func9669.definitionModule = "ast";
                                                        setLineNumber(1765);    // compilenode call
                                                        var call9671 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call9672 = callmethodChecked(call9671, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call9673 = callmethodChecked(call9672, "baseNode()object", [0, 1], this);
                                                        obj9626.superobj = call9673;
                                                        if (call9673.data) obj9626.data = call9673.data;
                                                        if (call9673.hasOwnProperty('_value'))
                                                            obj9626._value = call9673._value;
                                                        setLineNumber(1766);    // compilenode string
                                                        var string9674 = new GraceString("num");
                                                        obj9626.data["kind"] = string9674;
                                                        var reader_ast_kind9675 = function() {
                                                          return this.data["kind"];
                                                        };
                                                        reader_ast_kind9675.def = true;
                                                        obj9626.methods["kind"] = reader_ast_kind9675;
                                                        setLineNumber(1767);    // compilenode identifier
                                                        obj9626.data["value"] = var_val;
                                                        var reader_ast_value9676 = function() {
                                                          return this.data["value"];
                                                        };
                                                        obj9626.methods["value"] = reader_ast_value9676;
                                                        obj9626.data["value"] = var_val;
                                                        var writer_ast_value9676 = function(argcv, o) {
                                                          this.data["value"] = o;
                                                          return GraceDone;
                                                        };
                                                        obj9626.methods["value:="] = writer_ast_value9676;
                                                        obj9626.mutable = true;
                                                        superDepth = origSuperDepth;
                                                      };
                                                      obj_init_9626.apply(inheritingObject, []);
                                                      return obj9626;
                                                      };
                                                      obj9571.methods["new()object"] = func9625;
                                                    superDepth = origSuperDepth;
                                                  };
                                                  obj_init_9571.apply(obj9571, []);
                                                  var var_numNode = obj9571;
                                                  setLineNumber(1765);    // compilenode method
                                                  var func9677 = function(argcv) {    // method numNode
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for numNode"));
                                                    setModuleName("ast");
                                                    // numNode is a simple accessor - elide try ... catch
                                                    setLineNumber(1763);    // compilenode identifier
                                                    return var_numNode;
                                                  };
                                                  func9677.paramCounts = [0];
                                                  this.methods["numNode"] = func9677;
                                                  func9677.definitionLine = 1765;
                                                  func9677.definitionModule = "ast";
                                                  this.methods["numNode"].debug = "def";
                                                  setLineNumber(1789);    // compilenode object
                                                  var obj9678 = Grace_allocObject(GraceObject, "opNode");
                                                  obj9678.definitionModule = "ast";
                                                  obj9678.definitionLine = 1789;
                                                  obj9678.outer = this;
                                                  var reader_ast_outer9679 = function() {
                                                    return this.outer;
                                                  };
                                                  obj9678.methods["outer"] = reader_ast_outer9679;
                                                  var obj_init_9678 = function() {
                                                    var origSuperDepth = superDepth;
                                                    superDepth = obj9678;
                                                    var func9680 = function(argcv) {    // method new(3)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_op = arguments[curarg];
                                                      curarg++;
                                                      var var_l = arguments[curarg];
                                                      curarg++;
                                                      var var_r = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 3)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(3)"));
                                                      setModuleName("ast");
                                                      setLineNumber(1790);    // compilenode object
                                                      var obj9681 = Grace_allocObject(null, "opNode.new");
                                                      obj9681.definitionModule = "ast";
                                                      obj9681.definitionLine = 1790;
                                                      obj9681.outer = this;
                                                      var reader_ast_outer9682 = function() {
                                                        return this.outer;
                                                      };
                                                      obj9681.methods["outer"] = reader_ast_outer9682;
                                                      var obj_init_9681 = function() {
                                                        var origSuperDepth = superDepth;
                                                        superDepth = obj9681;
                                                        var func9683 = function(argcv) {    // method isSimple
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isSimple"));
                                                          setModuleName("ast");
                                                          // isSimple is a simple accessor - elide try ... catch
                                                          setLineNumber(1796);    // compilenode identifier
                                                          return GraceFalse;
                                                        };
                                                        func9683.paramCounts = [0];
                                                        obj9681.methods["isSimple"] = func9683;
                                                        func9683.definitionLine = 1796;
                                                        func9683.definitionModule = "ast";
                                                        var func9684 = function(argcv) {    // method nameString
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                          setModuleName("ast");
                                                          setLineNumber(1797);    // compilenode call
                                                          onSelf = true;
                                                          var call9685 = callmethodChecked(this, "value", [0]);
                                                          return call9685;
                                                        };
                                                        func9684.paramCounts = [0];
                                                        obj9681.methods["nameString"] = func9684;
                                                        func9684.definitionLine = 1797;
                                                        func9684.definitionModule = "ast";
                                                        var func9686 = function(argcv) {    // method accept(1)from(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_visitor = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                          var var_as = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[1] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1798);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                          curarg++;
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("ast");
                                                          var if9687 = GraceDone;
                                                          setLineNumber(1799);    // compilenode identifier
                                                          var call9688 = callmethodChecked(var_visitor, "visitOp()up", [1, 1], this, var_as);
                                                          if (Grace_isTrue(call9688)) {
                                                            setLineNumber(1800);    // compilenode identifier
                                                            var call9689 = callmethodChecked(var_as, "extend", [1], this);
                                                            var var_newChain = call9689;
                                                            setLineNumber(1801);    // compilenode call
                                                            onSelf = true;
                                                            var call9690 = callmethodChecked(this, "left", [0]);
                                                            var call9691 = callmethodChecked(call9690, "accept()from", [1, 1], var_visitor, var_newChain);
                                                            setLineNumber(1802);    // compilenode call
                                                            onSelf = true;
                                                            var call9692 = callmethodChecked(this, "right", [0]);
                                                            var call9693 = callmethodChecked(call9692, "accept()from", [1, 1], var_visitor, var_newChain);
                                                            if9687 = call9693;
                                                          }
                                                          return if9687;
                                                        };
                                                        func9686.paramTypes = [];
                                                        func9686.paramTypes.push([]);
                                                        func9686.paramTypes.push([]);
                                                        func9686.paramCounts = [1, 1];
                                                        obj9681.methods["accept()from"] = func9686;
                                                        func9686.definitionLine = 1798;
                                                        func9686.definitionModule = "ast";
                                                        var func9694 = function(argcv) {    // method map(1)ancestors(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_blk = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                          var var_as = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[1] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                          setModuleName("ast");
                                                          setLineNumber(1806);    // compilenode call
                                                          onSelf = true;
                                                          var call9695 = callmethodChecked(this, "shallowCopy", [0]);
                                                          var var_n = call9695;
                                                          setLineNumber(1807);    // compilenode identifier
                                                          var call9696 = callmethodChecked(var_as, "extend", [1], var_n);
                                                          var var_newChain = call9696;
                                                          setLineNumber(1808);    // compilenode call
                                                          onSelf = true;
                                                          var call9697 = callmethodChecked(this, "left", [0]);
                                                          var call9698 = callmethodChecked(call9697, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                          var call9699 = callmethodChecked(var_n, "left:=", [1], call9698);
                                                          setLineNumber(1809);    // compilenode call
                                                          onSelf = true;
                                                          var call9700 = callmethodChecked(this, "right", [0]);
                                                          var call9701 = callmethodChecked(call9700, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                          var call9702 = callmethodChecked(var_n, "right:=", [1], call9701);
                                                          setLineNumber(1810);    // compilenode identifier
                                                          var call9703 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                          return call9703;
                                                        };
                                                        func9694.paramCounts = [1, 1];
                                                        obj9681.methods["map()ancestors"] = func9694;
                                                        func9694.definitionLine = 1805;
                                                        func9694.definitionModule = "ast";
                                                        var func9704 = function(argcv) {    // method pretty(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_depth = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                          setModuleName("ast");
                                                          setLineNumber(1813);    // compilenode string
                                                          var string9705 = new GraceString("");
                                                          var var_spc = string9705;
                                                          setLineNumber(1814);    // compilenode num
                                                          var opresult9708 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                          var block9709 = new GraceBlock(this, 1814, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block9709.real = function(var_i) {
                                                            setLineNumber(1815);    // compilenode string
                                                            var string9710 = new GraceString("  ");
                                                            var opresult9713 = callmethodChecked(var_spc, "++", [1], string9710);
                                                            var_spc = opresult9713;
                                                            return GraceDone;
                                                          };
                                                          var call9714 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult9708, block9709);
                                                          setLineNumber(1817);    // compilenode string
                                                          var string9715 = new GraceString("\u203a");
                                                          onSelf = true;
                                                          var call9717 = callmethodChecked(this, "value", [0]);
                                                          var string9719 = new GraceString("\u2039");
                                                          var call9721 = callmethodsuper(this, "pretty", [1], var_depth);
                                                          var string9723 = new GraceString("");
                                                          var opresult9725 = callmethodChecked(string9723, "++", [1], call9721);
                                                          var opresult9727 = callmethodChecked(opresult9725, "++", [1], string9719);
                                                          var opresult9729 = callmethodChecked(opresult9727, "++", [1], call9717);
                                                          var opresult9731 = callmethodChecked(opresult9729, "++", [1], string9715);
                                                          var var_s = opresult9731;
                                                          setLineNumber(1818);    // compilenode string
                                                          var string9732 = new GraceString("\n");
                                                          var opresult9735 = callmethodChecked(var_s, "++", [1], string9732);
                                                          var_s = opresult9735;
                                                          setLineNumber(1819);    // compilenode identifier
                                                          var opresult9738 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                          onSelf = true;
                                                          var call9739 = callmethodChecked(this, "left", [0]);
                                                          var call9740 = callmethodChecked(call9739, "pretty", [1], opresult9738);
                                                          var opresult9744 = callmethodChecked(var_s, "++", [1], var_spc);
                                                          var opresult9746 = callmethodChecked(opresult9744, "++", [1], call9740);
                                                          var_s = opresult9746;
                                                          setLineNumber(1820);    // compilenode string
                                                          var string9747 = new GraceString("\n");
                                                          var opresult9750 = callmethodChecked(var_s, "++", [1], string9747);
                                                          var_s = opresult9750;
                                                          setLineNumber(1821);    // compilenode identifier
                                                          var opresult9753 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                          onSelf = true;
                                                          var call9754 = callmethodChecked(this, "right", [0]);
                                                          var call9755 = callmethodChecked(call9754, "pretty", [1], opresult9753);
                                                          var opresult9759 = callmethodChecked(var_s, "++", [1], var_spc);
                                                          var opresult9761 = callmethodChecked(opresult9759, "++", [1], call9755);
                                                          var_s = opresult9761;
                                                          setLineNumber(1822);    // compilenode identifier
                                                          return var_s;
                                                        };
                                                        func9704.paramCounts = [1];
                                                        obj9681.methods["pretty"] = func9704;
                                                        func9704.definitionLine = 1812;
                                                        func9704.definitionModule = "ast";
                                                        var func9762 = function(argcv) {    // method toGrace(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_depth = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1824);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("ast");
                                                          setLineNumber(1825);    // compilenode string
                                                          var string9763 = new GraceString("");
                                                          var var_s = string9763;
                                                          var if9764 = GraceDone;
                                                          setLineNumber(1826);    // compilenode call
                                                          onSelf = true;
                                                          var call9765 = callmethodChecked(this, "value", [0]);
                                                          onSelf = true;
                                                          var call9767 = callmethodChecked(this, "left", [0]);
                                                          var call9768 = callmethodChecked(call9767, "value", [0]);
                                                          var opresult9770 = callmethodChecked(call9768, "\u2260", [1], call9765);
                                                          var string9772 = new GraceString("op");
                                                          onSelf = true;
                                                          var call9774 = callmethodChecked(this, "left", [0]);
                                                          var call9775 = callmethodChecked(call9774, "kind", [0]);
                                                          var opresult9777 = callmethodChecked(call9775, "==", [1], string9772);
                                                          var opresult9779 = callmethodChecked(opresult9777, "&&", [1], opresult9770);
                                                          if (Grace_isTrue(opresult9779)) {
                                                            setLineNumber(1827);    // compilenode string
                                                            var string9780 = new GraceString(")");
                                                            onSelf = true;
                                                            var call9782 = callmethodChecked(this, "left", [0]);
                                                            var call9783 = callmethodChecked(call9782, "toGrace", [1], new GraceNum(0));
                                                            var string9785 = new GraceString("(");
                                                            var opresult9787 = callmethodChecked(string9785, "++", [1], call9783);
                                                            var opresult9789 = callmethodChecked(opresult9787, "++", [1], string9780);
                                                            var_s = opresult9789;
                                                            if9764 = GraceDone;
                                                          } else {
                                                            setLineNumber(1829);    // compilenode call
                                                            onSelf = true;
                                                            var call9790 = callmethodChecked(this, "left", [0]);
                                                            var call9791 = callmethodChecked(call9790, "toGrace", [1], new GraceNum(0));
                                                            var_s = call9791;
                                                            if9764 = GraceDone;
                                                          }
                                                          var if9792 = GraceDone;
                                                          setLineNumber(1831);    // compilenode string
                                                          var string9793 = new GraceString("..");
                                                          onSelf = true;
                                                          var call9795 = callmethodChecked(this, "value", [0]);
                                                          var opresult9797 = callmethodChecked(call9795, "==", [1], string9793);
                                                          if (Grace_isTrue(opresult9797)) {
                                                            setLineNumber(1832);    // compilenode call
                                                            onSelf = true;
                                                            var call9798 = callmethodChecked(this, "value", [0]);
                                                            var opresult9801 = callmethodChecked(var_s, "++", [1], call9798);
                                                            var_s = opresult9801;
                                                            if9792 = GraceDone;
                                                          } else {
                                                            setLineNumber(1834);    // compilenode string
                                                            var string9802 = new GraceString(" ");
                                                            onSelf = true;
                                                            var call9804 = callmethodChecked(this, "value", [0]);
                                                            var string9806 = new GraceString(" ");
                                                            var opresult9809 = callmethodChecked(var_s, "++", [1], string9806);
                                                            var opresult9811 = callmethodChecked(opresult9809, "++", [1], call9804);
                                                            var opresult9813 = callmethodChecked(opresult9811, "++", [1], string9802);
                                                            var_s = opresult9813;
                                                            if9792 = GraceDone;
                                                          }
                                                          var if9814 = GraceDone;
                                                          setLineNumber(1836);    // compilenode call
                                                          onSelf = true;
                                                          var call9815 = callmethodChecked(this, "value", [0]);
                                                          onSelf = true;
                                                          var call9817 = callmethodChecked(this, "right", [0]);
                                                          var call9818 = callmethodChecked(call9817, "value", [0]);
                                                          var opresult9820 = callmethodChecked(call9818, "\u2260", [1], call9815);
                                                          var string9822 = new GraceString("op");
                                                          onSelf = true;
                                                          var call9824 = callmethodChecked(this, "right", [0]);
                                                          var call9825 = callmethodChecked(call9824, "kind", [0]);
                                                          var opresult9827 = callmethodChecked(call9825, "==", [1], string9822);
                                                          var opresult9829 = callmethodChecked(opresult9827, "&&", [1], opresult9820);
                                                          if (Grace_isTrue(opresult9829)) {
                                                            setLineNumber(1837);    // compilenode string
                                                            var string9830 = new GraceString(")");
                                                            onSelf = true;
                                                            var call9832 = callmethodChecked(this, "right", [0]);
                                                            var call9833 = callmethodChecked(call9832, "toGrace", [1], new GraceNum(0));
                                                            var string9835 = new GraceString("(");
                                                            var opresult9838 = callmethodChecked(var_s, "++", [1], string9835);
                                                            var opresult9840 = callmethodChecked(opresult9838, "++", [1], call9833);
                                                            var opresult9842 = callmethodChecked(opresult9840, "++", [1], string9830);
                                                            var_s = opresult9842;
                                                            if9814 = GraceDone;
                                                          } else {
                                                            setLineNumber(1839);    // compilenode call
                                                            onSelf = true;
                                                            var call9843 = callmethodChecked(this, "right", [0]);
                                                            var call9844 = callmethodChecked(call9843, "toGrace", [1], new GraceNum(0));
                                                            var opresult9847 = callmethodChecked(var_s, "++", [1], call9844);
                                                            var_s = opresult9847;
                                                            if9814 = GraceDone;
                                                          }
                                                          setLineNumber(1841);    // return value
                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method toGrace(1) does not have " + 
                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                          return var_s;
                                                        };
                                                        func9762.paramTypes = [];
                                                        func9762.paramTypes.push([type_Number, "depth"]);
                                                        func9762.paramCounts = [1];
                                                        obj9681.methods["toGrace"] = func9762;
                                                        func9762.definitionLine = 1824;
                                                        func9762.definitionModule = "ast";
                                                        var func9848 = function(argcv) {    // method asIdentifier
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asIdentifier"));
                                                          setModuleName("ast");
                                                          setLineNumber(1845);    // compilenode call
                                                          onSelf = true;
                                                          var call9849 = callmethodChecked(this, "value", [0]);
                                                          onSelf = true;
                                                          var call9850 = callmethodChecked(this, "scope", [0]);
                                                          var call9851 = callmethodChecked(var_identifierNode, "new()scope", [2, 1], call9849, GraceFalse, call9850);
                                                          var var_resultNode = call9851;
                                                          setLineNumber(1846);    // compilenode identifier
                                                          var call9852 = callmethodChecked(var_resultNode, "inRequest:=", [1], GraceTrue);
                                                          setLineNumber(1847);    // compilenode call
                                                          onSelf = true;
                                                          var call9853 = callmethodChecked(this, "line", [0]);
                                                          var call9854 = callmethodChecked(var_resultNode, "line:=", [1], call9853);
                                                          setLineNumber(1848);    // compilenode call
                                                          onSelf = true;
                                                          var call9855 = callmethodChecked(this, "linePos", [0]);
                                                          var call9856 = callmethodChecked(var_resultNode, "linePos:=", [1], call9855);
                                                          setLineNumber(1849);    // compilenode identifier
                                                          return var_resultNode;
                                                        };
                                                        func9848.paramCounts = [0];
                                                        obj9681.methods["asIdentifier"] = func9848;
                                                        func9848.definitionLine = 1843;
                                                        func9848.definitionModule = "ast";
                                                        var func9857 = function(argcv) {    // method shallowCopy
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                          setModuleName("ast");
                                                          setLineNumber(1852);    // compilenode call
                                                          onSelf = true;
                                                          var call9858 = callmethodChecked(this, "value", [0]);
                                                          var call9859 = callmethodChecked(var_opNode, "new", [3], call9858, var_nullNode, var_nullNode);
                                                          var call9860 = callmethodChecked(call9859, "shallowCopyFieldsFrom", [1], this);
                                                          return call9860;
                                                        };
                                                        func9857.paramCounts = [0];
                                                        obj9681.methods["shallowCopy"] = func9857;
                                                        func9857.definitionLine = 1851;
                                                        func9857.definitionModule = "ast";
                                                        setLineNumber(1791);    // compilenode call
                                                        var call9861 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call9862 = callmethodChecked(call9861, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call9863 = callmethodChecked(call9862, "baseNode()object", [0, 1], this);
                                                        obj9681.superobj = call9863;
                                                        if (call9863.data) obj9681.data = call9863.data;
                                                        if (call9863.hasOwnProperty('_value'))
                                                            obj9681._value = call9863._value;
                                                        setLineNumber(1792);    // compilenode string
                                                        var string9864 = new GraceString("op");
                                                        obj9681.data["kind"] = string9864;
                                                        var reader_ast_kind9865 = function() {
                                                          return this.data["kind"];
                                                        };
                                                        reader_ast_kind9865.def = true;
                                                        obj9681.methods["kind"] = reader_ast_kind9865;
                                                        setLineNumber(1793);    // compilenode identifier
                                                        obj9681.data["value"] = var_op;
                                                        var reader_ast_value9866 = function() {
                                                          return this.data["value"];
                                                        };
                                                        reader_ast_value9866.def = true;
                                                        obj9681.methods["value"] = reader_ast_value9866;
                                                        setLineNumber(1794);    // compilenode identifier
                                                        obj9681.data["left"] = var_l;
                                                        var reader_ast_left9867 = function() {
                                                          return this.data["left"];
                                                        };
                                                        obj9681.methods["left"] = reader_ast_left9867;
                                                        obj9681.data["left"] = var_l;
                                                        var writer_ast_left9867 = function(argcv, o) {
                                                          this.data["left"] = o;
                                                          return GraceDone;
                                                        };
                                                        obj9681.methods["left:="] = writer_ast_left9867;
                                                        obj9681.mutable = true;
                                                        setLineNumber(1795);    // compilenode identifier
                                                        obj9681.data["right"] = var_r;
                                                        var reader_ast_right9868 = function() {
                                                          return this.data["right"];
                                                        };
                                                        obj9681.methods["right"] = reader_ast_right9868;
                                                        obj9681.data["right"] = var_r;
                                                        var writer_ast_right9868 = function(argcv, o) {
                                                          this.data["right"] = o;
                                                          return GraceDone;
                                                        };
                                                        obj9681.methods["right:="] = writer_ast_right9868;
                                                        obj9681.mutable = true;
                                                        superDepth = origSuperDepth;
                                                      };
                                                      obj_init_9681.apply(obj9681, []);
                                                      return obj9681;
                                                    };
                                                    func9680.paramCounts = [3];
                                                    obj9678.methods["new"] = func9680;
                                                    func9680.definitionLine = 1790;
                                                    func9680.definitionModule = "ast";
                                                      var func9869 = function(argcv) {    // method new(3     )()object
                                                        var curarg = 1;
                                                        var var_op = arguments[curarg];
                                                        curarg++;
                                                        var var_l = arguments[curarg];
                                                        curarg++;
                                                        var var_r = arguments[curarg];
                                                        curarg++;
                                                        var inheritingObject = arguments[curarg++];
                                                        // Start argument processing
                                                        curarg = 1;
                                                        curarg++;
                                                        curarg++;
                                                        curarg++;
                                                        // End argument processing
                                                        setModuleName("ast");
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var obj9870 = Grace_allocObject(null, "new");
                                                        obj9870.definitionModule = "ast";
                                                        obj9870.definitionLine = 1790;
                                                        var inho9870 = inheritingObject;
                                                        while (inho9870.superobj) inho9870 = inho9870.superobj;
                                                        inho9870.superobj = obj9870;
                                                        obj9870.data = inheritingObject.data;
                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                          obj9870._value = inheritingObject._value;
                                                        obj9870.outer = this;
                                                        var reader_ast_outer9871 = function() {
                                                          return this.outer;
                                                        };
                                                        obj9870.methods["outer"] = reader_ast_outer9871;
                                                        var obj_init_9870 = function() {
                                                          var origSuperDepth = superDepth;
                                                          superDepth = obj9870;
                                                          var func9872 = function(argcv) {    // method isSimple
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isSimple"));
                                                            setModuleName("ast");
                                                            // isSimple is a simple accessor - elide try ... catch
                                                            setLineNumber(1796);    // compilenode identifier
                                                            return GraceFalse;
                                                          };
                                                          func9872.paramCounts = [0];
                                                          obj9870.methods["isSimple"] = func9872;
                                                          func9872.definitionLine = 1796;
                                                          func9872.definitionModule = "ast";
                                                          var func9873 = function(argcv) {    // method nameString
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                            setModuleName("ast");
                                                            setLineNumber(1797);    // compilenode call
                                                            onSelf = true;
                                                            var call9874 = callmethodChecked(this, "value", [0]);
                                                            return call9874;
                                                          };
                                                          func9873.paramCounts = [0];
                                                          obj9870.methods["nameString"] = func9873;
                                                          func9873.definitionLine = 1797;
                                                          func9873.definitionModule = "ast";
                                                          var func9875 = function(argcv) {    // method accept(1)from(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_visitor = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                            var var_as = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[1] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1798);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                            curarg++;
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("ast");
                                                            var if9876 = GraceDone;
                                                            setLineNumber(1799);    // compilenode identifier
                                                            var call9877 = callmethodChecked(var_visitor, "visitOp()up", [1, 1], this, var_as);
                                                            if (Grace_isTrue(call9877)) {
                                                              setLineNumber(1800);    // compilenode identifier
                                                              var call9878 = callmethodChecked(var_as, "extend", [1], this);
                                                              var var_newChain = call9878;
                                                              setLineNumber(1801);    // compilenode call
                                                              onSelf = true;
                                                              var call9879 = callmethodChecked(this, "left", [0]);
                                                              var call9880 = callmethodChecked(call9879, "accept()from", [1, 1], var_visitor, var_newChain);
                                                              setLineNumber(1802);    // compilenode call
                                                              onSelf = true;
                                                              var call9881 = callmethodChecked(this, "right", [0]);
                                                              var call9882 = callmethodChecked(call9881, "accept()from", [1, 1], var_visitor, var_newChain);
                                                              if9876 = call9882;
                                                            }
                                                            return if9876;
                                                          };
                                                          func9875.paramTypes = [];
                                                          func9875.paramTypes.push([]);
                                                          func9875.paramTypes.push([]);
                                                          func9875.paramCounts = [1, 1];
                                                          obj9870.methods["accept()from"] = func9875;
                                                          func9875.definitionLine = 1798;
                                                          func9875.definitionModule = "ast";
                                                          var func9883 = function(argcv) {    // method map(1)ancestors(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_blk = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                            var var_as = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[1] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                            setModuleName("ast");
                                                            setLineNumber(1806);    // compilenode call
                                                            onSelf = true;
                                                            var call9884 = callmethodChecked(this, "shallowCopy", [0]);
                                                            var var_n = call9884;
                                                            setLineNumber(1807);    // compilenode identifier
                                                            var call9885 = callmethodChecked(var_as, "extend", [1], var_n);
                                                            var var_newChain = call9885;
                                                            setLineNumber(1808);    // compilenode call
                                                            onSelf = true;
                                                            var call9886 = callmethodChecked(this, "left", [0]);
                                                            var call9887 = callmethodChecked(call9886, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                            var call9888 = callmethodChecked(var_n, "left:=", [1], call9887);
                                                            setLineNumber(1809);    // compilenode call
                                                            onSelf = true;
                                                            var call9889 = callmethodChecked(this, "right", [0]);
                                                            var call9890 = callmethodChecked(call9889, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                            var call9891 = callmethodChecked(var_n, "right:=", [1], call9890);
                                                            setLineNumber(1810);    // compilenode identifier
                                                            var call9892 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                            return call9892;
                                                          };
                                                          func9883.paramCounts = [1, 1];
                                                          obj9870.methods["map()ancestors"] = func9883;
                                                          func9883.definitionLine = 1805;
                                                          func9883.definitionModule = "ast";
                                                          var func9893 = function(argcv) {    // method pretty(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_depth = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                            setModuleName("ast");
                                                            setLineNumber(1813);    // compilenode string
                                                            var string9894 = new GraceString("");
                                                            var var_spc = string9894;
                                                            setLineNumber(1814);    // compilenode num
                                                            var opresult9897 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                            var block9898 = new GraceBlock(this, 1814, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block9898.real = function(var_i) {
                                                              setLineNumber(1815);    // compilenode string
                                                              var string9899 = new GraceString("  ");
                                                              var opresult9902 = callmethodChecked(var_spc, "++", [1], string9899);
                                                              var_spc = opresult9902;
                                                              return GraceDone;
                                                            };
                                                            var call9903 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult9897, block9898);
                                                            setLineNumber(1817);    // compilenode string
                                                            var string9904 = new GraceString("\u203a");
                                                            onSelf = true;
                                                            var call9906 = callmethodChecked(this, "value", [0]);
                                                            var string9908 = new GraceString("\u2039");
                                                            var call9910 = callmethodsuper(this, "pretty", [1], var_depth);
                                                            var string9912 = new GraceString("");
                                                            var opresult9914 = callmethodChecked(string9912, "++", [1], call9910);
                                                            var opresult9916 = callmethodChecked(opresult9914, "++", [1], string9908);
                                                            var opresult9918 = callmethodChecked(opresult9916, "++", [1], call9906);
                                                            var opresult9920 = callmethodChecked(opresult9918, "++", [1], string9904);
                                                            var var_s = opresult9920;
                                                            setLineNumber(1818);    // compilenode string
                                                            var string9921 = new GraceString("\n");
                                                            var opresult9924 = callmethodChecked(var_s, "++", [1], string9921);
                                                            var_s = opresult9924;
                                                            setLineNumber(1819);    // compilenode identifier
                                                            var opresult9927 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                            onSelf = true;
                                                            var call9928 = callmethodChecked(this, "left", [0]);
                                                            var call9929 = callmethodChecked(call9928, "pretty", [1], opresult9927);
                                                            var opresult9933 = callmethodChecked(var_s, "++", [1], var_spc);
                                                            var opresult9935 = callmethodChecked(opresult9933, "++", [1], call9929);
                                                            var_s = opresult9935;
                                                            setLineNumber(1820);    // compilenode string
                                                            var string9936 = new GraceString("\n");
                                                            var opresult9939 = callmethodChecked(var_s, "++", [1], string9936);
                                                            var_s = opresult9939;
                                                            setLineNumber(1821);    // compilenode identifier
                                                            var opresult9942 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                            onSelf = true;
                                                            var call9943 = callmethodChecked(this, "right", [0]);
                                                            var call9944 = callmethodChecked(call9943, "pretty", [1], opresult9942);
                                                            var opresult9948 = callmethodChecked(var_s, "++", [1], var_spc);
                                                            var opresult9950 = callmethodChecked(opresult9948, "++", [1], call9944);
                                                            var_s = opresult9950;
                                                            setLineNumber(1822);    // compilenode identifier
                                                            return var_s;
                                                          };
                                                          func9893.paramCounts = [1];
                                                          obj9870.methods["pretty"] = func9893;
                                                          func9893.definitionLine = 1812;
                                                          func9893.definitionModule = "ast";
                                                          var func9951 = function(argcv) {    // method toGrace(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_depth = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1824);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("ast");
                                                            setLineNumber(1825);    // compilenode string
                                                            var string9952 = new GraceString("");
                                                            var var_s = string9952;
                                                            var if9953 = GraceDone;
                                                            setLineNumber(1826);    // compilenode call
                                                            onSelf = true;
                                                            var call9954 = callmethodChecked(this, "value", [0]);
                                                            onSelf = true;
                                                            var call9956 = callmethodChecked(this, "left", [0]);
                                                            var call9957 = callmethodChecked(call9956, "value", [0]);
                                                            var opresult9959 = callmethodChecked(call9957, "\u2260", [1], call9954);
                                                            var string9961 = new GraceString("op");
                                                            onSelf = true;
                                                            var call9963 = callmethodChecked(this, "left", [0]);
                                                            var call9964 = callmethodChecked(call9963, "kind", [0]);
                                                            var opresult9966 = callmethodChecked(call9964, "==", [1], string9961);
                                                            var opresult9968 = callmethodChecked(opresult9966, "&&", [1], opresult9959);
                                                            if (Grace_isTrue(opresult9968)) {
                                                              setLineNumber(1827);    // compilenode string
                                                              var string9969 = new GraceString(")");
                                                              onSelf = true;
                                                              var call9971 = callmethodChecked(this, "left", [0]);
                                                              var call9972 = callmethodChecked(call9971, "toGrace", [1], new GraceNum(0));
                                                              var string9974 = new GraceString("(");
                                                              var opresult9976 = callmethodChecked(string9974, "++", [1], call9972);
                                                              var opresult9978 = callmethodChecked(opresult9976, "++", [1], string9969);
                                                              var_s = opresult9978;
                                                              if9953 = GraceDone;
                                                            } else {
                                                              setLineNumber(1829);    // compilenode call
                                                              onSelf = true;
                                                              var call9979 = callmethodChecked(this, "left", [0]);
                                                              var call9980 = callmethodChecked(call9979, "toGrace", [1], new GraceNum(0));
                                                              var_s = call9980;
                                                              if9953 = GraceDone;
                                                            }
                                                            var if9981 = GraceDone;
                                                            setLineNumber(1831);    // compilenode string
                                                            var string9982 = new GraceString("..");
                                                            onSelf = true;
                                                            var call9984 = callmethodChecked(this, "value", [0]);
                                                            var opresult9986 = callmethodChecked(call9984, "==", [1], string9982);
                                                            if (Grace_isTrue(opresult9986)) {
                                                              setLineNumber(1832);    // compilenode call
                                                              onSelf = true;
                                                              var call9987 = callmethodChecked(this, "value", [0]);
                                                              var opresult9990 = callmethodChecked(var_s, "++", [1], call9987);
                                                              var_s = opresult9990;
                                                              if9981 = GraceDone;
                                                            } else {
                                                              setLineNumber(1834);    // compilenode string
                                                              var string9991 = new GraceString(" ");
                                                              onSelf = true;
                                                              var call9993 = callmethodChecked(this, "value", [0]);
                                                              var string9995 = new GraceString(" ");
                                                              var opresult9998 = callmethodChecked(var_s, "++", [1], string9995);
                                                              var opresult10000 = callmethodChecked(opresult9998, "++", [1], call9993);
                                                              var opresult10002 = callmethodChecked(opresult10000, "++", [1], string9991);
                                                              var_s = opresult10002;
                                                              if9981 = GraceDone;
                                                            }
                                                            var if10003 = GraceDone;
                                                            setLineNumber(1836);    // compilenode call
                                                            onSelf = true;
                                                            var call10004 = callmethodChecked(this, "value", [0]);
                                                            onSelf = true;
                                                            var call10006 = callmethodChecked(this, "right", [0]);
                                                            var call10007 = callmethodChecked(call10006, "value", [0]);
                                                            var opresult10009 = callmethodChecked(call10007, "\u2260", [1], call10004);
                                                            var string10011 = new GraceString("op");
                                                            onSelf = true;
                                                            var call10013 = callmethodChecked(this, "right", [0]);
                                                            var call10014 = callmethodChecked(call10013, "kind", [0]);
                                                            var opresult10016 = callmethodChecked(call10014, "==", [1], string10011);
                                                            var opresult10018 = callmethodChecked(opresult10016, "&&", [1], opresult10009);
                                                            if (Grace_isTrue(opresult10018)) {
                                                              setLineNumber(1837);    // compilenode string
                                                              var string10019 = new GraceString(")");
                                                              onSelf = true;
                                                              var call10021 = callmethodChecked(this, "right", [0]);
                                                              var call10022 = callmethodChecked(call10021, "toGrace", [1], new GraceNum(0));
                                                              var string10024 = new GraceString("(");
                                                              var opresult10027 = callmethodChecked(var_s, "++", [1], string10024);
                                                              var opresult10029 = callmethodChecked(opresult10027, "++", [1], call10022);
                                                              var opresult10031 = callmethodChecked(opresult10029, "++", [1], string10019);
                                                              var_s = opresult10031;
                                                              if10003 = GraceDone;
                                                            } else {
                                                              setLineNumber(1839);    // compilenode call
                                                              onSelf = true;
                                                              var call10032 = callmethodChecked(this, "right", [0]);
                                                              var call10033 = callmethodChecked(call10032, "toGrace", [1], new GraceNum(0));
                                                              var opresult10036 = callmethodChecked(var_s, "++", [1], call10033);
                                                              var_s = opresult10036;
                                                              if10003 = GraceDone;
                                                            }
                                                            setLineNumber(1841);    // return value
                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method toGrace(1) does not have " + 
                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                            return var_s;
                                                          };
                                                          func9951.paramTypes = [];
                                                          func9951.paramTypes.push([type_Number, "depth"]);
                                                          func9951.paramCounts = [1];
                                                          obj9870.methods["toGrace"] = func9951;
                                                          func9951.definitionLine = 1824;
                                                          func9951.definitionModule = "ast";
                                                          var func10037 = function(argcv) {    // method asIdentifier
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asIdentifier"));
                                                            setModuleName("ast");
                                                            setLineNumber(1845);    // compilenode call
                                                            onSelf = true;
                                                            var call10038 = callmethodChecked(this, "value", [0]);
                                                            onSelf = true;
                                                            var call10039 = callmethodChecked(this, "scope", [0]);
                                                            var call10040 = callmethodChecked(var_identifierNode, "new()scope", [2, 1], call10038, GraceFalse, call10039);
                                                            var var_resultNode = call10040;
                                                            setLineNumber(1846);    // compilenode identifier
                                                            var call10041 = callmethodChecked(var_resultNode, "inRequest:=", [1], GraceTrue);
                                                            setLineNumber(1847);    // compilenode call
                                                            onSelf = true;
                                                            var call10042 = callmethodChecked(this, "line", [0]);
                                                            var call10043 = callmethodChecked(var_resultNode, "line:=", [1], call10042);
                                                            setLineNumber(1848);    // compilenode call
                                                            onSelf = true;
                                                            var call10044 = callmethodChecked(this, "linePos", [0]);
                                                            var call10045 = callmethodChecked(var_resultNode, "linePos:=", [1], call10044);
                                                            setLineNumber(1849);    // compilenode identifier
                                                            return var_resultNode;
                                                          };
                                                          func10037.paramCounts = [0];
                                                          obj9870.methods["asIdentifier"] = func10037;
                                                          func10037.definitionLine = 1843;
                                                          func10037.definitionModule = "ast";
                                                          var func10046 = function(argcv) {    // method shallowCopy
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                            setModuleName("ast");
                                                            setLineNumber(1852);    // compilenode call
                                                            onSelf = true;
                                                            var call10047 = callmethodChecked(this, "value", [0]);
                                                            var call10048 = callmethodChecked(var_opNode, "new", [3], call10047, var_nullNode, var_nullNode);
                                                            var call10049 = callmethodChecked(call10048, "shallowCopyFieldsFrom", [1], this);
                                                            return call10049;
                                                          };
                                                          func10046.paramCounts = [0];
                                                          obj9870.methods["shallowCopy"] = func10046;
                                                          func10046.definitionLine = 1851;
                                                          func10046.definitionModule = "ast";
                                                          setLineNumber(1791);    // compilenode call
                                                          var call10050 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call10051 = callmethodChecked(call10050, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call10052 = callmethodChecked(call10051, "baseNode()object", [0, 1], this);
                                                          obj9870.superobj = call10052;
                                                          if (call10052.data) obj9870.data = call10052.data;
                                                          if (call10052.hasOwnProperty('_value'))
                                                              obj9870._value = call10052._value;
                                                          setLineNumber(1792);    // compilenode string
                                                          var string10053 = new GraceString("op");
                                                          obj9870.data["kind"] = string10053;
                                                          var reader_ast_kind10054 = function() {
                                                            return this.data["kind"];
                                                          };
                                                          reader_ast_kind10054.def = true;
                                                          obj9870.methods["kind"] = reader_ast_kind10054;
                                                          setLineNumber(1793);    // compilenode identifier
                                                          obj9870.data["value"] = var_op;
                                                          var reader_ast_value10055 = function() {
                                                            return this.data["value"];
                                                          };
                                                          reader_ast_value10055.def = true;
                                                          obj9870.methods["value"] = reader_ast_value10055;
                                                          setLineNumber(1794);    // compilenode identifier
                                                          obj9870.data["left"] = var_l;
                                                          var reader_ast_left10056 = function() {
                                                            return this.data["left"];
                                                          };
                                                          obj9870.methods["left"] = reader_ast_left10056;
                                                          obj9870.data["left"] = var_l;
                                                          var writer_ast_left10056 = function(argcv, o) {
                                                            this.data["left"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj9870.methods["left:="] = writer_ast_left10056;
                                                          obj9870.mutable = true;
                                                          setLineNumber(1795);    // compilenode identifier
                                                          obj9870.data["right"] = var_r;
                                                          var reader_ast_right10057 = function() {
                                                            return this.data["right"];
                                                          };
                                                          obj9870.methods["right"] = reader_ast_right10057;
                                                          obj9870.data["right"] = var_r;
                                                          var writer_ast_right10057 = function(argcv, o) {
                                                            this.data["right"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj9870.methods["right:="] = writer_ast_right10057;
                                                          obj9870.mutable = true;
                                                          superDepth = origSuperDepth;
                                                        };
                                                        obj_init_9870.apply(inheritingObject, []);
                                                        return obj9870;
                                                        };
                                                        obj9678.methods["new()object"] = func9869;
                                                      superDepth = origSuperDepth;
                                                    };
                                                    obj_init_9678.apply(obj9678, []);
                                                    var var_opNode = obj9678;
                                                    setLineNumber(1791);    // compilenode method
                                                    var func10058 = function(argcv) {    // method opNode
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for opNode"));
                                                      setModuleName("ast");
                                                      // opNode is a simple accessor - elide try ... catch
                                                      setLineNumber(1789);    // compilenode identifier
                                                      return var_opNode;
                                                    };
                                                    func10058.paramCounts = [0];
                                                    this.methods["opNode"] = func10058;
                                                    func10058.definitionLine = 1791;
                                                    func10058.definitionModule = "ast";
                                                    this.methods["opNode"].debug = "def";
                                                    setLineNumber(1856);    // compilenode object
                                                    var obj10059 = Grace_allocObject(GraceObject, "bindNode");
                                                    obj10059.definitionModule = "ast";
                                                    obj10059.definitionLine = 1856;
                                                    obj10059.outer = this;
                                                    var reader_ast_outer10060 = function() {
                                                      return this.outer;
                                                    };
                                                    obj10059.methods["outer"] = reader_ast_outer10060;
                                                    var obj_init_10059 = function() {
                                                      var origSuperDepth = superDepth;
                                                      superDepth = obj10059;
                                                      var func10061 = function(argcv) {    // method new(2)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_dest__39__ = arguments[curarg];
                                                        curarg++;
                                                        var var_val__39__ = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 2)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(2)"));
                                                        setModuleName("ast");
                                                        setLineNumber(1857);    // compilenode object
                                                        var obj10062 = Grace_allocObject(null, "bindNode.new");
                                                        obj10062.definitionModule = "ast";
                                                        obj10062.definitionLine = 1857;
                                                        obj10062.outer = this;
                                                        var reader_ast_outer10063 = function() {
                                                          return this.outer;
                                                        };
                                                        obj10062.methods["outer"] = reader_ast_outer10063;
                                                        var obj_init_10062 = function() {
                                                          var origSuperDepth = superDepth;
                                                          superDepth = obj10062;
                                                          var func10064 = function(argcv) {    // method isBind
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isBind"));
                                                            setModuleName("ast");
                                                            // isBind is a simple accessor - elide try ... catch
                                                            setLineNumber(1864);    // compilenode identifier
                                                            return GraceTrue;
                                                          };
                                                          func10064.paramCounts = [0];
                                                          obj10062.methods["isBind"] = func10064;
                                                          func10064.definitionLine = 1864;
                                                          func10064.definitionModule = "ast";
                                                          var func10065 = function(argcv) {    // method asString
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                            setModuleName("ast");
                                                            setLineNumber(1865);    // compilenode string
                                                            var string10066 = new GraceString("");
                                                            onSelf = true;
                                                            var call10068 = callmethodChecked(this, "value", [0]);
                                                            var string10070 = new GraceString("bind ");
                                                            var opresult10072 = callmethodChecked(string10070, "++", [1], call10068);
                                                            var opresult10074 = callmethodChecked(opresult10072, "++", [1], string10066);
                                                            return opresult10074;
                                                          };
                                                          func10065.paramCounts = [0];
                                                          obj10062.methods["asString"] = func10065;
                                                          func10065.definitionLine = 1865;
                                                          func10065.definitionModule = "ast";
                                                          var func10075 = function(argcv) {    // method accept(1)from(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_visitor = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                            var var_as = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[1] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1866);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                            curarg++;
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("ast");
                                                            var if10076 = GraceDone;
                                                            setLineNumber(1867);    // compilenode identifier
                                                            var call10077 = callmethodChecked(var_visitor, "visitBind()up", [1, 1], this, var_as);
                                                            if (Grace_isTrue(call10077)) {
                                                              setLineNumber(1868);    // compilenode identifier
                                                              var call10078 = callmethodChecked(var_as, "extend", [1], this);
                                                              var var_newChain = call10078;
                                                              setLineNumber(1869);    // compilenode call
                                                              onSelf = true;
                                                              var call10079 = callmethodChecked(this, "dest", [0]);
                                                              var call10080 = callmethodChecked(call10079, "accept()from", [1, 1], var_visitor, var_newChain);
                                                              setLineNumber(1870);    // compilenode call
                                                              onSelf = true;
                                                              var call10081 = callmethodChecked(this, "value", [0]);
                                                              var call10082 = callmethodChecked(call10081, "accept()from", [1, 1], var_visitor, var_newChain);
                                                              if10076 = call10082;
                                                            }
                                                            return if10076;
                                                          };
                                                          func10075.paramTypes = [];
                                                          func10075.paramTypes.push([]);
                                                          func10075.paramTypes.push([]);
                                                          func10075.paramCounts = [1, 1];
                                                          obj10062.methods["accept()from"] = func10075;
                                                          func10075.definitionLine = 1866;
                                                          func10075.definitionModule = "ast";
                                                          var func10083 = function(argcv) {    // method map(1)ancestors(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_blk = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                            var var_as = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[1] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                            setModuleName("ast");
                                                            setLineNumber(1874);    // compilenode call
                                                            onSelf = true;
                                                            var call10084 = callmethodChecked(this, "shallowCopy", [0]);
                                                            var var_n = call10084;
                                                            setLineNumber(1875);    // compilenode identifier
                                                            var call10085 = callmethodChecked(var_as, "extend", [1], var_n);
                                                            var var_newChain = call10085;
                                                            setLineNumber(1876);    // compilenode call
                                                            onSelf = true;
                                                            var call10086 = callmethodChecked(this, "dest", [0]);
                                                            var call10087 = callmethodChecked(call10086, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                            var call10088 = callmethodChecked(var_n, "dest:=", [1], call10087);
                                                            setLineNumber(1877);    // compilenode call
                                                            onSelf = true;
                                                            var call10089 = callmethodChecked(this, "value", [0]);
                                                            var call10090 = callmethodChecked(call10089, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                            var call10091 = callmethodChecked(var_n, "value:=", [1], call10090);
                                                            setLineNumber(1878);    // compilenode identifier
                                                            var call10092 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                            return call10092;
                                                          };
                                                          func10083.paramCounts = [1, 1];
                                                          obj10062.methods["map()ancestors"] = func10083;
                                                          func10083.definitionLine = 1873;
                                                          func10083.definitionModule = "ast";
                                                          var func10093 = function(argcv) {    // method pretty(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_depth = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                            setModuleName("ast");
                                                            setLineNumber(1881);    // compilenode string
                                                            var string10094 = new GraceString("");
                                                            var var_spc = string10094;
                                                            setLineNumber(1882);    // compilenode num
                                                            var opresult10097 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                            var block10098 = new GraceBlock(this, 1882, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block10098.real = function(var_i) {
                                                              setLineNumber(1883);    // compilenode string
                                                              var string10099 = new GraceString("  ");
                                                              var opresult10102 = callmethodChecked(var_spc, "++", [1], string10099);
                                                              var_spc = opresult10102;
                                                              return GraceDone;
                                                            };
                                                            var call10103 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult10097, block10098);
                                                            setLineNumber(1885);    // compilenode string
                                                            var string10104 = new GraceString("\n");
                                                            var call10106 = callmethodsuper(this, "pretty", [1], var_depth);
                                                            var opresult10108 = callmethodChecked(call10106, "++", [1], string10104);
                                                            var var_s = opresult10108;
                                                            setLineNumber(1886);    // compilenode identifier
                                                            var opresult10111 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                            onSelf = true;
                                                            var call10112 = callmethodChecked(this, "dest", [0]);
                                                            var call10113 = callmethodChecked(call10112, "pretty", [1], opresult10111);
                                                            var opresult10117 = callmethodChecked(var_s, "++", [1], var_spc);
                                                            var opresult10119 = callmethodChecked(opresult10117, "++", [1], call10113);
                                                            var_s = opresult10119;
                                                            setLineNumber(1887);    // compilenode string
                                                            var string10120 = new GraceString("\n");
                                                            var opresult10123 = callmethodChecked(var_s, "++", [1], string10120);
                                                            var_s = opresult10123;
                                                            setLineNumber(1888);    // compilenode identifier
                                                            var opresult10126 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                            onSelf = true;
                                                            var call10127 = callmethodChecked(this, "value", [0]);
                                                            var call10128 = callmethodChecked(call10127, "pretty", [1], opresult10126);
                                                            var opresult10132 = callmethodChecked(var_s, "++", [1], var_spc);
                                                            var opresult10134 = callmethodChecked(opresult10132, "++", [1], call10128);
                                                            var_s = opresult10134;
                                                            setLineNumber(1889);    // compilenode identifier
                                                            return var_s;
                                                          };
                                                          func10093.paramCounts = [1];
                                                          obj10062.methods["pretty"] = func10093;
                                                          func10093.definitionLine = 1880;
                                                          func10093.definitionModule = "ast";
                                                          var func10135 = function(argcv) {    // method toGrace(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_depth = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1891);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("ast");
                                                            setLineNumber(1892);    // compilenode string
                                                            var string10136 = new GraceString("");
                                                            var var_spc = string10136;
                                                            setLineNumber(1893);    // compilenode identifier
                                                            var diff10139 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                                            var opresult10142 = callmethodChecked(new GraceNum(0), "..", [1], diff10139);
                                                            var block10143 = new GraceBlock(this, 1893, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block10143.real = function(var_i) {
                                                              setLineNumber(1894);    // compilenode string
                                                              var string10144 = new GraceString("    ");
                                                              var opresult10147 = callmethodChecked(var_spc, "++", [1], string10144);
                                                              var_spc = opresult10147;
                                                              return GraceDone;
                                                            };
                                                            var call10148 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult10142, block10143);
                                                            setLineNumber(1896);    // compilenode identifier
                                                            var opresult10151 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                            onSelf = true;
                                                            var call10152 = callmethodChecked(this, "dest", [0]);
                                                            var call10153 = callmethodChecked(call10152, "toGrace", [1], opresult10151);
                                                            var var_s = call10153;
                                                            setLineNumber(1897);    // compilenode identifier
                                                            var opresult10156 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                            onSelf = true;
                                                            var call10157 = callmethodChecked(this, "value", [0]);
                                                            var call10158 = callmethodChecked(call10157, "toGrace", [1], opresult10156);
                                                            var string10160 = new GraceString(" := ");
                                                            var opresult10163 = callmethodChecked(var_s, "++", [1], string10160);
                                                            var opresult10165 = callmethodChecked(opresult10163, "++", [1], call10158);
                                                            var_s = opresult10165;
                                                            setLineNumber(1898);    // return value
                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method toGrace(1) does not have " + 
                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                            return var_s;
                                                          };
                                                          func10135.paramTypes = [];
                                                          func10135.paramTypes.push([type_Number, "depth"]);
                                                          func10135.paramCounts = [1];
                                                          obj10062.methods["toGrace"] = func10135;
                                                          func10135.definitionLine = 1891;
                                                          func10135.definitionModule = "ast";
                                                          var func10166 = function(argcv) {    // method shallowCopy
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                            setModuleName("ast");
                                                            setLineNumber(1901);    // compilenode call
                                                            onSelf = true;
                                                            var call10167 = callmethodChecked(this, "dest", [0]);
                                                            onSelf = true;
                                                            var call10168 = callmethodChecked(this, "value", [0]);
                                                            var call10169 = callmethodChecked(var_bindNode, "new", [2], call10167, call10168);
                                                            var call10170 = callmethodChecked(call10169, "shallowCopyFieldsFrom", [1], this);
                                                            return call10170;
                                                          };
                                                          func10166.paramCounts = [0];
                                                          obj10062.methods["shallowCopy"] = func10166;
                                                          func10166.definitionLine = 1900;
                                                          func10166.definitionModule = "ast";
                                                          var func10171 = function(argcv) {    // method statementName
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                            setModuleName("ast");
                                                            setLineNumber(1903);    // compilenode string
                                                            var string10172 = new GraceString("assignment or assigment request");
                                                            return string10172;
                                                          };
                                                          func10171.paramCounts = [0];
                                                          obj10062.methods["statementName"] = func10171;
                                                          func10171.definitionLine = 1903;
                                                          func10171.definitionModule = "ast";
                                                          setLineNumber(1859);    // compilenode call
                                                          var call10173 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call10174 = callmethodChecked(call10173, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call10175 = callmethodChecked(call10174, "baseNode()object", [0, 1], this);
                                                          obj10062.superobj = call10175;
                                                          if (call10175.data) obj10062.data = call10175.data;
                                                          if (call10175.hasOwnProperty('_value'))
                                                              obj10062._value = call10175._value;
                                                          setLineNumber(1860);    // compilenode string
                                                          var string10176 = new GraceString("bind");
                                                          obj10062.data["kind"] = string10176;
                                                          var reader_ast_kind10177 = function() {
                                                            return this.data["kind"];
                                                          };
                                                          reader_ast_kind10177.def = true;
                                                          obj10062.methods["kind"] = reader_ast_kind10177;
                                                          setLineNumber(1861);    // compilenode identifier
                                                          obj10062.data["dest"] = var_dest__39__;
                                                          var reader_ast_dest10178 = function() {
                                                            return this.data["dest"];
                                                          };
                                                          obj10062.methods["dest"] = reader_ast_dest10178;
                                                          obj10062.data["dest"] = var_dest__39__;
                                                          var writer_ast_dest10178 = function(argcv, o) {
                                                            this.data["dest"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj10062.methods["dest:="] = writer_ast_dest10178;
                                                          obj10062.mutable = true;
                                                          setLineNumber(1862);    // compilenode identifier
                                                          obj10062.data["value"] = var_val__39__;
                                                          var reader_ast_value10179 = function() {
                                                            return this.data["value"];
                                                          };
                                                          obj10062.methods["value"] = reader_ast_value10179;
                                                          obj10062.data["value"] = var_val__39__;
                                                          var writer_ast_value10179 = function(argcv, o) {
                                                            this.data["value"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj10062.methods["value:="] = writer_ast_value10179;
                                                          obj10062.mutable = true;
                                                          superDepth = origSuperDepth;
                                                        };
                                                        obj_init_10062.apply(obj10062, []);
                                                        return obj10062;
                                                      };
                                                      func10061.paramCounts = [2];
                                                      obj10059.methods["new"] = func10061;
                                                      func10061.definitionLine = 1857;
                                                      func10061.definitionModule = "ast";
                                                        var func10180 = function(argcv) {    // method new(2     )()object
                                                          var curarg = 1;
                                                          var var_dest__39__ = arguments[curarg];
                                                          curarg++;
                                                          var var_val__39__ = arguments[curarg];
                                                          curarg++;
                                                          var inheritingObject = arguments[curarg++];
                                                          // Start argument processing
                                                          curarg = 1;
                                                          curarg++;
                                                          curarg++;
                                                          // End argument processing
                                                          setModuleName("ast");
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var obj10181 = Grace_allocObject(null, "new");
                                                          obj10181.definitionModule = "ast";
                                                          obj10181.definitionLine = 1857;
                                                          var inho10181 = inheritingObject;
                                                          while (inho10181.superobj) inho10181 = inho10181.superobj;
                                                          inho10181.superobj = obj10181;
                                                          obj10181.data = inheritingObject.data;
                                                          if (inheritingObject.hasOwnProperty('_value'))
                                                            obj10181._value = inheritingObject._value;
                                                          obj10181.outer = this;
                                                          var reader_ast_outer10182 = function() {
                                                            return this.outer;
                                                          };
                                                          obj10181.methods["outer"] = reader_ast_outer10182;
                                                          var obj_init_10181 = function() {
                                                            var origSuperDepth = superDepth;
                                                            superDepth = obj10181;
                                                            var func10183 = function(argcv) {    // method isBind
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isBind"));
                                                              setModuleName("ast");
                                                              // isBind is a simple accessor - elide try ... catch
                                                              setLineNumber(1864);    // compilenode identifier
                                                              return GraceTrue;
                                                            };
                                                            func10183.paramCounts = [0];
                                                            obj10181.methods["isBind"] = func10183;
                                                            func10183.definitionLine = 1864;
                                                            func10183.definitionModule = "ast";
                                                            var func10184 = function(argcv) {    // method asString
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                              setModuleName("ast");
                                                              setLineNumber(1865);    // compilenode string
                                                              var string10185 = new GraceString("");
                                                              onSelf = true;
                                                              var call10187 = callmethodChecked(this, "value", [0]);
                                                              var string10189 = new GraceString("bind ");
                                                              var opresult10191 = callmethodChecked(string10189, "++", [1], call10187);
                                                              var opresult10193 = callmethodChecked(opresult10191, "++", [1], string10185);
                                                              return opresult10193;
                                                            };
                                                            func10184.paramCounts = [0];
                                                            obj10181.methods["asString"] = func10184;
                                                            func10184.definitionLine = 1865;
                                                            func10184.definitionModule = "ast";
                                                            var func10194 = function(argcv) {    // method accept(1)from(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_visitor = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                              var var_as = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[1] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1866);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                              curarg++;
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("ast");
                                                              var if10195 = GraceDone;
                                                              setLineNumber(1867);    // compilenode identifier
                                                              var call10196 = callmethodChecked(var_visitor, "visitBind()up", [1, 1], this, var_as);
                                                              if (Grace_isTrue(call10196)) {
                                                                setLineNumber(1868);    // compilenode identifier
                                                                var call10197 = callmethodChecked(var_as, "extend", [1], this);
                                                                var var_newChain = call10197;
                                                                setLineNumber(1869);    // compilenode call
                                                                onSelf = true;
                                                                var call10198 = callmethodChecked(this, "dest", [0]);
                                                                var call10199 = callmethodChecked(call10198, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                setLineNumber(1870);    // compilenode call
                                                                onSelf = true;
                                                                var call10200 = callmethodChecked(this, "value", [0]);
                                                                var call10201 = callmethodChecked(call10200, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                if10195 = call10201;
                                                              }
                                                              return if10195;
                                                            };
                                                            func10194.paramTypes = [];
                                                            func10194.paramTypes.push([]);
                                                            func10194.paramTypes.push([]);
                                                            func10194.paramCounts = [1, 1];
                                                            obj10181.methods["accept()from"] = func10194;
                                                            func10194.definitionLine = 1866;
                                                            func10194.definitionModule = "ast";
                                                            var func10202 = function(argcv) {    // method map(1)ancestors(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_blk = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                              var var_as = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[1] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                              setModuleName("ast");
                                                              setLineNumber(1874);    // compilenode call
                                                              onSelf = true;
                                                              var call10203 = callmethodChecked(this, "shallowCopy", [0]);
                                                              var var_n = call10203;
                                                              setLineNumber(1875);    // compilenode identifier
                                                              var call10204 = callmethodChecked(var_as, "extend", [1], var_n);
                                                              var var_newChain = call10204;
                                                              setLineNumber(1876);    // compilenode call
                                                              onSelf = true;
                                                              var call10205 = callmethodChecked(this, "dest", [0]);
                                                              var call10206 = callmethodChecked(call10205, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                              var call10207 = callmethodChecked(var_n, "dest:=", [1], call10206);
                                                              setLineNumber(1877);    // compilenode call
                                                              onSelf = true;
                                                              var call10208 = callmethodChecked(this, "value", [0]);
                                                              var call10209 = callmethodChecked(call10208, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                              var call10210 = callmethodChecked(var_n, "value:=", [1], call10209);
                                                              setLineNumber(1878);    // compilenode identifier
                                                              var call10211 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                              return call10211;
                                                            };
                                                            func10202.paramCounts = [1, 1];
                                                            obj10181.methods["map()ancestors"] = func10202;
                                                            func10202.definitionLine = 1873;
                                                            func10202.definitionModule = "ast";
                                                            var func10212 = function(argcv) {    // method pretty(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_depth = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                              setModuleName("ast");
                                                              setLineNumber(1881);    // compilenode string
                                                              var string10213 = new GraceString("");
                                                              var var_spc = string10213;
                                                              setLineNumber(1882);    // compilenode num
                                                              var opresult10216 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                              var block10217 = new GraceBlock(this, 1882, 1);
                                                              setLineNumber(1);    // compilenode identifier
                                                              block10217.real = function(var_i) {
                                                                setLineNumber(1883);    // compilenode string
                                                                var string10218 = new GraceString("  ");
                                                                var opresult10221 = callmethodChecked(var_spc, "++", [1], string10218);
                                                                var_spc = opresult10221;
                                                                return GraceDone;
                                                              };
                                                              var call10222 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult10216, block10217);
                                                              setLineNumber(1885);    // compilenode string
                                                              var string10223 = new GraceString("\n");
                                                              var call10225 = callmethodsuper(this, "pretty", [1], var_depth);
                                                              var opresult10227 = callmethodChecked(call10225, "++", [1], string10223);
                                                              var var_s = opresult10227;
                                                              setLineNumber(1886);    // compilenode identifier
                                                              var opresult10230 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                              onSelf = true;
                                                              var call10231 = callmethodChecked(this, "dest", [0]);
                                                              var call10232 = callmethodChecked(call10231, "pretty", [1], opresult10230);
                                                              var opresult10236 = callmethodChecked(var_s, "++", [1], var_spc);
                                                              var opresult10238 = callmethodChecked(opresult10236, "++", [1], call10232);
                                                              var_s = opresult10238;
                                                              setLineNumber(1887);    // compilenode string
                                                              var string10239 = new GraceString("\n");
                                                              var opresult10242 = callmethodChecked(var_s, "++", [1], string10239);
                                                              var_s = opresult10242;
                                                              setLineNumber(1888);    // compilenode identifier
                                                              var opresult10245 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                              onSelf = true;
                                                              var call10246 = callmethodChecked(this, "value", [0]);
                                                              var call10247 = callmethodChecked(call10246, "pretty", [1], opresult10245);
                                                              var opresult10251 = callmethodChecked(var_s, "++", [1], var_spc);
                                                              var opresult10253 = callmethodChecked(opresult10251, "++", [1], call10247);
                                                              var_s = opresult10253;
                                                              setLineNumber(1889);    // compilenode identifier
                                                              return var_s;
                                                            };
                                                            func10212.paramCounts = [1];
                                                            obj10181.methods["pretty"] = func10212;
                                                            func10212.definitionLine = 1880;
                                                            func10212.definitionModule = "ast";
                                                            var func10254 = function(argcv) {    // method toGrace(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_depth = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1891);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("ast");
                                                              setLineNumber(1892);    // compilenode string
                                                              var string10255 = new GraceString("");
                                                              var var_spc = string10255;
                                                              setLineNumber(1893);    // compilenode identifier
                                                              var diff10258 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                                              var opresult10261 = callmethodChecked(new GraceNum(0), "..", [1], diff10258);
                                                              var block10262 = new GraceBlock(this, 1893, 1);
                                                              setLineNumber(1);    // compilenode identifier
                                                              block10262.real = function(var_i) {
                                                                setLineNumber(1894);    // compilenode string
                                                                var string10263 = new GraceString("    ");
                                                                var opresult10266 = callmethodChecked(var_spc, "++", [1], string10263);
                                                                var_spc = opresult10266;
                                                                return GraceDone;
                                                              };
                                                              var call10267 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult10261, block10262);
                                                              setLineNumber(1896);    // compilenode identifier
                                                              var opresult10270 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                              onSelf = true;
                                                              var call10271 = callmethodChecked(this, "dest", [0]);
                                                              var call10272 = callmethodChecked(call10271, "toGrace", [1], opresult10270);
                                                              var var_s = call10272;
                                                              setLineNumber(1897);    // compilenode identifier
                                                              var opresult10275 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                              onSelf = true;
                                                              var call10276 = callmethodChecked(this, "value", [0]);
                                                              var call10277 = callmethodChecked(call10276, "toGrace", [1], opresult10275);
                                                              var string10279 = new GraceString(" := ");
                                                              var opresult10282 = callmethodChecked(var_s, "++", [1], string10279);
                                                              var opresult10284 = callmethodChecked(opresult10282, "++", [1], call10277);
                                                              var_s = opresult10284;
                                                              setLineNumber(1898);    // return value
                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method toGrace(1) does not have " + 
                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                              return var_s;
                                                            };
                                                            func10254.paramTypes = [];
                                                            func10254.paramTypes.push([type_Number, "depth"]);
                                                            func10254.paramCounts = [1];
                                                            obj10181.methods["toGrace"] = func10254;
                                                            func10254.definitionLine = 1891;
                                                            func10254.definitionModule = "ast";
                                                            var func10285 = function(argcv) {    // method shallowCopy
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                              setModuleName("ast");
                                                              setLineNumber(1901);    // compilenode call
                                                              onSelf = true;
                                                              var call10286 = callmethodChecked(this, "dest", [0]);
                                                              onSelf = true;
                                                              var call10287 = callmethodChecked(this, "value", [0]);
                                                              var call10288 = callmethodChecked(var_bindNode, "new", [2], call10286, call10287);
                                                              var call10289 = callmethodChecked(call10288, "shallowCopyFieldsFrom", [1], this);
                                                              return call10289;
                                                            };
                                                            func10285.paramCounts = [0];
                                                            obj10181.methods["shallowCopy"] = func10285;
                                                            func10285.definitionLine = 1900;
                                                            func10285.definitionModule = "ast";
                                                            var func10290 = function(argcv) {    // method statementName
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                              setModuleName("ast");
                                                              setLineNumber(1903);    // compilenode string
                                                              var string10291 = new GraceString("assignment or assigment request");
                                                              return string10291;
                                                            };
                                                            func10290.paramCounts = [0];
                                                            obj10181.methods["statementName"] = func10290;
                                                            func10290.definitionLine = 1903;
                                                            func10290.definitionModule = "ast";
                                                            setLineNumber(1859);    // compilenode call
                                                            var call10292 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call10293 = callmethodChecked(call10292, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call10294 = callmethodChecked(call10293, "baseNode()object", [0, 1], this);
                                                            obj10181.superobj = call10294;
                                                            if (call10294.data) obj10181.data = call10294.data;
                                                            if (call10294.hasOwnProperty('_value'))
                                                                obj10181._value = call10294._value;
                                                            setLineNumber(1860);    // compilenode string
                                                            var string10295 = new GraceString("bind");
                                                            obj10181.data["kind"] = string10295;
                                                            var reader_ast_kind10296 = function() {
                                                              return this.data["kind"];
                                                            };
                                                            reader_ast_kind10296.def = true;
                                                            obj10181.methods["kind"] = reader_ast_kind10296;
                                                            setLineNumber(1861);    // compilenode identifier
                                                            obj10181.data["dest"] = var_dest__39__;
                                                            var reader_ast_dest10297 = function() {
                                                              return this.data["dest"];
                                                            };
                                                            obj10181.methods["dest"] = reader_ast_dest10297;
                                                            obj10181.data["dest"] = var_dest__39__;
                                                            var writer_ast_dest10297 = function(argcv, o) {
                                                              this.data["dest"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj10181.methods["dest:="] = writer_ast_dest10297;
                                                            obj10181.mutable = true;
                                                            setLineNumber(1862);    // compilenode identifier
                                                            obj10181.data["value"] = var_val__39__;
                                                            var reader_ast_value10298 = function() {
                                                              return this.data["value"];
                                                            };
                                                            obj10181.methods["value"] = reader_ast_value10298;
                                                            obj10181.data["value"] = var_val__39__;
                                                            var writer_ast_value10298 = function(argcv, o) {
                                                              this.data["value"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj10181.methods["value:="] = writer_ast_value10298;
                                                            obj10181.mutable = true;
                                                            superDepth = origSuperDepth;
                                                          };
                                                          obj_init_10181.apply(inheritingObject, []);
                                                          return obj10181;
                                                          };
                                                          obj10059.methods["new()object"] = func10180;
                                                        superDepth = origSuperDepth;
                                                      };
                                                      obj_init_10059.apply(obj10059, []);
                                                      var var_bindNode = obj10059;
                                                      setLineNumber(1859);    // compilenode method
                                                      var func10299 = function(argcv) {    // method bindNode
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for bindNode"));
                                                        setModuleName("ast");
                                                        // bindNode is a simple accessor - elide try ... catch
                                                        setLineNumber(1856);    // compilenode identifier
                                                        return var_bindNode;
                                                      };
                                                      func10299.paramCounts = [0];
                                                      this.methods["bindNode"] = func10299;
                                                      func10299.definitionLine = 1859;
                                                      func10299.definitionModule = "ast";
                                                      this.methods["bindNode"].debug = "def";
                                                      setLineNumber(1906);    // compilenode object
                                                      var obj10300 = Grace_allocObject(GraceObject, "defDecNode");
                                                      obj10300.definitionModule = "ast";
                                                      obj10300.definitionLine = 1906;
                                                      obj10300.outer = this;
                                                      var reader_ast_outer10301 = function() {
                                                        return this.outer;
                                                      };
                                                      obj10300.methods["outer"] = reader_ast_outer10301;
                                                      var obj_init_10300 = function() {
                                                        var origSuperDepth = superDepth;
                                                        superDepth = obj10300;
                                                        var func10302 = function(argcv) {    // method new(3)scope(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_name__39__ = arguments[curarg];
                                                          curarg++;
                                                          var var_val = arguments[curarg];
                                                          curarg++;
                                                          var var_dtype__39__ = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 3)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new (arg list 1) of new(3)scope(1)"));
                                                          var var_s = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[1] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 2) of new(3)scope(1)"));
                                                          setModuleName("ast");
                                                          setLineNumber(1908);    // compilenode identifier
                                                          onSelf = true;
                                                          var call10303 = callmethodChecked(this, "new", [3], var_name__39__, var_val, var_dtype__39__);
                                                          var var_result = call10303;
                                                          setLineNumber(1909);    // compilenode identifier
                                                          var call10304 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                                          setLineNumber(1910);    // compilenode identifier
                                                          return var_result;
                                                        };
                                                        func10302.paramCounts = [3, 1];
                                                        obj10300.methods["new()scope"] = func10302;
                                                        func10302.definitionLine = 1907;
                                                        func10302.definitionModule = "ast";
                                                        var func10305 = function(argcv) {    // method new(3)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_name__39__ = arguments[curarg];
                                                          curarg++;
                                                          var var_val = arguments[curarg];
                                                          curarg++;
                                                          var var_dtype__39__ = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 3)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(3)"));
                                                          setModuleName("ast");
                                                          setLineNumber(1913);    // compilenode object
                                                          var obj10306 = Grace_allocObject(null, "defDecNode.new");
                                                          obj10306.definitionModule = "ast";
                                                          obj10306.definitionLine = 1913;
                                                          obj10306.outer = this;
                                                          var reader_ast_outer10307 = function() {
                                                            return this.outer;
                                                          };
                                                          obj10306.methods["outer"] = reader_ast_outer10307;
                                                          var obj_init_10306 = function() {
                                                            var origSuperDepth = superDepth;
                                                            superDepth = obj10306;
                                                            var func10308 = function(argcv) {    // method isPublic
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
                                                              setModuleName("ast");
                                                              var if10309 = GraceDone;
                                                              setLineNumber(1925);    // compilenode call
                                                              onSelf = true;
                                                              var call10311 = callmethodChecked(this, "annotations", [0]);
                                                              var call10312 = callmethodChecked(call10311, "size", [0]);
                                                              var opresult10314 = callmethodChecked(call10312, "==", [1], new GraceNum(0));
                                                              if (Grace_isTrue(opresult10314)) {
                                                                return GraceFalse;
                                                              }
                                                              var if10315 = GraceDone;
                                                              setLineNumber(1926);    // compilenode string
                                                              var string10316 = new GraceString("public");
                                                              var call10317 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call10318 = callmethodChecked(call10317, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call10319 = callmethodChecked(call10318, "findAnnotation", [2], this, string10316);
                                                              if (Grace_isTrue(call10319)) {
                                                                return GraceTrue;
                                                              }
                                                              setLineNumber(1927);    // compilenode string
                                                              var string10320 = new GraceString("readable");
                                                              var call10321 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call10322 = callmethodChecked(call10321, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call10323 = callmethodChecked(call10322, "findAnnotation", [2], this, string10320);
                                                              return call10323;
                                                            };
                                                            func10308.paramCounts = [0];
                                                            obj10306.methods["isPublic"] = func10308;
                                                            func10308.definitionLine = 1923;
                                                            func10308.definitionModule = "ast";
                                                            var func10324 = function(argcv) {    // method isFieldDec
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isFieldDec"));
                                                              setModuleName("ast");
                                                              // isFieldDec is a simple accessor - elide try ... catch
                                                              setLineNumber(1929);    // compilenode identifier
                                                              return GraceTrue;
                                                            };
                                                            func10324.paramCounts = [0];
                                                            obj10306.methods["isFieldDec"] = func10324;
                                                            func10324.definitionLine = 1929;
                                                            func10324.definitionModule = "ast";
                                                            var func10325 = function(argcv) {    // method isWritable
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
                                                              setModuleName("ast");
                                                              // isWritable is a simple accessor - elide try ... catch
                                                              setLineNumber(1930);    // compilenode identifier
                                                              return GraceFalse;
                                                            };
                                                            func10325.paramCounts = [0];
                                                            obj10306.methods["isWritable"] = func10325;
                                                            func10325.definitionLine = 1930;
                                                            func10325.definitionModule = "ast";
                                                            var func10326 = function(argcv) {    // method isReadable
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
                                                              setModuleName("ast");
                                                              setLineNumber(1931);    // compilenode call
                                                              onSelf = true;
                                                              var call10327 = callmethodChecked(this, "isPublic", [0]);
                                                              return call10327;
                                                            };
                                                            func10326.paramCounts = [0];
                                                            obj10306.methods["isReadable"] = func10326;
                                                            func10326.definitionLine = 1931;
                                                            func10326.definitionModule = "ast";
                                                            var func10328 = function(argcv) {    // method returnsObject
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                                                              setModuleName("ast");
                                                              setLineNumber(1934);    // compilenode call
                                                              onSelf = true;
                                                              var call10329 = callmethodChecked(this, "value", [0]);
                                                              var call10330 = callmethodChecked(call10329, "returnsObject", [0]);
                                                              return call10330;
                                                            };
                                                            func10328.paramCounts = [0];
                                                            obj10306.methods["returnsObject"] = func10328;
                                                            func10328.definitionLine = 1933;
                                                            func10328.definitionModule = "ast";
                                                            var func10331 = function(argcv) {    // method returnedObjectScope
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnedObjectScope"));
                                                              setModuleName("ast");
                                                              setLineNumber(1938);    // compilenode call
                                                              onSelf = true;
                                                              var call10332 = callmethodChecked(this, "value", [0]);
                                                              var call10333 = callmethodChecked(call10332, "returnedObjectScope", [0]);
                                                              return call10333;
                                                            };
                                                            func10331.paramCounts = [0];
                                                            obj10306.methods["returnedObjectScope"] = func10331;
                                                            func10331.definitionLine = 1936;
                                                            func10331.definitionModule = "ast";
                                                            var func10334 = function(argcv) {    // method usesAsType(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_aNode = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
                                                              setModuleName("ast");
                                                              setLineNumber(1941);    // compilenode call
                                                              onSelf = true;
                                                              var call10335 = callmethodChecked(this, "dtype", [0]);
                                                              var opresult10338 = callmethodChecked(var_aNode, "==", [1], call10335);
                                                              return opresult10338;
                                                            };
                                                            func10334.paramCounts = [1];
                                                            obj10306.methods["usesAsType"] = func10334;
                                                            func10334.definitionLine = 1940;
                                                            func10334.definitionModule = "ast";
                                                            var func10339 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_as = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                              setModuleName("ast");
                                                              setLineNumber(1943);    // compilenode identifier
                                                              var call10340 = callmethodChecked(var_k, "defdec", [0]);
                                                              return call10340;
                                                            };
                                                            func10339.paramCounts = [1];
                                                            obj10306.methods["declarationKindWithAncestors"] = func10339;
                                                            func10339.definitionLine = 1943;
                                                            func10339.definitionModule = "ast";
                                                            var func10341 = function(argcv) {    // method accept(1)from(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_visitor = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                              var var_as = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[1] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1945);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                              curarg++;
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("ast");
                                                              var if10342 = GraceDone;
                                                              setLineNumber(1946);    // compilenode identifier
                                                              var call10343 = callmethodChecked(var_visitor, "visitDefDec()up", [1, 1], this, var_as);
                                                              if (Grace_isTrue(call10343)) {
                                                                setLineNumber(1947);    // compilenode identifier
                                                                var call10344 = callmethodChecked(var_as, "extend", [1], this);
                                                                var var_newChain = call10344;
                                                                setLineNumber(1948);    // compilenode call
                                                                onSelf = true;
                                                                var call10345 = callmethodChecked(this, "name", [0]);
                                                                var call10346 = callmethodChecked(call10345, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                var if10347 = GraceDone;
                                                                setLineNumber(1949);    // compilenode call
                                                                onSelf = true;
                                                                var call10348 = callmethodChecked(this, "dtype", [0]);
                                                                var opresult10351 = callmethodChecked(GraceFalse, "\u2260", [1], call10348);
                                                                if (Grace_isTrue(opresult10351)) {
                                                                  setLineNumber(1950);    // compilenode call
                                                                  onSelf = true;
                                                                  var call10352 = callmethodChecked(this, "dtype", [0]);
                                                                  var call10353 = callmethodChecked(call10352, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                  if10347 = call10353;
                                                                }
                                                                setLineNumber(1952);    // compilenode call
                                                                onSelf = true;
                                                                var call10354 = callmethodChecked(this, "annotations", [0]);
                                                                var block10355 = new GraceBlock(this, 1952, 1);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block10355.real = function(var_ann) {
                                                                  setLineNumber(1953);    // compilenode identifier
                                                                  var call10356 = callmethodChecked(var_ann, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                  return call10356;
                                                                };
                                                                var call10357 = callmethodChecked(var_prelude, "for()do", [1, 1], call10354, block10355);
                                                                setLineNumber(1955);    // compilenode call
                                                                onSelf = true;
                                                                var call10358 = callmethodChecked(this, "value", [0]);
                                                                var call10359 = callmethodChecked(call10358, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                if10342 = call10359;
                                                              }
                                                              return if10342;
                                                            };
                                                            func10341.paramTypes = [];
                                                            func10341.paramTypes.push([]);
                                                            func10341.paramTypes.push([]);
                                                            func10341.paramCounts = [1, 1];
                                                            obj10306.methods["accept()from"] = func10341;
                                                            func10341.definitionLine = 1945;
                                                            func10341.definitionModule = "ast";
                                                            var func10360 = function(argcv) {    // method map(1)ancestors(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_blk = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                              var var_as = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[1] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                              setModuleName("ast");
                                                              setLineNumber(1959);    // compilenode call
                                                              onSelf = true;
                                                              var call10361 = callmethodChecked(this, "shallowCopy", [0]);
                                                              var var_n = call10361;
                                                              setLineNumber(1960);    // compilenode identifier
                                                              var call10362 = callmethodChecked(var_as, "extend", [1], var_n);
                                                              var var_newChain = call10362;
                                                              setLineNumber(1961);    // compilenode call
                                                              onSelf = true;
                                                              var call10363 = callmethodChecked(this, "name", [0]);
                                                              var call10364 = callmethodChecked(call10363, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                              var call10365 = callmethodChecked(var_n, "name:=", [1], call10364);
                                                              setLineNumber(1962);    // compilenode call
                                                              onSelf = true;
                                                              var call10366 = callmethodChecked(this, "value", [0]);
                                                              var call10367 = callmethodChecked(call10366, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                              var call10368 = callmethodChecked(var_n, "value:=", [1], call10367);
                                                              setLineNumber(1963);    // compilenode call
                                                              onSelf = true;
                                                              var call10369 = callmethodChecked(this, "dtype", [0]);
                                                              var call10370 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call10371 = callmethodChecked(call10370, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call10372 = callmethodChecked(call10371, "maybeMap()ancestors", [2, 1], call10369, var_blk, var_newChain);
                                                              var call10373 = callmethodChecked(var_n, "dtype:=", [1], call10372);
                                                              setLineNumber(1964);    // compilenode call
                                                              onSelf = true;
                                                              var call10374 = callmethodChecked(this, "annotations", [0]);
                                                              var call10375 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call10376 = callmethodChecked(call10375, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call10377 = callmethodChecked(call10376, "listMap()ancestors", [2, 1], call10374, var_blk, var_newChain);
                                                              var call10378 = callmethodChecked(var_n, "annotations:=", [1], call10377);
                                                              setLineNumber(1965);    // compilenode identifier
                                                              var call10379 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                              return call10379;
                                                            };
                                                            func10360.paramCounts = [1, 1];
                                                            obj10306.methods["map()ancestors"] = func10360;
                                                            func10360.definitionLine = 1958;
                                                            func10360.definitionModule = "ast";
                                                            var func10380 = function(argcv) {    // method pretty(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_depth = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                              setModuleName("ast");
                                                              setLineNumber(1968);    // compilenode string
                                                              var string10381 = new GraceString("");
                                                              var var_spc = string10381;
                                                              setLineNumber(1969);    // compilenode num
                                                              var opresult10384 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                              var block10385 = new GraceBlock(this, 1969, 1);
                                                              setLineNumber(1);    // compilenode identifier
                                                              block10385.real = function(var_i) {
                                                                setLineNumber(1970);    // compilenode string
                                                                var string10386 = new GraceString("  ");
                                                                var opresult10389 = callmethodChecked(var_spc, "++", [1], string10386);
                                                                var_spc = opresult10389;
                                                                return GraceDone;
                                                              };
                                                              var call10390 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult10384, block10385);
                                                              setLineNumber(1972);    // compilenode string
                                                              var string10391 = new GraceString("\n");
                                                              var call10393 = callmethodsuper(this, "pretty", [1], var_depth);
                                                              var opresult10395 = callmethodChecked(call10393, "++", [1], string10391);
                                                              var var_s = opresult10395;
                                                              setLineNumber(1973);    // compilenode call
                                                              onSelf = true;
                                                              var call10396 = callmethodChecked(this, "name", [0]);
                                                              var call10397 = callmethodChecked(call10396, "pretty", [1], var_depth);
                                                              var opresult10401 = callmethodChecked(var_s, "++", [1], var_spc);
                                                              var opresult10403 = callmethodChecked(opresult10401, "++", [1], call10397);
                                                              var_s = opresult10403;
                                                              var if10404 = GraceDone;
                                                              setLineNumber(1974);    // compilenode call
                                                              onSelf = true;
                                                              var call10405 = callmethodChecked(this, "dtype", [0]);
                                                              var opresult10408 = callmethodChecked(GraceFalse, "\u2260", [1], call10405);
                                                              if (Grace_isTrue(opresult10408)) {
                                                                setLineNumber(1975);    // compilenode identifier
                                                                var opresult10411 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                onSelf = true;
                                                                var call10412 = callmethodChecked(this, "dtype", [0]);
                                                                var call10413 = callmethodChecked(call10412, "pretty", [1], opresult10411);
                                                                var string10415 = new GraceString("Type: ");
                                                                var string10418 = new GraceString("\n");
                                                                var opresult10421 = callmethodChecked(var_s, "++", [1], string10418);
                                                                var opresult10423 = callmethodChecked(opresult10421, "++", [1], var_spc);
                                                                var opresult10425 = callmethodChecked(opresult10423, "++", [1], string10415);
                                                                var opresult10427 = callmethodChecked(opresult10425, "++", [1], call10413);
                                                                var_s = opresult10427;
                                                                if10404 = GraceDone;
                                                              }
                                                              var if10428 = GraceDone;
                                                              setLineNumber(1977);    // compilenode call
                                                              onSelf = true;
                                                              var call10429 = callmethodChecked(this, "value", [0]);
                                                              var opresult10432 = callmethodChecked(GraceFalse, "\u2260", [1], call10429);
                                                              if (Grace_isTrue(opresult10432)) {
                                                                setLineNumber(1978);    // compilenode identifier
                                                                var opresult10435 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                onSelf = true;
                                                                var call10436 = callmethodChecked(this, "value", [0]);
                                                                var call10437 = callmethodChecked(call10436, "pretty", [1], opresult10435);
                                                                var string10439 = new GraceString("Value: ");
                                                                var string10442 = new GraceString("\n");
                                                                var opresult10445 = callmethodChecked(var_s, "++", [1], string10442);
                                                                var opresult10447 = callmethodChecked(opresult10445, "++", [1], var_spc);
                                                                var opresult10449 = callmethodChecked(opresult10447, "++", [1], string10439);
                                                                var opresult10451 = callmethodChecked(opresult10449, "++", [1], call10437);
                                                                var_s = opresult10451;
                                                                if10428 = GraceDone;
                                                              }
                                                              var if10452 = GraceDone;
                                                              setLineNumber(1980);    // compilenode call
                                                              onSelf = true;
                                                              var call10453 = callmethodChecked(this, "annotations", [0]);
                                                              var call10454 = callmethodChecked(call10453, "isEmpty", [0]);
                                                              var call10455 = callmethodChecked(call10454, "not", [0]);
                                                              if (Grace_isTrue(call10455)) {
                                                                setLineNumber(1981);    // compilenode string
                                                                var string10456 = new GraceString("Annotations:");
                                                                var string10459 = new GraceString("\n");
                                                                var opresult10461 = callmethodChecked(string10459, "++", [1], var_spc);
                                                                var opresult10463 = callmethodChecked(opresult10461, "++", [1], string10456);
                                                                var opresult10466 = callmethodChecked(var_s, "++", [1], opresult10463);
                                                                var_s = opresult10466;
                                                                setLineNumber(1982);    // compilenode block
                                                                var block10467 = new GraceBlock(this, 1982, 1);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block10467.real = function(var_ann) {
                                                                  setLineNumber(1983);    // compilenode string
                                                                  var string10468 = new GraceString("");
                                                                  var opresult10472 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                  var call10473 = callmethodChecked(var_ann, "pretty", [1], opresult10472);
                                                                  var string10475 = new GraceString(" ");
                                                                  var string10478 = new GraceString("");
                                                                  var opresult10480 = callmethodChecked(string10478, "++", [1], var_s);
                                                                  var opresult10482 = callmethodChecked(opresult10480, "++", [1], string10475);
                                                                  var opresult10484 = callmethodChecked(opresult10482, "++", [1], call10473);
                                                                  var opresult10486 = callmethodChecked(opresult10484, "++", [1], string10468);
                                                                  var_s = opresult10486;
                                                                  return GraceDone;
                                                                };
                                                                setLineNumber(1982);    // compilenode call
                                                                onSelf = true;
                                                                var call10487 = callmethodChecked(this, "annotations", [0]);
                                                                var call10488 = callmethodChecked(call10487, "do", [1], block10467);
                                                                if10452 = call10488;
                                                              }
                                                              var if10489 = GraceDone;
                                                              setLineNumber(1986);    // compilenode call
                                                              onSelf = true;
                                                              var call10490 = callmethodChecked(this, "comments", [0]);
                                                              var opresult10493 = callmethodChecked(GraceFalse, "\u2260", [1], call10490);
                                                              if (Grace_isTrue(opresult10493)) {
                                                                setLineNumber(1987);    // compilenode identifier
                                                                var opresult10496 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                onSelf = true;
                                                                var call10497 = callmethodChecked(this, "comments", [0]);
                                                                var call10498 = callmethodChecked(call10497, "pretty", [1], opresult10496);
                                                                var opresult10501 = callmethodChecked(var_s, "++", [1], call10498);
                                                                var_s = opresult10501;
                                                                if10489 = GraceDone;
                                                              }
                                                              setLineNumber(1989);    // compilenode identifier
                                                              return var_s;
                                                            };
                                                            func10380.paramCounts = [1];
                                                            obj10306.methods["pretty"] = func10380;
                                                            func10380.definitionLine = 1967;
                                                            func10380.definitionModule = "ast";
                                                            var func10502 = function(argcv) {    // method toGrace(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_depth = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1991);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("ast");
                                                              setLineNumber(1992);    // compilenode string
                                                              var string10503 = new GraceString("");
                                                              var var_spc = string10503;
                                                              setLineNumber(1993);    // compilenode identifier
                                                              var diff10506 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                                              var opresult10509 = callmethodChecked(new GraceNum(0), "..", [1], diff10506);
                                                              var block10510 = new GraceBlock(this, 1993, 1);
                                                              setLineNumber(1);    // compilenode identifier
                                                              block10510.real = function(var_i) {
                                                                setLineNumber(1994);    // compilenode string
                                                                var string10511 = new GraceString("    ");
                                                                var opresult10514 = callmethodChecked(var_spc, "++", [1], string10511);
                                                                var_spc = opresult10514;
                                                                return GraceDone;
                                                              };
                                                              var call10515 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult10509, block10510);
                                                              setLineNumber(1996);    // compilenode string
                                                              var string10516 = new GraceString("");
                                                              onSelf = true;
                                                              var call10518 = callmethodChecked(this, "name", [0]);
                                                              var call10519 = callmethodChecked(call10518, "toGrace", [1], new GraceNum(0));
                                                              var string10521 = new GraceString("def ");
                                                              var opresult10523 = callmethodChecked(string10521, "++", [1], call10519);
                                                              var opresult10525 = callmethodChecked(opresult10523, "++", [1], string10516);
                                                              var var_s = opresult10525;
                                                              var if10526 = GraceDone;
                                                              setLineNumber(1997);    // compilenode block
                                                              var block10527 = new GraceBlock(this, 1997, 0);
                                                              block10527.real = function() {
                                                                setLineNumber(1998);    // compilenode string
                                                                var string10528 = new GraceString("Unknown");
                                                                onSelf = true;
                                                                var call10530 = callmethodChecked(this, "dtype", [0]);
                                                                var call10531 = callmethodChecked(call10530, "value", [0]);
                                                                var opresult10533 = callmethodChecked(call10531, "\u2260", [1], string10528);
                                                                return opresult10533;
                                                              };
                                                              setLineNumber(1997);    // compilenode call
                                                              onSelf = true;
                                                              var call10535 = callmethodChecked(this, "dtype", [0]);
                                                              var opresult10538 = callmethodChecked(GraceFalse, "\u2260", [1], call10535);
                                                              var opresult10540 = callmethodChecked(opresult10538, "&&", [1], block10527);
                                                              if (Grace_isTrue(opresult10540)) {
                                                                setLineNumber(1999);    // compilenode call
                                                                onSelf = true;
                                                                var call10541 = callmethodChecked(this, "dtype", [0]);
                                                                var call10542 = callmethodChecked(call10541, "toGrace", [1], new GraceNum(0));
                                                                var string10544 = new GraceString(" : ");
                                                                var opresult10547 = callmethodChecked(var_s, "++", [1], string10544);
                                                                var opresult10549 = callmethodChecked(opresult10547, "++", [1], call10542);
                                                                var_s = opresult10549;
                                                                if10526 = GraceDone;
                                                              }
                                                              var if10550 = GraceDone;
                                                              setLineNumber(2001);    // compilenode call
                                                              onSelf = true;
                                                              var call10552 = callmethodChecked(this, "annotations", [0]);
                                                              var call10553 = callmethodChecked(call10552, "size", [0]);
                                                              var opresult10555 = callmethodChecked(call10553, ">", [1], new GraceNum(0));
                                                              if (Grace_isTrue(opresult10555)) {
                                                                setLineNumber(2002);    // compilenode string
                                                                var string10556 = new GraceString(" is ");
                                                                var opresult10559 = callmethodChecked(var_s, "++", [1], string10556);
                                                                var_s = opresult10559;
                                                                setLineNumber(2003);    // compilenode block
                                                                var block10560 = new GraceBlock(this, 2003, 2);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block10560.real = function(var_a, var_b) {
                                                                  setLineNumber(2004);    // compilenode identifier
                                                                  var call10561 = callmethodChecked(var_b, "toGrace", [1], new GraceNum(0));
                                                                  var if10563 = GraceDone;
                                                                  var string10564 = new GraceString("");
                                                                  var opresult10567 = callmethodChecked(var_a, "\u2260", [1], string10564);
                                                                  if (Grace_isTrue(opresult10567)) {
                                                                    var string10568 = new GraceString(", ");
                                                                    var opresult10571 = callmethodChecked(var_a, "++", [1], string10568);
                                                                    if10563 = opresult10571;
                                                                  } else {
                                                                    var string10572 = new GraceString("");
                                                                    if10563 = string10572;
                                                                  }
                                                                  var opresult10574 = callmethodChecked(if10563, "++", [1], call10561);
                                                                  return opresult10574;
                                                                };
                                                                setLineNumber(2005);    // compilenode string
                                                                var string10575 = new GraceString("");
                                                                setLineNumber(2003);    // compilenode call
                                                                onSelf = true;
                                                                var call10576 = callmethodChecked(this, "annotations", [0]);
                                                                var call10577 = callmethodChecked(call10576, "fold()startingWith", [1, 1], block10560, string10575);
                                                                var opresult10580 = callmethodChecked(var_s, "++", [1], call10577);
                                                                var_s = opresult10580;
                                                                if10550 = GraceDone;
                                                              }
                                                              var if10581 = GraceDone;
                                                              setLineNumber(2007);    // compilenode call
                                                              onSelf = true;
                                                              var call10582 = callmethodChecked(this, "value", [0]);
                                                              var opresult10585 = callmethodChecked(GraceFalse, "\u2260", [1], call10582);
                                                              if (Grace_isTrue(opresult10585)) {
                                                                setLineNumber(2008);    // compilenode call
                                                                onSelf = true;
                                                                var call10586 = callmethodChecked(this, "value", [0]);
                                                                var call10587 = callmethodChecked(call10586, "toGrace", [1], var_depth);
                                                                var string10589 = new GraceString(" = ");
                                                                var opresult10592 = callmethodChecked(var_s, "++", [1], string10589);
                                                                var opresult10594 = callmethodChecked(opresult10592, "++", [1], call10587);
                                                                var_s = opresult10594;
                                                                if10581 = GraceDone;
                                                              }
                                                              setLineNumber(2010);    // return value
                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method toGrace(1) does not have " + 
                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                              return var_s;
                                                            };
                                                            func10502.paramTypes = [];
                                                            func10502.paramTypes.push([type_Number, "depth"]);
                                                            func10502.paramCounts = [1];
                                                            obj10306.methods["toGrace"] = func10502;
                                                            func10502.definitionLine = 1991;
                                                            func10502.definitionModule = "ast";
                                                            var func10595 = function(argcv) {    // method shallowCopy
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                              setModuleName("ast");
                                                              setLineNumber(2013);    // compilenode call
                                                              onSelf = true;
                                                              var call10596 = callmethodChecked(this, "name", [0]);
                                                              onSelf = true;
                                                              var call10597 = callmethodChecked(this, "value", [0]);
                                                              onSelf = true;
                                                              var call10598 = callmethodChecked(this, "dtype", [0]);
                                                              var call10599 = callmethodChecked(var_defDecNode, "new", [3], call10596, call10597, call10598);
                                                              var call10600 = callmethodChecked(call10599, "shallowCopyFieldsFrom", [1], this);
                                                              return call10600;
                                                            };
                                                            func10595.paramCounts = [0];
                                                            obj10306.methods["shallowCopy"] = func10595;
                                                            func10595.definitionLine = 2012;
                                                            func10595.definitionModule = "ast";
                                                            var func10601 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_other = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                              setModuleName("ast");
                                                              setLineNumber(2016);    // compilenode identifier
                                                              var call10602 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                              setLineNumber(2017);    // compilenode identifier
                                                              var call10603 = callmethodChecked(var_other, "startToken", [0]);
                                                              onSelf = true;
                                                              var call10604 = callmethodChecked(this, "startToken:=", [1], call10603);
                                                              setLineNumber(2018);    // compilenode identifier
                                                              return this;
                                                            };
                                                            func10601.paramCounts = [1];
                                                            obj10306.methods["shallowCopyFieldsFrom"] = func10601;
                                                            func10601.definitionLine = 2015;
                                                            func10601.definitionModule = "ast";
                                                            var func10605 = function(argcv) {    // method statementName
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                              setModuleName("ast");
                                                              setLineNumber(2020);    // compilenode string
                                                              var string10606 = new GraceString("definition");
                                                              return string10606;
                                                            };
                                                            func10605.paramCounts = [0];
                                                            obj10306.methods["statementName"] = func10605;
                                                            func10605.definitionLine = 2020;
                                                            func10605.definitionModule = "ast";
                                                            setLineNumber(1914);    // compilenode call
                                                            var call10607 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call10608 = callmethodChecked(call10607, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call10609 = callmethodChecked(call10608, "baseNode()object", [0, 1], this);
                                                            obj10306.superobj = call10609;
                                                            if (call10609.data) obj10306.data = call10609.data;
                                                            if (call10609.hasOwnProperty('_value'))
                                                                obj10306._value = call10609._value;
                                                            setLineNumber(1915);    // compilenode string
                                                            var string10610 = new GraceString("defdec");
                                                            obj10306.data["kind"] = string10610;
                                                            var reader_ast_kind10611 = function() {
                                                              return this.data["kind"];
                                                            };
                                                            reader_ast_kind10611.def = true;
                                                            obj10306.methods["kind"] = reader_ast_kind10611;
                                                            setLineNumber(1916);    // compilenode identifier
                                                            obj10306.data["name"] = var_name__39__;
                                                            var reader_ast_name10612 = function() {
                                                              return this.data["name"];
                                                            };
                                                            obj10306.methods["name"] = reader_ast_name10612;
                                                            obj10306.data["name"] = var_name__39__;
                                                            var writer_ast_name10612 = function(argcv, o) {
                                                              this.data["name"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj10306.methods["name:="] = writer_ast_name10612;
                                                            obj10306.mutable = true;
                                                            setLineNumber(1917);    // compilenode identifier
                                                            obj10306.data["value"] = var_val;
                                                            var reader_ast_value10613 = function() {
                                                              return this.data["value"];
                                                            };
                                                            obj10306.methods["value"] = reader_ast_value10613;
                                                            obj10306.data["value"] = var_val;
                                                            var writer_ast_value10613 = function(argcv, o) {
                                                              this.data["value"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj10306.methods["value:="] = writer_ast_value10613;
                                                            obj10306.mutable = true;
                                                            setLineNumber(1918);    // compilenode identifier
                                                            obj10306.data["dtype"] = var_dtype__39__;
                                                            var reader_ast_dtype10614 = function() {
                                                              return this.data["dtype"];
                                                            };
                                                            obj10306.methods["dtype"] = reader_ast_dtype10614;
                                                            obj10306.data["dtype"] = var_dtype__39__;
                                                            var writer_ast_dtype10614 = function(argcv, o) {
                                                              this.data["dtype"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj10306.methods["dtype:="] = writer_ast_dtype10614;
                                                            obj10306.mutable = true;
                                                            setLineNumber(1919);    // compilenode call
                                                            onSelf = true;
                                                            var call10615 = callmethodChecked(this, "name", [0]);
                                                            var call10616 = callmethodChecked(call10615, "nameString", [0]);
                                                            obj10306.data["nameString"] = call10616;
                                                            var reader_ast_nameString10617 = function() {
                                                              return this.data["nameString"];
                                                            };
                                                            reader_ast_nameString10617.def = true;
                                                            obj10306.methods["nameString"] = reader_ast_nameString10617;
                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], call10616)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("value of def 'nameString' is not of type String"));
                                                            setLineNumber(1920);    // compilenode array
                                                            var array10618 = new PrimitiveGraceList([]);
                                                            obj10306.data["annotations"] = array10618;
                                                            var reader_ast_annotations10619 = function() {
                                                              return this.data["annotations"];
                                                            };
                                                            obj10306.methods["annotations"] = reader_ast_annotations10619;
                                                            obj10306.data["annotations"] = array10618;
                                                            var writer_ast_annotations10619 = function(argcv, o) {
                                                              this.data["annotations"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj10306.methods["annotations:="] = writer_ast_annotations10619;
                                                            obj10306.mutable = true;
                                                            setLineNumber(1921);    // compilenode identifier
                                                            obj10306.data["startToken"] = GraceFalse;
                                                            var reader_ast_startToken10620 = function() {
                                                              return this.data["startToken"];
                                                            };
                                                            obj10306.methods["startToken"] = reader_ast_startToken10620;
                                                            obj10306.data["startToken"] = GraceFalse;
                                                            var writer_ast_startToken10620 = function(argcv, o) {
                                                              this.data["startToken"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj10306.methods["startToken:="] = writer_ast_startToken10620;
                                                            obj10306.mutable = true;
                                                            superDepth = origSuperDepth;
                                                          };
                                                          obj_init_10306.apply(obj10306, []);
                                                          return obj10306;
                                                        };
                                                        func10305.paramCounts = [3];
                                                        obj10300.methods["new"] = func10305;
                                                        func10305.definitionLine = 1913;
                                                        func10305.definitionModule = "ast";
                                                          var func10621 = function(argcv) {    // method new(3     )()object
                                                            var curarg = 1;
                                                            var var_name__39__ = arguments[curarg];
                                                            curarg++;
                                                            var var_val = arguments[curarg];
                                                            curarg++;
                                                            var var_dtype__39__ = arguments[curarg];
                                                            curarg++;
                                                            var inheritingObject = arguments[curarg++];
                                                            // Start argument processing
                                                            curarg = 1;
                                                            curarg++;
                                                            curarg++;
                                                            curarg++;
                                                            // End argument processing
                                                            setModuleName("ast");
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var obj10622 = Grace_allocObject(null, "new");
                                                            obj10622.definitionModule = "ast";
                                                            obj10622.definitionLine = 1913;
                                                            var inho10622 = inheritingObject;
                                                            while (inho10622.superobj) inho10622 = inho10622.superobj;
                                                            inho10622.superobj = obj10622;
                                                            obj10622.data = inheritingObject.data;
                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                              obj10622._value = inheritingObject._value;
                                                            obj10622.outer = this;
                                                            var reader_ast_outer10623 = function() {
                                                              return this.outer;
                                                            };
                                                            obj10622.methods["outer"] = reader_ast_outer10623;
                                                            var obj_init_10622 = function() {
                                                              var origSuperDepth = superDepth;
                                                              superDepth = obj10622;
                                                              var func10624 = function(argcv) {    // method isPublic
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
                                                                setModuleName("ast");
                                                                var if10625 = GraceDone;
                                                                setLineNumber(1925);    // compilenode call
                                                                onSelf = true;
                                                                var call10627 = callmethodChecked(this, "annotations", [0]);
                                                                var call10628 = callmethodChecked(call10627, "size", [0]);
                                                                var opresult10630 = callmethodChecked(call10628, "==", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult10630)) {
                                                                  return GraceFalse;
                                                                }
                                                                var if10631 = GraceDone;
                                                                setLineNumber(1926);    // compilenode string
                                                                var string10632 = new GraceString("public");
                                                                var call10633 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10634 = callmethodChecked(call10633, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10635 = callmethodChecked(call10634, "findAnnotation", [2], this, string10632);
                                                                if (Grace_isTrue(call10635)) {
                                                                  return GraceTrue;
                                                                }
                                                                setLineNumber(1927);    // compilenode string
                                                                var string10636 = new GraceString("readable");
                                                                var call10637 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10638 = callmethodChecked(call10637, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10639 = callmethodChecked(call10638, "findAnnotation", [2], this, string10636);
                                                                return call10639;
                                                              };
                                                              func10624.paramCounts = [0];
                                                              obj10622.methods["isPublic"] = func10624;
                                                              func10624.definitionLine = 1923;
                                                              func10624.definitionModule = "ast";
                                                              var func10640 = function(argcv) {    // method isFieldDec
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isFieldDec"));
                                                                setModuleName("ast");
                                                                // isFieldDec is a simple accessor - elide try ... catch
                                                                setLineNumber(1929);    // compilenode identifier
                                                                return GraceTrue;
                                                              };
                                                              func10640.paramCounts = [0];
                                                              obj10622.methods["isFieldDec"] = func10640;
                                                              func10640.definitionLine = 1929;
                                                              func10640.definitionModule = "ast";
                                                              var func10641 = function(argcv) {    // method isWritable
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
                                                                setModuleName("ast");
                                                                // isWritable is a simple accessor - elide try ... catch
                                                                setLineNumber(1930);    // compilenode identifier
                                                                return GraceFalse;
                                                              };
                                                              func10641.paramCounts = [0];
                                                              obj10622.methods["isWritable"] = func10641;
                                                              func10641.definitionLine = 1930;
                                                              func10641.definitionModule = "ast";
                                                              var func10642 = function(argcv) {    // method isReadable
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
                                                                setModuleName("ast");
                                                                setLineNumber(1931);    // compilenode call
                                                                onSelf = true;
                                                                var call10643 = callmethodChecked(this, "isPublic", [0]);
                                                                return call10643;
                                                              };
                                                              func10642.paramCounts = [0];
                                                              obj10622.methods["isReadable"] = func10642;
                                                              func10642.definitionLine = 1931;
                                                              func10642.definitionModule = "ast";
                                                              var func10644 = function(argcv) {    // method returnsObject
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnsObject"));
                                                                setModuleName("ast");
                                                                setLineNumber(1934);    // compilenode call
                                                                onSelf = true;
                                                                var call10645 = callmethodChecked(this, "value", [0]);
                                                                var call10646 = callmethodChecked(call10645, "returnsObject", [0]);
                                                                return call10646;
                                                              };
                                                              func10644.paramCounts = [0];
                                                              obj10622.methods["returnsObject"] = func10644;
                                                              func10644.definitionLine = 1933;
                                                              func10644.definitionModule = "ast";
                                                              var func10647 = function(argcv) {    // method returnedObjectScope
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnedObjectScope"));
                                                                setModuleName("ast");
                                                                setLineNumber(1938);    // compilenode call
                                                                onSelf = true;
                                                                var call10648 = callmethodChecked(this, "value", [0]);
                                                                var call10649 = callmethodChecked(call10648, "returnedObjectScope", [0]);
                                                                return call10649;
                                                              };
                                                              func10647.paramCounts = [0];
                                                              obj10622.methods["returnedObjectScope"] = func10647;
                                                              func10647.definitionLine = 1936;
                                                              func10647.definitionModule = "ast";
                                                              var func10650 = function(argcv) {    // method usesAsType(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_aNode = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
                                                                setModuleName("ast");
                                                                setLineNumber(1941);    // compilenode call
                                                                onSelf = true;
                                                                var call10651 = callmethodChecked(this, "dtype", [0]);
                                                                var opresult10654 = callmethodChecked(var_aNode, "==", [1], call10651);
                                                                return opresult10654;
                                                              };
                                                              func10650.paramCounts = [1];
                                                              obj10622.methods["usesAsType"] = func10650;
                                                              func10650.definitionLine = 1940;
                                                              func10650.definitionModule = "ast";
                                                              var func10655 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                                setModuleName("ast");
                                                                setLineNumber(1943);    // compilenode identifier
                                                                var call10656 = callmethodChecked(var_k, "defdec", [0]);
                                                                return call10656;
                                                              };
                                                              func10655.paramCounts = [1];
                                                              obj10622.methods["declarationKindWithAncestors"] = func10655;
                                                              func10655.definitionLine = 1943;
                                                              func10655.definitionModule = "ast";
                                                              var func10657 = function(argcv) {    // method accept(1)from(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_visitor = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[1] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1945);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                curarg++;
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("ast");
                                                                var if10658 = GraceDone;
                                                                setLineNumber(1946);    // compilenode identifier
                                                                var call10659 = callmethodChecked(var_visitor, "visitDefDec()up", [1, 1], this, var_as);
                                                                if (Grace_isTrue(call10659)) {
                                                                  setLineNumber(1947);    // compilenode identifier
                                                                  var call10660 = callmethodChecked(var_as, "extend", [1], this);
                                                                  var var_newChain = call10660;
                                                                  setLineNumber(1948);    // compilenode call
                                                                  onSelf = true;
                                                                  var call10661 = callmethodChecked(this, "name", [0]);
                                                                  var call10662 = callmethodChecked(call10661, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                  var if10663 = GraceDone;
                                                                  setLineNumber(1949);    // compilenode call
                                                                  onSelf = true;
                                                                  var call10664 = callmethodChecked(this, "dtype", [0]);
                                                                  var opresult10667 = callmethodChecked(GraceFalse, "\u2260", [1], call10664);
                                                                  if (Grace_isTrue(opresult10667)) {
                                                                    setLineNumber(1950);    // compilenode call
                                                                    onSelf = true;
                                                                    var call10668 = callmethodChecked(this, "dtype", [0]);
                                                                    var call10669 = callmethodChecked(call10668, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                    if10663 = call10669;
                                                                  }
                                                                  setLineNumber(1952);    // compilenode call
                                                                  onSelf = true;
                                                                  var call10670 = callmethodChecked(this, "annotations", [0]);
                                                                  var block10671 = new GraceBlock(this, 1952, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block10671.real = function(var_ann) {
                                                                    setLineNumber(1953);    // compilenode identifier
                                                                    var call10672 = callmethodChecked(var_ann, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                    return call10672;
                                                                  };
                                                                  var call10673 = callmethodChecked(var_prelude, "for()do", [1, 1], call10670, block10671);
                                                                  setLineNumber(1955);    // compilenode call
                                                                  onSelf = true;
                                                                  var call10674 = callmethodChecked(this, "value", [0]);
                                                                  var call10675 = callmethodChecked(call10674, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                  if10658 = call10675;
                                                                }
                                                                return if10658;
                                                              };
                                                              func10657.paramTypes = [];
                                                              func10657.paramTypes.push([]);
                                                              func10657.paramTypes.push([]);
                                                              func10657.paramCounts = [1, 1];
                                                              obj10622.methods["accept()from"] = func10657;
                                                              func10657.definitionLine = 1945;
                                                              func10657.definitionModule = "ast";
                                                              var func10676 = function(argcv) {    // method map(1)ancestors(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_blk = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[1] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                setModuleName("ast");
                                                                setLineNumber(1959);    // compilenode call
                                                                onSelf = true;
                                                                var call10677 = callmethodChecked(this, "shallowCopy", [0]);
                                                                var var_n = call10677;
                                                                setLineNumber(1960);    // compilenode identifier
                                                                var call10678 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                var var_newChain = call10678;
                                                                setLineNumber(1961);    // compilenode call
                                                                onSelf = true;
                                                                var call10679 = callmethodChecked(this, "name", [0]);
                                                                var call10680 = callmethodChecked(call10679, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                                var call10681 = callmethodChecked(var_n, "name:=", [1], call10680);
                                                                setLineNumber(1962);    // compilenode call
                                                                onSelf = true;
                                                                var call10682 = callmethodChecked(this, "value", [0]);
                                                                var call10683 = callmethodChecked(call10682, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                                var call10684 = callmethodChecked(var_n, "value:=", [1], call10683);
                                                                setLineNumber(1963);    // compilenode call
                                                                onSelf = true;
                                                                var call10685 = callmethodChecked(this, "dtype", [0]);
                                                                var call10686 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10687 = callmethodChecked(call10686, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10688 = callmethodChecked(call10687, "maybeMap()ancestors", [2, 1], call10685, var_blk, var_newChain);
                                                                var call10689 = callmethodChecked(var_n, "dtype:=", [1], call10688);
                                                                setLineNumber(1964);    // compilenode call
                                                                onSelf = true;
                                                                var call10690 = callmethodChecked(this, "annotations", [0]);
                                                                var call10691 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10692 = callmethodChecked(call10691, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10693 = callmethodChecked(call10692, "listMap()ancestors", [2, 1], call10690, var_blk, var_newChain);
                                                                var call10694 = callmethodChecked(var_n, "annotations:=", [1], call10693);
                                                                setLineNumber(1965);    // compilenode identifier
                                                                var call10695 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                return call10695;
                                                              };
                                                              func10676.paramCounts = [1, 1];
                                                              obj10622.methods["map()ancestors"] = func10676;
                                                              func10676.definitionLine = 1958;
                                                              func10676.definitionModule = "ast";
                                                              var func10696 = function(argcv) {    // method pretty(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_depth = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                setModuleName("ast");
                                                                setLineNumber(1968);    // compilenode string
                                                                var string10697 = new GraceString("");
                                                                var var_spc = string10697;
                                                                setLineNumber(1969);    // compilenode num
                                                                var opresult10700 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                var block10701 = new GraceBlock(this, 1969, 1);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block10701.real = function(var_i) {
                                                                  setLineNumber(1970);    // compilenode string
                                                                  var string10702 = new GraceString("  ");
                                                                  var opresult10705 = callmethodChecked(var_spc, "++", [1], string10702);
                                                                  var_spc = opresult10705;
                                                                  return GraceDone;
                                                                };
                                                                var call10706 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult10700, block10701);
                                                                setLineNumber(1972);    // compilenode string
                                                                var string10707 = new GraceString("\n");
                                                                var call10709 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                var opresult10711 = callmethodChecked(call10709, "++", [1], string10707);
                                                                var var_s = opresult10711;
                                                                setLineNumber(1973);    // compilenode call
                                                                onSelf = true;
                                                                var call10712 = callmethodChecked(this, "name", [0]);
                                                                var call10713 = callmethodChecked(call10712, "pretty", [1], var_depth);
                                                                var opresult10717 = callmethodChecked(var_s, "++", [1], var_spc);
                                                                var opresult10719 = callmethodChecked(opresult10717, "++", [1], call10713);
                                                                var_s = opresult10719;
                                                                var if10720 = GraceDone;
                                                                setLineNumber(1974);    // compilenode call
                                                                onSelf = true;
                                                                var call10721 = callmethodChecked(this, "dtype", [0]);
                                                                var opresult10724 = callmethodChecked(GraceFalse, "\u2260", [1], call10721);
                                                                if (Grace_isTrue(opresult10724)) {
                                                                  setLineNumber(1975);    // compilenode identifier
                                                                  var opresult10727 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                  onSelf = true;
                                                                  var call10728 = callmethodChecked(this, "dtype", [0]);
                                                                  var call10729 = callmethodChecked(call10728, "pretty", [1], opresult10727);
                                                                  var string10731 = new GraceString("Type: ");
                                                                  var string10734 = new GraceString("\n");
                                                                  var opresult10737 = callmethodChecked(var_s, "++", [1], string10734);
                                                                  var opresult10739 = callmethodChecked(opresult10737, "++", [1], var_spc);
                                                                  var opresult10741 = callmethodChecked(opresult10739, "++", [1], string10731);
                                                                  var opresult10743 = callmethodChecked(opresult10741, "++", [1], call10729);
                                                                  var_s = opresult10743;
                                                                  if10720 = GraceDone;
                                                                }
                                                                var if10744 = GraceDone;
                                                                setLineNumber(1977);    // compilenode call
                                                                onSelf = true;
                                                                var call10745 = callmethodChecked(this, "value", [0]);
                                                                var opresult10748 = callmethodChecked(GraceFalse, "\u2260", [1], call10745);
                                                                if (Grace_isTrue(opresult10748)) {
                                                                  setLineNumber(1978);    // compilenode identifier
                                                                  var opresult10751 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                  onSelf = true;
                                                                  var call10752 = callmethodChecked(this, "value", [0]);
                                                                  var call10753 = callmethodChecked(call10752, "pretty", [1], opresult10751);
                                                                  var string10755 = new GraceString("Value: ");
                                                                  var string10758 = new GraceString("\n");
                                                                  var opresult10761 = callmethodChecked(var_s, "++", [1], string10758);
                                                                  var opresult10763 = callmethodChecked(opresult10761, "++", [1], var_spc);
                                                                  var opresult10765 = callmethodChecked(opresult10763, "++", [1], string10755);
                                                                  var opresult10767 = callmethodChecked(opresult10765, "++", [1], call10753);
                                                                  var_s = opresult10767;
                                                                  if10744 = GraceDone;
                                                                }
                                                                var if10768 = GraceDone;
                                                                setLineNumber(1980);    // compilenode call
                                                                onSelf = true;
                                                                var call10769 = callmethodChecked(this, "annotations", [0]);
                                                                var call10770 = callmethodChecked(call10769, "isEmpty", [0]);
                                                                var call10771 = callmethodChecked(call10770, "not", [0]);
                                                                if (Grace_isTrue(call10771)) {
                                                                  setLineNumber(1981);    // compilenode string
                                                                  var string10772 = new GraceString("Annotations:");
                                                                  var string10775 = new GraceString("\n");
                                                                  var opresult10777 = callmethodChecked(string10775, "++", [1], var_spc);
                                                                  var opresult10779 = callmethodChecked(opresult10777, "++", [1], string10772);
                                                                  var opresult10782 = callmethodChecked(var_s, "++", [1], opresult10779);
                                                                  var_s = opresult10782;
                                                                  setLineNumber(1982);    // compilenode block
                                                                  var block10783 = new GraceBlock(this, 1982, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block10783.real = function(var_ann) {
                                                                    setLineNumber(1983);    // compilenode string
                                                                    var string10784 = new GraceString("");
                                                                    var opresult10788 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                    var call10789 = callmethodChecked(var_ann, "pretty", [1], opresult10788);
                                                                    var string10791 = new GraceString(" ");
                                                                    var string10794 = new GraceString("");
                                                                    var opresult10796 = callmethodChecked(string10794, "++", [1], var_s);
                                                                    var opresult10798 = callmethodChecked(opresult10796, "++", [1], string10791);
                                                                    var opresult10800 = callmethodChecked(opresult10798, "++", [1], call10789);
                                                                    var opresult10802 = callmethodChecked(opresult10800, "++", [1], string10784);
                                                                    var_s = opresult10802;
                                                                    return GraceDone;
                                                                  };
                                                                  setLineNumber(1982);    // compilenode call
                                                                  onSelf = true;
                                                                  var call10803 = callmethodChecked(this, "annotations", [0]);
                                                                  var call10804 = callmethodChecked(call10803, "do", [1], block10783);
                                                                  if10768 = call10804;
                                                                }
                                                                var if10805 = GraceDone;
                                                                setLineNumber(1986);    // compilenode call
                                                                onSelf = true;
                                                                var call10806 = callmethodChecked(this, "comments", [0]);
                                                                var opresult10809 = callmethodChecked(GraceFalse, "\u2260", [1], call10806);
                                                                if (Grace_isTrue(opresult10809)) {
                                                                  setLineNumber(1987);    // compilenode identifier
                                                                  var opresult10812 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                  onSelf = true;
                                                                  var call10813 = callmethodChecked(this, "comments", [0]);
                                                                  var call10814 = callmethodChecked(call10813, "pretty", [1], opresult10812);
                                                                  var opresult10817 = callmethodChecked(var_s, "++", [1], call10814);
                                                                  var_s = opresult10817;
                                                                  if10805 = GraceDone;
                                                                }
                                                                setLineNumber(1989);    // compilenode identifier
                                                                return var_s;
                                                              };
                                                              func10696.paramCounts = [1];
                                                              obj10622.methods["pretty"] = func10696;
                                                              func10696.definitionLine = 1967;
                                                              func10696.definitionModule = "ast";
                                                              var func10818 = function(argcv) {    // method toGrace(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_depth = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1991);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("ast");
                                                                setLineNumber(1992);    // compilenode string
                                                                var string10819 = new GraceString("");
                                                                var var_spc = string10819;
                                                                setLineNumber(1993);    // compilenode identifier
                                                                var diff10822 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                                                var opresult10825 = callmethodChecked(new GraceNum(0), "..", [1], diff10822);
                                                                var block10826 = new GraceBlock(this, 1993, 1);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block10826.real = function(var_i) {
                                                                  setLineNumber(1994);    // compilenode string
                                                                  var string10827 = new GraceString("    ");
                                                                  var opresult10830 = callmethodChecked(var_spc, "++", [1], string10827);
                                                                  var_spc = opresult10830;
                                                                  return GraceDone;
                                                                };
                                                                var call10831 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult10825, block10826);
                                                                setLineNumber(1996);    // compilenode string
                                                                var string10832 = new GraceString("");
                                                                onSelf = true;
                                                                var call10834 = callmethodChecked(this, "name", [0]);
                                                                var call10835 = callmethodChecked(call10834, "toGrace", [1], new GraceNum(0));
                                                                var string10837 = new GraceString("def ");
                                                                var opresult10839 = callmethodChecked(string10837, "++", [1], call10835);
                                                                var opresult10841 = callmethodChecked(opresult10839, "++", [1], string10832);
                                                                var var_s = opresult10841;
                                                                var if10842 = GraceDone;
                                                                setLineNumber(1997);    // compilenode block
                                                                var block10843 = new GraceBlock(this, 1997, 0);
                                                                block10843.real = function() {
                                                                  setLineNumber(1998);    // compilenode string
                                                                  var string10844 = new GraceString("Unknown");
                                                                  onSelf = true;
                                                                  var call10846 = callmethodChecked(this, "dtype", [0]);
                                                                  var call10847 = callmethodChecked(call10846, "value", [0]);
                                                                  var opresult10849 = callmethodChecked(call10847, "\u2260", [1], string10844);
                                                                  return opresult10849;
                                                                };
                                                                setLineNumber(1997);    // compilenode call
                                                                onSelf = true;
                                                                var call10851 = callmethodChecked(this, "dtype", [0]);
                                                                var opresult10854 = callmethodChecked(GraceFalse, "\u2260", [1], call10851);
                                                                var opresult10856 = callmethodChecked(opresult10854, "&&", [1], block10843);
                                                                if (Grace_isTrue(opresult10856)) {
                                                                  setLineNumber(1999);    // compilenode call
                                                                  onSelf = true;
                                                                  var call10857 = callmethodChecked(this, "dtype", [0]);
                                                                  var call10858 = callmethodChecked(call10857, "toGrace", [1], new GraceNum(0));
                                                                  var string10860 = new GraceString(" : ");
                                                                  var opresult10863 = callmethodChecked(var_s, "++", [1], string10860);
                                                                  var opresult10865 = callmethodChecked(opresult10863, "++", [1], call10858);
                                                                  var_s = opresult10865;
                                                                  if10842 = GraceDone;
                                                                }
                                                                var if10866 = GraceDone;
                                                                setLineNumber(2001);    // compilenode call
                                                                onSelf = true;
                                                                var call10868 = callmethodChecked(this, "annotations", [0]);
                                                                var call10869 = callmethodChecked(call10868, "size", [0]);
                                                                var opresult10871 = callmethodChecked(call10869, ">", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult10871)) {
                                                                  setLineNumber(2002);    // compilenode string
                                                                  var string10872 = new GraceString(" is ");
                                                                  var opresult10875 = callmethodChecked(var_s, "++", [1], string10872);
                                                                  var_s = opresult10875;
                                                                  setLineNumber(2003);    // compilenode block
                                                                  var block10876 = new GraceBlock(this, 2003, 2);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block10876.real = function(var_a, var_b) {
                                                                    setLineNumber(2004);    // compilenode identifier
                                                                    var call10877 = callmethodChecked(var_b, "toGrace", [1], new GraceNum(0));
                                                                    var if10879 = GraceDone;
                                                                    var string10880 = new GraceString("");
                                                                    var opresult10883 = callmethodChecked(var_a, "\u2260", [1], string10880);
                                                                    if (Grace_isTrue(opresult10883)) {
                                                                      var string10884 = new GraceString(", ");
                                                                      var opresult10887 = callmethodChecked(var_a, "++", [1], string10884);
                                                                      if10879 = opresult10887;
                                                                    } else {
                                                                      var string10888 = new GraceString("");
                                                                      if10879 = string10888;
                                                                    }
                                                                    var opresult10890 = callmethodChecked(if10879, "++", [1], call10877);
                                                                    return opresult10890;
                                                                  };
                                                                  setLineNumber(2005);    // compilenode string
                                                                  var string10891 = new GraceString("");
                                                                  setLineNumber(2003);    // compilenode call
                                                                  onSelf = true;
                                                                  var call10892 = callmethodChecked(this, "annotations", [0]);
                                                                  var call10893 = callmethodChecked(call10892, "fold()startingWith", [1, 1], block10876, string10891);
                                                                  var opresult10896 = callmethodChecked(var_s, "++", [1], call10893);
                                                                  var_s = opresult10896;
                                                                  if10866 = GraceDone;
                                                                }
                                                                var if10897 = GraceDone;
                                                                setLineNumber(2007);    // compilenode call
                                                                onSelf = true;
                                                                var call10898 = callmethodChecked(this, "value", [0]);
                                                                var opresult10901 = callmethodChecked(GraceFalse, "\u2260", [1], call10898);
                                                                if (Grace_isTrue(opresult10901)) {
                                                                  setLineNumber(2008);    // compilenode call
                                                                  onSelf = true;
                                                                  var call10902 = callmethodChecked(this, "value", [0]);
                                                                  var call10903 = callmethodChecked(call10902, "toGrace", [1], var_depth);
                                                                  var string10905 = new GraceString(" = ");
                                                                  var opresult10908 = callmethodChecked(var_s, "++", [1], string10905);
                                                                  var opresult10910 = callmethodChecked(opresult10908, "++", [1], call10903);
                                                                  var_s = opresult10910;
                                                                  if10897 = GraceDone;
                                                                }
                                                                setLineNumber(2010);    // return value
                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method toGrace(1) does not have " + 
                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                return var_s;
                                                              };
                                                              func10818.paramTypes = [];
                                                              func10818.paramTypes.push([type_Number, "depth"]);
                                                              func10818.paramCounts = [1];
                                                              obj10622.methods["toGrace"] = func10818;
                                                              func10818.definitionLine = 1991;
                                                              func10818.definitionModule = "ast";
                                                              var func10911 = function(argcv) {    // method shallowCopy
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                setModuleName("ast");
                                                                setLineNumber(2013);    // compilenode call
                                                                onSelf = true;
                                                                var call10912 = callmethodChecked(this, "name", [0]);
                                                                onSelf = true;
                                                                var call10913 = callmethodChecked(this, "value", [0]);
                                                                onSelf = true;
                                                                var call10914 = callmethodChecked(this, "dtype", [0]);
                                                                var call10915 = callmethodChecked(var_defDecNode, "new", [3], call10912, call10913, call10914);
                                                                var call10916 = callmethodChecked(call10915, "shallowCopyFieldsFrom", [1], this);
                                                                return call10916;
                                                              };
                                                              func10911.paramCounts = [0];
                                                              obj10622.methods["shallowCopy"] = func10911;
                                                              func10911.definitionLine = 2012;
                                                              func10911.definitionModule = "ast";
                                                              var func10917 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_other = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                                setModuleName("ast");
                                                                setLineNumber(2016);    // compilenode identifier
                                                                var call10918 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                                setLineNumber(2017);    // compilenode identifier
                                                                var call10919 = callmethodChecked(var_other, "startToken", [0]);
                                                                onSelf = true;
                                                                var call10920 = callmethodChecked(this, "startToken:=", [1], call10919);
                                                                setLineNumber(2018);    // compilenode identifier
                                                                return this;
                                                              };
                                                              func10917.paramCounts = [1];
                                                              obj10622.methods["shallowCopyFieldsFrom"] = func10917;
                                                              func10917.definitionLine = 2015;
                                                              func10917.definitionModule = "ast";
                                                              var func10921 = function(argcv) {    // method statementName
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                                setModuleName("ast");
                                                                setLineNumber(2020);    // compilenode string
                                                                var string10922 = new GraceString("definition");
                                                                return string10922;
                                                              };
                                                              func10921.paramCounts = [0];
                                                              obj10622.methods["statementName"] = func10921;
                                                              func10921.definitionLine = 2020;
                                                              func10921.definitionModule = "ast";
                                                              setLineNumber(1914);    // compilenode call
                                                              var call10923 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call10924 = callmethodChecked(call10923, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call10925 = callmethodChecked(call10924, "baseNode()object", [0, 1], this);
                                                              obj10622.superobj = call10925;
                                                              if (call10925.data) obj10622.data = call10925.data;
                                                              if (call10925.hasOwnProperty('_value'))
                                                                  obj10622._value = call10925._value;
                                                              setLineNumber(1915);    // compilenode string
                                                              var string10926 = new GraceString("defdec");
                                                              obj10622.data["kind"] = string10926;
                                                              var reader_ast_kind10927 = function() {
                                                                return this.data["kind"];
                                                              };
                                                              reader_ast_kind10927.def = true;
                                                              obj10622.methods["kind"] = reader_ast_kind10927;
                                                              setLineNumber(1916);    // compilenode identifier
                                                              obj10622.data["name"] = var_name__39__;
                                                              var reader_ast_name10928 = function() {
                                                                return this.data["name"];
                                                              };
                                                              obj10622.methods["name"] = reader_ast_name10928;
                                                              obj10622.data["name"] = var_name__39__;
                                                              var writer_ast_name10928 = function(argcv, o) {
                                                                this.data["name"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj10622.methods["name:="] = writer_ast_name10928;
                                                              obj10622.mutable = true;
                                                              setLineNumber(1917);    // compilenode identifier
                                                              obj10622.data["value"] = var_val;
                                                              var reader_ast_value10929 = function() {
                                                                return this.data["value"];
                                                              };
                                                              obj10622.methods["value"] = reader_ast_value10929;
                                                              obj10622.data["value"] = var_val;
                                                              var writer_ast_value10929 = function(argcv, o) {
                                                                this.data["value"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj10622.methods["value:="] = writer_ast_value10929;
                                                              obj10622.mutable = true;
                                                              setLineNumber(1918);    // compilenode identifier
                                                              obj10622.data["dtype"] = var_dtype__39__;
                                                              var reader_ast_dtype10930 = function() {
                                                                return this.data["dtype"];
                                                              };
                                                              obj10622.methods["dtype"] = reader_ast_dtype10930;
                                                              obj10622.data["dtype"] = var_dtype__39__;
                                                              var writer_ast_dtype10930 = function(argcv, o) {
                                                                this.data["dtype"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj10622.methods["dtype:="] = writer_ast_dtype10930;
                                                              obj10622.mutable = true;
                                                              setLineNumber(1919);    // compilenode call
                                                              onSelf = true;
                                                              var call10931 = callmethodChecked(this, "name", [0]);
                                                              var call10932 = callmethodChecked(call10931, "nameString", [0]);
                                                              obj10622.data["nameString"] = call10932;
                                                              var reader_ast_nameString10933 = function() {
                                                                return this.data["nameString"];
                                                              };
                                                              reader_ast_nameString10933.def = true;
                                                              obj10622.methods["nameString"] = reader_ast_nameString10933;
                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], call10932)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("value of def 'nameString' is not of type String"));
                                                              setLineNumber(1920);    // compilenode array
                                                              var array10934 = new PrimitiveGraceList([]);
                                                              obj10622.data["annotations"] = array10934;
                                                              var reader_ast_annotations10935 = function() {
                                                                return this.data["annotations"];
                                                              };
                                                              obj10622.methods["annotations"] = reader_ast_annotations10935;
                                                              obj10622.data["annotations"] = array10934;
                                                              var writer_ast_annotations10935 = function(argcv, o) {
                                                                this.data["annotations"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj10622.methods["annotations:="] = writer_ast_annotations10935;
                                                              obj10622.mutable = true;
                                                              setLineNumber(1921);    // compilenode identifier
                                                              obj10622.data["startToken"] = GraceFalse;
                                                              var reader_ast_startToken10936 = function() {
                                                                return this.data["startToken"];
                                                              };
                                                              obj10622.methods["startToken"] = reader_ast_startToken10936;
                                                              obj10622.data["startToken"] = GraceFalse;
                                                              var writer_ast_startToken10936 = function(argcv, o) {
                                                                this.data["startToken"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj10622.methods["startToken:="] = writer_ast_startToken10936;
                                                              obj10622.mutable = true;
                                                              superDepth = origSuperDepth;
                                                            };
                                                            obj_init_10622.apply(inheritingObject, []);
                                                            return obj10622;
                                                            };
                                                            obj10300.methods["new()object"] = func10621;
                                                          superDepth = origSuperDepth;
                                                        };
                                                        obj_init_10300.apply(obj10300, []);
                                                        var var_defDecNode = obj10300;
                                                        setLineNumber(1919);    // compilenode method
                                                        var func10937 = function(argcv) {    // method defDecNode
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for defDecNode"));
                                                          setModuleName("ast");
                                                          // defDecNode is a simple accessor - elide try ... catch
                                                          setLineNumber(1906);    // compilenode identifier
                                                          return var_defDecNode;
                                                        };
                                                        func10937.paramCounts = [0];
                                                        this.methods["defDecNode"] = func10937;
                                                        func10937.definitionLine = 1919;
                                                        func10937.definitionModule = "ast";
                                                        this.methods["defDecNode"].debug = "def";
                                                        setLineNumber(2023);    // compilenode object
                                                        var obj10938 = Grace_allocObject(GraceObject, "varDecNode");
                                                        obj10938.definitionModule = "ast";
                                                        obj10938.definitionLine = 2023;
                                                        obj10938.outer = this;
                                                        var reader_ast_outer10939 = function() {
                                                          return this.outer;
                                                        };
                                                        obj10938.methods["outer"] = reader_ast_outer10939;
                                                        var obj_init_10938 = function() {
                                                          var origSuperDepth = superDepth;
                                                          superDepth = obj10938;
                                                          var func10940 = function(argcv) {    // method new(3)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_name__39__ = arguments[curarg];
                                                            curarg++;
                                                            var var_val__39__ = arguments[curarg];
                                                            curarg++;
                                                            var var_dtype__39__ = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 3)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(3)"));
                                                            setModuleName("ast");
                                                            setLineNumber(2024);    // compilenode object
                                                            var obj10941 = Grace_allocObject(null, "varDecNode.new");
                                                            obj10941.definitionModule = "ast";
                                                            obj10941.definitionLine = 2024;
                                                            obj10941.outer = this;
                                                            var reader_ast_outer10942 = function() {
                                                              return this.outer;
                                                            };
                                                            obj10941.methods["outer"] = reader_ast_outer10942;
                                                            var obj_init_10941 = function() {
                                                              var origSuperDepth = superDepth;
                                                              superDepth = obj10941;
                                                              var func10943 = function(argcv) {    // method isPublic
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
                                                                setModuleName("ast");
                                                                var if10944 = GraceDone;
                                                                setLineNumber(2035);    // compilenode call
                                                                onSelf = true;
                                                                var call10946 = callmethodChecked(this, "annotations", [0]);
                                                                var call10947 = callmethodChecked(call10946, "size", [0]);
                                                                var opresult10949 = callmethodChecked(call10947, "==", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult10949)) {
                                                                  return GraceFalse;
                                                                }
                                                                var if10950 = GraceDone;
                                                                setLineNumber(2036);    // compilenode string
                                                                var string10951 = new GraceString("public");
                                                                var call10952 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10953 = callmethodChecked(call10952, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10954 = callmethodChecked(call10953, "findAnnotation", [2], this, string10951);
                                                                if (Grace_isTrue(call10954)) {
                                                                  return GraceTrue;
                                                                }
                                                                setLineNumber(2037);    // compilenode string
                                                                var string10955 = new GraceString("readable");
                                                                var call10956 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10957 = callmethodChecked(call10956, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10958 = callmethodChecked(call10957, "findAnnotation", [2], this, string10955);
                                                                return call10958;
                                                              };
                                                              func10943.paramCounts = [0];
                                                              obj10941.methods["isPublic"] = func10943;
                                                              func10943.definitionLine = 2033;
                                                              func10943.definitionModule = "ast";
                                                              var func10959 = function(argcv) {    // method isWritable
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
                                                                setModuleName("ast");
                                                                var if10960 = GraceDone;
                                                                setLineNumber(2040);    // compilenode call
                                                                onSelf = true;
                                                                var call10962 = callmethodChecked(this, "annotations", [0]);
                                                                var call10963 = callmethodChecked(call10962, "size", [0]);
                                                                var opresult10965 = callmethodChecked(call10963, "==", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult10965)) {
                                                                  return GraceFalse;
                                                                }
                                                                var if10966 = GraceDone;
                                                                setLineNumber(2041);    // compilenode string
                                                                var string10967 = new GraceString("public");
                                                                var call10968 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10969 = callmethodChecked(call10968, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10970 = callmethodChecked(call10969, "findAnnotation", [2], this, string10967);
                                                                if (Grace_isTrue(call10970)) {
                                                                  return GraceTrue;
                                                                }
                                                                var if10971 = GraceDone;
                                                                setLineNumber(2042);    // compilenode string
                                                                var string10972 = new GraceString("writable");
                                                                var call10973 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10974 = callmethodChecked(call10973, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10975 = callmethodChecked(call10974, "findAnnotation", [2], this, string10972);
                                                                if (Grace_isTrue(call10975)) {
                                                                  return GraceTrue;
                                                                }
                                                                setLineNumber(2043);    // compilenode identifier
                                                                return GraceFalse;
                                                              };
                                                              func10959.paramCounts = [0];
                                                              obj10941.methods["isWritable"] = func10959;
                                                              func10959.definitionLine = 2039;
                                                              func10959.definitionModule = "ast";
                                                              var func10976 = function(argcv) {    // method isReadable
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
                                                                setModuleName("ast");
                                                                var if10977 = GraceDone;
                                                                setLineNumber(2046);    // compilenode call
                                                                onSelf = true;
                                                                var call10979 = callmethodChecked(this, "annotations", [0]);
                                                                var call10980 = callmethodChecked(call10979, "size", [0]);
                                                                var opresult10982 = callmethodChecked(call10980, "==", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult10982)) {
                                                                  return GraceFalse;
                                                                }
                                                                var if10983 = GraceDone;
                                                                setLineNumber(2047);    // compilenode string
                                                                var string10984 = new GraceString("public");
                                                                var call10985 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10986 = callmethodChecked(call10985, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10987 = callmethodChecked(call10986, "findAnnotation", [2], this, string10984);
                                                                if (Grace_isTrue(call10987)) {
                                                                  return GraceTrue;
                                                                }
                                                                var if10988 = GraceDone;
                                                                setLineNumber(2048);    // compilenode string
                                                                var string10989 = new GraceString("readable");
                                                                var call10990 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10991 = callmethodChecked(call10990, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call10992 = callmethodChecked(call10991, "findAnnotation", [2], this, string10989);
                                                                if (Grace_isTrue(call10992)) {
                                                                  return GraceTrue;
                                                                }
                                                                setLineNumber(2049);    // compilenode identifier
                                                                return GraceFalse;
                                                              };
                                                              func10976.paramCounts = [0];
                                                              obj10941.methods["isReadable"] = func10976;
                                                              func10976.definitionLine = 2045;
                                                              func10976.definitionModule = "ast";
                                                              var func10993 = function(argcv) {    // method isFieldDec
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isFieldDec"));
                                                                setModuleName("ast");
                                                                // isFieldDec is a simple accessor - elide try ... catch
                                                                setLineNumber(2051);    // compilenode identifier
                                                                return GraceTrue;
                                                              };
                                                              func10993.paramCounts = [0];
                                                              obj10941.methods["isFieldDec"] = func10993;
                                                              func10993.definitionLine = 2051;
                                                              func10993.definitionModule = "ast";
                                                              var func10994 = function(argcv) {    // method usesAsType(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_aNode = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
                                                                setModuleName("ast");
                                                                setLineNumber(2054);    // compilenode call
                                                                onSelf = true;
                                                                var call10995 = callmethodChecked(this, "dtype", [0]);
                                                                var opresult10998 = callmethodChecked(var_aNode, "==", [1], call10995);
                                                                return opresult10998;
                                                              };
                                                              func10994.paramCounts = [1];
                                                              obj10941.methods["usesAsType"] = func10994;
                                                              func10994.definitionLine = 2053;
                                                              func10994.definitionModule = "ast";
                                                              var func10999 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                                setModuleName("ast");
                                                                setLineNumber(2057);    // compilenode identifier
                                                                var call11000 = callmethodChecked(var_k, "vardec", [0]);
                                                                return call11000;
                                                              };
                                                              func10999.paramCounts = [1];
                                                              obj10941.methods["declarationKindWithAncestors"] = func10999;
                                                              func10999.definitionLine = 2057;
                                                              func10999.definitionModule = "ast";
                                                              var func11001 = function(argcv) {    // method accept(1)from(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_visitor = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[1] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(2059);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                curarg++;
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("ast");
                                                                var if11002 = GraceDone;
                                                                setLineNumber(2060);    // compilenode identifier
                                                                var call11003 = callmethodChecked(var_visitor, "visitVarDec()up", [1, 1], this, var_as);
                                                                if (Grace_isTrue(call11003)) {
                                                                  setLineNumber(2061);    // compilenode identifier
                                                                  var call11004 = callmethodChecked(var_as, "extend", [1], this);
                                                                  var var_newChain = call11004;
                                                                  setLineNumber(2062);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11005 = callmethodChecked(this, "name", [0]);
                                                                  var call11006 = callmethodChecked(call11005, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                  var if11007 = GraceDone;
                                                                  setLineNumber(2063);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11008 = callmethodChecked(this, "dtype", [0]);
                                                                  var opresult11011 = callmethodChecked(GraceFalse, "\u2260", [1], call11008);
                                                                  if (Grace_isTrue(opresult11011)) {
                                                                    setLineNumber(2064);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11012 = callmethodChecked(this, "dtype", [0]);
                                                                    var call11013 = callmethodChecked(call11012, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                    if11007 = call11013;
                                                                  }
                                                                  setLineNumber(2066);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11014 = callmethodChecked(this, "annotations", [0]);
                                                                  var block11015 = new GraceBlock(this, 2066, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block11015.real = function(var_ann) {
                                                                    setLineNumber(2067);    // compilenode identifier
                                                                    var call11016 = callmethodChecked(var_ann, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                    return call11016;
                                                                  };
                                                                  var call11017 = callmethodChecked(var_prelude, "for()do", [1, 1], call11014, block11015);
                                                                  var if11018 = GraceDone;
                                                                  setLineNumber(2069);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11019 = callmethodChecked(this, "value", [0]);
                                                                  var opresult11022 = callmethodChecked(GraceFalse, "\u2260", [1], call11019);
                                                                  if (Grace_isTrue(opresult11022)) {
                                                                    setLineNumber(2070);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11023 = callmethodChecked(this, "value", [0]);
                                                                    var call11024 = callmethodChecked(call11023, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                    if11018 = call11024;
                                                                  }
                                                                  if11002 = if11018;
                                                                }
                                                                return if11002;
                                                              };
                                                              func11001.paramTypes = [];
                                                              func11001.paramTypes.push([]);
                                                              func11001.paramTypes.push([]);
                                                              func11001.paramCounts = [1, 1];
                                                              obj10941.methods["accept()from"] = func11001;
                                                              func11001.definitionLine = 2059;
                                                              func11001.definitionModule = "ast";
                                                              var func11025 = function(argcv) {    // method map(1)ancestors(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_blk = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[1] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                setModuleName("ast");
                                                                setLineNumber(2075);    // compilenode call
                                                                onSelf = true;
                                                                var call11026 = callmethodChecked(this, "shallowCopy", [0]);
                                                                var var_n = call11026;
                                                                setLineNumber(2076);    // compilenode identifier
                                                                var call11027 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                var var_newChain = call11027;
                                                                setLineNumber(2077);    // compilenode call
                                                                onSelf = true;
                                                                var call11028 = callmethodChecked(this, "name", [0]);
                                                                var call11029 = callmethodChecked(call11028, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                                var call11030 = callmethodChecked(var_n, "name:=", [1], call11029);
                                                                setLineNumber(2078);    // compilenode call
                                                                onSelf = true;
                                                                var call11031 = callmethodChecked(this, "value", [0]);
                                                                var call11032 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call11033 = callmethodChecked(call11032, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call11034 = callmethodChecked(call11033, "maybeMap()ancestors", [2, 1], call11031, var_blk, var_newChain);
                                                                var call11035 = callmethodChecked(var_n, "value:=", [1], call11034);
                                                                setLineNumber(2079);    // compilenode call
                                                                onSelf = true;
                                                                var call11036 = callmethodChecked(this, "dtype", [0]);
                                                                var call11037 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call11038 = callmethodChecked(call11037, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call11039 = callmethodChecked(call11038, "maybeMap()ancestors", [2, 1], call11036, var_blk, var_newChain);
                                                                var call11040 = callmethodChecked(var_n, "dtype:=", [1], call11039);
                                                                setLineNumber(2080);    // compilenode call
                                                                onSelf = true;
                                                                var call11041 = callmethodChecked(this, "annotations", [0]);
                                                                var call11042 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call11043 = callmethodChecked(call11042, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call11044 = callmethodChecked(call11043, "listMap()ancestors", [2, 1], call11041, var_blk, var_newChain);
                                                                var call11045 = callmethodChecked(var_n, "annotations:=", [1], call11044);
                                                                setLineNumber(2081);    // compilenode identifier
                                                                var call11046 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                return call11046;
                                                              };
                                                              func11025.paramCounts = [1, 1];
                                                              obj10941.methods["map()ancestors"] = func11025;
                                                              func11025.definitionLine = 2074;
                                                              func11025.definitionModule = "ast";
                                                              var func11047 = function(argcv) {    // method pretty(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_depth = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                setModuleName("ast");
                                                                setLineNumber(2084);    // compilenode string
                                                                var string11048 = new GraceString("");
                                                                var var_spc = string11048;
                                                                setLineNumber(2085);    // compilenode num
                                                                var opresult11051 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                var block11052 = new GraceBlock(this, 2085, 1);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block11052.real = function(var_i) {
                                                                  setLineNumber(2086);    // compilenode string
                                                                  var string11053 = new GraceString("  ");
                                                                  var opresult11056 = callmethodChecked(var_spc, "++", [1], string11053);
                                                                  var_spc = opresult11056;
                                                                  return GraceDone;
                                                                };
                                                                var call11057 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult11051, block11052);
                                                                setLineNumber(2088);    // compilenode string
                                                                var string11058 = new GraceString("\n");
                                                                var call11060 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                var opresult11062 = callmethodChecked(call11060, "++", [1], string11058);
                                                                var var_s = opresult11062;
                                                                setLineNumber(2089);    // compilenode identifier
                                                                var opresult11065 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                                onSelf = true;
                                                                var call11066 = callmethodChecked(this, "name", [0]);
                                                                var call11067 = callmethodChecked(call11066, "pretty", [1], opresult11065);
                                                                var opresult11071 = callmethodChecked(var_s, "++", [1], var_spc);
                                                                var opresult11073 = callmethodChecked(opresult11071, "++", [1], call11067);
                                                                var_s = opresult11073;
                                                                var if11074 = GraceDone;
                                                                setLineNumber(2090);    // compilenode call
                                                                onSelf = true;
                                                                var call11075 = callmethodChecked(this, "dtype", [0]);
                                                                var opresult11078 = callmethodChecked(GraceFalse, "\u2260", [1], call11075);
                                                                if (Grace_isTrue(opresult11078)) {
                                                                  setLineNumber(2091);    // compilenode string
                                                                  var string11079 = new GraceString("Type: ");
                                                                  var string11082 = new GraceString("\n");
                                                                  var opresult11085 = callmethodChecked(var_s, "++", [1], string11082);
                                                                  var opresult11087 = callmethodChecked(opresult11085, "++", [1], var_spc);
                                                                  var opresult11089 = callmethodChecked(opresult11087, "++", [1], string11079);
                                                                  var_s = opresult11089;
                                                                  setLineNumber(2092);    // compilenode identifier
                                                                  var opresult11092 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                  onSelf = true;
                                                                  var call11093 = callmethodChecked(this, "dtype", [0]);
                                                                  var call11094 = callmethodChecked(call11093, "pretty", [1], opresult11092);
                                                                  var opresult11097 = callmethodChecked(var_s, "++", [1], call11094);
                                                                  var_s = opresult11097;
                                                                  if11074 = GraceDone;
                                                                }
                                                                var if11098 = GraceDone;
                                                                setLineNumber(2094);    // compilenode call
                                                                onSelf = true;
                                                                var call11099 = callmethodChecked(this, "value", [0]);
                                                                var opresult11102 = callmethodChecked(GraceFalse, "\u2260", [1], call11099);
                                                                if (Grace_isTrue(opresult11102)) {
                                                                  setLineNumber(2095);    // compilenode string
                                                                  var string11103 = new GraceString("Value: ");
                                                                  var string11106 = new GraceString("\n");
                                                                  var opresult11109 = callmethodChecked(var_s, "++", [1], string11106);
                                                                  var opresult11111 = callmethodChecked(opresult11109, "++", [1], var_spc);
                                                                  var opresult11113 = callmethodChecked(opresult11111, "++", [1], string11103);
                                                                  var_s = opresult11113;
                                                                  setLineNumber(2096);    // compilenode identifier
                                                                  var opresult11116 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                  onSelf = true;
                                                                  var call11117 = callmethodChecked(this, "value", [0]);
                                                                  var call11118 = callmethodChecked(call11117, "pretty", [1], opresult11116);
                                                                  var opresult11121 = callmethodChecked(var_s, "++", [1], call11118);
                                                                  var_s = opresult11121;
                                                                  if11098 = GraceDone;
                                                                }
                                                                var if11122 = GraceDone;
                                                                setLineNumber(2098);    // compilenode call
                                                                onSelf = true;
                                                                var call11123 = callmethodChecked(this, "comments", [0]);
                                                                var opresult11126 = callmethodChecked(GraceFalse, "\u2260", [1], call11123);
                                                                if (Grace_isTrue(opresult11126)) {
                                                                  setLineNumber(2099);    // compilenode identifier
                                                                  var opresult11129 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                  onSelf = true;
                                                                  var call11130 = callmethodChecked(this, "comments", [0]);
                                                                  var call11131 = callmethodChecked(call11130, "pretty", [1], opresult11129);
                                                                  var opresult11134 = callmethodChecked(var_s, "++", [1], call11131);
                                                                  var_s = opresult11134;
                                                                  if11122 = GraceDone;
                                                                }
                                                                setLineNumber(2101);    // compilenode identifier
                                                                return var_s;
                                                              };
                                                              func11047.paramCounts = [1];
                                                              obj10941.methods["pretty"] = func11047;
                                                              func11047.definitionLine = 2083;
                                                              func11047.definitionModule = "ast";
                                                              var func11135 = function(argcv) {    // method toGrace(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_depth = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(2103);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("ast");
                                                                setLineNumber(2104);    // compilenode string
                                                                var string11136 = new GraceString("");
                                                                var var_spc = string11136;
                                                                setLineNumber(2105);    // compilenode block
                                                                var block11137 = new GraceBlock(this, 2105, 0);
                                                                block11137.real = function() {
                                                                  setLineNumber(2106);    // compilenode string
                                                                  var string11138 = new GraceString("    ");
                                                                  var opresult11141 = callmethodChecked(var_spc, "++", [1], string11138);
                                                                  var_spc = opresult11141;
                                                                  return GraceDone;
                                                                };
                                                                var call11142 = callmethodChecked(var_prelude, "repeat()times", [1, 1], var_depth, block11137);
                                                                setLineNumber(2108);    // compilenode string
                                                                var string11143 = new GraceString("");
                                                                onSelf = true;
                                                                var call11145 = callmethodChecked(this, "name", [0]);
                                                                var call11146 = callmethodChecked(call11145, "toGrace", [1], new GraceNum(0));
                                                                var string11148 = new GraceString("var ");
                                                                var opresult11150 = callmethodChecked(string11148, "++", [1], call11146);
                                                                var opresult11152 = callmethodChecked(opresult11150, "++", [1], string11143);
                                                                var var_s = opresult11152;
                                                                var if11153 = GraceDone;
                                                                setLineNumber(2109);    // compilenode block
                                                                var block11154 = new GraceBlock(this, 2109, 0);
                                                                block11154.real = function() {
                                                                  setLineNumber(2110);    // compilenode string
                                                                  var string11155 = new GraceString("Unknown");
                                                                  onSelf = true;
                                                                  var call11157 = callmethodChecked(this, "dtype", [0]);
                                                                  var call11158 = callmethodChecked(call11157, "value", [0]);
                                                                  var opresult11160 = callmethodChecked(call11158, "\u2260", [1], string11155);
                                                                  return opresult11160;
                                                                };
                                                                setLineNumber(2109);    // compilenode call
                                                                onSelf = true;
                                                                var call11162 = callmethodChecked(this, "dtype", [0]);
                                                                var opresult11165 = callmethodChecked(GraceFalse, "\u2260", [1], call11162);
                                                                var opresult11167 = callmethodChecked(opresult11165, "&&", [1], block11154);
                                                                if (Grace_isTrue(opresult11167)) {
                                                                  setLineNumber(2111);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11168 = callmethodChecked(this, "dtype", [0]);
                                                                  var call11169 = callmethodChecked(call11168, "toGrace", [1], new GraceNum(0));
                                                                  var string11171 = new GraceString(" : ");
                                                                  var opresult11174 = callmethodChecked(var_s, "++", [1], string11171);
                                                                  var opresult11176 = callmethodChecked(opresult11174, "++", [1], call11169);
                                                                  var_s = opresult11176;
                                                                  if11153 = GraceDone;
                                                                }
                                                                var if11177 = GraceDone;
                                                                setLineNumber(2113);    // compilenode call
                                                                onSelf = true;
                                                                var call11179 = callmethodChecked(this, "annotations", [0]);
                                                                var call11180 = callmethodChecked(call11179, "size", [0]);
                                                                var opresult11182 = callmethodChecked(call11180, ">", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult11182)) {
                                                                  setLineNumber(2114);    // compilenode string
                                                                  var string11183 = new GraceString(" is ");
                                                                  var opresult11186 = callmethodChecked(var_s, "++", [1], string11183);
                                                                  var_s = opresult11186;
                                                                  setLineNumber(2115);    // compilenode block
                                                                  var block11187 = new GraceBlock(this, 2115, 2);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block11187.real = function(var_a, var_b) {
                                                                    setLineNumber(2116);    // compilenode identifier
                                                                    var call11188 = callmethodChecked(var_b, "toGrace", [1], new GraceNum(0));
                                                                    var if11190 = GraceDone;
                                                                    var string11191 = new GraceString("");
                                                                    var opresult11194 = callmethodChecked(var_a, "\u2260", [1], string11191);
                                                                    if (Grace_isTrue(opresult11194)) {
                                                                      var string11195 = new GraceString(", ");
                                                                      var opresult11198 = callmethodChecked(var_a, "++", [1], string11195);
                                                                      if11190 = opresult11198;
                                                                    } else {
                                                                      var string11199 = new GraceString("");
                                                                      if11190 = string11199;
                                                                    }
                                                                    var opresult11201 = callmethodChecked(if11190, "++", [1], call11188);
                                                                    return opresult11201;
                                                                  };
                                                                  setLineNumber(2117);    // compilenode string
                                                                  var string11202 = new GraceString("");
                                                                  setLineNumber(2115);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11203 = callmethodChecked(this, "annotations", [0]);
                                                                  var call11204 = callmethodChecked(call11203, "fold()startingWith", [1, 1], block11187, string11202);
                                                                  var opresult11207 = callmethodChecked(var_s, "++", [1], call11204);
                                                                  var_s = opresult11207;
                                                                  if11177 = GraceDone;
                                                                }
                                                                var if11208 = GraceDone;
                                                                setLineNumber(2119);    // compilenode call
                                                                onSelf = true;
                                                                var call11209 = callmethodChecked(this, "value", [0]);
                                                                var opresult11212 = callmethodChecked(GraceFalse, "\u2260", [1], call11209);
                                                                if (Grace_isTrue(opresult11212)) {
                                                                  setLineNumber(2120);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11213 = callmethodChecked(this, "value", [0]);
                                                                  var call11214 = callmethodChecked(call11213, "toGrace", [1], var_depth);
                                                                  var string11216 = new GraceString(" := ");
                                                                  var opresult11219 = callmethodChecked(var_s, "++", [1], string11216);
                                                                  var opresult11221 = callmethodChecked(opresult11219, "++", [1], call11214);
                                                                  var_s = opresult11221;
                                                                  if11208 = GraceDone;
                                                                }
                                                                setLineNumber(2122);    // return value
                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method toGrace(1) does not have " + 
                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                return var_s;
                                                              };
                                                              func11135.paramTypes = [];
                                                              func11135.paramTypes.push([type_Number, "depth"]);
                                                              func11135.paramCounts = [1];
                                                              obj10941.methods["toGrace"] = func11135;
                                                              func11135.definitionLine = 2103;
                                                              func11135.definitionModule = "ast";
                                                              var func11222 = function(argcv) {    // method shallowCopy
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                setModuleName("ast");
                                                                setLineNumber(2125);    // compilenode call
                                                                onSelf = true;
                                                                var call11223 = callmethodChecked(this, "name", [0]);
                                                                onSelf = true;
                                                                var call11224 = callmethodChecked(this, "value", [0]);
                                                                onSelf = true;
                                                                var call11225 = callmethodChecked(this, "dtype", [0]);
                                                                var call11226 = callmethodChecked(var_varDecNode, "new", [3], call11223, call11224, call11225);
                                                                var call11227 = callmethodChecked(call11226, "shallowCopyFieldsFrom", [1], this);
                                                                return call11227;
                                                              };
                                                              func11222.paramCounts = [0];
                                                              obj10941.methods["shallowCopy"] = func11222;
                                                              func11222.definitionLine = 2124;
                                                              func11222.definitionModule = "ast";
                                                              var func11228 = function(argcv) {    // method statementName
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                                setModuleName("ast");
                                                                setLineNumber(2127);    // compilenode string
                                                                var string11229 = new GraceString("variable declaration");
                                                                return string11229;
                                                              };
                                                              func11228.paramCounts = [0];
                                                              obj10941.methods["statementName"] = func11228;
                                                              func11228.definitionLine = 2127;
                                                              func11228.definitionModule = "ast";
                                                              setLineNumber(2025);    // compilenode call
                                                              var call11230 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call11231 = callmethodChecked(call11230, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call11232 = callmethodChecked(call11231, "baseNode()object", [0, 1], this);
                                                              obj10941.superobj = call11232;
                                                              if (call11232.data) obj10941.data = call11232.data;
                                                              if (call11232.hasOwnProperty('_value'))
                                                                  obj10941._value = call11232._value;
                                                              setLineNumber(2026);    // compilenode string
                                                              var string11233 = new GraceString("vardec");
                                                              obj10941.data["kind"] = string11233;
                                                              var reader_ast_kind11234 = function() {
                                                                return this.data["kind"];
                                                              };
                                                              reader_ast_kind11234.def = true;
                                                              obj10941.methods["kind"] = reader_ast_kind11234;
                                                              setLineNumber(2027);    // compilenode identifier
                                                              obj10941.data["name"] = var_name__39__;
                                                              var reader_ast_name11235 = function() {
                                                                return this.data["name"];
                                                              };
                                                              obj10941.methods["name"] = reader_ast_name11235;
                                                              obj10941.data["name"] = var_name__39__;
                                                              var writer_ast_name11235 = function(argcv, o) {
                                                                this.data["name"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj10941.methods["name:="] = writer_ast_name11235;
                                                              obj10941.mutable = true;
                                                              setLineNumber(2028);    // compilenode identifier
                                                              obj10941.data["value"] = var_val__39__;
                                                              var reader_ast_value11236 = function() {
                                                                return this.data["value"];
                                                              };
                                                              obj10941.methods["value"] = reader_ast_value11236;
                                                              obj10941.data["value"] = var_val__39__;
                                                              var writer_ast_value11236 = function(argcv, o) {
                                                                this.data["value"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj10941.methods["value:="] = writer_ast_value11236;
                                                              obj10941.mutable = true;
                                                              setLineNumber(2029);    // compilenode identifier
                                                              obj10941.data["dtype"] = var_dtype__39__;
                                                              var reader_ast_dtype11237 = function() {
                                                                return this.data["dtype"];
                                                              };
                                                              obj10941.methods["dtype"] = reader_ast_dtype11237;
                                                              obj10941.data["dtype"] = var_dtype__39__;
                                                              var writer_ast_dtype11237 = function(argcv, o) {
                                                                this.data["dtype"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj10941.methods["dtype:="] = writer_ast_dtype11237;
                                                              obj10941.mutable = true;
                                                              setLineNumber(2030);    // compilenode call
                                                              onSelf = true;
                                                              var call11238 = callmethodChecked(this, "name", [0]);
                                                              var call11239 = callmethodChecked(call11238, "value", [0]);
                                                              obj10941.data["nameString"] = call11239;
                                                              var reader_ast_nameString11240 = function() {
                                                                return this.data["nameString"];
                                                              };
                                                              reader_ast_nameString11240.def = true;
                                                              obj10941.methods["nameString"] = reader_ast_nameString11240;
                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], call11239)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("value of def 'nameString' is not of type String"));
                                                              setLineNumber(2031);    // compilenode array
                                                              var array11241 = new PrimitiveGraceList([]);
                                                              obj10941.data["annotations"] = array11241;
                                                              var reader_ast_annotations11242 = function() {
                                                                return this.data["annotations"];
                                                              };
                                                              obj10941.methods["annotations"] = reader_ast_annotations11242;
                                                              obj10941.data["annotations"] = array11241;
                                                              var writer_ast_annotations11242 = function(argcv, o) {
                                                                this.data["annotations"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj10941.methods["annotations:="] = writer_ast_annotations11242;
                                                              obj10941.mutable = true;
                                                              superDepth = origSuperDepth;
                                                            };
                                                            obj_init_10941.apply(obj10941, []);
                                                            return obj10941;
                                                          };
                                                          func10940.paramCounts = [3];
                                                          obj10938.methods["new"] = func10940;
                                                          func10940.definitionLine = 2024;
                                                          func10940.definitionModule = "ast";
                                                            var func11243 = function(argcv) {    // method new(3     )()object
                                                              var curarg = 1;
                                                              var var_name__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_val__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_dtype__39__ = arguments[curarg];
                                                              curarg++;
                                                              var inheritingObject = arguments[curarg++];
                                                              // Start argument processing
                                                              curarg = 1;
                                                              curarg++;
                                                              curarg++;
                                                              curarg++;
                                                              // End argument processing
                                                              setModuleName("ast");
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var obj11244 = Grace_allocObject(null, "new");
                                                              obj11244.definitionModule = "ast";
                                                              obj11244.definitionLine = 2024;
                                                              var inho11244 = inheritingObject;
                                                              while (inho11244.superobj) inho11244 = inho11244.superobj;
                                                              inho11244.superobj = obj11244;
                                                              obj11244.data = inheritingObject.data;
                                                              if (inheritingObject.hasOwnProperty('_value'))
                                                                obj11244._value = inheritingObject._value;
                                                              obj11244.outer = this;
                                                              var reader_ast_outer11245 = function() {
                                                                return this.outer;
                                                              };
                                                              obj11244.methods["outer"] = reader_ast_outer11245;
                                                              var obj_init_11244 = function() {
                                                                var origSuperDepth = superDepth;
                                                                superDepth = obj11244;
                                                                var func11246 = function(argcv) {    // method isPublic
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
                                                                  setModuleName("ast");
                                                                  var if11247 = GraceDone;
                                                                  setLineNumber(2035);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11249 = callmethodChecked(this, "annotations", [0]);
                                                                  var call11250 = callmethodChecked(call11249, "size", [0]);
                                                                  var opresult11252 = callmethodChecked(call11250, "==", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult11252)) {
                                                                    return GraceFalse;
                                                                  }
                                                                  var if11253 = GraceDone;
                                                                  setLineNumber(2036);    // compilenode string
                                                                  var string11254 = new GraceString("public");
                                                                  var call11255 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11256 = callmethodChecked(call11255, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11257 = callmethodChecked(call11256, "findAnnotation", [2], this, string11254);
                                                                  if (Grace_isTrue(call11257)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  setLineNumber(2037);    // compilenode string
                                                                  var string11258 = new GraceString("readable");
                                                                  var call11259 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11260 = callmethodChecked(call11259, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11261 = callmethodChecked(call11260, "findAnnotation", [2], this, string11258);
                                                                  return call11261;
                                                                };
                                                                func11246.paramCounts = [0];
                                                                obj11244.methods["isPublic"] = func11246;
                                                                func11246.definitionLine = 2033;
                                                                func11246.definitionModule = "ast";
                                                                var func11262 = function(argcv) {    // method isWritable
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
                                                                  setModuleName("ast");
                                                                  var if11263 = GraceDone;
                                                                  setLineNumber(2040);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11265 = callmethodChecked(this, "annotations", [0]);
                                                                  var call11266 = callmethodChecked(call11265, "size", [0]);
                                                                  var opresult11268 = callmethodChecked(call11266, "==", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult11268)) {
                                                                    return GraceFalse;
                                                                  }
                                                                  var if11269 = GraceDone;
                                                                  setLineNumber(2041);    // compilenode string
                                                                  var string11270 = new GraceString("public");
                                                                  var call11271 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11272 = callmethodChecked(call11271, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11273 = callmethodChecked(call11272, "findAnnotation", [2], this, string11270);
                                                                  if (Grace_isTrue(call11273)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  var if11274 = GraceDone;
                                                                  setLineNumber(2042);    // compilenode string
                                                                  var string11275 = new GraceString("writable");
                                                                  var call11276 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11277 = callmethodChecked(call11276, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11278 = callmethodChecked(call11277, "findAnnotation", [2], this, string11275);
                                                                  if (Grace_isTrue(call11278)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  setLineNumber(2043);    // compilenode identifier
                                                                  return GraceFalse;
                                                                };
                                                                func11262.paramCounts = [0];
                                                                obj11244.methods["isWritable"] = func11262;
                                                                func11262.definitionLine = 2039;
                                                                func11262.definitionModule = "ast";
                                                                var func11279 = function(argcv) {    // method isReadable
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
                                                                  setModuleName("ast");
                                                                  var if11280 = GraceDone;
                                                                  setLineNumber(2046);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11282 = callmethodChecked(this, "annotations", [0]);
                                                                  var call11283 = callmethodChecked(call11282, "size", [0]);
                                                                  var opresult11285 = callmethodChecked(call11283, "==", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult11285)) {
                                                                    return GraceFalse;
                                                                  }
                                                                  var if11286 = GraceDone;
                                                                  setLineNumber(2047);    // compilenode string
                                                                  var string11287 = new GraceString("public");
                                                                  var call11288 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11289 = callmethodChecked(call11288, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11290 = callmethodChecked(call11289, "findAnnotation", [2], this, string11287);
                                                                  if (Grace_isTrue(call11290)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  var if11291 = GraceDone;
                                                                  setLineNumber(2048);    // compilenode string
                                                                  var string11292 = new GraceString("readable");
                                                                  var call11293 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11294 = callmethodChecked(call11293, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11295 = callmethodChecked(call11294, "findAnnotation", [2], this, string11292);
                                                                  if (Grace_isTrue(call11295)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  setLineNumber(2049);    // compilenode identifier
                                                                  return GraceFalse;
                                                                };
                                                                func11279.paramCounts = [0];
                                                                obj11244.methods["isReadable"] = func11279;
                                                                func11279.definitionLine = 2045;
                                                                func11279.definitionModule = "ast";
                                                                var func11296 = function(argcv) {    // method isFieldDec
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isFieldDec"));
                                                                  setModuleName("ast");
                                                                  // isFieldDec is a simple accessor - elide try ... catch
                                                                  setLineNumber(2051);    // compilenode identifier
                                                                  return GraceTrue;
                                                                };
                                                                func11296.paramCounts = [0];
                                                                obj11244.methods["isFieldDec"] = func11296;
                                                                func11296.definitionLine = 2051;
                                                                func11296.definitionModule = "ast";
                                                                var func11297 = function(argcv) {    // method usesAsType(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_aNode = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2054);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11298 = callmethodChecked(this, "dtype", [0]);
                                                                  var opresult11301 = callmethodChecked(var_aNode, "==", [1], call11298);
                                                                  return opresult11301;
                                                                };
                                                                func11297.paramCounts = [1];
                                                                obj11244.methods["usesAsType"] = func11297;
                                                                func11297.definitionLine = 2053;
                                                                func11297.definitionModule = "ast";
                                                                var func11302 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2057);    // compilenode identifier
                                                                  var call11303 = callmethodChecked(var_k, "vardec", [0]);
                                                                  return call11303;
                                                                };
                                                                func11302.paramCounts = [1];
                                                                obj11244.methods["declarationKindWithAncestors"] = func11302;
                                                                func11302.definitionLine = 2057;
                                                                func11302.definitionModule = "ast";
                                                                var func11304 = function(argcv) {    // method accept(1)from(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_visitor = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[1] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(2059);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("ast");
                                                                  var if11305 = GraceDone;
                                                                  setLineNumber(2060);    // compilenode identifier
                                                                  var call11306 = callmethodChecked(var_visitor, "visitVarDec()up", [1, 1], this, var_as);
                                                                  if (Grace_isTrue(call11306)) {
                                                                    setLineNumber(2061);    // compilenode identifier
                                                                    var call11307 = callmethodChecked(var_as, "extend", [1], this);
                                                                    var var_newChain = call11307;
                                                                    setLineNumber(2062);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11308 = callmethodChecked(this, "name", [0]);
                                                                    var call11309 = callmethodChecked(call11308, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                    var if11310 = GraceDone;
                                                                    setLineNumber(2063);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11311 = callmethodChecked(this, "dtype", [0]);
                                                                    var opresult11314 = callmethodChecked(GraceFalse, "\u2260", [1], call11311);
                                                                    if (Grace_isTrue(opresult11314)) {
                                                                      setLineNumber(2064);    // compilenode call
                                                                      onSelf = true;
                                                                      var call11315 = callmethodChecked(this, "dtype", [0]);
                                                                      var call11316 = callmethodChecked(call11315, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                      if11310 = call11316;
                                                                    }
                                                                    setLineNumber(2066);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11317 = callmethodChecked(this, "annotations", [0]);
                                                                    var block11318 = new GraceBlock(this, 2066, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block11318.real = function(var_ann) {
                                                                      setLineNumber(2067);    // compilenode identifier
                                                                      var call11319 = callmethodChecked(var_ann, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                      return call11319;
                                                                    };
                                                                    var call11320 = callmethodChecked(var_prelude, "for()do", [1, 1], call11317, block11318);
                                                                    var if11321 = GraceDone;
                                                                    setLineNumber(2069);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11322 = callmethodChecked(this, "value", [0]);
                                                                    var opresult11325 = callmethodChecked(GraceFalse, "\u2260", [1], call11322);
                                                                    if (Grace_isTrue(opresult11325)) {
                                                                      setLineNumber(2070);    // compilenode call
                                                                      onSelf = true;
                                                                      var call11326 = callmethodChecked(this, "value", [0]);
                                                                      var call11327 = callmethodChecked(call11326, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                      if11321 = call11327;
                                                                    }
                                                                    if11305 = if11321;
                                                                  }
                                                                  return if11305;
                                                                };
                                                                func11304.paramTypes = [];
                                                                func11304.paramTypes.push([]);
                                                                func11304.paramTypes.push([]);
                                                                func11304.paramCounts = [1, 1];
                                                                obj11244.methods["accept()from"] = func11304;
                                                                func11304.definitionLine = 2059;
                                                                func11304.definitionModule = "ast";
                                                                var func11328 = function(argcv) {    // method map(1)ancestors(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_blk = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[1] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2075);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11329 = callmethodChecked(this, "shallowCopy", [0]);
                                                                  var var_n = call11329;
                                                                  setLineNumber(2076);    // compilenode identifier
                                                                  var call11330 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                  var var_newChain = call11330;
                                                                  setLineNumber(2077);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11331 = callmethodChecked(this, "name", [0]);
                                                                  var call11332 = callmethodChecked(call11331, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                                  var call11333 = callmethodChecked(var_n, "name:=", [1], call11332);
                                                                  setLineNumber(2078);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11334 = callmethodChecked(this, "value", [0]);
                                                                  var call11335 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11336 = callmethodChecked(call11335, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11337 = callmethodChecked(call11336, "maybeMap()ancestors", [2, 1], call11334, var_blk, var_newChain);
                                                                  var call11338 = callmethodChecked(var_n, "value:=", [1], call11337);
                                                                  setLineNumber(2079);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11339 = callmethodChecked(this, "dtype", [0]);
                                                                  var call11340 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11341 = callmethodChecked(call11340, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11342 = callmethodChecked(call11341, "maybeMap()ancestors", [2, 1], call11339, var_blk, var_newChain);
                                                                  var call11343 = callmethodChecked(var_n, "dtype:=", [1], call11342);
                                                                  setLineNumber(2080);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11344 = callmethodChecked(this, "annotations", [0]);
                                                                  var call11345 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11346 = callmethodChecked(call11345, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11347 = callmethodChecked(call11346, "listMap()ancestors", [2, 1], call11344, var_blk, var_newChain);
                                                                  var call11348 = callmethodChecked(var_n, "annotations:=", [1], call11347);
                                                                  setLineNumber(2081);    // compilenode identifier
                                                                  var call11349 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                  return call11349;
                                                                };
                                                                func11328.paramCounts = [1, 1];
                                                                obj11244.methods["map()ancestors"] = func11328;
                                                                func11328.definitionLine = 2074;
                                                                func11328.definitionModule = "ast";
                                                                var func11350 = function(argcv) {    // method pretty(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_depth = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2084);    // compilenode string
                                                                  var string11351 = new GraceString("");
                                                                  var var_spc = string11351;
                                                                  setLineNumber(2085);    // compilenode num
                                                                  var opresult11354 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                  var block11355 = new GraceBlock(this, 2085, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block11355.real = function(var_i) {
                                                                    setLineNumber(2086);    // compilenode string
                                                                    var string11356 = new GraceString("  ");
                                                                    var opresult11359 = callmethodChecked(var_spc, "++", [1], string11356);
                                                                    var_spc = opresult11359;
                                                                    return GraceDone;
                                                                  };
                                                                  var call11360 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult11354, block11355);
                                                                  setLineNumber(2088);    // compilenode string
                                                                  var string11361 = new GraceString("\n");
                                                                  var call11363 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                  var opresult11365 = callmethodChecked(call11363, "++", [1], string11361);
                                                                  var var_s = opresult11365;
                                                                  setLineNumber(2089);    // compilenode identifier
                                                                  var opresult11368 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                                  onSelf = true;
                                                                  var call11369 = callmethodChecked(this, "name", [0]);
                                                                  var call11370 = callmethodChecked(call11369, "pretty", [1], opresult11368);
                                                                  var opresult11374 = callmethodChecked(var_s, "++", [1], var_spc);
                                                                  var opresult11376 = callmethodChecked(opresult11374, "++", [1], call11370);
                                                                  var_s = opresult11376;
                                                                  var if11377 = GraceDone;
                                                                  setLineNumber(2090);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11378 = callmethodChecked(this, "dtype", [0]);
                                                                  var opresult11381 = callmethodChecked(GraceFalse, "\u2260", [1], call11378);
                                                                  if (Grace_isTrue(opresult11381)) {
                                                                    setLineNumber(2091);    // compilenode string
                                                                    var string11382 = new GraceString("Type: ");
                                                                    var string11385 = new GraceString("\n");
                                                                    var opresult11388 = callmethodChecked(var_s, "++", [1], string11385);
                                                                    var opresult11390 = callmethodChecked(opresult11388, "++", [1], var_spc);
                                                                    var opresult11392 = callmethodChecked(opresult11390, "++", [1], string11382);
                                                                    var_s = opresult11392;
                                                                    setLineNumber(2092);    // compilenode identifier
                                                                    var opresult11395 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                    onSelf = true;
                                                                    var call11396 = callmethodChecked(this, "dtype", [0]);
                                                                    var call11397 = callmethodChecked(call11396, "pretty", [1], opresult11395);
                                                                    var opresult11400 = callmethodChecked(var_s, "++", [1], call11397);
                                                                    var_s = opresult11400;
                                                                    if11377 = GraceDone;
                                                                  }
                                                                  var if11401 = GraceDone;
                                                                  setLineNumber(2094);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11402 = callmethodChecked(this, "value", [0]);
                                                                  var opresult11405 = callmethodChecked(GraceFalse, "\u2260", [1], call11402);
                                                                  if (Grace_isTrue(opresult11405)) {
                                                                    setLineNumber(2095);    // compilenode string
                                                                    var string11406 = new GraceString("Value: ");
                                                                    var string11409 = new GraceString("\n");
                                                                    var opresult11412 = callmethodChecked(var_s, "++", [1], string11409);
                                                                    var opresult11414 = callmethodChecked(opresult11412, "++", [1], var_spc);
                                                                    var opresult11416 = callmethodChecked(opresult11414, "++", [1], string11406);
                                                                    var_s = opresult11416;
                                                                    setLineNumber(2096);    // compilenode identifier
                                                                    var opresult11419 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                    onSelf = true;
                                                                    var call11420 = callmethodChecked(this, "value", [0]);
                                                                    var call11421 = callmethodChecked(call11420, "pretty", [1], opresult11419);
                                                                    var opresult11424 = callmethodChecked(var_s, "++", [1], call11421);
                                                                    var_s = opresult11424;
                                                                    if11401 = GraceDone;
                                                                  }
                                                                  var if11425 = GraceDone;
                                                                  setLineNumber(2098);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11426 = callmethodChecked(this, "comments", [0]);
                                                                  var opresult11429 = callmethodChecked(GraceFalse, "\u2260", [1], call11426);
                                                                  if (Grace_isTrue(opresult11429)) {
                                                                    setLineNumber(2099);    // compilenode identifier
                                                                    var opresult11432 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                    onSelf = true;
                                                                    var call11433 = callmethodChecked(this, "comments", [0]);
                                                                    var call11434 = callmethodChecked(call11433, "pretty", [1], opresult11432);
                                                                    var opresult11437 = callmethodChecked(var_s, "++", [1], call11434);
                                                                    var_s = opresult11437;
                                                                    if11425 = GraceDone;
                                                                  }
                                                                  setLineNumber(2101);    // compilenode identifier
                                                                  return var_s;
                                                                };
                                                                func11350.paramCounts = [1];
                                                                obj11244.methods["pretty"] = func11350;
                                                                func11350.definitionLine = 2083;
                                                                func11350.definitionModule = "ast";
                                                                var func11438 = function(argcv) {    // method toGrace(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_depth = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(2103);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("ast");
                                                                  setLineNumber(2104);    // compilenode string
                                                                  var string11439 = new GraceString("");
                                                                  var var_spc = string11439;
                                                                  setLineNumber(2105);    // compilenode block
                                                                  var block11440 = new GraceBlock(this, 2105, 0);
                                                                  block11440.real = function() {
                                                                    setLineNumber(2106);    // compilenode string
                                                                    var string11441 = new GraceString("    ");
                                                                    var opresult11444 = callmethodChecked(var_spc, "++", [1], string11441);
                                                                    var_spc = opresult11444;
                                                                    return GraceDone;
                                                                  };
                                                                  var call11445 = callmethodChecked(var_prelude, "repeat()times", [1, 1], var_depth, block11440);
                                                                  setLineNumber(2108);    // compilenode string
                                                                  var string11446 = new GraceString("");
                                                                  onSelf = true;
                                                                  var call11448 = callmethodChecked(this, "name", [0]);
                                                                  var call11449 = callmethodChecked(call11448, "toGrace", [1], new GraceNum(0));
                                                                  var string11451 = new GraceString("var ");
                                                                  var opresult11453 = callmethodChecked(string11451, "++", [1], call11449);
                                                                  var opresult11455 = callmethodChecked(opresult11453, "++", [1], string11446);
                                                                  var var_s = opresult11455;
                                                                  var if11456 = GraceDone;
                                                                  setLineNumber(2109);    // compilenode block
                                                                  var block11457 = new GraceBlock(this, 2109, 0);
                                                                  block11457.real = function() {
                                                                    setLineNumber(2110);    // compilenode string
                                                                    var string11458 = new GraceString("Unknown");
                                                                    onSelf = true;
                                                                    var call11460 = callmethodChecked(this, "dtype", [0]);
                                                                    var call11461 = callmethodChecked(call11460, "value", [0]);
                                                                    var opresult11463 = callmethodChecked(call11461, "\u2260", [1], string11458);
                                                                    return opresult11463;
                                                                  };
                                                                  setLineNumber(2109);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11465 = callmethodChecked(this, "dtype", [0]);
                                                                  var opresult11468 = callmethodChecked(GraceFalse, "\u2260", [1], call11465);
                                                                  var opresult11470 = callmethodChecked(opresult11468, "&&", [1], block11457);
                                                                  if (Grace_isTrue(opresult11470)) {
                                                                    setLineNumber(2111);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11471 = callmethodChecked(this, "dtype", [0]);
                                                                    var call11472 = callmethodChecked(call11471, "toGrace", [1], new GraceNum(0));
                                                                    var string11474 = new GraceString(" : ");
                                                                    var opresult11477 = callmethodChecked(var_s, "++", [1], string11474);
                                                                    var opresult11479 = callmethodChecked(opresult11477, "++", [1], call11472);
                                                                    var_s = opresult11479;
                                                                    if11456 = GraceDone;
                                                                  }
                                                                  var if11480 = GraceDone;
                                                                  setLineNumber(2113);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11482 = callmethodChecked(this, "annotations", [0]);
                                                                  var call11483 = callmethodChecked(call11482, "size", [0]);
                                                                  var opresult11485 = callmethodChecked(call11483, ">", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult11485)) {
                                                                    setLineNumber(2114);    // compilenode string
                                                                    var string11486 = new GraceString(" is ");
                                                                    var opresult11489 = callmethodChecked(var_s, "++", [1], string11486);
                                                                    var_s = opresult11489;
                                                                    setLineNumber(2115);    // compilenode block
                                                                    var block11490 = new GraceBlock(this, 2115, 2);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block11490.real = function(var_a, var_b) {
                                                                      setLineNumber(2116);    // compilenode identifier
                                                                      var call11491 = callmethodChecked(var_b, "toGrace", [1], new GraceNum(0));
                                                                      var if11493 = GraceDone;
                                                                      var string11494 = new GraceString("");
                                                                      var opresult11497 = callmethodChecked(var_a, "\u2260", [1], string11494);
                                                                      if (Grace_isTrue(opresult11497)) {
                                                                        var string11498 = new GraceString(", ");
                                                                        var opresult11501 = callmethodChecked(var_a, "++", [1], string11498);
                                                                        if11493 = opresult11501;
                                                                      } else {
                                                                        var string11502 = new GraceString("");
                                                                        if11493 = string11502;
                                                                      }
                                                                      var opresult11504 = callmethodChecked(if11493, "++", [1], call11491);
                                                                      return opresult11504;
                                                                    };
                                                                    setLineNumber(2117);    // compilenode string
                                                                    var string11505 = new GraceString("");
                                                                    setLineNumber(2115);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11506 = callmethodChecked(this, "annotations", [0]);
                                                                    var call11507 = callmethodChecked(call11506, "fold()startingWith", [1, 1], block11490, string11505);
                                                                    var opresult11510 = callmethodChecked(var_s, "++", [1], call11507);
                                                                    var_s = opresult11510;
                                                                    if11480 = GraceDone;
                                                                  }
                                                                  var if11511 = GraceDone;
                                                                  setLineNumber(2119);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11512 = callmethodChecked(this, "value", [0]);
                                                                  var opresult11515 = callmethodChecked(GraceFalse, "\u2260", [1], call11512);
                                                                  if (Grace_isTrue(opresult11515)) {
                                                                    setLineNumber(2120);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11516 = callmethodChecked(this, "value", [0]);
                                                                    var call11517 = callmethodChecked(call11516, "toGrace", [1], var_depth);
                                                                    var string11519 = new GraceString(" := ");
                                                                    var opresult11522 = callmethodChecked(var_s, "++", [1], string11519);
                                                                    var opresult11524 = callmethodChecked(opresult11522, "++", [1], call11517);
                                                                    var_s = opresult11524;
                                                                    if11511 = GraceDone;
                                                                  }
                                                                  setLineNumber(2122);    // return value
                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method toGrace(1) does not have " + 
                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                  return var_s;
                                                                };
                                                                func11438.paramTypes = [];
                                                                func11438.paramTypes.push([type_Number, "depth"]);
                                                                func11438.paramCounts = [1];
                                                                obj11244.methods["toGrace"] = func11438;
                                                                func11438.definitionLine = 2103;
                                                                func11438.definitionModule = "ast";
                                                                var func11525 = function(argcv) {    // method shallowCopy
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2125);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11526 = callmethodChecked(this, "name", [0]);
                                                                  onSelf = true;
                                                                  var call11527 = callmethodChecked(this, "value", [0]);
                                                                  onSelf = true;
                                                                  var call11528 = callmethodChecked(this, "dtype", [0]);
                                                                  var call11529 = callmethodChecked(var_varDecNode, "new", [3], call11526, call11527, call11528);
                                                                  var call11530 = callmethodChecked(call11529, "shallowCopyFieldsFrom", [1], this);
                                                                  return call11530;
                                                                };
                                                                func11525.paramCounts = [0];
                                                                obj11244.methods["shallowCopy"] = func11525;
                                                                func11525.definitionLine = 2124;
                                                                func11525.definitionModule = "ast";
                                                                var func11531 = function(argcv) {    // method statementName
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2127);    // compilenode string
                                                                  var string11532 = new GraceString("variable declaration");
                                                                  return string11532;
                                                                };
                                                                func11531.paramCounts = [0];
                                                                obj11244.methods["statementName"] = func11531;
                                                                func11531.definitionLine = 2127;
                                                                func11531.definitionModule = "ast";
                                                                setLineNumber(2025);    // compilenode call
                                                                var call11533 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call11534 = callmethodChecked(call11533, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call11535 = callmethodChecked(call11534, "baseNode()object", [0, 1], this);
                                                                obj11244.superobj = call11535;
                                                                if (call11535.data) obj11244.data = call11535.data;
                                                                if (call11535.hasOwnProperty('_value'))
                                                                    obj11244._value = call11535._value;
                                                                setLineNumber(2026);    // compilenode string
                                                                var string11536 = new GraceString("vardec");
                                                                obj11244.data["kind"] = string11536;
                                                                var reader_ast_kind11537 = function() {
                                                                  return this.data["kind"];
                                                                };
                                                                reader_ast_kind11537.def = true;
                                                                obj11244.methods["kind"] = reader_ast_kind11537;
                                                                setLineNumber(2027);    // compilenode identifier
                                                                obj11244.data["name"] = var_name__39__;
                                                                var reader_ast_name11538 = function() {
                                                                  return this.data["name"];
                                                                };
                                                                obj11244.methods["name"] = reader_ast_name11538;
                                                                obj11244.data["name"] = var_name__39__;
                                                                var writer_ast_name11538 = function(argcv, o) {
                                                                  this.data["name"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj11244.methods["name:="] = writer_ast_name11538;
                                                                obj11244.mutable = true;
                                                                setLineNumber(2028);    // compilenode identifier
                                                                obj11244.data["value"] = var_val__39__;
                                                                var reader_ast_value11539 = function() {
                                                                  return this.data["value"];
                                                                };
                                                                obj11244.methods["value"] = reader_ast_value11539;
                                                                obj11244.data["value"] = var_val__39__;
                                                                var writer_ast_value11539 = function(argcv, o) {
                                                                  this.data["value"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj11244.methods["value:="] = writer_ast_value11539;
                                                                obj11244.mutable = true;
                                                                setLineNumber(2029);    // compilenode identifier
                                                                obj11244.data["dtype"] = var_dtype__39__;
                                                                var reader_ast_dtype11540 = function() {
                                                                  return this.data["dtype"];
                                                                };
                                                                obj11244.methods["dtype"] = reader_ast_dtype11540;
                                                                obj11244.data["dtype"] = var_dtype__39__;
                                                                var writer_ast_dtype11540 = function(argcv, o) {
                                                                  this.data["dtype"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj11244.methods["dtype:="] = writer_ast_dtype11540;
                                                                obj11244.mutable = true;
                                                                setLineNumber(2030);    // compilenode call
                                                                onSelf = true;
                                                                var call11541 = callmethodChecked(this, "name", [0]);
                                                                var call11542 = callmethodChecked(call11541, "value", [0]);
                                                                obj11244.data["nameString"] = call11542;
                                                                var reader_ast_nameString11543 = function() {
                                                                  return this.data["nameString"];
                                                                };
                                                                reader_ast_nameString11543.def = true;
                                                                obj11244.methods["nameString"] = reader_ast_nameString11543;
                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], call11542)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("value of def 'nameString' is not of type String"));
                                                                setLineNumber(2031);    // compilenode array
                                                                var array11544 = new PrimitiveGraceList([]);
                                                                obj11244.data["annotations"] = array11544;
                                                                var reader_ast_annotations11545 = function() {
                                                                  return this.data["annotations"];
                                                                };
                                                                obj11244.methods["annotations"] = reader_ast_annotations11545;
                                                                obj11244.data["annotations"] = array11544;
                                                                var writer_ast_annotations11545 = function(argcv, o) {
                                                                  this.data["annotations"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj11244.methods["annotations:="] = writer_ast_annotations11545;
                                                                obj11244.mutable = true;
                                                                superDepth = origSuperDepth;
                                                              };
                                                              obj_init_11244.apply(inheritingObject, []);
                                                              return obj11244;
                                                              };
                                                              obj10938.methods["new()object"] = func11243;
                                                            superDepth = origSuperDepth;
                                                          };
                                                          obj_init_10938.apply(obj10938, []);
                                                          var var_varDecNode = obj10938;
                                                          setLineNumber(2030);    // compilenode method
                                                          var func11546 = function(argcv) {    // method varDecNode
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for varDecNode"));
                                                            setModuleName("ast");
                                                            // varDecNode is a simple accessor - elide try ... catch
                                                            setLineNumber(2023);    // compilenode identifier
                                                            return var_varDecNode;
                                                          };
                                                          func11546.paramCounts = [0];
                                                          this.methods["varDecNode"] = func11546;
                                                          func11546.definitionLine = 2030;
                                                          func11546.definitionModule = "ast";
                                                          this.methods["varDecNode"].debug = "def";
                                                          setLineNumber(2131);    // compilenode object
                                                          var obj11547 = Grace_allocObject(GraceObject, "importNode");
                                                          obj11547.definitionModule = "ast";
                                                          obj11547.definitionLine = 2131;
                                                          obj11547.outer = this;
                                                          var reader_ast_outer11548 = function() {
                                                            return this.outer;
                                                          };
                                                          obj11547.methods["outer"] = reader_ast_outer11548;
                                                          var obj_init_11547 = function() {
                                                            var origSuperDepth = superDepth;
                                                            superDepth = obj11547;
                                                            var func11549 = function(argcv) {    // method new(3)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_path__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_name__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_dtype__39__ = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 3)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(3)"));
                                                              setModuleName("ast");
                                                              setLineNumber(2132);    // compilenode object
                                                              var obj11550 = Grace_allocObject(null, "importNode.new");
                                                              obj11550.definitionModule = "ast";
                                                              obj11550.definitionLine = 2132;
                                                              obj11550.outer = this;
                                                              var reader_ast_outer11551 = function() {
                                                                return this.outer;
                                                              };
                                                              obj11550.methods["outer"] = reader_ast_outer11551;
                                                              var obj_init_11550 = function() {
                                                                var origSuperDepth = superDepth;
                                                                superDepth = obj11550;
                                                                var func11552 = function(argcv) {    // method isImport
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isImport"));
                                                                  setModuleName("ast");
                                                                  // isImport is a simple accessor - elide try ... catch
                                                                  setLineNumber(2139);    // compilenode identifier
                                                                  return GraceTrue;
                                                                };
                                                                func11552.paramCounts = [0];
                                                                obj11550.methods["isImport"] = func11552;
                                                                func11552.definitionLine = 2139;
                                                                func11552.definitionModule = "ast";
                                                                var func11553 = function(argcv) {    // method isExternal
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExternal"));
                                                                  setModuleName("ast");
                                                                  // isExternal is a simple accessor - elide try ... catch
                                                                  setLineNumber(2140);    // compilenode identifier
                                                                  return GraceTrue;
                                                                };
                                                                func11553.paramCounts = [0];
                                                                obj11550.methods["isExternal"] = func11553;
                                                                func11553.definitionLine = 2140;
                                                                func11553.definitionModule = "ast";
                                                                var func11554 = function(argcv) {    // method isExecutable
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                                                  setModuleName("ast");
                                                                  // isExecutable is a simple accessor - elide try ... catch
                                                                  setLineNumber(2141);    // compilenode identifier
                                                                  return GraceFalse;
                                                                };
                                                                func11554.paramCounts = [0];
                                                                obj11550.methods["isExecutable"] = func11554;
                                                                func11554.definitionLine = 2141;
                                                                func11554.definitionModule = "ast";
                                                                var func11555 = function(argcv) {    // method name
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for name"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2142);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11556 = callmethodChecked(this, "value", [0]);
                                                                  return call11556;
                                                                };
                                                                func11555.paramCounts = [0];
                                                                obj11550.methods["name"] = func11555;
                                                                func11555.definitionLine = 2142;
                                                                func11555.definitionModule = "ast";
                                                                var func11557 = function(argcv) {    // method nameString
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2143);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11558 = callmethodChecked(this, "value", [0]);
                                                                  var call11559 = callmethodChecked(call11558, "nameString", [0]);
                                                                  return call11559;
                                                                };
                                                                func11557.paramCounts = [0];
                                                                obj11550.methods["nameString"] = func11557;
                                                                func11557.definitionLine = 2143;
                                                                func11557.definitionModule = "ast";
                                                                var func11560 = function(argcv) {    // method isPublic
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
                                                                  setModuleName("ast");
                                                                  var if11561 = GraceDone;
                                                                  setLineNumber(2146);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11563 = callmethodChecked(this, "annotations", [0]);
                                                                  var call11564 = callmethodChecked(call11563, "size", [0]);
                                                                  var opresult11566 = callmethodChecked(call11564, "==", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult11566)) {
                                                                    return GraceFalse;
                                                                  }
                                                                  var if11567 = GraceDone;
                                                                  setLineNumber(2147);    // compilenode string
                                                                  var string11568 = new GraceString("public");
                                                                  var call11569 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11570 = callmethodChecked(call11569, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11571 = callmethodChecked(call11570, "findAnnotation", [2], this, string11568);
                                                                  if (Grace_isTrue(call11571)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  setLineNumber(2148);    // compilenode string
                                                                  var string11572 = new GraceString("readable");
                                                                  var call11573 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11574 = callmethodChecked(call11573, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11575 = callmethodChecked(call11574, "findAnnotation", [2], this, string11572);
                                                                  return call11575;
                                                                };
                                                                func11560.paramCounts = [0];
                                                                obj11550.methods["isPublic"] = func11560;
                                                                func11560.definitionLine = 2144;
                                                                func11560.definitionModule = "ast";
                                                                var func11576 = function(argcv) {    // method moduleName
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moduleName"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2151);    // compilenode string
                                                                  var string11577 = new GraceString("");
                                                                  var var_bnm = string11577;
                                                                  setLineNumber(2152);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11578 = callmethodChecked(this, "path", [0]);
                                                                  var block11579 = new GraceBlock(this, 2152, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block11579.real = function(var_c) {
                                                                    var if11580 = GraceDone;
                                                                    setLineNumber(2153);    // compilenode string
                                                                    var string11581 = new GraceString("/");
                                                                    var opresult11584 = callmethodChecked(var_c, "==", [1], string11581);
                                                                    if (Grace_isTrue(opresult11584)) {
                                                                      setLineNumber(2154);    // compilenode string
                                                                      var string11585 = new GraceString("");
                                                                      var_bnm = string11585;
                                                                      if11580 = GraceDone;
                                                                    } else {
                                                                      setLineNumber(2156);    // compilenode identifier
                                                                      var opresult11588 = callmethodChecked(var_bnm, "++", [1], var_c);
                                                                      var_bnm = opresult11588;
                                                                      if11580 = GraceDone;
                                                                    }
                                                                    return if11580;
                                                                  };
                                                                  var call11589 = callmethodChecked(var_prelude, "for()do", [1, 1], call11578, block11579);
                                                                  setLineNumber(2159);    // compilenode identifier
                                                                  return var_bnm;
                                                                };
                                                                func11576.paramCounts = [0];
                                                                obj11550.methods["moduleName"] = func11576;
                                                                func11576.definitionLine = 2150;
                                                                func11576.definitionModule = "ast";
                                                                var func11590 = function(argcv) {    // method isWritable
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
                                                                  setModuleName("ast");
                                                                  // isWritable is a simple accessor - elide try ... catch
                                                                  setLineNumber(2161);    // compilenode identifier
                                                                  return GraceFalse;
                                                                };
                                                                func11590.paramCounts = [0];
                                                                obj11550.methods["isWritable"] = func11590;
                                                                func11590.definitionLine = 2161;
                                                                func11590.definitionModule = "ast";
                                                                var func11591 = function(argcv) {    // method isReadable
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2162);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11592 = callmethodChecked(this, "isPublic", [0]);
                                                                  return call11592;
                                                                };
                                                                func11591.paramCounts = [0];
                                                                obj11550.methods["isReadable"] = func11591;
                                                                func11591.definitionLine = 2162;
                                                                func11591.definitionModule = "ast";
                                                                var func11593 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2163);    // compilenode identifier
                                                                  var call11594 = callmethodChecked(var_k, "defdec", [0]);
                                                                  return call11594;
                                                                };
                                                                func11593.paramCounts = [1];
                                                                obj11550.methods["declarationKindWithAncestors"] = func11593;
                                                                func11593.definitionLine = 2163;
                                                                func11593.definitionModule = "ast";
                                                                var func11595 = function(argcv) {    // method usesAsType(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_aNode = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2165);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11596 = callmethodChecked(this, "dtype", [0]);
                                                                  var opresult11599 = callmethodChecked(var_aNode, "==", [1], call11596);
                                                                  return opresult11599;
                                                                };
                                                                func11595.paramCounts = [1];
                                                                obj11550.methods["usesAsType"] = func11595;
                                                                func11595.definitionLine = 2164;
                                                                func11595.definitionModule = "ast";
                                                                var func11600 = function(argcv) {    // method accept(1)from(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_visitor = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[1] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(2167);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("ast");
                                                                  var if11601 = GraceDone;
                                                                  setLineNumber(2168);    // compilenode identifier
                                                                  var call11602 = callmethodChecked(var_visitor, "visitImport()up", [1, 1], this, var_as);
                                                                  if (Grace_isTrue(call11602)) {
                                                                    setLineNumber(2169);    // compilenode identifier
                                                                    var call11603 = callmethodChecked(var_as, "extend", [1], this);
                                                                    var var_newChain = call11603;
                                                                    setLineNumber(2170);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11604 = callmethodChecked(this, "annotations", [0]);
                                                                    var block11605 = new GraceBlock(this, 2170, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block11605.real = function(var_ann) {
                                                                      setLineNumber(2171);    // compilenode identifier
                                                                      var call11606 = callmethodChecked(var_ann, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                      return call11606;
                                                                    };
                                                                    var call11607 = callmethodChecked(var_prelude, "for()do", [1, 1], call11604, block11605);
                                                                    setLineNumber(2173);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11608 = callmethodChecked(this, "value", [0]);
                                                                    var call11609 = callmethodChecked(call11608, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                    var if11610 = GraceDone;
                                                                    setLineNumber(2174);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11611 = callmethodChecked(this, "dtype", [0]);
                                                                    var opresult11614 = callmethodChecked(GraceFalse, "\u2260", [1], call11611);
                                                                    if (Grace_isTrue(opresult11614)) {
                                                                      setLineNumber(2175);    // compilenode call
                                                                      onSelf = true;
                                                                      var call11615 = callmethodChecked(this, "dtype", [0]);
                                                                      var call11616 = callmethodChecked(call11615, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                      if11610 = call11616;
                                                                    }
                                                                    if11601 = if11610;
                                                                  }
                                                                  return if11601;
                                                                };
                                                                func11600.paramTypes = [];
                                                                func11600.paramTypes.push([]);
                                                                func11600.paramTypes.push([]);
                                                                func11600.paramCounts = [1, 1];
                                                                obj11550.methods["accept()from"] = func11600;
                                                                func11600.definitionLine = 2167;
                                                                func11600.definitionModule = "ast";
                                                                var func11617 = function(argcv) {    // method map(1)ancestors(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_blk = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[1] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2180);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11618 = callmethodChecked(this, "shallowCopy", [0]);
                                                                  var var_n = call11618;
                                                                  setLineNumber(2181);    // compilenode identifier
                                                                  var call11619 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                  var var_newChain = call11619;
                                                                  setLineNumber(2182);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11620 = callmethodChecked(this, "value", [0]);
                                                                  var call11621 = callmethodChecked(call11620, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                                  var call11622 = callmethodChecked(var_n, "value:=", [1], call11621);
                                                                  setLineNumber(2183);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11623 = callmethodChecked(this, "dtype", [0]);
                                                                  var call11624 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11625 = callmethodChecked(call11624, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11626 = callmethodChecked(call11625, "maybeMap()ancestors", [2, 1], call11623, var_blk, var_newChain);
                                                                  var call11627 = callmethodChecked(var_n, "dtype:=", [1], call11626);
                                                                  setLineNumber(2184);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11628 = callmethodChecked(this, "annotations", [0]);
                                                                  var call11629 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11630 = callmethodChecked(call11629, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11631 = callmethodChecked(call11630, "listMap()ancestors", [2, 1], call11628, var_blk, var_newChain);
                                                                  var call11632 = callmethodChecked(var_n, "annotations:=", [1], call11631);
                                                                  setLineNumber(2185);    // compilenode identifier
                                                                  var call11633 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                  return call11633;
                                                                };
                                                                func11617.paramCounts = [1, 1];
                                                                obj11550.methods["map()ancestors"] = func11617;
                                                                func11617.definitionLine = 2179;
                                                                func11617.definitionModule = "ast";
                                                                var func11634 = function(argcv) {    // method pretty(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_depth = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2188);    // compilenode string
                                                                  var string11635 = new GraceString("");
                                                                  var var_spc = string11635;
                                                                  setLineNumber(2189);    // compilenode num
                                                                  var opresult11638 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                  var block11639 = new GraceBlock(this, 2189, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block11639.real = function(var_i) {
                                                                    setLineNumber(2190);    // compilenode string
                                                                    var string11640 = new GraceString("  ");
                                                                    var opresult11643 = callmethodChecked(var_spc, "++", [1], string11640);
                                                                    var_spc = opresult11643;
                                                                    return GraceDone;
                                                                  };
                                                                  var call11644 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult11638, block11639);
                                                                  setLineNumber(2192);    // compilenode string
                                                                  var string11645 = new GraceString("\n");
                                                                  var call11647 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                  var opresult11649 = callmethodChecked(call11647, "++", [1], string11645);
                                                                  var var_s = opresult11649;
                                                                  setLineNumber(2193);    // compilenode string
                                                                  var string11650 = new GraceString("\n");
                                                                  onSelf = true;
                                                                  var call11652 = callmethodChecked(this, "path", [0]);
                                                                  var string11654 = new GraceString("Path: ");
                                                                  var string11657 = new GraceString("");
                                                                  var opresult11659 = callmethodChecked(string11657, "++", [1], var_spc);
                                                                  var opresult11661 = callmethodChecked(opresult11659, "++", [1], string11654);
                                                                  var opresult11663 = callmethodChecked(opresult11661, "++", [1], call11652);
                                                                  var opresult11665 = callmethodChecked(opresult11663, "++", [1], string11650);
                                                                  var opresult11668 = callmethodChecked(var_s, "++", [1], opresult11665);
                                                                  var_s = opresult11668;
                                                                  setLineNumber(2194);    // compilenode string
                                                                  var string11669 = new GraceString("\n");
                                                                  onSelf = true;
                                                                  var call11671 = callmethodChecked(this, "value", [0]);
                                                                  var string11673 = new GraceString("Identifier: ");
                                                                  var string11676 = new GraceString("");
                                                                  var opresult11678 = callmethodChecked(string11676, "++", [1], var_spc);
                                                                  var opresult11680 = callmethodChecked(opresult11678, "++", [1], string11673);
                                                                  var opresult11682 = callmethodChecked(opresult11680, "++", [1], call11671);
                                                                  var opresult11684 = callmethodChecked(opresult11682, "++", [1], string11669);
                                                                  var opresult11687 = callmethodChecked(var_s, "++", [1], opresult11684);
                                                                  var_s = opresult11687;
                                                                  var if11688 = GraceDone;
                                                                  setLineNumber(2195);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11690 = callmethodChecked(this, "annotations", [0]);
                                                                  var call11691 = callmethodChecked(call11690, "size", [0]);
                                                                  var opresult11693 = callmethodChecked(call11691, ">", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult11693)) {
                                                                    setLineNumber(2196);    // compilenode string
                                                                    var string11694 = new GraceString("\n");
                                                                    onSelf = true;
                                                                    var call11696 = callmethodChecked(this, "annotations", [0]);
                                                                    var string11698 = new GraceString("Anotations: ");
                                                                    var string11701 = new GraceString("");
                                                                    var opresult11703 = callmethodChecked(string11701, "++", [1], var_spc);
                                                                    var opresult11705 = callmethodChecked(opresult11703, "++", [1], string11698);
                                                                    var opresult11707 = callmethodChecked(opresult11705, "++", [1], call11696);
                                                                    var opresult11709 = callmethodChecked(opresult11707, "++", [1], string11694);
                                                                    var opresult11712 = callmethodChecked(var_s, "++", [1], opresult11709);
                                                                    var_s = opresult11712;
                                                                    if11688 = GraceDone;
                                                                  }
                                                                  setLineNumber(2198);    // compilenode identifier
                                                                  return var_s;
                                                                };
                                                                func11634.paramCounts = [1];
                                                                obj11550.methods["pretty"] = func11634;
                                                                func11634.definitionLine = 2187;
                                                                func11634.definitionModule = "ast";
                                                                var func11713 = function(argcv) {    // method toGrace(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_depth = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(2200);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("ast");
                                                                  setLineNumber(2201);    // compilenode string
                                                                  var string11714 = new GraceString("");
                                                                  onSelf = true;
                                                                  var call11716 = callmethodChecked(this, "nameString", [0]);
                                                                  var string11718 = new GraceString("\" as ");
                                                                  onSelf = true;
                                                                  var call11720 = callmethodChecked(this, "path", [0]);
                                                                  var string11722 = new GraceString("import \"");
                                                                  var opresult11724 = callmethodChecked(string11722, "++", [1], call11720);
                                                                  var opresult11726 = callmethodChecked(opresult11724, "++", [1], string11718);
                                                                  var opresult11728 = callmethodChecked(opresult11726, "++", [1], call11716);
                                                                  var opresult11730 = callmethodChecked(opresult11728, "++", [1], string11714);
                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult11730)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method toGrace(1) does not have " + 
                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                  return opresult11730;
                                                                };
                                                                func11713.paramTypes = [];
                                                                func11713.paramTypes.push([type_Number, "depth"]);
                                                                func11713.paramCounts = [1];
                                                                obj11550.methods["toGrace"] = func11713;
                                                                func11713.definitionLine = 2200;
                                                                func11713.definitionModule = "ast";
                                                                var func11731 = function(argcv) {    // method shallowCopy
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2204);    // compilenode call
                                                                  onSelf = true;
                                                                  var call11732 = callmethodChecked(this, "path", [0]);
                                                                  var call11733 = callmethodChecked(var_importNode, "new", [3], call11732, var_nullNode, GraceFalse);
                                                                  var call11734 = callmethodChecked(call11733, "shallowCopyFieldsFrom", [1], this);
                                                                  return call11734;
                                                                };
                                                                func11731.paramCounts = [0];
                                                                obj11550.methods["shallowCopy"] = func11731;
                                                                func11731.definitionLine = 2203;
                                                                func11731.definitionModule = "ast";
                                                                setLineNumber(2133);    // compilenode call
                                                                var call11735 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call11736 = callmethodChecked(call11735, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call11737 = callmethodChecked(call11736, "baseNode()object", [0, 1], this);
                                                                obj11550.superobj = call11737;
                                                                if (call11737.data) obj11550.data = call11737.data;
                                                                if (call11737.hasOwnProperty('_value'))
                                                                    obj11550._value = call11737._value;
                                                                setLineNumber(2134);    // compilenode string
                                                                var string11738 = new GraceString("import");
                                                                obj11550.data["kind"] = string11738;
                                                                var reader_ast_kind11739 = function() {
                                                                  return this.data["kind"];
                                                                };
                                                                reader_ast_kind11739.def = true;
                                                                obj11550.methods["kind"] = reader_ast_kind11739;
                                                                setLineNumber(2135);    // compilenode identifier
                                                                obj11550.data["value"] = var_name__39__;
                                                                var reader_ast_value11740 = function() {
                                                                  return this.data["value"];
                                                                };
                                                                obj11550.methods["value"] = reader_ast_value11740;
                                                                obj11550.data["value"] = var_name__39__;
                                                                var writer_ast_value11740 = function(argcv, o) {
                                                                  this.data["value"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj11550.methods["value:="] = writer_ast_value11740;
                                                                obj11550.mutable = true;
                                                                setLineNumber(2136);    // compilenode identifier
                                                                obj11550.data["path"] = var_path__39__;
                                                                var reader_ast_path11741 = function() {
                                                                  return this.data["path"];
                                                                };
                                                                obj11550.methods["path"] = reader_ast_path11741;
                                                                obj11550.data["path"] = var_path__39__;
                                                                var writer_ast_path11741 = function(argcv, o) {
                                                                  this.data["path"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj11550.methods["path:="] = writer_ast_path11741;
                                                                obj11550.mutable = true;
                                                                setLineNumber(2137);    // compilenode array
                                                                var array11742 = new PrimitiveGraceList([]);
                                                                obj11550.data["annotations"] = array11742;
                                                                var reader_ast_annotations11743 = function() {
                                                                  return this.data["annotations"];
                                                                };
                                                                obj11550.methods["annotations"] = reader_ast_annotations11743;
                                                                obj11550.data["annotations"] = array11742;
                                                                var writer_ast_annotations11743 = function(argcv, o) {
                                                                  this.data["annotations"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj11550.methods["annotations:="] = writer_ast_annotations11743;
                                                                obj11550.mutable = true;
                                                                setLineNumber(2138);    // compilenode identifier
                                                                obj11550.data["dtype"] = var_dtype__39__;
                                                                var reader_ast_dtype11744 = function() {
                                                                  return this.data["dtype"];
                                                                };
                                                                obj11550.methods["dtype"] = reader_ast_dtype11744;
                                                                obj11550.data["dtype"] = var_dtype__39__;
                                                                var writer_ast_dtype11744 = function(argcv, o) {
                                                                  this.data["dtype"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj11550.methods["dtype:="] = writer_ast_dtype11744;
                                                                obj11550.mutable = true;
                                                                superDepth = origSuperDepth;
                                                              };
                                                              obj_init_11550.apply(obj11550, []);
                                                              return obj11550;
                                                            };
                                                            func11549.paramCounts = [3];
                                                            obj11547.methods["new"] = func11549;
                                                            func11549.definitionLine = 2132;
                                                            func11549.definitionModule = "ast";
                                                              var func11745 = function(argcv) {    // method new(3     )()object
                                                                var curarg = 1;
                                                                var var_path__39__ = arguments[curarg];
                                                                curarg++;
                                                                var var_name__39__ = arguments[curarg];
                                                                curarg++;
                                                                var var_dtype__39__ = arguments[curarg];
                                                                curarg++;
                                                                var inheritingObject = arguments[curarg++];
                                                                // Start argument processing
                                                                curarg = 1;
                                                                curarg++;
                                                                curarg++;
                                                                curarg++;
                                                                // End argument processing
                                                                setModuleName("ast");
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var obj11746 = Grace_allocObject(null, "new");
                                                                obj11746.definitionModule = "ast";
                                                                obj11746.definitionLine = 2132;
                                                                var inho11746 = inheritingObject;
                                                                while (inho11746.superobj) inho11746 = inho11746.superobj;
                                                                inho11746.superobj = obj11746;
                                                                obj11746.data = inheritingObject.data;
                                                                if (inheritingObject.hasOwnProperty('_value'))
                                                                  obj11746._value = inheritingObject._value;
                                                                obj11746.outer = this;
                                                                var reader_ast_outer11747 = function() {
                                                                  return this.outer;
                                                                };
                                                                obj11746.methods["outer"] = reader_ast_outer11747;
                                                                var obj_init_11746 = function() {
                                                                  var origSuperDepth = superDepth;
                                                                  superDepth = obj11746;
                                                                  var func11748 = function(argcv) {    // method isImport
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isImport"));
                                                                    setModuleName("ast");
                                                                    // isImport is a simple accessor - elide try ... catch
                                                                    setLineNumber(2139);    // compilenode identifier
                                                                    return GraceTrue;
                                                                  };
                                                                  func11748.paramCounts = [0];
                                                                  obj11746.methods["isImport"] = func11748;
                                                                  func11748.definitionLine = 2139;
                                                                  func11748.definitionModule = "ast";
                                                                  var func11749 = function(argcv) {    // method isExternal
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExternal"));
                                                                    setModuleName("ast");
                                                                    // isExternal is a simple accessor - elide try ... catch
                                                                    setLineNumber(2140);    // compilenode identifier
                                                                    return GraceTrue;
                                                                  };
                                                                  func11749.paramCounts = [0];
                                                                  obj11746.methods["isExternal"] = func11749;
                                                                  func11749.definitionLine = 2140;
                                                                  func11749.definitionModule = "ast";
                                                                  var func11750 = function(argcv) {    // method isExecutable
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                                                    setModuleName("ast");
                                                                    // isExecutable is a simple accessor - elide try ... catch
                                                                    setLineNumber(2141);    // compilenode identifier
                                                                    return GraceFalse;
                                                                  };
                                                                  func11750.paramCounts = [0];
                                                                  obj11746.methods["isExecutable"] = func11750;
                                                                  func11750.definitionLine = 2141;
                                                                  func11750.definitionModule = "ast";
                                                                  var func11751 = function(argcv) {    // method name
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for name"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2142);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11752 = callmethodChecked(this, "value", [0]);
                                                                    return call11752;
                                                                  };
                                                                  func11751.paramCounts = [0];
                                                                  obj11746.methods["name"] = func11751;
                                                                  func11751.definitionLine = 2142;
                                                                  func11751.definitionModule = "ast";
                                                                  var func11753 = function(argcv) {    // method nameString
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2143);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11754 = callmethodChecked(this, "value", [0]);
                                                                    var call11755 = callmethodChecked(call11754, "nameString", [0]);
                                                                    return call11755;
                                                                  };
                                                                  func11753.paramCounts = [0];
                                                                  obj11746.methods["nameString"] = func11753;
                                                                  func11753.definitionLine = 2143;
                                                                  func11753.definitionModule = "ast";
                                                                  var func11756 = function(argcv) {    // method isPublic
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isPublic"));
                                                                    setModuleName("ast");
                                                                    var if11757 = GraceDone;
                                                                    setLineNumber(2146);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11759 = callmethodChecked(this, "annotations", [0]);
                                                                    var call11760 = callmethodChecked(call11759, "size", [0]);
                                                                    var opresult11762 = callmethodChecked(call11760, "==", [1], new GraceNum(0));
                                                                    if (Grace_isTrue(opresult11762)) {
                                                                      return GraceFalse;
                                                                    }
                                                                    var if11763 = GraceDone;
                                                                    setLineNumber(2147);    // compilenode string
                                                                    var string11764 = new GraceString("public");
                                                                    var call11765 = callmethodChecked(superDepth, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call11766 = callmethodChecked(call11765, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call11767 = callmethodChecked(call11766, "findAnnotation", [2], this, string11764);
                                                                    if (Grace_isTrue(call11767)) {
                                                                      return GraceTrue;
                                                                    }
                                                                    setLineNumber(2148);    // compilenode string
                                                                    var string11768 = new GraceString("readable");
                                                                    var call11769 = callmethodChecked(superDepth, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call11770 = callmethodChecked(call11769, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call11771 = callmethodChecked(call11770, "findAnnotation", [2], this, string11768);
                                                                    return call11771;
                                                                  };
                                                                  func11756.paramCounts = [0];
                                                                  obj11746.methods["isPublic"] = func11756;
                                                                  func11756.definitionLine = 2144;
                                                                  func11756.definitionModule = "ast";
                                                                  var func11772 = function(argcv) {    // method moduleName
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moduleName"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2151);    // compilenode string
                                                                    var string11773 = new GraceString("");
                                                                    var var_bnm = string11773;
                                                                    setLineNumber(2152);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11774 = callmethodChecked(this, "path", [0]);
                                                                    var block11775 = new GraceBlock(this, 2152, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block11775.real = function(var_c) {
                                                                      var if11776 = GraceDone;
                                                                      setLineNumber(2153);    // compilenode string
                                                                      var string11777 = new GraceString("/");
                                                                      var opresult11780 = callmethodChecked(var_c, "==", [1], string11777);
                                                                      if (Grace_isTrue(opresult11780)) {
                                                                        setLineNumber(2154);    // compilenode string
                                                                        var string11781 = new GraceString("");
                                                                        var_bnm = string11781;
                                                                        if11776 = GraceDone;
                                                                      } else {
                                                                        setLineNumber(2156);    // compilenode identifier
                                                                        var opresult11784 = callmethodChecked(var_bnm, "++", [1], var_c);
                                                                        var_bnm = opresult11784;
                                                                        if11776 = GraceDone;
                                                                      }
                                                                      return if11776;
                                                                    };
                                                                    var call11785 = callmethodChecked(var_prelude, "for()do", [1, 1], call11774, block11775);
                                                                    setLineNumber(2159);    // compilenode identifier
                                                                    return var_bnm;
                                                                  };
                                                                  func11772.paramCounts = [0];
                                                                  obj11746.methods["moduleName"] = func11772;
                                                                  func11772.definitionLine = 2150;
                                                                  func11772.definitionModule = "ast";
                                                                  var func11786 = function(argcv) {    // method isWritable
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isWritable"));
                                                                    setModuleName("ast");
                                                                    // isWritable is a simple accessor - elide try ... catch
                                                                    setLineNumber(2161);    // compilenode identifier
                                                                    return GraceFalse;
                                                                  };
                                                                  func11786.paramCounts = [0];
                                                                  obj11746.methods["isWritable"] = func11786;
                                                                  func11786.definitionLine = 2161;
                                                                  func11786.definitionModule = "ast";
                                                                  var func11787 = function(argcv) {    // method isReadable
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isReadable"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2162);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11788 = callmethodChecked(this, "isPublic", [0]);
                                                                    return call11788;
                                                                  };
                                                                  func11787.paramCounts = [0];
                                                                  obj11746.methods["isReadable"] = func11787;
                                                                  func11787.definitionLine = 2162;
                                                                  func11787.definitionModule = "ast";
                                                                  var func11789 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_as = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2163);    // compilenode identifier
                                                                    var call11790 = callmethodChecked(var_k, "defdec", [0]);
                                                                    return call11790;
                                                                  };
                                                                  func11789.paramCounts = [1];
                                                                  obj11746.methods["declarationKindWithAncestors"] = func11789;
                                                                  func11789.definitionLine = 2163;
                                                                  func11789.definitionModule = "ast";
                                                                  var func11791 = function(argcv) {    // method usesAsType(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_aNode = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for usesAsType(1)"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2165);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11792 = callmethodChecked(this, "dtype", [0]);
                                                                    var opresult11795 = callmethodChecked(var_aNode, "==", [1], call11792);
                                                                    return opresult11795;
                                                                  };
                                                                  func11791.paramCounts = [1];
                                                                  obj11746.methods["usesAsType"] = func11791;
                                                                  func11791.definitionLine = 2164;
                                                                  func11791.definitionModule = "ast";
                                                                  var func11796 = function(argcv) {    // method accept(1)from(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_visitor = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                    var var_as = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[1] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(2167);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("ast");
                                                                    var if11797 = GraceDone;
                                                                    setLineNumber(2168);    // compilenode identifier
                                                                    var call11798 = callmethodChecked(var_visitor, "visitImport()up", [1, 1], this, var_as);
                                                                    if (Grace_isTrue(call11798)) {
                                                                      setLineNumber(2169);    // compilenode identifier
                                                                      var call11799 = callmethodChecked(var_as, "extend", [1], this);
                                                                      var var_newChain = call11799;
                                                                      setLineNumber(2170);    // compilenode call
                                                                      onSelf = true;
                                                                      var call11800 = callmethodChecked(this, "annotations", [0]);
                                                                      var block11801 = new GraceBlock(this, 2170, 1);
                                                                      setLineNumber(1);    // compilenode identifier
                                                                      block11801.real = function(var_ann) {
                                                                        setLineNumber(2171);    // compilenode identifier
                                                                        var call11802 = callmethodChecked(var_ann, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                        return call11802;
                                                                      };
                                                                      var call11803 = callmethodChecked(var_prelude, "for()do", [1, 1], call11800, block11801);
                                                                      setLineNumber(2173);    // compilenode call
                                                                      onSelf = true;
                                                                      var call11804 = callmethodChecked(this, "value", [0]);
                                                                      var call11805 = callmethodChecked(call11804, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                      var if11806 = GraceDone;
                                                                      setLineNumber(2174);    // compilenode call
                                                                      onSelf = true;
                                                                      var call11807 = callmethodChecked(this, "dtype", [0]);
                                                                      var opresult11810 = callmethodChecked(GraceFalse, "\u2260", [1], call11807);
                                                                      if (Grace_isTrue(opresult11810)) {
                                                                        setLineNumber(2175);    // compilenode call
                                                                        onSelf = true;
                                                                        var call11811 = callmethodChecked(this, "dtype", [0]);
                                                                        var call11812 = callmethodChecked(call11811, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                        if11806 = call11812;
                                                                      }
                                                                      if11797 = if11806;
                                                                    }
                                                                    return if11797;
                                                                  };
                                                                  func11796.paramTypes = [];
                                                                  func11796.paramTypes.push([]);
                                                                  func11796.paramTypes.push([]);
                                                                  func11796.paramCounts = [1, 1];
                                                                  obj11746.methods["accept()from"] = func11796;
                                                                  func11796.definitionLine = 2167;
                                                                  func11796.definitionModule = "ast";
                                                                  var func11813 = function(argcv) {    // method map(1)ancestors(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_blk = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                    var var_as = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[1] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2180);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11814 = callmethodChecked(this, "shallowCopy", [0]);
                                                                    var var_n = call11814;
                                                                    setLineNumber(2181);    // compilenode identifier
                                                                    var call11815 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                    var var_newChain = call11815;
                                                                    setLineNumber(2182);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11816 = callmethodChecked(this, "value", [0]);
                                                                    var call11817 = callmethodChecked(call11816, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                                    var call11818 = callmethodChecked(var_n, "value:=", [1], call11817);
                                                                    setLineNumber(2183);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11819 = callmethodChecked(this, "dtype", [0]);
                                                                    var call11820 = callmethodChecked(superDepth, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call11821 = callmethodChecked(call11820, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call11822 = callmethodChecked(call11821, "maybeMap()ancestors", [2, 1], call11819, var_blk, var_newChain);
                                                                    var call11823 = callmethodChecked(var_n, "dtype:=", [1], call11822);
                                                                    setLineNumber(2184);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11824 = callmethodChecked(this, "annotations", [0]);
                                                                    var call11825 = callmethodChecked(superDepth, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call11826 = callmethodChecked(call11825, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call11827 = callmethodChecked(call11826, "listMap()ancestors", [2, 1], call11824, var_blk, var_newChain);
                                                                    var call11828 = callmethodChecked(var_n, "annotations:=", [1], call11827);
                                                                    setLineNumber(2185);    // compilenode identifier
                                                                    var call11829 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                    return call11829;
                                                                  };
                                                                  func11813.paramCounts = [1, 1];
                                                                  obj11746.methods["map()ancestors"] = func11813;
                                                                  func11813.definitionLine = 2179;
                                                                  func11813.definitionModule = "ast";
                                                                  var func11830 = function(argcv) {    // method pretty(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_depth = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2188);    // compilenode string
                                                                    var string11831 = new GraceString("");
                                                                    var var_spc = string11831;
                                                                    setLineNumber(2189);    // compilenode num
                                                                    var opresult11834 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                    var block11835 = new GraceBlock(this, 2189, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block11835.real = function(var_i) {
                                                                      setLineNumber(2190);    // compilenode string
                                                                      var string11836 = new GraceString("  ");
                                                                      var opresult11839 = callmethodChecked(var_spc, "++", [1], string11836);
                                                                      var_spc = opresult11839;
                                                                      return GraceDone;
                                                                    };
                                                                    var call11840 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult11834, block11835);
                                                                    setLineNumber(2192);    // compilenode string
                                                                    var string11841 = new GraceString("\n");
                                                                    var call11843 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                    var opresult11845 = callmethodChecked(call11843, "++", [1], string11841);
                                                                    var var_s = opresult11845;
                                                                    setLineNumber(2193);    // compilenode string
                                                                    var string11846 = new GraceString("\n");
                                                                    onSelf = true;
                                                                    var call11848 = callmethodChecked(this, "path", [0]);
                                                                    var string11850 = new GraceString("Path: ");
                                                                    var string11853 = new GraceString("");
                                                                    var opresult11855 = callmethodChecked(string11853, "++", [1], var_spc);
                                                                    var opresult11857 = callmethodChecked(opresult11855, "++", [1], string11850);
                                                                    var opresult11859 = callmethodChecked(opresult11857, "++", [1], call11848);
                                                                    var opresult11861 = callmethodChecked(opresult11859, "++", [1], string11846);
                                                                    var opresult11864 = callmethodChecked(var_s, "++", [1], opresult11861);
                                                                    var_s = opresult11864;
                                                                    setLineNumber(2194);    // compilenode string
                                                                    var string11865 = new GraceString("\n");
                                                                    onSelf = true;
                                                                    var call11867 = callmethodChecked(this, "value", [0]);
                                                                    var string11869 = new GraceString("Identifier: ");
                                                                    var string11872 = new GraceString("");
                                                                    var opresult11874 = callmethodChecked(string11872, "++", [1], var_spc);
                                                                    var opresult11876 = callmethodChecked(opresult11874, "++", [1], string11869);
                                                                    var opresult11878 = callmethodChecked(opresult11876, "++", [1], call11867);
                                                                    var opresult11880 = callmethodChecked(opresult11878, "++", [1], string11865);
                                                                    var opresult11883 = callmethodChecked(var_s, "++", [1], opresult11880);
                                                                    var_s = opresult11883;
                                                                    var if11884 = GraceDone;
                                                                    setLineNumber(2195);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11886 = callmethodChecked(this, "annotations", [0]);
                                                                    var call11887 = callmethodChecked(call11886, "size", [0]);
                                                                    var opresult11889 = callmethodChecked(call11887, ">", [1], new GraceNum(0));
                                                                    if (Grace_isTrue(opresult11889)) {
                                                                      setLineNumber(2196);    // compilenode string
                                                                      var string11890 = new GraceString("\n");
                                                                      onSelf = true;
                                                                      var call11892 = callmethodChecked(this, "annotations", [0]);
                                                                      var string11894 = new GraceString("Anotations: ");
                                                                      var string11897 = new GraceString("");
                                                                      var opresult11899 = callmethodChecked(string11897, "++", [1], var_spc);
                                                                      var opresult11901 = callmethodChecked(opresult11899, "++", [1], string11894);
                                                                      var opresult11903 = callmethodChecked(opresult11901, "++", [1], call11892);
                                                                      var opresult11905 = callmethodChecked(opresult11903, "++", [1], string11890);
                                                                      var opresult11908 = callmethodChecked(var_s, "++", [1], opresult11905);
                                                                      var_s = opresult11908;
                                                                      if11884 = GraceDone;
                                                                    }
                                                                    setLineNumber(2198);    // compilenode identifier
                                                                    return var_s;
                                                                  };
                                                                  func11830.paramCounts = [1];
                                                                  obj11746.methods["pretty"] = func11830;
                                                                  func11830.definitionLine = 2187;
                                                                  func11830.definitionModule = "ast";
                                                                  var func11909 = function(argcv) {    // method toGrace(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_depth = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(2200);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("ast");
                                                                    setLineNumber(2201);    // compilenode string
                                                                    var string11910 = new GraceString("");
                                                                    onSelf = true;
                                                                    var call11912 = callmethodChecked(this, "nameString", [0]);
                                                                    var string11914 = new GraceString("\" as ");
                                                                    onSelf = true;
                                                                    var call11916 = callmethodChecked(this, "path", [0]);
                                                                    var string11918 = new GraceString("import \"");
                                                                    var opresult11920 = callmethodChecked(string11918, "++", [1], call11916);
                                                                    var opresult11922 = callmethodChecked(opresult11920, "++", [1], string11914);
                                                                    var opresult11924 = callmethodChecked(opresult11922, "++", [1], call11912);
                                                                    var opresult11926 = callmethodChecked(opresult11924, "++", [1], string11910);
                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult11926)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method toGrace(1) does not have " + 
                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                    return opresult11926;
                                                                  };
                                                                  func11909.paramTypes = [];
                                                                  func11909.paramTypes.push([type_Number, "depth"]);
                                                                  func11909.paramCounts = [1];
                                                                  obj11746.methods["toGrace"] = func11909;
                                                                  func11909.definitionLine = 2200;
                                                                  func11909.definitionModule = "ast";
                                                                  var func11927 = function(argcv) {    // method shallowCopy
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2204);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11928 = callmethodChecked(this, "path", [0]);
                                                                    var call11929 = callmethodChecked(var_importNode, "new", [3], call11928, var_nullNode, GraceFalse);
                                                                    var call11930 = callmethodChecked(call11929, "shallowCopyFieldsFrom", [1], this);
                                                                    return call11930;
                                                                  };
                                                                  func11927.paramCounts = [0];
                                                                  obj11746.methods["shallowCopy"] = func11927;
                                                                  func11927.definitionLine = 2203;
                                                                  func11927.definitionModule = "ast";
                                                                  setLineNumber(2133);    // compilenode call
                                                                  var call11931 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11932 = callmethodChecked(call11931, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call11933 = callmethodChecked(call11932, "baseNode()object", [0, 1], this);
                                                                  obj11746.superobj = call11933;
                                                                  if (call11933.data) obj11746.data = call11933.data;
                                                                  if (call11933.hasOwnProperty('_value'))
                                                                      obj11746._value = call11933._value;
                                                                  setLineNumber(2134);    // compilenode string
                                                                  var string11934 = new GraceString("import");
                                                                  obj11746.data["kind"] = string11934;
                                                                  var reader_ast_kind11935 = function() {
                                                                    return this.data["kind"];
                                                                  };
                                                                  reader_ast_kind11935.def = true;
                                                                  obj11746.methods["kind"] = reader_ast_kind11935;
                                                                  setLineNumber(2135);    // compilenode identifier
                                                                  obj11746.data["value"] = var_name__39__;
                                                                  var reader_ast_value11936 = function() {
                                                                    return this.data["value"];
                                                                  };
                                                                  obj11746.methods["value"] = reader_ast_value11936;
                                                                  obj11746.data["value"] = var_name__39__;
                                                                  var writer_ast_value11936 = function(argcv, o) {
                                                                    this.data["value"] = o;
                                                                    return GraceDone;
                                                                  };
                                                                  obj11746.methods["value:="] = writer_ast_value11936;
                                                                  obj11746.mutable = true;
                                                                  setLineNumber(2136);    // compilenode identifier
                                                                  obj11746.data["path"] = var_path__39__;
                                                                  var reader_ast_path11937 = function() {
                                                                    return this.data["path"];
                                                                  };
                                                                  obj11746.methods["path"] = reader_ast_path11937;
                                                                  obj11746.data["path"] = var_path__39__;
                                                                  var writer_ast_path11937 = function(argcv, o) {
                                                                    this.data["path"] = o;
                                                                    return GraceDone;
                                                                  };
                                                                  obj11746.methods["path:="] = writer_ast_path11937;
                                                                  obj11746.mutable = true;
                                                                  setLineNumber(2137);    // compilenode array
                                                                  var array11938 = new PrimitiveGraceList([]);
                                                                  obj11746.data["annotations"] = array11938;
                                                                  var reader_ast_annotations11939 = function() {
                                                                    return this.data["annotations"];
                                                                  };
                                                                  obj11746.methods["annotations"] = reader_ast_annotations11939;
                                                                  obj11746.data["annotations"] = array11938;
                                                                  var writer_ast_annotations11939 = function(argcv, o) {
                                                                    this.data["annotations"] = o;
                                                                    return GraceDone;
                                                                  };
                                                                  obj11746.methods["annotations:="] = writer_ast_annotations11939;
                                                                  obj11746.mutable = true;
                                                                  setLineNumber(2138);    // compilenode identifier
                                                                  obj11746.data["dtype"] = var_dtype__39__;
                                                                  var reader_ast_dtype11940 = function() {
                                                                    return this.data["dtype"];
                                                                  };
                                                                  obj11746.methods["dtype"] = reader_ast_dtype11940;
                                                                  obj11746.data["dtype"] = var_dtype__39__;
                                                                  var writer_ast_dtype11940 = function(argcv, o) {
                                                                    this.data["dtype"] = o;
                                                                    return GraceDone;
                                                                  };
                                                                  obj11746.methods["dtype:="] = writer_ast_dtype11940;
                                                                  obj11746.mutable = true;
                                                                  superDepth = origSuperDepth;
                                                                };
                                                                obj_init_11746.apply(inheritingObject, []);
                                                                return obj11746;
                                                                };
                                                                obj11547.methods["new()object"] = func11745;
                                                              superDepth = origSuperDepth;
                                                            };
                                                            obj_init_11547.apply(obj11547, []);
                                                            var var_importNode = obj11547;
                                                            setLineNumber(2133);    // compilenode method
                                                            var func11941 = function(argcv) {    // method importNode
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for importNode"));
                                                              setModuleName("ast");
                                                              // importNode is a simple accessor - elide try ... catch
                                                              setLineNumber(2131);    // compilenode identifier
                                                              return var_importNode;
                                                            };
                                                            func11941.paramCounts = [0];
                                                            this.methods["importNode"] = func11941;
                                                            func11941.definitionLine = 2133;
                                                            func11941.definitionModule = "ast";
                                                            this.methods["importNode"].debug = "def";
                                                            setLineNumber(2208);    // compilenode object
                                                            var obj11942 = Grace_allocObject(GraceObject, "dialectNode");
                                                            obj11942.definitionModule = "ast";
                                                            obj11942.definitionLine = 2208;
                                                            obj11942.outer = this;
                                                            var reader_ast_outer11943 = function() {
                                                              return this.outer;
                                                            };
                                                            obj11942.methods["outer"] = reader_ast_outer11943;
                                                            var obj_init_11942 = function() {
                                                              var origSuperDepth = superDepth;
                                                              superDepth = obj11942;
                                                              var func11944 = function(argcv) {    // method new(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_path__39__ = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(1)"));
                                                                setModuleName("ast");
                                                                setLineNumber(2209);    // compilenode object
                                                                var obj11945 = Grace_allocObject(null, "dialectNode.new");
                                                                obj11945.definitionModule = "ast";
                                                                obj11945.definitionLine = 2209;
                                                                obj11945.outer = this;
                                                                var reader_ast_outer11946 = function() {
                                                                  return this.outer;
                                                                };
                                                                obj11945.methods["outer"] = reader_ast_outer11946;
                                                                var obj_init_11945 = function() {
                                                                  var origSuperDepth = superDepth;
                                                                  superDepth = obj11945;
                                                                  var func11947 = function(argcv) {    // method isDialect
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isDialect"));
                                                                    setModuleName("ast");
                                                                    // isDialect is a simple accessor - elide try ... catch
                                                                    setLineNumber(2214);    // compilenode identifier
                                                                    return GraceTrue;
                                                                  };
                                                                  func11947.paramCounts = [0];
                                                                  obj11945.methods["isDialect"] = func11947;
                                                                  func11947.definitionLine = 2214;
                                                                  func11947.definitionModule = "ast";
                                                                  var func11948 = function(argcv) {    // method isExternal
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExternal"));
                                                                    setModuleName("ast");
                                                                    // isExternal is a simple accessor - elide try ... catch
                                                                    setLineNumber(2215);    // compilenode identifier
                                                                    return GraceTrue;
                                                                  };
                                                                  func11948.paramCounts = [0];
                                                                  obj11945.methods["isExternal"] = func11948;
                                                                  func11948.definitionLine = 2215;
                                                                  func11948.definitionModule = "ast";
                                                                  var func11949 = function(argcv) {    // method isExecutable
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                                                    setModuleName("ast");
                                                                    // isExecutable is a simple accessor - elide try ... catch
                                                                    setLineNumber(2216);    // compilenode identifier
                                                                    return GraceFalse;
                                                                  };
                                                                  func11949.paramCounts = [0];
                                                                  obj11945.methods["isExecutable"] = func11949;
                                                                  func11949.definitionLine = 2216;
                                                                  func11949.definitionModule = "ast";
                                                                  var func11950 = function(argcv) {    // method moduleName
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moduleName"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2218);    // compilenode string
                                                                    var string11951 = new GraceString("");
                                                                    var var_bnm = string11951;
                                                                    setLineNumber(2219);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11952 = callmethodChecked(this, "value", [0]);
                                                                    var block11953 = new GraceBlock(this, 2219, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block11953.real = function(var_c) {
                                                                      var if11954 = GraceDone;
                                                                      setLineNumber(2220);    // compilenode string
                                                                      var string11955 = new GraceString("/");
                                                                      var opresult11958 = callmethodChecked(var_c, "==", [1], string11955);
                                                                      if (Grace_isTrue(opresult11958)) {
                                                                        setLineNumber(2221);    // compilenode string
                                                                        var string11959 = new GraceString("");
                                                                        var_bnm = string11959;
                                                                        if11954 = GraceDone;
                                                                      } else {
                                                                        setLineNumber(2223);    // compilenode identifier
                                                                        var opresult11962 = callmethodChecked(var_bnm, "++", [1], var_c);
                                                                        var_bnm = opresult11962;
                                                                        if11954 = GraceDone;
                                                                      }
                                                                      return if11954;
                                                                    };
                                                                    var call11963 = callmethodChecked(var_prelude, "for()do", [1, 1], call11952, block11953);
                                                                    setLineNumber(2226);    // compilenode identifier
                                                                    return var_bnm;
                                                                  };
                                                                  func11950.paramCounts = [0];
                                                                  obj11945.methods["moduleName"] = func11950;
                                                                  func11950.definitionLine = 2217;
                                                                  func11950.definitionModule = "ast";
                                                                  var func11964 = function(argcv) {    // method path
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for path"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2229);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11965 = callmethodChecked(this, "value", [0]);
                                                                    return call11965;
                                                                  };
                                                                  func11964.paramCounts = [0];
                                                                  obj11945.methods["path"] = func11964;
                                                                  func11964.definitionLine = 2228;
                                                                  func11964.definitionModule = "ast";
                                                                  var func11966 = function(argcv) {    // method accept(1)from(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_visitor = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                    var var_as = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[1] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(2231);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("ast");
                                                                    setLineNumber(2232);    // compilenode identifier
                                                                    var call11967 = callmethodChecked(var_visitor, "visitDialect()up", [1, 1], this, var_as);
                                                                    return call11967;
                                                                  };
                                                                  func11966.paramTypes = [];
                                                                  func11966.paramTypes.push([]);
                                                                  func11966.paramTypes.push([]);
                                                                  func11966.paramCounts = [1, 1];
                                                                  obj11945.methods["accept()from"] = func11966;
                                                                  func11966.definitionLine = 2231;
                                                                  func11966.definitionModule = "ast";
                                                                  var func11968 = function(argcv) {    // method map(1)ancestors(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_blk = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                    var var_as = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[1] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2235);    // compilenode call
                                                                    onSelf = true;
                                                                    var call11969 = callmethodChecked(this, "shallowCopy", [0]);
                                                                    var var_n = call11969;
                                                                    setLineNumber(2236);    // compilenode identifier
                                                                    var call11970 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                    var var_newChain = call11970;
                                                                    setLineNumber(2237);    // compilenode identifier
                                                                    var call11971 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                    return call11971;
                                                                  };
                                                                  func11968.paramCounts = [1, 1];
                                                                  obj11945.methods["map()ancestors"] = func11968;
                                                                  func11968.definitionLine = 2234;
                                                                  func11968.definitionModule = "ast";
                                                                  var func11972 = function(argcv) {    // method pretty(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_depth = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2240);    // compilenode string
                                                                    var string11973 = new GraceString("");
                                                                    var var_spc = string11973;
                                                                    setLineNumber(2241);    // compilenode num
                                                                    var opresult11976 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                    var block11977 = new GraceBlock(this, 2241, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block11977.real = function(var_i) {
                                                                      setLineNumber(2242);    // compilenode string
                                                                      var string11978 = new GraceString("  ");
                                                                      var opresult11981 = callmethodChecked(var_spc, "++", [1], string11978);
                                                                      var_spc = opresult11981;
                                                                      return GraceDone;
                                                                    };
                                                                    var call11982 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult11976, block11977);
                                                                    setLineNumber(2244);    // compilenode string
                                                                    var string11983 = new GraceString("\n");
                                                                    var call11985 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                    var opresult11987 = callmethodChecked(call11985, "++", [1], string11983);
                                                                    var var_s = opresult11987;
                                                                    setLineNumber(2245);    // compilenode string
                                                                    var string11988 = new GraceString("\n");
                                                                    onSelf = true;
                                                                    var call11990 = callmethodChecked(this, "value", [0]);
                                                                    var string11992 = new GraceString("Path: ");
                                                                    var string11995 = new GraceString("");
                                                                    var opresult11997 = callmethodChecked(string11995, "++", [1], var_spc);
                                                                    var opresult11999 = callmethodChecked(opresult11997, "++", [1], string11992);
                                                                    var opresult12001 = callmethodChecked(opresult11999, "++", [1], call11990);
                                                                    var opresult12003 = callmethodChecked(opresult12001, "++", [1], string11988);
                                                                    var opresult12006 = callmethodChecked(var_s, "++", [1], opresult12003);
                                                                    var_s = opresult12006;
                                                                    setLineNumber(2246);    // compilenode identifier
                                                                    return var_s;
                                                                  };
                                                                  func11972.paramCounts = [1];
                                                                  obj11945.methods["pretty"] = func11972;
                                                                  func11972.definitionLine = 2239;
                                                                  func11972.definitionModule = "ast";
                                                                  var func12007 = function(argcv) {    // method toGrace(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_depth = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(2248);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("ast");
                                                                    setLineNumber(2249);    // compilenode string
                                                                    var string12008 = new GraceString("\"");
                                                                    onSelf = true;
                                                                    var call12010 = callmethodChecked(this, "value", [0]);
                                                                    var string12012 = new GraceString("dialect \"");
                                                                    var opresult12014 = callmethodChecked(string12012, "++", [1], call12010);
                                                                    var opresult12016 = callmethodChecked(opresult12014, "++", [1], string12008);
                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult12016)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method toGrace(1) does not have " + 
                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                    return opresult12016;
                                                                  };
                                                                  func12007.paramTypes = [];
                                                                  func12007.paramTypes.push([type_Number, "depth"]);
                                                                  func12007.paramCounts = [1];
                                                                  obj11945.methods["toGrace"] = func12007;
                                                                  func12007.definitionLine = 2248;
                                                                  func12007.definitionModule = "ast";
                                                                  var func12017 = function(argcv) {    // method shallowCopy
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2252);    // compilenode call
                                                                    onSelf = true;
                                                                    var call12018 = callmethodChecked(this, "value", [0]);
                                                                    var call12019 = callmethodChecked(var_dialectNode, "new", [1], call12018);
                                                                    var call12020 = callmethodChecked(call12019, "shallowCopyFieldsFrom", [1], this);
                                                                    return call12020;
                                                                  };
                                                                  func12017.paramCounts = [0];
                                                                  obj11945.methods["shallowCopy"] = func12017;
                                                                  func12017.definitionLine = 2251;
                                                                  func12017.definitionModule = "ast";
                                                                  setLineNumber(2210);    // compilenode call
                                                                  var call12021 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call12022 = callmethodChecked(call12021, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call12023 = callmethodChecked(call12022, "baseNode()object", [0, 1], this);
                                                                  obj11945.superobj = call12023;
                                                                  if (call12023.data) obj11945.data = call12023.data;
                                                                  if (call12023.hasOwnProperty('_value'))
                                                                      obj11945._value = call12023._value;
                                                                  setLineNumber(2211);    // compilenode string
                                                                  var string12024 = new GraceString("dialect");
                                                                  obj11945.data["kind"] = string12024;
                                                                  var reader_ast_kind12025 = function() {
                                                                    return this.data["kind"];
                                                                  };
                                                                  reader_ast_kind12025.def = true;
                                                                  obj11945.methods["kind"] = reader_ast_kind12025;
                                                                  setLineNumber(2212);    // compilenode identifier
                                                                  obj11945.data["value"] = var_path__39__;
                                                                  var reader_ast_value12026 = function() {
                                                                    return this.data["value"];
                                                                  };
                                                                  obj11945.methods["value"] = reader_ast_value12026;
                                                                  obj11945.data["value"] = var_path__39__;
                                                                  var writer_ast_value12026 = function(argcv, o) {
                                                                    this.data["value"] = o;
                                                                    return GraceDone;
                                                                  };
                                                                  obj11945.methods["value:="] = writer_ast_value12026;
                                                                  obj11945.mutable = true;
                                                                  superDepth = origSuperDepth;
                                                                };
                                                                obj_init_11945.apply(obj11945, []);
                                                                return obj11945;
                                                              };
                                                              func11944.paramCounts = [1];
                                                              obj11942.methods["new"] = func11944;
                                                              func11944.definitionLine = 2209;
                                                              func11944.definitionModule = "ast";
                                                                var func12027 = function(argcv) {    // method new(1     )()object
                                                                  var curarg = 1;
                                                                  var var_path__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  var inheritingObject = arguments[curarg++];
                                                                  // Start argument processing
                                                                  curarg = 1;
                                                                  curarg++;
                                                                  // End argument processing
                                                                  setModuleName("ast");
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var obj12028 = Grace_allocObject(null, "new");
                                                                  obj12028.definitionModule = "ast";
                                                                  obj12028.definitionLine = 2209;
                                                                  var inho12028 = inheritingObject;
                                                                  while (inho12028.superobj) inho12028 = inho12028.superobj;
                                                                  inho12028.superobj = obj12028;
                                                                  obj12028.data = inheritingObject.data;
                                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                                    obj12028._value = inheritingObject._value;
                                                                  obj12028.outer = this;
                                                                  var reader_ast_outer12029 = function() {
                                                                    return this.outer;
                                                                  };
                                                                  obj12028.methods["outer"] = reader_ast_outer12029;
                                                                  var obj_init_12028 = function() {
                                                                    var origSuperDepth = superDepth;
                                                                    superDepth = obj12028;
                                                                    var func12030 = function(argcv) {    // method isDialect
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isDialect"));
                                                                      setModuleName("ast");
                                                                      // isDialect is a simple accessor - elide try ... catch
                                                                      setLineNumber(2214);    // compilenode identifier
                                                                      return GraceTrue;
                                                                    };
                                                                    func12030.paramCounts = [0];
                                                                    obj12028.methods["isDialect"] = func12030;
                                                                    func12030.definitionLine = 2214;
                                                                    func12030.definitionModule = "ast";
                                                                    var func12031 = function(argcv) {    // method isExternal
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExternal"));
                                                                      setModuleName("ast");
                                                                      // isExternal is a simple accessor - elide try ... catch
                                                                      setLineNumber(2215);    // compilenode identifier
                                                                      return GraceTrue;
                                                                    };
                                                                    func12031.paramCounts = [0];
                                                                    obj12028.methods["isExternal"] = func12031;
                                                                    func12031.definitionLine = 2215;
                                                                    func12031.definitionModule = "ast";
                                                                    var func12032 = function(argcv) {    // method isExecutable
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                                                      setModuleName("ast");
                                                                      // isExecutable is a simple accessor - elide try ... catch
                                                                      setLineNumber(2216);    // compilenode identifier
                                                                      return GraceFalse;
                                                                    };
                                                                    func12032.paramCounts = [0];
                                                                    obj12028.methods["isExecutable"] = func12032;
                                                                    func12032.definitionLine = 2216;
                                                                    func12032.definitionModule = "ast";
                                                                    var func12033 = function(argcv) {    // method moduleName
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moduleName"));
                                                                      setModuleName("ast");
                                                                      setLineNumber(2218);    // compilenode string
                                                                      var string12034 = new GraceString("");
                                                                      var var_bnm = string12034;
                                                                      setLineNumber(2219);    // compilenode call
                                                                      onSelf = true;
                                                                      var call12035 = callmethodChecked(this, "value", [0]);
                                                                      var block12036 = new GraceBlock(this, 2219, 1);
                                                                      setLineNumber(1);    // compilenode identifier
                                                                      block12036.real = function(var_c) {
                                                                        var if12037 = GraceDone;
                                                                        setLineNumber(2220);    // compilenode string
                                                                        var string12038 = new GraceString("/");
                                                                        var opresult12041 = callmethodChecked(var_c, "==", [1], string12038);
                                                                        if (Grace_isTrue(opresult12041)) {
                                                                          setLineNumber(2221);    // compilenode string
                                                                          var string12042 = new GraceString("");
                                                                          var_bnm = string12042;
                                                                          if12037 = GraceDone;
                                                                        } else {
                                                                          setLineNumber(2223);    // compilenode identifier
                                                                          var opresult12045 = callmethodChecked(var_bnm, "++", [1], var_c);
                                                                          var_bnm = opresult12045;
                                                                          if12037 = GraceDone;
                                                                        }
                                                                        return if12037;
                                                                      };
                                                                      var call12046 = callmethodChecked(var_prelude, "for()do", [1, 1], call12035, block12036);
                                                                      setLineNumber(2226);    // compilenode identifier
                                                                      return var_bnm;
                                                                    };
                                                                    func12033.paramCounts = [0];
                                                                    obj12028.methods["moduleName"] = func12033;
                                                                    func12033.definitionLine = 2217;
                                                                    func12033.definitionModule = "ast";
                                                                    var func12047 = function(argcv) {    // method path
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for path"));
                                                                      setModuleName("ast");
                                                                      setLineNumber(2229);    // compilenode call
                                                                      onSelf = true;
                                                                      var call12048 = callmethodChecked(this, "value", [0]);
                                                                      return call12048;
                                                                    };
                                                                    func12047.paramCounts = [0];
                                                                    obj12028.methods["path"] = func12047;
                                                                    func12047.definitionLine = 2228;
                                                                    func12047.definitionModule = "ast";
                                                                    var func12049 = function(argcv) {    // method accept(1)from(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_visitor = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                      var var_as = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[1] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(2231);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("ast");
                                                                      setLineNumber(2232);    // compilenode identifier
                                                                      var call12050 = callmethodChecked(var_visitor, "visitDialect()up", [1, 1], this, var_as);
                                                                      return call12050;
                                                                    };
                                                                    func12049.paramTypes = [];
                                                                    func12049.paramTypes.push([]);
                                                                    func12049.paramTypes.push([]);
                                                                    func12049.paramCounts = [1, 1];
                                                                    obj12028.methods["accept()from"] = func12049;
                                                                    func12049.definitionLine = 2231;
                                                                    func12049.definitionModule = "ast";
                                                                    var func12051 = function(argcv) {    // method map(1)ancestors(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_blk = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                      var var_as = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[1] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                      setModuleName("ast");
                                                                      setLineNumber(2235);    // compilenode call
                                                                      onSelf = true;
                                                                      var call12052 = callmethodChecked(this, "shallowCopy", [0]);
                                                                      var var_n = call12052;
                                                                      setLineNumber(2236);    // compilenode identifier
                                                                      var call12053 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                      var var_newChain = call12053;
                                                                      setLineNumber(2237);    // compilenode identifier
                                                                      var call12054 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                      return call12054;
                                                                    };
                                                                    func12051.paramCounts = [1, 1];
                                                                    obj12028.methods["map()ancestors"] = func12051;
                                                                    func12051.definitionLine = 2234;
                                                                    func12051.definitionModule = "ast";
                                                                    var func12055 = function(argcv) {    // method pretty(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_depth = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                      setModuleName("ast");
                                                                      setLineNumber(2240);    // compilenode string
                                                                      var string12056 = new GraceString("");
                                                                      var var_spc = string12056;
                                                                      setLineNumber(2241);    // compilenode num
                                                                      var opresult12059 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                      var block12060 = new GraceBlock(this, 2241, 1);
                                                                      setLineNumber(1);    // compilenode identifier
                                                                      block12060.real = function(var_i) {
                                                                        setLineNumber(2242);    // compilenode string
                                                                        var string12061 = new GraceString("  ");
                                                                        var opresult12064 = callmethodChecked(var_spc, "++", [1], string12061);
                                                                        var_spc = opresult12064;
                                                                        return GraceDone;
                                                                      };
                                                                      var call12065 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult12059, block12060);
                                                                      setLineNumber(2244);    // compilenode string
                                                                      var string12066 = new GraceString("\n");
                                                                      var call12068 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                      var opresult12070 = callmethodChecked(call12068, "++", [1], string12066);
                                                                      var var_s = opresult12070;
                                                                      setLineNumber(2245);    // compilenode string
                                                                      var string12071 = new GraceString("\n");
                                                                      onSelf = true;
                                                                      var call12073 = callmethodChecked(this, "value", [0]);
                                                                      var string12075 = new GraceString("Path: ");
                                                                      var string12078 = new GraceString("");
                                                                      var opresult12080 = callmethodChecked(string12078, "++", [1], var_spc);
                                                                      var opresult12082 = callmethodChecked(opresult12080, "++", [1], string12075);
                                                                      var opresult12084 = callmethodChecked(opresult12082, "++", [1], call12073);
                                                                      var opresult12086 = callmethodChecked(opresult12084, "++", [1], string12071);
                                                                      var opresult12089 = callmethodChecked(var_s, "++", [1], opresult12086);
                                                                      var_s = opresult12089;
                                                                      setLineNumber(2246);    // compilenode identifier
                                                                      return var_s;
                                                                    };
                                                                    func12055.paramCounts = [1];
                                                                    obj12028.methods["pretty"] = func12055;
                                                                    func12055.definitionLine = 2239;
                                                                    func12055.definitionModule = "ast";
                                                                    var func12090 = function(argcv) {    // method toGrace(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_depth = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(2248);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("ast");
                                                                      setLineNumber(2249);    // compilenode string
                                                                      var string12091 = new GraceString("\"");
                                                                      onSelf = true;
                                                                      var call12093 = callmethodChecked(this, "value", [0]);
                                                                      var string12095 = new GraceString("dialect \"");
                                                                      var opresult12097 = callmethodChecked(string12095, "++", [1], call12093);
                                                                      var opresult12099 = callmethodChecked(opresult12097, "++", [1], string12091);
                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult12099)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method toGrace(1) does not have " + 
                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                      return opresult12099;
                                                                    };
                                                                    func12090.paramTypes = [];
                                                                    func12090.paramTypes.push([type_Number, "depth"]);
                                                                    func12090.paramCounts = [1];
                                                                    obj12028.methods["toGrace"] = func12090;
                                                                    func12090.definitionLine = 2248;
                                                                    func12090.definitionModule = "ast";
                                                                    var func12100 = function(argcv) {    // method shallowCopy
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                      setModuleName("ast");
                                                                      setLineNumber(2252);    // compilenode call
                                                                      onSelf = true;
                                                                      var call12101 = callmethodChecked(this, "value", [0]);
                                                                      var call12102 = callmethodChecked(var_dialectNode, "new", [1], call12101);
                                                                      var call12103 = callmethodChecked(call12102, "shallowCopyFieldsFrom", [1], this);
                                                                      return call12103;
                                                                    };
                                                                    func12100.paramCounts = [0];
                                                                    obj12028.methods["shallowCopy"] = func12100;
                                                                    func12100.definitionLine = 2251;
                                                                    func12100.definitionModule = "ast";
                                                                    setLineNumber(2210);    // compilenode call
                                                                    var call12104 = callmethodChecked(superDepth, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call12105 = callmethodChecked(call12104, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call12106 = callmethodChecked(call12105, "baseNode()object", [0, 1], this);
                                                                    obj12028.superobj = call12106;
                                                                    if (call12106.data) obj12028.data = call12106.data;
                                                                    if (call12106.hasOwnProperty('_value'))
                                                                        obj12028._value = call12106._value;
                                                                    setLineNumber(2211);    // compilenode string
                                                                    var string12107 = new GraceString("dialect");
                                                                    obj12028.data["kind"] = string12107;
                                                                    var reader_ast_kind12108 = function() {
                                                                      return this.data["kind"];
                                                                    };
                                                                    reader_ast_kind12108.def = true;
                                                                    obj12028.methods["kind"] = reader_ast_kind12108;
                                                                    setLineNumber(2212);    // compilenode identifier
                                                                    obj12028.data["value"] = var_path__39__;
                                                                    var reader_ast_value12109 = function() {
                                                                      return this.data["value"];
                                                                    };
                                                                    obj12028.methods["value"] = reader_ast_value12109;
                                                                    obj12028.data["value"] = var_path__39__;
                                                                    var writer_ast_value12109 = function(argcv, o) {
                                                                      this.data["value"] = o;
                                                                      return GraceDone;
                                                                    };
                                                                    obj12028.methods["value:="] = writer_ast_value12109;
                                                                    obj12028.mutable = true;
                                                                    superDepth = origSuperDepth;
                                                                  };
                                                                  obj_init_12028.apply(inheritingObject, []);
                                                                  return obj12028;
                                                                  };
                                                                  obj11942.methods["new()object"] = func12027;
                                                                superDepth = origSuperDepth;
                                                              };
                                                              obj_init_11942.apply(obj11942, []);
                                                              var var_dialectNode = obj11942;
                                                              setLineNumber(2210);    // compilenode method
                                                              var func12110 = function(argcv) {    // method dialectNode
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dialectNode"));
                                                                setModuleName("ast");
                                                                // dialectNode is a simple accessor - elide try ... catch
                                                                setLineNumber(2208);    // compilenode identifier
                                                                return var_dialectNode;
                                                              };
                                                              func12110.paramCounts = [0];
                                                              this.methods["dialectNode"] = func12110;
                                                              func12110.definitionLine = 2210;
                                                              func12110.definitionModule = "ast";
                                                              this.methods["dialectNode"].debug = "def";
                                                              setLineNumber(2256);    // compilenode object
                                                              var obj12111 = Grace_allocObject(GraceObject, "returnNode");
                                                              obj12111.definitionModule = "ast";
                                                              obj12111.definitionLine = 2256;
                                                              obj12111.outer = this;
                                                              var reader_ast_outer12112 = function() {
                                                                return this.outer;
                                                              };
                                                              obj12111.methods["outer"] = reader_ast_outer12112;
                                                              var obj_init_12111 = function() {
                                                                var origSuperDepth = superDepth;
                                                                superDepth = obj12111;
                                                                var func12113 = function(argcv) {    // method new(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_expr = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(1)"));
                                                                  setModuleName("ast");
                                                                  setLineNumber(2257);    // compilenode object
                                                                  var obj12114 = Grace_allocObject(null, "returnNode.new");
                                                                  obj12114.definitionModule = "ast";
                                                                  obj12114.definitionLine = 2257;
                                                                  obj12114.outer = this;
                                                                  var reader_ast_outer12115 = function() {
                                                                    return this.outer;
                                                                  };
                                                                  obj12114.methods["outer"] = reader_ast_outer12115;
                                                                  var obj_init_12114 = function() {
                                                                    var origSuperDepth = superDepth;
                                                                    superDepth = obj12114;
                                                                    var func12116 = function(argcv) {    // method accept(1)from(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_visitor = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                      var var_as = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[1] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(2262);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("ast");
                                                                      var if12117 = GraceDone;
                                                                      setLineNumber(2263);    // compilenode identifier
                                                                      var call12118 = callmethodChecked(var_visitor, "visitReturn()up", [1, 1], this, var_as);
                                                                      if (Grace_isTrue(call12118)) {
                                                                        setLineNumber(2264);    // compilenode identifier
                                                                        var call12119 = callmethodChecked(var_as, "extend", [1], this);
                                                                        var var_newChain = call12119;
                                                                        setLineNumber(2265);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12120 = callmethodChecked(this, "value", [0]);
                                                                        var call12121 = callmethodChecked(call12120, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                        if12117 = call12121;
                                                                      }
                                                                      return if12117;
                                                                    };
                                                                    func12116.paramTypes = [];
                                                                    func12116.paramTypes.push([]);
                                                                    func12116.paramTypes.push([]);
                                                                    func12116.paramCounts = [1, 1];
                                                                    obj12114.methods["accept()from"] = func12116;
                                                                    func12116.definitionLine = 2262;
                                                                    func12116.definitionModule = "ast";
                                                                    var func12122 = function(argcv) {    // method map(1)ancestors(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_blk = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                      var var_as = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[1] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                      setModuleName("ast");
                                                                      setLineNumber(2269);    // compilenode call
                                                                      onSelf = true;
                                                                      var call12123 = callmethodChecked(this, "shallowCopy", [0]);
                                                                      var var_n = call12123;
                                                                      setLineNumber(2270);    // compilenode identifier
                                                                      var call12124 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                      var var_newChain = call12124;
                                                                      setLineNumber(2271);    // compilenode call
                                                                      onSelf = true;
                                                                      var call12125 = callmethodChecked(this, "value", [0]);
                                                                      var call12126 = callmethodChecked(call12125, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                                      var call12127 = callmethodChecked(var_n, "value:=", [1], call12126);
                                                                      setLineNumber(2272);    // compilenode identifier
                                                                      var call12128 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                      return call12128;
                                                                    };
                                                                    func12122.paramCounts = [1, 1];
                                                                    obj12114.methods["map()ancestors"] = func12122;
                                                                    func12122.definitionLine = 2268;
                                                                    func12122.definitionModule = "ast";
                                                                    var func12129 = function(argcv) {    // method pretty(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_depth = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                      setModuleName("ast");
                                                                      setLineNumber(2275);    // compilenode string
                                                                      var string12130 = new GraceString("");
                                                                      var var_spc = string12130;
                                                                      setLineNumber(2276);    // compilenode num
                                                                      var opresult12133 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                      var block12134 = new GraceBlock(this, 2276, 1);
                                                                      setLineNumber(1);    // compilenode identifier
                                                                      block12134.real = function(var_i) {
                                                                        setLineNumber(2277);    // compilenode string
                                                                        var string12135 = new GraceString("  ");
                                                                        var opresult12138 = callmethodChecked(var_spc, "++", [1], string12135);
                                                                        var_spc = opresult12138;
                                                                        return GraceDone;
                                                                      };
                                                                      var call12139 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult12133, block12134);
                                                                      setLineNumber(2279);    // compilenode string
                                                                      var string12140 = new GraceString("\n");
                                                                      var call12142 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                      var opresult12144 = callmethodChecked(call12142, "++", [1], string12140);
                                                                      var var_s = opresult12144;
                                                                      setLineNumber(2280);    // compilenode identifier
                                                                      var opresult12147 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                                      onSelf = true;
                                                                      var call12148 = callmethodChecked(this, "value", [0]);
                                                                      var call12149 = callmethodChecked(call12148, "pretty", [1], opresult12147);
                                                                      var opresult12153 = callmethodChecked(var_s, "++", [1], var_spc);
                                                                      var opresult12155 = callmethodChecked(opresult12153, "++", [1], call12149);
                                                                      var_s = opresult12155;
                                                                      setLineNumber(2281);    // compilenode identifier
                                                                      return var_s;
                                                                    };
                                                                    func12129.paramCounts = [1];
                                                                    obj12114.methods["pretty"] = func12129;
                                                                    func12129.definitionLine = 2274;
                                                                    func12129.definitionModule = "ast";
                                                                    var func12156 = function(argcv) {    // method toGrace(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_depth = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(2283);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("ast");
                                                                      setLineNumber(2284);    // compilenode call
                                                                      onSelf = true;
                                                                      var call12157 = callmethodChecked(this, "value", [0]);
                                                                      var call12158 = callmethodChecked(call12157, "toGrace", [1], var_depth);
                                                                      var string12160 = new GraceString("return ");
                                                                      var opresult12162 = callmethodChecked(string12160, "++", [1], call12158);
                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult12162)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method toGrace(1) does not have " + 
                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                      return opresult12162;
                                                                    };
                                                                    func12156.paramTypes = [];
                                                                    func12156.paramTypes.push([type_Number, "depth"]);
                                                                    func12156.paramCounts = [1];
                                                                    obj12114.methods["toGrace"] = func12156;
                                                                    func12156.definitionLine = 2283;
                                                                    func12156.definitionModule = "ast";
                                                                    var func12163 = function(argcv) {    // method shallowCopy
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                      setModuleName("ast");
                                                                      setLineNumber(2287);    // compilenode identifier
                                                                      var call12164 = callmethodChecked(var_returnNode, "new", [1], var_nullNode);
                                                                      var call12165 = callmethodChecked(call12164, "shallowCopyFieldsFrom", [1], this);
                                                                      return call12165;
                                                                    };
                                                                    func12163.paramCounts = [0];
                                                                    obj12114.methods["shallowCopy"] = func12163;
                                                                    func12163.definitionLine = 2286;
                                                                    func12163.definitionModule = "ast";
                                                                    setLineNumber(2258);    // compilenode call
                                                                    var call12166 = callmethodChecked(superDepth, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call12167 = callmethodChecked(call12166, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call12168 = callmethodChecked(call12167, "baseNode()object", [0, 1], this);
                                                                    obj12114.superobj = call12168;
                                                                    if (call12168.data) obj12114.data = call12168.data;
                                                                    if (call12168.hasOwnProperty('_value'))
                                                                        obj12114._value = call12168._value;
                                                                    setLineNumber(2259);    // compilenode string
                                                                    var string12169 = new GraceString("return");
                                                                    obj12114.data["kind"] = string12169;
                                                                    var reader_ast_kind12170 = function() {
                                                                      return this.data["kind"];
                                                                    };
                                                                    reader_ast_kind12170.def = true;
                                                                    obj12114.methods["kind"] = reader_ast_kind12170;
                                                                    setLineNumber(2260);    // compilenode identifier
                                                                    obj12114.data["value"] = var_expr;
                                                                    var reader_ast_value12171 = function() {
                                                                      return this.data["value"];
                                                                    };
                                                                    obj12114.methods["value"] = reader_ast_value12171;
                                                                    obj12114.data["value"] = var_expr;
                                                                    var writer_ast_value12171 = function(argcv, o) {
                                                                      this.data["value"] = o;
                                                                      return GraceDone;
                                                                    };
                                                                    obj12114.methods["value:="] = writer_ast_value12171;
                                                                    obj12114.mutable = true;
                                                                    superDepth = origSuperDepth;
                                                                  };
                                                                  obj_init_12114.apply(obj12114, []);
                                                                  return obj12114;
                                                                };
                                                                func12113.paramCounts = [1];
                                                                obj12111.methods["new"] = func12113;
                                                                func12113.definitionLine = 2257;
                                                                func12113.definitionModule = "ast";
                                                                  var func12172 = function(argcv) {    // method new(1     )()object
                                                                    var curarg = 1;
                                                                    var var_expr = arguments[curarg];
                                                                    curarg++;
                                                                    var inheritingObject = arguments[curarg++];
                                                                    // Start argument processing
                                                                    curarg = 1;
                                                                    curarg++;
                                                                    // End argument processing
                                                                    setModuleName("ast");
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var obj12173 = Grace_allocObject(null, "new");
                                                                    obj12173.definitionModule = "ast";
                                                                    obj12173.definitionLine = 2257;
                                                                    var inho12173 = inheritingObject;
                                                                    while (inho12173.superobj) inho12173 = inho12173.superobj;
                                                                    inho12173.superobj = obj12173;
                                                                    obj12173.data = inheritingObject.data;
                                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                                      obj12173._value = inheritingObject._value;
                                                                    obj12173.outer = this;
                                                                    var reader_ast_outer12174 = function() {
                                                                      return this.outer;
                                                                    };
                                                                    obj12173.methods["outer"] = reader_ast_outer12174;
                                                                    var obj_init_12173 = function() {
                                                                      var origSuperDepth = superDepth;
                                                                      superDepth = obj12173;
                                                                      var func12175 = function(argcv) {    // method accept(1)from(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_visitor = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                        var var_as = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[1] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(2262);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("ast");
                                                                        var if12176 = GraceDone;
                                                                        setLineNumber(2263);    // compilenode identifier
                                                                        var call12177 = callmethodChecked(var_visitor, "visitReturn()up", [1, 1], this, var_as);
                                                                        if (Grace_isTrue(call12177)) {
                                                                          setLineNumber(2264);    // compilenode identifier
                                                                          var call12178 = callmethodChecked(var_as, "extend", [1], this);
                                                                          var var_newChain = call12178;
                                                                          setLineNumber(2265);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12179 = callmethodChecked(this, "value", [0]);
                                                                          var call12180 = callmethodChecked(call12179, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                          if12176 = call12180;
                                                                        }
                                                                        return if12176;
                                                                      };
                                                                      func12175.paramTypes = [];
                                                                      func12175.paramTypes.push([]);
                                                                      func12175.paramTypes.push([]);
                                                                      func12175.paramCounts = [1, 1];
                                                                      obj12173.methods["accept()from"] = func12175;
                                                                      func12175.definitionLine = 2262;
                                                                      func12175.definitionModule = "ast";
                                                                      var func12181 = function(argcv) {    // method map(1)ancestors(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_blk = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                        var var_as = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[1] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2269);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12182 = callmethodChecked(this, "shallowCopy", [0]);
                                                                        var var_n = call12182;
                                                                        setLineNumber(2270);    // compilenode identifier
                                                                        var call12183 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                        var var_newChain = call12183;
                                                                        setLineNumber(2271);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12184 = callmethodChecked(this, "value", [0]);
                                                                        var call12185 = callmethodChecked(call12184, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                                        var call12186 = callmethodChecked(var_n, "value:=", [1], call12185);
                                                                        setLineNumber(2272);    // compilenode identifier
                                                                        var call12187 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                        return call12187;
                                                                      };
                                                                      func12181.paramCounts = [1, 1];
                                                                      obj12173.methods["map()ancestors"] = func12181;
                                                                      func12181.definitionLine = 2268;
                                                                      func12181.definitionModule = "ast";
                                                                      var func12188 = function(argcv) {    // method pretty(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_depth = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2275);    // compilenode string
                                                                        var string12189 = new GraceString("");
                                                                        var var_spc = string12189;
                                                                        setLineNumber(2276);    // compilenode num
                                                                        var opresult12192 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                        var block12193 = new GraceBlock(this, 2276, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block12193.real = function(var_i) {
                                                                          setLineNumber(2277);    // compilenode string
                                                                          var string12194 = new GraceString("  ");
                                                                          var opresult12197 = callmethodChecked(var_spc, "++", [1], string12194);
                                                                          var_spc = opresult12197;
                                                                          return GraceDone;
                                                                        };
                                                                        var call12198 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult12192, block12193);
                                                                        setLineNumber(2279);    // compilenode string
                                                                        var string12199 = new GraceString("\n");
                                                                        var call12201 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                        var opresult12203 = callmethodChecked(call12201, "++", [1], string12199);
                                                                        var var_s = opresult12203;
                                                                        setLineNumber(2280);    // compilenode identifier
                                                                        var opresult12206 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                                        onSelf = true;
                                                                        var call12207 = callmethodChecked(this, "value", [0]);
                                                                        var call12208 = callmethodChecked(call12207, "pretty", [1], opresult12206);
                                                                        var opresult12212 = callmethodChecked(var_s, "++", [1], var_spc);
                                                                        var opresult12214 = callmethodChecked(opresult12212, "++", [1], call12208);
                                                                        var_s = opresult12214;
                                                                        setLineNumber(2281);    // compilenode identifier
                                                                        return var_s;
                                                                      };
                                                                      func12188.paramCounts = [1];
                                                                      obj12173.methods["pretty"] = func12188;
                                                                      func12188.definitionLine = 2274;
                                                                      func12188.definitionModule = "ast";
                                                                      var func12215 = function(argcv) {    // method toGrace(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_depth = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(2283);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("ast");
                                                                        setLineNumber(2284);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12216 = callmethodChecked(this, "value", [0]);
                                                                        var call12217 = callmethodChecked(call12216, "toGrace", [1], var_depth);
                                                                        var string12219 = new GraceString("return ");
                                                                        var opresult12221 = callmethodChecked(string12219, "++", [1], call12217);
                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult12221)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method toGrace(1) does not have " + 
                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                        return opresult12221;
                                                                      };
                                                                      func12215.paramTypes = [];
                                                                      func12215.paramTypes.push([type_Number, "depth"]);
                                                                      func12215.paramCounts = [1];
                                                                      obj12173.methods["toGrace"] = func12215;
                                                                      func12215.definitionLine = 2283;
                                                                      func12215.definitionModule = "ast";
                                                                      var func12222 = function(argcv) {    // method shallowCopy
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2287);    // compilenode identifier
                                                                        var call12223 = callmethodChecked(var_returnNode, "new", [1], var_nullNode);
                                                                        var call12224 = callmethodChecked(call12223, "shallowCopyFieldsFrom", [1], this);
                                                                        return call12224;
                                                                      };
                                                                      func12222.paramCounts = [0];
                                                                      obj12173.methods["shallowCopy"] = func12222;
                                                                      func12222.definitionLine = 2286;
                                                                      func12222.definitionModule = "ast";
                                                                      setLineNumber(2258);    // compilenode call
                                                                      var call12225 = callmethodChecked(superDepth, "outer", [0]);
                                                                      onOuter = true;
                                                                      onSelf = true;
                                                                      var call12226 = callmethodChecked(call12225, "outer", [0]);
                                                                      onOuter = true;
                                                                      onSelf = true;
                                                                      var call12227 = callmethodChecked(call12226, "baseNode()object", [0, 1], this);
                                                                      obj12173.superobj = call12227;
                                                                      if (call12227.data) obj12173.data = call12227.data;
                                                                      if (call12227.hasOwnProperty('_value'))
                                                                          obj12173._value = call12227._value;
                                                                      setLineNumber(2259);    // compilenode string
                                                                      var string12228 = new GraceString("return");
                                                                      obj12173.data["kind"] = string12228;
                                                                      var reader_ast_kind12229 = function() {
                                                                        return this.data["kind"];
                                                                      };
                                                                      reader_ast_kind12229.def = true;
                                                                      obj12173.methods["kind"] = reader_ast_kind12229;
                                                                      setLineNumber(2260);    // compilenode identifier
                                                                      obj12173.data["value"] = var_expr;
                                                                      var reader_ast_value12230 = function() {
                                                                        return this.data["value"];
                                                                      };
                                                                      obj12173.methods["value"] = reader_ast_value12230;
                                                                      obj12173.data["value"] = var_expr;
                                                                      var writer_ast_value12230 = function(argcv, o) {
                                                                        this.data["value"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj12173.methods["value:="] = writer_ast_value12230;
                                                                      obj12173.mutable = true;
                                                                      superDepth = origSuperDepth;
                                                                    };
                                                                    obj_init_12173.apply(inheritingObject, []);
                                                                    return obj12173;
                                                                    };
                                                                    obj12111.methods["new()object"] = func12172;
                                                                  superDepth = origSuperDepth;
                                                                };
                                                                obj_init_12111.apply(obj12111, []);
                                                                var var_returnNode = obj12111;
                                                                setLineNumber(2258);    // compilenode method
                                                                var func12231 = function(argcv) {    // method returnNode
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for returnNode"));
                                                                  setModuleName("ast");
                                                                  // returnNode is a simple accessor - elide try ... catch
                                                                  setLineNumber(2256);    // compilenode identifier
                                                                  return var_returnNode;
                                                                };
                                                                func12231.paramCounts = [0];
                                                                this.methods["returnNode"] = func12231;
                                                                func12231.definitionLine = 2258;
                                                                func12231.definitionModule = "ast";
                                                                this.methods["returnNode"].debug = "def";
                                                                setLineNumber(2291);    // compilenode object
                                                                var obj12232 = Grace_allocObject(GraceObject, "inheritsNode");
                                                                obj12232.definitionModule = "ast";
                                                                obj12232.definitionLine = 2291;
                                                                obj12232.outer = this;
                                                                var reader_ast_outer12233 = function() {
                                                                  return this.outer;
                                                                };
                                                                obj12232.methods["outer"] = reader_ast_outer12233;
                                                                var obj_init_12232 = function() {
                                                                  var origSuperDepth = superDepth;
                                                                  superDepth = obj12232;
                                                                  var func12234 = function(argcv) {    // method new(1)scope(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_expr = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new (arg list 1) of new(1)scope(1)"));
                                                                    var var_s = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[1] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 2) of new(1)scope(1)"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2293);    // compilenode identifier
                                                                    onSelf = true;
                                                                    var call12235 = callmethodChecked(this, "new", [1], var_expr);
                                                                    var var_result = call12235;
                                                                    setLineNumber(2294);    // compilenode identifier
                                                                    var call12236 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                                                    setLineNumber(2295);    // compilenode identifier
                                                                    return var_result;
                                                                  };
                                                                  func12234.paramCounts = [1, 1];
                                                                  obj12232.methods["new()scope"] = func12234;
                                                                  func12234.definitionLine = 2292;
                                                                  func12234.definitionModule = "ast";
                                                                  var func12237 = function(argcv) {    // method new(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_expr = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(1)"));
                                                                    setModuleName("ast");
                                                                    setLineNumber(2297);    // compilenode object
                                                                    var obj12238 = Grace_allocObject(null, "inheritsNode.new");
                                                                    obj12238.definitionModule = "ast";
                                                                    obj12238.definitionLine = 2297;
                                                                    obj12238.outer = this;
                                                                    var reader_ast_outer12239 = function() {
                                                                      return this.outer;
                                                                    };
                                                                    obj12238.methods["outer"] = reader_ast_outer12239;
                                                                    var obj_init_12238 = function() {
                                                                      var origSuperDepth = superDepth;
                                                                      superDepth = obj12238;
                                                                      var func12240 = function(argcv) {    // method isLegalInTrait
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLegalInTrait"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2306);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12241 = callmethodChecked(this, "isUse", [0]);
                                                                        return call12241;
                                                                      };
                                                                      func12240.paramCounts = [0];
                                                                      obj12238.methods["isLegalInTrait"] = func12240;
                                                                      func12240.definitionLine = 2306;
                                                                      func12240.definitionModule = "ast";
                                                                      var func12242 = function(argcv) {    // method isInherits
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isInherits"));
                                                                        setModuleName("ast");
                                                                        // isInherits is a simple accessor - elide try ... catch
                                                                        setLineNumber(2307);    // compilenode identifier
                                                                        return GraceTrue;
                                                                      };
                                                                      func12242.paramCounts = [0];
                                                                      obj12238.methods["isInherits"] = func12242;
                                                                      func12242.definitionLine = 2307;
                                                                      func12242.definitionModule = "ast";
                                                                      var func12243 = function(argcv) {    // method inheritsFromMember
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inheritsFromMember"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2308);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12244 = callmethodChecked(this, "value", [0]);
                                                                        var call12245 = callmethodChecked(call12244, "isMember", [0]);
                                                                        return call12245;
                                                                      };
                                                                      func12243.paramCounts = [0];
                                                                      obj12238.methods["inheritsFromMember"] = func12243;
                                                                      func12243.definitionLine = 2308;
                                                                      func12243.definitionModule = "ast";
                                                                      var func12246 = function(argcv) {    // method inheritsFromCall
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inheritsFromCall"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2309);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12247 = callmethodChecked(this, "value", [0]);
                                                                        var call12248 = callmethodChecked(call12247, "isCall", [0]);
                                                                        return call12248;
                                                                      };
                                                                      func12246.paramCounts = [0];
                                                                      obj12238.methods["inheritsFromCall"] = func12246;
                                                                      func12246.definitionLine = 2309;
                                                                      func12246.definitionModule = "ast";
                                                                      var func12249 = function(argcv) {    // method isExecutable
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                                                        setModuleName("ast");
                                                                        // isExecutable is a simple accessor - elide try ... catch
                                                                        setLineNumber(2310);    // compilenode identifier
                                                                        return GraceFalse;
                                                                      };
                                                                      func12249.paramCounts = [0];
                                                                      obj12238.methods["isExecutable"] = func12249;
                                                                      func12249.definitionLine = 2310;
                                                                      func12249.definitionModule = "ast";
                                                                      var func12250 = function(argcv) {    // method accept(1)from(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_visitor = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                        var var_as = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[1] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(2311);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("ast");
                                                                        var if12251 = GraceDone;
                                                                        setLineNumber(2312);    // compilenode identifier
                                                                        var call12252 = callmethodChecked(var_visitor, "visitInherits()up", [1, 1], this, var_as);
                                                                        if (Grace_isTrue(call12252)) {
                                                                          setLineNumber(2313);    // compilenode identifier
                                                                          var call12253 = callmethodChecked(var_as, "extend", [1], this);
                                                                          var var_newChain = call12253;
                                                                          setLineNumber(2314);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12254 = callmethodChecked(this, "value", [0]);
                                                                          var call12255 = callmethodChecked(call12254, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                          setLineNumber(2315);    // compilenode block
                                                                          var block12256 = new GraceBlock(this, 2315, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block12256.real = function(var_a) {
                                                                            setLineNumber(2316);    // compilenode identifier
                                                                            var call12257 = callmethodChecked(var_a, "newName", [0]);
                                                                            var call12258 = callmethodChecked(call12257, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                            setLineNumber(2317);    // compilenode identifier
                                                                            var call12259 = callmethodChecked(var_a, "oldName", [0]);
                                                                            var call12260 = callmethodChecked(call12259, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                            return call12260;
                                                                          };
                                                                          setLineNumber(2315);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12261 = callmethodChecked(this, "aliases", [0]);
                                                                          var call12262 = callmethodChecked(call12261, "do", [1], block12256);
                                                                          setLineNumber(2319);    // compilenode block
                                                                          var block12263 = new GraceBlock(this, 2319, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block12263.real = function(var_e) {
                                                                            setLineNumber(2319);    // compilenode identifier
                                                                            var call12264 = callmethodChecked(var_e, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                            return call12264;
                                                                          };
                                                                          onSelf = true;
                                                                          var call12265 = callmethodChecked(this, "exclusions", [0]);
                                                                          var call12266 = callmethodChecked(call12265, "do", [1], block12263);
                                                                          if12251 = call12266;
                                                                        }
                                                                        return if12251;
                                                                      };
                                                                      func12250.paramTypes = [];
                                                                      func12250.paramTypes.push([]);
                                                                      func12250.paramTypes.push([]);
                                                                      func12250.paramCounts = [1, 1];
                                                                      obj12238.methods["accept()from"] = func12250;
                                                                      func12250.definitionLine = 2311;
                                                                      func12250.definitionModule = "ast";
                                                                      var func12267 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_as = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2326);    // compilenode identifier
                                                                        var call12268 = callmethodChecked(var_k, "methdec", [0]);
                                                                        return call12268;
                                                                      };
                                                                      func12267.paramCounts = [1];
                                                                      obj12238.methods["declarationKindWithAncestors"] = func12267;
                                                                      func12267.definitionLine = 2322;
                                                                      func12267.definitionModule = "ast";
                                                                      var func12269 = function(argcv) {    // method map(1)ancestors(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_blk = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                        var var_as = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[1] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2329);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12270 = callmethodChecked(this, "shallowCopy", [0]);
                                                                        var var_n = call12270;
                                                                        setLineNumber(2330);    // compilenode identifier
                                                                        var call12271 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                        var var_newChain = call12271;
                                                                        setLineNumber(2331);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12272 = callmethodChecked(this, "value", [0]);
                                                                        var call12273 = callmethodChecked(call12272, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                                        var call12274 = callmethodChecked(var_n, "value:=", [1], call12273);
                                                                        setLineNumber(2332);    // compilenode identifier
                                                                        var call12275 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                        return call12275;
                                                                      };
                                                                      func12269.paramCounts = [1, 1];
                                                                      obj12238.methods["map()ancestors"] = func12269;
                                                                      func12269.definitionLine = 2328;
                                                                      func12269.definitionModule = "ast";
                                                                      var func12276 = function(argcv) {    // method pretty(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_depth = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2335);    // compilenode string
                                                                        var string12277 = new GraceString("");
                                                                        var var_spc = string12277;
                                                                        setLineNumber(2336);    // compilenode num
                                                                        var opresult12280 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                        var block12281 = new GraceBlock(this, 2336, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block12281.real = function(var_i) {
                                                                          setLineNumber(2337);    // compilenode string
                                                                          var string12282 = new GraceString("  ");
                                                                          var opresult12285 = callmethodChecked(var_spc, "++", [1], string12282);
                                                                          var_spc = opresult12285;
                                                                          return GraceDone;
                                                                        };
                                                                        var call12286 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult12280, block12281);
                                                                        setLineNumber(2339);    // compilenode identifier
                                                                        var call12287 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                        var var_s = call12287;
                                                                        var if12288 = GraceDone;
                                                                        setLineNumber(2340);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12289 = callmethodChecked(this, "isUse", [0]);
                                                                        if (Grace_isTrue(call12289)) {
                                                                          var string12290 = new GraceString(" (use)");
                                                                          var string12293 = new GraceString("");
                                                                          var opresult12295 = callmethodChecked(string12293, "++", [1], var_s);
                                                                          var opresult12297 = callmethodChecked(opresult12295, "++", [1], string12290);
                                                                          var_s = opresult12297;
                                                                          if12288 = GraceDone;
                                                                        }
                                                                        setLineNumber(2341);    // compilenode identifier
                                                                        var opresult12300 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                                        onSelf = true;
                                                                        var call12301 = callmethodChecked(this, "value", [0]);
                                                                        var call12302 = callmethodChecked(call12301, "pretty", [1], opresult12300);
                                                                        var string12305 = new GraceString("\n");
                                                                        var opresult12308 = callmethodChecked(var_s, "++", [1], string12305);
                                                                        var opresult12310 = callmethodChecked(opresult12308, "++", [1], var_spc);
                                                                        var opresult12312 = callmethodChecked(opresult12310, "++", [1], call12302);
                                                                        var_s = opresult12312;
                                                                        setLineNumber(2342);    // compilenode block
                                                                        var block12313 = new GraceBlock(this, 2342, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block12313.real = function(var_a) {
                                                                          setLineNumber(2343);    // compilenode string
                                                                          var string12314 = new GraceString("");
                                                                          var call12316 = callmethodChecked(var_a, "pretty", [1], var_depth);
                                                                          var string12318 = new GraceString("\n");
                                                                          var string12321 = new GraceString("");
                                                                          var opresult12323 = callmethodChecked(string12321, "++", [1], var_s);
                                                                          var opresult12325 = callmethodChecked(opresult12323, "++", [1], string12318);
                                                                          var opresult12327 = callmethodChecked(opresult12325, "++", [1], call12316);
                                                                          var opresult12329 = callmethodChecked(opresult12327, "++", [1], string12314);
                                                                          var_s = opresult12329;
                                                                          return GraceDone;
                                                                        };
                                                                        setLineNumber(2342);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12330 = callmethodChecked(this, "aliases", [0]);
                                                                        var call12331 = callmethodChecked(call12330, "do", [1], block12313);
                                                                        var if12332 = GraceDone;
                                                                        setLineNumber(2345);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12333 = callmethodChecked(this, "exclusions", [0]);
                                                                        var call12334 = callmethodChecked(call12333, "isEmpty", [0]);
                                                                        var call12335 = callmethodChecked(call12334, "not", [0]);
                                                                        if (Grace_isTrue(call12335)) {
                                                                          var string12336 = new GraceString("");
                                                                          var string12339 = new GraceString("\n");
                                                                          var string12342 = new GraceString("");
                                                                          var opresult12344 = callmethodChecked(string12342, "++", [1], var_s);
                                                                          var opresult12346 = callmethodChecked(opresult12344, "++", [1], string12339);
                                                                          var opresult12348 = callmethodChecked(opresult12346, "++", [1], var_spc);
                                                                          var opresult12350 = callmethodChecked(opresult12348, "++", [1], string12336);
                                                                          var_s = opresult12350;
                                                                          if12332 = GraceDone;
                                                                        }
                                                                        setLineNumber(2346);    // compilenode block
                                                                        var block12351 = new GraceBlock(this, 2346, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block12351.real = function(var_e) {
                                                                          setLineNumber(2347);    // compilenode string
                                                                          var string12352 = new GraceString(" ");
                                                                          var string12355 = new GraceString(" exclude ");
                                                                          var string12358 = new GraceString("");
                                                                          var opresult12360 = callmethodChecked(string12358, "++", [1], var_s);
                                                                          var opresult12362 = callmethodChecked(opresult12360, "++", [1], string12355);
                                                                          var opresult12364 = callmethodChecked(opresult12362, "++", [1], var_e);
                                                                          var opresult12366 = callmethodChecked(opresult12364, "++", [1], string12352);
                                                                          var_s = opresult12366;
                                                                          return GraceDone;
                                                                        };
                                                                        setLineNumber(2346);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12367 = callmethodChecked(this, "exclusions", [0]);
                                                                        var call12368 = callmethodChecked(call12367, "do", [1], block12351);
                                                                        var if12369 = GraceDone;
                                                                        setLineNumber(2349);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12370 = callmethodChecked(this, "providedNames", [0]);
                                                                        var call12371 = callmethodChecked(call12370, "isEmpty", [0]);
                                                                        var call12372 = callmethodChecked(call12371, "not", [0]);
                                                                        if (Grace_isTrue(call12372)) {
                                                                          setLineNumber(2350);    // compilenode string
                                                                          var string12373 = new GraceString("");
                                                                          onSelf = true;
                                                                          var call12375 = callmethodChecked(this, "providedNames", [0]);
                                                                          var call12376 = callmethodChecked(call12375, "asList", [0]);
                                                                          var call12377 = callmethodChecked(call12376, "sort", [0]);
                                                                          var string12379 = new GraceString("Provided names: ");
                                                                          var string12382 = new GraceString("\n");
                                                                          var opresult12384 = callmethodChecked(string12382, "++", [1], var_spc);
                                                                          var opresult12386 = callmethodChecked(opresult12384, "++", [1], string12379);
                                                                          var opresult12388 = callmethodChecked(opresult12386, "++", [1], call12377);
                                                                          var opresult12390 = callmethodChecked(opresult12388, "++", [1], string12373);
                                                                          var opresult12393 = callmethodChecked(var_s, "++", [1], opresult12390);
                                                                          var_s = opresult12393;
                                                                          if12369 = GraceDone;
                                                                        }
                                                                        setLineNumber(2352);    // compilenode identifier
                                                                        return var_s;
                                                                      };
                                                                      func12276.paramCounts = [1];
                                                                      obj12238.methods["pretty"] = func12276;
                                                                      func12276.definitionLine = 2334;
                                                                      func12276.definitionModule = "ast";
                                                                      var func12394 = function(argcv) {    // method toGrace(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_depth = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(2354);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("ast");
                                                                        var if12395 = GraceDone;
                                                                        setLineNumber(2355);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12396 = callmethodChecked(this, "isUse", [0]);
                                                                        if (Grace_isTrue(call12396)) {
                                                                          var string12397 = new GraceString("use ");
                                                                          if12395 = string12397;
                                                                        } else {
                                                                          var string12398 = new GraceString("inherit ");
                                                                          if12395 = string12398;
                                                                        }
                                                                        var var_s = if12395;
                                                                        setLineNumber(2356);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12399 = callmethodChecked(this, "value", [0]);
                                                                        var call12400 = callmethodChecked(call12399, "toGrace", [1], new GraceNum(0));
                                                                        var opresult12403 = callmethodChecked(var_s, "++", [1], call12400);
                                                                        var_s = opresult12403;
                                                                        setLineNumber(2357);    // compilenode block
                                                                        var block12404 = new GraceBlock(this, 2357, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block12404.real = function(var_a) {
                                                                          setLineNumber(2358);    // compilenode string
                                                                          var string12405 = new GraceString(" ");
                                                                          var string12408 = new GraceString(" ");
                                                                          var string12411 = new GraceString("");
                                                                          var opresult12413 = callmethodChecked(string12411, "++", [1], var_s);
                                                                          var opresult12415 = callmethodChecked(opresult12413, "++", [1], string12408);
                                                                          var opresult12417 = callmethodChecked(opresult12415, "++", [1], var_a);
                                                                          var opresult12419 = callmethodChecked(opresult12417, "++", [1], string12405);
                                                                          var_s = opresult12419;
                                                                          return GraceDone;
                                                                        };
                                                                        setLineNumber(2357);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12420 = callmethodChecked(this, "aliases", [0]);
                                                                        var call12421 = callmethodChecked(call12420, "do", [1], block12404);
                                                                        setLineNumber(2360);    // compilenode block
                                                                        var block12422 = new GraceBlock(this, 2360, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block12422.real = function(var_e) {
                                                                          setLineNumber(2361);    // compilenode string
                                                                          var string12423 = new GraceString(" ");
                                                                          var call12425 = callmethodChecked(var_e, "nameString", [0]);
                                                                          var string12427 = new GraceString(" exclude ");
                                                                          var string12430 = new GraceString("");
                                                                          var opresult12432 = callmethodChecked(string12430, "++", [1], var_s);
                                                                          var opresult12434 = callmethodChecked(opresult12432, "++", [1], string12427);
                                                                          var opresult12436 = callmethodChecked(opresult12434, "++", [1], call12425);
                                                                          var opresult12438 = callmethodChecked(opresult12436, "++", [1], string12423);
                                                                          var_s = opresult12438;
                                                                          return GraceDone;
                                                                        };
                                                                        setLineNumber(2360);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12439 = callmethodChecked(this, "exclusions", [0]);
                                                                        var call12440 = callmethodChecked(call12439, "do", [1], block12422);
                                                                        setLineNumber(2363);    // return value
                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method toGrace(1) does not have " + 
                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                        return var_s;
                                                                      };
                                                                      func12394.paramTypes = [];
                                                                      func12394.paramTypes.push([type_Number, "depth"]);
                                                                      func12394.paramCounts = [1];
                                                                      obj12238.methods["toGrace"] = func12394;
                                                                      func12394.definitionLine = 2354;
                                                                      func12394.definitionModule = "ast";
                                                                      var func12441 = function(argcv) {    // method asString
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2366);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12442 = callmethodChecked(this, "value", [0]);
                                                                        var call12443 = callmethodChecked(call12442, "toGrace", [1], new GraceNum(0));
                                                                        var if12445 = GraceDone;
                                                                        onSelf = true;
                                                                        var call12446 = callmethodChecked(this, "isUse", [0]);
                                                                        if (Grace_isTrue(call12446)) {
                                                                          var string12447 = new GraceString("use ");
                                                                          if12445 = string12447;
                                                                        } else {
                                                                          var string12448 = new GraceString("inherit ");
                                                                          if12445 = string12448;
                                                                        }
                                                                        var opresult12450 = callmethodChecked(if12445, "++", [1], call12443);
                                                                        return opresult12450;
                                                                      };
                                                                      func12441.paramCounts = [0];
                                                                      obj12238.methods["asString"] = func12441;
                                                                      func12441.definitionLine = 2365;
                                                                      func12441.definitionModule = "ast";
                                                                      var func12451 = function(argcv) {    // method nameString
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2368);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12452 = callmethodChecked(this, "value", [0]);
                                                                        var call12453 = callmethodChecked(call12452, "toGrace", [1], new GraceNum(0));
                                                                        return call12453;
                                                                      };
                                                                      func12451.paramCounts = [0];
                                                                      obj12238.methods["nameString"] = func12451;
                                                                      func12451.definitionLine = 2368;
                                                                      func12451.definitionModule = "ast";
                                                                      var func12454 = function(argcv) {    // method addAlias(1)for(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_newName = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addAlias (arg list 1) of addAlias(1)for(1)"));
                                                                        var var_oldName = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[1] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for for (arg list 2) of addAlias(1)for(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2370);    // compilenode call
                                                                        var call12455 = callmethodChecked(superDepth, "outer", [0]);
                                                                        onOuter = true;
                                                                        onSelf = true;
                                                                        var call12456 = callmethodChecked(call12455, "outer", [0]);
                                                                        onOuter = true;
                                                                        onSelf = true;
                                                                        var call12457 = callmethodChecked(call12456, "aliasNew()old", [1, 1], var_newName, var_oldName);
                                                                        onSelf = true;
                                                                        var call12458 = callmethodChecked(this, "aliases", [0]);
                                                                        var call12459 = callmethodChecked(call12458, "push", [1], call12457);
                                                                        return call12459;
                                                                      };
                                                                      func12454.paramCounts = [1, 1];
                                                                      obj12238.methods["addAlias()for"] = func12454;
                                                                      func12454.definitionLine = 2369;
                                                                      func12454.definitionModule = "ast";
                                                                      var func12460 = function(argcv) {    // method addExclusion(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_methName = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addExclusion(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2373);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12461 = callmethodChecked(this, "exclusions", [0]);
                                                                        var call12462 = callmethodChecked(call12461, "push", [1], var_methName);
                                                                        return call12462;
                                                                      };
                                                                      func12460.paramCounts = [1];
                                                                      obj12238.methods["addExclusion"] = func12460;
                                                                      func12460.definitionLine = 2372;
                                                                      func12460.definitionModule = "ast";
                                                                      var func12463 = function(argcv) {    // method shallowCopy
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2376);    // compilenode identifier
                                                                        var call12464 = callmethodChecked(var_inheritsNode, "new", [1], var_nullNode);
                                                                        var call12465 = callmethodChecked(call12464, "shallowCopyFieldsFrom", [1], this);
                                                                        return call12465;
                                                                      };
                                                                      func12463.paramCounts = [0];
                                                                      obj12238.methods["shallowCopy"] = func12463;
                                                                      func12463.definitionLine = 2375;
                                                                      func12463.definitionModule = "ast";
                                                                      var func12466 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_other = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2379);    // compilenode identifier
                                                                        var call12467 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                                        setLineNumber(2380);    // compilenode identifier
                                                                        var call12468 = callmethodChecked(var_other, "providedNames", [0]);
                                                                        onSelf = true;
                                                                        var call12469 = callmethodChecked(this, "providedNames:=", [1], call12468);
                                                                        setLineNumber(2381);    // compilenode identifier
                                                                        var call12470 = callmethodChecked(var_other, "aliases", [0]);
                                                                        onSelf = true;
                                                                        var call12471 = callmethodChecked(this, "aliases:=", [1], call12470);
                                                                        setLineNumber(2382);    // compilenode identifier
                                                                        var call12472 = callmethodChecked(var_other, "exclusions", [0]);
                                                                        onSelf = true;
                                                                        var call12473 = callmethodChecked(this, "exclusions:=", [1], call12472);
                                                                        setLineNumber(2383);    // compilenode identifier
                                                                        var call12474 = callmethodChecked(var_other, "isUse", [0]);
                                                                        onSelf = true;
                                                                        var call12475 = callmethodChecked(this, "isUse:=", [1], call12474);
                                                                        setLineNumber(2384);    // compilenode identifier
                                                                        return this;
                                                                      };
                                                                      func12466.paramCounts = [1];
                                                                      obj12238.methods["shallowCopyFieldsFrom"] = func12466;
                                                                      func12466.definitionLine = 2378;
                                                                      func12466.definitionModule = "ast";
                                                                      var func12476 = function(argcv) {    // method statementName
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                                        setModuleName("ast");
                                                                        var if12477 = GraceDone;
                                                                        setLineNumber(2387);    // compilenode call
                                                                        onSelf = true;
                                                                        var call12478 = callmethodChecked(this, "isUse", [0]);
                                                                        if (Grace_isTrue(call12478)) {
                                                                          var string12479 = new GraceString("use");
                                                                          if12477 = string12479;
                                                                        } else {
                                                                          var string12480 = new GraceString("inherit");
                                                                          if12477 = string12480;
                                                                        }
                                                                        return if12477;
                                                                      };
                                                                      func12476.paramCounts = [0];
                                                                      obj12238.methods["statementName"] = func12476;
                                                                      func12476.definitionLine = 2386;
                                                                      func12476.definitionModule = "ast";
                                                                      setLineNumber(2298);    // compilenode call
                                                                      var call12481 = callmethodChecked(superDepth, "outer", [0]);
                                                                      onOuter = true;
                                                                      onSelf = true;
                                                                      var call12482 = callmethodChecked(call12481, "outer", [0]);
                                                                      onOuter = true;
                                                                      onSelf = true;
                                                                      var call12483 = callmethodChecked(call12482, "baseNode()object", [0, 1], this);
                                                                      obj12238.superobj = call12483;
                                                                      if (call12483.data) obj12238.data = call12483.data;
                                                                      if (call12483.hasOwnProperty('_value'))
                                                                          obj12238._value = call12483._value;
                                                                      setLineNumber(2299);    // compilenode string
                                                                      var string12484 = new GraceString("inherits");
                                                                      obj12238.data["kind"] = string12484;
                                                                      var reader_ast_kind12485 = function() {
                                                                        return this.data["kind"];
                                                                      };
                                                                      reader_ast_kind12485.def = true;
                                                                      obj12238.methods["kind"] = reader_ast_kind12485;
                                                                      setLineNumber(2300);    // compilenode identifier
                                                                      obj12238.data["value"] = var_expr;
                                                                      var reader_ast_value12486 = function() {
                                                                        return this.data["value"];
                                                                      };
                                                                      obj12238.methods["value"] = reader_ast_value12486;
                                                                      obj12238.data["value"] = var_expr;
                                                                      var writer_ast_value12486 = function(argcv, o) {
                                                                        this.data["value"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj12238.methods["value:="] = writer_ast_value12486;
                                                                      obj12238.mutable = true;
                                                                      setLineNumber(2301);    // compilenode call
                                                                      var call12487 = callmethodChecked(var_prelude, "emptySet", [0]);
                                                                      obj12238.data["providedNames"] = call12487;
                                                                      var reader_ast_providedNames12488 = function() {
                                                                        return this.data["providedNames"];
                                                                      };
                                                                      obj12238.methods["providedNames"] = reader_ast_providedNames12488;
                                                                      obj12238.data["providedNames"] = call12487;
                                                                      var writer_ast_providedNames12488 = function(argcv, o) {
                                                                        this.data["providedNames"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj12238.methods["providedNames:="] = writer_ast_providedNames12488;
                                                                      obj12238.mutable = true;
                                                                      setLineNumber(2302);    // compilenode array
                                                                      var array12489 = new PrimitiveGraceList([]);
                                                                      obj12238.data["aliases"] = array12489;
                                                                      var reader_ast_aliases12490 = function() {
                                                                        return this.data["aliases"];
                                                                      };
                                                                      obj12238.methods["aliases"] = reader_ast_aliases12490;
                                                                      obj12238.data["aliases"] = array12489;
                                                                      var writer_ast_aliases12490 = function(argcv, o) {
                                                                        this.data["aliases"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj12238.methods["aliases:="] = writer_ast_aliases12490;
                                                                      obj12238.mutable = true;
                                                                      setLineNumber(2303);    // compilenode array
                                                                      var array12491 = new PrimitiveGraceList([]);
                                                                      obj12238.data["exclusions"] = array12491;
                                                                      var reader_ast_exclusions12492 = function() {
                                                                        return this.data["exclusions"];
                                                                      };
                                                                      obj12238.methods["exclusions"] = reader_ast_exclusions12492;
                                                                      obj12238.data["exclusions"] = array12491;
                                                                      var writer_ast_exclusions12492 = function(argcv, o) {
                                                                        this.data["exclusions"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj12238.methods["exclusions:="] = writer_ast_exclusions12492;
                                                                      obj12238.mutable = true;
                                                                      setLineNumber(2304);    // compilenode identifier
                                                                      obj12238.data["isUse"] = GraceFalse;
                                                                      var reader_ast_isUse12493 = function() {
                                                                        return this.data["isUse"];
                                                                      };
                                                                      obj12238.methods["isUse"] = reader_ast_isUse12493;
                                                                      obj12238.data["isUse"] = GraceFalse;
                                                                      var writer_ast_isUse12493 = function(argcv, o) {
                                                                        this.data["isUse"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj12238.methods["isUse:="] = writer_ast_isUse12493;
                                                                      obj12238.mutable = true;
                                                                      superDepth = origSuperDepth;
                                                                    };
                                                                    obj_init_12238.apply(obj12238, []);
                                                                    return obj12238;
                                                                  };
                                                                  func12237.paramCounts = [1];
                                                                  obj12232.methods["new"] = func12237;
                                                                  func12237.definitionLine = 2297;
                                                                  func12237.definitionModule = "ast";
                                                                    var func12494 = function(argcv) {    // method new(1     )()object
                                                                      var curarg = 1;
                                                                      var var_expr = arguments[curarg];
                                                                      curarg++;
                                                                      var inheritingObject = arguments[curarg++];
                                                                      // Start argument processing
                                                                      curarg = 1;
                                                                      curarg++;
                                                                      // End argument processing
                                                                      setModuleName("ast");
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var obj12495 = Grace_allocObject(null, "new");
                                                                      obj12495.definitionModule = "ast";
                                                                      obj12495.definitionLine = 2297;
                                                                      var inho12495 = inheritingObject;
                                                                      while (inho12495.superobj) inho12495 = inho12495.superobj;
                                                                      inho12495.superobj = obj12495;
                                                                      obj12495.data = inheritingObject.data;
                                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                                        obj12495._value = inheritingObject._value;
                                                                      obj12495.outer = this;
                                                                      var reader_ast_outer12496 = function() {
                                                                        return this.outer;
                                                                      };
                                                                      obj12495.methods["outer"] = reader_ast_outer12496;
                                                                      var obj_init_12495 = function() {
                                                                        var origSuperDepth = superDepth;
                                                                        superDepth = obj12495;
                                                                        var func12497 = function(argcv) {    // method isLegalInTrait
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLegalInTrait"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2306);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12498 = callmethodChecked(this, "isUse", [0]);
                                                                          return call12498;
                                                                        };
                                                                        func12497.paramCounts = [0];
                                                                        obj12495.methods["isLegalInTrait"] = func12497;
                                                                        func12497.definitionLine = 2306;
                                                                        func12497.definitionModule = "ast";
                                                                        var func12499 = function(argcv) {    // method isInherits
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isInherits"));
                                                                          setModuleName("ast");
                                                                          // isInherits is a simple accessor - elide try ... catch
                                                                          setLineNumber(2307);    // compilenode identifier
                                                                          return GraceTrue;
                                                                        };
                                                                        func12499.paramCounts = [0];
                                                                        obj12495.methods["isInherits"] = func12499;
                                                                        func12499.definitionLine = 2307;
                                                                        func12499.definitionModule = "ast";
                                                                        var func12500 = function(argcv) {    // method inheritsFromMember
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inheritsFromMember"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2308);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12501 = callmethodChecked(this, "value", [0]);
                                                                          var call12502 = callmethodChecked(call12501, "isMember", [0]);
                                                                          return call12502;
                                                                        };
                                                                        func12500.paramCounts = [0];
                                                                        obj12495.methods["inheritsFromMember"] = func12500;
                                                                        func12500.definitionLine = 2308;
                                                                        func12500.definitionModule = "ast";
                                                                        var func12503 = function(argcv) {    // method inheritsFromCall
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inheritsFromCall"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2309);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12504 = callmethodChecked(this, "value", [0]);
                                                                          var call12505 = callmethodChecked(call12504, "isCall", [0]);
                                                                          return call12505;
                                                                        };
                                                                        func12503.paramCounts = [0];
                                                                        obj12495.methods["inheritsFromCall"] = func12503;
                                                                        func12503.definitionLine = 2309;
                                                                        func12503.definitionModule = "ast";
                                                                        var func12506 = function(argcv) {    // method isExecutable
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                                                          setModuleName("ast");
                                                                          // isExecutable is a simple accessor - elide try ... catch
                                                                          setLineNumber(2310);    // compilenode identifier
                                                                          return GraceFalse;
                                                                        };
                                                                        func12506.paramCounts = [0];
                                                                        obj12495.methods["isExecutable"] = func12506;
                                                                        func12506.definitionLine = 2310;
                                                                        func12506.definitionModule = "ast";
                                                                        var func12507 = function(argcv) {    // method accept(1)from(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_visitor = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                          var var_as = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[1] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(2311);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("ast");
                                                                          var if12508 = GraceDone;
                                                                          setLineNumber(2312);    // compilenode identifier
                                                                          var call12509 = callmethodChecked(var_visitor, "visitInherits()up", [1, 1], this, var_as);
                                                                          if (Grace_isTrue(call12509)) {
                                                                            setLineNumber(2313);    // compilenode identifier
                                                                            var call12510 = callmethodChecked(var_as, "extend", [1], this);
                                                                            var var_newChain = call12510;
                                                                            setLineNumber(2314);    // compilenode call
                                                                            onSelf = true;
                                                                            var call12511 = callmethodChecked(this, "value", [0]);
                                                                            var call12512 = callmethodChecked(call12511, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                            setLineNumber(2315);    // compilenode block
                                                                            var block12513 = new GraceBlock(this, 2315, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block12513.real = function(var_a) {
                                                                              setLineNumber(2316);    // compilenode identifier
                                                                              var call12514 = callmethodChecked(var_a, "newName", [0]);
                                                                              var call12515 = callmethodChecked(call12514, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                              setLineNumber(2317);    // compilenode identifier
                                                                              var call12516 = callmethodChecked(var_a, "oldName", [0]);
                                                                              var call12517 = callmethodChecked(call12516, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                              return call12517;
                                                                            };
                                                                            setLineNumber(2315);    // compilenode call
                                                                            onSelf = true;
                                                                            var call12518 = callmethodChecked(this, "aliases", [0]);
                                                                            var call12519 = callmethodChecked(call12518, "do", [1], block12513);
                                                                            setLineNumber(2319);    // compilenode block
                                                                            var block12520 = new GraceBlock(this, 2319, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block12520.real = function(var_e) {
                                                                              setLineNumber(2319);    // compilenode identifier
                                                                              var call12521 = callmethodChecked(var_e, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                              return call12521;
                                                                            };
                                                                            onSelf = true;
                                                                            var call12522 = callmethodChecked(this, "exclusions", [0]);
                                                                            var call12523 = callmethodChecked(call12522, "do", [1], block12520);
                                                                            if12508 = call12523;
                                                                          }
                                                                          return if12508;
                                                                        };
                                                                        func12507.paramTypes = [];
                                                                        func12507.paramTypes.push([]);
                                                                        func12507.paramTypes.push([]);
                                                                        func12507.paramCounts = [1, 1];
                                                                        obj12495.methods["accept()from"] = func12507;
                                                                        func12507.definitionLine = 2311;
                                                                        func12507.definitionModule = "ast";
                                                                        var func12524 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_as = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2326);    // compilenode identifier
                                                                          var call12525 = callmethodChecked(var_k, "methdec", [0]);
                                                                          return call12525;
                                                                        };
                                                                        func12524.paramCounts = [1];
                                                                        obj12495.methods["declarationKindWithAncestors"] = func12524;
                                                                        func12524.definitionLine = 2322;
                                                                        func12524.definitionModule = "ast";
                                                                        var func12526 = function(argcv) {    // method map(1)ancestors(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_blk = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                          var var_as = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[1] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2329);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12527 = callmethodChecked(this, "shallowCopy", [0]);
                                                                          var var_n = call12527;
                                                                          setLineNumber(2330);    // compilenode identifier
                                                                          var call12528 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                          var var_newChain = call12528;
                                                                          setLineNumber(2331);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12529 = callmethodChecked(this, "value", [0]);
                                                                          var call12530 = callmethodChecked(call12529, "map()ancestors", [1, 1], var_blk, var_newChain);
                                                                          var call12531 = callmethodChecked(var_n, "value:=", [1], call12530);
                                                                          setLineNumber(2332);    // compilenode identifier
                                                                          var call12532 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                          return call12532;
                                                                        };
                                                                        func12526.paramCounts = [1, 1];
                                                                        obj12495.methods["map()ancestors"] = func12526;
                                                                        func12526.definitionLine = 2328;
                                                                        func12526.definitionModule = "ast";
                                                                        var func12533 = function(argcv) {    // method pretty(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_depth = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2335);    // compilenode string
                                                                          var string12534 = new GraceString("");
                                                                          var var_spc = string12534;
                                                                          setLineNumber(2336);    // compilenode num
                                                                          var opresult12537 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                          var block12538 = new GraceBlock(this, 2336, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block12538.real = function(var_i) {
                                                                            setLineNumber(2337);    // compilenode string
                                                                            var string12539 = new GraceString("  ");
                                                                            var opresult12542 = callmethodChecked(var_spc, "++", [1], string12539);
                                                                            var_spc = opresult12542;
                                                                            return GraceDone;
                                                                          };
                                                                          var call12543 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult12537, block12538);
                                                                          setLineNumber(2339);    // compilenode identifier
                                                                          var call12544 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                          var var_s = call12544;
                                                                          var if12545 = GraceDone;
                                                                          setLineNumber(2340);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12546 = callmethodChecked(this, "isUse", [0]);
                                                                          if (Grace_isTrue(call12546)) {
                                                                            var string12547 = new GraceString(" (use)");
                                                                            var string12550 = new GraceString("");
                                                                            var opresult12552 = callmethodChecked(string12550, "++", [1], var_s);
                                                                            var opresult12554 = callmethodChecked(opresult12552, "++", [1], string12547);
                                                                            var_s = opresult12554;
                                                                            if12545 = GraceDone;
                                                                          }
                                                                          setLineNumber(2341);    // compilenode identifier
                                                                          var opresult12557 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                                          onSelf = true;
                                                                          var call12558 = callmethodChecked(this, "value", [0]);
                                                                          var call12559 = callmethodChecked(call12558, "pretty", [1], opresult12557);
                                                                          var string12562 = new GraceString("\n");
                                                                          var opresult12565 = callmethodChecked(var_s, "++", [1], string12562);
                                                                          var opresult12567 = callmethodChecked(opresult12565, "++", [1], var_spc);
                                                                          var opresult12569 = callmethodChecked(opresult12567, "++", [1], call12559);
                                                                          var_s = opresult12569;
                                                                          setLineNumber(2342);    // compilenode block
                                                                          var block12570 = new GraceBlock(this, 2342, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block12570.real = function(var_a) {
                                                                            setLineNumber(2343);    // compilenode string
                                                                            var string12571 = new GraceString("");
                                                                            var call12573 = callmethodChecked(var_a, "pretty", [1], var_depth);
                                                                            var string12575 = new GraceString("\n");
                                                                            var string12578 = new GraceString("");
                                                                            var opresult12580 = callmethodChecked(string12578, "++", [1], var_s);
                                                                            var opresult12582 = callmethodChecked(opresult12580, "++", [1], string12575);
                                                                            var opresult12584 = callmethodChecked(opresult12582, "++", [1], call12573);
                                                                            var opresult12586 = callmethodChecked(opresult12584, "++", [1], string12571);
                                                                            var_s = opresult12586;
                                                                            return GraceDone;
                                                                          };
                                                                          setLineNumber(2342);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12587 = callmethodChecked(this, "aliases", [0]);
                                                                          var call12588 = callmethodChecked(call12587, "do", [1], block12570);
                                                                          var if12589 = GraceDone;
                                                                          setLineNumber(2345);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12590 = callmethodChecked(this, "exclusions", [0]);
                                                                          var call12591 = callmethodChecked(call12590, "isEmpty", [0]);
                                                                          var call12592 = callmethodChecked(call12591, "not", [0]);
                                                                          if (Grace_isTrue(call12592)) {
                                                                            var string12593 = new GraceString("");
                                                                            var string12596 = new GraceString("\n");
                                                                            var string12599 = new GraceString("");
                                                                            var opresult12601 = callmethodChecked(string12599, "++", [1], var_s);
                                                                            var opresult12603 = callmethodChecked(opresult12601, "++", [1], string12596);
                                                                            var opresult12605 = callmethodChecked(opresult12603, "++", [1], var_spc);
                                                                            var opresult12607 = callmethodChecked(opresult12605, "++", [1], string12593);
                                                                            var_s = opresult12607;
                                                                            if12589 = GraceDone;
                                                                          }
                                                                          setLineNumber(2346);    // compilenode block
                                                                          var block12608 = new GraceBlock(this, 2346, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block12608.real = function(var_e) {
                                                                            setLineNumber(2347);    // compilenode string
                                                                            var string12609 = new GraceString(" ");
                                                                            var string12612 = new GraceString(" exclude ");
                                                                            var string12615 = new GraceString("");
                                                                            var opresult12617 = callmethodChecked(string12615, "++", [1], var_s);
                                                                            var opresult12619 = callmethodChecked(opresult12617, "++", [1], string12612);
                                                                            var opresult12621 = callmethodChecked(opresult12619, "++", [1], var_e);
                                                                            var opresult12623 = callmethodChecked(opresult12621, "++", [1], string12609);
                                                                            var_s = opresult12623;
                                                                            return GraceDone;
                                                                          };
                                                                          setLineNumber(2346);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12624 = callmethodChecked(this, "exclusions", [0]);
                                                                          var call12625 = callmethodChecked(call12624, "do", [1], block12608);
                                                                          var if12626 = GraceDone;
                                                                          setLineNumber(2349);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12627 = callmethodChecked(this, "providedNames", [0]);
                                                                          var call12628 = callmethodChecked(call12627, "isEmpty", [0]);
                                                                          var call12629 = callmethodChecked(call12628, "not", [0]);
                                                                          if (Grace_isTrue(call12629)) {
                                                                            setLineNumber(2350);    // compilenode string
                                                                            var string12630 = new GraceString("");
                                                                            onSelf = true;
                                                                            var call12632 = callmethodChecked(this, "providedNames", [0]);
                                                                            var call12633 = callmethodChecked(call12632, "asList", [0]);
                                                                            var call12634 = callmethodChecked(call12633, "sort", [0]);
                                                                            var string12636 = new GraceString("Provided names: ");
                                                                            var string12639 = new GraceString("\n");
                                                                            var opresult12641 = callmethodChecked(string12639, "++", [1], var_spc);
                                                                            var opresult12643 = callmethodChecked(opresult12641, "++", [1], string12636);
                                                                            var opresult12645 = callmethodChecked(opresult12643, "++", [1], call12634);
                                                                            var opresult12647 = callmethodChecked(opresult12645, "++", [1], string12630);
                                                                            var opresult12650 = callmethodChecked(var_s, "++", [1], opresult12647);
                                                                            var_s = opresult12650;
                                                                            if12626 = GraceDone;
                                                                          }
                                                                          setLineNumber(2352);    // compilenode identifier
                                                                          return var_s;
                                                                        };
                                                                        func12533.paramCounts = [1];
                                                                        obj12495.methods["pretty"] = func12533;
                                                                        func12533.definitionLine = 2334;
                                                                        func12533.definitionModule = "ast";
                                                                        var func12651 = function(argcv) {    // method toGrace(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_depth = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(2354);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("ast");
                                                                          var if12652 = GraceDone;
                                                                          setLineNumber(2355);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12653 = callmethodChecked(this, "isUse", [0]);
                                                                          if (Grace_isTrue(call12653)) {
                                                                            var string12654 = new GraceString("use ");
                                                                            if12652 = string12654;
                                                                          } else {
                                                                            var string12655 = new GraceString("inherit ");
                                                                            if12652 = string12655;
                                                                          }
                                                                          var var_s = if12652;
                                                                          setLineNumber(2356);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12656 = callmethodChecked(this, "value", [0]);
                                                                          var call12657 = callmethodChecked(call12656, "toGrace", [1], new GraceNum(0));
                                                                          var opresult12660 = callmethodChecked(var_s, "++", [1], call12657);
                                                                          var_s = opresult12660;
                                                                          setLineNumber(2357);    // compilenode block
                                                                          var block12661 = new GraceBlock(this, 2357, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block12661.real = function(var_a) {
                                                                            setLineNumber(2358);    // compilenode string
                                                                            var string12662 = new GraceString(" ");
                                                                            var string12665 = new GraceString(" ");
                                                                            var string12668 = new GraceString("");
                                                                            var opresult12670 = callmethodChecked(string12668, "++", [1], var_s);
                                                                            var opresult12672 = callmethodChecked(opresult12670, "++", [1], string12665);
                                                                            var opresult12674 = callmethodChecked(opresult12672, "++", [1], var_a);
                                                                            var opresult12676 = callmethodChecked(opresult12674, "++", [1], string12662);
                                                                            var_s = opresult12676;
                                                                            return GraceDone;
                                                                          };
                                                                          setLineNumber(2357);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12677 = callmethodChecked(this, "aliases", [0]);
                                                                          var call12678 = callmethodChecked(call12677, "do", [1], block12661);
                                                                          setLineNumber(2360);    // compilenode block
                                                                          var block12679 = new GraceBlock(this, 2360, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block12679.real = function(var_e) {
                                                                            setLineNumber(2361);    // compilenode string
                                                                            var string12680 = new GraceString(" ");
                                                                            var call12682 = callmethodChecked(var_e, "nameString", [0]);
                                                                            var string12684 = new GraceString(" exclude ");
                                                                            var string12687 = new GraceString("");
                                                                            var opresult12689 = callmethodChecked(string12687, "++", [1], var_s);
                                                                            var opresult12691 = callmethodChecked(opresult12689, "++", [1], string12684);
                                                                            var opresult12693 = callmethodChecked(opresult12691, "++", [1], call12682);
                                                                            var opresult12695 = callmethodChecked(opresult12693, "++", [1], string12680);
                                                                            var_s = opresult12695;
                                                                            return GraceDone;
                                                                          };
                                                                          setLineNumber(2360);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12696 = callmethodChecked(this, "exclusions", [0]);
                                                                          var call12697 = callmethodChecked(call12696, "do", [1], block12679);
                                                                          setLineNumber(2363);    // return value
                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], var_s)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method toGrace(1) does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          return var_s;
                                                                        };
                                                                        func12651.paramTypes = [];
                                                                        func12651.paramTypes.push([type_Number, "depth"]);
                                                                        func12651.paramCounts = [1];
                                                                        obj12495.methods["toGrace"] = func12651;
                                                                        func12651.definitionLine = 2354;
                                                                        func12651.definitionModule = "ast";
                                                                        var func12698 = function(argcv) {    // method asString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2366);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12699 = callmethodChecked(this, "value", [0]);
                                                                          var call12700 = callmethodChecked(call12699, "toGrace", [1], new GraceNum(0));
                                                                          var if12702 = GraceDone;
                                                                          onSelf = true;
                                                                          var call12703 = callmethodChecked(this, "isUse", [0]);
                                                                          if (Grace_isTrue(call12703)) {
                                                                            var string12704 = new GraceString("use ");
                                                                            if12702 = string12704;
                                                                          } else {
                                                                            var string12705 = new GraceString("inherit ");
                                                                            if12702 = string12705;
                                                                          }
                                                                          var opresult12707 = callmethodChecked(if12702, "++", [1], call12700);
                                                                          return opresult12707;
                                                                        };
                                                                        func12698.paramCounts = [0];
                                                                        obj12495.methods["asString"] = func12698;
                                                                        func12698.definitionLine = 2365;
                                                                        func12698.definitionModule = "ast";
                                                                        var func12708 = function(argcv) {    // method nameString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2368);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12709 = callmethodChecked(this, "value", [0]);
                                                                          var call12710 = callmethodChecked(call12709, "toGrace", [1], new GraceNum(0));
                                                                          return call12710;
                                                                        };
                                                                        func12708.paramCounts = [0];
                                                                        obj12495.methods["nameString"] = func12708;
                                                                        func12708.definitionLine = 2368;
                                                                        func12708.definitionModule = "ast";
                                                                        var func12711 = function(argcv) {    // method addAlias(1)for(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_newName = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addAlias (arg list 1) of addAlias(1)for(1)"));
                                                                          var var_oldName = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[1] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for for (arg list 2) of addAlias(1)for(1)"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2370);    // compilenode call
                                                                          var call12712 = callmethodChecked(superDepth, "outer", [0]);
                                                                          onOuter = true;
                                                                          onSelf = true;
                                                                          var call12713 = callmethodChecked(call12712, "outer", [0]);
                                                                          onOuter = true;
                                                                          onSelf = true;
                                                                          var call12714 = callmethodChecked(call12713, "aliasNew()old", [1, 1], var_newName, var_oldName);
                                                                          onSelf = true;
                                                                          var call12715 = callmethodChecked(this, "aliases", [0]);
                                                                          var call12716 = callmethodChecked(call12715, "push", [1], call12714);
                                                                          return call12716;
                                                                        };
                                                                        func12711.paramCounts = [1, 1];
                                                                        obj12495.methods["addAlias()for"] = func12711;
                                                                        func12711.definitionLine = 2369;
                                                                        func12711.definitionModule = "ast";
                                                                        var func12717 = function(argcv) {    // method addExclusion(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_methName = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addExclusion(1)"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2373);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12718 = callmethodChecked(this, "exclusions", [0]);
                                                                          var call12719 = callmethodChecked(call12718, "push", [1], var_methName);
                                                                          return call12719;
                                                                        };
                                                                        func12717.paramCounts = [1];
                                                                        obj12495.methods["addExclusion"] = func12717;
                                                                        func12717.definitionLine = 2372;
                                                                        func12717.definitionModule = "ast";
                                                                        var func12720 = function(argcv) {    // method shallowCopy
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2376);    // compilenode identifier
                                                                          var call12721 = callmethodChecked(var_inheritsNode, "new", [1], var_nullNode);
                                                                          var call12722 = callmethodChecked(call12721, "shallowCopyFieldsFrom", [1], this);
                                                                          return call12722;
                                                                        };
                                                                        func12720.paramCounts = [0];
                                                                        obj12495.methods["shallowCopy"] = func12720;
                                                                        func12720.definitionLine = 2375;
                                                                        func12720.definitionModule = "ast";
                                                                        var func12723 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_other = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2379);    // compilenode identifier
                                                                          var call12724 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                                          setLineNumber(2380);    // compilenode identifier
                                                                          var call12725 = callmethodChecked(var_other, "providedNames", [0]);
                                                                          onSelf = true;
                                                                          var call12726 = callmethodChecked(this, "providedNames:=", [1], call12725);
                                                                          setLineNumber(2381);    // compilenode identifier
                                                                          var call12727 = callmethodChecked(var_other, "aliases", [0]);
                                                                          onSelf = true;
                                                                          var call12728 = callmethodChecked(this, "aliases:=", [1], call12727);
                                                                          setLineNumber(2382);    // compilenode identifier
                                                                          var call12729 = callmethodChecked(var_other, "exclusions", [0]);
                                                                          onSelf = true;
                                                                          var call12730 = callmethodChecked(this, "exclusions:=", [1], call12729);
                                                                          setLineNumber(2383);    // compilenode identifier
                                                                          var call12731 = callmethodChecked(var_other, "isUse", [0]);
                                                                          onSelf = true;
                                                                          var call12732 = callmethodChecked(this, "isUse:=", [1], call12731);
                                                                          setLineNumber(2384);    // compilenode identifier
                                                                          return this;
                                                                        };
                                                                        func12723.paramCounts = [1];
                                                                        obj12495.methods["shallowCopyFieldsFrom"] = func12723;
                                                                        func12723.definitionLine = 2378;
                                                                        func12723.definitionModule = "ast";
                                                                        var func12733 = function(argcv) {    // method statementName
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                                          setModuleName("ast");
                                                                          var if12734 = GraceDone;
                                                                          setLineNumber(2387);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12735 = callmethodChecked(this, "isUse", [0]);
                                                                          if (Grace_isTrue(call12735)) {
                                                                            var string12736 = new GraceString("use");
                                                                            if12734 = string12736;
                                                                          } else {
                                                                            var string12737 = new GraceString("inherit");
                                                                            if12734 = string12737;
                                                                          }
                                                                          return if12734;
                                                                        };
                                                                        func12733.paramCounts = [0];
                                                                        obj12495.methods["statementName"] = func12733;
                                                                        func12733.definitionLine = 2386;
                                                                        func12733.definitionModule = "ast";
                                                                        setLineNumber(2298);    // compilenode call
                                                                        var call12738 = callmethodChecked(superDepth, "outer", [0]);
                                                                        onOuter = true;
                                                                        onSelf = true;
                                                                        var call12739 = callmethodChecked(call12738, "outer", [0]);
                                                                        onOuter = true;
                                                                        onSelf = true;
                                                                        var call12740 = callmethodChecked(call12739, "baseNode()object", [0, 1], this);
                                                                        obj12495.superobj = call12740;
                                                                        if (call12740.data) obj12495.data = call12740.data;
                                                                        if (call12740.hasOwnProperty('_value'))
                                                                            obj12495._value = call12740._value;
                                                                        setLineNumber(2299);    // compilenode string
                                                                        var string12741 = new GraceString("inherits");
                                                                        obj12495.data["kind"] = string12741;
                                                                        var reader_ast_kind12742 = function() {
                                                                          return this.data["kind"];
                                                                        };
                                                                        reader_ast_kind12742.def = true;
                                                                        obj12495.methods["kind"] = reader_ast_kind12742;
                                                                        setLineNumber(2300);    // compilenode identifier
                                                                        obj12495.data["value"] = var_expr;
                                                                        var reader_ast_value12743 = function() {
                                                                          return this.data["value"];
                                                                        };
                                                                        obj12495.methods["value"] = reader_ast_value12743;
                                                                        obj12495.data["value"] = var_expr;
                                                                        var writer_ast_value12743 = function(argcv, o) {
                                                                          this.data["value"] = o;
                                                                          return GraceDone;
                                                                        };
                                                                        obj12495.methods["value:="] = writer_ast_value12743;
                                                                        obj12495.mutable = true;
                                                                        setLineNumber(2301);    // compilenode call
                                                                        var call12744 = callmethodChecked(var_prelude, "emptySet", [0]);
                                                                        obj12495.data["providedNames"] = call12744;
                                                                        var reader_ast_providedNames12745 = function() {
                                                                          return this.data["providedNames"];
                                                                        };
                                                                        obj12495.methods["providedNames"] = reader_ast_providedNames12745;
                                                                        obj12495.data["providedNames"] = call12744;
                                                                        var writer_ast_providedNames12745 = function(argcv, o) {
                                                                          this.data["providedNames"] = o;
                                                                          return GraceDone;
                                                                        };
                                                                        obj12495.methods["providedNames:="] = writer_ast_providedNames12745;
                                                                        obj12495.mutable = true;
                                                                        setLineNumber(2302);    // compilenode array
                                                                        var array12746 = new PrimitiveGraceList([]);
                                                                        obj12495.data["aliases"] = array12746;
                                                                        var reader_ast_aliases12747 = function() {
                                                                          return this.data["aliases"];
                                                                        };
                                                                        obj12495.methods["aliases"] = reader_ast_aliases12747;
                                                                        obj12495.data["aliases"] = array12746;
                                                                        var writer_ast_aliases12747 = function(argcv, o) {
                                                                          this.data["aliases"] = o;
                                                                          return GraceDone;
                                                                        };
                                                                        obj12495.methods["aliases:="] = writer_ast_aliases12747;
                                                                        obj12495.mutable = true;
                                                                        setLineNumber(2303);    // compilenode array
                                                                        var array12748 = new PrimitiveGraceList([]);
                                                                        obj12495.data["exclusions"] = array12748;
                                                                        var reader_ast_exclusions12749 = function() {
                                                                          return this.data["exclusions"];
                                                                        };
                                                                        obj12495.methods["exclusions"] = reader_ast_exclusions12749;
                                                                        obj12495.data["exclusions"] = array12748;
                                                                        var writer_ast_exclusions12749 = function(argcv, o) {
                                                                          this.data["exclusions"] = o;
                                                                          return GraceDone;
                                                                        };
                                                                        obj12495.methods["exclusions:="] = writer_ast_exclusions12749;
                                                                        obj12495.mutable = true;
                                                                        setLineNumber(2304);    // compilenode identifier
                                                                        obj12495.data["isUse"] = GraceFalse;
                                                                        var reader_ast_isUse12750 = function() {
                                                                          return this.data["isUse"];
                                                                        };
                                                                        obj12495.methods["isUse"] = reader_ast_isUse12750;
                                                                        obj12495.data["isUse"] = GraceFalse;
                                                                        var writer_ast_isUse12750 = function(argcv, o) {
                                                                          this.data["isUse"] = o;
                                                                          return GraceDone;
                                                                        };
                                                                        obj12495.methods["isUse:="] = writer_ast_isUse12750;
                                                                        obj12495.mutable = true;
                                                                        superDepth = origSuperDepth;
                                                                      };
                                                                      obj_init_12495.apply(inheritingObject, []);
                                                                      return obj12495;
                                                                      };
                                                                      obj12232.methods["new()object"] = func12494;
                                                                    superDepth = origSuperDepth;
                                                                  };
                                                                  obj_init_12232.apply(obj12232, []);
                                                                  var var_inheritsNode = obj12232;
                                                                  setLineNumber(2301);    // compilenode method
                                                                  var func12751 = function(argcv) {    // method inheritsNode
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inheritsNode"));
                                                                    setModuleName("ast");
                                                                    // inheritsNode is a simple accessor - elide try ... catch
                                                                    setLineNumber(2291);    // compilenode identifier
                                                                    return var_inheritsNode;
                                                                  };
                                                                  func12751.paramCounts = [0];
                                                                  this.methods["inheritsNode"] = func12751;
                                                                  func12751.definitionLine = 2301;
                                                                  func12751.definitionModule = "ast";
                                                                  this.methods["inheritsNode"].debug = "def";
                                                                  setLineNumber(2391);    // compilenode typedec
                                                                  // Type decl AliasPair
                                                                  //   Type literal 
                                                                  var type12753 = new GraceType("AliasPair");
                                                                  type12753.typeMethods.push("newName");
                                                                  type12753.typeMethods.push("oldName");
                                                                  var var_AliasPair = type12753;
                                                                  setLineNumber(2301);    // compilenode method
                                                                  var func12754 = function(argcv) {    // method AliasPair
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for AliasPair"));
                                                                    setModuleName("ast");
                                                                    // AliasPair is a simple accessor - elide try ... catch
                                                                    setLineNumber(2391);    // compilenode identifier
                                                                    return var_AliasPair;
                                                                  };
                                                                  func12754.paramCounts = [0];
                                                                  this.methods["AliasPair"] = func12754;
                                                                  func12754.definitionLine = 2301;
                                                                  func12754.definitionModule = "ast";
                                                                  setLineNumber(2415);    // compilenode object
                                                                  var obj12755 = Grace_allocObject(GraceObject, "blankNode");
                                                                  obj12755.definitionModule = "ast";
                                                                  obj12755.definitionLine = 2415;
                                                                  obj12755.outer = this;
                                                                  var reader_ast_outer12756 = function() {
                                                                    return this.outer;
                                                                  };
                                                                  obj12755.methods["outer"] = reader_ast_outer12756;
                                                                  var obj_init_12755 = function() {
                                                                    var origSuperDepth = superDepth;
                                                                    superDepth = obj12755;
                                                                    var func12757 = function(argcv) {    // method new
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new"));
                                                                      setModuleName("ast");
                                                                      setLineNumber(2416);    // compilenode object
                                                                      var obj12758 = Grace_allocObject(null, "blankNode.new");
                                                                      obj12758.definitionModule = "ast";
                                                                      obj12758.definitionLine = 2416;
                                                                      obj12758.outer = this;
                                                                      var reader_ast_outer12759 = function() {
                                                                        return this.outer;
                                                                      };
                                                                      obj12758.methods["outer"] = reader_ast_outer12759;
                                                                      var obj_init_12758 = function() {
                                                                        var origSuperDepth = superDepth;
                                                                        superDepth = obj12758;
                                                                        var func12760 = function(argcv) {    // method isExecutable
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                                                          setModuleName("ast");
                                                                          // isExecutable is a simple accessor - elide try ... catch
                                                                          setLineNumber(2420);    // compilenode identifier
                                                                          return GraceFalse;
                                                                        };
                                                                        func12760.paramCounts = [0];
                                                                        obj12758.methods["isExecutable"] = func12760;
                                                                        func12760.definitionLine = 2420;
                                                                        func12760.definitionModule = "ast";
                                                                        var func12761 = function(argcv) {    // method accept(1)from(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_visitor = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                          var var_as = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[1] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(2423);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("ast");
                                                                          setLineNumber(2424);    // compilenode identifier
                                                                          var call12762 = callmethodChecked(var_visitor, "visitBlank()up", [1, 1], this, var_as);
                                                                          return call12762;
                                                                        };
                                                                        func12761.paramTypes = [];
                                                                        func12761.paramTypes.push([]);
                                                                        func12761.paramTypes.push([]);
                                                                        func12761.paramCounts = [1, 1];
                                                                        obj12758.methods["accept()from"] = func12761;
                                                                        func12761.definitionLine = 2423;
                                                                        func12761.definitionModule = "ast";
                                                                        var func12763 = function(argcv) {    // method map(1)ancestors(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_blk = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                          var var_as = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[1] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2427);    // compilenode call
                                                                          onSelf = true;
                                                                          var call12764 = callmethodChecked(this, "shallowCopy", [0]);
                                                                          var var_n = call12764;
                                                                          setLineNumber(2428);    // compilenode identifier
                                                                          var call12765 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                          var var_newChain = call12765;
                                                                          setLineNumber(2429);    // compilenode identifier
                                                                          var call12766 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                          return call12766;
                                                                        };
                                                                        func12763.paramCounts = [1, 1];
                                                                        obj12758.methods["map()ancestors"] = func12763;
                                                                        func12763.definitionLine = 2426;
                                                                        func12763.definitionModule = "ast";
                                                                        var func12767 = function(argcv) {    // method nameString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2431);    // compilenode string
                                                                          var string12768 = new GraceString("");
                                                                          return string12768;
                                                                        };
                                                                        func12767.paramCounts = [0];
                                                                        obj12758.methods["nameString"] = func12767;
                                                                        func12767.definitionLine = 2431;
                                                                        func12767.definitionModule = "ast";
                                                                        var func12769 = function(argcv) {    // method asString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2432);    // compilenode string
                                                                          var string12770 = new GraceString("blank");
                                                                          return string12770;
                                                                        };
                                                                        func12769.paramCounts = [0];
                                                                        obj12758.methods["asString"] = func12769;
                                                                        func12769.definitionLine = 2432;
                                                                        func12769.definitionModule = "ast";
                                                                        var func12771 = function(argcv) {    // method toGrace(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_depth = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(2433);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("ast");
                                                                          var string12772 = new GraceString("");
                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], string12772)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method toGrace(1) does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          return string12772;
                                                                        };
                                                                        func12771.paramTypes = [];
                                                                        func12771.paramTypes.push([type_Number, "depth"]);
                                                                        func12771.paramCounts = [1];
                                                                        obj12758.methods["toGrace"] = func12771;
                                                                        func12771.definitionLine = 2433;
                                                                        func12771.definitionModule = "ast";
                                                                        var func12773 = function(argcv) {    // method shallowCopy
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2435);    // compilenode identifier
                                                                          var call12774 = callmethodChecked(var_blankNode, "new", [0]);
                                                                          var call12775 = callmethodChecked(call12774, "shallowCopyFieldsFrom", [1], this);
                                                                          return call12775;
                                                                        };
                                                                        func12773.paramCounts = [0];
                                                                        obj12758.methods["shallowCopy"] = func12773;
                                                                        func12773.definitionLine = 2434;
                                                                        func12773.definitionModule = "ast";
                                                                        setLineNumber(2417);    // compilenode call
                                                                        var call12776 = callmethodChecked(superDepth, "outer", [0]);
                                                                        onOuter = true;
                                                                        onSelf = true;
                                                                        var call12777 = callmethodChecked(call12776, "outer", [0]);
                                                                        onOuter = true;
                                                                        onSelf = true;
                                                                        var call12778 = callmethodChecked(call12777, "baseNode()object", [0, 1], this);
                                                                        obj12758.superobj = call12778;
                                                                        if (call12778.data) obj12758.data = call12778.data;
                                                                        if (call12778.hasOwnProperty('_value'))
                                                                            obj12758._value = call12778._value;
                                                                        setLineNumber(2418);    // compilenode string
                                                                        var string12779 = new GraceString("blank");
                                                                        obj12758.data["kind"] = string12779;
                                                                        var reader_ast_kind12780 = function() {
                                                                          return this.data["kind"];
                                                                        };
                                                                        reader_ast_kind12780.def = true;
                                                                        obj12758.methods["kind"] = reader_ast_kind12780;
                                                                        setLineNumber(2419);    // compilenode string
                                                                        var string12781 = new GraceString("blank");
                                                                        obj12758.data["value"] = string12781;
                                                                        var reader_ast_value12782 = function() {
                                                                          return this.data["value"];
                                                                        };
                                                                        reader_ast_value12782.def = true;
                                                                        obj12758.methods["value"] = reader_ast_value12782;
                                                                        superDepth = origSuperDepth;
                                                                      };
                                                                      obj_init_12758.apply(obj12758, []);
                                                                      return obj12758;
                                                                    };
                                                                    func12757.paramCounts = [0];
                                                                    obj12755.methods["new"] = func12757;
                                                                    func12757.definitionLine = 2416;
                                                                    func12757.definitionModule = "ast";
                                                                      var func12783 = function(argcv) {    // method new()object
                                                                        var curarg = 1;
                                                                        var inheritingObject = arguments[curarg++];
                                                                        // Start argument processing
                                                                        curarg = 1;
                                                                        // End argument processing
                                                                        setModuleName("ast");
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var obj12784 = Grace_allocObject(null, "new");
                                                                        obj12784.definitionModule = "ast";
                                                                        obj12784.definitionLine = 2416;
                                                                        var inho12784 = inheritingObject;
                                                                        while (inho12784.superobj) inho12784 = inho12784.superobj;
                                                                        inho12784.superobj = obj12784;
                                                                        obj12784.data = inheritingObject.data;
                                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                                          obj12784._value = inheritingObject._value;
                                                                        obj12784.outer = this;
                                                                        var reader_ast_outer12785 = function() {
                                                                          return this.outer;
                                                                        };
                                                                        obj12784.methods["outer"] = reader_ast_outer12785;
                                                                        var obj_init_12784 = function() {
                                                                          var origSuperDepth = superDepth;
                                                                          superDepth = obj12784;
                                                                          var func12786 = function(argcv) {    // method isExecutable
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                                                            setModuleName("ast");
                                                                            // isExecutable is a simple accessor - elide try ... catch
                                                                            setLineNumber(2420);    // compilenode identifier
                                                                            return GraceFalse;
                                                                          };
                                                                          func12786.paramCounts = [0];
                                                                          obj12784.methods["isExecutable"] = func12786;
                                                                          func12786.definitionLine = 2420;
                                                                          func12786.definitionModule = "ast";
                                                                          var func12787 = function(argcv) {    // method accept(1)from(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_visitor = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                            var var_as = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[1] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            setLineNumber(2423);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("ast");
                                                                            setLineNumber(2424);    // compilenode identifier
                                                                            var call12788 = callmethodChecked(var_visitor, "visitBlank()up", [1, 1], this, var_as);
                                                                            return call12788;
                                                                          };
                                                                          func12787.paramTypes = [];
                                                                          func12787.paramTypes.push([]);
                                                                          func12787.paramTypes.push([]);
                                                                          func12787.paramCounts = [1, 1];
                                                                          obj12784.methods["accept()from"] = func12787;
                                                                          func12787.definitionLine = 2423;
                                                                          func12787.definitionModule = "ast";
                                                                          var func12789 = function(argcv) {    // method map(1)ancestors(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_blk = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                            var var_as = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[1] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2427);    // compilenode call
                                                                            onSelf = true;
                                                                            var call12790 = callmethodChecked(this, "shallowCopy", [0]);
                                                                            var var_n = call12790;
                                                                            setLineNumber(2428);    // compilenode identifier
                                                                            var call12791 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                            var var_newChain = call12791;
                                                                            setLineNumber(2429);    // compilenode identifier
                                                                            var call12792 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                            return call12792;
                                                                          };
                                                                          func12789.paramCounts = [1, 1];
                                                                          obj12784.methods["map()ancestors"] = func12789;
                                                                          func12789.definitionLine = 2426;
                                                                          func12789.definitionModule = "ast";
                                                                          var func12793 = function(argcv) {    // method nameString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for nameString"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2431);    // compilenode string
                                                                            var string12794 = new GraceString("");
                                                                            return string12794;
                                                                          };
                                                                          func12793.paramCounts = [0];
                                                                          obj12784.methods["nameString"] = func12793;
                                                                          func12793.definitionLine = 2431;
                                                                          func12793.definitionModule = "ast";
                                                                          var func12795 = function(argcv) {    // method asString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2432);    // compilenode string
                                                                            var string12796 = new GraceString("blank");
                                                                            return string12796;
                                                                          };
                                                                          func12795.paramCounts = [0];
                                                                          obj12784.methods["asString"] = func12795;
                                                                          func12795.definitionLine = 2432;
                                                                          func12795.definitionModule = "ast";
                                                                          var func12797 = function(argcv) {    // method toGrace(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_depth = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            setLineNumber(2433);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("ast");
                                                                            var string12798 = new GraceString("");
                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], string12798)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method toGrace(1) does not have " + 
                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                            return string12798;
                                                                          };
                                                                          func12797.paramTypes = [];
                                                                          func12797.paramTypes.push([type_Number, "depth"]);
                                                                          func12797.paramCounts = [1];
                                                                          obj12784.methods["toGrace"] = func12797;
                                                                          func12797.definitionLine = 2433;
                                                                          func12797.definitionModule = "ast";
                                                                          var func12799 = function(argcv) {    // method shallowCopy
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2435);    // compilenode identifier
                                                                            var call12800 = callmethodChecked(var_blankNode, "new", [0]);
                                                                            var call12801 = callmethodChecked(call12800, "shallowCopyFieldsFrom", [1], this);
                                                                            return call12801;
                                                                          };
                                                                          func12799.paramCounts = [0];
                                                                          obj12784.methods["shallowCopy"] = func12799;
                                                                          func12799.definitionLine = 2434;
                                                                          func12799.definitionModule = "ast";
                                                                          setLineNumber(2417);    // compilenode call
                                                                          var call12802 = callmethodChecked(superDepth, "outer", [0]);
                                                                          onOuter = true;
                                                                          onSelf = true;
                                                                          var call12803 = callmethodChecked(call12802, "outer", [0]);
                                                                          onOuter = true;
                                                                          onSelf = true;
                                                                          var call12804 = callmethodChecked(call12803, "baseNode()object", [0, 1], this);
                                                                          obj12784.superobj = call12804;
                                                                          if (call12804.data) obj12784.data = call12804.data;
                                                                          if (call12804.hasOwnProperty('_value'))
                                                                              obj12784._value = call12804._value;
                                                                          setLineNumber(2418);    // compilenode string
                                                                          var string12805 = new GraceString("blank");
                                                                          obj12784.data["kind"] = string12805;
                                                                          var reader_ast_kind12806 = function() {
                                                                            return this.data["kind"];
                                                                          };
                                                                          reader_ast_kind12806.def = true;
                                                                          obj12784.methods["kind"] = reader_ast_kind12806;
                                                                          setLineNumber(2419);    // compilenode string
                                                                          var string12807 = new GraceString("blank");
                                                                          obj12784.data["value"] = string12807;
                                                                          var reader_ast_value12808 = function() {
                                                                            return this.data["value"];
                                                                          };
                                                                          reader_ast_value12808.def = true;
                                                                          obj12784.methods["value"] = reader_ast_value12808;
                                                                          superDepth = origSuperDepth;
                                                                        };
                                                                        obj_init_12784.apply(inheritingObject, []);
                                                                        return obj12784;
                                                                        };
                                                                        obj12755.methods["new()object"] = func12783;
                                                                      superDepth = origSuperDepth;
                                                                    };
                                                                    obj_init_12755.apply(obj12755, []);
                                                                    var var_blankNode = obj12755;
                                                                    setLineNumber(2417);    // compilenode method
                                                                    var func12809 = function(argcv) {    // method blankNode
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for blankNode"));
                                                                      setModuleName("ast");
                                                                      // blankNode is a simple accessor - elide try ... catch
                                                                      setLineNumber(2415);    // compilenode identifier
                                                                      return var_blankNode;
                                                                    };
                                                                    func12809.paramCounts = [0];
                                                                    this.methods["blankNode"] = func12809;
                                                                    func12809.definitionLine = 2417;
                                                                    func12809.definitionModule = "ast";
                                                                    this.methods["blankNode"].debug = "def";
                                                                    setLineNumber(2439);    // compilenode object
                                                                    var obj12810 = Grace_allocObject(GraceObject, "signaturePart");
                                                                    obj12810.definitionModule = "ast";
                                                                    obj12810.definitionLine = 2439;
                                                                    obj12810.outer = this;
                                                                    var reader_ast_outer12811 = function() {
                                                                      return this.outer;
                                                                    };
                                                                    obj12810.methods["outer"] = reader_ast_outer12811;
                                                                    var obj_init_12810 = function() {
                                                                      var origSuperDepth = superDepth;
                                                                      superDepth = obj12810;
                                                                      var func12812 = function(argcv) {    // method new
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2441);    // compilenode string
                                                                        var string12813 = new GraceString("");
                                                                        var array12814 = new PrimitiveGraceList([]);
                                                                        onSelf = true;
                                                                        var call12815 = callmethodChecked(this, "partName()params", [1, 1], string12813, array12814);
                                                                        return call12815;
                                                                      };
                                                                      func12812.paramCounts = [0];
                                                                      obj12810.methods["new"] = func12812;
                                                                      func12812.definitionLine = 2440;
                                                                      func12812.definitionModule = "ast";
                                                                      var func12816 = function(argcv) {    // method partName(1)scope(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_n = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for partName (arg list 1) of partName(1)scope(1)"));
                                                                        var var_s = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[1] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 2) of partName(1)scope(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2444);    // compilenode array
                                                                        var array12817 = new PrimitiveGraceList([]);
                                                                        onSelf = true;
                                                                        var call12818 = callmethodChecked(this, "partName()params", [1, 1], var_n, array12817);
                                                                        var var_result = call12818;
                                                                        setLineNumber(2445);    // compilenode identifier
                                                                        var call12819 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                                                        setLineNumber(2446);    // compilenode identifier
                                                                        return var_result;
                                                                      };
                                                                      func12816.paramCounts = [1, 1];
                                                                      obj12810.methods["partName()scope"] = func12816;
                                                                      func12816.definitionLine = 2443;
                                                                      func12816.definitionModule = "ast";
                                                                      var func12820 = function(argcv) {    // method partName(1)params(1)scope(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_n = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for partName (arg list 1) of partName(1)params(1)scope(1)"));
                                                                        var var_ps = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[1] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for params (arg list 2) of partName(1)params(1)scope(1)"));
                                                                        var var_s = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[2] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 3) of partName(1)params(1)scope(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2449);    // compilenode identifier
                                                                        onSelf = true;
                                                                        var call12821 = callmethodChecked(this, "partName()params", [1, 1], var_n, var_ps);
                                                                        var var_result = call12821;
                                                                        setLineNumber(2450);    // compilenode identifier
                                                                        var call12822 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                                                        setLineNumber(2451);    // compilenode identifier
                                                                        return var_result;
                                                                      };
                                                                      func12820.paramCounts = [1, 1, 1];
                                                                      obj12810.methods["partName()params()scope"] = func12820;
                                                                      func12820.definitionLine = 2448;
                                                                      func12820.definitionModule = "ast";
                                                                      var func12823 = function(argcv) {    // method partName(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_n = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for partName(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2454);    // compilenode array
                                                                        var array12824 = new PrimitiveGraceList([]);
                                                                        onSelf = true;
                                                                        var call12825 = callmethodChecked(this, "partName()params", [1, 1], var_n, array12824);
                                                                        return call12825;
                                                                      };
                                                                      func12823.paramCounts = [1];
                                                                      obj12810.methods["partName"] = func12823;
                                                                      func12823.definitionLine = 2453;
                                                                      func12823.definitionModule = "ast";
                                                                      var func12826 = function(argcv) {    // method partName(1)params(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_n = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for partName (arg list 1) of partName(1)params(1)"));
                                                                        var var_ps = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[1] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for params (arg list 2) of partName(1)params(1)"));
                                                                        setModuleName("ast");
                                                                        setLineNumber(2456);    // compilenode object
                                                                        var obj12827 = Grace_allocObject(null, "signaturePart.partName()params");
                                                                        obj12827.definitionModule = "ast";
                                                                        obj12827.definitionLine = 2456;
                                                                        obj12827.outer = this;
                                                                        var reader_ast_outer12828 = function() {
                                                                          return this.outer;
                                                                        };
                                                                        obj12827.methods["outer"] = reader_ast_outer12828;
                                                                        var obj_init_12827 = function() {
                                                                          var origSuperDepth = superDepth;
                                                                          superDepth = obj12827;
                                                                          var func12829 = function(argcv) {    // method accept(1)from(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_visitor = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                            var var_as = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[1] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            setLineNumber(2464);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("ast");
                                                                            var if12830 = GraceDone;
                                                                            setLineNumber(2465);    // compilenode identifier
                                                                            var call12831 = callmethodChecked(var_visitor, "visitSignaturePart()up", [1, 1], this, var_as);
                                                                            if (Grace_isTrue(call12831)) {
                                                                              setLineNumber(2466);    // compilenode identifier
                                                                              var call12832 = callmethodChecked(var_as, "extend", [1], this);
                                                                              var var_newChain = call12832;
                                                                              setLineNumber(2467);    // compilenode block
                                                                              var block12833 = new GraceBlock(this, 2467, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block12833.real = function(var_p) {
                                                                                setLineNumber(2467);    // compilenode identifier
                                                                                var call12834 = callmethodChecked(var_p, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                                return call12834;
                                                                              };
                                                                              onSelf = true;
                                                                              var call12835 = callmethodChecked(this, "params", [0]);
                                                                              var call12836 = callmethodChecked(call12835, "do", [1], block12833);
                                                                              var if12837 = GraceDone;
                                                                              setLineNumber(2468);    // compilenode call
                                                                              onSelf = true;
                                                                              var call12838 = callmethodChecked(this, "typeParams", [0]);
                                                                              var opresult12841 = callmethodChecked(GraceFalse, "\u2260", [1], call12838);
                                                                              if (Grace_isTrue(opresult12841)) {
                                                                                setLineNumber(2469);    // compilenode call
                                                                                onSelf = true;
                                                                                var call12842 = callmethodChecked(this, "typeParams", [0]);
                                                                                var call12843 = callmethodChecked(call12842, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                                if12837 = call12843;
                                                                              }
                                                                              if12830 = if12837;
                                                                            }
                                                                            return if12830;
                                                                          };
                                                                          func12829.paramTypes = [];
                                                                          func12829.paramTypes.push([]);
                                                                          func12829.paramTypes.push([]);
                                                                          func12829.paramCounts = [1, 1];
                                                                          obj12827.methods["accept()from"] = func12829;
                                                                          func12829.definitionLine = 2464;
                                                                          func12829.definitionModule = "ast";
                                                                          var func12844 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_as = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2473);    // compilenode identifier
                                                                            var call12845 = callmethodChecked(var_k, "parameter", [0]);
                                                                            return call12845;
                                                                          };
                                                                          func12844.paramCounts = [1];
                                                                          obj12827.methods["declarationKindWithAncestors"] = func12844;
                                                                          func12844.definitionLine = 2473;
                                                                          func12844.definitionModule = "ast";
                                                                          var func12846 = function(argcv) {    // method map(1)ancestors(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_blk = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                            var var_as = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[1] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2475);    // compilenode call
                                                                            onSelf = true;
                                                                            var call12847 = callmethodChecked(this, "shallowCopy", [0]);
                                                                            var var_nd = call12847;
                                                                            setLineNumber(2476);    // compilenode identifier
                                                                            var call12848 = callmethodChecked(var_as, "extend", [1], var_nd);
                                                                            var var_newChain = call12848;
                                                                            setLineNumber(2477);    // compilenode call
                                                                            onSelf = true;
                                                                            var call12849 = callmethodChecked(this, "params", [0]);
                                                                            var call12850 = callmethodChecked(superDepth, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call12851 = callmethodChecked(call12850, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call12852 = callmethodChecked(call12851, "listMap()ancestors", [2, 1], call12849, var_blk, var_newChain);
                                                                            var call12853 = callmethodChecked(var_nd, "params:=", [1], call12852);
                                                                            setLineNumber(2478);    // compilenode call
                                                                            onSelf = true;
                                                                            var call12854 = callmethodChecked(this, "typeParams", [0]);
                                                                            var call12855 = callmethodChecked(superDepth, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call12856 = callmethodChecked(call12855, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call12857 = callmethodChecked(call12856, "maybeMap()ancestors", [2, 1], call12854, var_blk, var_newChain);
                                                                            var call12858 = callmethodChecked(var_nd, "typeParams:=", [1], call12857);
                                                                            setLineNumber(2479);    // compilenode identifier
                                                                            var call12859 = callmethodChecked(var_blk, "apply", [2], var_nd, var_as);
                                                                            return call12859;
                                                                          };
                                                                          func12846.paramCounts = [1, 1];
                                                                          obj12827.methods["map()ancestors"] = func12846;
                                                                          func12846.definitionLine = 2474;
                                                                          func12846.definitionModule = "ast";
                                                                          var func12860 = function(argcv) {    // method pretty(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_depth = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2482);    // compilenode string
                                                                            var string12861 = new GraceString("");
                                                                            var var_spc = string12861;
                                                                            setLineNumber(2483);    // compilenode num
                                                                            var opresult12864 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                            var block12865 = new GraceBlock(this, 2483, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block12865.real = function(var_i) {
                                                                              setLineNumber(2484);    // compilenode string
                                                                              var string12866 = new GraceString("  ");
                                                                              var opresult12869 = callmethodChecked(var_spc, "++", [1], string12866);
                                                                              var_spc = opresult12869;
                                                                              return GraceDone;
                                                                            };
                                                                            var call12870 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult12864, block12865);
                                                                            setLineNumber(2486);    // compilenode string
                                                                            var string12871 = new GraceString("");
                                                                            onSelf = true;
                                                                            var call12873 = callmethodChecked(this, "name", [0]);
                                                                            var string12875 = new GraceString(": ");
                                                                            var call12877 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                            var string12879 = new GraceString("");
                                                                            var opresult12881 = callmethodChecked(string12879, "++", [1], call12877);
                                                                            var opresult12883 = callmethodChecked(opresult12881, "++", [1], string12875);
                                                                            var opresult12885 = callmethodChecked(opresult12883, "++", [1], call12873);
                                                                            var opresult12887 = callmethodChecked(opresult12885, "++", [1], string12871);
                                                                            var var_s = opresult12887;
                                                                            var if12888 = GraceDone;
                                                                            setLineNumber(2487);    // compilenode call
                                                                            onSelf = true;
                                                                            var call12889 = callmethodChecked(this, "params", [0]);
                                                                            var call12890 = callmethodChecked(call12889, "isEmpty", [0]);
                                                                            var call12891 = callmethodChecked(call12890, "not", [0]);
                                                                            if (Grace_isTrue(call12891)) {
                                                                              var string12892 = new GraceString("Parameters:");
                                                                              var string12895 = new GraceString("\n");
                                                                              var string12898 = new GraceString("");
                                                                              var opresult12900 = callmethodChecked(string12898, "++", [1], var_s);
                                                                              var opresult12902 = callmethodChecked(opresult12900, "++", [1], string12895);
                                                                              var opresult12904 = callmethodChecked(opresult12902, "++", [1], var_spc);
                                                                              var opresult12906 = callmethodChecked(opresult12904, "++", [1], string12892);
                                                                              var_s = opresult12906;
                                                                              if12888 = GraceDone;
                                                                            }
                                                                            setLineNumber(2488);    // compilenode call
                                                                            onSelf = true;
                                                                            var call12907 = callmethodChecked(this, "params", [0]);
                                                                            var block12908 = new GraceBlock(this, 2488, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block12908.real = function(var_p) {
                                                                              setLineNumber(2489);    // compilenode string
                                                                              var string12909 = new GraceString("");
                                                                              var opresult12913 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                              var call12914 = callmethodChecked(var_p, "pretty", [1], opresult12913);
                                                                              var string12916 = new GraceString("");
                                                                              var string12919 = new GraceString("\n  ");
                                                                              var string12922 = new GraceString("");
                                                                              var opresult12924 = callmethodChecked(string12922, "++", [1], var_s);
                                                                              var opresult12926 = callmethodChecked(opresult12924, "++", [1], string12919);
                                                                              var opresult12928 = callmethodChecked(opresult12926, "++", [1], var_spc);
                                                                              var opresult12930 = callmethodChecked(opresult12928, "++", [1], string12916);
                                                                              var opresult12932 = callmethodChecked(opresult12930, "++", [1], call12914);
                                                                              var opresult12934 = callmethodChecked(opresult12932, "++", [1], string12909);
                                                                              var_s = opresult12934;
                                                                              return GraceDone;
                                                                            };
                                                                            var call12935 = callmethodChecked(var_prelude, "for()do", [1, 1], call12907, block12908);
                                                                            var if12936 = GraceDone;
                                                                            setLineNumber(2491);    // compilenode call
                                                                            onSelf = true;
                                                                            var call12937 = callmethodChecked(this, "typeParams", [0]);
                                                                            var opresult12940 = callmethodChecked(GraceFalse, "\u2260", [1], call12937);
                                                                            if (Grace_isTrue(opresult12940)) {
                                                                              setLineNumber(2492);    // compilenode string
                                                                              var string12941 = new GraceString("");
                                                                              var opresult12945 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                                              onSelf = true;
                                                                              var call12946 = callmethodChecked(this, "typeParams", [0]);
                                                                              var call12947 = callmethodChecked(call12946, "pretty", [1], opresult12945);
                                                                              var string12949 = new GraceString("TypeParams: ");
                                                                              var string12952 = new GraceString("\n  ");
                                                                              var string12955 = new GraceString("");
                                                                              var opresult12957 = callmethodChecked(string12955, "++", [1], var_s);
                                                                              var opresult12959 = callmethodChecked(opresult12957, "++", [1], string12952);
                                                                              var opresult12961 = callmethodChecked(opresult12959, "++", [1], var_spc);
                                                                              var opresult12963 = callmethodChecked(opresult12961, "++", [1], string12949);
                                                                              var opresult12965 = callmethodChecked(opresult12963, "++", [1], call12947);
                                                                              var opresult12967 = callmethodChecked(opresult12965, "++", [1], string12941);
                                                                              var_s = opresult12967;
                                                                              if12936 = GraceDone;
                                                                            }
                                                                            setLineNumber(2494);    // compilenode identifier
                                                                            return var_s;
                                                                          };
                                                                          func12860.paramCounts = [1];
                                                                          obj12827.methods["pretty"] = func12860;
                                                                          func12860.definitionLine = 2481;
                                                                          func12860.definitionModule = "ast";
                                                                          var func12968 = function(argcv) {    // method shallowCopy
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2497);    // compilenode call
                                                                            onSelf = true;
                                                                            var call12969 = callmethodChecked(this, "name", [0]);
                                                                            onSelf = true;
                                                                            var call12970 = callmethodChecked(this, "params", [0]);
                                                                            var call12971 = callmethodChecked(var_signaturePart, "partName()params", [1, 1], call12969, call12970);
                                                                            var call12972 = callmethodChecked(call12971, "shallowCopyFieldsFrom", [1], this);
                                                                            return call12972;
                                                                          };
                                                                          func12968.paramCounts = [0];
                                                                          obj12827.methods["shallowCopy"] = func12968;
                                                                          func12968.definitionLine = 2496;
                                                                          func12968.definitionModule = "ast";
                                                                          var func12973 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_other = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2501);    // compilenode identifier
                                                                            var call12974 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                                            setLineNumber(2502);    // compilenode identifier
                                                                            var call12975 = callmethodChecked(var_other, "typeParams", [0]);
                                                                            onSelf = true;
                                                                            var call12976 = callmethodChecked(this, "typeParams:=", [1], call12975);
                                                                            setLineNumber(2503);    // compilenode identifier
                                                                            var call12977 = callmethodChecked(var_other, "lineLength", [0]);
                                                                            onSelf = true;
                                                                            var call12978 = callmethodChecked(this, "lineLength:=", [1], call12977);
                                                                            setLineNumber(2504);    // compilenode identifier
                                                                            return this;
                                                                          };
                                                                          func12973.paramCounts = [1];
                                                                          obj12827.methods["shallowCopyFieldsFrom"] = func12973;
                                                                          func12973.definitionLine = 2500;
                                                                          func12973.definitionModule = "ast";
                                                                          var func12979 = function(argcv) {    // method asString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2507);    // compilenode string
                                                                            var string12980 = new GraceString("");
                                                                            onSelf = true;
                                                                            var call12982 = callmethodChecked(this, "name", [0]);
                                                                            var string12984 = new GraceString("part: ");
                                                                            var opresult12986 = callmethodChecked(string12984, "++", [1], call12982);
                                                                            var opresult12988 = callmethodChecked(opresult12986, "++", [1], string12980);
                                                                            return opresult12988;
                                                                          };
                                                                          func12979.paramCounts = [0];
                                                                          obj12827.methods["asString"] = func12979;
                                                                          func12979.definitionLine = 2506;
                                                                          func12979.definitionModule = "ast";
                                                                          setLineNumber(2457);    // compilenode call
                                                                          var call12989 = callmethodChecked(superDepth, "outer", [0]);
                                                                          onOuter = true;
                                                                          onSelf = true;
                                                                          var call12990 = callmethodChecked(call12989, "outer", [0]);
                                                                          onOuter = true;
                                                                          onSelf = true;
                                                                          var call12991 = callmethodChecked(call12990, "baseNode()object", [0, 1], this);
                                                                          obj12827.superobj = call12991;
                                                                          if (call12991.data) obj12827.data = call12991.data;
                                                                          if (call12991.hasOwnProperty('_value'))
                                                                              obj12827._value = call12991._value;
                                                                          setLineNumber(2458);    // compilenode string
                                                                          var string12992 = new GraceString("signaturepart");
                                                                          obj12827.data["kind"] = string12992;
                                                                          var reader_ast_kind12993 = function() {
                                                                            return this.data["kind"];
                                                                          };
                                                                          reader_ast_kind12993.def = true;
                                                                          obj12827.methods["kind"] = reader_ast_kind12993;
                                                                          setLineNumber(2459);    // compilenode identifier
                                                                          obj12827.data["name"] = var_n;
                                                                          var reader_ast_name12994 = function() {
                                                                            return this.data["name"];
                                                                          };
                                                                          obj12827.methods["name"] = reader_ast_name12994;
                                                                          obj12827.data["name"] = var_n;
                                                                          var writer_ast_name12994 = function(argcv, o) {
                                                                            this.data["name"] = o;
                                                                            return GraceDone;
                                                                          };
                                                                          obj12827.methods["name:="] = writer_ast_name12994;
                                                                          obj12827.mutable = true;
                                                                          setLineNumber(2460);    // compilenode identifier
                                                                          obj12827.data["params"] = var_ps;
                                                                          var reader_ast_params12995 = function() {
                                                                            return this.data["params"];
                                                                          };
                                                                          obj12827.methods["params"] = reader_ast_params12995;
                                                                          obj12827.data["params"] = var_ps;
                                                                          var writer_ast_params12995 = function(argcv, o) {
                                                                            this.data["params"] = o;
                                                                            return GraceDone;
                                                                          };
                                                                          obj12827.methods["params:="] = writer_ast_params12995;
                                                                          obj12827.mutable = true;
                                                                          setLineNumber(2461);    // compilenode identifier
                                                                          obj12827.data["typeParams"] = GraceFalse;
                                                                          var reader_ast_typeParams12996 = function() {
                                                                            return this.data["typeParams"];
                                                                          };
                                                                          obj12827.methods["typeParams"] = reader_ast_typeParams12996;
                                                                          obj12827.data["typeParams"] = GraceFalse;
                                                                          var writer_ast_typeParams12996 = function(argcv, o) {
                                                                            this.data["typeParams"] = o;
                                                                            return GraceDone;
                                                                          };
                                                                          obj12827.methods["typeParams:="] = writer_ast_typeParams12996;
                                                                          obj12827.mutable = true;
                                                                          setLineNumber(2462);    // compilenode num
                                                                          obj12827.data["lineLength"] = new GraceNum(0);
                                                                          var reader_ast_lineLength12997 = function() {
                                                                            return this.data["lineLength"];
                                                                          };
                                                                          obj12827.methods["lineLength"] = reader_ast_lineLength12997;
                                                                          obj12827.data["lineLength"] = new GraceNum(0);
                                                                          var writer_ast_lineLength12997 = function(argcv, o) {
                                                                            this.data["lineLength"] = o;
                                                                            return GraceDone;
                                                                          };
                                                                          obj12827.methods["lineLength:="] = writer_ast_lineLength12997;
                                                                          obj12827.mutable = true;
                                                                          superDepth = origSuperDepth;
                                                                        };
                                                                        obj_init_12827.apply(obj12827, []);
                                                                        return obj12827;
                                                                      };
                                                                      func12826.paramCounts = [1, 1];
                                                                      obj12810.methods["partName()params"] = func12826;
                                                                      func12826.definitionLine = 2456;
                                                                      func12826.definitionModule = "ast";
                                                                        var func12998 = function(argcv) {    // method partName(1     )params(1     )()object
                                                                          var curarg = 1;
                                                                          var var_n = arguments[curarg];
                                                                          curarg++;
                                                                          var var_ps = arguments[curarg];
                                                                          curarg++;
                                                                          var inheritingObject = arguments[curarg++];
                                                                          // Start argument processing
                                                                          curarg = 1;
                                                                          curarg++;
                                                                          curarg++;
                                                                          // End argument processing
                                                                          setModuleName("ast");
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var obj12999 = Grace_allocObject(null, "partName()params");
                                                                          obj12999.definitionModule = "ast";
                                                                          obj12999.definitionLine = 2456;
                                                                          var inho12999 = inheritingObject;
                                                                          while (inho12999.superobj) inho12999 = inho12999.superobj;
                                                                          inho12999.superobj = obj12999;
                                                                          obj12999.data = inheritingObject.data;
                                                                          if (inheritingObject.hasOwnProperty('_value'))
                                                                            obj12999._value = inheritingObject._value;
                                                                          obj12999.outer = this;
                                                                          var reader_ast_outer13000 = function() {
                                                                            return this.outer;
                                                                          };
                                                                          obj12999.methods["outer"] = reader_ast_outer13000;
                                                                          var obj_init_12999 = function() {
                                                                            var origSuperDepth = superDepth;
                                                                            superDepth = obj12999;
                                                                            var func13001 = function(argcv) {    // method accept(1)from(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_visitor = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                              var var_as = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[1] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                              // Start argument checking
                                                                              curarg = 1;
                                                                              setLineNumber(2464);    // compilenode identifier
                                                                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              curarg++;
                                                                              // End argument checking
                                                                              setModuleName("ast");
                                                                              var if13002 = GraceDone;
                                                                              setLineNumber(2465);    // compilenode identifier
                                                                              var call13003 = callmethodChecked(var_visitor, "visitSignaturePart()up", [1, 1], this, var_as);
                                                                              if (Grace_isTrue(call13003)) {
                                                                                setLineNumber(2466);    // compilenode identifier
                                                                                var call13004 = callmethodChecked(var_as, "extend", [1], this);
                                                                                var var_newChain = call13004;
                                                                                setLineNumber(2467);    // compilenode block
                                                                                var block13005 = new GraceBlock(this, 2467, 1);
                                                                                setLineNumber(1);    // compilenode identifier
                                                                                block13005.real = function(var_p) {
                                                                                  setLineNumber(2467);    // compilenode identifier
                                                                                  var call13006 = callmethodChecked(var_p, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                                  return call13006;
                                                                                };
                                                                                onSelf = true;
                                                                                var call13007 = callmethodChecked(this, "params", [0]);
                                                                                var call13008 = callmethodChecked(call13007, "do", [1], block13005);
                                                                                var if13009 = GraceDone;
                                                                                setLineNumber(2468);    // compilenode call
                                                                                onSelf = true;
                                                                                var call13010 = callmethodChecked(this, "typeParams", [0]);
                                                                                var opresult13013 = callmethodChecked(GraceFalse, "\u2260", [1], call13010);
                                                                                if (Grace_isTrue(opresult13013)) {
                                                                                  setLineNumber(2469);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call13014 = callmethodChecked(this, "typeParams", [0]);
                                                                                  var call13015 = callmethodChecked(call13014, "accept()from", [1, 1], var_visitor, var_newChain);
                                                                                  if13009 = call13015;
                                                                                }
                                                                                if13002 = if13009;
                                                                              }
                                                                              return if13002;
                                                                            };
                                                                            func13001.paramTypes = [];
                                                                            func13001.paramTypes.push([]);
                                                                            func13001.paramTypes.push([]);
                                                                            func13001.paramCounts = [1, 1];
                                                                            obj12999.methods["accept()from"] = func13001;
                                                                            func13001.definitionLine = 2464;
                                                                            func13001.definitionModule = "ast";
                                                                            var func13016 = function(argcv) {    // method declarationKindWithAncestors(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_as = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for declarationKindWithAncestors(1)"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2473);    // compilenode identifier
                                                                              var call13017 = callmethodChecked(var_k, "parameter", [0]);
                                                                              return call13017;
                                                                            };
                                                                            func13016.paramCounts = [1];
                                                                            obj12999.methods["declarationKindWithAncestors"] = func13016;
                                                                            func13016.definitionLine = 2473;
                                                                            func13016.definitionModule = "ast";
                                                                            var func13018 = function(argcv) {    // method map(1)ancestors(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_blk = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                              var var_as = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[1] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2475);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13019 = callmethodChecked(this, "shallowCopy", [0]);
                                                                              var var_nd = call13019;
                                                                              setLineNumber(2476);    // compilenode identifier
                                                                              var call13020 = callmethodChecked(var_as, "extend", [1], var_nd);
                                                                              var var_newChain = call13020;
                                                                              setLineNumber(2477);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13021 = callmethodChecked(this, "params", [0]);
                                                                              var call13022 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call13023 = callmethodChecked(call13022, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call13024 = callmethodChecked(call13023, "listMap()ancestors", [2, 1], call13021, var_blk, var_newChain);
                                                                              var call13025 = callmethodChecked(var_nd, "params:=", [1], call13024);
                                                                              setLineNumber(2478);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13026 = callmethodChecked(this, "typeParams", [0]);
                                                                              var call13027 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call13028 = callmethodChecked(call13027, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call13029 = callmethodChecked(call13028, "maybeMap()ancestors", [2, 1], call13026, var_blk, var_newChain);
                                                                              var call13030 = callmethodChecked(var_nd, "typeParams:=", [1], call13029);
                                                                              setLineNumber(2479);    // compilenode identifier
                                                                              var call13031 = callmethodChecked(var_blk, "apply", [2], var_nd, var_as);
                                                                              return call13031;
                                                                            };
                                                                            func13018.paramCounts = [1, 1];
                                                                            obj12999.methods["map()ancestors"] = func13018;
                                                                            func13018.definitionLine = 2474;
                                                                            func13018.definitionModule = "ast";
                                                                            var func13032 = function(argcv) {    // method pretty(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_depth = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2482);    // compilenode string
                                                                              var string13033 = new GraceString("");
                                                                              var var_spc = string13033;
                                                                              setLineNumber(2483);    // compilenode num
                                                                              var opresult13036 = callmethodChecked(new GraceNum(0), "..", [1], var_depth);
                                                                              var block13037 = new GraceBlock(this, 2483, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block13037.real = function(var_i) {
                                                                                setLineNumber(2484);    // compilenode string
                                                                                var string13038 = new GraceString("  ");
                                                                                var opresult13041 = callmethodChecked(var_spc, "++", [1], string13038);
                                                                                var_spc = opresult13041;
                                                                                return GraceDone;
                                                                              };
                                                                              var call13042 = callmethodChecked(var_prelude, "for()do", [1, 1], opresult13036, block13037);
                                                                              setLineNumber(2486);    // compilenode string
                                                                              var string13043 = new GraceString("");
                                                                              onSelf = true;
                                                                              var call13045 = callmethodChecked(this, "name", [0]);
                                                                              var string13047 = new GraceString(": ");
                                                                              var call13049 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                              var string13051 = new GraceString("");
                                                                              var opresult13053 = callmethodChecked(string13051, "++", [1], call13049);
                                                                              var opresult13055 = callmethodChecked(opresult13053, "++", [1], string13047);
                                                                              var opresult13057 = callmethodChecked(opresult13055, "++", [1], call13045);
                                                                              var opresult13059 = callmethodChecked(opresult13057, "++", [1], string13043);
                                                                              var var_s = opresult13059;
                                                                              var if13060 = GraceDone;
                                                                              setLineNumber(2487);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13061 = callmethodChecked(this, "params", [0]);
                                                                              var call13062 = callmethodChecked(call13061, "isEmpty", [0]);
                                                                              var call13063 = callmethodChecked(call13062, "not", [0]);
                                                                              if (Grace_isTrue(call13063)) {
                                                                                var string13064 = new GraceString("Parameters:");
                                                                                var string13067 = new GraceString("\n");
                                                                                var string13070 = new GraceString("");
                                                                                var opresult13072 = callmethodChecked(string13070, "++", [1], var_s);
                                                                                var opresult13074 = callmethodChecked(opresult13072, "++", [1], string13067);
                                                                                var opresult13076 = callmethodChecked(opresult13074, "++", [1], var_spc);
                                                                                var opresult13078 = callmethodChecked(opresult13076, "++", [1], string13064);
                                                                                var_s = opresult13078;
                                                                                if13060 = GraceDone;
                                                                              }
                                                                              setLineNumber(2488);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13079 = callmethodChecked(this, "params", [0]);
                                                                              var block13080 = new GraceBlock(this, 2488, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block13080.real = function(var_p) {
                                                                                setLineNumber(2489);    // compilenode string
                                                                                var string13081 = new GraceString("");
                                                                                var opresult13085 = callmethodChecked(var_depth, "+", [1], new GraceNum(2));
                                                                                var call13086 = callmethodChecked(var_p, "pretty", [1], opresult13085);
                                                                                var string13088 = new GraceString("");
                                                                                var string13091 = new GraceString("\n  ");
                                                                                var string13094 = new GraceString("");
                                                                                var opresult13096 = callmethodChecked(string13094, "++", [1], var_s);
                                                                                var opresult13098 = callmethodChecked(opresult13096, "++", [1], string13091);
                                                                                var opresult13100 = callmethodChecked(opresult13098, "++", [1], var_spc);
                                                                                var opresult13102 = callmethodChecked(opresult13100, "++", [1], string13088);
                                                                                var opresult13104 = callmethodChecked(opresult13102, "++", [1], call13086);
                                                                                var opresult13106 = callmethodChecked(opresult13104, "++", [1], string13081);
                                                                                var_s = opresult13106;
                                                                                return GraceDone;
                                                                              };
                                                                              var call13107 = callmethodChecked(var_prelude, "for()do", [1, 1], call13079, block13080);
                                                                              var if13108 = GraceDone;
                                                                              setLineNumber(2491);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13109 = callmethodChecked(this, "typeParams", [0]);
                                                                              var opresult13112 = callmethodChecked(GraceFalse, "\u2260", [1], call13109);
                                                                              if (Grace_isTrue(opresult13112)) {
                                                                                setLineNumber(2492);    // compilenode string
                                                                                var string13113 = new GraceString("");
                                                                                var opresult13117 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                                                onSelf = true;
                                                                                var call13118 = callmethodChecked(this, "typeParams", [0]);
                                                                                var call13119 = callmethodChecked(call13118, "pretty", [1], opresult13117);
                                                                                var string13121 = new GraceString("TypeParams: ");
                                                                                var string13124 = new GraceString("\n  ");
                                                                                var string13127 = new GraceString("");
                                                                                var opresult13129 = callmethodChecked(string13127, "++", [1], var_s);
                                                                                var opresult13131 = callmethodChecked(opresult13129, "++", [1], string13124);
                                                                                var opresult13133 = callmethodChecked(opresult13131, "++", [1], var_spc);
                                                                                var opresult13135 = callmethodChecked(opresult13133, "++", [1], string13121);
                                                                                var opresult13137 = callmethodChecked(opresult13135, "++", [1], call13119);
                                                                                var opresult13139 = callmethodChecked(opresult13137, "++", [1], string13113);
                                                                                var_s = opresult13139;
                                                                                if13108 = GraceDone;
                                                                              }
                                                                              setLineNumber(2494);    // compilenode identifier
                                                                              return var_s;
                                                                            };
                                                                            func13032.paramCounts = [1];
                                                                            obj12999.methods["pretty"] = func13032;
                                                                            func13032.definitionLine = 2481;
                                                                            func13032.definitionModule = "ast";
                                                                            var func13140 = function(argcv) {    // method shallowCopy
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              if (argcv[0] !== 0)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2497);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13141 = callmethodChecked(this, "name", [0]);
                                                                              onSelf = true;
                                                                              var call13142 = callmethodChecked(this, "params", [0]);
                                                                              var call13143 = callmethodChecked(var_signaturePart, "partName()params", [1, 1], call13141, call13142);
                                                                              var call13144 = callmethodChecked(call13143, "shallowCopyFieldsFrom", [1], this);
                                                                              return call13144;
                                                                            };
                                                                            func13140.paramCounts = [0];
                                                                            obj12999.methods["shallowCopy"] = func13140;
                                                                            func13140.definitionLine = 2496;
                                                                            func13140.definitionModule = "ast";
                                                                            var func13145 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_other = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2501);    // compilenode identifier
                                                                              var call13146 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                                              setLineNumber(2502);    // compilenode identifier
                                                                              var call13147 = callmethodChecked(var_other, "typeParams", [0]);
                                                                              onSelf = true;
                                                                              var call13148 = callmethodChecked(this, "typeParams:=", [1], call13147);
                                                                              setLineNumber(2503);    // compilenode identifier
                                                                              var call13149 = callmethodChecked(var_other, "lineLength", [0]);
                                                                              onSelf = true;
                                                                              var call13150 = callmethodChecked(this, "lineLength:=", [1], call13149);
                                                                              setLineNumber(2504);    // compilenode identifier
                                                                              return this;
                                                                            };
                                                                            func13145.paramCounts = [1];
                                                                            obj12999.methods["shallowCopyFieldsFrom"] = func13145;
                                                                            func13145.definitionLine = 2500;
                                                                            func13145.definitionModule = "ast";
                                                                            var func13151 = function(argcv) {    // method asString
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              if (argcv[0] !== 0)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2507);    // compilenode string
                                                                              var string13152 = new GraceString("");
                                                                              onSelf = true;
                                                                              var call13154 = callmethodChecked(this, "name", [0]);
                                                                              var string13156 = new GraceString("part: ");
                                                                              var opresult13158 = callmethodChecked(string13156, "++", [1], call13154);
                                                                              var opresult13160 = callmethodChecked(opresult13158, "++", [1], string13152);
                                                                              return opresult13160;
                                                                            };
                                                                            func13151.paramCounts = [0];
                                                                            obj12999.methods["asString"] = func13151;
                                                                            func13151.definitionLine = 2506;
                                                                            func13151.definitionModule = "ast";
                                                                            setLineNumber(2457);    // compilenode call
                                                                            var call13161 = callmethodChecked(superDepth, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call13162 = callmethodChecked(call13161, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call13163 = callmethodChecked(call13162, "baseNode()object", [0, 1], this);
                                                                            obj12999.superobj = call13163;
                                                                            if (call13163.data) obj12999.data = call13163.data;
                                                                            if (call13163.hasOwnProperty('_value'))
                                                                                obj12999._value = call13163._value;
                                                                            setLineNumber(2458);    // compilenode string
                                                                            var string13164 = new GraceString("signaturepart");
                                                                            obj12999.data["kind"] = string13164;
                                                                            var reader_ast_kind13165 = function() {
                                                                              return this.data["kind"];
                                                                            };
                                                                            reader_ast_kind13165.def = true;
                                                                            obj12999.methods["kind"] = reader_ast_kind13165;
                                                                            setLineNumber(2459);    // compilenode identifier
                                                                            obj12999.data["name"] = var_n;
                                                                            var reader_ast_name13166 = function() {
                                                                              return this.data["name"];
                                                                            };
                                                                            obj12999.methods["name"] = reader_ast_name13166;
                                                                            obj12999.data["name"] = var_n;
                                                                            var writer_ast_name13166 = function(argcv, o) {
                                                                              this.data["name"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj12999.methods["name:="] = writer_ast_name13166;
                                                                            obj12999.mutable = true;
                                                                            setLineNumber(2460);    // compilenode identifier
                                                                            obj12999.data["params"] = var_ps;
                                                                            var reader_ast_params13167 = function() {
                                                                              return this.data["params"];
                                                                            };
                                                                            obj12999.methods["params"] = reader_ast_params13167;
                                                                            obj12999.data["params"] = var_ps;
                                                                            var writer_ast_params13167 = function(argcv, o) {
                                                                              this.data["params"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj12999.methods["params:="] = writer_ast_params13167;
                                                                            obj12999.mutable = true;
                                                                            setLineNumber(2461);    // compilenode identifier
                                                                            obj12999.data["typeParams"] = GraceFalse;
                                                                            var reader_ast_typeParams13168 = function() {
                                                                              return this.data["typeParams"];
                                                                            };
                                                                            obj12999.methods["typeParams"] = reader_ast_typeParams13168;
                                                                            obj12999.data["typeParams"] = GraceFalse;
                                                                            var writer_ast_typeParams13168 = function(argcv, o) {
                                                                              this.data["typeParams"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj12999.methods["typeParams:="] = writer_ast_typeParams13168;
                                                                            obj12999.mutable = true;
                                                                            setLineNumber(2462);    // compilenode num
                                                                            obj12999.data["lineLength"] = new GraceNum(0);
                                                                            var reader_ast_lineLength13169 = function() {
                                                                              return this.data["lineLength"];
                                                                            };
                                                                            obj12999.methods["lineLength"] = reader_ast_lineLength13169;
                                                                            obj12999.data["lineLength"] = new GraceNum(0);
                                                                            var writer_ast_lineLength13169 = function(argcv, o) {
                                                                              this.data["lineLength"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj12999.methods["lineLength:="] = writer_ast_lineLength13169;
                                                                            obj12999.mutable = true;
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_12999.apply(inheritingObject, []);
                                                                          return obj12999;
                                                                          };
                                                                          obj12810.methods["partName()params()object"] = func12998;
                                                                        superDepth = origSuperDepth;
                                                                      };
                                                                      obj_init_12810.apply(obj12810, []);
                                                                      var var_signaturePart = obj12810;
                                                                      setLineNumber(2457);    // compilenode method
                                                                      var func13170 = function(argcv) {    // method signaturePart
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for signaturePart"));
                                                                        setModuleName("ast");
                                                                        // signaturePart is a simple accessor - elide try ... catch
                                                                        setLineNumber(2439);    // compilenode identifier
                                                                        return var_signaturePart;
                                                                      };
                                                                      func13170.paramCounts = [0];
                                                                      this.methods["signaturePart"] = func13170;
                                                                      func13170.definitionLine = 2457;
                                                                      func13170.definitionModule = "ast";
                                                                      this.methods["signaturePart"].debug = "def";
                                                                      setLineNumber(2512);    // compilenode object
                                                                      var obj13171 = Grace_allocObject(GraceObject, "callWithPart");
                                                                      obj13171.definitionModule = "ast";
                                                                      obj13171.definitionLine = 2512;
                                                                      obj13171.outer = this;
                                                                      var reader_ast_outer13172 = function() {
                                                                        return this.outer;
                                                                      };
                                                                      obj13171.methods["outer"] = reader_ast_outer13172;
                                                                      var obj_init_13171 = function() {
                                                                        var origSuperDepth = superDepth;
                                                                        superDepth = obj13171;
                                                                        var func13173 = function(argcv) {    // method new
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2514);    // compilenode string
                                                                          var string13174 = new GraceString("");
                                                                          var array13175 = new PrimitiveGraceList([]);
                                                                          onSelf = true;
                                                                          var call13176 = callmethodChecked(this, "request()withArgs", [1, 1], string13174, array13175);
                                                                          return call13176;
                                                                        };
                                                                        func13173.paramCounts = [0];
                                                                        obj13171.methods["new"] = func13173;
                                                                        func13173.definitionLine = 2513;
                                                                        func13173.definitionModule = "ast";
                                                                        var func13177 = function(argcv) {    // method request(1)withArgs(1)scope(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_name = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for request (arg list 1) of request(1)withArgs(1)scope(1)"));
                                                                          var var_argList = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[1] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withArgs (arg list 2) of request(1)withArgs(1)scope(1)"));
                                                                          var var_s = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[2] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for scope (arg list 3) of request(1)withArgs(1)scope(1)"));
                                                                          setModuleName("ast");
                                                                          setLineNumber(2517);    // compilenode identifier
                                                                          onSelf = true;
                                                                          var call13178 = callmethodChecked(this, "request()withArgs", [1, 1], var_name, var_argList);
                                                                          var var_result = call13178;
                                                                          setLineNumber(2518);    // compilenode identifier
                                                                          var call13179 = callmethodChecked(var_result, "scope:=", [1], var_s);
                                                                          setLineNumber(2519);    // compilenode identifier
                                                                          return var_result;
                                                                        };
                                                                        func13177.paramCounts = [1, 1, 1];
                                                                        obj13171.methods["request()withArgs()scope"] = func13177;
                                                                        func13177.definitionLine = 2516;
                                                                        func13177.definitionModule = "ast";
                                                                        var func13180 = function(argcv) {    // method request(1)withArgs(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_rPart = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for request (arg list 1) of request(1)withArgs(1)"));
                                                                          var var_xs = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[1] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withArgs (arg list 2) of request(1)withArgs(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(2521);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in request (arg list 1), which corresponds to parameter rPart, does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("ast");
                                                                          var obj13181 = Grace_allocObject(null, "callWithPart.request()withArgs");
                                                                          obj13181.definitionModule = "ast";
                                                                          obj13181.definitionLine = 2521;
                                                                          obj13181.outer = this;
                                                                          var reader_ast_outer13182 = function() {
                                                                            return this.outer;
                                                                          };
                                                                          obj13181.methods["outer"] = reader_ast_outer13182;
                                                                          var obj_init_13181 = function() {
                                                                            var origSuperDepth = superDepth;
                                                                            superDepth = obj13181;
                                                                            var func13183 = function(argcv) {    // method map(1)ancestors(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_blk = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                              var var_as = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[1] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2529);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13184 = callmethodChecked(this, "shallowCopy", [0]);
                                                                              var var_n = call13184;
                                                                              setLineNumber(2530);    // compilenode identifier
                                                                              var call13185 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                              var var_newChain = call13185;
                                                                              setLineNumber(2531);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13186 = callmethodChecked(this, "args", [0]);
                                                                              var call13187 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call13188 = callmethodChecked(call13187, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call13189 = callmethodChecked(call13188, "listMap()ancestors", [2, 1], call13186, var_blk, var_newChain);
                                                                              var call13190 = callmethodChecked(var_n, "args:=", [1], call13189);
                                                                              setLineNumber(2532);    // compilenode identifier
                                                                              var call13191 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                              return call13191;
                                                                            };
                                                                            func13183.paramCounts = [1, 1];
                                                                            obj13181.methods["map()ancestors"] = func13183;
                                                                            func13183.definitionLine = 2528;
                                                                            func13183.definitionModule = "ast";
                                                                            var func13192 = function(argcv) {    // method pretty(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_depth = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2535);    // compilenode string
                                                                              var string13193 = new GraceString("");
                                                                              var var_spc = string13193;
                                                                              setLineNumber(2536);    // compilenode identifier
                                                                              var opresult13196 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                                              var block13197 = new GraceBlock(this, 2536, 0);
                                                                              block13197.real = function() {
                                                                                setLineNumber(2537);    // compilenode string
                                                                                var string13198 = new GraceString("  ");
                                                                                var opresult13201 = callmethodChecked(var_spc, "++", [1], string13198);
                                                                                var_spc = opresult13201;
                                                                                return GraceDone;
                                                                              };
                                                                              var call13202 = callmethodChecked(var_prelude, "repeat()times", [1, 1], opresult13196, block13197);
                                                                              setLineNumber(2539);    // compilenode string
                                                                              var string13203 = new GraceString("");
                                                                              onSelf = true;
                                                                              var call13205 = callmethodChecked(this, "name", [0]);
                                                                              var string13207 = new GraceString(": ");
                                                                              var call13209 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                              var string13211 = new GraceString("");
                                                                              var opresult13213 = callmethodChecked(string13211, "++", [1], call13209);
                                                                              var opresult13215 = callmethodChecked(opresult13213, "++", [1], string13207);
                                                                              var opresult13217 = callmethodChecked(opresult13215, "++", [1], call13205);
                                                                              var opresult13219 = callmethodChecked(opresult13217, "++", [1], string13203);
                                                                              var var_s = opresult13219;
                                                                              setLineNumber(2540);    // compilenode string
                                                                              var string13220 = new GraceString("Args:");
                                                                              var string13223 = new GraceString("\n    ");
                                                                              var string13226 = new GraceString("");
                                                                              var opresult13228 = callmethodChecked(string13226, "++", [1], var_s);
                                                                              var opresult13230 = callmethodChecked(opresult13228, "++", [1], string13223);
                                                                              var opresult13232 = callmethodChecked(opresult13230, "++", [1], var_spc);
                                                                              var opresult13234 = callmethodChecked(opresult13232, "++", [1], string13220);
                                                                              var_s = opresult13234;
                                                                              setLineNumber(2541);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13235 = callmethodChecked(this, "args", [0]);
                                                                              var block13236 = new GraceBlock(this, 2541, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block13236.real = function(var_a) {
                                                                                setLineNumber(2542);    // compilenode string
                                                                                var string13237 = new GraceString("");
                                                                                var opresult13241 = callmethodChecked(var_depth, "+", [1], new GraceNum(4));
                                                                                var call13242 = callmethodChecked(var_a, "pretty", [1], opresult13241);
                                                                                var string13244 = new GraceString("");
                                                                                var string13247 = new GraceString("\n    ");
                                                                                var string13250 = new GraceString("");
                                                                                var opresult13252 = callmethodChecked(string13250, "++", [1], var_s);
                                                                                var opresult13254 = callmethodChecked(opresult13252, "++", [1], string13247);
                                                                                var opresult13256 = callmethodChecked(opresult13254, "++", [1], var_spc);
                                                                                var opresult13258 = callmethodChecked(opresult13256, "++", [1], string13244);
                                                                                var opresult13260 = callmethodChecked(opresult13258, "++", [1], call13242);
                                                                                var opresult13262 = callmethodChecked(opresult13260, "++", [1], string13237);
                                                                                var_s = opresult13262;
                                                                                return GraceDone;
                                                                              };
                                                                              var call13263 = callmethodChecked(var_prelude, "for()do", [1, 1], call13235, block13236);
                                                                              setLineNumber(2544);    // compilenode identifier
                                                                              return var_s;
                                                                            };
                                                                            func13192.paramCounts = [1];
                                                                            obj13181.methods["pretty"] = func13192;
                                                                            func13192.definitionLine = 2534;
                                                                            func13192.definitionModule = "ast";
                                                                            var func13264 = function(argcv) {    // method shallowCopy
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              if (argcv[0] !== 0)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2547);    // compilenode call
                                                                              onSelf = true;
                                                                              var call13265 = callmethodChecked(this, "name", [0]);
                                                                              onSelf = true;
                                                                              var call13266 = callmethodChecked(this, "args", [0]);
                                                                              var call13267 = callmethodChecked(var_callWithPart, "request()withArgs", [1, 1], call13265, call13266);
                                                                              var call13268 = callmethodChecked(call13267, "shallowCopyFieldsFrom", [1], this);
                                                                              return call13268;
                                                                            };
                                                                            func13264.paramCounts = [0];
                                                                            obj13181.methods["shallowCopy"] = func13264;
                                                                            func13264.definitionLine = 2546;
                                                                            func13264.definitionModule = "ast";
                                                                            var func13269 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_other = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2550);    // compilenode identifier
                                                                              var call13270 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                                              setLineNumber(2551);    // compilenode identifier
                                                                              var call13271 = callmethodChecked(var_other, "lineLength", [0]);
                                                                              onSelf = true;
                                                                              var call13272 = callmethodChecked(this, "lineLength:=", [1], call13271);
                                                                              setLineNumber(2552);    // compilenode identifier
                                                                              return this;
                                                                            };
                                                                            func13269.paramCounts = [1];
                                                                            obj13181.methods["shallowCopyFieldsFrom"] = func13269;
                                                                            func13269.definitionLine = 2549;
                                                                            func13269.definitionModule = "ast";
                                                                            var func13273 = function(argcv) {    // method statementName
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              if (argcv[0] !== 0)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2554);    // compilenode string
                                                                              var string13274 = new GraceString("request");
                                                                              return string13274;
                                                                            };
                                                                            func13273.paramCounts = [0];
                                                                            obj13181.methods["statementName"] = func13273;
                                                                            func13273.definitionLine = 2554;
                                                                            func13273.definitionModule = "ast";
                                                                            setLineNumber(2522);    // compilenode call
                                                                            var call13275 = callmethodChecked(superDepth, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call13276 = callmethodChecked(call13275, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call13277 = callmethodChecked(call13276, "baseNode()object", [0, 1], this);
                                                                            obj13181.superobj = call13277;
                                                                            if (call13277.data) obj13181.data = call13277.data;
                                                                            if (call13277.hasOwnProperty('_value'))
                                                                                obj13181._value = call13277._value;
                                                                            setLineNumber(2523);    // compilenode string
                                                                            var string13278 = new GraceString("callwithpart");
                                                                            obj13181.data["kind"] = string13278;
                                                                            var reader_ast_kind13279 = function() {
                                                                              return this.data["kind"];
                                                                            };
                                                                            reader_ast_kind13279.def = true;
                                                                            obj13181.methods["kind"] = reader_ast_kind13279;
                                                                            setLineNumber(2524);    // compilenode identifier
                                                                            obj13181.data["name"] = var_rPart;
                                                                            var reader_ast_name13280 = function() {
                                                                              return this.data["name"];
                                                                            };
                                                                            obj13181.methods["name"] = reader_ast_name13280;
                                                                            obj13181.data["name"] = var_rPart;
                                                                            var writer_ast_name13280 = function(argcv, o) {
                                                                              this.data["name"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj13181.methods["name:="] = writer_ast_name13280;
                                                                            obj13181.mutable = true;
                                                                            setLineNumber(2525);    // compilenode identifier
                                                                            obj13181.data["args"] = var_xs;
                                                                            var reader_ast_args13281 = function() {
                                                                              return this.data["args"];
                                                                            };
                                                                            obj13181.methods["args"] = reader_ast_args13281;
                                                                            obj13181.data["args"] = var_xs;
                                                                            var writer_ast_args13281 = function(argcv, o) {
                                                                              this.data["args"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj13181.methods["args:="] = writer_ast_args13281;
                                                                            obj13181.mutable = true;
                                                                            setLineNumber(2526);    // compilenode num
                                                                            obj13181.data["lineLength"] = new GraceNum(0);
                                                                            var reader_ast_lineLength13282 = function() {
                                                                              return this.data["lineLength"];
                                                                            };
                                                                            obj13181.methods["lineLength"] = reader_ast_lineLength13282;
                                                                            obj13181.data["lineLength"] = new GraceNum(0);
                                                                            var writer_ast_lineLength13282 = function(argcv, o) {
                                                                              this.data["lineLength"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj13181.methods["lineLength:="] = writer_ast_lineLength13282;
                                                                            obj13181.mutable = true;
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_13181.apply(obj13181, []);
                                                                          return obj13181;
                                                                        };
                                                                        func13180.paramTypes = [];
                                                                        func13180.paramTypes.push([type_String, "rPart"]);
                                                                        func13180.paramTypes.push([]);
                                                                        func13180.paramCounts = [1, 1];
                                                                        obj13171.methods["request()withArgs"] = func13180;
                                                                        func13180.definitionLine = 2521;
                                                                        func13180.definitionModule = "ast";
                                                                          var func13283 = function(argcv) {    // method request(1     )withArgs(1     )()object
                                                                            var curarg = 1;
                                                                            var var_rPart = arguments[curarg];
                                                                            curarg++;
                                                                            var var_xs = arguments[curarg];
                                                                            curarg++;
                                                                            var inheritingObject = arguments[curarg++];
                                                                            // Start argument processing
                                                                            curarg = 1;
                                                                            setLineNumber(2521);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in request (arg list 1), which corresponds to parameter rPart, does not have " + 
                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            curarg++;
                                                                            // End argument processing
                                                                            setModuleName("ast");
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var obj13284 = Grace_allocObject(null, "request()withArgs");
                                                                            obj13284.definitionModule = "ast";
                                                                            obj13284.definitionLine = 2521;
                                                                            var inho13284 = inheritingObject;
                                                                            while (inho13284.superobj) inho13284 = inho13284.superobj;
                                                                            inho13284.superobj = obj13284;
                                                                            obj13284.data = inheritingObject.data;
                                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                                              obj13284._value = inheritingObject._value;
                                                                            obj13284.outer = this;
                                                                            var reader_ast_outer13285 = function() {
                                                                              return this.outer;
                                                                            };
                                                                            obj13284.methods["outer"] = reader_ast_outer13285;
                                                                            var obj_init_13284 = function() {
                                                                              var origSuperDepth = superDepth;
                                                                              superDepth = obj13284;
                                                                              var func13286 = function(argcv) {    // method map(1)ancestors(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_blk = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                                var var_as = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[1] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2529);    // compilenode call
                                                                                onSelf = true;
                                                                                var call13287 = callmethodChecked(this, "shallowCopy", [0]);
                                                                                var var_n = call13287;
                                                                                setLineNumber(2530);    // compilenode identifier
                                                                                var call13288 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                                var var_newChain = call13288;
                                                                                setLineNumber(2531);    // compilenode call
                                                                                onSelf = true;
                                                                                var call13289 = callmethodChecked(this, "args", [0]);
                                                                                var call13290 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call13291 = callmethodChecked(call13290, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call13292 = callmethodChecked(call13291, "listMap()ancestors", [2, 1], call13289, var_blk, var_newChain);
                                                                                var call13293 = callmethodChecked(var_n, "args:=", [1], call13292);
                                                                                setLineNumber(2532);    // compilenode identifier
                                                                                var call13294 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                                return call13294;
                                                                              };
                                                                              func13286.paramCounts = [1, 1];
                                                                              obj13284.methods["map()ancestors"] = func13286;
                                                                              func13286.definitionLine = 2528;
                                                                              func13286.definitionModule = "ast";
                                                                              var func13295 = function(argcv) {    // method pretty(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_depth = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2535);    // compilenode string
                                                                                var string13296 = new GraceString("");
                                                                                var var_spc = string13296;
                                                                                setLineNumber(2536);    // compilenode identifier
                                                                                var opresult13299 = callmethodChecked(var_depth, "+", [1], new GraceNum(1));
                                                                                var block13300 = new GraceBlock(this, 2536, 0);
                                                                                block13300.real = function() {
                                                                                  setLineNumber(2537);    // compilenode string
                                                                                  var string13301 = new GraceString("  ");
                                                                                  var opresult13304 = callmethodChecked(var_spc, "++", [1], string13301);
                                                                                  var_spc = opresult13304;
                                                                                  return GraceDone;
                                                                                };
                                                                                var call13305 = callmethodChecked(var_prelude, "repeat()times", [1, 1], opresult13299, block13300);
                                                                                setLineNumber(2539);    // compilenode string
                                                                                var string13306 = new GraceString("");
                                                                                onSelf = true;
                                                                                var call13308 = callmethodChecked(this, "name", [0]);
                                                                                var string13310 = new GraceString(": ");
                                                                                var call13312 = callmethodsuper(this, "pretty", [1], var_depth);
                                                                                var string13314 = new GraceString("");
                                                                                var opresult13316 = callmethodChecked(string13314, "++", [1], call13312);
                                                                                var opresult13318 = callmethodChecked(opresult13316, "++", [1], string13310);
                                                                                var opresult13320 = callmethodChecked(opresult13318, "++", [1], call13308);
                                                                                var opresult13322 = callmethodChecked(opresult13320, "++", [1], string13306);
                                                                                var var_s = opresult13322;
                                                                                setLineNumber(2540);    // compilenode string
                                                                                var string13323 = new GraceString("Args:");
                                                                                var string13326 = new GraceString("\n    ");
                                                                                var string13329 = new GraceString("");
                                                                                var opresult13331 = callmethodChecked(string13329, "++", [1], var_s);
                                                                                var opresult13333 = callmethodChecked(opresult13331, "++", [1], string13326);
                                                                                var opresult13335 = callmethodChecked(opresult13333, "++", [1], var_spc);
                                                                                var opresult13337 = callmethodChecked(opresult13335, "++", [1], string13323);
                                                                                var_s = opresult13337;
                                                                                setLineNumber(2541);    // compilenode call
                                                                                onSelf = true;
                                                                                var call13338 = callmethodChecked(this, "args", [0]);
                                                                                var block13339 = new GraceBlock(this, 2541, 1);
                                                                                setLineNumber(1);    // compilenode identifier
                                                                                block13339.real = function(var_a) {
                                                                                  setLineNumber(2542);    // compilenode string
                                                                                  var string13340 = new GraceString("");
                                                                                  var opresult13344 = callmethodChecked(var_depth, "+", [1], new GraceNum(4));
                                                                                  var call13345 = callmethodChecked(var_a, "pretty", [1], opresult13344);
                                                                                  var string13347 = new GraceString("");
                                                                                  var string13350 = new GraceString("\n    ");
                                                                                  var string13353 = new GraceString("");
                                                                                  var opresult13355 = callmethodChecked(string13353, "++", [1], var_s);
                                                                                  var opresult13357 = callmethodChecked(opresult13355, "++", [1], string13350);
                                                                                  var opresult13359 = callmethodChecked(opresult13357, "++", [1], var_spc);
                                                                                  var opresult13361 = callmethodChecked(opresult13359, "++", [1], string13347);
                                                                                  var opresult13363 = callmethodChecked(opresult13361, "++", [1], call13345);
                                                                                  var opresult13365 = callmethodChecked(opresult13363, "++", [1], string13340);
                                                                                  var_s = opresult13365;
                                                                                  return GraceDone;
                                                                                };
                                                                                var call13366 = callmethodChecked(var_prelude, "for()do", [1, 1], call13338, block13339);
                                                                                setLineNumber(2544);    // compilenode identifier
                                                                                return var_s;
                                                                              };
                                                                              func13295.paramCounts = [1];
                                                                              obj13284.methods["pretty"] = func13295;
                                                                              func13295.definitionLine = 2534;
                                                                              func13295.definitionModule = "ast";
                                                                              var func13367 = function(argcv) {    // method shallowCopy
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2547);    // compilenode call
                                                                                onSelf = true;
                                                                                var call13368 = callmethodChecked(this, "name", [0]);
                                                                                onSelf = true;
                                                                                var call13369 = callmethodChecked(this, "args", [0]);
                                                                                var call13370 = callmethodChecked(var_callWithPart, "request()withArgs", [1, 1], call13368, call13369);
                                                                                var call13371 = callmethodChecked(call13370, "shallowCopyFieldsFrom", [1], this);
                                                                                return call13371;
                                                                              };
                                                                              func13367.paramCounts = [0];
                                                                              obj13284.methods["shallowCopy"] = func13367;
                                                                              func13367.definitionLine = 2546;
                                                                              func13367.definitionModule = "ast";
                                                                              var func13372 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_other = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2550);    // compilenode identifier
                                                                                var call13373 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                                                setLineNumber(2551);    // compilenode identifier
                                                                                var call13374 = callmethodChecked(var_other, "lineLength", [0]);
                                                                                onSelf = true;
                                                                                var call13375 = callmethodChecked(this, "lineLength:=", [1], call13374);
                                                                                setLineNumber(2552);    // compilenode identifier
                                                                                return this;
                                                                              };
                                                                              func13372.paramCounts = [1];
                                                                              obj13284.methods["shallowCopyFieldsFrom"] = func13372;
                                                                              func13372.definitionLine = 2549;
                                                                              func13372.definitionModule = "ast";
                                                                              var func13376 = function(argcv) {    // method statementName
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for statementName"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2554);    // compilenode string
                                                                                var string13377 = new GraceString("request");
                                                                                return string13377;
                                                                              };
                                                                              func13376.paramCounts = [0];
                                                                              obj13284.methods["statementName"] = func13376;
                                                                              func13376.definitionLine = 2554;
                                                                              func13376.definitionModule = "ast";
                                                                              setLineNumber(2522);    // compilenode call
                                                                              var call13378 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call13379 = callmethodChecked(call13378, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call13380 = callmethodChecked(call13379, "baseNode()object", [0, 1], this);
                                                                              obj13284.superobj = call13380;
                                                                              if (call13380.data) obj13284.data = call13380.data;
                                                                              if (call13380.hasOwnProperty('_value'))
                                                                                  obj13284._value = call13380._value;
                                                                              setLineNumber(2523);    // compilenode string
                                                                              var string13381 = new GraceString("callwithpart");
                                                                              obj13284.data["kind"] = string13381;
                                                                              var reader_ast_kind13382 = function() {
                                                                                return this.data["kind"];
                                                                              };
                                                                              reader_ast_kind13382.def = true;
                                                                              obj13284.methods["kind"] = reader_ast_kind13382;
                                                                              setLineNumber(2524);    // compilenode identifier
                                                                              obj13284.data["name"] = var_rPart;
                                                                              var reader_ast_name13383 = function() {
                                                                                return this.data["name"];
                                                                              };
                                                                              obj13284.methods["name"] = reader_ast_name13383;
                                                                              obj13284.data["name"] = var_rPart;
                                                                              var writer_ast_name13383 = function(argcv, o) {
                                                                                this.data["name"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj13284.methods["name:="] = writer_ast_name13383;
                                                                              obj13284.mutable = true;
                                                                              setLineNumber(2525);    // compilenode identifier
                                                                              obj13284.data["args"] = var_xs;
                                                                              var reader_ast_args13384 = function() {
                                                                                return this.data["args"];
                                                                              };
                                                                              obj13284.methods["args"] = reader_ast_args13384;
                                                                              obj13284.data["args"] = var_xs;
                                                                              var writer_ast_args13384 = function(argcv, o) {
                                                                                this.data["args"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj13284.methods["args:="] = writer_ast_args13384;
                                                                              obj13284.mutable = true;
                                                                              setLineNumber(2526);    // compilenode num
                                                                              obj13284.data["lineLength"] = new GraceNum(0);
                                                                              var reader_ast_lineLength13385 = function() {
                                                                                return this.data["lineLength"];
                                                                              };
                                                                              obj13284.methods["lineLength"] = reader_ast_lineLength13385;
                                                                              obj13284.data["lineLength"] = new GraceNum(0);
                                                                              var writer_ast_lineLength13385 = function(argcv, o) {
                                                                                this.data["lineLength"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj13284.methods["lineLength:="] = writer_ast_lineLength13385;
                                                                              obj13284.mutable = true;
                                                                              superDepth = origSuperDepth;
                                                                            };
                                                                            obj_init_13284.apply(inheritingObject, []);
                                                                            return obj13284;
                                                                            };
                                                                            func13283.paramTypes = [];
                                                                            func13283.paramTypes.push([type_String, "rPart"]);
                                                                            func13283.paramTypes.push([]);
                                                                            obj13171.methods["request()withArgs()object"] = func13283;
                                                                          superDepth = origSuperDepth;
                                                                        };
                                                                        obj_init_13171.apply(obj13171, []);
                                                                        var var_callWithPart = obj13171;
                                                                        setLineNumber(2522);    // compilenode method
                                                                        var func13386 = function(argcv) {    // method callWithPart
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for callWithPart"));
                                                                          setModuleName("ast");
                                                                          // callWithPart is a simple accessor - elide try ... catch
                                                                          setLineNumber(2512);    // compilenode identifier
                                                                          return var_callWithPart;
                                                                        };
                                                                        func13386.paramCounts = [0];
                                                                        this.methods["callWithPart"] = func13386;
                                                                        func13386.definitionLine = 2522;
                                                                        func13386.definitionModule = "ast";
                                                                        this.methods["callWithPart"].debug = "def";
                                                                        setLineNumber(2558);    // compilenode object
                                                                        var obj13387 = Grace_allocObject(GraceObject, "commentNode");
                                                                        obj13387.definitionModule = "ast";
                                                                        obj13387.definitionLine = 2558;
                                                                        obj13387.outer = this;
                                                                        var reader_ast_outer13388 = function() {
                                                                          return this.outer;
                                                                        };
                                                                        obj13387.methods["outer"] = reader_ast_outer13388;
                                                                        var obj_init_13387 = function() {
                                                                          var origSuperDepth = superDepth;
                                                                          superDepth = obj13387;
                                                                          var func13389 = function(argcv) {    // method new(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_val__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for new(1)"));
                                                                            setModuleName("ast");
                                                                            setLineNumber(2559);    // compilenode object
                                                                            var obj13390 = Grace_allocObject(null, "commentNode.new");
                                                                            obj13390.definitionModule = "ast";
                                                                            obj13390.definitionLine = 2559;
                                                                            obj13390.outer = this;
                                                                            var reader_ast_outer13391 = function() {
                                                                              return this.outer;
                                                                            };
                                                                            obj13390.methods["outer"] = reader_ast_outer13391;
                                                                            var obj_init_13390 = function() {
                                                                              var origSuperDepth = superDepth;
                                                                              superDepth = obj13390;
                                                                              var func13392 = function(argcv) {    // method isComment
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isComment"));
                                                                                setModuleName("ast");
                                                                                // isComment is a simple accessor - elide try ... catch
                                                                                setLineNumber(2566);    // compilenode identifier
                                                                                return GraceTrue;
                                                                              };
                                                                              func13392.paramCounts = [0];
                                                                              obj13390.methods["isComment"] = func13392;
                                                                              func13392.definitionLine = 2566;
                                                                              func13392.definitionModule = "ast";
                                                                              var func13393 = function(argcv) {    // method isLegalInTrait
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLegalInTrait"));
                                                                                setModuleName("ast");
                                                                                // isLegalInTrait is a simple accessor - elide try ... catch
                                                                                setLineNumber(2567);    // compilenode identifier
                                                                                return GraceTrue;
                                                                              };
                                                                              func13393.paramCounts = [0];
                                                                              obj13390.methods["isLegalInTrait"] = func13393;
                                                                              func13393.definitionLine = 2567;
                                                                              func13393.definitionModule = "ast";
                                                                              var func13394 = function(argcv) {    // method isExecutable
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                                                                setModuleName("ast");
                                                                                // isExecutable is a simple accessor - elide try ... catch
                                                                                setLineNumber(2568);    // compilenode identifier
                                                                                return GraceFalse;
                                                                              };
                                                                              func13394.paramCounts = [0];
                                                                              obj13390.methods["isExecutable"] = func13394;
                                                                              func13394.definitionLine = 2568;
                                                                              func13394.definitionModule = "ast";
                                                                              var func13395 = function(argcv) {    // method asString
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2569);    // compilenode string
                                                                                var string13396 = new GraceString("");
                                                                                onSelf = true;
                                                                                var call13398 = callmethodChecked(this, "value", [0]);
                                                                                var string13400 = new GraceString("): ");
                                                                                onSelf = true;
                                                                                var call13402 = callmethodChecked(this, "endLine", [0]);
                                                                                var string13404 = new GraceString("\u2013");
                                                                                onSelf = true;
                                                                                var call13406 = callmethodChecked(this, "line", [0]);
                                                                                var string13408 = new GraceString("comment (");
                                                                                var opresult13410 = callmethodChecked(string13408, "++", [1], call13406);
                                                                                var opresult13412 = callmethodChecked(opresult13410, "++", [1], string13404);
                                                                                var opresult13414 = callmethodChecked(opresult13412, "++", [1], call13402);
                                                                                var opresult13416 = callmethodChecked(opresult13414, "++", [1], string13400);
                                                                                var opresult13418 = callmethodChecked(opresult13416, "++", [1], call13398);
                                                                                var opresult13420 = callmethodChecked(opresult13418, "++", [1], string13396);
                                                                                return opresult13420;
                                                                              };
                                                                              func13395.paramCounts = [0];
                                                                              obj13390.methods["asString"] = func13395;
                                                                              func13395.definitionLine = 2569;
                                                                              func13395.definitionModule = "ast";
                                                                              var func13421 = function(argcv) {    // method extendCommentUsing(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_cmtNode = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for extendCommentUsing(1)"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2571);    // compilenode identifier
                                                                                var call13422 = callmethodChecked(var_cmtNode, "value", [0]);
                                                                                var string13424 = new GraceString(" ");
                                                                                onSelf = true;
                                                                                var call13426 = callmethodChecked(this, "value", [0]);
                                                                                var opresult13428 = callmethodChecked(call13426, "++", [1], string13424);
                                                                                var opresult13430 = callmethodChecked(opresult13428, "++", [1], call13422);
                                                                                onSelf = true;
                                                                                var call13431 = callmethodChecked(this, "value:=", [1], opresult13430);
                                                                                setLineNumber(2572);    // compilenode identifier
                                                                                var call13432 = callmethodChecked(var_cmtNode, "endLine", [0]);
                                                                                onSelf = true;
                                                                                var call13433 = callmethodChecked(this, "endLine:=", [1], call13432);
                                                                                return call13433;
                                                                              };
                                                                              func13421.paramCounts = [1];
                                                                              obj13390.methods["extendCommentUsing"] = func13421;
                                                                              func13421.definitionLine = 2570;
                                                                              func13421.definitionModule = "ast";
                                                                              var func13434 = function(argcv) {    // method map(1)ancestors(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_blk = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                                var var_as = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[1] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2575);    // compilenode call
                                                                                onSelf = true;
                                                                                var call13435 = callmethodChecked(this, "shallowCopy", [0]);
                                                                                var var_n = call13435;
                                                                                setLineNumber(2576);    // compilenode identifier
                                                                                var call13436 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                                var var_newChain = call13436;
                                                                                setLineNumber(2577);    // compilenode identifier
                                                                                var call13437 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                                return call13437;
                                                                              };
                                                                              func13434.paramCounts = [1, 1];
                                                                              obj13390.methods["map()ancestors"] = func13434;
                                                                              func13434.definitionLine = 2574;
                                                                              func13434.definitionModule = "ast";
                                                                              var func13438 = function(argcv) {    // method accept(1)from(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_visitor = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                                var var_as = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[1] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(2579);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("ast");
                                                                                setLineNumber(2580);    // compilenode identifier
                                                                                var call13439 = callmethodChecked(var_visitor, "visitComment()up", [1, 1], this, var_as);
                                                                                return call13439;
                                                                              };
                                                                              func13438.paramTypes = [];
                                                                              func13438.paramTypes.push([]);
                                                                              func13438.paramTypes.push([]);
                                                                              func13438.paramCounts = [1, 1];
                                                                              obj13390.methods["accept()from"] = func13438;
                                                                              func13438.definitionLine = 2579;
                                                                              func13438.definitionModule = "ast";
                                                                              var func13440 = function(argcv) {    // method pretty(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_depth = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2583);    // compilenode string
                                                                                var string13441 = new GraceString("\n");
                                                                                var var_s = string13441;
                                                                                setLineNumber(2584);    // compilenode identifier
                                                                                var diff13444 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                                                                var block13445 = new GraceBlock(this, 2584, 0);
                                                                                block13445.real = function() {
                                                                                  setLineNumber(2585);    // compilenode string
                                                                                  var string13446 = new GraceString("  ");
                                                                                  var opresult13449 = callmethodChecked(var_s, "++", [1], string13446);
                                                                                  var_s = opresult13449;
                                                                                  return GraceDone;
                                                                                };
                                                                                var call13450 = callmethodChecked(var_prelude, "repeat()times", [1, 1], diff13444, block13445);
                                                                                var if13451 = GraceDone;
                                                                                setLineNumber(2587);    // compilenode call
                                                                                onSelf = true;
                                                                                var call13452 = callmethodChecked(this, "isPreceededByBlankLine", [0]);
                                                                                if (Grace_isTrue(call13452)) {
                                                                                  var string13453 = new GraceString(" > blank");
                                                                                  if13451 = string13453;
                                                                                } else {
                                                                                  var string13454 = new GraceString("");
                                                                                  if13451 = string13454;
                                                                                }
                                                                                var var_pb = if13451;
                                                                                setLineNumber(2588);    // compilenode string
                                                                                var string13455 = new GraceString("\u203a");
                                                                                onSelf = true;
                                                                                var call13457 = callmethodChecked(this, "value", [0]);
                                                                                var string13459 = new GraceString("): \u2039");
                                                                                onSelf = true;
                                                                                var call13461 = callmethodChecked(this, "endLine", [0]);
                                                                                var string13463 = new GraceString("\u2013");
                                                                                onSelf = true;
                                                                                var call13465 = callmethodChecked(this, "line", [0]);
                                                                                var string13467 = new GraceString("(");
                                                                                var string13470 = new GraceString("Comment");
                                                                                var string13473 = new GraceString("");
                                                                                var opresult13475 = callmethodChecked(string13473, "++", [1], var_s);
                                                                                var opresult13477 = callmethodChecked(opresult13475, "++", [1], string13470);
                                                                                var opresult13479 = callmethodChecked(opresult13477, "++", [1], var_pb);
                                                                                var opresult13481 = callmethodChecked(opresult13479, "++", [1], string13467);
                                                                                var opresult13483 = callmethodChecked(opresult13481, "++", [1], call13465);
                                                                                var opresult13485 = callmethodChecked(opresult13483, "++", [1], string13463);
                                                                                var opresult13487 = callmethodChecked(opresult13485, "++", [1], call13461);
                                                                                var opresult13489 = callmethodChecked(opresult13487, "++", [1], string13459);
                                                                                var opresult13491 = callmethodChecked(opresult13489, "++", [1], call13457);
                                                                                var opresult13493 = callmethodChecked(opresult13491, "++", [1], string13455);
                                                                                return opresult13493;
                                                                              };
                                                                              func13440.paramCounts = [1];
                                                                              obj13390.methods["pretty"] = func13440;
                                                                              func13440.definitionLine = 2582;
                                                                              func13440.definitionModule = "ast";
                                                                              var func13494 = function(argcv) {    // method toGrace(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_depth = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                                setModuleName("ast");
                                                                                var if13495 = GraceDone;
                                                                                setLineNumber(2593);    // compilenode call
                                                                                onSelf = true;
                                                                                var call13496 = callmethodChecked(this, "isPartialLine", [0]);
                                                                                if (Grace_isTrue(call13496)) {
                                                                                  setLineNumber(2594);    // compilenode string
                                                                                  var string13497 = new GraceString("");
                                                                                  onSelf = true;
                                                                                  var call13499 = callmethodChecked(this, "value", [0]);
                                                                                  var string13501 = new GraceString("// (partial) ");
                                                                                  var opresult13503 = callmethodChecked(string13501, "++", [1], call13499);
                                                                                  var opresult13505 = callmethodChecked(opresult13503, "++", [1], string13497);
                                                                                  if13495 = opresult13505;
                                                                                } else {
                                                                                  setLineNumber(2596);    // compilenode string
                                                                                  var string13506 = new GraceString("");
                                                                                  var var_spc = string13506;
                                                                                  setLineNumber(2597);    // compilenode block
                                                                                  var block13507 = new GraceBlock(this, 2597, 0);
                                                                                  block13507.real = function() {
                                                                                    var string13508 = new GraceString("    ");
                                                                                    var opresult13511 = callmethodChecked(var_spc, "++", [1], string13508);
                                                                                    var_spc = opresult13511;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  var call13512 = callmethodChecked(var_prelude, "repeat()times", [1, 1], var_depth, block13507);
                                                                                  setLineNumber(2598);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call13513 = callmethodChecked(this, "value", [0]);
                                                                                  var string13514 = new GraceString("// ");
                                                                                  var opresult13517 = callmethodChecked(var_spc, "++", [1], string13514);
                                                                                  var call13518 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call13519 = callmethodChecked(call13518, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call13520 = callmethodChecked(call13519, "wrap()to()prefix", [1, 1, 1], call13513, var_lineLength, opresult13517);
                                                                                  if13495 = call13520;
                                                                                }
                                                                                return if13495;
                                                                              };
                                                                              func13494.paramCounts = [1];
                                                                              obj13390.methods["toGrace"] = func13494;
                                                                              func13494.definitionLine = 2590;
                                                                              func13494.definitionModule = "ast";
                                                                              var func13521 = function(argcv) {    // method shallowCopy
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2602);    // compilenode identifier
                                                                                var call13522 = callmethodChecked(var_commentNode, "new", [1], var_nullNode);
                                                                                var call13523 = callmethodChecked(call13522, "shallowCopyFieldsFrom", [1], this);
                                                                                return call13523;
                                                                              };
                                                                              func13521.paramCounts = [0];
                                                                              obj13390.methods["shallowCopy"] = func13521;
                                                                              func13521.definitionLine = 2601;
                                                                              func13521.definitionModule = "ast";
                                                                              var func13524 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_other = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                                                setModuleName("ast");
                                                                                setLineNumber(2605);    // compilenode identifier
                                                                                var call13525 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                                                setLineNumber(2606);    // compilenode identifier
                                                                                var call13526 = callmethodChecked(var_other, "value", [0]);
                                                                                onSelf = true;
                                                                                var call13527 = callmethodChecked(this, "value:=", [1], call13526);
                                                                                setLineNumber(2607);    // compilenode identifier
                                                                                var call13528 = callmethodChecked(var_other, "isPartialLine", [0]);
                                                                                onSelf = true;
                                                                                var call13529 = callmethodChecked(this, "isPartialLine:=", [1], call13528);
                                                                                setLineNumber(2608);    // compilenode identifier
                                                                                var call13530 = callmethodChecked(var_other, "endLine", [0]);
                                                                                onSelf = true;
                                                                                var call13531 = callmethodChecked(this, "endLine:=", [1], call13530);
                                                                                setLineNumber(2609);    // compilenode identifier
                                                                                return this;
                                                                              };
                                                                              func13524.paramCounts = [1];
                                                                              obj13390.methods["shallowCopyFieldsFrom"] = func13524;
                                                                              func13524.definitionLine = 2604;
                                                                              func13524.definitionModule = "ast";
                                                                              setLineNumber(2560);    // compilenode call
                                                                              var call13532 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call13533 = callmethodChecked(call13532, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call13534 = callmethodChecked(call13533, "baseNode()object", [0, 1], this);
                                                                              obj13390.superobj = call13534;
                                                                              if (call13534.data) obj13390.data = call13534.data;
                                                                              if (call13534.hasOwnProperty('_value'))
                                                                                  obj13390._value = call13534._value;
                                                                              setLineNumber(2561);    // compilenode string
                                                                              var string13535 = new GraceString("comment");
                                                                              obj13390.data["kind"] = string13535;
                                                                              var reader_ast_kind13536 = function() {
                                                                                return this.data["kind"];
                                                                              };
                                                                              reader_ast_kind13536.def = true;
                                                                              obj13390.methods["kind"] = reader_ast_kind13536;
                                                                              setLineNumber(2562);    // compilenode identifier
                                                                              obj13390.data["value"] = var_val__39__;
                                                                              var reader_ast_value13537 = function() {
                                                                                return this.data["value"];
                                                                              };
                                                                              obj13390.methods["value"] = reader_ast_value13537;
                                                                              obj13390.data["value"] = var_val__39__;
                                                                              var writer_ast_value13537 = function(argcv, o) {
                                                                                this.data["value"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj13390.methods["value:="] = writer_ast_value13537;
                                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], var_val__39__)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("initial value of var 'value' is not of type String"));
                                                                              obj13390.mutable = true;
                                                                              setLineNumber(2563);    // compilenode identifier
                                                                              obj13390.data["isPartialLine"] = GraceFalse;
                                                                              var reader_ast_isPartialLine13538 = function() {
                                                                                return this.data["isPartialLine"];
                                                                              };
                                                                              obj13390.methods["isPartialLine"] = reader_ast_isPartialLine13538;
                                                                              obj13390.data["isPartialLine"] = GraceFalse;
                                                                              var writer_ast_isPartialLine13538 = function(argcv, o) {
                                                                                this.data["isPartialLine"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj13390.methods["isPartialLine:="] = writer_ast_isPartialLine13538;
                                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("initial value of var 'isPartialLine' is not of type Boolean"));
                                                                              obj13390.mutable = true;
                                                                              setLineNumber(2564);    // compilenode identifier
                                                                              obj13390.data["isPreceededByBlankLine"] = GraceFalse;
                                                                              var reader_ast_isPreceededByBlankLine13539 = function() {
                                                                                return this.data["isPreceededByBlankLine"];
                                                                              };
                                                                              obj13390.methods["isPreceededByBlankLine"] = reader_ast_isPreceededByBlankLine13539;
                                                                              obj13390.data["isPreceededByBlankLine"] = GraceFalse;
                                                                              var writer_ast_isPreceededByBlankLine13539 = function(argcv, o) {
                                                                                this.data["isPreceededByBlankLine"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj13390.methods["isPreceededByBlankLine:="] = writer_ast_isPreceededByBlankLine13539;
                                                                              obj13390.mutable = true;
                                                                              setLineNumber(2565);    // compilenode identifier
                                                                              var call13540 = callmethodChecked(var_util, "linenum", [0]);
                                                                              obj13390.data["endLine"] = call13540;
                                                                              var reader_ast_endLine13541 = function() {
                                                                                return this.data["endLine"];
                                                                              };
                                                                              obj13390.methods["endLine"] = reader_ast_endLine13541;
                                                                              obj13390.data["endLine"] = call13540;
                                                                              var writer_ast_endLine13541 = function(argcv, o) {
                                                                                this.data["endLine"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj13390.methods["endLine:="] = writer_ast_endLine13541;
                                                                              obj13390.mutable = true;
                                                                              superDepth = origSuperDepth;
                                                                            };
                                                                            obj_init_13390.apply(obj13390, []);
                                                                            return obj13390;
                                                                          };
                                                                          func13389.paramCounts = [1];
                                                                          obj13387.methods["new"] = func13389;
                                                                          func13389.definitionLine = 2559;
                                                                          func13389.definitionModule = "ast";
                                                                            var func13542 = function(argcv) {    // method new(1     )()object
                                                                              var curarg = 1;
                                                                              var var_val__39__ = arguments[curarg];
                                                                              curarg++;
                                                                              var inheritingObject = arguments[curarg++];
                                                                              // Start argument processing
                                                                              curarg = 1;
                                                                              curarg++;
                                                                              // End argument processing
                                                                              setModuleName("ast");
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var obj13543 = Grace_allocObject(null, "new");
                                                                              obj13543.definitionModule = "ast";
                                                                              obj13543.definitionLine = 2559;
                                                                              var inho13543 = inheritingObject;
                                                                              while (inho13543.superobj) inho13543 = inho13543.superobj;
                                                                              inho13543.superobj = obj13543;
                                                                              obj13543.data = inheritingObject.data;
                                                                              if (inheritingObject.hasOwnProperty('_value'))
                                                                                obj13543._value = inheritingObject._value;
                                                                              obj13543.outer = this;
                                                                              var reader_ast_outer13544 = function() {
                                                                                return this.outer;
                                                                              };
                                                                              obj13543.methods["outer"] = reader_ast_outer13544;
                                                                              var obj_init_13543 = function() {
                                                                                var origSuperDepth = superDepth;
                                                                                superDepth = obj13543;
                                                                                var func13545 = function(argcv) {    // method isComment
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isComment"));
                                                                                  setModuleName("ast");
                                                                                  // isComment is a simple accessor - elide try ... catch
                                                                                  setLineNumber(2566);    // compilenode identifier
                                                                                  return GraceTrue;
                                                                                };
                                                                                func13545.paramCounts = [0];
                                                                                obj13543.methods["isComment"] = func13545;
                                                                                func13545.definitionLine = 2566;
                                                                                func13545.definitionModule = "ast";
                                                                                var func13546 = function(argcv) {    // method isLegalInTrait
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLegalInTrait"));
                                                                                  setModuleName("ast");
                                                                                  // isLegalInTrait is a simple accessor - elide try ... catch
                                                                                  setLineNumber(2567);    // compilenode identifier
                                                                                  return GraceTrue;
                                                                                };
                                                                                func13546.paramCounts = [0];
                                                                                obj13543.methods["isLegalInTrait"] = func13546;
                                                                                func13546.definitionLine = 2567;
                                                                                func13546.definitionModule = "ast";
                                                                                var func13547 = function(argcv) {    // method isExecutable
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isExecutable"));
                                                                                  setModuleName("ast");
                                                                                  // isExecutable is a simple accessor - elide try ... catch
                                                                                  setLineNumber(2568);    // compilenode identifier
                                                                                  return GraceFalse;
                                                                                };
                                                                                func13547.paramCounts = [0];
                                                                                obj13543.methods["isExecutable"] = func13547;
                                                                                func13547.definitionLine = 2568;
                                                                                func13547.definitionModule = "ast";
                                                                                var func13548 = function(argcv) {    // method asString
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2569);    // compilenode string
                                                                                  var string13549 = new GraceString("");
                                                                                  onSelf = true;
                                                                                  var call13551 = callmethodChecked(this, "value", [0]);
                                                                                  var string13553 = new GraceString("): ");
                                                                                  onSelf = true;
                                                                                  var call13555 = callmethodChecked(this, "endLine", [0]);
                                                                                  var string13557 = new GraceString("\u2013");
                                                                                  onSelf = true;
                                                                                  var call13559 = callmethodChecked(this, "line", [0]);
                                                                                  var string13561 = new GraceString("comment (");
                                                                                  var opresult13563 = callmethodChecked(string13561, "++", [1], call13559);
                                                                                  var opresult13565 = callmethodChecked(opresult13563, "++", [1], string13557);
                                                                                  var opresult13567 = callmethodChecked(opresult13565, "++", [1], call13555);
                                                                                  var opresult13569 = callmethodChecked(opresult13567, "++", [1], string13553);
                                                                                  var opresult13571 = callmethodChecked(opresult13569, "++", [1], call13551);
                                                                                  var opresult13573 = callmethodChecked(opresult13571, "++", [1], string13549);
                                                                                  return opresult13573;
                                                                                };
                                                                                func13548.paramCounts = [0];
                                                                                obj13543.methods["asString"] = func13548;
                                                                                func13548.definitionLine = 2569;
                                                                                func13548.definitionModule = "ast";
                                                                                var func13574 = function(argcv) {    // method extendCommentUsing(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_cmtNode = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for extendCommentUsing(1)"));
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2571);    // compilenode identifier
                                                                                  var call13575 = callmethodChecked(var_cmtNode, "value", [0]);
                                                                                  var string13577 = new GraceString(" ");
                                                                                  onSelf = true;
                                                                                  var call13579 = callmethodChecked(this, "value", [0]);
                                                                                  var opresult13581 = callmethodChecked(call13579, "++", [1], string13577);
                                                                                  var opresult13583 = callmethodChecked(opresult13581, "++", [1], call13575);
                                                                                  onSelf = true;
                                                                                  var call13584 = callmethodChecked(this, "value:=", [1], opresult13583);
                                                                                  setLineNumber(2572);    // compilenode identifier
                                                                                  var call13585 = callmethodChecked(var_cmtNode, "endLine", [0]);
                                                                                  onSelf = true;
                                                                                  var call13586 = callmethodChecked(this, "endLine:=", [1], call13585);
                                                                                  return call13586;
                                                                                };
                                                                                func13574.paramCounts = [1];
                                                                                obj13543.methods["extendCommentUsing"] = func13574;
                                                                                func13574.definitionLine = 2570;
                                                                                func13574.definitionModule = "ast";
                                                                                var func13587 = function(argcv) {    // method map(1)ancestors(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_blk = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for map (arg list 1) of map(1)ancestors(1)"));
                                                                                  var var_as = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[1] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ancestors (arg list 2) of map(1)ancestors(1)"));
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2575);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call13588 = callmethodChecked(this, "shallowCopy", [0]);
                                                                                  var var_n = call13588;
                                                                                  setLineNumber(2576);    // compilenode identifier
                                                                                  var call13589 = callmethodChecked(var_as, "extend", [1], var_n);
                                                                                  var var_newChain = call13589;
                                                                                  setLineNumber(2577);    // compilenode identifier
                                                                                  var call13590 = callmethodChecked(var_blk, "apply", [2], var_n, var_as);
                                                                                  return call13590;
                                                                                };
                                                                                func13587.paramCounts = [1, 1];
                                                                                obj13543.methods["map()ancestors"] = func13587;
                                                                                func13587.definitionLine = 2574;
                                                                                func13587.definitionModule = "ast";
                                                                                var func13591 = function(argcv) {    // method accept(1)from(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_visitor = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for accept (arg list 1) of accept(1)from(1)"));
                                                                                  var var_as = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[1] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 2) of accept(1)from(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(2579);    // compilenode identifier
                                                                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2580);    // compilenode identifier
                                                                                  var call13592 = callmethodChecked(var_visitor, "visitComment()up", [1, 1], this, var_as);
                                                                                  return call13592;
                                                                                };
                                                                                func13591.paramTypes = [];
                                                                                func13591.paramTypes.push([]);
                                                                                func13591.paramTypes.push([]);
                                                                                func13591.paramCounts = [1, 1];
                                                                                obj13543.methods["accept()from"] = func13591;
                                                                                func13591.definitionLine = 2579;
                                                                                func13591.definitionModule = "ast";
                                                                                var func13593 = function(argcv) {    // method pretty(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_depth = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pretty(1)"));
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2583);    // compilenode string
                                                                                  var string13594 = new GraceString("\n");
                                                                                  var var_s = string13594;
                                                                                  setLineNumber(2584);    // compilenode identifier
                                                                                  var diff13597 = callmethodChecked(var_depth, "-", [1], new GraceNum(1));
                                                                                  var block13598 = new GraceBlock(this, 2584, 0);
                                                                                  block13598.real = function() {
                                                                                    setLineNumber(2585);    // compilenode string
                                                                                    var string13599 = new GraceString("  ");
                                                                                    var opresult13602 = callmethodChecked(var_s, "++", [1], string13599);
                                                                                    var_s = opresult13602;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  var call13603 = callmethodChecked(var_prelude, "repeat()times", [1, 1], diff13597, block13598);
                                                                                  var if13604 = GraceDone;
                                                                                  setLineNumber(2587);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call13605 = callmethodChecked(this, "isPreceededByBlankLine", [0]);
                                                                                  if (Grace_isTrue(call13605)) {
                                                                                    var string13606 = new GraceString(" > blank");
                                                                                    if13604 = string13606;
                                                                                  } else {
                                                                                    var string13607 = new GraceString("");
                                                                                    if13604 = string13607;
                                                                                  }
                                                                                  var var_pb = if13604;
                                                                                  setLineNumber(2588);    // compilenode string
                                                                                  var string13608 = new GraceString("\u203a");
                                                                                  onSelf = true;
                                                                                  var call13610 = callmethodChecked(this, "value", [0]);
                                                                                  var string13612 = new GraceString("): \u2039");
                                                                                  onSelf = true;
                                                                                  var call13614 = callmethodChecked(this, "endLine", [0]);
                                                                                  var string13616 = new GraceString("\u2013");
                                                                                  onSelf = true;
                                                                                  var call13618 = callmethodChecked(this, "line", [0]);
                                                                                  var string13620 = new GraceString("(");
                                                                                  var string13623 = new GraceString("Comment");
                                                                                  var string13626 = new GraceString("");
                                                                                  var opresult13628 = callmethodChecked(string13626, "++", [1], var_s);
                                                                                  var opresult13630 = callmethodChecked(opresult13628, "++", [1], string13623);
                                                                                  var opresult13632 = callmethodChecked(opresult13630, "++", [1], var_pb);
                                                                                  var opresult13634 = callmethodChecked(opresult13632, "++", [1], string13620);
                                                                                  var opresult13636 = callmethodChecked(opresult13634, "++", [1], call13618);
                                                                                  var opresult13638 = callmethodChecked(opresult13636, "++", [1], string13616);
                                                                                  var opresult13640 = callmethodChecked(opresult13638, "++", [1], call13614);
                                                                                  var opresult13642 = callmethodChecked(opresult13640, "++", [1], string13612);
                                                                                  var opresult13644 = callmethodChecked(opresult13642, "++", [1], call13610);
                                                                                  var opresult13646 = callmethodChecked(opresult13644, "++", [1], string13608);
                                                                                  return opresult13646;
                                                                                };
                                                                                func13593.paramCounts = [1];
                                                                                obj13543.methods["pretty"] = func13593;
                                                                                func13593.definitionLine = 2582;
                                                                                func13593.definitionModule = "ast";
                                                                                var func13647 = function(argcv) {    // method toGrace(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_depth = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for toGrace(1)"));
                                                                                  setModuleName("ast");
                                                                                  var if13648 = GraceDone;
                                                                                  setLineNumber(2593);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call13649 = callmethodChecked(this, "isPartialLine", [0]);
                                                                                  if (Grace_isTrue(call13649)) {
                                                                                    setLineNumber(2594);    // compilenode string
                                                                                    var string13650 = new GraceString("");
                                                                                    onSelf = true;
                                                                                    var call13652 = callmethodChecked(this, "value", [0]);
                                                                                    var string13654 = new GraceString("// (partial) ");
                                                                                    var opresult13656 = callmethodChecked(string13654, "++", [1], call13652);
                                                                                    var opresult13658 = callmethodChecked(opresult13656, "++", [1], string13650);
                                                                                    if13648 = opresult13658;
                                                                                  } else {
                                                                                    setLineNumber(2596);    // compilenode string
                                                                                    var string13659 = new GraceString("");
                                                                                    var var_spc = string13659;
                                                                                    setLineNumber(2597);    // compilenode block
                                                                                    var block13660 = new GraceBlock(this, 2597, 0);
                                                                                    block13660.real = function() {
                                                                                      var string13661 = new GraceString("    ");
                                                                                      var opresult13664 = callmethodChecked(var_spc, "++", [1], string13661);
                                                                                      var_spc = opresult13664;
                                                                                      return GraceDone;
                                                                                    };
                                                                                    var call13665 = callmethodChecked(var_prelude, "repeat()times", [1, 1], var_depth, block13660);
                                                                                    setLineNumber(2598);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call13666 = callmethodChecked(this, "value", [0]);
                                                                                    var string13667 = new GraceString("// ");
                                                                                    var opresult13670 = callmethodChecked(var_spc, "++", [1], string13667);
                                                                                    var call13671 = callmethodChecked(superDepth, "outer", [0]);
                                                                                    onOuter = true;
                                                                                    onSelf = true;
                                                                                    var call13672 = callmethodChecked(call13671, "outer", [0]);
                                                                                    onOuter = true;
                                                                                    onSelf = true;
                                                                                    var call13673 = callmethodChecked(call13672, "wrap()to()prefix", [1, 1, 1], call13666, var_lineLength, opresult13670);
                                                                                    if13648 = call13673;
                                                                                  }
                                                                                  return if13648;
                                                                                };
                                                                                func13647.paramCounts = [1];
                                                                                obj13543.methods["toGrace"] = func13647;
                                                                                func13647.definitionLine = 2590;
                                                                                func13647.definitionModule = "ast";
                                                                                var func13674 = function(argcv) {    // method shallowCopy
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopy"));
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2602);    // compilenode identifier
                                                                                  var call13675 = callmethodChecked(var_commentNode, "new", [1], var_nullNode);
                                                                                  var call13676 = callmethodChecked(call13675, "shallowCopyFieldsFrom", [1], this);
                                                                                  return call13676;
                                                                                };
                                                                                func13674.paramCounts = [0];
                                                                                obj13543.methods["shallowCopy"] = func13674;
                                                                                func13674.definitionLine = 2601;
                                                                                func13674.definitionModule = "ast";
                                                                                var func13677 = function(argcv) {    // method shallowCopyFieldsFrom(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_other = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for shallowCopyFieldsFrom(1)"));
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2605);    // compilenode identifier
                                                                                  var call13678 = callmethodsuper(this, "shallowCopyFieldsFrom", [1], var_other);
                                                                                  setLineNumber(2606);    // compilenode identifier
                                                                                  var call13679 = callmethodChecked(var_other, "value", [0]);
                                                                                  onSelf = true;
                                                                                  var call13680 = callmethodChecked(this, "value:=", [1], call13679);
                                                                                  setLineNumber(2607);    // compilenode identifier
                                                                                  var call13681 = callmethodChecked(var_other, "isPartialLine", [0]);
                                                                                  onSelf = true;
                                                                                  var call13682 = callmethodChecked(this, "isPartialLine:=", [1], call13681);
                                                                                  setLineNumber(2608);    // compilenode identifier
                                                                                  var call13683 = callmethodChecked(var_other, "endLine", [0]);
                                                                                  onSelf = true;
                                                                                  var call13684 = callmethodChecked(this, "endLine:=", [1], call13683);
                                                                                  setLineNumber(2609);    // compilenode identifier
                                                                                  return this;
                                                                                };
                                                                                func13677.paramCounts = [1];
                                                                                obj13543.methods["shallowCopyFieldsFrom"] = func13677;
                                                                                func13677.definitionLine = 2604;
                                                                                func13677.definitionModule = "ast";
                                                                                setLineNumber(2560);    // compilenode call
                                                                                var call13685 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call13686 = callmethodChecked(call13685, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call13687 = callmethodChecked(call13686, "baseNode()object", [0, 1], this);
                                                                                obj13543.superobj = call13687;
                                                                                if (call13687.data) obj13543.data = call13687.data;
                                                                                if (call13687.hasOwnProperty('_value'))
                                                                                    obj13543._value = call13687._value;
                                                                                setLineNumber(2561);    // compilenode string
                                                                                var string13688 = new GraceString("comment");
                                                                                obj13543.data["kind"] = string13688;
                                                                                var reader_ast_kind13689 = function() {
                                                                                  return this.data["kind"];
                                                                                };
                                                                                reader_ast_kind13689.def = true;
                                                                                obj13543.methods["kind"] = reader_ast_kind13689;
                                                                                setLineNumber(2562);    // compilenode identifier
                                                                                obj13543.data["value"] = var_val__39__;
                                                                                var reader_ast_value13690 = function() {
                                                                                  return this.data["value"];
                                                                                };
                                                                                obj13543.methods["value"] = reader_ast_value13690;
                                                                                obj13543.data["value"] = var_val__39__;
                                                                                var writer_ast_value13690 = function(argcv, o) {
                                                                                  this.data["value"] = o;
                                                                                  return GraceDone;
                                                                                };
                                                                                obj13543.methods["value:="] = writer_ast_value13690;
                                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], var_val__39__)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("initial value of var 'value' is not of type String"));
                                                                                obj13543.mutable = true;
                                                                                setLineNumber(2563);    // compilenode identifier
                                                                                obj13543.data["isPartialLine"] = GraceFalse;
                                                                                var reader_ast_isPartialLine13691 = function() {
                                                                                  return this.data["isPartialLine"];
                                                                                };
                                                                                obj13543.methods["isPartialLine"] = reader_ast_isPartialLine13691;
                                                                                obj13543.data["isPartialLine"] = GraceFalse;
                                                                                var writer_ast_isPartialLine13691 = function(argcv, o) {
                                                                                  this.data["isPartialLine"] = o;
                                                                                  return GraceDone;
                                                                                };
                                                                                obj13543.methods["isPartialLine:="] = writer_ast_isPartialLine13691;
                                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("initial value of var 'isPartialLine' is not of type Boolean"));
                                                                                obj13543.mutable = true;
                                                                                setLineNumber(2564);    // compilenode identifier
                                                                                obj13543.data["isPreceededByBlankLine"] = GraceFalse;
                                                                                var reader_ast_isPreceededByBlankLine13692 = function() {
                                                                                  return this.data["isPreceededByBlankLine"];
                                                                                };
                                                                                obj13543.methods["isPreceededByBlankLine"] = reader_ast_isPreceededByBlankLine13692;
                                                                                obj13543.data["isPreceededByBlankLine"] = GraceFalse;
                                                                                var writer_ast_isPreceededByBlankLine13692 = function(argcv, o) {
                                                                                  this.data["isPreceededByBlankLine"] = o;
                                                                                  return GraceDone;
                                                                                };
                                                                                obj13543.methods["isPreceededByBlankLine:="] = writer_ast_isPreceededByBlankLine13692;
                                                                                obj13543.mutable = true;
                                                                                setLineNumber(2565);    // compilenode identifier
                                                                                var call13693 = callmethodChecked(var_util, "linenum", [0]);
                                                                                obj13543.data["endLine"] = call13693;
                                                                                var reader_ast_endLine13694 = function() {
                                                                                  return this.data["endLine"];
                                                                                };
                                                                                obj13543.methods["endLine"] = reader_ast_endLine13694;
                                                                                obj13543.data["endLine"] = call13693;
                                                                                var writer_ast_endLine13694 = function(argcv, o) {
                                                                                  this.data["endLine"] = o;
                                                                                  return GraceDone;
                                                                                };
                                                                                obj13543.methods["endLine:="] = writer_ast_endLine13694;
                                                                                obj13543.mutable = true;
                                                                                superDepth = origSuperDepth;
                                                                              };
                                                                              obj_init_13543.apply(inheritingObject, []);
                                                                              return obj13543;
                                                                              };
                                                                              obj13387.methods["new()object"] = func13542;
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_13387.apply(obj13387, []);
                                                                          var var_commentNode = obj13387;
                                                                          var func13695 = function(argcv) {    // method commentNode
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for commentNode"));
                                                                            setModuleName("ast");
                                                                            // commentNode is a simple accessor - elide try ... catch
                                                                            setLineNumber(2558);    // compilenode identifier
                                                                            return var_commentNode;
                                                                          };
                                                                          func13695.paramCounts = [0];
                                                                          this.methods["commentNode"] = func13695;
                                                                          func13695.definitionLine = 2565;
                                                                          func13695.definitionModule = "ast";
                                                                          this.methods["commentNode"].debug = "def";
                                                                          setLineNumber(2648);    // compilenode typedec
                                                                          // Type decl ASTVisitor
                                                                          //   Type literal 
                                                                          var type13697 = new GraceType("ASTVisitor");
                                                                          type13697.typeMethods.push("visitIf()up");
                                                                          type13697.typeMethods.push("visitBlock()up");
                                                                          type13697.typeMethods.push("visitMatchCase()up");
                                                                          type13697.typeMethods.push("visitTryCatch()up");
                                                                          type13697.typeMethods.push("visitMethodType()up");
                                                                          type13697.typeMethods.push("visitSignaturePart()up");
                                                                          type13697.typeMethods.push("visitTypeLiteral()up");
                                                                          type13697.typeMethods.push("visitTypeParameters()up");
                                                                          type13697.typeMethods.push("visitTypeDec()up");
                                                                          type13697.typeMethods.push("visitMethod()up");
                                                                          type13697.typeMethods.push("visitCall()up");
                                                                          type13697.typeMethods.push("visitObject()up");
                                                                          type13697.typeMethods.push("visitModule()up");
                                                                          type13697.typeMethods.push("visitArray()up");
                                                                          type13697.typeMethods.push("visitMember()up");
                                                                          type13697.typeMethods.push("visitGeneric()up");
                                                                          type13697.typeMethods.push("visitIdentifier()up");
                                                                          type13697.typeMethods.push("visitString()up");
                                                                          type13697.typeMethods.push("visitNum()up");
                                                                          type13697.typeMethods.push("visitOp()up");
                                                                          type13697.typeMethods.push("visitBind()up");
                                                                          type13697.typeMethods.push("visitDefDec()up");
                                                                          type13697.typeMethods.push("visitVarDec()up");
                                                                          type13697.typeMethods.push("visitImport()up");
                                                                          type13697.typeMethods.push("visitReturn()up");
                                                                          type13697.typeMethods.push("visitInherits()up");
                                                                          type13697.typeMethods.push("visitDialect()up");
                                                                          type13697.typeMethods.push("visitBlank()up");
                                                                          type13697.typeMethods.push("visitComment()up");
                                                                          var var_ASTVisitor = type13697;
                                                                          setLineNumber(2565);    // compilenode method
                                                                          var func13698 = function(argcv) {    // method ASTVisitor
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ASTVisitor"));
                                                                            setModuleName("ast");
                                                                            // ASTVisitor is a simple accessor - elide try ... catch
                                                                            setLineNumber(2648);    // compilenode identifier
                                                                            return var_ASTVisitor;
                                                                          };
                                                                          func13698.paramCounts = [0];
                                                                          this.methods["ASTVisitor"] = func13698;
                                                                          func13698.definitionLine = 2565;
                                                                          func13698.definitionModule = "ast";
                                                                          setLineNumber(2784);    // compilenode object
                                                                          var obj13699 = Grace_allocObject(null, "patternMarkVisitor");
                                                                          obj13699.definitionModule = "ast";
                                                                          obj13699.definitionLine = 2784;
                                                                          obj13699.outer = this;
                                                                          var reader_ast_outer13700 = function() {
                                                                            return this.outer;
                                                                          };
                                                                          obj13699.methods["outer"] = reader_ast_outer13700;
                                                                          var obj_init_13699 = function() {
                                                                            var origSuperDepth = superDepth;
                                                                            superDepth = obj13699;
                                                                            var func13701 = function(argcv) {    // method visitCall(1)up(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_c = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visitCall (arg list 1) of visitCall(1)up(1)"));
                                                                              var var_as = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[1] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for up (arg list 2) of visitCall(1)up(1)"));
                                                                              setModuleName("ast");
                                                                              setLineNumber(2787);    // compilenode identifier
                                                                              var call13702 = callmethodChecked(var_c, "isPattern:=", [1], GraceTrue);
                                                                              setLineNumber(2788);    // compilenode identifier
                                                                              return GraceTrue;
                                                                            };
                                                                            func13701.paramCounts = [1, 1];
                                                                            obj13699.methods["visitCall()up"] = func13701;
                                                                            func13701.definitionLine = 2786;
                                                                            func13701.definitionModule = "ast";
                                                                            setLineNumber(2785);    // compilenode call
                                                                            var call13703 = callmethodChecked(superDepth, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call13704 = callmethodChecked(call13703, "baseVisitor()object", [0, 1], this);
                                                                            obj13699.superobj = call13704;
                                                                            if (call13704.data) obj13699.data = call13704.data;
                                                                            if (call13704.hasOwnProperty('_value'))
                                                                                obj13699._value = call13704._value;
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_13699.apply(obj13699, []);
                                                                          var var_patternMarkVisitor = obj13699;
                                                                          var func13705 = function(argcv) {    // method patternMarkVisitor
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for patternMarkVisitor"));
                                                                            setModuleName("ast");
                                                                            // patternMarkVisitor is a simple accessor - elide try ... catch
                                                                            setLineNumber(2784);    // compilenode identifier
                                                                            return var_patternMarkVisitor;
                                                                          };
                                                                          func13705.paramCounts = [0];
                                                                          this.methods["patternMarkVisitor"] = func13705;
                                                                          func13705.definitionLine = 2785;
                                                                          func13705.definitionModule = "ast";
                                                                          this.methods["patternMarkVisitor"].debug = "def";
                                                                          return this;
                                                                        }
                                                                        gracecode_ast.imports = ['identifierKinds', 'util'];
                                                                        if (typeof gctCache !== "undefined")
                                                                          gctCache['ast'] = "classes:\n ancestorChain\n arrayNode\n bindNode\n blankNode\n blockNode\n callNode\n callWithPart\n commentNode\n defDecNode\n dialectNode\n genericNode\n identifierNode\n ifNode\n importNode\n inheritsNode\n matchCaseNode\n memberNode\n methodNode\n methodTypeNode\n moduleNode\n numNode\n objectNode\n opNode\n returnNode\n signaturePart\n stringNode\n tryCatchNode\n typeDecNode\n typeLiteralNode\n typeParametersNode\n varDecNode\nconfidential:\n listMap()ancestors\n maybeListMap()ancestors\n maybeMap()ancestors\nconstructors-of:ancestorChain:\n cons()onto\n empty\nconstructors-of:arrayNode:\n new\nconstructors-of:bindNode:\n new\nconstructors-of:blankNode:\n new\nconstructors-of:blockNode:\n new\nconstructors-of:callNode:\n new\nconstructors-of:callWithPart:\n request()withArgs\nconstructors-of:commentNode:\n new\nconstructors-of:defDecNode:\n new\nconstructors-of:dialectNode:\n new\nconstructors-of:genericNode:\n new\nconstructors-of:identifierNode:\n new\nconstructors-of:ifNode:\n new\nconstructors-of:importNode:\n new\nconstructors-of:inheritsNode:\n new\nconstructors-of:matchCaseNode:\n new\nconstructors-of:memberNode:\n new\nconstructors-of:methodNode:\n new\nconstructors-of:methodTypeNode:\n new\nconstructors-of:moduleNode:\n body\nconstructors-of:numNode:\n new\nconstructors-of:objectNode:\n new\nconstructors-of:opNode:\n new\nconstructors-of:returnNode:\n new\nconstructors-of:signaturePart:\n partName()params\nconstructors-of:stringNode:\n new\nconstructors-of:tryCatchNode:\n new\nconstructors-of:typeDecNode:\n new\nconstructors-of:typeLiteralNode:\n new\nconstructors-of:typeParametersNode:\n new\nconstructors-of:varDecNode:\n new\nfresh-methods:\n aliasNew()old\n baseNode\n baseVisitor\n pluggableVisitor\nfresh:aliasNew()old:\n ==\n asString\n hash\n isExecutable\n newName\n oldName\n pretty\nfresh:baseNode:\n ==\n accept\n addComment\n addComments\n asString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopyFieldsFrom\n statementName\n symbolTable\n usesAsType\nfresh:baseVisitor:\n asString\n visitArray\n visitArray()up\n visitBind\n visitBind()up\n visitBlank\n visitBlank()up\n visitBlock\n visitBlock()up\n visitCall\n visitCall()up\n visitComment\n visitComment()up\n visitDefDec\n visitDefDec()up\n visitDialect\n visitDialect()up\n visitGeneric\n visitGeneric()up\n visitIdentifier\n visitIdentifier()up\n visitIf\n visitIf()up\n visitImport\n visitImport()up\n visitInherits\n visitInherits()up\n visitMatchCase\n visitMatchCase()up\n visitMember\n visitMember()up\n visitMethod\n visitMethod()up\n visitMethodType\n visitMethodType()up\n visitModule\n visitModule()up\n visitNum\n visitNum()up\n visitObject\n visitObject()up\n visitOp\n visitOp()up\n visitReturn\n visitReturn()up\n visitSignaturePart\n visitSignaturePart()up\n visitString\n visitString()up\n visitTryCatch\n visitTryCatch()up\n visitTypeDec\n visitTypeDec()up\n visitTypeLiteral\n visitTypeLiteral()up\n visitTypeParameters\n visitTypeParameters()up\n visitVarDec\n visitVarDec()up\nfresh:pluggableVisitor:\n asString\n visitArray()up\n visitBind()up\n visitBlank()up\n visitBlock()up\n visitCall()up\n visitComment()up\n visitDefDec()up\n visitDialect()up\n visitGeneric()up\n visitIdentifier()up\n visitIf()up\n visitImport()up\n visitInherits()up\n visitMatchCase()up\n visitMember()up\n visitMethod()up\n visitMethodType()up\n visitModule()up\n visitNum()up\n visitObject()up\n visitOp()up\n visitReturn()up\n visitSignaturePart()up\n visitString()up\n visitTryCatch()up\n visitTypeDec()up\n visitTypeLiteral()up\n visitVarDec()up\nmethods-of:ancestorChain.cons()onto:\n asString\n extend\n forebears\n grandparent\n isEmpty\n parent\nmethods-of:ancestorChain.empty:\n asString\n extend\n isEmpty\nmethods-of:arrayNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:bindNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n dest\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:blankNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:blockNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n body\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n enclosingObject\n extraRuntimeData\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isEmpty\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n isntEmpty\n kind\n line\n linePos\n map()ancestors\n matchingPattern\n nameString\n parametersDo\n params\n pretty\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=\n selfclosure\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:callNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n generics\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPattern\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n target\n toGrace\n usesAsType\n value\n with\n \u2260\nmethods-of:callWithPart.request()withArgs:\n !=\n ::\n ==\n accept\n addComment\n addComments\n args\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n lineLength\n linePos\n map()ancestors\n name\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n usesAsType\n \u2260\nmethods-of:commentNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n endLine\n extendCommentUsing\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPartialLine\n isPreceededByBlankLine\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:defDecNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n annotations\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n dtype\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n name\n nameString\n pretty\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n startToken\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:dialectNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n moduleName\n nameString\n path\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:genericNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n args\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:identifierNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n dtype\n enclosingObject\n generics\n hash\n inClass\n inRequest\n inTrait\n inTypePositionWithAncestors\n isAppliedOccurenceOfIdentifier\n isAssigned\n isBind\n isBindingOccurrence\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDeclaredByParent\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n quoted\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n wildcard\n \u2260\nmethods-of:ifNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n elseblock\n enclosingObject\n handledIdentifiers\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n thenblock\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:importNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n annotations\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n dtype\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n moduleName\n name\n nameString\n path\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:inheritsNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addAlias()for\n addComment\n addComments\n addExclusion\n aliases\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n enclosingObject\n exclusions\n hash\n inClass\n inTrait\n inheritsFromCall\n inheritsFromMember\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isUse\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n providedNames\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:matchCaseNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n cases\n comments\n decType\n deepCopy\n description\n elsecase\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n matchee\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:memberNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asIdentifier\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n generics\n hash\n in\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n target\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:methodNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n annotations\n asDebugString\n asString\n basicAsString\n body\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n dtype\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isFresh\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n needsArgChecks\n pretty\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=\n selfclosure\n shallowCopy\n shallowCopyFieldsFrom\n signature\n statementName\n symbolTable\n toGrace\n typeParams\n usesAsType\n usesClassSyntax\n value\n \u2260\nmethods-of:methodTypeNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n parametersDo\n pretty\n register\n returnsObject\n rtype\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n signature\n statementName\n symbolTable\n toGrace\n typeParams\n usesAsType\n value\n \u2260\nmethods-of:moduleNode.body:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n annotations\n asDebugString\n asString\n basicAsString\n body\n canInherit\n canUse\n comments\n decType\n deepCopy\n description\n enclosingObject\n executableComponentsDo\n externalsDo\n hash\n imports\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isModule\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n localNames\n map()ancestors\n methodsDo\n myLocalNames\n name\n nameString\n parentsDo\n pretty\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n sourceLines\n statementName\n superclass\n symbolTable\n toGrace\n usedTraits\n usesAsType\n value\n \u2260\nmethods-of:numNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:objectNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n annotations\n asDebugString\n asString\n basicAsString\n body\n canInherit\n canUse\n comments\n decType\n deepCopy\n description\n enclosingObject\n executableComponentsDo\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n localNames\n map()ancestors\n methodsDo\n myLocalNames\n name\n nameString\n parentsDo\n pretty\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n superclass\n symbolTable\n toGrace\n usedTraits\n usesAsType\n value\n \u2260\nmethods-of:opNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asIdentifier\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n left\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n right\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:returnNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:signaturePart.partName()params:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n lineLength\n linePos\n map()ancestors\n name\n nameString\n params\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n typeParams\n usesAsType\n \u2260\nmethods-of:stringNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:tryCatchNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n cases\n comments\n decType\n deepCopy\n description\n enclosingObject\n finally\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethods-of:typeDecNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n annotations\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n name\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n typeParams\n usesAsType\n value\n \u2260\nmethods-of:typeLiteralNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n anonymous\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n methods\n name\n name:=\n nameString\n nominal\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n types\n usesAsType\n value\n \u2260\nmethods-of:typeParametersNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n do\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n nameString\n params\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n size\n statementName\n symbolTable\n toGrace\n usesAsType\n \u2260\nmethods-of:varDecNode.new:\n !=\n ::\n ==\n accept\n accept()from\n addComment\n addComments\n annotations\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors\n deepCopy\n description\n dtype\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe\n isMember\n isMethod\n isObject\n isPublic\n isReadable\n isSimple\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map()ancestors\n name\n nameString\n pretty\n register\n returnsObject\n scope\n scope:=\n shallowCopy\n shallowCopyFieldsFrom\n statementName\n symbolTable\n toGrace\n usesAsType\n value\n \u2260\nmethodtypes-of:ASTVisitor:\n 1 visitArray(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitBind(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitBlank(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitBlock(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitCall(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitComment(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitDefDec(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitDialect(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitGeneric(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitIdentifier(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitIf(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitImport(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitInherits(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitMatchCase(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitMember(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitMethod(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitMethodType(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitModule(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitNum(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitObject(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitOp(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitReturn(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitSignaturePart(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitString(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitTryCatch(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitTypeDec(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitTypeLiteral(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitTypeParameters(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitVarDec(o : Unknown)up(as : Unknown) -> Boolean\nmethodtypes-of:AliasPair:\n 1 newName -> Done\n 1 oldName -> Done\nmethodtypes-of:AstNode:\n 1 comments -> AstNode\n 1 kind -> String\n 1 line -> Number\n 1 line:=(ln : Number) -> Done\n 1 linePos -> Number\n 1 linePos:=(lp : Number) -> Done\n 1 pretty(n : Number) -> String\n 1 register -> String\n 1 scope -> SymbolTable\nmethodtypes-of:SymbolTable:\nmodules:\n identifierKinds\n util\npath:\n ast\npublic:\n ASTVisitor\n AliasPair\n AstNode\n SymbolTable\n aliasNew()old\n arrayNode\n baseNode\n baseVisitor\n bindNode\n blankNode\n blockNode\n dialectNode\n findAnnotation\n genericNode\n ifNode\n importNode\n lineLength\n matchCaseNode\n methodTypeNode\n nullNode\n numNode\n objectNode\n opNode\n pluggableVisitor\n returnNode\n tryCatchNode\n typeDecNode\n typeLiteralNode\n typeParametersNode\n typeType\n unknownType\n varDecNode\n wrap()to()prefix\ntypes:\n ASTVisitor\n AliasPair\n AstNode\n SymbolTable\n";
                                                                        if (typeof originalSourceLines !== "undefined") {
                                                                          originalSourceLines["ast"] = [
                                                                            "#pragma ExtendedLineups",
                                                                            "import \"util\" as util",
                                                                            "import \"identifierKinds\" as k",
                                                                            "",
                                                                            "// This module contains classes and pseudo-classes for all the AST nodes used",
                                                                            "// in the parser. Because of the limitations of the class syntax, classes that",
                                                                            "// need more than one method are written as object literals containing methods.",
                                                                            "// Each node has a different signature according to its function, but the",
                                                                            "// common interface is given by type ASTNode ",
                                                                            "//",
                                                                            "// Most nodes also contain a \"value\" field, with varied type, holding the `main value`",
                                                                            "// in the node.  This field is confusing and should be appropriately re-named in",
                                                                            "// each case. Some nodes contain other fields for their specific use: while has",
                                                                            "// both a value (the condition) and a body, for example.",
                                                                            "",
                                                                            "def lineLength is public = 80",
                                                                            "",
                                                                            "method listMap(l, b) ancestors(as) is confidential {",
                                                                            "    def newList = [ ]",
                                                                            "    l.do { nd -> newList.addLast(nd.map(b) ancestors(as)) }",
                                                                            "    newList",
                                                                            "}",
                                                                            "method maybeMap(n, b) ancestors(as) is confidential {",
                                                                            "    if (false != n) then {",
                                                                            "        n.map(b) ancestors(as)",
                                                                            "    } else {",
                                                                            "        n",
                                                                            "    }",
                                                                            "}",
                                                                            "method maybeListMap(n, b) ancestors(as) is confidential {",
                                                                            "    if (false != n) then {",
                                                                            "        listMap(n, b) ancestors(as)",
                                                                            "    } else {",
                                                                            "        n",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "def ancestorChain = object {",
                                                                            "    class empty {",
                                                                            "        method isEmpty { true }",
                                                                            "        method asString { \"ancestorChain ▫\" }",
                                                                            "        method extend(n) { cons(n) onto(self) }",
                                                                            "    }",
                                                                            "    method with(n) { empty.extend(n) }",
                                                                            "    class cons(p) onto(as) is confidential {",
                                                                            "        method forebears { as }",
                                                                            "        method isEmpty { false }",
                                                                            "        method parent { p }",
                                                                            "        method grandparent { forebears.parent }",
                                                                            "        ",
                                                                            "        method asString {",
                                                                            "            var a := self",
                                                                            "            var s := \"ancestorChain \"",
                                                                            "            while { a.isEmpty.not } do {",
                                                                            "                s := s ++ a.parent ++ \"➤\"",
                                                                            "                a := a.forebears",
                                                                            "            }",
                                                                            "            s ++ \"▫\"",
                                                                            "        }",
                                                                            "        method extend(n) { cons(n) onto(self) }",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "def emptySeq = emptySequence",
                                                                            "",
                                                                            "type AstNode = type {",
                                                                            "    kind -> String ",
                                                                            "        // Used for pseudo-instanceof tests.",
                                                                            "    register -> String",
                                                                            "        // Used in the code generator on to name the resulting object",
                                                                            "    line -> Number",
                                                                            "        // The source line the node came from",
                                                                            "    line:=(ln:Number)",
                                                                            "    linePos -> Number",
                                                                            "    linePos:=(lp:Number)",
                                                                            "    scope -> SymbolTable",
                                                                            "        // The symbolTable for names defined in this node and its sub-nodes",
                                                                            "    pretty(n:Number) -> String ",
                                                                            "        // Pretty-print-string of node at depth n",
                                                                            "    comments -> AstNode",
                                                                            "        // Comments associated with this node",
                                                                            "}",
                                                                            "",
                                                                            "type SymbolTable = Unknown",
                                                                            "",
                                                                            "class baseNode {",
                                                                            "    // the superclass of all AST nodes",
                                                                            "    var register is public := \"\"",
                                                                            "    var line is public := util.linenum",
                                                                            "    var linePos is public := util.linepos",
                                                                            "    var symbolTable := fakeSymbolTable",
                                                                            "    var comments is public := false",
                                                                            "",
                                                                            "    method kind { abstract }",
                                                                            "    method ==(other) { self.isMe(other) }       // for usesAsType",
                                                                            "    method isAppliedOccurenceOfIdentifier { false }",
                                                                            "    method isMatchingBlock { false }",
                                                                            "    method isFieldDec { false }",
                                                                            "    method isInherits { false }",
                                                                            "    method isLegalInTrait { false }",
                                                                            "    method isMember { false }",
                                                                            "    method isMethod { false }",
                                                                            "    method isExecutable { true }",
                                                                            "    method isCall { false }",
                                                                            "    method isComment { false }",
                                                                            "    method isClass { false }    // is a method that returns a fresh object",
                                                                            "    method inClass { false }    // object in a syntactic class definiton",
                                                                            "    method isTrait { false }    // is a method that returns a trait object",
                                                                            "    method inTrait { false }    // object in a syntactic trait definition",
                                                                            "    method isBind { false }",
                                                                            "    method isBlock { false }",
                                                                            "    method isObject { false }",
                                                                            "    method isIdentifier { false }",
                                                                            "    method isDialect { false }",
                                                                            "    method isImport { false }",
                                                                            "    method isTypeDec { false }",
                                                                            "    method isExternal { false }",
                                                                            "    method canInherit { false }",
                                                                            "    method returnsObject { false }",
                                                                            "    method usesAsType(aNode) { false }",
                                                                            "    method hash { line.hash * linePos.hash }",
                                                                            "    method asString { \"{kind} {nameString}\" }",
                                                                            "    method nameString { \"?\" }",
                                                                            "    method isWritable { true }",
                                                                            "    method isReadable { true }",
                                                                            "    method isPublic { true }",
                                                                            "    method isConfidential { isPublic.not }",
                                                                            "    method decType {",
                                                                            "        if (false == self.dtype) then {",
                                                                            "            return unknownType",
                                                                            "        }",
                                                                            "        return self.dtype",
                                                                            "    }",
                                                                            "    method isSimple { true }  // needs no parens when used as reciever",
                                                                            "    method description { kind }",
                                                                            "    method accept(visitor) {",
                                                                            "        self.accept(visitor) from (ancestorChain.empty)",
                                                                            "    }",
                                                                            "    method scope { symbolTable }",
                                                                            "",
                                                                            "    method scope:=(st) {",
                                                                            "        // override this method in subobjects that open a new scope. In such",
                                                                            "        // subobjects, and only in such subobjects, there should be a 2-way",
                                                                            "        // conection between the node and the symbol table that defines its scope.",
                                                                            "        symbolTable := st",
                                                                            "    }",
                                                                            "",
                                                                            "    method shallowCopyFieldsFrom(other) {",
                                                                            "        register := other.register",
                                                                            "        line := other.line",
                                                                            "        linePos := other.linePos",
                                                                            "        scope := other.scope",
                                                                            "        self",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        if ((scope.node == self) && {util.target == \"symbols\"}) then {",
                                                                            "            \"{line}:{linePos} {description}\\n{spc}Symbols({scope.variety}): {scope}{scope.elementScopesAsString}\"",
                                                                            "        } elseif {scope.variety == \"fake\"} then {",
                                                                            "            \"{line}:{linePos} {description}\"",
                                                                            "        } else {",
                                                                            "            \"{line}:{linePos} {description} {scope.asDebugString}\"",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method deepCopy {",
                                                                            "        self.map { each -> each } ancestors(ancestorChain.empty)",
                                                                            "    }",
                                                                            "    method enclosingObject {",
                                                                            "        def obj = scope.enclosingObjectScope.node",
                                                                            "        obj",
                                                                            "    }",
                                                                            "    method addComment(cmtNode) {",
                                                                            "        if (false == comments) then {",
                                                                            "            comments := cmtNode",
                                                                            "        } else {",
                                                                            "            comments.extendCommentUsing(cmtNode)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method addComments(cmtNodeList) {",
                                                                            "        cmtNodeList.do { each -> addComment(each) }",
                                                                            "    }",
                                                                            "    method statementName { kind }",
                                                                            "}",
                                                                            "",
                                                                            "def nullNode is public = object {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"null\"",
                                                                            "    method toGrace(depth) {",
                                                                            "        \"// null\"",
                                                                            "    }",
                                                                            "    method asString { \"the nullNode\" }",
                                                                            "    method == (other) { self.isMe(other) }",
                                                                            "}",
                                                                            "",
                                                                            "def fakeSymbolTable = object {",
                                                                            "    var node is public := nullNode",
                                                                            "    method asString { \"the fakeSymbolTable\" }",
                                                                            "    method addNode (n) as (kind) {",
                                                                            "        ProgrammingError.raise \"fakeSymbolTable(on node {node}).addNode({n}) as \\\"{kind}\\\" requested\"",
                                                                            "    }",
                                                                            "    method thatDefines (name) ifNone (action) {",
                                                                            "        ProgrammingError.raise \"fakeSymbolTable.thatDefines({name}).\"",
                                                                            "    }",
                                                                            "    method enclosingObjectScope {",
                                                                            "        ProgrammingError.raise \"fakeSymbolTable.enclosingObjectScope on node {node}\"",
                                                                            "    }",
                                                                            "    method variety { \"fake\" }",
                                                                            "    method ==(other) { self.isMe(other) }",
                                                                            "}",
                                                                            "",
                                                                            "def ifNode is public = object {",
                                                                            "  class new(cond, thenblock', elseblock') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"if\"",
                                                                            "    var value is public := cond",
                                                                            "    var thenblock is public := thenblock'",
                                                                            "    var elseblock is public := elseblock'",
                                                                            "    var handledIdentifiers is public := false",
                                                                            "    method isSimple { false }  // needs parens when used as reciever",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitIf(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            value.accept(visitor) from(newChain)",
                                                                            "            thenblock.accept(visitor) from(newChain)",
                                                                            "            elseblock.accept(visitor) from(newChain)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.thenblock := thenblock.map(blk) ancestors(newChain)",
                                                                            "        n.elseblock := elseblock.map(blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.value.pretty(depth+1)",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        if (util.target == \"symbols\") then {",
                                                                            "            s := s ++ spc ++ \"Then: {thenblock.pretty(depth+2)}\\n\"",
                                                                            "            s := s ++ spc ++ \"Else: {elseblock.pretty(depth+2)}\"",
                                                                            "        } else {",
                                                                            "            s := s ++ spc ++ \"Then:\"",
                                                                            "            for (self.thenblock.body) do { ix ->",
                                                                            "                s := s ++ \"\\n  \"++ spc ++ ix.pretty(depth+2)",
                                                                            "            }",
                                                                            "            s := s ++ \"\\n\"",
                                                                            "            s := s ++ spc ++ \"Else:\"",
                                                                            "            for (self.elseblock.body) do { ix ->",
                                                                            "                s := s ++ \"\\n  \"++ spc ++ ix.pretty(depth+2)",
                                                                            "            }",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        repeat (depth) times {",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"if ({self.value.toGrace(0)}) then \\{\"",
                                                                            "        for (self.thenblock.body) do { ix ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ ix.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        if (self.elseblock.isntEmpty) then {",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"\\} else \\{\"",
                                                                            "            for (self.elseblock.body) do { ix ->",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"    \" ++ ix.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "        }",
                                                                            "        s := s ++ \"\\n\" ++ spc ++ \"\\}\"",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        ifNode.new(nullNode, nullNode, nullNode).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "    method shallowCopyFieldsFrom(other) {",
                                                                            "        super.shallowCopyFieldsFrom(other)",
                                                                            "        handledIdentifiers := other.handledIdentifiers",
                                                                            "        self",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def blockNode is public = object {",
                                                                            "  class new(params', body') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"block\"",
                                                                            "    def value is public = \"block\"",
                                                                            "    var params is public := params'",
                                                                            "    var body is public := body'",
                                                                            "    def selfclosure is public = true",
                                                                            "    var matchingPattern is public := false",
                                                                            "    var extraRuntimeData is public := false",
                                                                            "    for (params') do {p->",
                                                                            "        p.accept(patternMarkVisitor) from(ancestorChain.with(self))",
                                                                            "    }",
                                                                            "    method isBlock { true }",
                                                                            "    method isEmpty { body.size == 0 }",
                                                                            "    method isntEmpty { body.size > 0 }",
                                                                            "    method scope:=(st) {",
                                                                            "        // sets up the 2-way conection between this node",
                                                                            "        // and the synmol table that defines the scope that I open.",
                                                                            "        symbolTable := st",
                                                                            "        st.node := self",
                                                                            "    }",
                                                                            "    method declarationKindWithAncestors(as) { k.parameter }",
                                                                            "    method isMatchingBlock { params.size == 1 }",
                                                                            "    method returnsObject {",
                                                                            "        (body.size > 0) && { body.last.returnsObject }",
                                                                            "    }",
                                                                            "    method returnedObjectScope {",
                                                                            "        // precondition: returnsObject",
                                                                            "        body.last.returnedObjectScope",
                                                                            "    }",
                                                                            "    method parametersDo(b) {",
                                                                            "        params.do(b)",
                                                                            "    }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitBlock(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            for (self.params) do { mx ->",
                                                                            "                mx.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            for (self.body) do { mx ->",
                                                                            "                mx.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            if (false != self.matchingPattern) then {",
                                                                            "                self.matchingPattern.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.params := listMap(params, blk) ancestors(newChain)",
                                                                            "        n.body := listMap(body, blk) ancestors(newChain)",
                                                                            "        n.matchingPattern := maybeMap(matchingPattern, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ \"Parameters:\"",
                                                                            "        for (self.params) do { mx ->",
                                                                            "            s := s ++ \"\\n  \"++ spc ++ mx.pretty(depth+2)",
                                                                            "        }",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ \"Body:\"",
                                                                            "        for (self.body) do { mx ->",
                                                                            "            s := s ++ \"\\n  \"++ spc ++ mx.pretty(depth+2)",
                                                                            "        }",
                                                                            "        if (false != self.matchingPattern) then {",
                                                                            "            s := s ++ \"\\n\"",
                                                                            "            s := s ++ spc ++ \"Pattern:\"",
                                                                            "            s := s ++ \"\\n  \"++ spc ++ self.matchingPattern.pretty(depth+2)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"\\{\"",
                                                                            "        if (self.params.size > 0) then {",
                                                                            "            s := s ++ \" \"",
                                                                            "            for (self.params.indices) do { i ->",
                                                                            "                var p := self.params.at(i)",
                                                                            "                if (false != self.matchingPattern) then {",
                                                                            "                    s := s ++ \"(\" ++ p.toGrace(0) ++ \")\"",
                                                                            "                } else {",
                                                                            "                    s := s ++ p.toGrace(0)",
                                                                            "                }",
                                                                            "                if (i < self.params.size) then {",
                                                                            "                    s := s ++ \", \"",
                                                                            "                } else {",
                                                                            "                    s := s ++ \" ->\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        for (self.body) do { mx ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ mx.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        s := s ++ \"\\n\" ++ spc ++ \"\\}\"",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        blockNode.new(params, body).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "    method shallowCopyFieldsFrom(other) {",
                                                                            "        super.shallowCopyFieldsFrom(other)",
                                                                            "        matchingPattern := other.matchingPattern",
                                                                            "        extraRuntimeData := other.extraRuntimeData",
                                                                            "        self",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def tryCatchNode is public = object {",
                                                                            "  class new(block, cases', finally') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"trycatch\"",
                                                                            "    var value is public := block",
                                                                            "    var cases is public := cases'",
                                                                            "    var finally is public := finally'",
                                                                            "    method isSimple { false }  // needs parens when used as reciever",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitTryCatch(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "            for (self.cases) do { mx ->",
                                                                            "                mx.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            if (false != self.finally) then {",
                                                                            "                self.finally.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.cases := listMap(cases, blk) ancestors(newChain)",
                                                                            "        n.finally := maybeMap(finally, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := \"{super.pretty(depth)}\\n\"",
                                                                            "        s := s ++ spc ++ value.pretty(depth + 2)",
                                                                            "        for (self.cases) do { mx ->",
                                                                            "            s := s ++ \"\\n{spc}Case:\\n{spc}  {mx.pretty(depth+2)}\"",
                                                                            "        }",
                                                                            "        if (false != self.finally) then {",
                                                                            "            s := s ++ \"\\n{spc}Finally:\\n{spc}  {self.finally.pretty(depth+2)}\"",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"try \" ++ self.value.toGrace(depth + 1) ++ \" \"",
                                                                            "        for (self.cases) do { case ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"catch \" ++ case.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        if (false != self.finally) then {",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"finally \" ++ self.finally.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        tryCatchNode.new(nullNode, emptySeq, false).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def matchCaseNode is public = object {",
                                                                            "  class new(matchee', cases', elsecase') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"matchcase\"",
                                                                            "    var value is public := matchee'",
                                                                            "    var cases is public := cases'",
                                                                            "    var elsecase is public := elsecase'",
                                                                            "    method isSimple { false }  // needs parens when used as reciever",
                                                                            "    method matchee { value }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitMatchCase(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "            for (self.cases) do { mx ->",
                                                                            "                mx.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            if (false != self.elsecase) then {",
                                                                            "                self.elsecase.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.cases := listMap(cases, blk) ancestors(newChain)",
                                                                            "        n.elsecase := maybeMap(elsecase, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ matchee.pretty(depth + 2)",
                                                                            "        for (self.cases) do { mx ->",
                                                                            "            s := s ++ \"\\n{spc}Case:\\n{spc}  {mx.pretty(depth+2)}\"",
                                                                            "        }",
                                                                            "        if (false != self.elsecase) then {",
                                                                            "            s := s ++ \"\\n{spc}Else:\\n{spc}  {self.elsecase.pretty(depth+2)}\"",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"match(\" ++ self.value.toGrace(0) ++ \")\"",
                                                                            "        for (self.cases) do { case ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"case \" ++ case.toGrace(depth + 2)",
                                                                            "        }",
                                                                            "        if (false != self.elsecase) then {",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"else \" ++ self.elsecase.toGrace(depth + 2)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        matchCaseNode.new(nullNode, emptySeq, false).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def methodTypeNode is public = object {",
                                                                            "  class new(name', signature', rtype') {",
                                                                            "    // Represents the signature of a method in a type literal",
                                                                            "    // signature is an Iterable of callWithPart objects",
                                                                            "",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"methodtype\"",
                                                                            "    var value is public := name'",
                                                                            "    var signature is public := signature'",
                                                                            "    var rtype is public := rtype'",
                                                                            "    var typeParams is public := false",
                                                                            "    def nameString:String is public = value",
                                                                            "",
                                                                            "    method isExecutable { false }",
                                                                            "    method parametersDo(b) {",
                                                                            "        signature.do { part -> ",
                                                                            "            part.params.do { each -> b.apply(each) }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method scope:=(st) {",
                                                                            "        // sets up the 2-way conection between this node",
                                                                            "        // and the symbol table that defines the scope that I open.",
                                                                            "        symbolTable := st",
                                                                            "        st.node := self",
                                                                            "    }",
                                                                            "    method declarationKindWithAncestors(as) { k.typedec }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitMethodType(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            if (false != typeParams) then {",
                                                                            "                typeParams.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            if (false != rtype) then {",
                                                                            "                rtype.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            for (signature) do { part ->",
                                                                            "                part.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.rtype := maybeMap(rtype, blk) ancestors(newChain)",
                                                                            "        n.signature := listMap(signature, blk) ancestors(newChain)",
                                                                            "        n.typeParams := maybeMap(typeParams, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := \"{s}{spc}Name: {value}\\n\"",
                                                                            "        if (false != rtype) then {",
                                                                            "            s := \"{s}{spc}Returns:\\n  {spc}{rtype.pretty(depth + 2)}\"",
                                                                            "        }",
                                                                            "        if (false != typeParams) then {",
                                                                            "            s := \"{s}\\n{spc}TypeParams:\\n\" ",
                                                                            "            s := s ++ typeParams.pretty(depth + 2)",
                                                                            "        }",
                                                                            "        s := \"{s}\\n{spc}Signature:\"",
                                                                            "        for (signature) do { part ->",
                                                                            "            s := \"{s}\\n  {spc}{part.pretty(depth + 2)}\"",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var s := \"\"",
                                                                            "        var firstPart := true",
                                                                            "        for (self.signature) do { part ->",
                                                                            "            s := s ++ part.name",
                                                                            "            if (firstPart) then {",
                                                                            "                firstPart := false",
                                                                            "                if (false != typeParams) then {",
                                                                            "                    typeParams.toGrace(depth + 1)",
                                                                            "                }",
                                                                            "            }",
                                                                            "            if (part.params.size > 0) then {",
                                                                            "                s := s ++ \"(\"",
                                                                            "                for (part.params.indices) do { pnr ->",
                                                                            "                    var p := part.params.at(pnr)",
                                                                            "                    s := s ++ p.toGrace(depth + 1)",
                                                                            "                    if (pnr < part.params.size) then {",
                                                                            "                        s := s ++ \", \"",
                                                                            "                    }",
                                                                            "                }",
                                                                            "                s := s ++ \")\"",
                                                                            "            }",
                                                                            "        }",
                                                                            "        if (false != self.rtype) then {",
                                                                            "            s := s ++ \" -> \" ++ self.rtype.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        methodTypeNode.new(value, emptySeq, false).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def typeLiteralNode is public = object {",
                                                                            "  class new(methods', types') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"typeliteral\"",
                                                                            "    var methods is public := methods'",
                                                                            "    var types is public := types'",
                                                                            "    var nominal is public := false",
                                                                            "    var anonymous is public := true",
                                                                            "    var value is public := \"‹anon›\"",
                                                                            "    ",
                                                                            "    method name { value }",
                                                                            "    method name:=(n) {",
                                                                            "        value := n",
                                                                            "        anonymous := false",
                                                                            "    }",
                                                                            "    method asString {",
                                                                            "        \"typeliteral: methods = {methods}, types = {types}\"",
                                                                            "    }",
                                                                            "    method declarationKindWithAncestors(as) { k.typedec }",
                                                                            "    method isExecutable { false }",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitTypeLiteral(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            for (self.methods) do { each ->",
                                                                            "                each.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            for (self.types) do { each ->",
                                                                            "                each.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.methods := listMap(methods, blk) ancestors (as)",
                                                                            "        n.types := listMap(types, blk) ancestors (as)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := \"{super.pretty(depth)}\\n\"",
                                                                            "        s := s ++ spc ++ \"Types:\"",
                                                                            "        for (types) do { each ->",
                                                                            "            s := s ++ \"\\n  \"++ spc ++ each.pretty(depth+2)",
                                                                            "        }",
                                                                            "        s := s ++ \"\\n\" ++ spc ++ \"Methods:\"",
                                                                            "        for (methods) do { each ->",
                                                                            "            s := s ++ \"\\n  \"++ spc ++ each.pretty(depth+2)",
                                                                            "        }",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"type\"",
                                                                            "        s := s ++ \" = \\{\"",
                                                                            "        for (self.methods) do { each ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ each.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        for (self.types) do { each ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ each.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        s ++ \"\\}\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        typeLiteralNode.new(emptySeq, emptySeq).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "    method shallowCopyFieldsFrom(other) {",
                                                                            "        super.shallowCopyFieldsFrom(other)",
                                                                            "        nominal := other.nominal",
                                                                            "        anonymous := other.anonymous",
                                                                            "        value := other.value",
                                                                            "        self",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "",
                                                                            "def typeDecNode is public = object {",
                                                                            "  class new(name', typeValue) {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"typedec\"",
                                                                            "    var name is public := name'",
                                                                            "    var value is public := typeValue",
                                                                            "    def nameString:String is public = name.value",
                                                                            "    var annotations is public := [ ]",
                                                                            "    var typeParams is public := false",
                                                                            "",
                                                                            "    method isLegalInTrait { true }",
                                                                            "    method isTypeDec { true }",
                                                                            "    method scope:=(st) {",
                                                                            "        // sets up the 2-way conection between this node",
                                                                            "        // and the synmol table that defines the scope that I open.",
                                                                            "        symbolTable := st",
                                                                            "        st.node := self",
                                                                            "    }",
                                                                            "    ",
                                                                            "    method isExecutable { true }",
                                                                            "    method declarationKindWithAncestors(as) { k.typeparam }",
                                                                            "    method isConfidential {",
                                                                            "        if (annotations.size == 0) then { return false }",
                                                                            "        findAnnotation(self, \"confidential\")",
                                                                            "    }",
                                                                            "    method isPublic { isConfidential.not }",
                                                                            "    method isWritable { false }",
                                                                            "    method isReadable { isPublic }",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitTypeDec(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            name.accept(visitor) from(newChain)",
                                                                            "            if (false != typeParams) then {",
                                                                            "                typeParams.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            annotations.do { each -> each.accept(visitor) from(newChain) }",
                                                                            "            value.accept(visitor) from(newChain)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.name := name.map(blk) ancestors(newChain)",
                                                                            "        n.typeParams := maybeMap(typeParams, blk) ancestors(newChain)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.annotations := listMap(annotations, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.name.pretty(depth + 1) ++ \"\\n\"",
                                                                            "        if (false != typeParams) then {",
                                                                            "            s := \"{s}{spc}Type parameters:\\n{typeParams.pretty(depth + 2)}\\n\"",
                                                                            "        }",
                                                                            "        s := s ++ spc ++ \"Value:\"",
                                                                            "        s := s ++ value.pretty(depth+2)",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        if (false != comments) then {",
                                                                            "            s := s ++ comments.pretty(depth+2)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"\"",
                                                                            "        s := \"type {self.name}\"",
                                                                            "        if (false != typeParams) then {",
                                                                            "            typeParams.toGrace(0)",
                                                                            "        }",
                                                                            "        s ++ \" = \" ++ value.toGrace(depth + 2)",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        typeDecNode.new(name, nullNode).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "",
                                                                            "def methodNode = object {",
                                                                            "    method new(name, signature, body, dtype) scope(s) {",
                                                                            "        def result = new(name, signature, body, dtype)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    ",
                                                                            "    class new(name', signature', body', dtype') {",
                                                                            "        // Represents a method declaration",
                                                                            "        // name' is the name of the method (an identifierNode),",
                                                                            "        // signature is a sequence of signatureParts,",
                                                                            "        // body is a sequence of statements and declarations,",
                                                                            "        // dtype is the declared return type of the method, or false.",
                                                                            "",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"method\"",
                                                                            "        var value is public := name'",
                                                                            "        var signature is public := signature'",
                                                                            "        var body is public := body'",
                                                                            "        var dtype is public := dtype'",
                                                                            "        var typeParams is public := false",
                                                                            "        var selfclosure is public := false",
                                                                            "        def nameString:String is public = value.value",
                                                                            "        var annotations is public := [ ]",
                                                                            "        var isFresh is public := false      // a method is 'fresh' if it answers a new object",
                                                                            "        var usesClassSyntax is public := false",
                                                                            "",
                                                                            "        method isMethod { true }",
                                                                            "        method isExecutable { false }",
                                                                            "        method isLegalInTrait { true }",
                                                                            "        method isClass { isFresh || usesClassSyntax }",
                                                                            "        method isTrait {",
                                                                            "            if (isFresh) then {",
                                                                            "                body.last.isTrait",
                                                                            "            } else {",
                                                                            "                false",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method needsArgChecks {",
                                                                            "            signature.do { part -> ",
                                                                            "                part.params.do { p ->",
                                                                            "                    if ((false != p.dtype) && { ",
                                                                            "                            p.dtype.nameString != \"Unknown\" }) then {",
                                                                            "                        return true",
                                                                            "                    }",
                                                                            "                }",
                                                                            "            }",
                                                                            "            return false",
                                                                            "        }",
                                                                            "        method scope:=(st) {",
                                                                            "            // sets up the 2-way conection between this node",
                                                                            "            // and the synmol table that defines the scope that I open.",
                                                                            "            symbolTable := st",
                                                                            "            st.node := self",
                                                                            "        }",
                                                                            "        method declarationKindWithAncestors(as) { k.parameter }",
                                                                            "        method isConfidential {",
                                                                            "            if (annotations.size == 0) then { return false }",
                                                                            "            findAnnotation(self, \"confidential\")",
                                                                            "        }",
                                                                            "        method isPublic { isConfidential.not }",
                                                                            "        method isWritable { false }",
                                                                            "        method isReadable { isPublic }",
                                                                            "        method usesAsType(aNode) {",
                                                                            "            aNode == dtype",
                                                                            "        }",
                                                                            "        method returnsObject {",
                                                                            "            body.isEmpty.not && {body.last.returnsObject}",
                                                                            "        }",
                                                                            "        method returnedObjectScope {",
                                                                            "            // precondition: returnsObject",
                                                                            "            body.last.returnedObjectScope",
                                                                            "        }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitMethod(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                self.value.accept(visitor) from(newChain)",
                                                                            "                if (false != typeParams) then {",
                                                                            "                    typeParams.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                for (self.signature) do { part ->",
                                                                            "                    for (part.params) do { p ->",
                                                                            "                        p.accept(visitor) from(newChain)",
                                                                            "                    }",
                                                                            "                }",
                                                                            "                if (false != dtype) then {",
                                                                            "                    dtype.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                for (self.annotations) do { ann ->",
                                                                            "                    ann.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                for (self.body) do { mx ->",
                                                                            "                    mx.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as){",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.body := listMap(body, blk) ancestors(newChain)",
                                                                            "            n.typeParams := maybeMap(typeParams, blk) ancestors(newChain)",
                                                                            "            n.signature := listMap(signature, blk) ancestors(newChain)",
                                                                            "            n.annotations := listMap(annotations, blk) ancestors(newChain)",
                                                                            "            n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "            s := s ++ spc ++ \"Name: \" ++ self.value.pretty(depth+1)",
                                                                            "            s := s ++ \"\\n\"",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                s := s ++ spc ++ \"Returns:\\n\" ++ spc ++ \"  \"",
                                                                            "                s := s ++ self.dtype.pretty(depth + 2) ++ \"\\n\"",
                                                                            "            }",
                                                                            "            if (isFresh) then { s := s ++ spc ++ \"Fresh\\n\" }",
                                                                            "            s := \"{s}{spc}Signature:\"",
                                                                            "            for (signature) do { part ->",
                                                                            "                s := \"{s}\\n  {spc}Part: {part.name}\"",
                                                                            "                s := \"{s}\\n    {spc}Parameters:\"",
                                                                            "                for (part.params) do { p ->",
                                                                            "                    s := \"{s}\\n      {spc}{p.pretty(depth + 4)}\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s := s ++ \"\\n\"",
                                                                            "            if (false != typeParams) then {",
                                                                            "                s := \"{s}{spc}Generics:\"",
                                                                            "                typeParams.do {g->",
                                                                            "                    s := \"{s}\\n{spc}  {g.pretty(0)}\"",
                                                                            "                }",
                                                                            "                s := s ++ \"\\n\"",
                                                                            "            }",
                                                                            "            if (annotations.size > 0) then {",
                                                                            "                s := \"{s}{spc}Annotations:\"",
                                                                            "                for (annotations) do {an->",
                                                                            "                    s := \"{s}\\n{spc}  {an.pretty(depth + 2)}\"",
                                                                            "                }",
                                                                            "                s := s ++ \"\\n\"",
                                                                            "            }",
                                                                            "            s := s ++ spc ++ \"Body:\"",
                                                                            "            for (self.body) do { mx ->",
                                                                            "                s := s ++ \"\\n  \"++ spc ++ mx.pretty(depth+2)",
                                                                            "            }",
                                                                            "            if (false != comments) then {",
                                                                            "                s := s ++ comments.pretty(depth+2)",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..(depth - 1)) do { i ->",
                                                                            "                spc := spc ++ \"    \"",
                                                                            "            }",
                                                                            "            var s := \"method \"",
                                                                            "            var firstPart := true",
                                                                            "            for (self.signature) do { part ->",
                                                                            "                s := s ++ part.name",
                                                                            "                if (firstPart && {false != typeParams}) then {",
                                                                            "                    s := s ++ typeParams.toGrace(depth + 1)",
                                                                            "                }",
                                                                            "                firstPart := false",
                                                                            "                if (part.params.size > 0) then {",
                                                                            "                    s := s ++ \"(\"",
                                                                            "                    for (part.params.indices) do { pnr ->",
                                                                            "                        var p := part.params.at(pnr)",
                                                                            "                        s := s ++ p.toGrace(depth + 1)",
                                                                            "                        if (pnr < part.params.size) then {",
                                                                            "                            s := s ++ \", \"",
                                                                            "                        }",
                                                                            "                    }",
                                                                            "                    s := s ++ \")\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                s := s ++ \" -> {self.dtype.toGrace(0)}\"",
                                                                            "            }",
                                                                            "            if (self.annotations.size > 0) then {",
                                                                            "                s := s ++ \" is \"",
                                                                            "                s := s ++ self.annotations.fold{ a,b ->",
                                                                            "                    if (a != \"\") then { a ++ \", \" } else { \"\" } ++ b.toGrace(0) }",
                                                                            "                        startingWith \"\"",
                                                                            "            }",
                                                                            "            s := s ++ \" \\{\"",
                                                                            "            if (false != comments) then {",
                                                                            "                s := s ++ comments.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "            for (self.body) do { mx ->",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"    \" ++ mx.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"\\}\"",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            methodNode.new(value, signature, body, dtype).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            isFresh := other.isFresh",
                                                                            "            selfclosure := other.selfclosure",
                                                                            "            self",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "def callNode = object {",
                                                                            "    method new(what, with) scope(s) {",
                                                                            "        def result = new(what, with)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    class new(what, with') {",
                                                                            "        // requested as callNode.new(target:AstNode, parts:List)",
                                                                            "        // Represents a method request with arguments.",
                                                                            "        // The ‹target›.‹methodName› part is in `value`",
                                                                            "        // The argument list is in `with`, as a sequence of `callWithPart`s.",
                                                                            "        // [with]",
                                                                            "        //     object {",
                                                                            "        //         name := \"\"",
                                                                            "        //         args := emptySequence",
                                                                            "        //     }",
                                                                            "        //     object {",
                                                                            "        //         name := \"\"",
                                                                            "        //         args := emptySequence",
                                                                            "        //     }",
                                                                            "        //     ...",
                                                                            "        //     object {",
                                                                            "        //         ...",
                                                                            "        //     }",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"call\"",
                                                                            "        var value is public := what        // method being requested",
                                                                            "        var with is public := with'        // arguments",
                                                                            "        var generics is public := false",
                                                                            "        var isPattern is public := false",
                                                                            "        def nameString:String is public = value.nameString",
                                                                            "        ",
                                                                            "        method target { value }",
                                                                            "        method isCall { true }",
                                                                            "        method returnsObject {",
                                                                            "            if (value.isMember.not) then { return false }",
                                                                            "            if (value.nameString == \"clone\") then { return true }",
                                                                            "            if (value.nameString == \"copy\") then { return true }",
                                                                            "            return false",
                                                                            "        }",
                                                                            "        method returnedObjectScope {",
                                                                            "            // precondition: returnsObject",
                                                                            "            self.scope",
                                                                            "        }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitCall(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                self.value.accept(visitor) from(newChain)",
                                                                            "                for (self.with) do { part ->",
                                                                            "                    for (part.args) do { arg ->",
                                                                            "                        arg.accept(visitor) from(newChain)",
                                                                            "                    }",
                                                                            "                }",
                                                                            "                if (false != generics) then {",
                                                                            "                    generics.do { each ->",
                                                                            "                        each.accept(visitor) from(newChain)",
                                                                            "                    }",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.value := value.map(blk) ancestors(newChain)",
                                                                            "            n.with := listMap(with, blk) ancestors(newChain)",
                                                                            "            n.generics := maybeListMap(generics, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "            s := s ++ spc ++ \"Method Name: {self.value.pretty(depth + 1)}\"",
                                                                            "            s := s ++ \"\\n\"",
                                                                            "            if (false != generics) then {",
                                                                            "                s := s ++ spc ++ \"  Generics:\\n\"",
                                                                            "                for (generics) do {g->",
                                                                            "                    s := s ++ spc ++ \"    \" ++ g.pretty(depth + 2) ++ \"\\n\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s := s ++ spc ++ \"Arguments:\"",
                                                                            "            for (self.with) do { part ->",
                                                                            "                s := s ++ \"\\n  \" ++ spc ++ \"Part: \" ++ part.name",
                                                                            "                for (part.args) do { arg ->",
                                                                            "                    s := s ++ \"\\n      \" ++ spc ++ arg.pretty(depth + 2)",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var spc := \"\"",
                                                                            "            repeat (depth) times {",
                                                                            "                spc := spc ++ \"    \"",
                                                                            "            }",
                                                                            "            var s := \"\"",
                                                                            "            // only the last member is the method call we need to handle",
                                                                            "            if (self.value.kind == \"member\") then {",
                                                                            "                var member := self.value",
                                                                            "                if (member.value.substringFrom(1)to(6) == \"prefix\") then {",
                                                                            "                    s := member.value.substringFrom(7)to(member.value.size)",
                                                                            "                    return s ++ member.in.toGrace(0)",
                                                                            "                }",
                                                                            "                if (member.in.isSimple) then {",
                                                                            "                    s := \"{member.in.toGrace 0}.\"",
                                                                            "                } else {",
                                                                            "                    s := \"({member.in.toGrace 0}).\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            var firstPart := true",
                                                                            "            for (self.with) do { part ->",
                                                                            "                s := s ++ part.name",
                                                                            "                if (firstPart && {false != generics}) then {",
                                                                            "                    s := s ++ \"<\"",
                                                                            "                    for (1..(generics.size - 1)) do {ix ->",
                                                                            "                        s := s ++ generics.at(ix).toGrace(depth + 1)",
                                                                            "                    }",
                                                                            "                    s := s ++ generics.last.toGrace(depth + 1) ++ \">\"",
                                                                            "                }",
                                                                            "                firstPart := false",
                                                                            "                if (part.args.size > 0) then {",
                                                                            "                    s := s ++ \"(\"",
                                                                            "                    for (part.args.indices) do { anr ->",
                                                                            "                        var arg := part.args.at(anr)",
                                                                            "                        s := s ++ arg.toGrace(depth + 1)",
                                                                            "                        if (anr < part.args.size) then {",
                                                                            "                            s := s ++ \", \"",
                                                                            "                        }",
                                                                            "                    }",
                                                                            "                    s := s ++ \")\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method asString { \"call {what.pretty(0)}\" }",
                                                                            "        method shallowCopy {",
                                                                            "            callNode.new(value, with).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            isPattern := other.isPattern",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method statementName { \"request\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "def moduleNode = object {",
                                                                            "    method body(b) named(n) scope(s) {",
                                                                            "        def result = body(b)",
                                                                            "        result.name := n",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    method body(b) named(n) {",
                                                                            "        def result = body(b)",
                                                                            "        result.name := n",
                                                                            "        result",
                                                                            "    }",
                                                                            "    class body(b) {",
                                                                            "        inherits objectNode.new(b, false)",
                                                                            "        def kind is public = \"module\"",
                                                                            "        def sourceLines = util.lines",
                                                                            "        line := 0       // because the module is always implicit",
                                                                            "        linePos := 0",
                                                                            "        var imports is public := [ ]",
                                                                            "",
                                                                            "        method isModule { true }",
                                                                            "        method returnsObject { false }",
                                                                            "        method externalsDo(action) {",
                                                                            "            value.do { o -> ",
                                                                            "                if (o.isExternal) then { action.apply(o) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitModule(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                if (false != self.superclass) then {",
                                                                            "                    self.superclass.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                for (self.value) do { x ->",
                                                                            "                    x.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            moduleNode.body(emptySeq).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            imports := other.imports",
                                                                            "            self",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "def objectNode is public = object {",
                                                                            "    method body(b) named(n) scope(s) {",
                                                                            "        def result = new(b, false)",
                                                                            "        result.name := n",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    method body(b) named(n) {",
                                                                            "        body(b) named(n) scope(fakeSymbolTable)",
                                                                            "    }",
                                                                            "    class new(b, superclass') {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"object\"",
                                                                            "        var value is public := b",
                                                                            "        var superclass is public := superclass'",
                                                                            "        var usedTraits is public := [ ]",
                                                                            "        var name:String is public := \"object\"",
                                                                            "        var inClass is public := false",
                                                                            "        var inTrait is public := false",
                                                                            "        var myLocalNames := false",
                                                                            "        var annotations is public := [ ]",
                                                                            "        ",
                                                                            "        method description -> String { ",
                                                                            "            if (isTrait) then { ",
                                                                            "                \"{kind} (trait)\" ",
                                                                            "            } elseif { inClass } then {",
                                                                            "                \"{kind} (class)\"",
                                                                            "            } else {",
                                                                            "                kind",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method isTrait {",
                                                                            "            // answers true if this object qualifies to be a trait, whether",
                                                                            "            // or not it was declared with the trait syntax",
                                                                            "            if (inTrait) then { return true }",
                                                                            "            if (false != superclass) then { return false }",
                                                                            "            value.do { each -> ",
                                                                            "                if (each.isLegalInTrait.not) then { return false }",
                                                                            "            }",
                                                                            "            return true",
                                                                            "        }",
                                                                            "                ",
                                                                            "        method localNames -> Set<String> { ",
                                                                            "            // answers the names of all of the methods defined directly in",
                                                                            "            // this object.  Inherited names are _not_ included.",
                                                                            "            if (false == myLocalNames) then {",
                                                                            "                myLocalNames := emptySet",
                                                                            "                value.do { node ->",
                                                                            "                    if (node.isFieldDec || node.isMethod) then {",
                                                                            "                        myLocalNames.add(node.nameString)",
                                                                            "                    }",
                                                                            "                }",
                                                                            "            }",
                                                                            "            myLocalNames",
                                                                            "        }",
                                                                            "        ",
                                                                            "        method parentsDo(action) {",
                                                                            "            // iterate over my superclass and my used traits",
                                                                            "",
                                                                            "            if (false != superclass) then { action.apply(superclass) }",
                                                                            "            usedTraits.do { t -> action.apply(t) }",
                                                                            "        }",
                                                                            "        ",
                                                                            "        method methodsDo(action) {",
                                                                            "            // iterate over my method declarations",
                                                                            "            ",
                                                                            "            value.do { o ->",
                                                                            "                if (o.isMethod) then { action.apply(o) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        ",
                                                                            "        method executableComponentsDo(action) {",
                                                                            "            // iterate over my executable code, including",
                                                                            "            // field declarations (since they may have initializers)",
                                                                            "            value.do { o ->",
                                                                            "                if (o.isExecutable) then { action.apply(o) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "",
                                                                            "        method scope:=(st) {",
                                                                            "            // sets up the 2-way conection between this node",
                                                                            "            // and the symbol table that defines the scope that I open.",
                                                                            "            symbolTable := st",
                                                                            "            st.node := self",
                                                                            "        }",
                                                                            "        method body { value }",
                                                                            "        method returnsObject { true }",
                                                                            "        method returnedObjectScope { scope }",
                                                                            "        method canInherit { inTrait.not }   // an object can inherit if not in a trait",
                                                                            "        method canUse { true }",
                                                                            "        method isObject { true }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitObject(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                if (false != superclass) then {",
                                                                            "                    superclass.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                usedTraits.do { t -> t.accept(visitor) from(newChain) }",
                                                                            "                value.do { x -> x.accept(visitor) from(newChain) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method nameString { ",
                                                                            "            if (name == \"object\") then {",
                                                                            "                \"object_on_line_{line}\"",
                                                                            "            } else {",
                                                                            "                name",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.value := listMap(value, blk) ancestors(newChain)",
                                                                            "            n.superclass := maybeMap(superclass, blk) ancestors(newChain)",
                                                                            "            n.usedTraits := listMap(usedTraits, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth') {",
                                                                            "            var depth := depth'",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth)",
                                                                            "            s := \"{s}\\n{spc}Name: {self.name}\"",
                                                                            "            if (false != self.superclass) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"Superclass: \" ++ ",
                                                                            "                        self.superclass.pretty(depth + 1)",
                                                                            "            }",
                                                                            "            if (usedTraits.isEmpty.not) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"Traits:\"",
                                                                            "                usedTraits.do { t -> ",
                                                                            "                    s := \"{s}\\n{spc}  {t.pretty(depth + 1)}\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            value.do { x ->",
                                                                            "                s := s ++ \"\\n\"++ spc ++ x.pretty(depth + 1)",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..(depth - 1)) do { i ->",
                                                                            "                spc := spc ++ \"    \"",
                                                                            "            }",
                                                                            "            var s := \"object \\{\"",
                                                                            "            if (inTrait) then { s := s ++ \"   // trait\" }",
                                                                            "            if (inClass) then { s := s ++ \"   // class\" }",
                                                                            "            if (false != superclass) then { ",
                                                                            "                s := s ++ \"\\n\" ++ superclass.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "            usedTraits.do { t -> s := s ++ \"\\n\" ++ t.toGrace(depth + 1) }",
                                                                            "            value.do { x ->",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"    \" ++ x.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"\\}\"",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            objectNode.new(emptySeq, false).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            name := other.name",
                                                                            "            value := other.value",
                                                                            "            superclass := other.superclass",
                                                                            "            usedTraits := other.usedTraits",
                                                                            "            inClass := other.inClass",
                                                                            "            inTrait := other.inTrait",
                                                                            "            annotations := other.annotations",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method asString {",
                                                                            "            \"object {nameString}\"",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "def arrayNode is public = object {",
                                                                            "  class new(values) {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"array\"",
                                                                            "    var value is public := values",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitArray(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            for (self.value) do { ax ->",
                                                                            "                ax.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := listMap(value, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { ai ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth)",
                                                                            "        for (self.value) do { ax ->",
                                                                            "            s := s ++ \"\\n\"++ spc ++ ax.pretty(depth+1)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var s := \"[\"",
                                                                            "        for (self.value.indices) do { i ->",
                                                                            "            s := s ++ self.value.at(i).toGrace(0)",
                                                                            "            if (i < self.value.size) then {",
                                                                            "                s := s ++ \", \"",
                                                                            "            }",
                                                                            "        }",
                                                                            "        s := s ++ \"]\"",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        arrayNode.new(emptySeq).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def memberNode = object {",
                                                                            "    method new(request, receiver) scope(s) {",
                                                                            "        def result = new(request, receiver)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    class new(request, receiver) {",
                                                                            "        // Represents a dotted request ‹receiver›.‹request›",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"member\"",
                                                                            "        var value is public := request  // NB: value is a String, not an Identifier",
                                                                            "        var in is public := receiver",
                                                                            "        var generics is public := false",
                                                                            "",
                                                                            "        method target { in }",
                                                                            "        method nameString { value }",
                                                                            "        method isMember { true }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitMember(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                if (false != generics) then {",
                                                                            "                    generics.do { each -> each.accept(visitor) from(newChain) }",
                                                                            "                }",
                                                                            "                in.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.in := in.map(blk) ancestors(newChain)",
                                                                            "            n.generics := maybeListMap(generics, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := \"{super.pretty(depth)}‹\" ++ self.value ++ \"›\\n\"",
                                                                            "            s := s ++ spc ++ in.pretty(depth)",
                                                                            "            if (false != generics) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"  Generics:\"",
                                                                            "                for (generics) do {g->",
                                                                            "                    s := s ++ \"\\n\" ++ spc ++ \"    \" ++ g.pretty(0)",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var s := \"\"",
                                                                            "            if (self.value.substringFrom(1)to(6) == \"prefix\") then {",
                                                                            "                s := self.value.substringFrom(7)to(value.size)",
                                                                            "                s := s ++ \" \" ++ self.in.toGrace(0)",
                                                                            "            } else {",
                                                                            "                s := self.in.toGrace(depth) ++ \".\" ++ self.value",
                                                                            "            }",
                                                                            "            if (false != generics) then {",
                                                                            "                s := s ++ \"<\"",
                                                                            "                for (1..(generics.size - 1)) do {ix ->",
                                                                            "                    s := s ++ generics.at(ix).toGrace(depth + 1)",
                                                                            "                }",
                                                                            "                s := s ++ generics.last.toGrace(depth + 1) ++ \">\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method asString { \"{in}.{value}\" }",
                                                                            "        method asIdentifier {",
                                                                            "            // make and return an identifiderNode for my request",
                                                                            "            if (fakeSymbolTable == scope) then {",
                                                                            "                ProgrammingError.raise \"asIdentifier requested on {pretty 0} when scope was fake\"",
                                                                            "            }",
                                                                            "            def resultNode = identifierNode.new (value, false) scope (scope)",
                                                                            "            resultNode.inRequest := true",
                                                                            "            resultNode.line := line",
                                                                            "            resultNode.linePos := linePos",
                                                                            "            return resultNode",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            memberNode.new(value, nullNode).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method statementName { \"expression\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "def genericNode is public = object {",
                                                                            "  class new(base, arguments) {",
                                                                            "    // represents an application of a parameterized type to some arguments.",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"generic\"",
                                                                            "    var value is public := base        ",
                                                                            "        // in a generic application, `value` is the applied type",
                                                                            "        // e.g. in List<Number>, value is Identifier‹List›",
                                                                            "    var args is public := arguments",
                                                                            "    method nameString { value.nameString }",
                                                                            "    method asString { toGrace 0 }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitGeneric(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "            for (self.args) do { p ->",
                                                                            "                p.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.args := listMap(args, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var s := \"{super.pretty(depth)}({value.pretty(depth)})<\"",
                                                                            "        args.do { each -> s := s ++ each.pretty(depth+2) }",
                                                                            "            separatedBy { s := s ++ \", \" }",
                                                                            "        s ++ \">\"",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var s := nameString ++ \"<\"",
                                                                            "        args.do { each -> s := s ++ each.toGrace(0) }",
                                                                            "            separatedBy { s := s ++ \", \" }",
                                                                            "        s ++ \">\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        genericNode.new(value, args).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "",
                                                                            "def typeParametersNode is public = object {",
                                                                            "  class new(params') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"typeparams\"",
                                                                            "    var params is public := params'",
                                                                            "    method asString { toGrace 0 }",
                                                                            "    method declarationKindWithAncestors(as) { k.typeparam }",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitTypeParameters(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            params.do { p ->",
                                                                            "                p.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method do(blk) {",
                                                                            "        params.do(blk)",
                                                                            "    }",
                                                                            "    method size { params.size }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.params := listMap(params, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := spc ++ super.pretty(depth) ++ \"<\"",
                                                                            "        params.do { each -> s := s ++ each.pretty(depth+2) }",
                                                                            "            separatedBy { s := s ++ \", \" }",
                                                                            "        s ++ \">\"",
                                                                            "    }",
                                                                            "    method toGrace(depth:Number) -> String {",
                                                                            "        var s := \"<\"",
                                                                            "        params.do { each -> s := \"{s}{each.toGrace(depth)}\" }",
                                                                            "            separatedBy { s := s ++ \", \" }",
                                                                            "        s ++ \">\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        typeParametersNode.new(emptySeq).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def identifierNode = object {",
                                                                            "",
                                                                            "    method new(name, dtype) scope(s) {",
                                                                            "        def result = new(name, dtype)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "",
                                                                            "    class new(name, dtype') {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"identifier\"",
                                                                            "        var value is public := name",
                                                                            "        var wildcard is public := false",
                                                                            "        var dtype is public := dtype'",
                                                                            "        var isBindingOccurrence is public := false",
                                                                            "        var isAssigned is public := false",
                                                                            "        var inRequest is public := false",
                                                                            "        var generics is public := false",
                                                                            "        var isDeclaredByParent is public := false",
                                                                            "",
                                                                            "        method nameString { value }     //  value changes when parsing \"[]\"",
                                                                            "        method quoted { value.quoted }",
                                                                            "        method isIdentifier { true }",
                                                                            "",
                                                                            "        method isAppliedOccurenceOfIdentifier {",
                                                                            "            if (wildcard) then { ",
                                                                            "                false ",
                                                                            "            } else {",
                                                                            "                isBindingOccurrence.not",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method declarationKindWithAncestors(as) {",
                                                                            "            as.parent.declarationKindWithAncestors(as)",
                                                                            "        }",
                                                                            "        method inTypePositionWithAncestors(as) {",
                                                                            "            // am I used by my parent node as a type?",
                                                                            "            // This is a hack, used as a subsitute for having information in the .gct",
                                                                            "            // telling us which identifiers represent types",
                                                                            "            if (as.isEmpty) then { return false }",
                                                                            "            as.parent.usesAsType(self)",
                                                                            "        }",
                                                                            "        method usesAsType(aNode) {",
                                                                            "            aNode == dtype",
                                                                            "        }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitIdentifier(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                if (false != self.dtype) then {",
                                                                            "                    self.dtype.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth)",
                                                                            "            if ( wildcard ) then {",
                                                                            "                s := s ++ \" Wildcard\"",
                                                                            "            } elseif { isBindingOccurrence } then {",
                                                                            "                s := s ++ \"Binding‹{value}›\"",
                                                                            "            } else {",
                                                                            "                s := s ++ \"‹{value}›\"",
                                                                            "            }",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"  Type: \"",
                                                                            "                s := s ++ self.dtype.pretty(depth + 2)",
                                                                            "            }",
                                                                            "            if (false != generics) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"Generics:\"",
                                                                            "                for (generics) do {g->",
                                                                            "                    s := s ++ \"\\n\" ++ spc ++ \"  \" ++ g.pretty(depth + 2)",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var s",
                                                                            "            if(self.wildcard) then {",
                                                                            "                s := \"_\"",
                                                                            "            } else {",
                                                                            "                s := self.value",
                                                                            "            }",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                s := s ++ \" : \" ++ self.dtype.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "            if (false != generics) then {",
                                                                            "                s := s ++ \"<\"",
                                                                            "                for (1..(generics.size - 1)) do {ix ->",
                                                                            "                    s := s ++ generics.at(ix).toGrace(depth + 1)",
                                                                            "                }",
                                                                            "                s := s ++ generics.last.toGrace(depth + 1) ++ \">\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "",
                                                                            "        method asString { ",
                                                                            "            if (isBindingOccurrence) then {",
                                                                            "                \"identifierBinding‹{value}›\"",
                                                                            "            } else { ",
                                                                            "                \"identifier‹{value}›\"",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            identifierNode.new(value, false).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            wildcard := other.wildcard",
                                                                            "            isBindingOccurrence := other.isBindingOccurrence",
                                                                            "            isDeclaredByParent := other.isDeclaredByParent",
                                                                            "            isAssigned := other.isAssigned",
                                                                            "            inRequest := other.inRequest",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method statementName { \"expression\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "def typeType is public = identifierNode.new(\"Type\", false)",
                                                                            "def unknownType is public = identifierNode.new(\"Unknown\", typeType)",
                                                                            "",
                                                                            "def stringNode = object {",
                                                                            "    method new(v) scope(s) {",
                                                                            "        def result = new(v)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "",
                                                                            "    class new(v) {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"string\"",
                                                                            "        var value is public := v",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            visitor.visitString(self) up(as)",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            \"{super.pretty(depth)}({self.value})\"",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            def q = \"\\\"\"",
                                                                            "            q ++ value.quoted ++ q",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            stringNode.new(value).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method statementName { \"expression\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "def numNode is public = object {",
                                                                            "    class new(val) {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"num\"",
                                                                            "        var value is public := val",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            visitor.visitNum(self) up(as)",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            \"{super.pretty(depth)}({self.value})\"",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            self.value.asString",
                                                                            "        }",
                                                                            "        method asString { \"num {value}\" }",
                                                                            "        method shallowCopy {",
                                                                            "            numNode.new(value).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method statementName { \"expression\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "def opNode is public = object {",
                                                                            "  class new(op, l, r) {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"op\"",
                                                                            "    def value is public = op     // a String",
                                                                            "    var left is public := l",
                                                                            "    var right is public := r",
                                                                            "    method isSimple { false }    // needs parens when used as reciever",
                                                                            "    method nameString { value }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitOp(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.left.accept(visitor) from(newChain)",
                                                                            "            self.right.accept(visitor) from(newChain)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.left := left.map(blk) ancestors(newChain)",
                                                                            "        n.right := right.map(blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := \"{super.pretty(depth)}‹\" ++ self.value ++ \"›\"",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.left.pretty(depth + 1)",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.right.pretty(depth + 1)",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var s := \"\"",
                                                                            "        if ((self.left.kind == \"op\") && (self.left.value != self.value)) then {",
                                                                            "            s := \"(\" ++ self.left.toGrace(0) ++ \")\"",
                                                                            "        } else {",
                                                                            "            s := self.left.toGrace(0)",
                                                                            "        }",
                                                                            "        if (self.value == \"..\") then {",
                                                                            "            s := s ++ self.value",
                                                                            "        } else {",
                                                                            "            s := s ++ \" \" ++ self.value ++ \" \"",
                                                                            "        }",
                                                                            "        if ((self.right.kind == \"op\") && (self.right.value != self.value)) then {",
                                                                            "            s := s ++ \"(\" ++ self.right.toGrace(0) ++ \")\"",
                                                                            "        } else {",
                                                                            "            s := s ++ self.right.toGrace(0)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method asIdentifier {",
                                                                            "        // make an identifiderNode with the same properties as me",
                                                                            "        def resultNode = identifierNode.new (value, false) scope (scope)",
                                                                            "        resultNode.inRequest := true",
                                                                            "        resultNode.line := line",
                                                                            "        resultNode.linePos := linePos",
                                                                            "        return resultNode",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        opNode.new(value, nullNode, nullNode).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def bindNode is public = object {",
                                                                            "  class new(dest', val') {",
                                                                            "    // an assignment, or a request of a setter-method",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"bind\"",
                                                                            "    var dest is public := dest'",
                                                                            "    var value is public := val'",
                                                                            "    ",
                                                                            "    method isBind { true }",
                                                                            "    method asString { \"bind {value}\" }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitBind(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.dest.accept(visitor) from(newChain)",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.dest := dest.map(blk) ancestors(newChain)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.dest.pretty(depth + 1)",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.value.pretty(depth + 1)",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := self.dest.toGrace(depth + 1)",
                                                                            "        s := s ++ \" := \" ++ self.value.toGrace(depth + 1)",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        bindNode.new(dest, value).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "    method statementName { \"assignment or assigment request\" }",
                                                                            "  }",
                                                                            "}",
                                                                            "def defDecNode = object {",
                                                                            "    method new(name', val, dtype') scope(s) {",
                                                                            "        def result = new(name', val, dtype')",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "",
                                                                            "    class new(name', val, dtype') {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"defdec\"",
                                                                            "        var name is public := name'",
                                                                            "        var value is public := val",
                                                                            "        var dtype is public := dtype'",
                                                                            "        def nameString:String is public = name.nameString",
                                                                            "        var annotations is public := [ ]",
                                                                            "        var startToken is public := false",
                                                                            "",
                                                                            "        method isPublic {",
                                                                            "            // defs are confidential by default",
                                                                            "            if (annotations.size == 0) then { return false }",
                                                                            "            if (findAnnotation(self, \"public\")) then { return true }",
                                                                            "            findAnnotation(self, \"readable\")",
                                                                            "        }",
                                                                            "        method isFieldDec { true }",
                                                                            "        method isWritable { false }",
                                                                            "        method isReadable { isPublic }",
                                                                            "",
                                                                            "        method returnsObject {",
                                                                            "            value.returnsObject",
                                                                            "        }",
                                                                            "        method returnedObjectScope {",
                                                                            "            // precondition: returnsObject",
                                                                            "            value.returnedObjectScope",
                                                                            "        }",
                                                                            "        method usesAsType(aNode) {",
                                                                            "            aNode == dtype",
                                                                            "        }",
                                                                            "        method declarationKindWithAncestors(as) { k.defdec }",
                                                                            "",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitDefDec(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                self.name.accept(visitor) from(newChain)",
                                                                            "                if (false != self.dtype) then {",
                                                                            "                    self.dtype.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                for (self.annotations) do { ann ->",
                                                                            "                    ann.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                value.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.name := name.map(blk) ancestors(newChain)",
                                                                            "            n.value := value.map(blk) ancestors(newChain)",
                                                                            "            n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
                                                                            "            n.annotations := listMap(annotations, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "            s := s ++ spc ++ self.name.pretty(depth)",
                                                                            "            if (false != dtype) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"Type: \" ++ self.dtype.pretty(depth + 2)",
                                                                            "            }",
                                                                            "            if (false != value) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"Value: \" ++ value.pretty(depth + 2)",
                                                                            "            }",
                                                                            "            if (annotations.isEmpty.not) then {",
                                                                            "                s := s ++ \"\\n{spc}Annotations:\"",
                                                                            "                annotations.do { ann ->",
                                                                            "                    s := \"{s} {ann.pretty(depth + 2)}\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            if (false != comments) then {",
                                                                            "                s := s ++ comments.pretty(depth+2)",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..(depth - 1)) do { i ->",
                                                                            "                spc := spc ++ \"    \"",
                                                                            "            }",
                                                                            "            var s := \"def {self.name.toGrace(0)}\"",
                                                                            "            if ( (false != self.dtype) && {",
                                                                            "                    self.dtype.value != \"Unknown\" }) then {",
                                                                            "                s := s ++ \" : \" ++ self.dtype.toGrace(0)",
                                                                            "            }",
                                                                            "            if (self.annotations.size > 0) then {",
                                                                            "                s := s ++ \" is \"",
                                                                            "                s := s ++ self.annotations.fold{ a,b ->",
                                                                            "                    if (a != \"\") then { a ++ \", \" } else { \"\" } ++ b.toGrace(0) }",
                                                                            "                        startingWith \"\"",
                                                                            "            }",
                                                                            "            if (false != self.value) then {",
                                                                            "                s := s ++ \" = \" ++ self.value.toGrace(depth)",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            defDecNode.new(name, value, dtype).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            startToken := other.startToken",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method statementName { \"definition\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "def varDecNode is public = object {",
                                                                            "  class new(name', val', dtype') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"vardec\"",
                                                                            "    var name is public := name'",
                                                                            "    var value is public := val'",
                                                                            "    var dtype is public := dtype'",
                                                                            "    def nameString:String is public = name.value",
                                                                            "    var annotations is public := [ ]",
                                                                            "",
                                                                            "    method isPublic {",
                                                                            "        // vars are confidential by default",
                                                                            "        if (annotations.size == 0) then { return false }",
                                                                            "        if (findAnnotation(self, \"public\")) then { return true }",
                                                                            "        findAnnotation(self, \"readable\")",
                                                                            "    }",
                                                                            "    method isWritable {",
                                                                            "        if (annotations.size == 0) then { return false }",
                                                                            "        if (findAnnotation(self, \"public\")) then { return true }",
                                                                            "        if (findAnnotation(self, \"writable\")) then { return true }",
                                                                            "        false",
                                                                            "    }",
                                                                            "    method isReadable {",
                                                                            "        if (annotations.size == 0) then { return false }",
                                                                            "        if (findAnnotation(self, \"public\")) then { return true }",
                                                                            "        if (findAnnotation(self, \"readable\")) then { return true }",
                                                                            "        false",
                                                                            "    }",
                                                                            "    method isFieldDec { true }",
                                                                            "",
                                                                            "    method usesAsType(aNode) {",
                                                                            "        aNode == dtype",
                                                                            "    }",
                                                                            "",
                                                                            "    method declarationKindWithAncestors(as) { k.vardec }",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitVarDec(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.name.accept(visitor) from(newChain)",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                self.dtype.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            for (self.annotations) do { ann ->",
                                                                            "                ann.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            if (false != self.value) then {",
                                                                            "                self.value.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.name := name.map(blk) ancestors(newChain)",
                                                                            "        n.value := maybeMap(value, blk) ancestors(newChain)",
                                                                            "        n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
                                                                            "        n.annotations := listMap(annotations, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for ((0..depth)) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.name.pretty(depth + 1)",
                                                                            "        if (false != self.dtype) then {",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"Type: \"",
                                                                            "            s := s ++ self.dtype.pretty(depth + 2)",
                                                                            "        }",
                                                                            "        if (false != self.value) then {",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"Value: \"",
                                                                            "            s := s ++ self.value.pretty(depth + 2)",
                                                                            "        }",
                                                                            "        if (false != comments) then {",
                                                                            "            s := s ++ comments.pretty(depth+2)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        repeat (depth) times {",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"var {self.name.toGrace(0)}\"",
                                                                            "        if ( (false != self.dtype) && {",
                                                                            "                self.dtype.value != \"Unknown\" }) then {",
                                                                            "            s := s ++ \" : \" ++ self.dtype.toGrace(0)",
                                                                            "        }",
                                                                            "        if (self.annotations.size > 0) then {",
                                                                            "            s := s ++ \" is \"",
                                                                            "            s := s ++ self.annotations.fold{ a,b ->",
                                                                            "                if (a != \"\") then { a ++ \", \" } else { \"\" } ++ b.toGrace(0) }",
                                                                            "                    startingWith \"\"",
                                                                            "        }",
                                                                            "        if (false != self.value) then {",
                                                                            "            s := s ++ \" := \" ++ self.value.toGrace(depth)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        varDecNode.new(name, value, dtype).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "    method statementName { \"variable declaration\" }",
                                                                            "",
                                                                            "  }",
                                                                            "}",
                                                                            "def importNode is public = object {",
                                                                            "  class new(path', name', dtype') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"import\"",
                                                                            "    var value is public := name'",
                                                                            "    var path is public := path'",
                                                                            "    var annotations is public := [ ]",
                                                                            "    var dtype is public := dtype'",
                                                                            "    method isImport { true }",
                                                                            "    method isExternal { true }",
                                                                            "    method isExecutable { false }",
                                                                            "    method name { value }",
                                                                            "    method nameString { value.nameString }",
                                                                            "    method isPublic {",
                                                                            "        // imports, like defs, are confidential by default",
                                                                            "        if (annotations.size == 0) then { return false }",
                                                                            "        if (findAnnotation(self, \"public\")) then { return true }",
                                                                            "        findAnnotation(self, \"readable\")",
                                                                            "    }",
                                                                            "    method moduleName {",
                                                                            "        var bnm := \"\"",
                                                                            "        for (path) do {c->",
                                                                            "            if (c == \"/\") then {",
                                                                            "                bnm := \"\"",
                                                                            "            } else {",
                                                                            "                bnm := bnm ++ c",
                                                                            "            }",
                                                                            "        }",
                                                                            "        bnm",
                                                                            "    }",
                                                                            "    method isWritable { false }",
                                                                            "    method isReadable { isPublic }",
                                                                            "    method declarationKindWithAncestors(as) { k.defdec }",
                                                                            "    method usesAsType(aNode) {",
                                                                            "        aNode == dtype",
                                                                            "    }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitImport(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            for (self.annotations) do { ann ->",
                                                                            "                ann.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                self.dtype.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
                                                                            "        n.annotations := listMap(annotations, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ \"{spc}Path: {path}\\n\"",
                                                                            "        s := s ++ \"{spc}Identifier: {value}\\n\"",
                                                                            "        if (annotations.size > 0) then {",
                                                                            "            s := s ++ \"{spc}Anotations: {annotations}\\n\"",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        \"import \\\"{self.path}\\\" as {nameString}\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        importNode.new(path, nullNode, false).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def dialectNode is public = object {",
                                                                            "  class new(path') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"dialect\"",
                                                                            "    var value is public := path'",
                                                                            "    ",
                                                                            "    method isDialect { true }",
                                                                            "    method isExternal { true }",
                                                                            "    method isExecutable { false }",
                                                                            "    method moduleName {",
                                                                            "        var bnm := \"\"",
                                                                            "        for (value) do {c->",
                                                                            "            if (c == \"/\") then {",
                                                                            "                bnm := \"\"",
                                                                            "            } else {",
                                                                            "                bnm := bnm ++ c",
                                                                            "            }",
                                                                            "        }",
                                                                            "        bnm",
                                                                            "    }",
                                                                            "    method path {",
                                                                            "        value",
                                                                            "    }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        visitor.visitDialect(self) up(as)",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ \"{spc}Path: {self.value}\\n\"",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        \"dialect \\\"{self.value}\\\"\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        dialectNode.new(value).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def returnNode is public = object {",
                                                                            "  class new(expr) {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"return\"",
                                                                            "    var value is public := expr",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitReturn(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.value.pretty(depth + 1)",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        \"return \" ++ self.value.toGrace(depth)",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        returnNode.new(nullNode).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def inheritsNode = object {",
                                                                            "    method new(expr) scope(s) {",
                                                                            "        def result = new(expr)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    class new(expr) {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"inherits\"",
                                                                            "        var value is public := expr",
                                                                            "        var providedNames is public := emptySet",
                                                                            "        var aliases is public := [ ]",
                                                                            "        var exclusions is public := [ ]",
                                                                            "        var isUse is public := false  // this is a `use trait` clause, not an inherits",
                                                                            "        ",
                                                                            "        method isLegalInTrait { isUse }",
                                                                            "        method isInherits { true }",
                                                                            "        method inheritsFromMember { value.isMember }",
                                                                            "        method inheritsFromCall { value.isCall }",
                                                                            "        method isExecutable { false }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitInherits(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                value.accept(visitor) from(newChain)",
                                                                            "                aliases.do { a ->",
                                                                            "                    a.newName.accept(visitor) from(newChain)",
                                                                            "                    a.oldName.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                exclusions.do { e -> e.accept(visitor) from(newChain) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method declarationKindWithAncestors(as) { ",
                                                                            "            // identifiers declared in an inherits statement are aliases for ",
                                                                            "            // methods.  We treat them as methods, because (unlike inherited names)",
                                                                            "            // they can't be overridden by local methods.",
                                                                            "            k.methdec",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.value := value.map(blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth)",
                                                                            "            if (isUse) then { s := \"{s} (use)\" }",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ self.value.pretty(depth + 1)",
                                                                            "            aliases.do { a ->",
                                                                            "                s := \"{s}\\n{a.pretty(depth)}\"",
                                                                            "            }",
                                                                            "            if (exclusions.isEmpty.not) then { s := \"{s}\\n{spc}\" }",
                                                                            "            exclusions.do { e ->",
                                                                            "                s := \"{s} exclude {e} \"",
                                                                            "            }",
                                                                            "            if (providedNames.isEmpty.not) then {",
                                                                            "                s := s ++ \"\\n{spc}Provided names: {providedNames.asList.sort}\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var s := if (isUse) then { \"use \" } else { \"inherit \" }",
                                                                            "            s := s ++ self.value.toGrace(0)",
                                                                            "            aliases.do { a ->",
                                                                            "                s := \"{s} {a} \"",
                                                                            "            }",
                                                                            "            exclusions.do { e ->",
                                                                            "                s := \"{s} exclude {e.nameString} \"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method asString {",
                                                                            "            if (isUse) then { \"use \" } else { \"inherit \" } ++ value.toGrace 0",
                                                                            "        }",
                                                                            "        method nameString { value.toGrace(0) }",
                                                                            "        method addAlias (newName) for (oldName) {",
                                                                            "            aliases.push(aliasNew(newName) old(oldName))",
                                                                            "        }",
                                                                            "        method addExclusion(methName) {",
                                                                            "            exclusions.push(methName)",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            inheritsNode.new(nullNode).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            providedNames := other.providedNames",
                                                                            "            aliases := other.aliases",
                                                                            "            exclusions := other.exclusions",
                                                                            "            isUse := other.isUse",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method statementName { ",
                                                                            "            if (isUse) then { \"use\" } else { \"inherit\" }",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "type AliasPair = {",
                                                                            "    newName",
                                                                            "    oldName",
                                                                            "}",
                                                                            "",
                                                                            "class aliasNew(n) old(o) {",
                                                                            "    method newName {n}",
                                                                            "    method oldName {o}",
                                                                            "    method asString { \"alias {n.nameString} = {o.nameString}\" }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        \"{spc}  alias {n.pretty(depth)} = {o.pretty(depth)}\"",
                                                                            "    }",
                                                                            "    method hash { (n.hash * 1171) + o.hash }",
                                                                            "    method isExecutable { false }",
                                                                            "    method == (other) {",
                                                                            "        match (other)",
                                                                            "            case { that:AliasPair -> (n == that.newName) && (o == that.oldName) }",
                                                                            "            case { _ -> false }",
                                                                            "    }",
                                                                            "}",
                                                                            "def blankNode is public = object {",
                                                                            "    class new {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"blank\"",
                                                                            "        def value is public = \"blank\"",
                                                                            "        method isExecutable { false }",
                                                                            "",
                                                                            "",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            visitor.visitBlank(self) up(as)",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method nameString { \"\" }",
                                                                            "        method asString { \"blank\" }",
                                                                            "        method toGrace(depth : Number) -> String { \"\" }",
                                                                            "        method shallowCopy {",
                                                                            "            blankNode.new.shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "def signaturePart = object {",
                                                                            "    method new {",
                                                                            "        partName \"\" params []",
                                                                            "    }",
                                                                            "    method partName(n) scope(s) {",
                                                                            "        def result = partName(n) params []",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    method partName(n) params(ps) scope(s) {",
                                                                            "        def result = partName(n) params(ps)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    method partName(n) {",
                                                                            "        partName(n) params []",
                                                                            "    }",
                                                                            "    class partName(n) params(ps) {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"signaturepart\"",
                                                                            "        var name is public := n",
                                                                            "        var params is public := ps",
                                                                            "        var typeParams is public := false",
                                                                            "        var lineLength is public := 0",
                                                                            "",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitSignaturePart(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                params.do { p -> p.accept(visitor) from(newChain) }",
                                                                            "                if (false != typeParams) then {",
                                                                            "                    typeParams.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method declarationKindWithAncestors(as) { k.parameter }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var nd := shallowCopy",
                                                                            "            def newChain = as.extend(nd)",
                                                                            "            nd.params := listMap(params, blk) ancestors(newChain)",
                                                                            "            nd.typeParams := maybeMap(typeParams, blk) ancestors(newChain)",
                                                                            "            blk.apply(nd, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := \"{super.pretty(depth)}: {name}\"",
                                                                            "            if (params.isEmpty.not) then { s := \"{s}\\n{spc}Parameters:\" }",
                                                                            "            for (params) do { p ->",
                                                                            "                s := \"{s}\\n  {spc}{p.pretty(depth + 2)}\"",
                                                                            "            }",
                                                                            "            if (false != typeParams) then {",
                                                                            "                s := \"{s}\\n  {spc}TypeParams: {typeParams.pretty(depth + 1)}\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            signaturePart.partName(name) params(params)",
                                                                            "                .shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            typeParams := other.typeParams",
                                                                            "            lineLength := other.lineLength",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method asString {",
                                                                            "            \"part: {name}\"",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "def callWithPart = object {",
                                                                            "    method new {",
                                                                            "        request \"\" withArgs( [] )",
                                                                            "    }",
                                                                            "    method request(name) withArgs(argList) scope (s) {",
                                                                            "        def result = request(name) withArgs(argList)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    class request(rPart:String) withArgs(xs) {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"callwithpart\"",
                                                                            "        var name is public := rPart",
                                                                            "        var args is public := xs",
                                                                            "        var lineLength is public := 0",
                                                                            "",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.args := listMap(args, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            repeat (depth+1) times {",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := \"{super.pretty(depth)}: {name}\"",
                                                                            "            s := \"{s}\\n    {spc}Args:\"",
                                                                            "            for (args) do { a ->",
                                                                            "                s := \"{s}\\n    {spc}{a.pretty(depth + 4)}\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            callWithPart.request(name) withArgs(args).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            lineLength := other.lineLength",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method statementName { \"request\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "def commentNode = object {",
                                                                            "    class new(val') {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"comment\"",
                                                                            "        var value:String is public := val'",
                                                                            "        var isPartialLine:Boolean is public := false",
                                                                            "        var isPreceededByBlankLine is public := false",
                                                                            "        var endLine is public := util.linenum",
                                                                            "        method isComment { true }",
                                                                            "        method isLegalInTrait { true }",
                                                                            "        method isExecutable { false }",
                                                                            "        method asString { \"comment ({line}–{endLine}): {value}\" }",
                                                                            "        method extendCommentUsing(cmtNode) {",
                                                                            "            value := value ++ \" \" ++ cmtNode.value",
                                                                            "            endLine := cmtNode.endLine",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            visitor.visitComment(self) up(as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var s := \"\\n\"",
                                                                            "            repeat (depth-1) times {",
                                                                            "                s := s ++ \"  \"",
                                                                            "            }",
                                                                            "            def pb = if (isPreceededByBlankLine) then { \" > blank\" } else { \"\" }",
                                                                            "            \"{s}Comment{pb}({line}–{endLine}): ‹{value}›\"",
                                                                            "        }",
                                                                            "        method toGrace(depth) {",
                                                                            "            // Partial line comments don't start with a newline, whereas",
                                                                            "            // full-line comments do.  No newline at end in either case.",
                                                                            "            if (isPartialLine) then {",
                                                                            "                \"// (partial) {value}\"",
                                                                            "            } else {",
                                                                            "                var spc := \"\"",
                                                                            "                repeat (depth) times { spc := spc ++ \"    \" }",
                                                                            "                wrap(value) to (lineLength) prefix (spc ++ \"// \")",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            commentNode.new(nullNode).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            value := other.value",
                                                                            "            isPartialLine := other.isPartialLine",
                                                                            "            endLine := other.endLine",
                                                                            "            self",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "method wrap(str:String) to (l:Number) prefix (margin:String) {",
                                                                            "    def ind = margin.size",
                                                                            "    def len = max(ind + 4, l)",
                                                                            "    if ((ind + str.size) <= len) then {",
                                                                            "        return \"\\n\" ++ margin ++ str",
                                                                            "    }",
                                                                            "    var currBreak ",
                                                                            "    var trimmedLine",
                                                                            "",
                                                                            "    try {",
                                                                            "        currBreak := str.lastIndexOf \" \" startingAt (len - ind)",
                                                                            "            ifAbsent {len - ind}",
                                                                            "        trimmedLine := str.substringFrom (1) to (currBreak).trim",
                                                                            "    } catch { ex:NoSuchMethod ->  // C string libraries lack methods",
                                                                            "        currBreak := min(len - ind, str.size)",
                                                                            "        (1..currBreak).do { ix ->",
                                                                            "            if (str.at(ix) == \" \") then { currBreak := ix }",
                                                                            "        }",
                                                                            "        var end := currBreak",
                                                                            "        while {(end >= 1) && {str.at(end) == \" \"}} do {",
                                                                            "            end := end - 1",
                                                                            "        }",
                                                                            "        var start := 1",
                                                                            "        while {(start <= str.size) && {str.at(start) == \" \"}} do {",
                                                                            "            start := start + 1",
                                                                            "        }",
                                                                            "        trimmedLine := str.substringFrom (start) to (end)",
                                                                            "    }",
                                                                            "    \"\\n\" ++ margin ++ trimmedLine ++",
                                                                            "        wrap(str.substringFrom (currBreak+1) to (str.size))",
                                                                            "            to (l) prefix (margin)",
                                                                            "}",
                                                                            "",
                                                                            "",
                                                                            "type ASTVisitor = {",
                                                                            "     visitIf(o) up(as) -> Boolean",
                                                                            "     visitBlock(o) up(as) -> Boolean",
                                                                            "     visitMatchCase(o) up(as) -> Boolean",
                                                                            "     visitTryCatch(o) up(as) -> Boolean",
                                                                            "     visitMethodType(o) up(as) -> Boolean",
                                                                            "     visitSignaturePart(o) up(as) -> Boolean",
                                                                            "     visitTypeLiteral(o) up(as) -> Boolean",
                                                                            "     visitTypeParameters(o) up(as) -> Boolean",
                                                                            "     visitTypeDec(o) up(as) -> Boolean",
                                                                            "     visitMethod(o) up(as) -> Boolean",
                                                                            "     visitCall(o) up(as) -> Boolean",
                                                                            "     visitObject(o) up(as) -> Boolean",
                                                                            "     visitModule(o) up(as) -> Boolean",
                                                                            "     visitArray(o) up(as) -> Boolean",
                                                                            "     visitMember(o) up(as) -> Boolean",
                                                                            "     visitGeneric(o) up(as) -> Boolean",
                                                                            "     visitIdentifier(o) up(as) -> Boolean",
                                                                            "     visitString(o) up(as) -> Boolean",
                                                                            "     visitNum(o) up(as) -> Boolean",
                                                                            "     visitOp(o) up(as) -> Boolean",
                                                                            "     visitBind(o) up(as) -> Boolean",
                                                                            "     visitDefDec(o) up(as) -> Boolean",
                                                                            "     visitVarDec(o) up(as) -> Boolean",
                                                                            "     visitImport(o) up(as) -> Boolean",
                                                                            "     visitReturn(o) up(as) -> Boolean",
                                                                            "     visitInherits(o) up(as) -> Boolean",
                                                                            "     visitDialect(o) up(as) -> Boolean",
                                                                            "     visitBlank(o) up(as) -> Boolean",
                                                                            "     visitComment(o) up(as) -> Boolean",
                                                                            "}",
                                                                            "",
                                                                            "class baseVisitor -> ASTVisitor {",
                                                                            "    method visitIf(o) up(as) { visitIf(o) }",
                                                                            "    method visitBlock(o) up(as) { visitBlock(o) }",
                                                                            "    method visitMatchCase(o) up(as) { visitMatchCase(o) }",
                                                                            "    method visitTryCatch(o) up(as) { visitTryCatch(o) }",
                                                                            "    method visitMethodType(o) up(as) { visitMethodType(o) }",
                                                                            "    method visitSignaturePart(o) up(as) { visitSignaturePart(o) }",
                                                                            "    method visitTypeDec(o) up(as) { visitTypeDec(o) }",
                                                                            "    method visitTypeLiteral(o) up(as) { visitTypeLiteral(o) }",
                                                                            "    method visitTypeParameters(o) up(as) { visitTypeParameters(o) }",
                                                                            "    method visitMethod(o) up(as) { visitMethod(o) }",
                                                                            "    method visitCall(o) up(as) { visitCall(o) }",
                                                                            "    method visitObject(o) up(as) { visitObject(o) }",
                                                                            "    method visitModule(o) up(as) { visitObject(o) }",
                                                                            "    method visitArray(o) up(as) { visitArray(o) }",
                                                                            "    method visitMember(o) up(as) { visitMember(o) }",
                                                                            "    method visitGeneric(o) up(as) { visitGeneric(o) }",
                                                                            "    method visitIdentifier(o) up(as) { visitIdentifier(o) }",
                                                                            "    method visitString(o) up(as) { visitString(o) }",
                                                                            "    method visitNum(o) up(as) { visitNum(o) }",
                                                                            "    method visitOp(o) up(as) { visitOp(o) }",
                                                                            "    method visitBind(o) up(as) { visitBind(o) }",
                                                                            "    method visitDefDec(o) up(as) { visitDefDec(o) }",
                                                                            "    method visitVarDec(o) up(as) { visitVarDec(o) }",
                                                                            "    method visitImport(o) up(as) { visitImport(o) }",
                                                                            "    method visitReturn(o) up(as) { visitReturn(o) }",
                                                                            "    method visitInherits(o) up(as) { visitInherits(o) }",
                                                                            "    method visitDialect(o) up(as) { visitDialect(o) }",
                                                                            "    method visitBlank(o) up(as) { visitBlank(o) }",
                                                                            "    method visitComment(o) up(as) { visitComment(o) }",
                                                                            "",
                                                                            "    method visitIf(o) -> Boolean { true }",
                                                                            "    method visitBlock(o) -> Boolean { true }",
                                                                            "    method visitMatchCase(o) -> Boolean { true }",
                                                                            "    method visitTryCatch(o) -> Boolean { true }",
                                                                            "    method visitMethodType(o) -> Boolean { true }",
                                                                            "    method visitSignaturePart(o) -> Boolean { true }",
                                                                            "    method visitTypeDec(o) -> Boolean { true }",
                                                                            "    method visitTypeLiteral(o) -> Boolean { true }",
                                                                            "    method visitTypeParameters(o) -> Boolean { true }",
                                                                            "    method visitMethod(o) -> Boolean { true }",
                                                                            "    method visitCall(o) -> Boolean { true }",
                                                                            "    method visitObject(o) -> Boolean { true }",
                                                                            "    method visitModule(o) -> Boolean { true }",
                                                                            "    method visitArray(o) -> Boolean { true }",
                                                                            "    method visitMember(o) -> Boolean { true }",
                                                                            "    method visitGeneric(o) -> Boolean { true }",
                                                                            "    method visitIdentifier(o) -> Boolean { true }",
                                                                            "    method visitString(o) -> Boolean { true }",
                                                                            "    method visitNum(o) -> Boolean { true }",
                                                                            "    method visitOp(o) -> Boolean { true }",
                                                                            "    method visitBind(o) -> Boolean { true }",
                                                                            "    method visitDefDec(o) -> Boolean { true }",
                                                                            "    method visitVarDec(o) -> Boolean { true }",
                                                                            "    method visitImport(o) -> Boolean { true }",
                                                                            "    method visitReturn(o) -> Boolean { true }",
                                                                            "    method visitInherits(o) -> Boolean { true }",
                                                                            "    method visitDialect(o) -> Boolean { true }",
                                                                            "    method visitBlank(o) -> Boolean { true }",
                                                                            "    method visitComment(o) -> Boolean { true }",
                                                                            "    ",
                                                                            "    method asString { \"an AST visitor\" }",
                                                                            "}",
                                                                            "",
                                                                            "class pluggableVisitor(visitation:Block2) -> ASTVisitor {",
                                                                            "    // Manufactures a default visitor, given a 2-parameter block.",
                                                                            "    // Typically, some of the methods will be overridden.",
                                                                            "    // The block will be applied with the AST node as the first argument",
                                                                            "    // and the ancestor chain as the second, and should answer true if",
                                                                            "    // the visitation is to continue and false if it is to go no deeper.",
                                                                            "",
                                                                            "    method visitIf(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitBlock(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitMatchCase(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitTryCatch(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitMethodType(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitSignaturePart(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitTypeDec(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitTypeLiteral(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitMethod(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitCall(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitObject(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitModule(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitArray(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitMember(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitGeneric(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitIdentifier(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitString(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitNum(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitOp(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitBind(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitDefDec(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitVarDec(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitImport(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitReturn(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitInherits(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitDialect(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitBlank(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitComment(o) up(as) { visitation.apply (o, as) }",
                                                                            "    ",
                                                                            "    method asString { \"a pluggable AST visitor\" }",
                                                                            "}",
                                                                            "",
                                                                            "",
                                                                            "def patternMarkVisitor = object {",
                                                                            "    inherits baseVisitor",
                                                                            "    method visitCall(c) up(as) {",
                                                                            "        c.isPattern := true",
                                                                            "        true",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "method findAnnotation(node, annName) {",
                                                                            "    for (node.annotations) do {ann->",
                                                                            "        if ((ann.kind == \"identifier\") && {",
                                                                            "            ann.value == annName }) then {",
                                                                            "            return object {",
                                                                            "                inherits true",
                                                                            "                def value is public = ann",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    false",
                                                                            "}" ];
                                                                        }
                                                                        if (typeof global !== "undefined")
                                                                          global.gracecode_ast = gracecode_ast;
                                                                        if (typeof window !== "undefined")
                                                                          window.gracecode_ast = gracecode_ast;
