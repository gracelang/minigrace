"use strict";
var___95__prelude = do_import("StandardPrelude", gracecode_StandardPrelude);
function gracecode_objectdraw() {
  setModuleName("objectdraw");
  this.definitionModule = "objectdraw";
  this.definitionLine = 0;
  var var_prelude = var___95__prelude;
  this.outer = var_prelude;
  var reader_objectdraw_outer0 = function() {
    return this.outer;
  };
  this.methods["outer"] = reader_objectdraw_outer0;
  setLineNumber(4);    // compilenode import
  // Import of dom as dom
  if (typeof gracecode_dom == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module dom'));
  var var_dom = do_import("dom", gracecode_dom);
  var func1 = function(argcv) {    // method dom
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dom"));
    setModuleName("objectdraw");
    // dom is a simple accessor - elide try ... catch
    return var_dom;
  };
  func1.paramCounts = [0];
  this.methods["dom"] = func1;
  func1.definitionLine = 4;
  func1.definitionModule = "objectdraw";
  func1.debug = "import";
  func1.confidential = true;
  setModuleName("objectdraw");
  setLineNumber(5);    // compilenode import
  // Import of math as math
  if (typeof gracecode_math == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module math'));
  var var_math = do_import("math", gracecode_math);
  var func2 = function(argcv) {    // method math
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for math"));
    setModuleName("objectdraw");
    // math is a simple accessor - elide try ... catch
    return var_math;
  };
  func2.paramCounts = [0];
  this.methods["math"] = func2;
  func2.definitionLine = 5;
  func2.definitionModule = "objectdraw";
  func2.debug = "import";
  func2.confidential = true;
  setModuleName("objectdraw");
  setLineNumber(2);    // compilenode identifier
  var call3 = callmethodChecked(var___95__prelude, "methods()object", [0, 1], this);
  this.superobj = call3;
  if (call3.data) this.data = call3.data;
  if (call3.hasOwnProperty('_value'))
      this._value = call3._value;
  setLineNumber(14);    // compilenode method
  var func4 = function(argcv) {    // method randomNumberFrom(1)to(1)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_m = arguments[curarg];
    curarg++;
    if (argcv[0] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for randomNumberFrom (arg list 1) of randomNumberFrom(1)to(1)"));
    var var_n = arguments[curarg];
    curarg++;
    if (argcv[1] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 2) of randomNumberFrom(1)to(1)"));
    // Start argument checking
    curarg = 1;
    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("argument 1 in randomNumberFrom (arg list 1), which corresponds to parameter m, does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    curarg++;
    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("argument 1 in to (arg list 2), which corresponds to parameter n, does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    curarg++;
    // End argument checking
    setModuleName("objectdraw");
    setLineNumber(15);    // compilenode identifier
    var call6 = callmethodChecked(var_math, "random", [0]);
    var diff10 = callmethodChecked(var_n, "-", [1], var_m);
    var prod12 = callmethodChecked(diff10, "*", [1], call6);
    var opresult14 = callmethodChecked(prod12, "+", [1], var_m);
    if (!Grace_isTrue(callmethod(var_Number, "match", [1], opresult14)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("result of method randomNumberFrom(1)to(1) does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    return opresult14;
  };
  func4.paramTypes = [];
  func4.paramTypes.push([type_Number, "m"]);
  func4.paramTypes.push([type_Number, "n"]);
  func4.paramCounts = [1, 1];
  this.methods["randomNumberFrom()to"] = func4;
  func4.definitionLine = 14;
  func4.definitionModule = "objectdraw";
  setLineNumber(19);    // compilenode method
  var func15 = function(argcv) {    // method randomIntFrom(1)to(1)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_m = arguments[curarg];
    curarg++;
    if (argcv[0] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for randomIntFrom (arg list 1) of randomIntFrom(1)to(1)"));
    var var_n = arguments[curarg];
    curarg++;
    if (argcv[1] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 2) of randomIntFrom(1)to(1)"));
    // Start argument checking
    curarg = 1;
    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("argument 1 in randomIntFrom (arg list 1), which corresponds to parameter m, does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    curarg++;
    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("argument 1 in to (arg list 2), which corresponds to parameter n, does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    curarg++;
    // End argument checking
    setModuleName("objectdraw");
    setLineNumber(20);    // compilenode identifier
    var diff20 = callmethodChecked(var_n, "-", [1], var_m);
    var opresult22 = callmethodChecked(diff20, "+", [1], new GraceNum(1));
    var call24 = callmethodChecked(var_math, "random", [0]);
    var diff29 = callmethodChecked(var_n, "-", [1], var_m);
    var opresult31 = callmethodChecked(diff29, "+", [1], new GraceNum(1));
    var prod33 = callmethodChecked(opresult31, "*", [1], call24);
    var call34 = callmethodChecked(prod33, "truncated", [0]);
    var modulus36 = callmethodChecked(call34, "%", [1], opresult22);
    var opresult38 = callmethodChecked(modulus36, "+", [1], var_m);
    if (!Grace_isTrue(callmethod(var_Number, "match", [1], opresult38)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("result of method randomIntFrom(1)to(1) does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    return opresult38;
  };
  func15.paramTypes = [];
  func15.paramTypes.push([type_Number, "m"]);
  func15.paramTypes.push([type_Number, "n"]);
  func15.paramCounts = [1, 1];
  this.methods["randomIntFrom()to"] = func15;
  func15.definitionLine = 19;
  func15.definitionModule = "objectdraw";
  setLineNumber(457);    // compilenode method
  var func39 = function(argcv) {    // method randomColor
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for randomColor"));
    setModuleName("objectdraw");
    var call40 = callmethodChecked(var_color, "random", [0]);
    if (!Grace_isTrue(callmethod(var_Color, "match", [1], call40)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("result of method randomColor does not have " + 
                callmethod(var_Color, "asString", [0])._value + "."));
    return call40;
  };
  func39.paramCounts = [0];
  this.methods["randomColor"] = func39;
  func39.definitionLine = 457;
  func39.definitionModule = "objectdraw";
  setLineNumber(487);    // compilenode method
  var func41 = function(argcv) {    // method eventSource(1)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_source__39__ = arguments[curarg];
    curarg++;
    if (argcv[0] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for eventSource(1)"));
    // Start argument checking
    curarg = 1;
    if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                callmethod(var_Component, "asString", [0])._value + "."));
    curarg++;
    // End argument checking
    setModuleName("objectdraw");
    var obj42 = Grace_allocObject(GraceObject, "objectdraw.eventSource");
    obj42.definitionModule = "objectdraw";
    obj42.definitionLine = 487;
    obj42.outer = this;
    var reader_objectdraw_outer43 = function() {
      return this.outer;
    };
    obj42.methods["outer"] = reader_objectdraw_outer43;
    var obj_init_42 = function() {
      var origSuperDepth = superDepth;
      superDepth = obj42;
      var func44 = function(argcv) {    // method asString
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
        setModuleName("objectdraw");
        setLineNumber(493);    // compilenode string
        var string45 = new GraceString("");
        onSelf = true;
        var call47 = callmethodChecked(this, "source", [0]);
        var string49 = new GraceString("Event on ");
        var opresult51 = callmethodChecked(string49, "++", [1], call47);
        var opresult53 = callmethodChecked(opresult51, "++", [1], string45);
        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult53)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("result of method asString does not have " + 
                    callmethod(var_String, "asString", [0])._value + "."));
        return opresult53;
      };
      func44.paramCounts = [0];
      obj42.methods["asString"] = func44;
      func44.definitionLine = 492;
      func44.definitionModule = "objectdraw";
      setLineNumber(490);    // compilenode identifier
      obj42.data["source"] = var_source__39__;
      var reader_objectdraw_source54 = function() {
        return this.data["source"];
      };
      reader_objectdraw_source54.def = true;
      obj42.methods["source"] = reader_objectdraw_source54;
      if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("value of def 'source' is not of type Component"));
      superDepth = origSuperDepth;
    };
    obj_init_42.apply(obj42, []);
    setLineNumber(487);    // return value
    if (!Grace_isTrue(callmethod(var_Event, "match", [1], obj42)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("result of method eventSource(1) does not have " + 
                callmethod(var_Event, "asString", [0])._value + "."));
    return obj42;
  };
  func41.paramTypes = [];
  func41.paramTypes.push([]);
  func41.paramCounts = [1];
  this.methods["eventSource"] = func41;
  func41.definitionLine = 487;
  func41.definitionModule = "objectdraw";
    var func55 = function(argcv) {    // method eventSource(1     )()object
      var curarg = 1;
      var var_source__39__ = arguments[curarg];
      curarg++;
      var inheritingObject = arguments[curarg++];
      // Start argument processing
      curarg = 1;
      if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                  callmethod(var_Component, "asString", [0])._value + "."));
      curarg++;
      // End argument processing
      setModuleName("objectdraw");
      var returnTarget = invocationCount;
      invocationCount++;
      var obj56 = Grace_allocObject(GraceObject, "eventSource");
      obj56.definitionModule = "objectdraw";
      obj56.definitionLine = 487;
      var inho56 = inheritingObject;
      while (inho56.superobj) inho56 = inho56.superobj;
      inho56.superobj = obj56;
      obj56.data = inheritingObject.data;
      if (inheritingObject.hasOwnProperty('_value'))
        obj56._value = inheritingObject._value;
      obj56.outer = this;
      var reader_objectdraw_outer57 = function() {
        return this.outer;
      };
      obj56.methods["outer"] = reader_objectdraw_outer57;
      var obj_init_56 = function() {
        var origSuperDepth = superDepth;
        superDepth = obj56;
        var func58 = function(argcv) {    // method asString
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
          setModuleName("objectdraw");
          setLineNumber(493);    // compilenode string
          var string59 = new GraceString("");
          onSelf = true;
          var call61 = callmethodChecked(this, "source", [0]);
          var string63 = new GraceString("Event on ");
          var opresult65 = callmethodChecked(string63, "++", [1], call61);
          var opresult67 = callmethodChecked(opresult65, "++", [1], string59);
          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult67)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("result of method asString does not have " + 
                      callmethod(var_String, "asString", [0])._value + "."));
          return opresult67;
        };
        func58.paramCounts = [0];
        obj56.methods["asString"] = func58;
        func58.definitionLine = 492;
        func58.definitionModule = "objectdraw";
        setLineNumber(490);    // compilenode identifier
        obj56.data["source"] = var_source__39__;
        var reader_objectdraw_source68 = function() {
          return this.data["source"];
        };
        reader_objectdraw_source68.def = true;
        obj56.methods["source"] = reader_objectdraw_source68;
        if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("value of def 'source' is not of type Component"));
        superDepth = origSuperDepth;
      };
      obj_init_56.apply(inheritingObject, []);
      return obj56;
      };
      func55.paramTypes = [];
      func55.paramTypes.push([]);
      this.methods["eventSource()object"] = func55;
    setLineNumber(497);    // compilenode method
    var func69 = function(argcv) {    // method mouseEventSource(1)event(1)
      var returnTarget = invocationCount;
      invocationCount++;
      var curarg = 1;
      var var_source__39__ = arguments[curarg];
      curarg++;
      if (argcv[0] !== 1)
        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for mouseEventSource (arg list 1) of mouseEventSource(1)event(1)"));
      var var_event__39__ = arguments[curarg];
      curarg++;
      if (argcv[1] !== 1)
        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of mouseEventSource(1)event(1)"));
      // Start argument checking
      curarg = 1;
      if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("argument 1 in mouseEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                  callmethod(var_Component, "asString", [0])._value + "."));
      curarg++;
      if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                  callmethod(var_Foreign, "asString", [0])._value + "."));
      curarg++;
      // End argument checking
      setModuleName("objectdraw");
      var obj70 = Grace_allocObject(null, "objectdraw.mouseEventSource()event");
      obj70.definitionModule = "objectdraw";
      obj70.definitionLine = 497;
      obj70.outer = this;
      var reader_objectdraw_outer71 = function() {
        return this.outer;
      };
      obj70.methods["outer"] = reader_objectdraw_outer71;
      var obj_init_70 = function() {
        var origSuperDepth = superDepth;
        superDepth = obj70;
        var func72 = function(argcv) {    // method asString
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
          setModuleName("objectdraw");
          setLineNumber(506);    // compilenode string
          var string73 = new GraceString("");
          onSelf = true;
          var call75 = callmethodChecked(this, "at", [0]);
          var string77 = new GraceString(" at ");
          onSelf = true;
          var call79 = callmethodChecked(this, "source", [0]);
          var string81 = new GraceString("Mouse event on ");
          var opresult83 = callmethodChecked(string81, "++", [1], call79);
          var opresult85 = callmethodChecked(opresult83, "++", [1], string77);
          var opresult87 = callmethodChecked(opresult85, "++", [1], call75);
          var opresult89 = callmethodChecked(opresult87, "++", [1], string73);
          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult89)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("result of method asString does not have " + 
                      callmethod(var_String, "asString", [0])._value + "."));
          return opresult89;
        };
        func72.paramCounts = [0];
        obj70.methods["asString"] = func72;
        func72.definitionLine = 505;
        func72.definitionModule = "objectdraw";
        setLineNumber(500);    // compilenode call
        var call90 = callmethodChecked(superDepth, "outer", [0]);
        onOuter = true;
        onSelf = true;
        var call91 = callmethodChecked(call90, "eventSource()object", [1, 1], var_source__39__, this);
        obj70.superobj = call91;
        if (call91.data) obj70.data = call91.data;
        if (call91.hasOwnProperty('_value'))
            obj70._value = call91._value;
        setLineNumber(502);    // compilenode call
        onSelf = true;
        var call92 = callmethodChecked(this, "source", [0]);
        var call93 = callmethodChecked(call92, "element", [0]);
        var call94 = callmethodChecked(call93, "offsetTop", [0]);
        var call96 = callmethodChecked(var_event__39__, "pageY", [0]);
        var diff98 = callmethodChecked(call96, "-", [1], call94);
        setLineNumber(501);    // compilenode call
        onSelf = true;
        var call100 = callmethodChecked(this, "source", [0]);
        var call101 = callmethodChecked(call100, "element", [0]);
        var call102 = callmethodChecked(call101, "offsetLeft", [0]);
        var call104 = callmethodChecked(var_event__39__, "pageX", [0]);
        var diff106 = callmethodChecked(call104, "-", [1], call102);
        var opresult108 = callmethodChecked(diff106, "@", [1], diff98);
        obj70.data["at"] = opresult108;
        var reader_objectdraw_at109 = function() {
          return this.data["at"];
        };
        reader_objectdraw_at109.def = true;
        obj70.methods["at"] = reader_objectdraw_at109;
        var call110 = callmethodChecked(superDepth, "outer", [0]);
        onOuter = true;
        onSelf = true;
        var call111 = callmethodChecked(call110, "Point", [0]);
        if (!Grace_isTrue(callmethod(call111, "match", [1], opresult108)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("value of def 'at' is not of type self.outer.Point"));
        superDepth = origSuperDepth;
      };
      obj_init_70.apply(obj70, []);
      setLineNumber(497);    // return value
      if (!Grace_isTrue(callmethod(var_MouseEvent, "match", [1], obj70)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("result of method mouseEventSource(1)event(1) does not have " + 
                  callmethod(var_MouseEvent, "asString", [0])._value + "."));
      return obj70;
    };
    func69.paramTypes = [];
    func69.paramTypes.push([]);
    func69.paramTypes.push([]);
    func69.paramCounts = [1, 1];
    this.methods["mouseEventSource()event"] = func69;
    func69.definitionLine = 497;
    func69.definitionModule = "objectdraw";
      var func112 = function(argcv) {    // method mouseEventSource(1     )event(1     )()object
        var curarg = 1;
        var var_source__39__ = arguments[curarg];
        curarg++;
        var var_event__39__ = arguments[curarg];
        curarg++;
        var inheritingObject = arguments[curarg++];
        // Start argument processing
        curarg = 1;
        if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in mouseEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                    callmethod(var_Component, "asString", [0])._value + "."));
        curarg++;
        if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                    callmethod(var_Foreign, "asString", [0])._value + "."));
        curarg++;
        // End argument processing
        setModuleName("objectdraw");
        var returnTarget = invocationCount;
        invocationCount++;
        var obj113 = Grace_allocObject(null, "mouseEventSource()event");
        obj113.definitionModule = "objectdraw";
        obj113.definitionLine = 497;
        var inho113 = inheritingObject;
        while (inho113.superobj) inho113 = inho113.superobj;
        inho113.superobj = obj113;
        obj113.data = inheritingObject.data;
        if (inheritingObject.hasOwnProperty('_value'))
          obj113._value = inheritingObject._value;
        obj113.outer = this;
        var reader_objectdraw_outer114 = function() {
          return this.outer;
        };
        obj113.methods["outer"] = reader_objectdraw_outer114;
        var obj_init_113 = function() {
          var origSuperDepth = superDepth;
          superDepth = obj113;
          var func115 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
            setModuleName("objectdraw");
            setLineNumber(506);    // compilenode string
            var string116 = new GraceString("");
            onSelf = true;
            var call118 = callmethodChecked(this, "at", [0]);
            var string120 = new GraceString(" at ");
            onSelf = true;
            var call122 = callmethodChecked(this, "source", [0]);
            var string124 = new GraceString("Mouse event on ");
            var opresult126 = callmethodChecked(string124, "++", [1], call122);
            var opresult128 = callmethodChecked(opresult126, "++", [1], string120);
            var opresult130 = callmethodChecked(opresult128, "++", [1], call118);
            var opresult132 = callmethodChecked(opresult130, "++", [1], string116);
            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult132)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("result of method asString does not have " + 
                        callmethod(var_String, "asString", [0])._value + "."));
            return opresult132;
          };
          func115.paramCounts = [0];
          obj113.methods["asString"] = func115;
          func115.definitionLine = 505;
          func115.definitionModule = "objectdraw";
          setLineNumber(500);    // compilenode call
          var call133 = callmethodChecked(superDepth, "outer", [0]);
          onOuter = true;
          onSelf = true;
          var call134 = callmethodChecked(call133, "eventSource()object", [1, 1], var_source__39__, this);
          obj113.superobj = call134;
          if (call134.data) obj113.data = call134.data;
          if (call134.hasOwnProperty('_value'))
              obj113._value = call134._value;
          setLineNumber(502);    // compilenode call
          onSelf = true;
          var call135 = callmethodChecked(this, "source", [0]);
          var call136 = callmethodChecked(call135, "element", [0]);
          var call137 = callmethodChecked(call136, "offsetTop", [0]);
          var call139 = callmethodChecked(var_event__39__, "pageY", [0]);
          var diff141 = callmethodChecked(call139, "-", [1], call137);
          setLineNumber(501);    // compilenode call
          onSelf = true;
          var call143 = callmethodChecked(this, "source", [0]);
          var call144 = callmethodChecked(call143, "element", [0]);
          var call145 = callmethodChecked(call144, "offsetLeft", [0]);
          var call147 = callmethodChecked(var_event__39__, "pageX", [0]);
          var diff149 = callmethodChecked(call147, "-", [1], call145);
          var opresult151 = callmethodChecked(diff149, "@", [1], diff141);
          obj113.data["at"] = opresult151;
          var reader_objectdraw_at152 = function() {
            return this.data["at"];
          };
          reader_objectdraw_at152.def = true;
          obj113.methods["at"] = reader_objectdraw_at152;
          var call153 = callmethodChecked(superDepth, "outer", [0]);
          onOuter = true;
          onSelf = true;
          var call154 = callmethodChecked(call153, "Point", [0]);
          if (!Grace_isTrue(callmethod(call154, "match", [1], opresult151)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("value of def 'at' is not of type self.outer.Point"));
          superDepth = origSuperDepth;
        };
        obj_init_113.apply(inheritingObject, []);
        return obj113;
        };
        func112.paramTypes = [];
        func112.paramTypes.push([]);
        func112.paramTypes.push([]);
        this.methods["mouseEventSource()event()object"] = func112;
      setLineNumber(510);    // compilenode method
      var func155 = function(argcv) {    // method keyEventSource(1)event(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_source__39__ = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for keyEventSource (arg list 1) of keyEventSource(1)event(1)"));
        var var_event__39__ = arguments[curarg];
        curarg++;
        if (argcv[1] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of keyEventSource(1)event(1)"));
        // Start argument checking
        curarg = 1;
        if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                    callmethod(var_Component, "asString", [0])._value + "."));
        curarg++;
        if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                    callmethod(var_Foreign, "asString", [0])._value + "."));
        curarg++;
        // End argument checking
        setModuleName("objectdraw");
        var obj156 = Grace_allocObject(null, "objectdraw.keyEventSource()event");
        obj156.definitionModule = "objectdraw";
        obj156.definitionLine = 510;
        obj156.outer = this;
        var reader_objectdraw_outer157 = function() {
          return this.outer;
        };
        obj156.methods["outer"] = reader_objectdraw_outer157;
        var obj_init_156 = function() {
          var origSuperDepth = superDepth;
          superDepth = obj156;
          var func158 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
            setModuleName("objectdraw");
            setLineNumber(518);    // compilenode string
            var string159 = new GraceString("");
            onSelf = true;
            var call161 = callmethodChecked(this, "code", [0]);
            var string163 = new GraceString(" for key-code ");
            onSelf = true;
            var call165 = callmethodChecked(this, "source", [0]);
            var string167 = new GraceString("Event on ");
            var opresult169 = callmethodChecked(string167, "++", [1], call165);
            var opresult171 = callmethodChecked(opresult169, "++", [1], string163);
            var opresult173 = callmethodChecked(opresult171, "++", [1], call161);
            var opresult175 = callmethodChecked(opresult173, "++", [1], string159);
            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult175)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("result of method asString does not have " + 
                        callmethod(var_String, "asString", [0])._value + "."));
            return opresult175;
          };
          func158.paramCounts = [0];
          obj156.methods["asString"] = func158;
          func158.definitionLine = 517;
          func158.definitionModule = "objectdraw";
          setLineNumber(512);    // compilenode call
          var call176 = callmethodChecked(superDepth, "outer", [0]);
          onOuter = true;
          onSelf = true;
          var call177 = callmethodChecked(call176, "eventSource()object", [1, 1], var_source__39__, this);
          obj156.superobj = call177;
          if (call177.data) obj156.data = call177.data;
          if (call177.hasOwnProperty('_value'))
              obj156._value = call177._value;
          setLineNumber(513);    // compilenode identifier
          var call178 = callmethodChecked(var_event__39__, "which", [0]);
          obj156.data["code"] = call178;
          var reader_objectdraw_code179 = function() {
            return this.data["code"];
          };
          reader_objectdraw_code179.def = true;
          obj156.methods["code"] = reader_objectdraw_code179;
          if (!Grace_isTrue(callmethod(var_Number, "match", [1], call178)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("value of def 'code' is not of type Number"));
          superDepth = origSuperDepth;
        };
        obj_init_156.apply(obj156, []);
        setLineNumber(510);    // return value
        if (!Grace_isTrue(callmethod(var_KeyEvent, "match", [1], obj156)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("result of method keyEventSource(1)event(1) does not have " + 
                    callmethod(var_KeyEvent, "asString", [0])._value + "."));
        return obj156;
      };
      func155.paramTypes = [];
      func155.paramTypes.push([]);
      func155.paramTypes.push([]);
      func155.paramCounts = [1, 1];
      this.methods["keyEventSource()event"] = func155;
      func155.definitionLine = 510;
      func155.definitionModule = "objectdraw";
        var func180 = function(argcv) {    // method keyEventSource(1     )event(1     )()object
          var curarg = 1;
          var var_source__39__ = arguments[curarg];
          curarg++;
          var var_event__39__ = arguments[curarg];
          curarg++;
          var inheritingObject = arguments[curarg++];
          // Start argument processing
          curarg = 1;
          if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                      callmethod(var_Component, "asString", [0])._value + "."));
          curarg++;
          if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                      callmethod(var_Foreign, "asString", [0])._value + "."));
          curarg++;
          // End argument processing
          setModuleName("objectdraw");
          var returnTarget = invocationCount;
          invocationCount++;
          var obj181 = Grace_allocObject(null, "keyEventSource()event");
          obj181.definitionModule = "objectdraw";
          obj181.definitionLine = 510;
          var inho181 = inheritingObject;
          while (inho181.superobj) inho181 = inho181.superobj;
          inho181.superobj = obj181;
          obj181.data = inheritingObject.data;
          if (inheritingObject.hasOwnProperty('_value'))
            obj181._value = inheritingObject._value;
          obj181.outer = this;
          var reader_objectdraw_outer182 = function() {
            return this.outer;
          };
          obj181.methods["outer"] = reader_objectdraw_outer182;
          var obj_init_181 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj181;
            var func183 = function(argcv) {    // method asString
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
              setModuleName("objectdraw");
              setLineNumber(518);    // compilenode string
              var string184 = new GraceString("");
              onSelf = true;
              var call186 = callmethodChecked(this, "code", [0]);
              var string188 = new GraceString(" for key-code ");
              onSelf = true;
              var call190 = callmethodChecked(this, "source", [0]);
              var string192 = new GraceString("Event on ");
              var opresult194 = callmethodChecked(string192, "++", [1], call190);
              var opresult196 = callmethodChecked(opresult194, "++", [1], string188);
              var opresult198 = callmethodChecked(opresult196, "++", [1], call186);
              var opresult200 = callmethodChecked(opresult198, "++", [1], string184);
              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult200)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method asString does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              return opresult200;
            };
            func183.paramCounts = [0];
            obj181.methods["asString"] = func183;
            func183.definitionLine = 517;
            func183.definitionModule = "objectdraw";
            setLineNumber(512);    // compilenode call
            var call201 = callmethodChecked(superDepth, "outer", [0]);
            onOuter = true;
            onSelf = true;
            var call202 = callmethodChecked(call201, "eventSource()object", [1, 1], var_source__39__, this);
            obj181.superobj = call202;
            if (call202.data) obj181.data = call202.data;
            if (call202.hasOwnProperty('_value'))
                obj181._value = call202._value;
            setLineNumber(513);    // compilenode identifier
            var call203 = callmethodChecked(var_event__39__, "which", [0]);
            obj181.data["code"] = call203;
            var reader_objectdraw_code204 = function() {
              return this.data["code"];
            };
            reader_objectdraw_code204.def = true;
            obj181.methods["code"] = reader_objectdraw_code204;
            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call203)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("value of def 'code' is not of type Number"));
            superDepth = origSuperDepth;
          };
          obj_init_181.apply(inheritingObject, []);
          return obj181;
          };
          func180.paramTypes = [];
          func180.paramTypes.push([]);
          func180.paramTypes.push([]);
          this.methods["keyEventSource()event()object"] = func180;
        setLineNumber(542);    // compilenode method
        var func205 = function(argcv) {    // method componentFromElement(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_element__39__ = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for componentFromElement(1)"));
          setModuleName("objectdraw");
          var obj206 = Grace_allocObject(GraceObject, "objectdraw.componentFromElement");
          obj206.definitionModule = "objectdraw";
          obj206.definitionLine = 542;
          obj206.outer = this;
          var reader_objectdraw_outer207 = function() {
            return this.outer;
          };
          obj206.methods["outer"] = reader_objectdraw_outer207;
          var obj_init_206 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj206;
            var func208 = function(argcv) {    // method width
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
              setModuleName("objectdraw");
              setLineNumber(547);    // compilenode call
              onSelf = true;
              var call209 = callmethodChecked(this, "element", [0]);
              var call210 = callmethodChecked(call209, "width", [0]);
              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call210)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method width does not have " + 
                          callmethod(var_Number, "asString", [0])._value + "."));
              return call210;
            };
            func208.paramCounts = [0];
            obj206.methods["width"] = func208;
            func208.definitionLine = 546;
            func208.definitionModule = "objectdraw";
            var func211 = function(argcv) {    // method height
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
              setModuleName("objectdraw");
              setLineNumber(552);    // compilenode call
              onSelf = true;
              var call212 = callmethodChecked(this, "element", [0]);
              var call213 = callmethodChecked(call212, "height", [0]);
              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call213)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method height does not have " + 
                          callmethod(var_Number, "asString", [0])._value + "."));
              return call213;
            };
            func211.paramCounts = [0];
            obj206.methods["height"] = func211;
            func211.definitionLine = 551;
            func211.definitionModule = "objectdraw";
            var func214 = function(argcv) {    // method size
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
              setModuleName("objectdraw");
              setLineNumber(557);    // compilenode call
              onSelf = true;
              var call215 = callmethodChecked(this, "element", [0]);
              var call216 = callmethodChecked(call215, "height", [0]);
              onSelf = true;
              var call218 = callmethodChecked(this, "element", [0]);
              var call219 = callmethodChecked(call218, "width", [0]);
              var opresult221 = callmethodChecked(call219, "@", [1], call216);
              setLineNumber(556);    // compilenode call
              var call222 = callmethodChecked(superDepth, "outer", [0]);
              onOuter = true;
              onSelf = true;
              var call223 = callmethodChecked(call222, "Point", [0]);
              setLineNumber(557);    // return value
              if (!Grace_isTrue(callmethod(call223, "match", [1], opresult221)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method size does not have " + 
                          callmethod(call223, "asString", [0])._value + "."));
              return opresult221;
            };
            func214.paramCounts = [0];
            obj206.methods["size"] = func214;
            func214.definitionLine = 556;
            func214.definitionModule = "objectdraw";
            var func224 = function(argcv) {    // method on(1)do(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_event__39__ = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)do(1)"));
              var var_f = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of on(1)do(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(561);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in on (arg list 1), which corresponds to parameter event', does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              setLineNumber(562);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in do (arg list 2), which corresponds to parameter f, does not have " + 
                          callmethod(var_Procedure, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("objectdraw");
              setLineNumber(563);    // compilenode call
              onSelf = true;
              var call225 = callmethodChecked(this, "element", [0]);
              var call226 = callmethodChecked(call225, "addEventListener", [2], var_event__39__, var_f);
              setLineNumber(564);    // return value
              if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method on(1)do(1) does not have " + 
                          callmethod(var_Done, "asString", [0])._value + "."));
              return var_done;
            };
            func224.paramTypes = [];
            func224.paramTypes.push([type_String, "event'"]);
            func224.paramTypes.push([]);
            func224.confidential = true;
            func224.paramCounts = [1, 1];
            obj206.methods["on()do"] = func224;
            func224.definitionLine = 561;
            func224.definitionModule = "objectdraw";
            var func227 = function(argcv) {    // method on(1)withPointDo(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_kind = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)withPointDo(1)"));
              var var_f = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withPointDo (arg list 2) of on(1)withPointDo(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(568);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              setLineNumber(569);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in withPointDo (arg list 2), which corresponds to parameter f, does not have " + 
                          callmethod(var_MouseResponse, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("objectdraw");
              setLineNumber(570);    // compilenode block
              var block228 = new GraceBlock(this, 570, 1);
              setLineNumber(1);    // compilenode identifier
              block228.real = function(var_event__39__) {
                setLineNumber(571);    // compilenode identifier
                onSelf = true;
                var call229 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                var call230 = callmethodChecked(var_f, "apply", [1], call229);
                return call230;
              };
              onSelf = true;
              var call231 = callmethodChecked(this, "on()do", [1, 1], var_kind, block228);
              setLineNumber(570);    // return value
              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call231)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method on(1)withPointDo(1) does not have " + 
                          callmethod(var_Done, "asString", [0])._value + "."));
              return call231;
            };
            func227.paramTypes = [];
            func227.paramTypes.push([type_String, "kind"]);
            func227.paramTypes.push([]);
            func227.confidential = true;
            func227.paramCounts = [1, 1];
            obj206.methods["on()withPointDo"] = func227;
            func227.definitionLine = 568;
            func227.definitionModule = "objectdraw";
            var func232 = function(argcv) {    // method mouseEventSource(1)event(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_source__39__ = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for mouseEventSource (arg list 1) of mouseEventSource(1)event(1)"));
              var var_event__39__ = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of mouseEventSource(1)event(1)"));
              setModuleName("objectdraw");
              setLineNumber(576);    // compilenode object
              var obj233 = Grace_allocObject(GraceObject, "objectdraw.componentFromElement.mouseEventSource()event");
              obj233.definitionModule = "objectdraw";
              obj233.definitionLine = 576;
              obj233.outer = this;
              var reader_objectdraw_outer234 = function() {
                return this.outer;
              };
              obj233.methods["outer"] = reader_objectdraw_outer234;
              var obj_init_233 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj233;
                var func235 = function(argcv) {    // method asString
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                  setModuleName("objectdraw");
                  setLineNumber(580);    // compilenode string
                  var string236 = new GraceString("");
                  onSelf = true;
                  var call238 = callmethodChecked(this, "at", [0]);
                  var string240 = new GraceString(" at ");
                  onSelf = true;
                  var call242 = callmethodChecked(this, "source", [0]);
                  var string244 = new GraceString("Mouse event on ");
                  var opresult246 = callmethodChecked(string244, "++", [1], call242);
                  var opresult248 = callmethodChecked(opresult246, "++", [1], string240);
                  var opresult250 = callmethodChecked(opresult248, "++", [1], call238);
                  var opresult252 = callmethodChecked(opresult250, "++", [1], string236);
                  return opresult252;
                };
                func235.paramCounts = [0];
                obj233.methods["asString"] = func235;
                func235.definitionLine = 580;
                func235.definitionModule = "objectdraw";
                setLineNumber(577);    // compilenode identifier
                obj233.data["source"] = var_source__39__;
                var reader_objectdraw_source253 = function() {
                  return this.data["source"];
                };
                reader_objectdraw_source253.def = true;
                obj233.methods["source"] = reader_objectdraw_source253;
                setLineNumber(579);    // compilenode call
                onSelf = true;
                var call254 = callmethodChecked(this, "source", [0]);
                var call255 = callmethodChecked(call254, "element", [0]);
                var call256 = callmethodChecked(call255, "offsetTop", [0]);
                var call258 = callmethodChecked(var_event__39__, "pageY", [0]);
                var diff260 = callmethodChecked(call258, "-", [1], call256);
                setLineNumber(578);    // compilenode call
                onSelf = true;
                var call262 = callmethodChecked(this, "source", [0]);
                var call263 = callmethodChecked(call262, "element", [0]);
                var call264 = callmethodChecked(call263, "offsetLeft", [0]);
                var call266 = callmethodChecked(var_event__39__, "pageX", [0]);
                var diff268 = callmethodChecked(call266, "-", [1], call264);
                var opresult270 = callmethodChecked(diff268, "@", [1], diff260);
                obj233.data["at"] = opresult270;
                var reader_objectdraw_at271 = function() {
                  return this.data["at"];
                };
                reader_objectdraw_at271.def = true;
                obj233.methods["at"] = reader_objectdraw_at271;
                superDepth = origSuperDepth;
              };
              obj_init_233.apply(obj233, []);
              return obj233;
            };
            func232.confidential = true;
            func232.paramCounts = [1, 1];
            obj206.methods["mouseEventSource()event"] = func232;
            func232.definitionLine = 576;
            func232.definitionModule = "objectdraw";
              var func272 = function(argcv) {    // method mouseEventSource(1     )event(1     )()object
                var curarg = 1;
                var var_source__39__ = arguments[curarg];
                curarg++;
                var var_event__39__ = arguments[curarg];
                curarg++;
                var inheritingObject = arguments[curarg++];
                // Start argument processing
                curarg = 1;
                curarg++;
                curarg++;
                // End argument processing
                setModuleName("objectdraw");
                var returnTarget = invocationCount;
                invocationCount++;
                var obj273 = Grace_allocObject(GraceObject, "mouseEventSource()event");
                obj273.definitionModule = "objectdraw";
                obj273.definitionLine = 576;
                var inho273 = inheritingObject;
                while (inho273.superobj) inho273 = inho273.superobj;
                inho273.superobj = obj273;
                obj273.data = inheritingObject.data;
                if (inheritingObject.hasOwnProperty('_value'))
                  obj273._value = inheritingObject._value;
                obj273.outer = this;
                var reader_objectdraw_outer274 = function() {
                  return this.outer;
                };
                obj273.methods["outer"] = reader_objectdraw_outer274;
                var obj_init_273 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj273;
                  var func275 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                    setModuleName("objectdraw");
                    setLineNumber(580);    // compilenode string
                    var string276 = new GraceString("");
                    onSelf = true;
                    var call278 = callmethodChecked(this, "at", [0]);
                    var string280 = new GraceString(" at ");
                    onSelf = true;
                    var call282 = callmethodChecked(this, "source", [0]);
                    var string284 = new GraceString("Mouse event on ");
                    var opresult286 = callmethodChecked(string284, "++", [1], call282);
                    var opresult288 = callmethodChecked(opresult286, "++", [1], string280);
                    var opresult290 = callmethodChecked(opresult288, "++", [1], call278);
                    var opresult292 = callmethodChecked(opresult290, "++", [1], string276);
                    return opresult292;
                  };
                  func275.paramCounts = [0];
                  obj273.methods["asString"] = func275;
                  func275.definitionLine = 580;
                  func275.definitionModule = "objectdraw";
                  setLineNumber(577);    // compilenode identifier
                  obj273.data["source"] = var_source__39__;
                  var reader_objectdraw_source293 = function() {
                    return this.data["source"];
                  };
                  reader_objectdraw_source293.def = true;
                  obj273.methods["source"] = reader_objectdraw_source293;
                  setLineNumber(579);    // compilenode call
                  onSelf = true;
                  var call294 = callmethodChecked(this, "source", [0]);
                  var call295 = callmethodChecked(call294, "element", [0]);
                  var call296 = callmethodChecked(call295, "offsetTop", [0]);
                  var call298 = callmethodChecked(var_event__39__, "pageY", [0]);
                  var diff300 = callmethodChecked(call298, "-", [1], call296);
                  setLineNumber(578);    // compilenode call
                  onSelf = true;
                  var call302 = callmethodChecked(this, "source", [0]);
                  var call303 = callmethodChecked(call302, "element", [0]);
                  var call304 = callmethodChecked(call303, "offsetLeft", [0]);
                  var call306 = callmethodChecked(var_event__39__, "pageX", [0]);
                  var diff308 = callmethodChecked(call306, "-", [1], call304);
                  var opresult310 = callmethodChecked(diff308, "@", [1], diff300);
                  obj273.data["at"] = opresult310;
                  var reader_objectdraw_at311 = function() {
                    return this.data["at"];
                  };
                  reader_objectdraw_at311.def = true;
                  obj273.methods["at"] = reader_objectdraw_at311;
                  superDepth = origSuperDepth;
                };
                obj_init_273.apply(inheritingObject, []);
                return obj273;
                };
                func272.confidential = true;
                obj206.methods["mouseEventSource()event()object"] = func272;
              var func312 = function(argcv) {    // method onMouseClickDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseClickDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(584);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseClickDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("objectdraw");
                setLineNumber(586);    // compilenode vardec
                var var_lastDown;
                setLineNumber(588);    // compilenode string
                var string313 = new GraceString("mousedown");
                var block314 = new GraceBlock(this, 588, 1);
                setLineNumber(0);    // compilenode string
                var string315 = new GraceString("event'");
                var call316 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                var call317 = callmethodChecked(call316, "new", [1], string315);
                var call318 = callmethodChecked(var_prelude, "AndPattern", [0]);
                var call319 = callmethodChecked(call318, "new", [2], call317, var_Foreign);
                block314.pattern = call319;
                setLineNumber(588);    // compilenode identifier
                block314.paramTypes = [var_Foreign];
                block314.real = function(var_event__39__) {
                  setLineNumber(589);    // compilenode identifier
                  var call320 = callmethodChecked(var_event__39__, "timeStamp", [0]);
                  var_lastDown = call320;
                  return GraceDone;
                };
                onSelf = true;
                var call321 = callmethodChecked(this, "on()do", [1, 1], string313, block314);
                setLineNumber(592);    // compilenode string
                var string322 = new GraceString("click");
                var block323 = new GraceBlock(this, 592, 1);
                setLineNumber(0);    // compilenode string
                var string324 = new GraceString("event'");
                var call325 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                var call326 = callmethodChecked(call325, "new", [1], string324);
                var call327 = callmethodChecked(var_prelude, "AndPattern", [0]);
                var call328 = callmethodChecked(call327, "new", [2], call326, var_Foreign);
                block323.pattern = call328;
                setLineNumber(592);    // compilenode identifier
                block323.paramTypes = [var_Foreign];
                block323.real = function(var_event__39__) {
                  var if329 = GraceDone;
                  setLineNumber(593);    // compilenode identifier
                  var call332 = callmethodChecked(var_event__39__, "timeStamp", [0]);
                  var diff334 = callmethodChecked(call332, "-", [1], var_lastDown);
                  var opresult336 = callmethodChecked(diff334, "\u2264", [1], var_maxClickTime);
                  if (Grace_isTrue(opresult336)) {
                    setLineNumber(594);    // compilenode identifier
                    onSelf = true;
                    var call337 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                    var call338 = callmethodChecked(var_f, "apply", [1], call337);
                    if329 = call338;
                  }
                  return if329;
                };
                onSelf = true;
                var call339 = callmethodChecked(this, "on()do", [1, 1], string322, block323);
                setLineNumber(592);    // return value
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call339)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseClickDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call339;
              };
              func312.paramTypes = [];
              func312.paramTypes.push([]);
              func312.paramCounts = [1];
              obj206.methods["onMouseClickDo"] = func312;
              func312.definitionLine = 584;
              func312.definitionModule = "objectdraw";
              var func340 = function(argcv) {    // method onMousePressDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMousePressDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(600);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMousePressDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("objectdraw");
                setLineNumber(601);    // compilenode string
                var string341 = new GraceString("mousedown");
                onSelf = true;
                var call342 = callmethodChecked(this, "on()withPointDo", [1, 1], string341, var_f);
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call342)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMousePressDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call342;
              };
              func340.paramTypes = [];
              func340.paramTypes.push([]);
              func340.paramCounts = [1];
              obj206.methods["onMousePressDo"] = func340;
              func340.definitionLine = 600;
              func340.definitionModule = "objectdraw";
              var func343 = function(argcv) {    // method onMouseReleaseDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseReleaseDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(605);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseReleaseDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("objectdraw");
                setLineNumber(606);    // compilenode string
                var string344 = new GraceString("mouseup");
                onSelf = true;
                var call345 = callmethodChecked(this, "on()withPointDo", [1, 1], string344, var_f);
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call345)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseReleaseDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call345;
              };
              func343.paramTypes = [];
              func343.paramTypes.push([]);
              func343.paramCounts = [1];
              obj206.methods["onMouseReleaseDo"] = func343;
              func343.definitionLine = 605;
              func343.definitionModule = "objectdraw";
              var func346 = function(argcv) {    // method onMouseMoveDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseMoveDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(610);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseMoveDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("objectdraw");
                setLineNumber(611);    // compilenode string
                var string347 = new GraceString("mousemove");
                var block348 = new GraceBlock(this, 611, 1);
                setLineNumber(1);    // compilenode identifier
                block348.real = function(var_event__39__) {
                  var if349 = GraceDone;
                  var if350 = GraceDone;
                  setLineNumber(612);    // compilenode string
                  var string351 = new GraceString("buttons");
                  var call352 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], var_event__39__, string351);
                  if (Grace_isTrue(call352)) {
                    setLineNumber(613);    // compilenode identifier
                    var call354 = callmethodChecked(var_event__39__, "buttons", [0]);
                    var opresult356 = callmethodChecked(call354, "==", [1], new GraceNum(0));
                    if350 = opresult356;
                  } else {
                    setLineNumber(615);    // compilenode identifier
                    var call358 = callmethodChecked(var_event__39__, "which", [0]);
                    var opresult360 = callmethodChecked(call358, "==", [1], new GraceNum(0));
                    if350 = opresult360;
                  }
                  if (Grace_isTrue(if350)) {
                    setLineNumber(617);    // compilenode identifier
                    onSelf = true;
                    var call361 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                    var call362 = callmethodChecked(var_f, "apply", [1], call361);
                    if349 = call362;
                  }
                  return if349;
                };
                onSelf = true;
                var call363 = callmethodChecked(this, "on()do", [1, 1], string347, block348);
                setLineNumber(611);    // return value
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call363)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseMoveDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call363;
              };
              func346.paramTypes = [];
              func346.paramTypes.push([]);
              func346.paramCounts = [1];
              obj206.methods["onMouseMoveDo"] = func346;
              func346.definitionLine = 610;
              func346.definitionModule = "objectdraw";
              var func364 = function(argcv) {    // method onMouseDragDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseDragDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(623);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseDragDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("objectdraw");
                setLineNumber(624);    // compilenode string
                var string365 = new GraceString("mousemove");
                var block366 = new GraceBlock(this, 624, 1);
                setLineNumber(1);    // compilenode identifier
                block366.real = function(var_event__39__) {
                  var if367 = GraceDone;
                  var if368 = GraceDone;
                  setLineNumber(625);    // compilenode string
                  var string369 = new GraceString("buttons");
                  var call370 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], var_event__39__, string369);
                  if (Grace_isTrue(call370)) {
                    setLineNumber(626);    // compilenode identifier
                    var call372 = callmethodChecked(var_event__39__, "buttons", [0]);
                    var opresult374 = callmethodChecked(call372, "==", [1], new GraceNum(1));
                    if368 = opresult374;
                  } else {
                    setLineNumber(628);    // compilenode identifier
                    var call376 = callmethodChecked(var_event__39__, "which", [0]);
                    var opresult378 = callmethodChecked(call376, "==", [1], new GraceNum(1));
                    if368 = opresult378;
                  }
                  if (Grace_isTrue(if368)) {
                    setLineNumber(630);    // compilenode identifier
                    onSelf = true;
                    var call379 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                    var call380 = callmethodChecked(var_f, "apply", [1], call379);
                    if367 = call380;
                  }
                  return if367;
                };
                onSelf = true;
                var call381 = callmethodChecked(this, "on()do", [1, 1], string365, block366);
                setLineNumber(624);    // return value
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call381)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseDragDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call381;
              };
              func364.paramTypes = [];
              func364.paramTypes.push([]);
              func364.paramCounts = [1];
              obj206.methods["onMouseDragDo"] = func364;
              func364.definitionLine = 623;
              func364.definitionModule = "objectdraw";
              var func382 = function(argcv) {    // method onMouseEnterDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnterDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(636);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseEnterDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("objectdraw");
                setLineNumber(637);    // compilenode string
                var string383 = new GraceString("mouseover");
                var block384 = new GraceBlock(this, 637, 1);
                setLineNumber(1);    // compilenode identifier
                block384.real = function(var_event__39__) {
                  setLineNumber(638);    // compilenode identifier
                  var call385 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                  var var_from = call385;
                  var if386 = GraceDone;
                  setLineNumber(647);    // compilenode block
                  var block387 = new GraceBlock(this, 647, 0);
                  block387.real = function() {
                    onSelf = true;
                    var call388 = callmethodChecked(this, "element", [0]);
                    var call389 = callmethodChecked(call388, "contains", [1], var_from);
                    var call390 = callmethodChecked(call389, "prefix!", [0]);
                    return call390;
                  };
                  var call393 = callmethodChecked(var_dom, "noObject", [0]);
                  var opresult395 = callmethodChecked(call393, "==", [1], var_from);
                  var opresult397 = callmethodChecked(opresult395, "||", [1], block387);
                  if (Grace_isTrue(opresult397)) {
                    setLineNumber(650);    // compilenode identifier
                    onSelf = true;
                    var call398 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                    var call399 = callmethodChecked(var_f, "apply", [1], call398);
                    if386 = call399;
                  }
                  return if386;
                };
                onSelf = true;
                var call400 = callmethodChecked(this, "on()do", [1, 1], string383, block384);
                setLineNumber(637);    // return value
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call400)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseEnterDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call400;
              };
              func382.paramTypes = [];
              func382.paramTypes.push([]);
              func382.paramCounts = [1];
              obj206.methods["onMouseEnterDo"] = func382;
              func382.definitionLine = 636;
              func382.definitionModule = "objectdraw";
              var func401 = function(argcv) {    // method onMouseExitDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExitDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(656);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseExitDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("objectdraw");
                setLineNumber(657);    // compilenode string
                var string402 = new GraceString("mouseout");
                var block403 = new GraceBlock(this, 657, 1);
                setLineNumber(1);    // compilenode identifier
                block403.real = function(var_event__39__) {
                  setLineNumber(658);    // compilenode identifier
                  var call404 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                  var var_to = call404;
                  var if405 = GraceDone;
                  setLineNumber(660);    // compilenode block
                  var block406 = new GraceBlock(this, 660, 0);
                  block406.real = function() {
                    onSelf = true;
                    var call407 = callmethodChecked(this, "element", [0]);
                    var call408 = callmethodChecked(call407, "contains", [1], var_to);
                    var call409 = callmethodChecked(call408, "prefix!", [0]);
                    return call409;
                  };
                  var call412 = callmethodChecked(var_dom, "noObject", [0]);
                  var opresult414 = callmethodChecked(call412, "==", [1], var_to);
                  var opresult416 = callmethodChecked(opresult414, "||", [1], block406);
                  if (Grace_isTrue(opresult416)) {
                    setLineNumber(661);    // compilenode identifier
                    onSelf = true;
                    var call417 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                    var call418 = callmethodChecked(var_f, "apply", [1], call417);
                    if405 = call418;
                  }
                  return if405;
                };
                onSelf = true;
                var call419 = callmethodChecked(this, "on()do", [1, 1], string402, block403);
                setLineNumber(657);    // return value
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call419)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseExitDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call419;
              };
              func401.paramTypes = [];
              func401.paramTypes.push([]);
              func401.paramCounts = [1];
              obj206.methods["onMouseExitDo"] = func401;
              func401.definitionLine = 656;
              func401.definitionModule = "objectdraw";
              var func420 = function(argcv) {    // method eventSource(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_source__39__ = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for eventSource(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(668);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                            callmethod(var_Component, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("objectdraw");
                var obj421 = Grace_allocObject(GraceObject, "objectdraw.componentFromElement.eventSource");
                obj421.definitionModule = "objectdraw";
                obj421.definitionLine = 668;
                obj421.outer = this;
                var reader_objectdraw_outer422 = function() {
                  return this.outer;
                };
                obj421.methods["outer"] = reader_objectdraw_outer422;
                var obj_init_421 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj421;
                  var func423 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                    setModuleName("objectdraw");
                    setLineNumber(674);    // compilenode string
                    var string424 = new GraceString("");
                    onSelf = true;
                    var call426 = callmethodChecked(this, "source", [0]);
                    var string428 = new GraceString("Event on ");
                    var opresult430 = callmethodChecked(string428, "++", [1], call426);
                    var opresult432 = callmethodChecked(opresult430, "++", [1], string424);
                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult432)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method asString does not have " + 
                                callmethod(var_String, "asString", [0])._value + "."));
                    return opresult432;
                  };
                  func423.paramCounts = [0];
                  obj421.methods["asString"] = func423;
                  func423.definitionLine = 673;
                  func423.definitionModule = "objectdraw";
                  setLineNumber(671);    // compilenode identifier
                  obj421.data["source"] = var_source__39__;
                  var reader_objectdraw_source433 = function() {
                    return this.data["source"];
                  };
                  reader_objectdraw_source433.def = true;
                  obj421.methods["source"] = reader_objectdraw_source433;
                  if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("value of def 'source' is not of type Component"));
                  superDepth = origSuperDepth;
                };
                obj_init_421.apply(obj421, []);
                setLineNumber(668);    // return value
                if (!Grace_isTrue(callmethod(var_Event, "match", [1], obj421)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method eventSource(1) does not have " + 
                            callmethod(var_Event, "asString", [0])._value + "."));
                return obj421;
              };
              func420.paramTypes = [];
              func420.paramTypes.push([]);
              func420.paramCounts = [1];
              obj206.methods["eventSource"] = func420;
              func420.definitionLine = 668;
              func420.definitionModule = "objectdraw";
                var func434 = function(argcv) {    // method eventSource(1     )()object
                  var curarg = 1;
                  var var_source__39__ = arguments[curarg];
                  curarg++;
                  var inheritingObject = arguments[curarg++];
                  // Start argument processing
                  curarg = 1;
                  if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                              callmethod(var_Component, "asString", [0])._value + "."));
                  curarg++;
                  // End argument processing
                  setModuleName("objectdraw");
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var obj435 = Grace_allocObject(GraceObject, "eventSource");
                  obj435.definitionModule = "objectdraw";
                  obj435.definitionLine = 668;
                  var inho435 = inheritingObject;
                  while (inho435.superobj) inho435 = inho435.superobj;
                  inho435.superobj = obj435;
                  obj435.data = inheritingObject.data;
                  if (inheritingObject.hasOwnProperty('_value'))
                    obj435._value = inheritingObject._value;
                  obj435.outer = this;
                  var reader_objectdraw_outer436 = function() {
                    return this.outer;
                  };
                  obj435.methods["outer"] = reader_objectdraw_outer436;
                  var obj_init_435 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj435;
                    var func437 = function(argcv) {    // method asString
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                      setModuleName("objectdraw");
                      setLineNumber(674);    // compilenode string
                      var string438 = new GraceString("");
                      onSelf = true;
                      var call440 = callmethodChecked(this, "source", [0]);
                      var string442 = new GraceString("Event on ");
                      var opresult444 = callmethodChecked(string442, "++", [1], call440);
                      var opresult446 = callmethodChecked(opresult444, "++", [1], string438);
                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult446)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method asString does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      return opresult446;
                    };
                    func437.paramCounts = [0];
                    obj435.methods["asString"] = func437;
                    func437.definitionLine = 673;
                    func437.definitionModule = "objectdraw";
                    setLineNumber(671);    // compilenode identifier
                    obj435.data["source"] = var_source__39__;
                    var reader_objectdraw_source447 = function() {
                      return this.data["source"];
                    };
                    reader_objectdraw_source447.def = true;
                    obj435.methods["source"] = reader_objectdraw_source447;
                    if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("value of def 'source' is not of type Component"));
                    superDepth = origSuperDepth;
                  };
                  obj_init_435.apply(inheritingObject, []);
                  return obj435;
                  };
                  func434.paramTypes = [];
                  func434.paramTypes.push([]);
                  obj206.methods["eventSource()object"] = func434;
                var func448 = function(argcv) {    // method keyEventSource(1)event(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_source__39__ = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for keyEventSource (arg list 1) of keyEventSource(1)event(1)"));
                  var var_event__39__ = arguments[curarg];
                  curarg++;
                  if (argcv[1] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of keyEventSource(1)event(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(678);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                              callmethod(var_Component, "asString", [0])._value + "."));
                  curarg++;
                  if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                              callmethod(var_Foreign, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("objectdraw");
                  var obj449 = Grace_allocObject(null, "objectdraw.componentFromElement.keyEventSource()event");
                  obj449.definitionModule = "objectdraw";
                  obj449.definitionLine = 678;
                  obj449.outer = this;
                  var reader_objectdraw_outer450 = function() {
                    return this.outer;
                  };
                  obj449.methods["outer"] = reader_objectdraw_outer450;
                  var obj_init_449 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj449;
                    var func451 = function(argcv) {    // method asString
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                      setModuleName("objectdraw");
                      setLineNumber(686);    // compilenode string
                      var string452 = new GraceString("");
                      onSelf = true;
                      var call454 = callmethodChecked(this, "code", [0]);
                      var string456 = new GraceString(" for key-code ");
                      onSelf = true;
                      var call458 = callmethodChecked(this, "source", [0]);
                      var string460 = new GraceString("Event on ");
                      var opresult462 = callmethodChecked(string460, "++", [1], call458);
                      var opresult464 = callmethodChecked(opresult462, "++", [1], string456);
                      var opresult466 = callmethodChecked(opresult464, "++", [1], call454);
                      var opresult468 = callmethodChecked(opresult466, "++", [1], string452);
                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult468)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method asString does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      return opresult468;
                    };
                    func451.paramCounts = [0];
                    obj449.methods["asString"] = func451;
                    func451.definitionLine = 685;
                    func451.definitionModule = "objectdraw";
                    setLineNumber(680);    // compilenode call
                    var call469 = callmethodChecked(superDepth, "outer", [0]);
                    onOuter = true;
                    onSelf = true;
                    var call470 = callmethodChecked(call469, "eventSource()object", [1, 1], var_source__39__, this);
                    obj449.superobj = call470;
                    if (call470.data) obj449.data = call470.data;
                    if (call470.hasOwnProperty('_value'))
                        obj449._value = call470._value;
                    setLineNumber(681);    // compilenode identifier
                    var call471 = callmethodChecked(var_event__39__, "which", [0]);
                    obj449.data["code"] = call471;
                    var reader_objectdraw_code472 = function() {
                      return this.data["code"];
                    };
                    reader_objectdraw_code472.def = true;
                    obj449.methods["code"] = reader_objectdraw_code472;
                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call471)))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("value of def 'code' is not of type Number"));
                    superDepth = origSuperDepth;
                  };
                  obj_init_449.apply(obj449, []);
                  setLineNumber(678);    // return value
                  if (!Grace_isTrue(callmethod(var_KeyEvent, "match", [1], obj449)))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("result of method keyEventSource(1)event(1) does not have " + 
                              callmethod(var_KeyEvent, "asString", [0])._value + "."));
                  return obj449;
                };
                func448.paramTypes = [];
                func448.paramTypes.push([]);
                func448.paramTypes.push([]);
                func448.paramCounts = [1, 1];
                obj206.methods["keyEventSource()event"] = func448;
                func448.definitionLine = 678;
                func448.definitionModule = "objectdraw";
                  var func473 = function(argcv) {    // method keyEventSource(1     )event(1     )()object
                    var curarg = 1;
                    var var_source__39__ = arguments[curarg];
                    curarg++;
                    var var_event__39__ = arguments[curarg];
                    curarg++;
                    var inheritingObject = arguments[curarg++];
                    // Start argument processing
                    curarg = 1;
                    if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                                callmethod(var_Component, "asString", [0])._value + "."));
                    curarg++;
                    if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                                callmethod(var_Foreign, "asString", [0])._value + "."));
                    curarg++;
                    // End argument processing
                    setModuleName("objectdraw");
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var obj474 = Grace_allocObject(null, "keyEventSource()event");
                    obj474.definitionModule = "objectdraw";
                    obj474.definitionLine = 678;
                    var inho474 = inheritingObject;
                    while (inho474.superobj) inho474 = inho474.superobj;
                    inho474.superobj = obj474;
                    obj474.data = inheritingObject.data;
                    if (inheritingObject.hasOwnProperty('_value'))
                      obj474._value = inheritingObject._value;
                    obj474.outer = this;
                    var reader_objectdraw_outer475 = function() {
                      return this.outer;
                    };
                    obj474.methods["outer"] = reader_objectdraw_outer475;
                    var obj_init_474 = function() {
                      var origSuperDepth = superDepth;
                      superDepth = obj474;
                      var func476 = function(argcv) {    // method asString
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                        setModuleName("objectdraw");
                        setLineNumber(686);    // compilenode string
                        var string477 = new GraceString("");
                        onSelf = true;
                        var call479 = callmethodChecked(this, "code", [0]);
                        var string481 = new GraceString(" for key-code ");
                        onSelf = true;
                        var call483 = callmethodChecked(this, "source", [0]);
                        var string485 = new GraceString("Event on ");
                        var opresult487 = callmethodChecked(string485, "++", [1], call483);
                        var opresult489 = callmethodChecked(opresult487, "++", [1], string481);
                        var opresult491 = callmethodChecked(opresult489, "++", [1], call479);
                        var opresult493 = callmethodChecked(opresult491, "++", [1], string477);
                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult493)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method asString does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        return opresult493;
                      };
                      func476.paramCounts = [0];
                      obj474.methods["asString"] = func476;
                      func476.definitionLine = 685;
                      func476.definitionModule = "objectdraw";
                      setLineNumber(680);    // compilenode call
                      var call494 = callmethodChecked(superDepth, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call495 = callmethodChecked(call494, "eventSource()object", [1, 1], var_source__39__, this);
                      obj474.superobj = call495;
                      if (call495.data) obj474.data = call495.data;
                      if (call495.hasOwnProperty('_value'))
                          obj474._value = call495._value;
                      setLineNumber(681);    // compilenode identifier
                      var call496 = callmethodChecked(var_event__39__, "which", [0]);
                      obj474.data["code"] = call496;
                      var reader_objectdraw_code497 = function() {
                        return this.data["code"];
                      };
                      reader_objectdraw_code497.def = true;
                      obj474.methods["code"] = reader_objectdraw_code497;
                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call496)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("value of def 'code' is not of type Number"));
                      superDepth = origSuperDepth;
                    };
                    obj_init_474.apply(inheritingObject, []);
                    return obj474;
                    };
                    func473.paramTypes = [];
                    func473.paramTypes.push([]);
                    func473.paramTypes.push([]);
                    obj206.methods["keyEventSource()event()object"] = func473;
                  var func498 = function(argcv) {    // method on(1)withKeyDo(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_kind = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)withKeyDo(1)"));
                    var var_f = arguments[curarg];
                    curarg++;
                    if (argcv[1] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withKeyDo (arg list 2) of on(1)withKeyDo(1)"));
                    // Start argument checking
                    curarg = 1;
                    setLineNumber(692);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                                callmethod(var_String, "asString", [0])._value + "."));
                    curarg++;
                    setLineNumber(693);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in withKeyDo (arg list 2), which corresponds to parameter f, does not have " + 
                                callmethod(var_KeyResponse, "asString", [0])._value + "."));
                    curarg++;
                    // End argument checking
                    setModuleName("objectdraw");
                    setLineNumber(694);    // compilenode block
                    var block499 = new GraceBlock(this, 694, 1);
                    setLineNumber(1);    // compilenode identifier
                    block499.real = function(var_event__39__) {
                      setLineNumber(695);    // compilenode identifier
                      onSelf = true;
                      var call500 = callmethodChecked(this, "keyEventSource()event", [1, 1], this, var_event__39__);
                      var call501 = callmethodChecked(var_f, "apply", [1], call500);
                      return call501;
                    };
                    onSelf = true;
                    var call502 = callmethodChecked(this, "on()do", [1, 1], var_kind, block499);
                    setLineNumber(694);    // return value
                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call502)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method on(1)withKeyDo(1) does not have " + 
                                callmethod(var_Done, "asString", [0])._value + "."));
                    return call502;
                  };
                  func498.paramTypes = [];
                  func498.paramTypes.push([type_String, "kind"]);
                  func498.paramTypes.push([]);
                  func498.confidential = true;
                  func498.paramCounts = [1, 1];
                  obj206.methods["on()withKeyDo"] = func498;
                  func498.definitionLine = 692;
                  func498.definitionModule = "objectdraw";
                  var func503 = function(argcv) {    // method onKeyPressDo(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_f = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyPressDo(1)"));
                    // Start argument checking
                    curarg = 1;
                    setLineNumber(700);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in onKeyPressDo (arg list 1), which corresponds to parameter f, does not have " + 
                                callmethod(var_KeyResponse, "asString", [0])._value + "."));
                    curarg++;
                    // End argument checking
                    setModuleName("objectdraw");
                    setLineNumber(701);    // compilenode string
                    var string504 = new GraceString("keydown");
                    onSelf = true;
                    var call505 = callmethodChecked(this, "on()withKeyDo", [1, 1], string504, var_f);
                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call505)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method onKeyPressDo(1) does not have " + 
                                callmethod(var_Done, "asString", [0])._value + "."));
                    return call505;
                  };
                  func503.paramTypes = [];
                  func503.paramTypes.push([]);
                  func503.paramCounts = [1];
                  obj206.methods["onKeyPressDo"] = func503;
                  func503.definitionLine = 700;
                  func503.definitionModule = "objectdraw";
                  var func506 = function(argcv) {    // method onKeyReleaseDo(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_f = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyReleaseDo(1)"));
                    // Start argument checking
                    curarg = 1;
                    setLineNumber(705);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in onKeyReleaseDo (arg list 1), which corresponds to parameter f, does not have " + 
                                callmethod(var_KeyResponse, "asString", [0])._value + "."));
                    curarg++;
                    // End argument checking
                    setModuleName("objectdraw");
                    setLineNumber(706);    // compilenode string
                    var string507 = new GraceString("keyup");
                    onSelf = true;
                    var call508 = callmethodChecked(this, "on()withKeyDo", [1, 1], string507, var_f);
                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call508)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method onKeyReleaseDo(1) does not have " + 
                                callmethod(var_Done, "asString", [0])._value + "."));
                    return call508;
                  };
                  func506.paramTypes = [];
                  func506.paramTypes.push([]);
                  func506.paramCounts = [1];
                  obj206.methods["onKeyReleaseDo"] = func506;
                  func506.definitionLine = 705;
                  func506.definitionModule = "objectdraw";
                  var func509 = function(argcv) {    // method onKeyTypeDo(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_f = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyTypeDo(1)"));
                    // Start argument checking
                    curarg = 1;
                    setLineNumber(710);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in onKeyTypeDo (arg list 1), which corresponds to parameter f, does not have " + 
                                callmethod(var_KeyResponse, "asString", [0])._value + "."));
                    curarg++;
                    // End argument checking
                    setModuleName("objectdraw");
                    setLineNumber(711);    // compilenode string
                    var string510 = new GraceString("keypress");
                    onSelf = true;
                    var call511 = callmethodChecked(this, "on()withKeyDo", [1, 1], string510, var_f);
                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call511)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method onKeyTypeDo(1) does not have " + 
                                callmethod(var_Done, "asString", [0])._value + "."));
                    return call511;
                  };
                  func509.paramTypes = [];
                  func509.paramTypes.push([]);
                  func509.paramCounts = [1];
                  obj206.methods["onKeyTypeDo"] = func509;
                  func509.definitionLine = 710;
                  func509.definitionModule = "objectdraw";
                  var func512 = function(argcv) {    // method isFlexible
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isFlexible"));
                    setModuleName("objectdraw");
                    setLineNumber(716);    // compilenode call
                    onSelf = true;
                    var call514 = callmethodChecked(this, "element", [0]);
                    var call515 = callmethodChecked(call514, "style", [0]);
                    var call516 = callmethodChecked(call515, "flexGrow", [0]);
                    var call517 = callmethodChecked(call516, "asNumber", [0]);
                    var opresult519 = callmethodChecked(call517, ">", [1], new GraceNum(0));
                    if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult519)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method isFlexible does not have " + 
                                callmethod(var_Boolean, "asString", [0])._value + "."));
                    return opresult519;
                  };
                  func512.paramCounts = [0];
                  obj206.methods["isFlexible"] = func512;
                  func512.definitionLine = 715;
                  func512.definitionModule = "objectdraw";
                  var func520 = function(argcv) {    // method flexible:=(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_value = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for flexible:=(1)"));
                    // Start argument checking
                    curarg = 1;
                    setLineNumber(720);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in flexible:= (arg list 1), which corresponds to parameter value, does not have " + 
                                callmethod(var_Boolean, "asString", [0])._value + "."));
                    curarg++;
                    // End argument checking
                    setModuleName("objectdraw");
                    var if521 = GraceDone;
                    setLineNumber(721);    // compilenode identifier
                    if (Grace_isTrue(var_value)) {
                      setLineNumber(722);    // compilenode num
                      if521 = new GraceNum(1);
                    } else {
                      setLineNumber(724);    // compilenode num
                      if521 = new GraceNum(0);
                    }
                    setLineNumber(721);    // compilenode call
                    onSelf = true;
                    var call522 = callmethodChecked(this, "element", [0]);
                    var call523 = callmethodChecked(call522, "style", [0]);
                    var call524 = callmethodChecked(call523, "flexGrow:=", [1], if521);
                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call524)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method flexible:=(1) does not have " + 
                                callmethod(var_Done, "asString", [0])._value + "."));
                    return call524;
                  };
                  func520.paramTypes = [];
                  func520.paramTypes.push([type_Boolean, "value"]);
                  func520.paramCounts = [1];
                  obj206.methods["flexible:="] = func520;
                  func520.definitionLine = 720;
                  func520.definitionModule = "objectdraw";
                  var func525 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                    setModuleName("objectdraw");
                    setLineNumber(730);    // compilenode string
                    var string526 = new GraceString("a component");
                    if (!Grace_isTrue(callmethod(var_String, "match", [1], string526)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method asString does not have " + 
                                callmethod(var_String, "asString", [0])._value + "."));
                    return string526;
                  };
                  func525.paramCounts = [0];
                  obj206.methods["asString"] = func525;
                  func525.definitionLine = 729;
                  func525.definitionModule = "objectdraw";
                  setLineNumber(543);    // compilenode identifier
                  obj206.data["element"] = var_element__39__;
                  var reader_objectdraw_element527 = function() {
                    return this.data["element"];
                  };
                  reader_objectdraw_element527.def = true;
                  obj206.methods["element"] = reader_objectdraw_element527;
                  superDepth = origSuperDepth;
                };
                obj_init_206.apply(obj206, []);
                setLineNumber(542);    // return value
                if (!Grace_isTrue(callmethod(var_Component, "match", [1], obj206)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method componentFromElement(1) does not have " + 
                            callmethod(var_Component, "asString", [0])._value + "."));
                return obj206;
              };
              func205.paramCounts = [1];
              this.methods["componentFromElement"] = func205;
              func205.definitionLine = 542;
              func205.definitionModule = "objectdraw";
                var func528 = function(argcv) {    // method componentFromElement(1     )()object
                  var curarg = 1;
                  var var_element__39__ = arguments[curarg];
                  curarg++;
                  var inheritingObject = arguments[curarg++];
                  // Start argument processing
                  curarg = 1;
                  curarg++;
                  // End argument processing
                  setModuleName("objectdraw");
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var obj529 = Grace_allocObject(GraceObject, "componentFromElement");
                  obj529.definitionModule = "objectdraw";
                  obj529.definitionLine = 542;
                  var inho529 = inheritingObject;
                  while (inho529.superobj) inho529 = inho529.superobj;
                  inho529.superobj = obj529;
                  obj529.data = inheritingObject.data;
                  if (inheritingObject.hasOwnProperty('_value'))
                    obj529._value = inheritingObject._value;
                  obj529.outer = this;
                  var reader_objectdraw_outer530 = function() {
                    return this.outer;
                  };
                  obj529.methods["outer"] = reader_objectdraw_outer530;
                  var obj_init_529 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj529;
                    var func531 = function(argcv) {    // method width
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                      setModuleName("objectdraw");
                      setLineNumber(547);    // compilenode call
                      onSelf = true;
                      var call532 = callmethodChecked(this, "element", [0]);
                      var call533 = callmethodChecked(call532, "width", [0]);
                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call533)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method width does not have " + 
                                  callmethod(var_Number, "asString", [0])._value + "."));
                      return call533;
                    };
                    func531.paramCounts = [0];
                    obj529.methods["width"] = func531;
                    func531.definitionLine = 546;
                    func531.definitionModule = "objectdraw";
                    var func534 = function(argcv) {    // method height
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                      setModuleName("objectdraw");
                      setLineNumber(552);    // compilenode call
                      onSelf = true;
                      var call535 = callmethodChecked(this, "element", [0]);
                      var call536 = callmethodChecked(call535, "height", [0]);
                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call536)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method height does not have " + 
                                  callmethod(var_Number, "asString", [0])._value + "."));
                      return call536;
                    };
                    func534.paramCounts = [0];
                    obj529.methods["height"] = func534;
                    func534.definitionLine = 551;
                    func534.definitionModule = "objectdraw";
                    var func537 = function(argcv) {    // method size
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                      setModuleName("objectdraw");
                      setLineNumber(557);    // compilenode call
                      onSelf = true;
                      var call538 = callmethodChecked(this, "element", [0]);
                      var call539 = callmethodChecked(call538, "height", [0]);
                      onSelf = true;
                      var call541 = callmethodChecked(this, "element", [0]);
                      var call542 = callmethodChecked(call541, "width", [0]);
                      var opresult544 = callmethodChecked(call542, "@", [1], call539);
                      setLineNumber(556);    // compilenode call
                      var call545 = callmethodChecked(superDepth, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call546 = callmethodChecked(call545, "Point", [0]);
                      setLineNumber(557);    // return value
                      if (!Grace_isTrue(callmethod(call546, "match", [1], opresult544)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method size does not have " + 
                                  callmethod(call546, "asString", [0])._value + "."));
                      return opresult544;
                    };
                    func537.paramCounts = [0];
                    obj529.methods["size"] = func537;
                    func537.definitionLine = 556;
                    func537.definitionModule = "objectdraw";
                    var func547 = function(argcv) {    // method on(1)do(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_event__39__ = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)do(1)"));
                      var var_f = arguments[curarg];
                      curarg++;
                      if (argcv[1] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of on(1)do(1)"));
                      // Start argument checking
                      curarg = 1;
                      setLineNumber(561);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in on (arg list 1), which corresponds to parameter event', does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      curarg++;
                      setLineNumber(562);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in do (arg list 2), which corresponds to parameter f, does not have " + 
                                  callmethod(var_Procedure, "asString", [0])._value + "."));
                      curarg++;
                      // End argument checking
                      setModuleName("objectdraw");
                      setLineNumber(563);    // compilenode call
                      onSelf = true;
                      var call548 = callmethodChecked(this, "element", [0]);
                      var call549 = callmethodChecked(call548, "addEventListener", [2], var_event__39__, var_f);
                      setLineNumber(564);    // return value
                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method on(1)do(1) does not have " + 
                                  callmethod(var_Done, "asString", [0])._value + "."));
                      return var_done;
                    };
                    func547.paramTypes = [];
                    func547.paramTypes.push([type_String, "event'"]);
                    func547.paramTypes.push([]);
                    func547.confidential = true;
                    func547.paramCounts = [1, 1];
                    obj529.methods["on()do"] = func547;
                    func547.definitionLine = 561;
                    func547.definitionModule = "objectdraw";
                    var func550 = function(argcv) {    // method on(1)withPointDo(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_kind = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)withPointDo(1)"));
                      var var_f = arguments[curarg];
                      curarg++;
                      if (argcv[1] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withPointDo (arg list 2) of on(1)withPointDo(1)"));
                      // Start argument checking
                      curarg = 1;
                      setLineNumber(568);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      curarg++;
                      setLineNumber(569);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in withPointDo (arg list 2), which corresponds to parameter f, does not have " + 
                                  callmethod(var_MouseResponse, "asString", [0])._value + "."));
                      curarg++;
                      // End argument checking
                      setModuleName("objectdraw");
                      setLineNumber(570);    // compilenode block
                      var block551 = new GraceBlock(this, 570, 1);
                      setLineNumber(1);    // compilenode identifier
                      block551.real = function(var_event__39__) {
                        setLineNumber(571);    // compilenode identifier
                        onSelf = true;
                        var call552 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                        var call553 = callmethodChecked(var_f, "apply", [1], call552);
                        return call553;
                      };
                      onSelf = true;
                      var call554 = callmethodChecked(this, "on()do", [1, 1], var_kind, block551);
                      setLineNumber(570);    // return value
                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call554)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method on(1)withPointDo(1) does not have " + 
                                  callmethod(var_Done, "asString", [0])._value + "."));
                      return call554;
                    };
                    func550.paramTypes = [];
                    func550.paramTypes.push([type_String, "kind"]);
                    func550.paramTypes.push([]);
                    func550.confidential = true;
                    func550.paramCounts = [1, 1];
                    obj529.methods["on()withPointDo"] = func550;
                    func550.definitionLine = 568;
                    func550.definitionModule = "objectdraw";
                    var func555 = function(argcv) {    // method mouseEventSource(1)event(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_source__39__ = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for mouseEventSource (arg list 1) of mouseEventSource(1)event(1)"));
                      var var_event__39__ = arguments[curarg];
                      curarg++;
                      if (argcv[1] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of mouseEventSource(1)event(1)"));
                      setModuleName("objectdraw");
                      setLineNumber(576);    // compilenode object
                      var obj556 = Grace_allocObject(GraceObject, "mouseEventSource()event");
                      obj556.definitionModule = "objectdraw";
                      obj556.definitionLine = 576;
                      obj556.outer = this;
                      var reader_objectdraw_outer557 = function() {
                        return this.outer;
                      };
                      obj556.methods["outer"] = reader_objectdraw_outer557;
                      var obj_init_556 = function() {
                        var origSuperDepth = superDepth;
                        superDepth = obj556;
                        var func558 = function(argcv) {    // method asString
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                          setModuleName("objectdraw");
                          setLineNumber(580);    // compilenode string
                          var string559 = new GraceString("");
                          onSelf = true;
                          var call561 = callmethodChecked(this, "at", [0]);
                          var string563 = new GraceString(" at ");
                          onSelf = true;
                          var call565 = callmethodChecked(this, "source", [0]);
                          var string567 = new GraceString("Mouse event on ");
                          var opresult569 = callmethodChecked(string567, "++", [1], call565);
                          var opresult571 = callmethodChecked(opresult569, "++", [1], string563);
                          var opresult573 = callmethodChecked(opresult571, "++", [1], call561);
                          var opresult575 = callmethodChecked(opresult573, "++", [1], string559);
                          return opresult575;
                        };
                        func558.paramCounts = [0];
                        obj556.methods["asString"] = func558;
                        func558.definitionLine = 580;
                        func558.definitionModule = "objectdraw";
                        setLineNumber(577);    // compilenode identifier
                        obj556.data["source"] = var_source__39__;
                        var reader_objectdraw_source576 = function() {
                          return this.data["source"];
                        };
                        reader_objectdraw_source576.def = true;
                        obj556.methods["source"] = reader_objectdraw_source576;
                        setLineNumber(579);    // compilenode call
                        onSelf = true;
                        var call577 = callmethodChecked(this, "source", [0]);
                        var call578 = callmethodChecked(call577, "element", [0]);
                        var call579 = callmethodChecked(call578, "offsetTop", [0]);
                        var call581 = callmethodChecked(var_event__39__, "pageY", [0]);
                        var diff583 = callmethodChecked(call581, "-", [1], call579);
                        setLineNumber(578);    // compilenode call
                        onSelf = true;
                        var call585 = callmethodChecked(this, "source", [0]);
                        var call586 = callmethodChecked(call585, "element", [0]);
                        var call587 = callmethodChecked(call586, "offsetLeft", [0]);
                        var call589 = callmethodChecked(var_event__39__, "pageX", [0]);
                        var diff591 = callmethodChecked(call589, "-", [1], call587);
                        var opresult593 = callmethodChecked(diff591, "@", [1], diff583);
                        obj556.data["at"] = opresult593;
                        var reader_objectdraw_at594 = function() {
                          return this.data["at"];
                        };
                        reader_objectdraw_at594.def = true;
                        obj556.methods["at"] = reader_objectdraw_at594;
                        superDepth = origSuperDepth;
                      };
                      obj_init_556.apply(obj556, []);
                      return obj556;
                    };
                    func555.confidential = true;
                    func555.paramCounts = [1, 1];
                    obj529.methods["mouseEventSource()event"] = func555;
                    func555.definitionLine = 576;
                    func555.definitionModule = "objectdraw";
                      var func595 = function(argcv) {    // method mouseEventSource(1     )event(1     )()object
                        var curarg = 1;
                        var var_source__39__ = arguments[curarg];
                        curarg++;
                        var var_event__39__ = arguments[curarg];
                        curarg++;
                        var inheritingObject = arguments[curarg++];
                        // Start argument processing
                        curarg = 1;
                        curarg++;
                        curarg++;
                        // End argument processing
                        setModuleName("objectdraw");
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var obj596 = Grace_allocObject(GraceObject, "mouseEventSource()event");
                        obj596.definitionModule = "objectdraw";
                        obj596.definitionLine = 576;
                        var inho596 = inheritingObject;
                        while (inho596.superobj) inho596 = inho596.superobj;
                        inho596.superobj = obj596;
                        obj596.data = inheritingObject.data;
                        if (inheritingObject.hasOwnProperty('_value'))
                          obj596._value = inheritingObject._value;
                        obj596.outer = this;
                        var reader_objectdraw_outer597 = function() {
                          return this.outer;
                        };
                        obj596.methods["outer"] = reader_objectdraw_outer597;
                        var obj_init_596 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj596;
                          var func598 = function(argcv) {    // method asString
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                            setModuleName("objectdraw");
                            setLineNumber(580);    // compilenode string
                            var string599 = new GraceString("");
                            onSelf = true;
                            var call601 = callmethodChecked(this, "at", [0]);
                            var string603 = new GraceString(" at ");
                            onSelf = true;
                            var call605 = callmethodChecked(this, "source", [0]);
                            var string607 = new GraceString("Mouse event on ");
                            var opresult609 = callmethodChecked(string607, "++", [1], call605);
                            var opresult611 = callmethodChecked(opresult609, "++", [1], string603);
                            var opresult613 = callmethodChecked(opresult611, "++", [1], call601);
                            var opresult615 = callmethodChecked(opresult613, "++", [1], string599);
                            return opresult615;
                          };
                          func598.paramCounts = [0];
                          obj596.methods["asString"] = func598;
                          func598.definitionLine = 580;
                          func598.definitionModule = "objectdraw";
                          setLineNumber(577);    // compilenode identifier
                          obj596.data["source"] = var_source__39__;
                          var reader_objectdraw_source616 = function() {
                            return this.data["source"];
                          };
                          reader_objectdraw_source616.def = true;
                          obj596.methods["source"] = reader_objectdraw_source616;
                          setLineNumber(579);    // compilenode call
                          onSelf = true;
                          var call617 = callmethodChecked(this, "source", [0]);
                          var call618 = callmethodChecked(call617, "element", [0]);
                          var call619 = callmethodChecked(call618, "offsetTop", [0]);
                          var call621 = callmethodChecked(var_event__39__, "pageY", [0]);
                          var diff623 = callmethodChecked(call621, "-", [1], call619);
                          setLineNumber(578);    // compilenode call
                          onSelf = true;
                          var call625 = callmethodChecked(this, "source", [0]);
                          var call626 = callmethodChecked(call625, "element", [0]);
                          var call627 = callmethodChecked(call626, "offsetLeft", [0]);
                          var call629 = callmethodChecked(var_event__39__, "pageX", [0]);
                          var diff631 = callmethodChecked(call629, "-", [1], call627);
                          var opresult633 = callmethodChecked(diff631, "@", [1], diff623);
                          obj596.data["at"] = opresult633;
                          var reader_objectdraw_at634 = function() {
                            return this.data["at"];
                          };
                          reader_objectdraw_at634.def = true;
                          obj596.methods["at"] = reader_objectdraw_at634;
                          superDepth = origSuperDepth;
                        };
                        obj_init_596.apply(inheritingObject, []);
                        return obj596;
                        };
                        func595.confidential = true;
                        obj529.methods["mouseEventSource()event()object"] = func595;
                      var func635 = function(argcv) {    // method onMouseClickDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseClickDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(584);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseClickDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("objectdraw");
                        setLineNumber(586);    // compilenode vardec
                        var var_lastDown;
                        setLineNumber(588);    // compilenode string
                        var string636 = new GraceString("mousedown");
                        var block637 = new GraceBlock(this, 588, 1);
                        setLineNumber(0);    // compilenode string
                        var string638 = new GraceString("event'");
                        var call639 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                        var call640 = callmethodChecked(call639, "new", [1], string638);
                        var call641 = callmethodChecked(var_prelude, "AndPattern", [0]);
                        var call642 = callmethodChecked(call641, "new", [2], call640, var_Foreign);
                        block637.pattern = call642;
                        setLineNumber(588);    // compilenode identifier
                        block637.paramTypes = [var_Foreign];
                        block637.real = function(var_event__39__) {
                          setLineNumber(589);    // compilenode identifier
                          var call643 = callmethodChecked(var_event__39__, "timeStamp", [0]);
                          var_lastDown = call643;
                          return GraceDone;
                        };
                        onSelf = true;
                        var call644 = callmethodChecked(this, "on()do", [1, 1], string636, block637);
                        setLineNumber(592);    // compilenode string
                        var string645 = new GraceString("click");
                        var block646 = new GraceBlock(this, 592, 1);
                        setLineNumber(0);    // compilenode string
                        var string647 = new GraceString("event'");
                        var call648 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                        var call649 = callmethodChecked(call648, "new", [1], string647);
                        var call650 = callmethodChecked(var_prelude, "AndPattern", [0]);
                        var call651 = callmethodChecked(call650, "new", [2], call649, var_Foreign);
                        block646.pattern = call651;
                        setLineNumber(592);    // compilenode identifier
                        block646.paramTypes = [var_Foreign];
                        block646.real = function(var_event__39__) {
                          var if652 = GraceDone;
                          setLineNumber(593);    // compilenode identifier
                          var call655 = callmethodChecked(var_event__39__, "timeStamp", [0]);
                          var diff657 = callmethodChecked(call655, "-", [1], var_lastDown);
                          var opresult659 = callmethodChecked(diff657, "\u2264", [1], var_maxClickTime);
                          if (Grace_isTrue(opresult659)) {
                            setLineNumber(594);    // compilenode identifier
                            onSelf = true;
                            var call660 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                            var call661 = callmethodChecked(var_f, "apply", [1], call660);
                            if652 = call661;
                          }
                          return if652;
                        };
                        onSelf = true;
                        var call662 = callmethodChecked(this, "on()do", [1, 1], string645, block646);
                        setLineNumber(592);    // return value
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call662)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseClickDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call662;
                      };
                      func635.paramTypes = [];
                      func635.paramTypes.push([]);
                      func635.paramCounts = [1];
                      obj529.methods["onMouseClickDo"] = func635;
                      func635.definitionLine = 584;
                      func635.definitionModule = "objectdraw";
                      var func663 = function(argcv) {    // method onMousePressDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMousePressDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(600);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMousePressDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("objectdraw");
                        setLineNumber(601);    // compilenode string
                        var string664 = new GraceString("mousedown");
                        onSelf = true;
                        var call665 = callmethodChecked(this, "on()withPointDo", [1, 1], string664, var_f);
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call665)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMousePressDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call665;
                      };
                      func663.paramTypes = [];
                      func663.paramTypes.push([]);
                      func663.paramCounts = [1];
                      obj529.methods["onMousePressDo"] = func663;
                      func663.definitionLine = 600;
                      func663.definitionModule = "objectdraw";
                      var func666 = function(argcv) {    // method onMouseReleaseDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseReleaseDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(605);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseReleaseDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("objectdraw");
                        setLineNumber(606);    // compilenode string
                        var string667 = new GraceString("mouseup");
                        onSelf = true;
                        var call668 = callmethodChecked(this, "on()withPointDo", [1, 1], string667, var_f);
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call668)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseReleaseDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call668;
                      };
                      func666.paramTypes = [];
                      func666.paramTypes.push([]);
                      func666.paramCounts = [1];
                      obj529.methods["onMouseReleaseDo"] = func666;
                      func666.definitionLine = 605;
                      func666.definitionModule = "objectdraw";
                      var func669 = function(argcv) {    // method onMouseMoveDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseMoveDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(610);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseMoveDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("objectdraw");
                        setLineNumber(611);    // compilenode string
                        var string670 = new GraceString("mousemove");
                        var block671 = new GraceBlock(this, 611, 1);
                        setLineNumber(1);    // compilenode identifier
                        block671.real = function(var_event__39__) {
                          var if672 = GraceDone;
                          var if673 = GraceDone;
                          setLineNumber(612);    // compilenode string
                          var string674 = new GraceString("buttons");
                          var call675 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], var_event__39__, string674);
                          if (Grace_isTrue(call675)) {
                            setLineNumber(613);    // compilenode identifier
                            var call677 = callmethodChecked(var_event__39__, "buttons", [0]);
                            var opresult679 = callmethodChecked(call677, "==", [1], new GraceNum(0));
                            if673 = opresult679;
                          } else {
                            setLineNumber(615);    // compilenode identifier
                            var call681 = callmethodChecked(var_event__39__, "which", [0]);
                            var opresult683 = callmethodChecked(call681, "==", [1], new GraceNum(0));
                            if673 = opresult683;
                          }
                          if (Grace_isTrue(if673)) {
                            setLineNumber(617);    // compilenode identifier
                            onSelf = true;
                            var call684 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                            var call685 = callmethodChecked(var_f, "apply", [1], call684);
                            if672 = call685;
                          }
                          return if672;
                        };
                        onSelf = true;
                        var call686 = callmethodChecked(this, "on()do", [1, 1], string670, block671);
                        setLineNumber(611);    // return value
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call686)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseMoveDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call686;
                      };
                      func669.paramTypes = [];
                      func669.paramTypes.push([]);
                      func669.paramCounts = [1];
                      obj529.methods["onMouseMoveDo"] = func669;
                      func669.definitionLine = 610;
                      func669.definitionModule = "objectdraw";
                      var func687 = function(argcv) {    // method onMouseDragDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseDragDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(623);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseDragDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("objectdraw");
                        setLineNumber(624);    // compilenode string
                        var string688 = new GraceString("mousemove");
                        var block689 = new GraceBlock(this, 624, 1);
                        setLineNumber(1);    // compilenode identifier
                        block689.real = function(var_event__39__) {
                          var if690 = GraceDone;
                          var if691 = GraceDone;
                          setLineNumber(625);    // compilenode string
                          var string692 = new GraceString("buttons");
                          var call693 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], var_event__39__, string692);
                          if (Grace_isTrue(call693)) {
                            setLineNumber(626);    // compilenode identifier
                            var call695 = callmethodChecked(var_event__39__, "buttons", [0]);
                            var opresult697 = callmethodChecked(call695, "==", [1], new GraceNum(1));
                            if691 = opresult697;
                          } else {
                            setLineNumber(628);    // compilenode identifier
                            var call699 = callmethodChecked(var_event__39__, "which", [0]);
                            var opresult701 = callmethodChecked(call699, "==", [1], new GraceNum(1));
                            if691 = opresult701;
                          }
                          if (Grace_isTrue(if691)) {
                            setLineNumber(630);    // compilenode identifier
                            onSelf = true;
                            var call702 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                            var call703 = callmethodChecked(var_f, "apply", [1], call702);
                            if690 = call703;
                          }
                          return if690;
                        };
                        onSelf = true;
                        var call704 = callmethodChecked(this, "on()do", [1, 1], string688, block689);
                        setLineNumber(624);    // return value
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call704)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseDragDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call704;
                      };
                      func687.paramTypes = [];
                      func687.paramTypes.push([]);
                      func687.paramCounts = [1];
                      obj529.methods["onMouseDragDo"] = func687;
                      func687.definitionLine = 623;
                      func687.definitionModule = "objectdraw";
                      var func705 = function(argcv) {    // method onMouseEnterDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnterDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(636);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseEnterDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("objectdraw");
                        setLineNumber(637);    // compilenode string
                        var string706 = new GraceString("mouseover");
                        var block707 = new GraceBlock(this, 637, 1);
                        setLineNumber(1);    // compilenode identifier
                        block707.real = function(var_event__39__) {
                          setLineNumber(638);    // compilenode identifier
                          var call708 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                          var var_from = call708;
                          var if709 = GraceDone;
                          setLineNumber(647);    // compilenode block
                          var block710 = new GraceBlock(this, 647, 0);
                          block710.real = function() {
                            onSelf = true;
                            var call711 = callmethodChecked(this, "element", [0]);
                            var call712 = callmethodChecked(call711, "contains", [1], var_from);
                            var call713 = callmethodChecked(call712, "prefix!", [0]);
                            return call713;
                          };
                          var call716 = callmethodChecked(var_dom, "noObject", [0]);
                          var opresult718 = callmethodChecked(call716, "==", [1], var_from);
                          var opresult720 = callmethodChecked(opresult718, "||", [1], block710);
                          if (Grace_isTrue(opresult720)) {
                            setLineNumber(650);    // compilenode identifier
                            onSelf = true;
                            var call721 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                            var call722 = callmethodChecked(var_f, "apply", [1], call721);
                            if709 = call722;
                          }
                          return if709;
                        };
                        onSelf = true;
                        var call723 = callmethodChecked(this, "on()do", [1, 1], string706, block707);
                        setLineNumber(637);    // return value
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call723)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseEnterDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call723;
                      };
                      func705.paramTypes = [];
                      func705.paramTypes.push([]);
                      func705.paramCounts = [1];
                      obj529.methods["onMouseEnterDo"] = func705;
                      func705.definitionLine = 636;
                      func705.definitionModule = "objectdraw";
                      var func724 = function(argcv) {    // method onMouseExitDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExitDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(656);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseExitDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("objectdraw");
                        setLineNumber(657);    // compilenode string
                        var string725 = new GraceString("mouseout");
                        var block726 = new GraceBlock(this, 657, 1);
                        setLineNumber(1);    // compilenode identifier
                        block726.real = function(var_event__39__) {
                          setLineNumber(658);    // compilenode identifier
                          var call727 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                          var var_to = call727;
                          var if728 = GraceDone;
                          setLineNumber(660);    // compilenode block
                          var block729 = new GraceBlock(this, 660, 0);
                          block729.real = function() {
                            onSelf = true;
                            var call730 = callmethodChecked(this, "element", [0]);
                            var call731 = callmethodChecked(call730, "contains", [1], var_to);
                            var call732 = callmethodChecked(call731, "prefix!", [0]);
                            return call732;
                          };
                          var call735 = callmethodChecked(var_dom, "noObject", [0]);
                          var opresult737 = callmethodChecked(call735, "==", [1], var_to);
                          var opresult739 = callmethodChecked(opresult737, "||", [1], block729);
                          if (Grace_isTrue(opresult739)) {
                            setLineNumber(661);    // compilenode identifier
                            onSelf = true;
                            var call740 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                            var call741 = callmethodChecked(var_f, "apply", [1], call740);
                            if728 = call741;
                          }
                          return if728;
                        };
                        onSelf = true;
                        var call742 = callmethodChecked(this, "on()do", [1, 1], string725, block726);
                        setLineNumber(657);    // return value
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call742)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseExitDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call742;
                      };
                      func724.paramTypes = [];
                      func724.paramTypes.push([]);
                      func724.paramCounts = [1];
                      obj529.methods["onMouseExitDo"] = func724;
                      func724.definitionLine = 656;
                      func724.definitionModule = "objectdraw";
                      var func743 = function(argcv) {    // method eventSource(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_source__39__ = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for eventSource(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(668);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                                    callmethod(var_Component, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("objectdraw");
                        var obj744 = Grace_allocObject(GraceObject, "eventSource");
                        obj744.definitionModule = "objectdraw";
                        obj744.definitionLine = 668;
                        obj744.outer = this;
                        var reader_objectdraw_outer745 = function() {
                          return this.outer;
                        };
                        obj744.methods["outer"] = reader_objectdraw_outer745;
                        var obj_init_744 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj744;
                          var func746 = function(argcv) {    // method asString
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                            setModuleName("objectdraw");
                            setLineNumber(674);    // compilenode string
                            var string747 = new GraceString("");
                            onSelf = true;
                            var call749 = callmethodChecked(this, "source", [0]);
                            var string751 = new GraceString("Event on ");
                            var opresult753 = callmethodChecked(string751, "++", [1], call749);
                            var opresult755 = callmethodChecked(opresult753, "++", [1], string747);
                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult755)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method asString does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            return opresult755;
                          };
                          func746.paramCounts = [0];
                          obj744.methods["asString"] = func746;
                          func746.definitionLine = 673;
                          func746.definitionModule = "objectdraw";
                          setLineNumber(671);    // compilenode identifier
                          obj744.data["source"] = var_source__39__;
                          var reader_objectdraw_source756 = function() {
                            return this.data["source"];
                          };
                          reader_objectdraw_source756.def = true;
                          obj744.methods["source"] = reader_objectdraw_source756;
                          if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("value of def 'source' is not of type Component"));
                          superDepth = origSuperDepth;
                        };
                        obj_init_744.apply(obj744, []);
                        setLineNumber(668);    // return value
                        if (!Grace_isTrue(callmethod(var_Event, "match", [1], obj744)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method eventSource(1) does not have " + 
                                    callmethod(var_Event, "asString", [0])._value + "."));
                        return obj744;
                      };
                      func743.paramTypes = [];
                      func743.paramTypes.push([]);
                      func743.paramCounts = [1];
                      obj529.methods["eventSource"] = func743;
                      func743.definitionLine = 668;
                      func743.definitionModule = "objectdraw";
                        var func757 = function(argcv) {    // method eventSource(1     )()object
                          var curarg = 1;
                          var var_source__39__ = arguments[curarg];
                          curarg++;
                          var inheritingObject = arguments[curarg++];
                          // Start argument processing
                          curarg = 1;
                          if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                                      callmethod(var_Component, "asString", [0])._value + "."));
                          curarg++;
                          // End argument processing
                          setModuleName("objectdraw");
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var obj758 = Grace_allocObject(GraceObject, "eventSource");
                          obj758.definitionModule = "objectdraw";
                          obj758.definitionLine = 668;
                          var inho758 = inheritingObject;
                          while (inho758.superobj) inho758 = inho758.superobj;
                          inho758.superobj = obj758;
                          obj758.data = inheritingObject.data;
                          if (inheritingObject.hasOwnProperty('_value'))
                            obj758._value = inheritingObject._value;
                          obj758.outer = this;
                          var reader_objectdraw_outer759 = function() {
                            return this.outer;
                          };
                          obj758.methods["outer"] = reader_objectdraw_outer759;
                          var obj_init_758 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj758;
                            var func760 = function(argcv) {    // method asString
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                              setModuleName("objectdraw");
                              setLineNumber(674);    // compilenode string
                              var string761 = new GraceString("");
                              onSelf = true;
                              var call763 = callmethodChecked(this, "source", [0]);
                              var string765 = new GraceString("Event on ");
                              var opresult767 = callmethodChecked(string765, "++", [1], call763);
                              var opresult769 = callmethodChecked(opresult767, "++", [1], string761);
                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult769)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("result of method asString does not have " + 
                                          callmethod(var_String, "asString", [0])._value + "."));
                              return opresult769;
                            };
                            func760.paramCounts = [0];
                            obj758.methods["asString"] = func760;
                            func760.definitionLine = 673;
                            func760.definitionModule = "objectdraw";
                            setLineNumber(671);    // compilenode identifier
                            obj758.data["source"] = var_source__39__;
                            var reader_objectdraw_source770 = function() {
                              return this.data["source"];
                            };
                            reader_objectdraw_source770.def = true;
                            obj758.methods["source"] = reader_objectdraw_source770;
                            if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("value of def 'source' is not of type Component"));
                            superDepth = origSuperDepth;
                          };
                          obj_init_758.apply(inheritingObject, []);
                          return obj758;
                          };
                          func757.paramTypes = [];
                          func757.paramTypes.push([]);
                          obj529.methods["eventSource()object"] = func757;
                        var func771 = function(argcv) {    // method keyEventSource(1)event(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_source__39__ = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for keyEventSource (arg list 1) of keyEventSource(1)event(1)"));
                          var var_event__39__ = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of keyEventSource(1)event(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(678);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                                      callmethod(var_Component, "asString", [0])._value + "."));
                          curarg++;
                          if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                                      callmethod(var_Foreign, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("objectdraw");
                          var obj772 = Grace_allocObject(null, "keyEventSource()event");
                          obj772.definitionModule = "objectdraw";
                          obj772.definitionLine = 678;
                          obj772.outer = this;
                          var reader_objectdraw_outer773 = function() {
                            return this.outer;
                          };
                          obj772.methods["outer"] = reader_objectdraw_outer773;
                          var obj_init_772 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj772;
                            var func774 = function(argcv) {    // method asString
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                              setModuleName("objectdraw");
                              setLineNumber(686);    // compilenode string
                              var string775 = new GraceString("");
                              onSelf = true;
                              var call777 = callmethodChecked(this, "code", [0]);
                              var string779 = new GraceString(" for key-code ");
                              onSelf = true;
                              var call781 = callmethodChecked(this, "source", [0]);
                              var string783 = new GraceString("Event on ");
                              var opresult785 = callmethodChecked(string783, "++", [1], call781);
                              var opresult787 = callmethodChecked(opresult785, "++", [1], string779);
                              var opresult789 = callmethodChecked(opresult787, "++", [1], call777);
                              var opresult791 = callmethodChecked(opresult789, "++", [1], string775);
                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult791)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("result of method asString does not have " + 
                                          callmethod(var_String, "asString", [0])._value + "."));
                              return opresult791;
                            };
                            func774.paramCounts = [0];
                            obj772.methods["asString"] = func774;
                            func774.definitionLine = 685;
                            func774.definitionModule = "objectdraw";
                            setLineNumber(680);    // compilenode call
                            var call792 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call793 = callmethodChecked(call792, "eventSource()object", [1, 1], var_source__39__, this);
                            obj772.superobj = call793;
                            if (call793.data) obj772.data = call793.data;
                            if (call793.hasOwnProperty('_value'))
                                obj772._value = call793._value;
                            setLineNumber(681);    // compilenode identifier
                            var call794 = callmethodChecked(var_event__39__, "which", [0]);
                            obj772.data["code"] = call794;
                            var reader_objectdraw_code795 = function() {
                              return this.data["code"];
                            };
                            reader_objectdraw_code795.def = true;
                            obj772.methods["code"] = reader_objectdraw_code795;
                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call794)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("value of def 'code' is not of type Number"));
                            superDepth = origSuperDepth;
                          };
                          obj_init_772.apply(obj772, []);
                          setLineNumber(678);    // return value
                          if (!Grace_isTrue(callmethod(var_KeyEvent, "match", [1], obj772)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method keyEventSource(1)event(1) does not have " + 
                                      callmethod(var_KeyEvent, "asString", [0])._value + "."));
                          return obj772;
                        };
                        func771.paramTypes = [];
                        func771.paramTypes.push([]);
                        func771.paramTypes.push([]);
                        func771.paramCounts = [1, 1];
                        obj529.methods["keyEventSource()event"] = func771;
                        func771.definitionLine = 678;
                        func771.definitionModule = "objectdraw";
                          var func796 = function(argcv) {    // method keyEventSource(1     )event(1     )()object
                            var curarg = 1;
                            var var_source__39__ = arguments[curarg];
                            curarg++;
                            var var_event__39__ = arguments[curarg];
                            curarg++;
                            var inheritingObject = arguments[curarg++];
                            // Start argument processing
                            curarg = 1;
                            if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                                        callmethod(var_Component, "asString", [0])._value + "."));
                            curarg++;
                            if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                                        callmethod(var_Foreign, "asString", [0])._value + "."));
                            curarg++;
                            // End argument processing
                            setModuleName("objectdraw");
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var obj797 = Grace_allocObject(null, "keyEventSource()event");
                            obj797.definitionModule = "objectdraw";
                            obj797.definitionLine = 678;
                            var inho797 = inheritingObject;
                            while (inho797.superobj) inho797 = inho797.superobj;
                            inho797.superobj = obj797;
                            obj797.data = inheritingObject.data;
                            if (inheritingObject.hasOwnProperty('_value'))
                              obj797._value = inheritingObject._value;
                            obj797.outer = this;
                            var reader_objectdraw_outer798 = function() {
                              return this.outer;
                            };
                            obj797.methods["outer"] = reader_objectdraw_outer798;
                            var obj_init_797 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj797;
                              var func799 = function(argcv) {    // method asString
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                setModuleName("objectdraw");
                                setLineNumber(686);    // compilenode string
                                var string800 = new GraceString("");
                                onSelf = true;
                                var call802 = callmethodChecked(this, "code", [0]);
                                var string804 = new GraceString(" for key-code ");
                                onSelf = true;
                                var call806 = callmethodChecked(this, "source", [0]);
                                var string808 = new GraceString("Event on ");
                                var opresult810 = callmethodChecked(string808, "++", [1], call806);
                                var opresult812 = callmethodChecked(opresult810, "++", [1], string804);
                                var opresult814 = callmethodChecked(opresult812, "++", [1], call802);
                                var opresult816 = callmethodChecked(opresult814, "++", [1], string800);
                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult816)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method asString does not have " + 
                                            callmethod(var_String, "asString", [0])._value + "."));
                                return opresult816;
                              };
                              func799.paramCounts = [0];
                              obj797.methods["asString"] = func799;
                              func799.definitionLine = 685;
                              func799.definitionModule = "objectdraw";
                              setLineNumber(680);    // compilenode call
                              var call817 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call818 = callmethodChecked(call817, "eventSource()object", [1, 1], var_source__39__, this);
                              obj797.superobj = call818;
                              if (call818.data) obj797.data = call818.data;
                              if (call818.hasOwnProperty('_value'))
                                  obj797._value = call818._value;
                              setLineNumber(681);    // compilenode identifier
                              var call819 = callmethodChecked(var_event__39__, "which", [0]);
                              obj797.data["code"] = call819;
                              var reader_objectdraw_code820 = function() {
                                return this.data["code"];
                              };
                              reader_objectdraw_code820.def = true;
                              obj797.methods["code"] = reader_objectdraw_code820;
                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call819)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("value of def 'code' is not of type Number"));
                              superDepth = origSuperDepth;
                            };
                            obj_init_797.apply(inheritingObject, []);
                            return obj797;
                            };
                            func796.paramTypes = [];
                            func796.paramTypes.push([]);
                            func796.paramTypes.push([]);
                            obj529.methods["keyEventSource()event()object"] = func796;
                          var func821 = function(argcv) {    // method on(1)withKeyDo(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_kind = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)withKeyDo(1)"));
                            var var_f = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withKeyDo (arg list 2) of on(1)withKeyDo(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(692);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            curarg++;
                            setLineNumber(693);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in withKeyDo (arg list 2), which corresponds to parameter f, does not have " + 
                                        callmethod(var_KeyResponse, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("objectdraw");
                            setLineNumber(694);    // compilenode block
                            var block822 = new GraceBlock(this, 694, 1);
                            setLineNumber(1);    // compilenode identifier
                            block822.real = function(var_event__39__) {
                              setLineNumber(695);    // compilenode identifier
                              onSelf = true;
                              var call823 = callmethodChecked(this, "keyEventSource()event", [1, 1], this, var_event__39__);
                              var call824 = callmethodChecked(var_f, "apply", [1], call823);
                              return call824;
                            };
                            onSelf = true;
                            var call825 = callmethodChecked(this, "on()do", [1, 1], var_kind, block822);
                            setLineNumber(694);    // return value
                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call825)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method on(1)withKeyDo(1) does not have " + 
                                        callmethod(var_Done, "asString", [0])._value + "."));
                            return call825;
                          };
                          func821.paramTypes = [];
                          func821.paramTypes.push([type_String, "kind"]);
                          func821.paramTypes.push([]);
                          func821.confidential = true;
                          func821.paramCounts = [1, 1];
                          obj529.methods["on()withKeyDo"] = func821;
                          func821.definitionLine = 692;
                          func821.definitionModule = "objectdraw";
                          var func826 = function(argcv) {    // method onKeyPressDo(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_f = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyPressDo(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(700);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in onKeyPressDo (arg list 1), which corresponds to parameter f, does not have " + 
                                        callmethod(var_KeyResponse, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("objectdraw");
                            setLineNumber(701);    // compilenode string
                            var string827 = new GraceString("keydown");
                            onSelf = true;
                            var call828 = callmethodChecked(this, "on()withKeyDo", [1, 1], string827, var_f);
                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call828)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method onKeyPressDo(1) does not have " + 
                                        callmethod(var_Done, "asString", [0])._value + "."));
                            return call828;
                          };
                          func826.paramTypes = [];
                          func826.paramTypes.push([]);
                          func826.paramCounts = [1];
                          obj529.methods["onKeyPressDo"] = func826;
                          func826.definitionLine = 700;
                          func826.definitionModule = "objectdraw";
                          var func829 = function(argcv) {    // method onKeyReleaseDo(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_f = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyReleaseDo(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(705);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in onKeyReleaseDo (arg list 1), which corresponds to parameter f, does not have " + 
                                        callmethod(var_KeyResponse, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("objectdraw");
                            setLineNumber(706);    // compilenode string
                            var string830 = new GraceString("keyup");
                            onSelf = true;
                            var call831 = callmethodChecked(this, "on()withKeyDo", [1, 1], string830, var_f);
                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call831)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method onKeyReleaseDo(1) does not have " + 
                                        callmethod(var_Done, "asString", [0])._value + "."));
                            return call831;
                          };
                          func829.paramTypes = [];
                          func829.paramTypes.push([]);
                          func829.paramCounts = [1];
                          obj529.methods["onKeyReleaseDo"] = func829;
                          func829.definitionLine = 705;
                          func829.definitionModule = "objectdraw";
                          var func832 = function(argcv) {    // method onKeyTypeDo(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_f = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyTypeDo(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(710);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in onKeyTypeDo (arg list 1), which corresponds to parameter f, does not have " + 
                                        callmethod(var_KeyResponse, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("objectdraw");
                            setLineNumber(711);    // compilenode string
                            var string833 = new GraceString("keypress");
                            onSelf = true;
                            var call834 = callmethodChecked(this, "on()withKeyDo", [1, 1], string833, var_f);
                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call834)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method onKeyTypeDo(1) does not have " + 
                                        callmethod(var_Done, "asString", [0])._value + "."));
                            return call834;
                          };
                          func832.paramTypes = [];
                          func832.paramTypes.push([]);
                          func832.paramCounts = [1];
                          obj529.methods["onKeyTypeDo"] = func832;
                          func832.definitionLine = 710;
                          func832.definitionModule = "objectdraw";
                          var func835 = function(argcv) {    // method isFlexible
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isFlexible"));
                            setModuleName("objectdraw");
                            setLineNumber(716);    // compilenode call
                            onSelf = true;
                            var call837 = callmethodChecked(this, "element", [0]);
                            var call838 = callmethodChecked(call837, "style", [0]);
                            var call839 = callmethodChecked(call838, "flexGrow", [0]);
                            var call840 = callmethodChecked(call839, "asNumber", [0]);
                            var opresult842 = callmethodChecked(call840, ">", [1], new GraceNum(0));
                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult842)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method isFlexible does not have " + 
                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                            return opresult842;
                          };
                          func835.paramCounts = [0];
                          obj529.methods["isFlexible"] = func835;
                          func835.definitionLine = 715;
                          func835.definitionModule = "objectdraw";
                          var func843 = function(argcv) {    // method flexible:=(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_value = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for flexible:=(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(720);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in flexible:= (arg list 1), which corresponds to parameter value, does not have " + 
                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("objectdraw");
                            var if844 = GraceDone;
                            setLineNumber(721);    // compilenode identifier
                            if (Grace_isTrue(var_value)) {
                              setLineNumber(722);    // compilenode num
                              if844 = new GraceNum(1);
                            } else {
                              setLineNumber(724);    // compilenode num
                              if844 = new GraceNum(0);
                            }
                            setLineNumber(721);    // compilenode call
                            onSelf = true;
                            var call845 = callmethodChecked(this, "element", [0]);
                            var call846 = callmethodChecked(call845, "style", [0]);
                            var call847 = callmethodChecked(call846, "flexGrow:=", [1], if844);
                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call847)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method flexible:=(1) does not have " + 
                                        callmethod(var_Done, "asString", [0])._value + "."));
                            return call847;
                          };
                          func843.paramTypes = [];
                          func843.paramTypes.push([type_Boolean, "value"]);
                          func843.paramCounts = [1];
                          obj529.methods["flexible:="] = func843;
                          func843.definitionLine = 720;
                          func843.definitionModule = "objectdraw";
                          var func848 = function(argcv) {    // method asString
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                            setModuleName("objectdraw");
                            setLineNumber(730);    // compilenode string
                            var string849 = new GraceString("a component");
                            if (!Grace_isTrue(callmethod(var_String, "match", [1], string849)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method asString does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            return string849;
                          };
                          func848.paramCounts = [0];
                          obj529.methods["asString"] = func848;
                          func848.definitionLine = 729;
                          func848.definitionModule = "objectdraw";
                          setLineNumber(543);    // compilenode identifier
                          obj529.data["element"] = var_element__39__;
                          var reader_objectdraw_element850 = function() {
                            return this.data["element"];
                          };
                          reader_objectdraw_element850.def = true;
                          obj529.methods["element"] = reader_objectdraw_element850;
                          superDepth = origSuperDepth;
                        };
                        obj_init_529.apply(inheritingObject, []);
                        return obj529;
                        };
                        this.methods["componentFromElement()object"] = func528;
                      setLineNumber(734);    // compilenode method
                      var func851 = function(argcv) {    // method componentOfElementType(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_tagName = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for componentOfElementType(1)"));
                        // Start argument checking
                        curarg = 1;
                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in componentOfElementType (arg list 1), which corresponds to parameter tagName, does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("objectdraw");
                        var obj852 = Grace_allocObject(null, "objectdraw.componentOfElementType");
                        obj852.definitionModule = "objectdraw";
                        obj852.definitionLine = 734;
                        obj852.outer = this;
                        var reader_objectdraw_outer853 = function() {
                          return this.outer;
                        };
                        obj852.methods["outer"] = reader_objectdraw_outer853;
                        var obj_init_852 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj852;
                          setLineNumber(737);    // compilenode identifier
                          var call854 = callmethodChecked(var_document, "createElement", [1], var_tagName);
                          var call855 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call856 = callmethodChecked(call855, "componentFromElement()object", [1, 1], call854, this);
                          obj852.superobj = call856;
                          if (call856.data) obj852.data = call856.data;
                          if (call856.hasOwnProperty('_value'))
                              obj852._value = call856._value;
                          superDepth = origSuperDepth;
                        };
                        obj_init_852.apply(obj852, []);
                        setLineNumber(734);    // return value
                        if (!Grace_isTrue(callmethod(var_Component, "match", [1], obj852)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method componentOfElementType(1) does not have " + 
                                    callmethod(var_Component, "asString", [0])._value + "."));
                        return obj852;
                      };
                      func851.paramTypes = [];
                      func851.paramTypes.push([type_String, "tagName"]);
                      func851.paramCounts = [1];
                      this.methods["componentOfElementType"] = func851;
                      func851.definitionLine = 734;
                      func851.definitionModule = "objectdraw";
                        var func857 = function(argcv) {    // method componentOfElementType(1     )()object
                          var curarg = 1;
                          var var_tagName = arguments[curarg];
                          curarg++;
                          var inheritingObject = arguments[curarg++];
                          // Start argument processing
                          curarg = 1;
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in componentOfElementType (arg list 1), which corresponds to parameter tagName, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          // End argument processing
                          setModuleName("objectdraw");
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var obj858 = Grace_allocObject(null, "componentOfElementType");
                          obj858.definitionModule = "objectdraw";
                          obj858.definitionLine = 734;
                          var inho858 = inheritingObject;
                          while (inho858.superobj) inho858 = inho858.superobj;
                          inho858.superobj = obj858;
                          obj858.data = inheritingObject.data;
                          if (inheritingObject.hasOwnProperty('_value'))
                            obj858._value = inheritingObject._value;
                          obj858.outer = this;
                          var reader_objectdraw_outer859 = function() {
                            return this.outer;
                          };
                          obj858.methods["outer"] = reader_objectdraw_outer859;
                          var obj_init_858 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj858;
                            setLineNumber(737);    // compilenode identifier
                            var call860 = callmethodChecked(var_document, "createElement", [1], var_tagName);
                            var call861 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call862 = callmethodChecked(call861, "componentFromElement()object", [1, 1], call860, this);
                            obj858.superobj = call862;
                            if (call862.data) obj858.data = call862.data;
                            if (call862.hasOwnProperty('_value'))
                                obj858._value = call862._value;
                            superDepth = origSuperDepth;
                          };
                          obj_init_858.apply(inheritingObject, []);
                          return obj858;
                          };
                          func857.paramTypes = [];
                          func857.paramTypes.push([type_String, "tagName"]);
                          this.methods["componentOfElementType()object"] = func857;
                        setLineNumber(742);    // compilenode method
                        var func863 = function(argcv) {    // method containerOfElementType(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_tagName = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for containerOfElementType(1)"));
                          // Start argument checking
                          curarg = 1;
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in containerOfElementType (arg list 1), which corresponds to parameter tagName, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("objectdraw");
                          var obj864 = Grace_allocObject(null, "objectdraw.containerOfElementType");
                          obj864.definitionModule = "objectdraw";
                          obj864.definitionLine = 742;
                          obj864.outer = this;
                          var reader_objectdraw_outer865 = function() {
                            return this.outer;
                          };
                          obj864.methods["outer"] = reader_objectdraw_outer865;
                          var obj_init_864 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj864;
                            setLineNumber(743);    // compilenode identifier
                            var call866 = callmethodChecked(var_document, "createElement", [1], var_tagName);
                            var call867 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call868 = callmethodChecked(call867, "containerFromElement()object", [1, 1], call866, this);
                            obj864.superobj = call868;
                            if (call868.data) obj864.data = call868.data;
                            if (call868.hasOwnProperty('_value'))
                                obj864._value = call868._value;
                            superDepth = origSuperDepth;
                          };
                          obj_init_864.apply(obj864, []);
                          setLineNumber(742);    // return value
                          if (!Grace_isTrue(callmethod(var_Component, "match", [1], obj864)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method containerOfElementType(1) does not have " + 
                                      callmethod(var_Component, "asString", [0])._value + "."));
                          return obj864;
                        };
                        func863.paramTypes = [];
                        func863.paramTypes.push([type_String, "tagName"]);
                        func863.paramCounts = [1];
                        this.methods["containerOfElementType"] = func863;
                        func863.definitionLine = 742;
                        func863.definitionModule = "objectdraw";
                          var func869 = function(argcv) {    // method containerOfElementType(1     )()object
                            var curarg = 1;
                            var var_tagName = arguments[curarg];
                            curarg++;
                            var inheritingObject = arguments[curarg++];
                            // Start argument processing
                            curarg = 1;
                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in containerOfElementType (arg list 1), which corresponds to parameter tagName, does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            curarg++;
                            // End argument processing
                            setModuleName("objectdraw");
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var obj870 = Grace_allocObject(null, "containerOfElementType");
                            obj870.definitionModule = "objectdraw";
                            obj870.definitionLine = 742;
                            var inho870 = inheritingObject;
                            while (inho870.superobj) inho870 = inho870.superobj;
                            inho870.superobj = obj870;
                            obj870.data = inheritingObject.data;
                            if (inheritingObject.hasOwnProperty('_value'))
                              obj870._value = inheritingObject._value;
                            obj870.outer = this;
                            var reader_objectdraw_outer871 = function() {
                              return this.outer;
                            };
                            obj870.methods["outer"] = reader_objectdraw_outer871;
                            var obj_init_870 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj870;
                              setLineNumber(743);    // compilenode identifier
                              var call872 = callmethodChecked(var_document, "createElement", [1], var_tagName);
                              var call873 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call874 = callmethodChecked(call873, "containerFromElement()object", [1, 1], call872, this);
                              obj870.superobj = call874;
                              if (call874.data) obj870.data = call874.data;
                              if (call874.hasOwnProperty('_value'))
                                  obj870._value = call874._value;
                              superDepth = origSuperDepth;
                            };
                            obj_init_870.apply(inheritingObject, []);
                            return obj870;
                            };
                            func869.paramTypes = [];
                            func869.paramTypes.push([type_String, "tagName"]);
                            this.methods["containerOfElementType()object"] = func869;
                          setLineNumber(747);    // compilenode method
                          var func875 = function(argcv) {    // method containerFromElement(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_element__39__ = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for containerFromElement(1)"));
                            setModuleName("objectdraw");
                            var obj876 = Grace_allocObject(null, "objectdraw.containerFromElement");
                            obj876.definitionModule = "objectdraw";
                            obj876.definitionLine = 747;
                            obj876.outer = this;
                            var reader_objectdraw_outer877 = function() {
                              return this.outer;
                            };
                            obj876.methods["outer"] = reader_objectdraw_outer877;
                            var obj_init_876 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj876;
                              var func878 = function(argcv) {    // method size
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                setModuleName("objectdraw");
                                setLineNumber(754);    // compilenode call
                                onSelf = true;
                                var call879 = callmethodChecked(this, "children", [0]);
                                var call880 = callmethodChecked(call879, "size", [0]);
                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], call880)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method size does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                return call880;
                              };
                              func878.paramCounts = [0];
                              obj876.methods["size"] = func878;
                              func878.definitionLine = 753;
                              func878.definitionModule = "objectdraw";
                              var func881 = function(argcv) {    // method isEmpty
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEmpty"));
                                setModuleName("objectdraw");
                                setLineNumber(759);    // compilenode call
                                onSelf = true;
                                var call883 = callmethodChecked(this, "size", [0]);
                                var opresult885 = callmethodChecked(call883, "==", [1], new GraceNum(0));
                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult885)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method isEmpty does not have " + 
                                            callmethod(var_Boolean, "asString", [0])._value + "."));
                                return opresult885;
                              };
                              func881.paramCounts = [0];
                              obj876.methods["isEmpty"] = func881;
                              func881.definitionLine = 758;
                              func881.definitionModule = "objectdraw";
                              var func886 = function(argcv) {    // method at(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_index = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for at(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(763);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in at (arg list 1), which corresponds to parameter index, does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("objectdraw");
                                var if887 = GraceDone;
                                setLineNumber(764);    // compilenode call
                                onSelf = true;
                                var call888 = callmethodChecked(this, "size", [0]);
                                var opresult891 = callmethodChecked(var_index, ">", [1], call888);
                                var opresult895 = callmethodChecked(var_index, "<", [1], new GraceNum(1));
                                var opresult897 = callmethodChecked(opresult895, "||", [1], opresult891);
                                if (Grace_isTrue(opresult897)) {
                                  setLineNumber(765);    // compilenode call
                                  var call898 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call899 = callmethodChecked(call898, "collections", [0]);
                                  var call900 = callmethodChecked(call899, "BoundsError", [0]);
                                  var call901 = callmethodChecked(call900, "raiseForIndex", [1], var_index);
                                  if887 = call901;
                                }
                                setLineNumber(768);    // compilenode call
                                onSelf = true;
                                var call902 = callmethodChecked(this, "children", [0]);
                                var call903 = callmethodChecked(call902, "at", [1], var_index);
                                if (!Grace_isTrue(callmethod(var_Component, "match", [1], call903)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method at(1) does not have " + 
                                            callmethod(var_Component, "asString", [0])._value + "."));
                                return call903;
                              };
                              func886.paramTypes = [];
                              func886.paramTypes.push([type_Number, "index"]);
                              func886.paramCounts = [1];
                              obj876.methods["at"] = func886;
                              func886.definitionLine = 763;
                              func886.definitionModule = "objectdraw";
                              var func904 = function(argcv) {    // method at(1)put(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_index = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for at (arg list 1) of at(1)put(1)"));
                                var var_aComponent = arguments[curarg];
                                curarg++;
                                if (argcv[1] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for put (arg list 2) of at(1)put(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(772);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in at (arg list 1), which corresponds to parameter index, does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in put (arg list 2), which corresponds to parameter aComponent, does not have " + 
                                            callmethod(var_Component, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("objectdraw");
                                var if905 = GraceDone;
                                setLineNumber(773);    // compilenode call
                                onSelf = true;
                                var call907 = callmethodChecked(this, "size", [0]);
                                var opresult909 = callmethodChecked(call907, "+", [1], new GraceNum(1));
                                var opresult912 = callmethodChecked(var_index, ">", [1], opresult909);
                                var opresult916 = callmethodChecked(var_index, "<", [1], new GraceNum(1));
                                var opresult918 = callmethodChecked(opresult916, "||", [1], opresult912);
                                if (Grace_isTrue(opresult918)) {
                                  setLineNumber(774);    // compilenode call
                                  var call919 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call920 = callmethodChecked(call919, "BoundsError", [0]);
                                  var call921 = callmethodChecked(call920, "raiseForIndex", [1], var_index);
                                  if905 = call921;
                                }
                                var if922 = GraceDone;
                                setLineNumber(777);    // compilenode call
                                onSelf = true;
                                var call924 = callmethodChecked(this, "size", [0]);
                                var opresult926 = callmethodChecked(call924, "+", [1], new GraceNum(1));
                                var opresult929 = callmethodChecked(var_index, "==", [1], opresult926);
                                if (Grace_isTrue(opresult929)) {
                                  setLineNumber(778);    // compilenode identifier
                                  var call930 = callmethodChecked(var_aComponent, "element", [0]);
                                  onSelf = true;
                                  var call931 = callmethodChecked(this, "element", [0]);
                                  var call932 = callmethodChecked(call931, "appendChild", [1], call930);
                                  if922 = call932;
                                } else {
                                  setLineNumber(780);    // compilenode identifier
                                  var call933 = callmethodChecked(var_aComponent, "element", [0]);
                                  onSelf = true;
                                  var call934 = callmethodChecked(this, "children", [0]);
                                  var call935 = callmethodChecked(call934, "at", [1], var_index);
                                  var call936 = callmethodChecked(call935, "element", [0]);
                                  onSelf = true;
                                  var call937 = callmethodChecked(this, "element", [0]);
                                  var call938 = callmethodChecked(call937, "insertBefore", [2], call933, call936);
                                  if922 = call938;
                                }
                                setLineNumber(783);    // compilenode call
                                onSelf = true;
                                var call939 = callmethodChecked(this, "children", [0]);
                                var call940 = callmethodChecked(call939, "at()put", [1, 1], var_index, var_aComponent);
                                setLineNumber(785);    // return value
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method at(1)put(1) does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return var_done;
                              };
                              func904.paramTypes = [];
                              func904.paramTypes.push([type_Number, "index"]);
                              func904.paramTypes.push([]);
                              func904.paramCounts = [1, 1];
                              obj876.methods["at()put"] = func904;
                              func904.definitionLine = 772;
                              func904.definitionModule = "objectdraw";
                              var func941 = function(argcv) {    // method append(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_aComponent = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for append(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(789);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in append (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                            callmethod(var_Component, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("objectdraw");
                                setLineNumber(790);    // compilenode identifier
                                var call942 = callmethodChecked(var_aComponent, "element", [0]);
                                onSelf = true;
                                var call943 = callmethodChecked(this, "element", [0]);
                                var call944 = callmethodChecked(call943, "appendChild", [1], call942);
                                setLineNumber(792);    // compilenode call
                                onSelf = true;
                                var call945 = callmethodChecked(this, "children", [0]);
                                var call946 = callmethodChecked(call945, "push", [1], var_aComponent);
                                setLineNumber(794);    // return value
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method append(1) does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return var_done;
                              };
                              func941.paramTypes = [];
                              func941.paramTypes.push([]);
                              func941.paramCounts = [1];
                              obj876.methods["append"] = func941;
                              func941.definitionLine = 789;
                              func941.definitionModule = "objectdraw";
                              var func947 = function(argcv) {    // method prepend(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_aComponent = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for prepend(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(798);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in prepend (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                            callmethod(var_Component, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("objectdraw");
                                var if948 = GraceDone;
                                setLineNumber(799);    // compilenode call
                                onSelf = true;
                                var call949 = callmethodChecked(this, "isEmpty", [0]);
                                if (Grace_isTrue(call949)) {
                                  setLineNumber(800);    // compilenode identifier
                                  var call950 = callmethodChecked(var_aComponent, "element", [0]);
                                  onSelf = true;
                                  var call951 = callmethodChecked(this, "element", [0]);
                                  var call952 = callmethodChecked(call951, "appendChild", [1], call950);
                                  if948 = call952;
                                } else {
                                  setLineNumber(802);    // compilenode identifier
                                  var call953 = callmethodChecked(var_aComponent, "element", [0]);
                                  onSelf = true;
                                  var call954 = callmethodChecked(this, "element", [0]);
                                  var call955 = callmethodChecked(call954, "firstChild", [0]);
                                  onSelf = true;
                                  var call956 = callmethodChecked(this, "element", [0]);
                                  var call957 = callmethodChecked(call956, "insertBefore", [2], call953, call955);
                                  if948 = call957;
                                }
                                setLineNumber(805);    // compilenode call
                                onSelf = true;
                                var call958 = callmethodChecked(this, "children", [0]);
                                var call959 = callmethodChecked(call958, "unshift", [1], var_aComponent);
                                setLineNumber(807);    // return value
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method prepend(1) does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return var_done;
                              };
                              func947.paramTypes = [];
                              func947.paramTypes.push([]);
                              func947.paramCounts = [1];
                              obj876.methods["prepend"] = func947;
                              func947.definitionLine = 798;
                              func947.definitionModule = "objectdraw";
                              var func960 = function(argcv) {    // method do(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_f = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(811);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in do (arg list 1), which corresponds to parameter f, does not have " + 
                                            callmethod(var_Procedure, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("objectdraw");
                                setLineNumber(812);    // compilenode call
                                onSelf = true;
                                var call961 = callmethodChecked(this, "children", [0]);
                                var block962 = new GraceBlock(this, 812, 1);
                                setLineNumber(0);    // compilenode string
                                var string963 = new GraceString("aComponent");
                                var call964 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                var call965 = callmethodChecked(call964, "new", [1], string963);
                                var call966 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                var call967 = callmethodChecked(call966, "new", [2], call965, var_Component);
                                block962.pattern = call967;
                                setLineNumber(812);    // compilenode identifier
                                block962.paramTypes = [var_Component];
                                block962.real = function(var_aComponent) {
                                  setLineNumber(813);    // compilenode identifier
                                  var call968 = callmethodChecked(var_f, "apply", [1], var_aComponent);
                                  return call968;
                                };
                                var call969 = callmethodChecked(var_prelude, "for()do", [1, 1], call961, block962);
                                setLineNumber(812);    // return value
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call969)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method do(1) does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return call969;
                              };
                              func960.paramCounts = [1];
                              obj876.methods["do"] = func960;
                              func960.definitionLine = 811;
                              func960.definitionModule = "objectdraw";
                              var func970 = function(argcv) {    // method fold(1)startingWith(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_f = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fold (arg list 1) of fold(1)startingWith(1)"));
                                var var_initial = arguments[curarg];
                                curarg++;
                                if (argcv[1] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startingWith (arg list 2) of fold(1)startingWith(1)"));
                                // Start type arguments
                                var var_T = var_Unknown;
                                if (argcv.length == 3) {
                                  if (argcv[2] !== 1) {
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, 
                                        new GraceString("wrong number of type arguments for fold(1)startingWith(1)"));
                                  }
                                  var_T = arguments[curarg++];
                                }
                                // End type arguments
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(819);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Function2, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in fold (arg list 1), which corresponds to parameter f, does not have " + 
                                            callmethod(var_Function2, "asString", [0])._value + "."));
                                curarg++;
                                setLineNumber(820);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_T, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in startingWith (arg list 2), which corresponds to parameter initial, does not have " + 
                                            callmethod(var_T, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("objectdraw");
                                setLineNumber(821);    // compilenode identifier
                                var var_value = var_initial;
                                if (!Grace_isTrue(callmethod(var_T, "match", [1], var_value)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("initial value of var 'value' is not of type T"));
                                setLineNumber(823);    // compilenode call
                                onSelf = true;
                                var call971 = callmethodChecked(this, "children", [0]);
                                var block972 = new GraceBlock(this, 823, 1);
                                setLineNumber(0);    // compilenode string
                                var string973 = new GraceString("aComponent");
                                var call974 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                var call975 = callmethodChecked(call974, "new", [1], string973);
                                var call976 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                var call977 = callmethodChecked(call976, "new", [2], call975, var_Component);
                                block972.pattern = call977;
                                setLineNumber(823);    // compilenode identifier
                                block972.paramTypes = [var_Component];
                                block972.real = function(var_aComponent) {
                                  setLineNumber(824);    // compilenode identifier
                                  var call978 = callmethodChecked(var_f, "apply", [2], var_value, var_aComponent);
                                  var_value = call978;
                                  return GraceDone;
                                };
                                var call979 = callmethodChecked(var_prelude, "for()do", [1, 1], call971, block972);
                                setLineNumber(827);    // return value
                                if (!Grace_isTrue(callmethod(var_T, "match", [1], var_value)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method fold(1)startingWith(1) does not have " + 
                                            callmethod(var_T, "asString", [0])._value + "."));
                                return var_value;
                              };
                              func970.paramTypes = [];
                              func970.paramTypes.push([]);
                              func970.paramTypes.push([]);
                              func970.paramCounts = [1, 1];
                              obj876.methods["fold()startingWith"] = func970;
                              func970.definitionLine = 819;
                              func970.definitionModule = "objectdraw";
                              var func980 = function(argcv) {    // method flex
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for flex"));
                                setModuleName("objectdraw");
                                setLineNumber(832);    // compilenode string
                                var string981 = new GraceString("inline-flex");
                                onSelf = true;
                                var call982 = callmethodChecked(this, "element", [0]);
                                var call983 = callmethodChecked(call982, "style", [0]);
                                var call984 = callmethodChecked(call983, "display:=", [1], string981);
                                setLineNumber(833);    // compilenode string
                                var string985 = new GraceString("center");
                                onSelf = true;
                                var call986 = callmethodChecked(this, "element", [0]);
                                var call987 = callmethodChecked(call986, "style", [0]);
                                var call988 = callmethodChecked(call987, "justifyContent:=", [1], string985);
                                setLineNumber(834);    // compilenode string
                                var string989 = new GraceString("row wrap");
                                onSelf = true;
                                var call990 = callmethodChecked(this, "element", [0]);
                                var call991 = callmethodChecked(call990, "style", [0]);
                                var call992 = callmethodChecked(call991, "flexFlow:=", [1], string989);
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call992)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method flex does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return call992;
                              };
                              func980.confidential = true;
                              func980.paramCounts = [0];
                              obj876.methods["flex"] = func980;
                              func980.definitionLine = 831;
                              func980.definitionModule = "objectdraw";
                              var func993 = function(argcv) {    // method arrangeHorizontal
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeHorizontal"));
                                setModuleName("objectdraw");
                                setLineNumber(839);    // compilenode call
                                onSelf = true;
                                var call994 = callmethodChecked(this, "flex", [0]);
                                setLineNumber(840);    // compilenode string
                                var string995 = new GraceString("row");
                                onSelf = true;
                                var call996 = callmethodChecked(this, "element", [0]);
                                var call997 = callmethodChecked(call996, "style", [0]);
                                var call998 = callmethodChecked(call997, "flexDirection:=", [1], string995);
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call998)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method arrangeHorizontal does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return call998;
                              };
                              func993.paramCounts = [0];
                              obj876.methods["arrangeHorizontal"] = func993;
                              func993.definitionLine = 838;
                              func993.definitionModule = "objectdraw";
                              var func999 = function(argcv) {    // method arrangeVertical
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeVertical"));
                                setModuleName("objectdraw");
                                setLineNumber(845);    // compilenode call
                                onSelf = true;
                                var call1000 = callmethodChecked(this, "flex", [0]);
                                setLineNumber(846);    // compilenode string
                                var string1001 = new GraceString("column");
                                onSelf = true;
                                var call1002 = callmethodChecked(this, "element", [0]);
                                var call1003 = callmethodChecked(call1002, "style", [0]);
                                var call1004 = callmethodChecked(call1003, "flexDirection:=", [1], string1001);
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1004)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method arrangeVertical does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return call1004;
                              };
                              func999.paramCounts = [0];
                              obj876.methods["arrangeVertical"] = func999;
                              func999.definitionLine = 844;
                              func999.definitionModule = "objectdraw";
                              var func1005 = function(argcv) {    // method asString
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                setModuleName("objectdraw");
                                setLineNumber(851);    // compilenode string
                                var string1006 = new GraceString(" children");
                                onSelf = true;
                                var call1008 = callmethodChecked(this, "size", [0]);
                                var string1010 = new GraceString("container: with ");
                                var opresult1012 = callmethodChecked(string1010, "++", [1], call1008);
                                var opresult1014 = callmethodChecked(opresult1012, "++", [1], string1006);
                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1014)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method asString does not have " + 
                                            callmethod(var_String, "asString", [0])._value + "."));
                                return opresult1014;
                              };
                              func1005.paramCounts = [0];
                              obj876.methods["asString"] = func1005;
                              func1005.definitionLine = 850;
                              func1005.definitionModule = "objectdraw";
                              setLineNumber(748);    // compilenode call
                              var call1015 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call1016 = callmethodChecked(call1015, "componentFromElement()object", [1, 1], var_element__39__, this);
                              obj876.superobj = call1016;
                              if (call1016.data) obj876.data = call1016.data;
                              if (call1016.hasOwnProperty('_value'))
                                  obj876._value = call1016._value;
                              setLineNumber(750);    // compilenode array
                              var array1017 = new PrimitiveGraceList([]);
                              obj876.data["children"] = array1017;
                              var reader_objectdraw_children1018 = function() {
                                return this.data["children"];
                              };
                              reader_objectdraw_children1018.def = true;
                              reader_objectdraw_children1018.confidential = true;
                              obj876.methods["children"] = reader_objectdraw_children1018;
                              superDepth = origSuperDepth;
                            };
                            obj_init_876.apply(obj876, []);
                            setLineNumber(747);    // return value
                            if (!Grace_isTrue(callmethod(var_Container, "match", [1], obj876)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method containerFromElement(1) does not have " + 
                                        callmethod(var_Container, "asString", [0])._value + "."));
                            return obj876;
                          };
                          func875.paramCounts = [1];
                          this.methods["containerFromElement"] = func875;
                          func875.definitionLine = 747;
                          func875.definitionModule = "objectdraw";
                            var func1019 = function(argcv) {    // method containerFromElement(1     )()object
                              var curarg = 1;
                              var var_element__39__ = arguments[curarg];
                              curarg++;
                              var inheritingObject = arguments[curarg++];
                              // Start argument processing
                              curarg = 1;
                              curarg++;
                              // End argument processing
                              setModuleName("objectdraw");
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var obj1020 = Grace_allocObject(null, "containerFromElement");
                              obj1020.definitionModule = "objectdraw";
                              obj1020.definitionLine = 747;
                              var inho1020 = inheritingObject;
                              while (inho1020.superobj) inho1020 = inho1020.superobj;
                              inho1020.superobj = obj1020;
                              obj1020.data = inheritingObject.data;
                              if (inheritingObject.hasOwnProperty('_value'))
                                obj1020._value = inheritingObject._value;
                              obj1020.outer = this;
                              var reader_objectdraw_outer1021 = function() {
                                return this.outer;
                              };
                              obj1020.methods["outer"] = reader_objectdraw_outer1021;
                              var obj_init_1020 = function() {
                                var origSuperDepth = superDepth;
                                superDepth = obj1020;
                                var func1022 = function(argcv) {    // method size
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                  setModuleName("objectdraw");
                                  setLineNumber(754);    // compilenode call
                                  onSelf = true;
                                  var call1023 = callmethodChecked(this, "children", [0]);
                                  var call1024 = callmethodChecked(call1023, "size", [0]);
                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1024)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method size does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  return call1024;
                                };
                                func1022.paramCounts = [0];
                                obj1020.methods["size"] = func1022;
                                func1022.definitionLine = 753;
                                func1022.definitionModule = "objectdraw";
                                var func1025 = function(argcv) {    // method isEmpty
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEmpty"));
                                  setModuleName("objectdraw");
                                  setLineNumber(759);    // compilenode call
                                  onSelf = true;
                                  var call1027 = callmethodChecked(this, "size", [0]);
                                  var opresult1029 = callmethodChecked(call1027, "==", [1], new GraceNum(0));
                                  if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult1029)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method isEmpty does not have " + 
                                              callmethod(var_Boolean, "asString", [0])._value + "."));
                                  return opresult1029;
                                };
                                func1025.paramCounts = [0];
                                obj1020.methods["isEmpty"] = func1025;
                                func1025.definitionLine = 758;
                                func1025.definitionModule = "objectdraw";
                                var func1030 = function(argcv) {    // method at(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_index = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for at(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(763);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in at (arg list 1), which corresponds to parameter index, does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("objectdraw");
                                  var if1031 = GraceDone;
                                  setLineNumber(764);    // compilenode call
                                  onSelf = true;
                                  var call1032 = callmethodChecked(this, "size", [0]);
                                  var opresult1035 = callmethodChecked(var_index, ">", [1], call1032);
                                  var opresult1039 = callmethodChecked(var_index, "<", [1], new GraceNum(1));
                                  var opresult1041 = callmethodChecked(opresult1039, "||", [1], opresult1035);
                                  if (Grace_isTrue(opresult1041)) {
                                    setLineNumber(765);    // compilenode call
                                    var call1042 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call1043 = callmethodChecked(call1042, "collections", [0]);
                                    var call1044 = callmethodChecked(call1043, "BoundsError", [0]);
                                    var call1045 = callmethodChecked(call1044, "raiseForIndex", [1], var_index);
                                    if1031 = call1045;
                                  }
                                  setLineNumber(768);    // compilenode call
                                  onSelf = true;
                                  var call1046 = callmethodChecked(this, "children", [0]);
                                  var call1047 = callmethodChecked(call1046, "at", [1], var_index);
                                  if (!Grace_isTrue(callmethod(var_Component, "match", [1], call1047)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method at(1) does not have " + 
                                              callmethod(var_Component, "asString", [0])._value + "."));
                                  return call1047;
                                };
                                func1030.paramTypes = [];
                                func1030.paramTypes.push([type_Number, "index"]);
                                func1030.paramCounts = [1];
                                obj1020.methods["at"] = func1030;
                                func1030.definitionLine = 763;
                                func1030.definitionModule = "objectdraw";
                                var func1048 = function(argcv) {    // method at(1)put(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_index = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for at (arg list 1) of at(1)put(1)"));
                                  var var_aComponent = arguments[curarg];
                                  curarg++;
                                  if (argcv[1] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for put (arg list 2) of at(1)put(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(772);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in at (arg list 1), which corresponds to parameter index, does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in put (arg list 2), which corresponds to parameter aComponent, does not have " + 
                                              callmethod(var_Component, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("objectdraw");
                                  var if1049 = GraceDone;
                                  setLineNumber(773);    // compilenode call
                                  onSelf = true;
                                  var call1051 = callmethodChecked(this, "size", [0]);
                                  var opresult1053 = callmethodChecked(call1051, "+", [1], new GraceNum(1));
                                  var opresult1056 = callmethodChecked(var_index, ">", [1], opresult1053);
                                  var opresult1060 = callmethodChecked(var_index, "<", [1], new GraceNum(1));
                                  var opresult1062 = callmethodChecked(opresult1060, "||", [1], opresult1056);
                                  if (Grace_isTrue(opresult1062)) {
                                    setLineNumber(774);    // compilenode call
                                    var call1063 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call1064 = callmethodChecked(call1063, "BoundsError", [0]);
                                    var call1065 = callmethodChecked(call1064, "raiseForIndex", [1], var_index);
                                    if1049 = call1065;
                                  }
                                  var if1066 = GraceDone;
                                  setLineNumber(777);    // compilenode call
                                  onSelf = true;
                                  var call1068 = callmethodChecked(this, "size", [0]);
                                  var opresult1070 = callmethodChecked(call1068, "+", [1], new GraceNum(1));
                                  var opresult1073 = callmethodChecked(var_index, "==", [1], opresult1070);
                                  if (Grace_isTrue(opresult1073)) {
                                    setLineNumber(778);    // compilenode identifier
                                    var call1074 = callmethodChecked(var_aComponent, "element", [0]);
                                    onSelf = true;
                                    var call1075 = callmethodChecked(this, "element", [0]);
                                    var call1076 = callmethodChecked(call1075, "appendChild", [1], call1074);
                                    if1066 = call1076;
                                  } else {
                                    setLineNumber(780);    // compilenode identifier
                                    var call1077 = callmethodChecked(var_aComponent, "element", [0]);
                                    onSelf = true;
                                    var call1078 = callmethodChecked(this, "children", [0]);
                                    var call1079 = callmethodChecked(call1078, "at", [1], var_index);
                                    var call1080 = callmethodChecked(call1079, "element", [0]);
                                    onSelf = true;
                                    var call1081 = callmethodChecked(this, "element", [0]);
                                    var call1082 = callmethodChecked(call1081, "insertBefore", [2], call1077, call1080);
                                    if1066 = call1082;
                                  }
                                  setLineNumber(783);    // compilenode call
                                  onSelf = true;
                                  var call1083 = callmethodChecked(this, "children", [0]);
                                  var call1084 = callmethodChecked(call1083, "at()put", [1, 1], var_index, var_aComponent);
                                  setLineNumber(785);    // return value
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method at(1)put(1) does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return var_done;
                                };
                                func1048.paramTypes = [];
                                func1048.paramTypes.push([type_Number, "index"]);
                                func1048.paramTypes.push([]);
                                func1048.paramCounts = [1, 1];
                                obj1020.methods["at()put"] = func1048;
                                func1048.definitionLine = 772;
                                func1048.definitionModule = "objectdraw";
                                var func1085 = function(argcv) {    // method append(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_aComponent = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for append(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(789);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in append (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                              callmethod(var_Component, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("objectdraw");
                                  setLineNumber(790);    // compilenode identifier
                                  var call1086 = callmethodChecked(var_aComponent, "element", [0]);
                                  onSelf = true;
                                  var call1087 = callmethodChecked(this, "element", [0]);
                                  var call1088 = callmethodChecked(call1087, "appendChild", [1], call1086);
                                  setLineNumber(792);    // compilenode call
                                  onSelf = true;
                                  var call1089 = callmethodChecked(this, "children", [0]);
                                  var call1090 = callmethodChecked(call1089, "push", [1], var_aComponent);
                                  setLineNumber(794);    // return value
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method append(1) does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return var_done;
                                };
                                func1085.paramTypes = [];
                                func1085.paramTypes.push([]);
                                func1085.paramCounts = [1];
                                obj1020.methods["append"] = func1085;
                                func1085.definitionLine = 789;
                                func1085.definitionModule = "objectdraw";
                                var func1091 = function(argcv) {    // method prepend(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_aComponent = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for prepend(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(798);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in prepend (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                              callmethod(var_Component, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("objectdraw");
                                  var if1092 = GraceDone;
                                  setLineNumber(799);    // compilenode call
                                  onSelf = true;
                                  var call1093 = callmethodChecked(this, "isEmpty", [0]);
                                  if (Grace_isTrue(call1093)) {
                                    setLineNumber(800);    // compilenode identifier
                                    var call1094 = callmethodChecked(var_aComponent, "element", [0]);
                                    onSelf = true;
                                    var call1095 = callmethodChecked(this, "element", [0]);
                                    var call1096 = callmethodChecked(call1095, "appendChild", [1], call1094);
                                    if1092 = call1096;
                                  } else {
                                    setLineNumber(802);    // compilenode identifier
                                    var call1097 = callmethodChecked(var_aComponent, "element", [0]);
                                    onSelf = true;
                                    var call1098 = callmethodChecked(this, "element", [0]);
                                    var call1099 = callmethodChecked(call1098, "firstChild", [0]);
                                    onSelf = true;
                                    var call1100 = callmethodChecked(this, "element", [0]);
                                    var call1101 = callmethodChecked(call1100, "insertBefore", [2], call1097, call1099);
                                    if1092 = call1101;
                                  }
                                  setLineNumber(805);    // compilenode call
                                  onSelf = true;
                                  var call1102 = callmethodChecked(this, "children", [0]);
                                  var call1103 = callmethodChecked(call1102, "unshift", [1], var_aComponent);
                                  setLineNumber(807);    // return value
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method prepend(1) does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return var_done;
                                };
                                func1091.paramTypes = [];
                                func1091.paramTypes.push([]);
                                func1091.paramCounts = [1];
                                obj1020.methods["prepend"] = func1091;
                                func1091.definitionLine = 798;
                                func1091.definitionModule = "objectdraw";
                                var func1104 = function(argcv) {    // method do(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_f = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(811);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in do (arg list 1), which corresponds to parameter f, does not have " + 
                                              callmethod(var_Procedure, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("objectdraw");
                                  setLineNumber(812);    // compilenode call
                                  onSelf = true;
                                  var call1105 = callmethodChecked(this, "children", [0]);
                                  var block1106 = new GraceBlock(this, 812, 1);
                                  setLineNumber(0);    // compilenode string
                                  var string1107 = new GraceString("aComponent");
                                  var call1108 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                  var call1109 = callmethodChecked(call1108, "new", [1], string1107);
                                  var call1110 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                  var call1111 = callmethodChecked(call1110, "new", [2], call1109, var_Component);
                                  block1106.pattern = call1111;
                                  setLineNumber(812);    // compilenode identifier
                                  block1106.paramTypes = [var_Component];
                                  block1106.real = function(var_aComponent) {
                                    setLineNumber(813);    // compilenode identifier
                                    var call1112 = callmethodChecked(var_f, "apply", [1], var_aComponent);
                                    return call1112;
                                  };
                                  var call1113 = callmethodChecked(var_prelude, "for()do", [1, 1], call1105, block1106);
                                  setLineNumber(812);    // return value
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1113)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method do(1) does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return call1113;
                                };
                                func1104.paramCounts = [1];
                                obj1020.methods["do"] = func1104;
                                func1104.definitionLine = 811;
                                func1104.definitionModule = "objectdraw";
                                var func1114 = function(argcv) {    // method fold(1)startingWith(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_f = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fold (arg list 1) of fold(1)startingWith(1)"));
                                  var var_initial = arguments[curarg];
                                  curarg++;
                                  if (argcv[1] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startingWith (arg list 2) of fold(1)startingWith(1)"));
                                  // Start type arguments
                                  var var_T = var_Unknown;
                                  if (argcv.length == 3) {
                                    if (argcv[2] !== 1) {
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, 
                                          new GraceString("wrong number of type arguments for fold(1)startingWith(1)"));
                                    }
                                    var_T = arguments[curarg++];
                                  }
                                  // End type arguments
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(819);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Function2, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in fold (arg list 1), which corresponds to parameter f, does not have " + 
                                              callmethod(var_Function2, "asString", [0])._value + "."));
                                  curarg++;
                                  setLineNumber(820);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_T, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in startingWith (arg list 2), which corresponds to parameter initial, does not have " + 
                                              callmethod(var_T, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("objectdraw");
                                  setLineNumber(821);    // compilenode identifier
                                  var var_value = var_initial;
                                  if (!Grace_isTrue(callmethod(var_T, "match", [1], var_value)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("initial value of var 'value' is not of type T"));
                                  setLineNumber(823);    // compilenode call
                                  onSelf = true;
                                  var call1115 = callmethodChecked(this, "children", [0]);
                                  var block1116 = new GraceBlock(this, 823, 1);
                                  setLineNumber(0);    // compilenode string
                                  var string1117 = new GraceString("aComponent");
                                  var call1118 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                  var call1119 = callmethodChecked(call1118, "new", [1], string1117);
                                  var call1120 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                  var call1121 = callmethodChecked(call1120, "new", [2], call1119, var_Component);
                                  block1116.pattern = call1121;
                                  setLineNumber(823);    // compilenode identifier
                                  block1116.paramTypes = [var_Component];
                                  block1116.real = function(var_aComponent) {
                                    setLineNumber(824);    // compilenode identifier
                                    var call1122 = callmethodChecked(var_f, "apply", [2], var_value, var_aComponent);
                                    var_value = call1122;
                                    return GraceDone;
                                  };
                                  var call1123 = callmethodChecked(var_prelude, "for()do", [1, 1], call1115, block1116);
                                  setLineNumber(827);    // return value
                                  if (!Grace_isTrue(callmethod(var_T, "match", [1], var_value)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method fold(1)startingWith(1) does not have " + 
                                              callmethod(var_T, "asString", [0])._value + "."));
                                  return var_value;
                                };
                                func1114.paramTypes = [];
                                func1114.paramTypes.push([]);
                                func1114.paramTypes.push([]);
                                func1114.paramCounts = [1, 1];
                                obj1020.methods["fold()startingWith"] = func1114;
                                func1114.definitionLine = 819;
                                func1114.definitionModule = "objectdraw";
                                var func1124 = function(argcv) {    // method flex
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for flex"));
                                  setModuleName("objectdraw");
                                  setLineNumber(832);    // compilenode string
                                  var string1125 = new GraceString("inline-flex");
                                  onSelf = true;
                                  var call1126 = callmethodChecked(this, "element", [0]);
                                  var call1127 = callmethodChecked(call1126, "style", [0]);
                                  var call1128 = callmethodChecked(call1127, "display:=", [1], string1125);
                                  setLineNumber(833);    // compilenode string
                                  var string1129 = new GraceString("center");
                                  onSelf = true;
                                  var call1130 = callmethodChecked(this, "element", [0]);
                                  var call1131 = callmethodChecked(call1130, "style", [0]);
                                  var call1132 = callmethodChecked(call1131, "justifyContent:=", [1], string1129);
                                  setLineNumber(834);    // compilenode string
                                  var string1133 = new GraceString("row wrap");
                                  onSelf = true;
                                  var call1134 = callmethodChecked(this, "element", [0]);
                                  var call1135 = callmethodChecked(call1134, "style", [0]);
                                  var call1136 = callmethodChecked(call1135, "flexFlow:=", [1], string1133);
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1136)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method flex does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return call1136;
                                };
                                func1124.confidential = true;
                                func1124.paramCounts = [0];
                                obj1020.methods["flex"] = func1124;
                                func1124.definitionLine = 831;
                                func1124.definitionModule = "objectdraw";
                                var func1137 = function(argcv) {    // method arrangeHorizontal
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeHorizontal"));
                                  setModuleName("objectdraw");
                                  setLineNumber(839);    // compilenode call
                                  onSelf = true;
                                  var call1138 = callmethodChecked(this, "flex", [0]);
                                  setLineNumber(840);    // compilenode string
                                  var string1139 = new GraceString("row");
                                  onSelf = true;
                                  var call1140 = callmethodChecked(this, "element", [0]);
                                  var call1141 = callmethodChecked(call1140, "style", [0]);
                                  var call1142 = callmethodChecked(call1141, "flexDirection:=", [1], string1139);
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1142)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method arrangeHorizontal does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return call1142;
                                };
                                func1137.paramCounts = [0];
                                obj1020.methods["arrangeHorizontal"] = func1137;
                                func1137.definitionLine = 838;
                                func1137.definitionModule = "objectdraw";
                                var func1143 = function(argcv) {    // method arrangeVertical
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeVertical"));
                                  setModuleName("objectdraw");
                                  setLineNumber(845);    // compilenode call
                                  onSelf = true;
                                  var call1144 = callmethodChecked(this, "flex", [0]);
                                  setLineNumber(846);    // compilenode string
                                  var string1145 = new GraceString("column");
                                  onSelf = true;
                                  var call1146 = callmethodChecked(this, "element", [0]);
                                  var call1147 = callmethodChecked(call1146, "style", [0]);
                                  var call1148 = callmethodChecked(call1147, "flexDirection:=", [1], string1145);
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1148)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method arrangeVertical does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return call1148;
                                };
                                func1143.paramCounts = [0];
                                obj1020.methods["arrangeVertical"] = func1143;
                                func1143.definitionLine = 844;
                                func1143.definitionModule = "objectdraw";
                                var func1149 = function(argcv) {    // method asString
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                  setModuleName("objectdraw");
                                  setLineNumber(851);    // compilenode string
                                  var string1150 = new GraceString(" children");
                                  onSelf = true;
                                  var call1152 = callmethodChecked(this, "size", [0]);
                                  var string1154 = new GraceString("container: with ");
                                  var opresult1156 = callmethodChecked(string1154, "++", [1], call1152);
                                  var opresult1158 = callmethodChecked(opresult1156, "++", [1], string1150);
                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1158)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method asString does not have " + 
                                              callmethod(var_String, "asString", [0])._value + "."));
                                  return opresult1158;
                                };
                                func1149.paramCounts = [0];
                                obj1020.methods["asString"] = func1149;
                                func1149.definitionLine = 850;
                                func1149.definitionModule = "objectdraw";
                                setLineNumber(748);    // compilenode call
                                var call1159 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call1160 = callmethodChecked(call1159, "componentFromElement()object", [1, 1], var_element__39__, this);
                                obj1020.superobj = call1160;
                                if (call1160.data) obj1020.data = call1160.data;
                                if (call1160.hasOwnProperty('_value'))
                                    obj1020._value = call1160._value;
                                setLineNumber(750);    // compilenode array
                                var array1161 = new PrimitiveGraceList([]);
                                obj1020.data["children"] = array1161;
                                var reader_objectdraw_children1162 = function() {
                                  return this.data["children"];
                                };
                                reader_objectdraw_children1162.def = true;
                                reader_objectdraw_children1162.confidential = true;
                                obj1020.methods["children"] = reader_objectdraw_children1162;
                                superDepth = origSuperDepth;
                              };
                              obj_init_1020.apply(inheritingObject, []);
                              return obj1020;
                              };
                              this.methods["containerFromElement()object"] = func1019;
                            setLineNumber(856);    // compilenode method
                            var func1163 = function(argcv) {    // method containerEmpty
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for containerEmpty"));
                              setModuleName("objectdraw");
                              var obj1164 = Grace_allocObject(null, "objectdraw.containerEmpty");
                              obj1164.definitionModule = "objectdraw";
                              obj1164.definitionLine = 856;
                              obj1164.outer = this;
                              var reader_objectdraw_outer1165 = function() {
                                return this.outer;
                              };
                              obj1164.methods["outer"] = reader_objectdraw_outer1165;
                              var obj_init_1164 = function() {
                                var origSuperDepth = superDepth;
                                superDepth = obj1164;
                                setLineNumber(857);    // compilenode string
                                var string1166 = new GraceString("div");
                                var call1167 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call1168 = callmethodChecked(call1167, "containerOfElementType()object", [1, 1], string1166, this);
                                obj1164.superobj = call1168;
                                if (call1168.data) obj1164.data = call1168.data;
                                if (call1168.hasOwnProperty('_value'))
                                    obj1164._value = call1168._value;
                                setLineNumber(859);    // compilenode call
                                onSelf = true;
                                var call1169 = callmethodChecked(this, "arrangeHorizontal", [0]);
                                superDepth = origSuperDepth;
                              };
                              obj_init_1164.apply(obj1164, []);
                              setLineNumber(856);    // return value
                              if (!Grace_isTrue(callmethod(var_Container, "match", [1], obj1164)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("result of method containerEmpty does not have " + 
                                          callmethod(var_Container, "asString", [0])._value + "."));
                              return obj1164;
                            };
                            func1163.paramCounts = [0];
                            this.methods["containerEmpty"] = func1163;
                            func1163.definitionLine = 856;
                            func1163.definitionModule = "objectdraw";
                              var func1170 = function(argcv) {    // method containerEmpty()object
                                var curarg = 1;
                                var inheritingObject = arguments[curarg++];
                                // Start argument processing
                                curarg = 1;
                                // End argument processing
                                setModuleName("objectdraw");
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var obj1171 = Grace_allocObject(null, "containerEmpty");
                                obj1171.definitionModule = "objectdraw";
                                obj1171.definitionLine = 856;
                                var inho1171 = inheritingObject;
                                while (inho1171.superobj) inho1171 = inho1171.superobj;
                                inho1171.superobj = obj1171;
                                obj1171.data = inheritingObject.data;
                                if (inheritingObject.hasOwnProperty('_value'))
                                  obj1171._value = inheritingObject._value;
                                obj1171.outer = this;
                                var reader_objectdraw_outer1172 = function() {
                                  return this.outer;
                                };
                                obj1171.methods["outer"] = reader_objectdraw_outer1172;
                                var obj_init_1171 = function() {
                                  var origSuperDepth = superDepth;
                                  superDepth = obj1171;
                                  setLineNumber(857);    // compilenode string
                                  var string1173 = new GraceString("div");
                                  var call1174 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call1175 = callmethodChecked(call1174, "containerOfElementType()object", [1, 1], string1173, this);
                                  obj1171.superobj = call1175;
                                  if (call1175.data) obj1171.data = call1175.data;
                                  if (call1175.hasOwnProperty('_value'))
                                      obj1171._value = call1175._value;
                                  setLineNumber(859);    // compilenode call
                                  onSelf = true;
                                  var call1176 = callmethodChecked(this, "arrangeHorizontal", [0]);
                                  superDepth = origSuperDepth;
                                };
                                obj_init_1171.apply(inheritingObject, []);
                                return obj1171;
                                };
                                this.methods["containerEmpty()object"] = func1170;
                              setLineNumber(863);    // compilenode method
                              var func1177 = function(argcv) {    // method containerSize(2)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_width__39__ = arguments[curarg];
                                curarg++;
                                var var_height__39__ = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 2)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for containerSize(2)"));
                                // Start argument checking
                                curarg = 1;
                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in containerSize (arg list 1), which corresponds to parameter width', does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 2 in containerSize (arg list 1), which corresponds to parameter height', does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("objectdraw");
                                var obj1178 = Grace_allocObject(null, "objectdraw.containerSize");
                                obj1178.definitionModule = "objectdraw";
                                obj1178.definitionLine = 863;
                                obj1178.outer = this;
                                var reader_objectdraw_outer1179 = function() {
                                  return this.outer;
                                };
                                obj1178.methods["outer"] = reader_objectdraw_outer1179;
                                var obj_init_1178 = function() {
                                  var origSuperDepth = superDepth;
                                  superDepth = obj1178;
                                  setLineNumber(864);    // compilenode call
                                  var call1180 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call1181 = callmethodChecked(call1180, "containerEmpty()object", [0, 1], this);
                                  obj1178.superobj = call1181;
                                  if (call1181.data) obj1178.data = call1181.data;
                                  if (call1181.hasOwnProperty('_value'))
                                      obj1178._value = call1181._value;
                                  setLineNumber(866);    // compilenode string
                                  var string1182 = new GraceString("px");
                                  var string1185 = new GraceString("");
                                  var opresult1187 = callmethodChecked(string1185, "++", [1], var_width__39__);
                                  var opresult1189 = callmethodChecked(opresult1187, "++", [1], string1182);
                                  onSelf = true;
                                  var call1190 = callmethodChecked(this, "element", [0]);
                                  var call1191 = callmethodChecked(call1190, "style", [0]);
                                  var call1192 = callmethodChecked(call1191, "width:=", [1], opresult1189);
                                  setLineNumber(867);    // compilenode string
                                  var string1193 = new GraceString("px");
                                  var string1196 = new GraceString("");
                                  var opresult1198 = callmethodChecked(string1196, "++", [1], var_height__39__);
                                  var opresult1200 = callmethodChecked(opresult1198, "++", [1], string1193);
                                  onSelf = true;
                                  var call1201 = callmethodChecked(this, "element", [0]);
                                  var call1202 = callmethodChecked(call1201, "style", [0]);
                                  var call1203 = callmethodChecked(call1202, "height:=", [1], opresult1200);
                                  setLineNumber(868);    // compilenode string
                                  var string1204 = new GraceString("auto");
                                  onSelf = true;
                                  var call1205 = callmethodChecked(this, "element", [0]);
                                  var call1206 = callmethodChecked(call1205, "style", [0]);
                                  var call1207 = callmethodChecked(call1206, "overflow:=", [1], string1204);
                                  superDepth = origSuperDepth;
                                };
                                obj_init_1178.apply(obj1178, []);
                                setLineNumber(863);    // return value
                                if (!Grace_isTrue(callmethod(var_Container, "match", [1], obj1178)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method containerSize(2) does not have " + 
                                            callmethod(var_Container, "asString", [0])._value + "."));
                                return obj1178;
                              };
                              func1177.paramTypes = [];
                              func1177.paramTypes.push([type_Number, "width'"]);
                              func1177.paramTypes.push([type_Number, "height'"]);
                              func1177.paramCounts = [2];
                              this.methods["containerSize"] = func1177;
                              func1177.definitionLine = 863;
                              func1177.definitionModule = "objectdraw";
                                var func1208 = function(argcv) {    // method containerSize(2     )()object
                                  var curarg = 1;
                                  var var_width__39__ = arguments[curarg];
                                  curarg++;
                                  var var_height__39__ = arguments[curarg];
                                  curarg++;
                                  var inheritingObject = arguments[curarg++];
                                  // Start argument processing
                                  curarg = 1;
                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in containerSize (arg list 1), which corresponds to parameter width', does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 2 in containerSize (arg list 1), which corresponds to parameter height', does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument processing
                                  setModuleName("objectdraw");
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var obj1209 = Grace_allocObject(null, "containerSize");
                                  obj1209.definitionModule = "objectdraw";
                                  obj1209.definitionLine = 863;
                                  var inho1209 = inheritingObject;
                                  while (inho1209.superobj) inho1209 = inho1209.superobj;
                                  inho1209.superobj = obj1209;
                                  obj1209.data = inheritingObject.data;
                                  if (inheritingObject.hasOwnProperty('_value'))
                                    obj1209._value = inheritingObject._value;
                                  obj1209.outer = this;
                                  var reader_objectdraw_outer1210 = function() {
                                    return this.outer;
                                  };
                                  obj1209.methods["outer"] = reader_objectdraw_outer1210;
                                  var obj_init_1209 = function() {
                                    var origSuperDepth = superDepth;
                                    superDepth = obj1209;
                                    setLineNumber(864);    // compilenode call
                                    var call1211 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call1212 = callmethodChecked(call1211, "containerEmpty()object", [0, 1], this);
                                    obj1209.superobj = call1212;
                                    if (call1212.data) obj1209.data = call1212.data;
                                    if (call1212.hasOwnProperty('_value'))
                                        obj1209._value = call1212._value;
                                    setLineNumber(866);    // compilenode string
                                    var string1213 = new GraceString("px");
                                    var string1216 = new GraceString("");
                                    var opresult1218 = callmethodChecked(string1216, "++", [1], var_width__39__);
                                    var opresult1220 = callmethodChecked(opresult1218, "++", [1], string1213);
                                    onSelf = true;
                                    var call1221 = callmethodChecked(this, "element", [0]);
                                    var call1222 = callmethodChecked(call1221, "style", [0]);
                                    var call1223 = callmethodChecked(call1222, "width:=", [1], opresult1220);
                                    setLineNumber(867);    // compilenode string
                                    var string1224 = new GraceString("px");
                                    var string1227 = new GraceString("");
                                    var opresult1229 = callmethodChecked(string1227, "++", [1], var_height__39__);
                                    var opresult1231 = callmethodChecked(opresult1229, "++", [1], string1224);
                                    onSelf = true;
                                    var call1232 = callmethodChecked(this, "element", [0]);
                                    var call1233 = callmethodChecked(call1232, "style", [0]);
                                    var call1234 = callmethodChecked(call1233, "height:=", [1], opresult1231);
                                    setLineNumber(868);    // compilenode string
                                    var string1235 = new GraceString("auto");
                                    onSelf = true;
                                    var call1236 = callmethodChecked(this, "element", [0]);
                                    var call1237 = callmethodChecked(call1236, "style", [0]);
                                    var call1238 = callmethodChecked(call1237, "overflow:=", [1], string1235);
                                    superDepth = origSuperDepth;
                                  };
                                  obj_init_1209.apply(inheritingObject, []);
                                  return obj1209;
                                  };
                                  func1208.paramTypes = [];
                                  func1208.paramTypes.push([type_Number, "width'"]);
                                  func1208.paramTypes.push([type_Number, "height'"]);
                                  this.methods["containerSize()object"] = func1208;
                                setLineNumber(873);    // compilenode method
                                var func1239 = function(argcv) {    // method inputFromElement(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_element__39__ = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inputFromElement(1)"));
                                  setModuleName("objectdraw");
                                  var obj1240 = Grace_allocObject(null, "objectdraw.inputFromElement");
                                  obj1240.definitionModule = "objectdraw";
                                  obj1240.definitionLine = 873;
                                  obj1240.outer = this;
                                  var reader_objectdraw_outer1241 = function() {
                                    return this.outer;
                                  };
                                  obj1240.methods["outer"] = reader_objectdraw_outer1241;
                                  var obj_init_1240 = function() {
                                    var origSuperDepth = superDepth;
                                    superDepth = obj1240;
                                    var func1242 = function(argcv) {    // method onFocusDo(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_f = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onFocusDo(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(877);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in onFocusDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                  callmethod(var_Response, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("objectdraw");
                                      setLineNumber(878);    // compilenode string
                                      var string1243 = new GraceString("focus");
                                      var block1244 = new GraceBlock(this, 878, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block1244.real = function(var___95____95__20) {
                                        setLineNumber(879);    // compilenode identifier
                                        onSelf = true;
                                        var call1245 = callmethodChecked(this, "eventSource", [1], this);
                                        var call1246 = callmethodChecked(var_f, "apply", [1], call1245);
                                        return call1246;
                                      };
                                      setLineNumber(878);    // compilenode call
                                      onSelf = true;
                                      var call1247 = callmethodChecked(this, "element", [0]);
                                      var call1248 = callmethodChecked(call1247, "addEventListener", [2], string1243, block1244);
                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1248)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method onFocusDo(1) does not have " + 
                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                      return call1248;
                                    };
                                    func1242.paramTypes = [];
                                    func1242.paramTypes.push([]);
                                    func1242.paramCounts = [1];
                                    obj1240.methods["onFocusDo"] = func1242;
                                    func1242.definitionLine = 877;
                                    func1242.definitionModule = "objectdraw";
                                    var func1249 = function(argcv) {    // method onBlurDo(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_f = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onBlurDo(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(884);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in onBlurDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                  callmethod(var_Response, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("objectdraw");
                                      setLineNumber(885);    // compilenode string
                                      var string1250 = new GraceString("blur");
                                      var block1251 = new GraceBlock(this, 885, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block1251.real = function(var___95____95__21) {
                                        setLineNumber(886);    // compilenode identifier
                                        onSelf = true;
                                        var call1252 = callmethodChecked(this, "eventSource", [1], this);
                                        var call1253 = callmethodChecked(var_f, "apply", [1], call1252);
                                        return call1253;
                                      };
                                      setLineNumber(885);    // compilenode call
                                      onSelf = true;
                                      var call1254 = callmethodChecked(this, "element", [0]);
                                      var call1255 = callmethodChecked(call1254, "addEventListener", [2], string1250, block1251);
                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1255)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method onBlurDo(1) does not have " + 
                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                      return call1255;
                                    };
                                    func1249.paramTypes = [];
                                    func1249.paramTypes.push([]);
                                    func1249.paramCounts = [1];
                                    obj1240.methods["onBlurDo"] = func1249;
                                    func1249.definitionLine = 884;
                                    func1249.definitionModule = "objectdraw";
                                    var func1256 = function(argcv) {    // method onChangeDo(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_f = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onChangeDo(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(891);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in onChangeDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                  callmethod(var_Response, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("objectdraw");
                                      setLineNumber(892);    // compilenode string
                                      var string1257 = new GraceString("change");
                                      var block1258 = new GraceBlock(this, 892, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block1258.real = function(var___95____95__22) {
                                        setLineNumber(893);    // compilenode identifier
                                        onSelf = true;
                                        var call1259 = callmethodChecked(this, "eventSource", [1], this);
                                        var call1260 = callmethodChecked(var_f, "apply", [1], call1259);
                                        return call1260;
                                      };
                                      setLineNumber(892);    // compilenode call
                                      onSelf = true;
                                      var call1261 = callmethodChecked(this, "element", [0]);
                                      var call1262 = callmethodChecked(call1261, "addEventListener", [2], string1257, block1258);
                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1262)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method onChangeDo(1) does not have " + 
                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                      return call1262;
                                    };
                                    func1256.paramTypes = [];
                                    func1256.paramTypes.push([]);
                                    func1256.paramCounts = [1];
                                    obj1240.methods["onChangeDo"] = func1256;
                                    func1256.definitionLine = 891;
                                    func1256.definitionModule = "objectdraw";
                                    var func1263 = function(argcv) {    // method asString
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                      setModuleName("objectdraw");
                                      setLineNumber(899);    // compilenode string
                                      var string1264 = new GraceString("an input");
                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], string1264)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method asString does not have " + 
                                                  callmethod(var_String, "asString", [0])._value + "."));
                                      return string1264;
                                    };
                                    func1263.paramCounts = [0];
                                    obj1240.methods["asString"] = func1263;
                                    func1263.definitionLine = 898;
                                    func1263.definitionModule = "objectdraw";
                                    setLineNumber(874);    // compilenode call
                                    var call1265 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call1266 = callmethodChecked(call1265, "componentFromElement()object", [1, 1], var_element__39__, this);
                                    obj1240.superobj = call1266;
                                    if (call1266.data) obj1240.data = call1266.data;
                                    if (call1266.hasOwnProperty('_value'))
                                        obj1240._value = call1266._value;
                                    superDepth = origSuperDepth;
                                  };
                                  obj_init_1240.apply(obj1240, []);
                                  setLineNumber(873);    // return value
                                  if (!Grace_isTrue(callmethod(var_Input, "match", [1], obj1240)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method inputFromElement(1) does not have " + 
                                              callmethod(var_Input, "asString", [0])._value + "."));
                                  return obj1240;
                                };
                                func1239.paramCounts = [1];
                                this.methods["inputFromElement"] = func1239;
                                func1239.definitionLine = 873;
                                func1239.definitionModule = "objectdraw";
                                  var func1267 = function(argcv) {    // method inputFromElement(1     )()object
                                    var curarg = 1;
                                    var var_element__39__ = arguments[curarg];
                                    curarg++;
                                    var inheritingObject = arguments[curarg++];
                                    // Start argument processing
                                    curarg = 1;
                                    curarg++;
                                    // End argument processing
                                    setModuleName("objectdraw");
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var obj1268 = Grace_allocObject(null, "inputFromElement");
                                    obj1268.definitionModule = "objectdraw";
                                    obj1268.definitionLine = 873;
                                    var inho1268 = inheritingObject;
                                    while (inho1268.superobj) inho1268 = inho1268.superobj;
                                    inho1268.superobj = obj1268;
                                    obj1268.data = inheritingObject.data;
                                    if (inheritingObject.hasOwnProperty('_value'))
                                      obj1268._value = inheritingObject._value;
                                    obj1268.outer = this;
                                    var reader_objectdraw_outer1269 = function() {
                                      return this.outer;
                                    };
                                    obj1268.methods["outer"] = reader_objectdraw_outer1269;
                                    var obj_init_1268 = function() {
                                      var origSuperDepth = superDepth;
                                      superDepth = obj1268;
                                      var func1270 = function(argcv) {    // method onFocusDo(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_f = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onFocusDo(1)"));
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(877);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in onFocusDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                    callmethod(var_Response, "asString", [0])._value + "."));
                                        curarg++;
                                        // End argument checking
                                        setModuleName("objectdraw");
                                        setLineNumber(878);    // compilenode string
                                        var string1271 = new GraceString("focus");
                                        var block1272 = new GraceBlock(this, 878, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block1272.real = function(var___95____95__20) {
                                          setLineNumber(879);    // compilenode identifier
                                          onSelf = true;
                                          var call1273 = callmethodChecked(this, "eventSource", [1], this);
                                          var call1274 = callmethodChecked(var_f, "apply", [1], call1273);
                                          return call1274;
                                        };
                                        setLineNumber(878);    // compilenode call
                                        onSelf = true;
                                        var call1275 = callmethodChecked(this, "element", [0]);
                                        var call1276 = callmethodChecked(call1275, "addEventListener", [2], string1271, block1272);
                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1276)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method onFocusDo(1) does not have " + 
                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                        return call1276;
                                      };
                                      func1270.paramTypes = [];
                                      func1270.paramTypes.push([]);
                                      func1270.paramCounts = [1];
                                      obj1268.methods["onFocusDo"] = func1270;
                                      func1270.definitionLine = 877;
                                      func1270.definitionModule = "objectdraw";
                                      var func1277 = function(argcv) {    // method onBlurDo(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_f = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onBlurDo(1)"));
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(884);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in onBlurDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                    callmethod(var_Response, "asString", [0])._value + "."));
                                        curarg++;
                                        // End argument checking
                                        setModuleName("objectdraw");
                                        setLineNumber(885);    // compilenode string
                                        var string1278 = new GraceString("blur");
                                        var block1279 = new GraceBlock(this, 885, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block1279.real = function(var___95____95__21) {
                                          setLineNumber(886);    // compilenode identifier
                                          onSelf = true;
                                          var call1280 = callmethodChecked(this, "eventSource", [1], this);
                                          var call1281 = callmethodChecked(var_f, "apply", [1], call1280);
                                          return call1281;
                                        };
                                        setLineNumber(885);    // compilenode call
                                        onSelf = true;
                                        var call1282 = callmethodChecked(this, "element", [0]);
                                        var call1283 = callmethodChecked(call1282, "addEventListener", [2], string1278, block1279);
                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1283)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method onBlurDo(1) does not have " + 
                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                        return call1283;
                                      };
                                      func1277.paramTypes = [];
                                      func1277.paramTypes.push([]);
                                      func1277.paramCounts = [1];
                                      obj1268.methods["onBlurDo"] = func1277;
                                      func1277.definitionLine = 884;
                                      func1277.definitionModule = "objectdraw";
                                      var func1284 = function(argcv) {    // method onChangeDo(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_f = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onChangeDo(1)"));
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(891);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in onChangeDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                    callmethod(var_Response, "asString", [0])._value + "."));
                                        curarg++;
                                        // End argument checking
                                        setModuleName("objectdraw");
                                        setLineNumber(892);    // compilenode string
                                        var string1285 = new GraceString("change");
                                        var block1286 = new GraceBlock(this, 892, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block1286.real = function(var___95____95__22) {
                                          setLineNumber(893);    // compilenode identifier
                                          onSelf = true;
                                          var call1287 = callmethodChecked(this, "eventSource", [1], this);
                                          var call1288 = callmethodChecked(var_f, "apply", [1], call1287);
                                          return call1288;
                                        };
                                        setLineNumber(892);    // compilenode call
                                        onSelf = true;
                                        var call1289 = callmethodChecked(this, "element", [0]);
                                        var call1290 = callmethodChecked(call1289, "addEventListener", [2], string1285, block1286);
                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1290)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method onChangeDo(1) does not have " + 
                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                        return call1290;
                                      };
                                      func1284.paramTypes = [];
                                      func1284.paramTypes.push([]);
                                      func1284.paramCounts = [1];
                                      obj1268.methods["onChangeDo"] = func1284;
                                      func1284.definitionLine = 891;
                                      func1284.definitionModule = "objectdraw";
                                      var func1291 = function(argcv) {    // method asString
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                        setModuleName("objectdraw");
                                        setLineNumber(899);    // compilenode string
                                        var string1292 = new GraceString("an input");
                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], string1292)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method asString does not have " + 
                                                    callmethod(var_String, "asString", [0])._value + "."));
                                        return string1292;
                                      };
                                      func1291.paramCounts = [0];
                                      obj1268.methods["asString"] = func1291;
                                      func1291.definitionLine = 898;
                                      func1291.definitionModule = "objectdraw";
                                      setLineNumber(874);    // compilenode call
                                      var call1293 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call1294 = callmethodChecked(call1293, "componentFromElement()object", [1, 1], var_element__39__, this);
                                      obj1268.superobj = call1294;
                                      if (call1294.data) obj1268.data = call1294.data;
                                      if (call1294.hasOwnProperty('_value'))
                                          obj1268._value = call1294._value;
                                      superDepth = origSuperDepth;
                                    };
                                    obj_init_1268.apply(inheritingObject, []);
                                    return obj1268;
                                    };
                                    this.methods["inputFromElement()object"] = func1267;
                                  setLineNumber(904);    // compilenode method
                                  var func1295 = function(argcv) {    // method inputOfElementType(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_elementType = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inputOfElementType(1)"));
                                    // Start argument checking
                                    curarg = 1;
                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("argument 1 in inputOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                callmethod(var_String, "asString", [0])._value + "."));
                                    curarg++;
                                    // End argument checking
                                    setModuleName("objectdraw");
                                    var obj1296 = Grace_allocObject(null, "objectdraw.inputOfElementType");
                                    obj1296.definitionModule = "objectdraw";
                                    obj1296.definitionLine = 904;
                                    obj1296.outer = this;
                                    var reader_objectdraw_outer1297 = function() {
                                      return this.outer;
                                    };
                                    obj1296.methods["outer"] = reader_objectdraw_outer1297;
                                    var obj_init_1296 = function() {
                                      var origSuperDepth = superDepth;
                                      superDepth = obj1296;
                                      setLineNumber(905);    // compilenode identifier
                                      var call1298 = callmethodChecked(var_document, "createElement", [1], var_elementType);
                                      var call1299 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call1300 = callmethodChecked(call1299, "inputFromElement()object", [1, 1], call1298, this);
                                      obj1296.superobj = call1300;
                                      if (call1300.data) obj1296.data = call1300.data;
                                      if (call1300.hasOwnProperty('_value'))
                                          obj1296._value = call1300._value;
                                      superDepth = origSuperDepth;
                                    };
                                    obj_init_1296.apply(obj1296, []);
                                    setLineNumber(904);    // return value
                                    if (!Grace_isTrue(callmethod(var_Input, "match", [1], obj1296)))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("result of method inputOfElementType(1) does not have " + 
                                                callmethod(var_Input, "asString", [0])._value + "."));
                                    return obj1296;
                                  };
                                  func1295.paramTypes = [];
                                  func1295.paramTypes.push([type_String, "elementType"]);
                                  func1295.paramCounts = [1];
                                  this.methods["inputOfElementType"] = func1295;
                                  func1295.definitionLine = 904;
                                  func1295.definitionModule = "objectdraw";
                                    var func1301 = function(argcv) {    // method inputOfElementType(1     )()object
                                      var curarg = 1;
                                      var var_elementType = arguments[curarg];
                                      curarg++;
                                      var inheritingObject = arguments[curarg++];
                                      // Start argument processing
                                      curarg = 1;
                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in inputOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                  callmethod(var_String, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument processing
                                      setModuleName("objectdraw");
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var obj1302 = Grace_allocObject(null, "inputOfElementType");
                                      obj1302.definitionModule = "objectdraw";
                                      obj1302.definitionLine = 904;
                                      var inho1302 = inheritingObject;
                                      while (inho1302.superobj) inho1302 = inho1302.superobj;
                                      inho1302.superobj = obj1302;
                                      obj1302.data = inheritingObject.data;
                                      if (inheritingObject.hasOwnProperty('_value'))
                                        obj1302._value = inheritingObject._value;
                                      obj1302.outer = this;
                                      var reader_objectdraw_outer1303 = function() {
                                        return this.outer;
                                      };
                                      obj1302.methods["outer"] = reader_objectdraw_outer1303;
                                      var obj_init_1302 = function() {
                                        var origSuperDepth = superDepth;
                                        superDepth = obj1302;
                                        setLineNumber(905);    // compilenode identifier
                                        var call1304 = callmethodChecked(var_document, "createElement", [1], var_elementType);
                                        var call1305 = callmethodChecked(superDepth, "outer", [0]);
                                        onOuter = true;
                                        onSelf = true;
                                        var call1306 = callmethodChecked(call1305, "inputFromElement()object", [1, 1], call1304, this);
                                        obj1302.superobj = call1306;
                                        if (call1306.data) obj1302.data = call1306.data;
                                        if (call1306.hasOwnProperty('_value'))
                                            obj1302._value = call1306._value;
                                        superDepth = origSuperDepth;
                                      };
                                      obj_init_1302.apply(inheritingObject, []);
                                      return obj1302;
                                      };
                                      func1301.paramTypes = [];
                                      func1301.paramTypes.push([type_String, "elementType"]);
                                      this.methods["inputOfElementType()object"] = func1301;
                                    setLineNumber(909);    // compilenode method
                                    var func1307 = function(argcv) {    // method inputOfType(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_inputType = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inputOfType(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in inputOfType (arg list 1), which corresponds to parameter inputType, does not have " + 
                                                  callmethod(var_String, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("objectdraw");
                                      var obj1308 = Grace_allocObject(null, "objectdraw.inputOfType");
                                      obj1308.definitionModule = "objectdraw";
                                      obj1308.definitionLine = 909;
                                      obj1308.outer = this;
                                      var reader_objectdraw_outer1309 = function() {
                                        return this.outer;
                                      };
                                      obj1308.methods["outer"] = reader_objectdraw_outer1309;
                                      var obj_init_1308 = function() {
                                        var origSuperDepth = superDepth;
                                        superDepth = obj1308;
                                        setLineNumber(910);    // compilenode string
                                        var string1310 = new GraceString("input");
                                        var call1311 = callmethodChecked(superDepth, "outer", [0]);
                                        onOuter = true;
                                        onSelf = true;
                                        var call1312 = callmethodChecked(call1311, "inputOfElementType()object", [1, 1], string1310, this);
                                        obj1308.superobj = call1312;
                                        if (call1312.data) obj1308.data = call1312.data;
                                        if (call1312.hasOwnProperty('_value'))
                                            obj1308._value = call1312._value;
                                        setLineNumber(912);    // compilenode string
                                        var string1313 = new GraceString("type");
                                        onSelf = true;
                                        var call1314 = callmethodChecked(this, "element", [0]);
                                        var call1315 = callmethodChecked(call1314, "setAttribute", [2], string1313, var_inputType);
                                        superDepth = origSuperDepth;
                                      };
                                      obj_init_1308.apply(obj1308, []);
                                      setLineNumber(909);    // return value
                                      if (!Grace_isTrue(callmethod(var_Input, "match", [1], obj1308)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method inputOfType(1) does not have " + 
                                                  callmethod(var_Input, "asString", [0])._value + "."));
                                      return obj1308;
                                    };
                                    func1307.paramTypes = [];
                                    func1307.paramTypes.push([type_String, "inputType"]);
                                    func1307.paramCounts = [1];
                                    this.methods["inputOfType"] = func1307;
                                    func1307.definitionLine = 909;
                                    func1307.definitionModule = "objectdraw";
                                      var func1316 = function(argcv) {    // method inputOfType(1     )()object
                                        var curarg = 1;
                                        var var_inputType = arguments[curarg];
                                        curarg++;
                                        var inheritingObject = arguments[curarg++];
                                        // Start argument processing
                                        curarg = 1;
                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in inputOfType (arg list 1), which corresponds to parameter inputType, does not have " + 
                                                    callmethod(var_String, "asString", [0])._value + "."));
                                        curarg++;
                                        // End argument processing
                                        setModuleName("objectdraw");
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var obj1317 = Grace_allocObject(null, "inputOfType");
                                        obj1317.definitionModule = "objectdraw";
                                        obj1317.definitionLine = 909;
                                        var inho1317 = inheritingObject;
                                        while (inho1317.superobj) inho1317 = inho1317.superobj;
                                        inho1317.superobj = obj1317;
                                        obj1317.data = inheritingObject.data;
                                        if (inheritingObject.hasOwnProperty('_value'))
                                          obj1317._value = inheritingObject._value;
                                        obj1317.outer = this;
                                        var reader_objectdraw_outer1318 = function() {
                                          return this.outer;
                                        };
                                        obj1317.methods["outer"] = reader_objectdraw_outer1318;
                                        var obj_init_1317 = function() {
                                          var origSuperDepth = superDepth;
                                          superDepth = obj1317;
                                          setLineNumber(910);    // compilenode string
                                          var string1319 = new GraceString("input");
                                          var call1320 = callmethodChecked(superDepth, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call1321 = callmethodChecked(call1320, "inputOfElementType()object", [1, 1], string1319, this);
                                          obj1317.superobj = call1321;
                                          if (call1321.data) obj1317.data = call1321.data;
                                          if (call1321.hasOwnProperty('_value'))
                                              obj1317._value = call1321._value;
                                          setLineNumber(912);    // compilenode string
                                          var string1322 = new GraceString("type");
                                          onSelf = true;
                                          var call1323 = callmethodChecked(this, "element", [0]);
                                          var call1324 = callmethodChecked(call1323, "setAttribute", [2], string1322, var_inputType);
                                          superDepth = origSuperDepth;
                                        };
                                        obj_init_1317.apply(inheritingObject, []);
                                        return obj1317;
                                        };
                                        func1316.paramTypes = [];
                                        func1316.paramTypes.push([type_String, "inputType"]);
                                        this.methods["inputOfType()object"] = func1316;
                                      setLineNumber(916);    // compilenode method
                                      var func1325 = function(argcv) {    // method labeledWidgetFromElement(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_element__39__ = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeledWidgetFromElement(1)"));
                                        setModuleName("objectdraw");
                                        var obj1326 = Grace_allocObject(null, "objectdraw.labeledWidgetFromElement");
                                        obj1326.definitionModule = "objectdraw";
                                        obj1326.definitionLine = 916;
                                        obj1326.outer = this;
                                        var reader_objectdraw_outer1327 = function() {
                                          return this.outer;
                                        };
                                        obj1326.methods["outer"] = reader_objectdraw_outer1327;
                                        var obj_init_1326 = function() {
                                          var origSuperDepth = superDepth;
                                          superDepth = obj1326;
                                          var func1328 = function(argcv) {    // method labelElement
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labelElement"));
                                            setModuleName("objectdraw");
                                            setLineNumber(922);    // compilenode call
                                            onSelf = true;
                                            var call1329 = callmethodChecked(this, "element", [0]);
                                            if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call1329)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method labelElement does not have " + 
                                                        callmethod(var_Foreign, "asString", [0])._value + "."));
                                            return call1329;
                                          };
                                          func1328.confidential = true;
                                          func1328.paramCounts = [0];
                                          obj1326.methods["labelElement"] = func1328;
                                          func1328.definitionLine = 921;
                                          func1328.definitionModule = "objectdraw";
                                          var func1330 = function(argcv) {    // method label
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label"));
                                            setModuleName("objectdraw");
                                            setLineNumber(927);    // compilenode call
                                            onSelf = true;
                                            var call1331 = callmethodChecked(this, "labelElement", [0]);
                                            var call1332 = callmethodChecked(call1331, "textContent", [0]);
                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], call1332)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method label does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            return call1332;
                                          };
                                          func1330.paramCounts = [0];
                                          obj1326.methods["label"] = func1330;
                                          func1330.definitionLine = 925;
                                          func1330.definitionModule = "objectdraw";
                                          var func1333 = function(argcv) {    // method label:=(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_value = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label:=(1)"));
                                            // Start argument checking
                                            curarg = 1;
                                            setLineNumber(930);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in label:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            curarg++;
                                            // End argument checking
                                            setModuleName("objectdraw");
                                            setLineNumber(932);    // compilenode call
                                            onSelf = true;
                                            var call1334 = callmethodChecked(this, "labelElement", [0]);
                                            var call1335 = callmethodChecked(call1334, "textContent:=", [1], var_value);
                                            setLineNumber(933);    // return value
                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method label:=(1) does not have " + 
                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                            return var_done;
                                          };
                                          func1333.paramTypes = [];
                                          func1333.paramTypes.push([type_String, "value"]);
                                          func1333.paramCounts = [1];
                                          obj1326.methods["label:="] = func1333;
                                          func1333.definitionLine = 930;
                                          func1333.definitionModule = "objectdraw";
                                          var func1336 = function(argcv) {    // method asString
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                            setModuleName("objectdraw");
                                            setLineNumber(938);    // compilenode string
                                            var string1337 = new GraceString("");
                                            onSelf = true;
                                            var call1339 = callmethodChecked(this, "label", [0]);
                                            var string1341 = new GraceString("an input labeled: ");
                                            var opresult1343 = callmethodChecked(string1341, "++", [1], call1339);
                                            var opresult1345 = callmethodChecked(opresult1343, "++", [1], string1337);
                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1345)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method asString does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            return opresult1345;
                                          };
                                          func1336.paramCounts = [0];
                                          obj1326.methods["asString"] = func1336;
                                          func1336.definitionLine = 936;
                                          func1336.definitionModule = "objectdraw";
                                          setLineNumber(919);    // compilenode call
                                          var call1346 = callmethodChecked(superDepth, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call1347 = callmethodChecked(call1346, "inputFromElement()object", [1, 1], var_element__39__, this);
                                          obj1326.superobj = call1347;
                                          if (call1347.data) obj1326.data = call1347.data;
                                          if (call1347.hasOwnProperty('_value'))
                                              obj1326._value = call1347._value;
                                          superDepth = origSuperDepth;
                                        };
                                        obj_init_1326.apply(obj1326, []);
                                        setLineNumber(916);    // return value
                                        if (!Grace_isTrue(callmethod(var_Labeled, "match", [1], obj1326)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method labeledWidgetFromElement(1) does not have " + 
                                                    callmethod(var_Labeled, "asString", [0])._value + "."));
                                        return obj1326;
                                      };
                                      func1325.paramCounts = [1];
                                      this.methods["labeledWidgetFromElement"] = func1325;
                                      func1325.definitionLine = 916;
                                      func1325.definitionModule = "objectdraw";
                                        var func1348 = function(argcv) {    // method labeledWidgetFromElement(1     )()object
                                          var curarg = 1;
                                          var var_element__39__ = arguments[curarg];
                                          curarg++;
                                          var inheritingObject = arguments[curarg++];
                                          // Start argument processing
                                          curarg = 1;
                                          curarg++;
                                          // End argument processing
                                          setModuleName("objectdraw");
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var obj1349 = Grace_allocObject(null, "labeledWidgetFromElement");
                                          obj1349.definitionModule = "objectdraw";
                                          obj1349.definitionLine = 916;
                                          var inho1349 = inheritingObject;
                                          while (inho1349.superobj) inho1349 = inho1349.superobj;
                                          inho1349.superobj = obj1349;
                                          obj1349.data = inheritingObject.data;
                                          if (inheritingObject.hasOwnProperty('_value'))
                                            obj1349._value = inheritingObject._value;
                                          obj1349.outer = this;
                                          var reader_objectdraw_outer1350 = function() {
                                            return this.outer;
                                          };
                                          obj1349.methods["outer"] = reader_objectdraw_outer1350;
                                          var obj_init_1349 = function() {
                                            var origSuperDepth = superDepth;
                                            superDepth = obj1349;
                                            var func1351 = function(argcv) {    // method labelElement
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labelElement"));
                                              setModuleName("objectdraw");
                                              setLineNumber(922);    // compilenode call
                                              onSelf = true;
                                              var call1352 = callmethodChecked(this, "element", [0]);
                                              if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call1352)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method labelElement does not have " + 
                                                          callmethod(var_Foreign, "asString", [0])._value + "."));
                                              return call1352;
                                            };
                                            func1351.confidential = true;
                                            func1351.paramCounts = [0];
                                            obj1349.methods["labelElement"] = func1351;
                                            func1351.definitionLine = 921;
                                            func1351.definitionModule = "objectdraw";
                                            var func1353 = function(argcv) {    // method label
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label"));
                                              setModuleName("objectdraw");
                                              setLineNumber(927);    // compilenode call
                                              onSelf = true;
                                              var call1354 = callmethodChecked(this, "labelElement", [0]);
                                              var call1355 = callmethodChecked(call1354, "textContent", [0]);
                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], call1355)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method label does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              return call1355;
                                            };
                                            func1353.paramCounts = [0];
                                            obj1349.methods["label"] = func1353;
                                            func1353.definitionLine = 925;
                                            func1353.definitionModule = "objectdraw";
                                            var func1356 = function(argcv) {    // method label:=(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_value = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label:=(1)"));
                                              // Start argument checking
                                              curarg = 1;
                                              setLineNumber(930);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in label:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              curarg++;
                                              // End argument checking
                                              setModuleName("objectdraw");
                                              setLineNumber(932);    // compilenode call
                                              onSelf = true;
                                              var call1357 = callmethodChecked(this, "labelElement", [0]);
                                              var call1358 = callmethodChecked(call1357, "textContent:=", [1], var_value);
                                              setLineNumber(933);    // return value
                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method label:=(1) does not have " + 
                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                              return var_done;
                                            };
                                            func1356.paramTypes = [];
                                            func1356.paramTypes.push([type_String, "value"]);
                                            func1356.paramCounts = [1];
                                            obj1349.methods["label:="] = func1356;
                                            func1356.definitionLine = 930;
                                            func1356.definitionModule = "objectdraw";
                                            var func1359 = function(argcv) {    // method asString
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                              setModuleName("objectdraw");
                                              setLineNumber(938);    // compilenode string
                                              var string1360 = new GraceString("");
                                              onSelf = true;
                                              var call1362 = callmethodChecked(this, "label", [0]);
                                              var string1364 = new GraceString("an input labeled: ");
                                              var opresult1366 = callmethodChecked(string1364, "++", [1], call1362);
                                              var opresult1368 = callmethodChecked(opresult1366, "++", [1], string1360);
                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1368)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method asString does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              return opresult1368;
                                            };
                                            func1359.paramCounts = [0];
                                            obj1349.methods["asString"] = func1359;
                                            func1359.definitionLine = 936;
                                            func1359.definitionModule = "objectdraw";
                                            setLineNumber(919);    // compilenode call
                                            var call1369 = callmethodChecked(superDepth, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call1370 = callmethodChecked(call1369, "inputFromElement()object", [1, 1], var_element__39__, this);
                                            obj1349.superobj = call1370;
                                            if (call1370.data) obj1349.data = call1370.data;
                                            if (call1370.hasOwnProperty('_value'))
                                                obj1349._value = call1370._value;
                                            superDepth = origSuperDepth;
                                          };
                                          obj_init_1349.apply(inheritingObject, []);
                                          return obj1349;
                                          };
                                          this.methods["labeledWidgetFromElement()object"] = func1348;
                                        setLineNumber(942);    // compilenode method
                                        var func1371 = function(argcv) {    // method labeledWidgetOfElementType(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_elementType = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeledWidgetOfElementType(1)"));
                                          // Start argument checking
                                          curarg = 1;
                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("argument 1 in labeledWidgetOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                      callmethod(var_String, "asString", [0])._value + "."));
                                          curarg++;
                                          // End argument checking
                                          setModuleName("objectdraw");
                                          var obj1372 = Grace_allocObject(null, "objectdraw.labeledWidgetOfElementType");
                                          obj1372.definitionModule = "objectdraw";
                                          obj1372.definitionLine = 942;
                                          obj1372.outer = this;
                                          var reader_objectdraw_outer1373 = function() {
                                            return this.outer;
                                          };
                                          obj1372.methods["outer"] = reader_objectdraw_outer1373;
                                          var obj_init_1372 = function() {
                                            var origSuperDepth = superDepth;
                                            superDepth = obj1372;
                                            setLineNumber(945);    // compilenode identifier
                                            var call1374 = callmethodChecked(var_document, "createElement", [1], var_elementType);
                                            var call1375 = callmethodChecked(superDepth, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call1376 = callmethodChecked(call1375, "labeledWidgetFromElement()object", [1, 1], call1374, this);
                                            obj1372.superobj = call1376;
                                            if (call1376.data) obj1372.data = call1376.data;
                                            if (call1376.hasOwnProperty('_value'))
                                                obj1372._value = call1376._value;
                                            superDepth = origSuperDepth;
                                          };
                                          obj_init_1372.apply(obj1372, []);
                                          setLineNumber(942);    // return value
                                          if (!Grace_isTrue(callmethod(var_Labeled, "match", [1], obj1372)))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("result of method labeledWidgetOfElementType(1) does not have " + 
                                                      callmethod(var_Labeled, "asString", [0])._value + "."));
                                          return obj1372;
                                        };
                                        func1371.paramTypes = [];
                                        func1371.paramTypes.push([type_String, "elementType"]);
                                        func1371.paramCounts = [1];
                                        this.methods["labeledWidgetOfElementType"] = func1371;
                                        func1371.definitionLine = 942;
                                        func1371.definitionModule = "objectdraw";
                                          var func1377 = function(argcv) {    // method labeledWidgetOfElementType(1     )()object
                                            var curarg = 1;
                                            var var_elementType = arguments[curarg];
                                            curarg++;
                                            var inheritingObject = arguments[curarg++];
                                            // Start argument processing
                                            curarg = 1;
                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in labeledWidgetOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            curarg++;
                                            // End argument processing
                                            setModuleName("objectdraw");
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var obj1378 = Grace_allocObject(null, "labeledWidgetOfElementType");
                                            obj1378.definitionModule = "objectdraw";
                                            obj1378.definitionLine = 942;
                                            var inho1378 = inheritingObject;
                                            while (inho1378.superobj) inho1378 = inho1378.superobj;
                                            inho1378.superobj = obj1378;
                                            obj1378.data = inheritingObject.data;
                                            if (inheritingObject.hasOwnProperty('_value'))
                                              obj1378._value = inheritingObject._value;
                                            obj1378.outer = this;
                                            var reader_objectdraw_outer1379 = function() {
                                              return this.outer;
                                            };
                                            obj1378.methods["outer"] = reader_objectdraw_outer1379;
                                            var obj_init_1378 = function() {
                                              var origSuperDepth = superDepth;
                                              superDepth = obj1378;
                                              setLineNumber(945);    // compilenode identifier
                                              var call1380 = callmethodChecked(var_document, "createElement", [1], var_elementType);
                                              var call1381 = callmethodChecked(superDepth, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call1382 = callmethodChecked(call1381, "labeledWidgetFromElement()object", [1, 1], call1380, this);
                                              obj1378.superobj = call1382;
                                              if (call1382.data) obj1378.data = call1382.data;
                                              if (call1382.hasOwnProperty('_value'))
                                                  obj1378._value = call1382._value;
                                              superDepth = origSuperDepth;
                                            };
                                            obj_init_1378.apply(inheritingObject, []);
                                            return obj1378;
                                            };
                                            func1377.paramTypes = [];
                                            func1377.paramTypes.push([type_String, "elementType"]);
                                            this.methods["labeledWidgetOfElementType()object"] = func1377;
                                          setLineNumber(948);    // compilenode method
                                          var func1383 = function(argcv) {    // method labeledWidgetOfElementType(1)labeled(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_elementType = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeledWidgetOfElementType (arg list 1) of labeledWidgetOfElementType(1)labeled(1)"));
                                            var var_newLabel = arguments[curarg];
                                            curarg++;
                                            if (argcv[1] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeled (arg list 2) of labeledWidgetOfElementType(1)labeled(1)"));
                                            // Start argument checking
                                            curarg = 1;
                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in labeledWidgetOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            curarg++;
                                            setLineNumber(949);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter newLabel, does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            curarg++;
                                            // End argument checking
                                            setModuleName("objectdraw");
                                            setLineNumber(948);    // compilenode object
                                            var obj1384 = Grace_allocObject(null, "objectdraw.labeledWidgetOfElementType()labeled");
                                            obj1384.definitionModule = "objectdraw";
                                            obj1384.definitionLine = 948;
                                            obj1384.outer = this;
                                            var reader_objectdraw_outer1385 = function() {
                                              return this.outer;
                                            };
                                            obj1384.methods["outer"] = reader_objectdraw_outer1385;
                                            var obj_init_1384 = function() {
                                              var origSuperDepth = superDepth;
                                              superDepth = obj1384;
                                              setLineNumber(952);    // compilenode call
                                              var call1386 = callmethodChecked(superDepth, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call1387 = callmethodChecked(call1386, "labeledWidgetOfElementType()object", [1, 1], var_elementType, this);
                                              obj1384.superobj = call1387;
                                              if (call1387.data) obj1384.data = call1387.data;
                                              if (call1387.hasOwnProperty('_value'))
                                                  obj1384._value = call1387._value;
                                              setLineNumber(953);    // compilenode identifier
                                              onSelf = true;
                                              var call1388 = callmethodChecked(this, "label:=", [1], var_newLabel);
                                              superDepth = origSuperDepth;
                                            };
                                            obj_init_1384.apply(obj1384, []);
                                            setLineNumber(948);    // return value
                                            if (!Grace_isTrue(callmethod(var_Labeled, "match", [1], obj1384)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method labeledWidgetOfElementType(1)labeled(1) does not have " + 
                                                        callmethod(var_Labeled, "asString", [0])._value + "."));
                                            return obj1384;
                                          };
                                          func1383.paramTypes = [];
                                          func1383.paramTypes.push([type_String, "elementType"]);
                                          func1383.paramTypes.push([type_String, "newLabel"]);
                                          func1383.paramCounts = [1, 1];
                                          this.methods["labeledWidgetOfElementType()labeled"] = func1383;
                                          func1383.definitionLine = 948;
                                          func1383.definitionModule = "objectdraw";
                                            var func1389 = function(argcv) {    // method labeledWidgetOfElementType(1     )labeled(1     )()object
                                              var curarg = 1;
                                              var var_elementType = arguments[curarg];
                                              curarg++;
                                              var var_newLabel = arguments[curarg];
                                              curarg++;
                                              var inheritingObject = arguments[curarg++];
                                              // Start argument processing
                                              curarg = 1;
                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in labeledWidgetOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              curarg++;
                                              setLineNumber(949);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter newLabel, does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              curarg++;
                                              // End argument processing
                                              setModuleName("objectdraw");
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var obj1390 = Grace_allocObject(null, "labeledWidgetOfElementType()labeled");
                                              obj1390.definitionModule = "objectdraw";
                                              obj1390.definitionLine = 948;
                                              var inho1390 = inheritingObject;
                                              while (inho1390.superobj) inho1390 = inho1390.superobj;
                                              inho1390.superobj = obj1390;
                                              obj1390.data = inheritingObject.data;
                                              if (inheritingObject.hasOwnProperty('_value'))
                                                obj1390._value = inheritingObject._value;
                                              obj1390.outer = this;
                                              var reader_objectdraw_outer1391 = function() {
                                                return this.outer;
                                              };
                                              obj1390.methods["outer"] = reader_objectdraw_outer1391;
                                              var obj_init_1390 = function() {
                                                var origSuperDepth = superDepth;
                                                superDepth = obj1390;
                                                setLineNumber(952);    // compilenode call
                                                var call1392 = callmethodChecked(superDepth, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call1393 = callmethodChecked(call1392, "labeledWidgetOfElementType()object", [1, 1], var_elementType, this);
                                                obj1390.superobj = call1393;
                                                if (call1393.data) obj1390.data = call1393.data;
                                                if (call1393.hasOwnProperty('_value'))
                                                    obj1390._value = call1393._value;
                                                setLineNumber(953);    // compilenode identifier
                                                onSelf = true;
                                                var call1394 = callmethodChecked(this, "label:=", [1], var_newLabel);
                                                superDepth = origSuperDepth;
                                              };
                                              obj_init_1390.apply(inheritingObject, []);
                                              return obj1390;
                                              };
                                              func1389.paramTypes = [];
                                              func1389.paramTypes.push([type_String, "elementType"]);
                                              func1389.paramTypes.push([type_String, "newLabel"]);
                                              this.methods["labeledWidgetOfElementType()labeled()object"] = func1389;
                                            setLineNumber(957);    // compilenode method
                                            var func1395 = function(argcv) {    // method fieldOfType(1)labeled(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_inputType = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fieldOfType (arg list 1) of fieldOfType(1)labeled(1)"));
                                              var var_label__39__ = arguments[curarg];
                                              curarg++;
                                              if (argcv[1] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeled (arg list 2) of fieldOfType(1)labeled(1)"));
                                              // Start argument checking
                                              curarg = 1;
                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in fieldOfType (arg list 1), which corresponds to parameter inputType, does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              curarg++;
                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter label', does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              curarg++;
                                              // End argument checking
                                              setModuleName("objectdraw");
                                              var obj1396 = Grace_allocObject(null, "objectdraw.fieldOfType()labeled");
                                              obj1396.definitionModule = "objectdraw";
                                              obj1396.definitionLine = 957;
                                              obj1396.outer = this;
                                              var reader_objectdraw_outer1397 = function() {
                                                return this.outer;
                                              };
                                              obj1396.methods["outer"] = reader_objectdraw_outer1397;
                                              var obj_init_1396 = function() {
                                                var origSuperDepth = superDepth;
                                                superDepth = obj1396;
                                                var func1398 = function(argcv) {    // method label
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label"));
                                                  setModuleName("objectdraw");
                                                  setLineNumber(964);    // compilenode call
                                                  onSelf = true;
                                                  var call1399 = callmethodChecked(this, "element", [0]);
                                                  var call1400 = callmethodChecked(call1399, "placeholder", [0]);
                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], call1400)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method label does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  return call1400;
                                                };
                                                func1398.paramCounts = [0];
                                                obj1396.methods["label"] = func1398;
                                                func1398.definitionLine = 963;
                                                func1398.definitionModule = "objectdraw";
                                                var func1401 = function(argcv) {    // method label:=(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_value = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label:=(1)"));
                                                  // Start argument checking
                                                  curarg = 1;
                                                  setLineNumber(968);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in label:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("objectdraw");
                                                  setLineNumber(969);    // compilenode call
                                                  onSelf = true;
                                                  var call1402 = callmethodChecked(this, "element", [0]);
                                                  var call1403 = callmethodChecked(call1402, "placeholder:=", [1], var_value);
                                                  setLineNumber(970);    // return value
                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method label:=(1) does not have " + 
                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                  return var_done;
                                                };
                                                func1401.paramTypes = [];
                                                func1401.paramTypes.push([type_String, "value"]);
                                                func1401.paramCounts = [1];
                                                obj1396.methods["label:="] = func1401;
                                                func1401.definitionLine = 968;
                                                func1401.definitionModule = "objectdraw";
                                                var func1404 = function(argcv) {    // method asString
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                  setModuleName("objectdraw");
                                                  setLineNumber(975);    // compilenode string
                                                  var string1405 = new GraceString("");
                                                  onSelf = true;
                                                  var call1407 = callmethodChecked(this, "label", [0]);
                                                  var string1409 = new GraceString("a field labeled: ");
                                                  var opresult1411 = callmethodChecked(string1409, "++", [1], call1407);
                                                  var opresult1413 = callmethodChecked(opresult1411, "++", [1], string1405);
                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1413)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method asString does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  return opresult1413;
                                                };
                                                func1404.paramCounts = [0];
                                                obj1396.methods["asString"] = func1404;
                                                func1404.definitionLine = 974;
                                                func1404.definitionModule = "objectdraw";
                                                setLineNumber(960);    // compilenode call
                                                var call1414 = callmethodChecked(superDepth, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call1415 = callmethodChecked(call1414, "inputOfType()object", [1, 1], var_inputType, this);
                                                obj1396.superobj = call1415;
                                                if (call1415.data) obj1396.data = call1415.data;
                                                if (call1415.hasOwnProperty('_value'))
                                                    obj1396._value = call1415._value;
                                                setLineNumber(978);    // compilenode identifier
                                                onSelf = true;
                                                var call1416 = callmethodChecked(this, "label:=", [1], var_label__39__);
                                                superDepth = origSuperDepth;
                                              };
                                              obj_init_1396.apply(obj1396, []);
                                              setLineNumber(957);    // return value
                                              if (!Grace_isTrue(callmethod(var_Input, "match", [1], obj1396)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method fieldOfType(1)labeled(1) does not have " + 
                                                          callmethod(var_Input, "asString", [0])._value + "."));
                                              return obj1396;
                                            };
                                            func1395.paramTypes = [];
                                            func1395.paramTypes.push([type_String, "inputType"]);
                                            func1395.paramTypes.push([type_String, "label'"]);
                                            func1395.paramCounts = [1, 1];
                                            this.methods["fieldOfType()labeled"] = func1395;
                                            func1395.definitionLine = 957;
                                            func1395.definitionModule = "objectdraw";
                                              var func1417 = function(argcv) {    // method fieldOfType(1     )labeled(1     )()object
                                                var curarg = 1;
                                                var var_inputType = arguments[curarg];
                                                curarg++;
                                                var var_label__39__ = arguments[curarg];
                                                curarg++;
                                                var inheritingObject = arguments[curarg++];
                                                // Start argument processing
                                                curarg = 1;
                                                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in fieldOfType (arg list 1), which corresponds to parameter inputType, does not have " + 
                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                curarg++;
                                                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter label', does not have " + 
                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                curarg++;
                                                // End argument processing
                                                setModuleName("objectdraw");
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var obj1418 = Grace_allocObject(null, "fieldOfType()labeled");
                                                obj1418.definitionModule = "objectdraw";
                                                obj1418.definitionLine = 957;
                                                var inho1418 = inheritingObject;
                                                while (inho1418.superobj) inho1418 = inho1418.superobj;
                                                inho1418.superobj = obj1418;
                                                obj1418.data = inheritingObject.data;
                                                if (inheritingObject.hasOwnProperty('_value'))
                                                  obj1418._value = inheritingObject._value;
                                                obj1418.outer = this;
                                                var reader_objectdraw_outer1419 = function() {
                                                  return this.outer;
                                                };
                                                obj1418.methods["outer"] = reader_objectdraw_outer1419;
                                                var obj_init_1418 = function() {
                                                  var origSuperDepth = superDepth;
                                                  superDepth = obj1418;
                                                  var func1420 = function(argcv) {    // method label
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label"));
                                                    setModuleName("objectdraw");
                                                    setLineNumber(964);    // compilenode call
                                                    onSelf = true;
                                                    var call1421 = callmethodChecked(this, "element", [0]);
                                                    var call1422 = callmethodChecked(call1421, "placeholder", [0]);
                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], call1422)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method label does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    return call1422;
                                                  };
                                                  func1420.paramCounts = [0];
                                                  obj1418.methods["label"] = func1420;
                                                  func1420.definitionLine = 963;
                                                  func1420.definitionModule = "objectdraw";
                                                  var func1423 = function(argcv) {    // method label:=(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_value = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label:=(1)"));
                                                    // Start argument checking
                                                    curarg = 1;
                                                    setLineNumber(968);    // compilenode identifier
                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in label:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("objectdraw");
                                                    setLineNumber(969);    // compilenode call
                                                    onSelf = true;
                                                    var call1424 = callmethodChecked(this, "element", [0]);
                                                    var call1425 = callmethodChecked(call1424, "placeholder:=", [1], var_value);
                                                    setLineNumber(970);    // return value
                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method label:=(1) does not have " + 
                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                    return var_done;
                                                  };
                                                  func1423.paramTypes = [];
                                                  func1423.paramTypes.push([type_String, "value"]);
                                                  func1423.paramCounts = [1];
                                                  obj1418.methods["label:="] = func1423;
                                                  func1423.definitionLine = 968;
                                                  func1423.definitionModule = "objectdraw";
                                                  var func1426 = function(argcv) {    // method asString
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                    setModuleName("objectdraw");
                                                    setLineNumber(975);    // compilenode string
                                                    var string1427 = new GraceString("");
                                                    onSelf = true;
                                                    var call1429 = callmethodChecked(this, "label", [0]);
                                                    var string1431 = new GraceString("a field labeled: ");
                                                    var opresult1433 = callmethodChecked(string1431, "++", [1], call1429);
                                                    var opresult1435 = callmethodChecked(opresult1433, "++", [1], string1427);
                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1435)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method asString does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    return opresult1435;
                                                  };
                                                  func1426.paramCounts = [0];
                                                  obj1418.methods["asString"] = func1426;
                                                  func1426.definitionLine = 974;
                                                  func1426.definitionModule = "objectdraw";
                                                  setLineNumber(960);    // compilenode call
                                                  var call1436 = callmethodChecked(superDepth, "outer", [0]);
                                                  onOuter = true;
                                                  onSelf = true;
                                                  var call1437 = callmethodChecked(call1436, "inputOfType()object", [1, 1], var_inputType, this);
                                                  obj1418.superobj = call1437;
                                                  if (call1437.data) obj1418.data = call1437.data;
                                                  if (call1437.hasOwnProperty('_value'))
                                                      obj1418._value = call1437._value;
                                                  setLineNumber(978);    // compilenode identifier
                                                  onSelf = true;
                                                  var call1438 = callmethodChecked(this, "label:=", [1], var_label__39__);
                                                  superDepth = origSuperDepth;
                                                };
                                                obj_init_1418.apply(inheritingObject, []);
                                                return obj1418;
                                                };
                                                func1417.paramTypes = [];
                                                func1417.paramTypes.push([type_String, "inputType"]);
                                                func1417.paramTypes.push([type_String, "label'"]);
                                                this.methods["fieldOfType()labeled()object"] = func1417;
                                              setLineNumber(986);    // compilenode method
                                              var func1439 = function(argcv) {    // method eventLogKind(1)response(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_kind__39__ = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for eventLogKind (arg list 1) of eventLogKind(1)response(1)"));
                                                var var_response__39__ = arguments[curarg];
                                                curarg++;
                                                if (argcv[1] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for response (arg list 2) of eventLogKind(1)response(1)"));
                                                // Start argument checking
                                                curarg = 1;
                                                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in eventLogKind (arg list 1), which corresponds to parameter kind', does not have " + 
                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                curarg++;
                                                setLineNumber(987);    // compilenode identifier
                                                if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in response (arg list 2), which corresponds to parameter response', does not have " + 
                                                            callmethod(var_Procedure, "asString", [0])._value + "."));
                                                curarg++;
                                                // End argument checking
                                                setModuleName("objectdraw");
                                                setLineNumber(986);    // compilenode object
                                                var obj1440 = Grace_allocObject(GraceObject, "objectdraw.eventLogKind()response");
                                                obj1440.definitionModule = "objectdraw";
                                                obj1440.definitionLine = 986;
                                                obj1440.outer = this;
                                                var reader_objectdraw_outer1441 = function() {
                                                  return this.outer;
                                                };
                                                obj1440.methods["outer"] = reader_objectdraw_outer1441;
                                                var obj_init_1440 = function() {
                                                  var origSuperDepth = superDepth;
                                                  superDepth = obj1440;
                                                  setLineNumber(988);    // compilenode identifier
                                                  obj1440.data["kind"] = var_kind__39__;
                                                  var reader_objectdraw_kind1442 = function() {
                                                    return this.data["kind"];
                                                  };
                                                  reader_objectdraw_kind1442.def = true;
                                                  obj1440.methods["kind"] = reader_objectdraw_kind1442;
                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], var_kind__39__)))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("value of def 'kind' is not of type String"));
                                                  setLineNumber(989);    // compilenode identifier
                                                  obj1440.data["response"] = var_response__39__;
                                                  var reader_objectdraw_response1443 = function() {
                                                    return this.data["response"];
                                                  };
                                                  reader_objectdraw_response1443.def = true;
                                                  obj1440.methods["response"] = reader_objectdraw_response1443;
                                                  if (!Grace_isTrue(callmethod(var_Procedure, "match", [1], var_response__39__)))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("value of def 'response' is not of type Procedure"));
                                                  superDepth = origSuperDepth;
                                                };
                                                obj_init_1440.apply(obj1440, []);
                                                return obj1440;
                                              };
                                              func1439.paramTypes = [];
                                              func1439.paramTypes.push([type_String, "kind'"]);
                                              func1439.paramTypes.push([]);
                                              func1439.confidential = true;
                                              func1439.paramCounts = [1, 1];
                                              this.methods["eventLogKind()response"] = func1439;
                                              func1439.definitionLine = 986;
                                              func1439.definitionModule = "objectdraw";
                                                var func1444 = function(argcv) {    // method eventLogKind(1     )response(1     )()object
                                                  var curarg = 1;
                                                  var var_kind__39__ = arguments[curarg];
                                                  curarg++;
                                                  var var_response__39__ = arguments[curarg];
                                                  curarg++;
                                                  var inheritingObject = arguments[curarg++];
                                                  // Start argument processing
                                                  curarg = 1;
                                                  setLineNumber(986);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in eventLogKind (arg list 1), which corresponds to parameter kind', does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  curarg++;
                                                  setLineNumber(987);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in response (arg list 2), which corresponds to parameter response', does not have " + 
                                                              callmethod(var_Procedure, "asString", [0])._value + "."));
                                                  curarg++;
                                                  // End argument processing
                                                  setModuleName("objectdraw");
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var obj1445 = Grace_allocObject(GraceObject, "eventLogKind()response");
                                                  obj1445.definitionModule = "objectdraw";
                                                  obj1445.definitionLine = 986;
                                                  var inho1445 = inheritingObject;
                                                  while (inho1445.superobj) inho1445 = inho1445.superobj;
                                                  inho1445.superobj = obj1445;
                                                  obj1445.data = inheritingObject.data;
                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                    obj1445._value = inheritingObject._value;
                                                  obj1445.outer = this;
                                                  var reader_objectdraw_outer1446 = function() {
                                                    return this.outer;
                                                  };
                                                  obj1445.methods["outer"] = reader_objectdraw_outer1446;
                                                  var obj_init_1445 = function() {
                                                    var origSuperDepth = superDepth;
                                                    superDepth = obj1445;
                                                    setLineNumber(988);    // compilenode identifier
                                                    obj1445.data["kind"] = var_kind__39__;
                                                    var reader_objectdraw_kind1447 = function() {
                                                      return this.data["kind"];
                                                    };
                                                    reader_objectdraw_kind1447.def = true;
                                                    obj1445.methods["kind"] = reader_objectdraw_kind1447;
                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], var_kind__39__)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("value of def 'kind' is not of type String"));
                                                    setLineNumber(989);    // compilenode identifier
                                                    obj1445.data["response"] = var_response__39__;
                                                    var reader_objectdraw_response1448 = function() {
                                                      return this.data["response"];
                                                    };
                                                    reader_objectdraw_response1448.def = true;
                                                    obj1445.methods["response"] = reader_objectdraw_response1448;
                                                    if (!Grace_isTrue(callmethod(var_Procedure, "match", [1], var_response__39__)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("value of def 'response' is not of type Procedure"));
                                                    superDepth = origSuperDepth;
                                                  };
                                                  obj_init_1445.apply(inheritingObject, []);
                                                  return obj1445;
                                                  };
                                                  func1444.paramTypes = [];
                                                  func1444.paramTypes.push([type_String, "kind'"]);
                                                  func1444.paramTypes.push([]);
                                                  func1444.confidential = true;
                                                  this.methods["eventLogKind()response()object"] = func1444;
                                                setLineNumber(992);    // compilenode method
                                                var func1449 = function(argcv) {    // method applicationTitle(1)size(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_initialTitle = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for applicationTitle (arg list 1) of applicationTitle(1)size(1)"));
                                                  var var_dimensions__39__ = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[1] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of applicationTitle(1)size(1)"));
                                                  // Start argument checking
                                                  curarg = 1;
                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in applicationTitle (arg list 1), which corresponds to parameter initialTitle, does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  curarg++;
                                                  setLineNumber(993);    // compilenode call
                                                  onSelf = true;
                                                  var call1450 = callmethodChecked(this, "Point", [0]);
                                                  if (!Grace_isTrue(callmethod(call1450, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                              callmethod(call1450, "asString", [0])._value + "."));
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("objectdraw");
                                                  setLineNumber(992);    // compilenode object
                                                  var obj1451 = Grace_allocObject(null, "objectdraw.applicationTitle()size");
                                                  obj1451.definitionModule = "objectdraw";
                                                  obj1451.definitionLine = 992;
                                                  obj1451.outer = this;
                                                  var reader_objectdraw_outer1452 = function() {
                                                    return this.outer;
                                                  };
                                                  obj1451.methods["outer"] = reader_objectdraw_outer1452;
                                                  var obj_init_1451 = function() {
                                                    var origSuperDepth = superDepth;
                                                    superDepth = obj1451;
                                                    var func1453 = function(argcv) {    // method element
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for element"));
                                                      setModuleName("objectdraw");
                                                      var if1454 = GraceDone;
                                                      setLineNumber(1009);    // compilenode call
                                                      onSelf = true;
                                                      var call1455 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1455)) {
                                                        setLineNumber(1010);    // compilenode call
                                                        onSelf = true;
                                                        var call1456 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1457 = callmethodChecked(call1456, "document", [0]);
                                                        var call1458 = callmethodChecked(call1457, "body", [0]);
                                                        if1454 = call1458;
                                                      } else {
                                                        setLineNumber(1012);    // compilenode call
                                                        var call1459 = callmethodsuper(this, "element", [0]);
                                                        if1454 = call1459;
                                                      }
                                                      setLineNumber(1009);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], if1454)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method element does not have " + 
                                                                  callmethod(var_Foreign, "asString", [0])._value + "."));
                                                      return if1454;
                                                    };
                                                    func1453.paramCounts = [0];
                                                    obj1451.methods["element"] = func1453;
                                                    func1453.definitionLine = 1008;
                                                    func1453.definitionModule = "objectdraw";
                                                    var func1460 = function(argcv) {    // method arrangeHorizontal
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeHorizontal"));
                                                      setModuleName("objectdraw");
                                                      var if1461 = GraceDone;
                                                      setLineNumber(1022);    // compilenode call
                                                      onSelf = true;
                                                      var call1462 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1462)) {
                                                        setLineNumber(1023);    // compilenode call
                                                        var call1463 = callmethodsuper(this, "arrangeHorizontal", [0]);
                                                        if1461 = call1463;
                                                      } else {
                                                        setLineNumber(1025);    // compilenode identifier
                                                        onSelf = true;
                                                        var call1464 = callmethodChecked(this, "isHorizontal:=", [1], GraceTrue);
                                                        if1461 = call1464;
                                                      }
                                                      setLineNumber(1022);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1461)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method arrangeHorizontal does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1461;
                                                    };
                                                    func1460.paramCounts = [0];
                                                    obj1451.methods["arrangeHorizontal"] = func1460;
                                                    func1460.definitionLine = 1021;
                                                    func1460.definitionModule = "objectdraw";
                                                    var func1465 = function(argcv) {    // method arrangeVertical
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeVertical"));
                                                      setModuleName("objectdraw");
                                                      var if1466 = GraceDone;
                                                      setLineNumber(1032);    // compilenode call
                                                      onSelf = true;
                                                      var call1467 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1467)) {
                                                        setLineNumber(1033);    // compilenode call
                                                        var call1468 = callmethodsuper(this, "arrangeVertical", [0]);
                                                        if1466 = call1468;
                                                      } else {
                                                        setLineNumber(1035);    // compilenode identifier
                                                        onSelf = true;
                                                        var call1469 = callmethodChecked(this, "isHorizontal:=", [1], GraceFalse);
                                                        if1466 = call1469;
                                                      }
                                                      setLineNumber(1032);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1466)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method arrangeVertical does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1466;
                                                    };
                                                    func1465.paramCounts = [0];
                                                    obj1451.methods["arrangeVertical"] = func1465;
                                                    func1465.definitionLine = 1031;
                                                    func1465.definitionModule = "objectdraw";
                                                    var func1470 = function(argcv) {    // method on(1)do(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_kind = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)do(1)"));
                                                      var var_response = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[1] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of on(1)do(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1040);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      curarg++;
                                                      setLineNumber(1041);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in do (arg list 2), which corresponds to parameter response, does not have " + 
                                                                  callmethod(var_Procedure, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("objectdraw");
                                                      var if1471 = GraceDone;
                                                      setLineNumber(1042);    // compilenode call
                                                      onSelf = true;
                                                      var call1472 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1472)) {
                                                        setLineNumber(1043);    // compilenode call
                                                        onSelf = true;
                                                        var call1473 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1474 = callmethodChecked(call1473, "addEventListener", [2], var_kind, var_response);
                                                        if1471 = call1474;
                                                      } else {
                                                        setLineNumber(1045);    // compilenode call
                                                        var call1475 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call1476 = callmethodChecked(call1475, "eventLogKind()response", [1, 1], var_kind, var_response);
                                                        onSelf = true;
                                                        var call1477 = callmethodChecked(this, "events", [0]);
                                                        var call1478 = callmethodChecked(call1477, "push", [1], call1476);
                                                        if1471 = call1478;
                                                      }
                                                      setLineNumber(1042);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1471)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method on(1)do(1) does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1471;
                                                    };
                                                    func1470.paramTypes = [];
                                                    func1470.paramTypes.push([type_String, "kind"]);
                                                    func1470.paramTypes.push([]);
                                                    func1470.confidential = true;
                                                    func1470.paramCounts = [1, 1];
                                                    obj1451.methods["on()do"] = func1470;
                                                    func1470.definitionLine = 1040;
                                                    func1470.definitionModule = "objectdraw";
                                                    var func1479 = function(argcv) {    // method windowTitle
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for windowTitle"));
                                                      setModuleName("objectdraw");
                                                      var if1480 = GraceDone;
                                                      setLineNumber(1051);    // compilenode call
                                                      onSelf = true;
                                                      var call1481 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1481)) {
                                                        setLineNumber(1052);    // compilenode call
                                                        onSelf = true;
                                                        var call1482 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1483 = callmethodChecked(call1482, "title", [0]);
                                                        if1480 = call1483;
                                                      } else {
                                                        setLineNumber(1054);    // compilenode call
                                                        onSelf = true;
                                                        var call1484 = callmethodChecked(this, "theTitle", [0]);
                                                        if1480 = call1484;
                                                      }
                                                      setLineNumber(1051);    // return value
                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], if1480)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method windowTitle does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      return if1480;
                                                    };
                                                    func1479.paramCounts = [0];
                                                    obj1451.methods["windowTitle"] = func1479;
                                                    func1479.definitionLine = 1050;
                                                    func1479.definitionModule = "objectdraw";
                                                    var func1485 = function(argcv) {    // method windowTitle:=(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_value = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for windowTitle:=(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1059);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in windowTitle:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("objectdraw");
                                                      var if1486 = GraceDone;
                                                      setLineNumber(1060);    // compilenode call
                                                      onSelf = true;
                                                      var call1487 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1487)) {
                                                        setLineNumber(1061);    // compilenode call
                                                        onSelf = true;
                                                        var call1488 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1489 = callmethodChecked(call1488, "title:=", [1], var_value);
                                                        if1486 = call1489;
                                                      } else {
                                                        setLineNumber(1063);    // compilenode identifier
                                                        onSelf = true;
                                                        var call1490 = callmethodChecked(this, "theTitle:=", [1], var_value);
                                                        if1486 = call1490;
                                                      }
                                                      setLineNumber(1060);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1486)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method windowTitle:=(1) does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1486;
                                                    };
                                                    func1485.paramTypes = [];
                                                    func1485.paramTypes.push([type_String, "value"]);
                                                    func1485.paramCounts = [1];
                                                    obj1451.methods["windowTitle:="] = func1485;
                                                    func1485.definitionLine = 1059;
                                                    func1485.definitionModule = "objectdraw";
                                                    var func1491 = function(argcv) {    // method width
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                      setModuleName("objectdraw");
                                                      var if1492 = GraceDone;
                                                      setLineNumber(1069);    // compilenode call
                                                      onSelf = true;
                                                      var call1493 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1493)) {
                                                        setLineNumber(1070);    // compilenode call
                                                        onSelf = true;
                                                        var call1494 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1495 = callmethodChecked(call1494, "width", [0]);
                                                        if1492 = call1495;
                                                      } else {
                                                        setLineNumber(1072);    // compilenode call
                                                        onSelf = true;
                                                        var call1496 = callmethodChecked(this, "theWidth", [0]);
                                                        if1492 = call1496;
                                                      }
                                                      setLineNumber(1069);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], if1492)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method width does not have " + 
                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                      return if1492;
                                                    };
                                                    func1491.paramCounts = [0];
                                                    obj1451.methods["width"] = func1491;
                                                    func1491.definitionLine = 1068;
                                                    func1491.definitionModule = "objectdraw";
                                                    var func1497 = function(argcv) {    // method height
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                      setModuleName("objectdraw");
                                                      var if1498 = GraceDone;
                                                      setLineNumber(1078);    // compilenode call
                                                      onSelf = true;
                                                      var call1499 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1499)) {
                                                        setLineNumber(1079);    // compilenode call
                                                        onSelf = true;
                                                        var call1500 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1501 = callmethodChecked(call1500, "height", [0]);
                                                        if1498 = call1501;
                                                      } else {
                                                        setLineNumber(1081);    // compilenode call
                                                        onSelf = true;
                                                        var call1502 = callmethodChecked(this, "theHeight", [0]);
                                                        if1498 = call1502;
                                                      }
                                                      setLineNumber(1078);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], if1498)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method height does not have " + 
                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                      return if1498;
                                                    };
                                                    func1497.paramCounts = [0];
                                                    obj1451.methods["height"] = func1497;
                                                    func1497.definitionLine = 1077;
                                                    func1497.definitionModule = "objectdraw";
                                                    var func1503 = function(argcv) {    // method onMouseEnterDo(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_f = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnterDo(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1091);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in onMouseEnterDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                                  callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("objectdraw");
                                                      setLineNumber(1092);    // compilenode string
                                                      var string1504 = new GraceString("mouseover");
                                                      var block1505 = new GraceBlock(this, 1092, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block1505.real = function(var_event__39__) {
                                                        setLineNumber(1093);    // compilenode identifier
                                                        var call1506 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                                                        var var_from = call1506;
                                                        var if1507 = GraceDone;
                                                        setLineNumber(1095);    // compilenode identifier
                                                        var call1509 = callmethodChecked(var_dom, "noObject", [0]);
                                                        var opresult1511 = callmethodChecked(call1509, "==", [1], var_from);
                                                        if (Grace_isTrue(opresult1511)) {
                                                          setLineNumber(1096);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1512 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                                                          var call1513 = callmethodChecked(var_f, "apply", [1], call1512);
                                                          if1507 = call1513;
                                                        }
                                                        return if1507;
                                                      };
                                                      onSelf = true;
                                                      var call1514 = callmethodChecked(this, "on()do", [1, 1], string1504, block1505);
                                                      setLineNumber(1092);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1514)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method onMouseEnterDo(1) does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return call1514;
                                                    };
                                                    func1503.paramTypes = [];
                                                    func1503.paramTypes.push([]);
                                                    func1503.paramCounts = [1];
                                                    obj1451.methods["onMouseEnterDo"] = func1503;
                                                    func1503.definitionLine = 1091;
                                                    func1503.definitionModule = "objectdraw";
                                                    var func1515 = function(argcv) {    // method onMouseExitDo(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_f = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExitDo(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1102);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in onMouseExitDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                                  callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("objectdraw");
                                                      setLineNumber(1103);    // compilenode string
                                                      var string1516 = new GraceString("mouseout");
                                                      var block1517 = new GraceBlock(this, 1103, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block1517.real = function(var_event__39__) {
                                                        setLineNumber(1104);    // compilenode identifier
                                                        var call1518 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                                                        var var_to = call1518;
                                                        var if1519 = GraceDone;
                                                        setLineNumber(1106);    // compilenode identifier
                                                        var call1521 = callmethodChecked(var_dom, "noObject", [0]);
                                                        var opresult1523 = callmethodChecked(call1521, "==", [1], var_to);
                                                        if (Grace_isTrue(opresult1523)) {
                                                          setLineNumber(1107);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1524 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                                                          var call1525 = callmethodChecked(var_f, "apply", [1], call1524);
                                                          if1519 = call1525;
                                                        }
                                                        return if1519;
                                                      };
                                                      onSelf = true;
                                                      var call1526 = callmethodChecked(this, "on()do", [1, 1], string1516, block1517);
                                                      setLineNumber(1103);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1526)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method onMouseExitDo(1) does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return call1526;
                                                    };
                                                    func1515.paramTypes = [];
                                                    func1515.paramTypes.push([]);
                                                    func1515.paramCounts = [1];
                                                    obj1451.methods["onMouseExitDo"] = func1515;
                                                    func1515.definitionLine = 1102;
                                                    func1515.definitionModule = "objectdraw";
                                                    var func1527 = function(argcv) {    // method onMouse(1)do(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_kind = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouse (arg list 1) of onMouse(1)do(1)"));
                                                      var var_bl = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[1] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of onMouse(1)do(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1113);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in onMouse (arg list 1), which corresponds to parameter kind, does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      curarg++;
                                                      if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in do (arg list 2), which corresponds to parameter bl, does not have " + 
                                                                  callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("objectdraw");
                                                      setLineNumber(1114);    // compilenode block
                                                      var block1528 = new GraceBlock(this, 1114, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block1528.real = function(var_evt) {
                                                        setLineNumber(1115);    // compilenode identifier
                                                        var call1529 = callmethodChecked(var_evt, "pageY", [0]);
                                                        var call1531 = callmethodChecked(var_evt, "pageX", [0]);
                                                        var opresult1533 = callmethodChecked(call1531, "@", [1], call1529);
                                                        var call1534 = callmethodChecked(var_bl, "apply", [1], opresult1533);
                                                        return call1534;
                                                      };
                                                      setLineNumber(1114);    // compilenode call
                                                      onSelf = true;
                                                      var call1535 = callmethodChecked(this, "theWindow", [0]);
                                                      var call1536 = callmethodChecked(call1535, "addEventListener", [2], var_kind, block1528);
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1536)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method onMouse(1)do(1) does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return call1536;
                                                    };
                                                    func1527.paramTypes = [];
                                                    func1527.paramTypes.push([type_String, "kind"]);
                                                    func1527.paramTypes.push([]);
                                                    func1527.confidential = true;
                                                    func1527.paramCounts = [1, 1];
                                                    obj1451.methods["onMouse()do"] = func1527;
                                                    func1527.definitionLine = 1113;
                                                    func1527.definitionModule = "objectdraw";
                                                    var func1537 = function(argcv) {    // method startApplication
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startApplication"));
                                                      setModuleName("objectdraw");
                                                      var if1538 = GraceDone;
                                                      setLineNumber(1121);    // compilenode call
                                                      onSelf = true;
                                                      var call1539 = callmethodChecked(this, "isOpened", [0]);
                                                      var call1540 = callmethodChecked(call1539, "prefix!", [0]);
                                                      if (Grace_isTrue(call1540)) {
                                                        setLineNumber(1122);    // compilenode string
                                                        var string1541 = new GraceString("");
                                                        var string1542 = new GraceString("");
                                                        var string1543 = new GraceString("");
                                                        onSelf = true;
                                                        var call1545 = callmethodChecked(this, "theHeight", [0]);
                                                        var string1547 = new GraceString(",height=");
                                                        onSelf = true;
                                                        var call1549 = callmethodChecked(this, "theWidth", [0]);
                                                        var string1551 = new GraceString("width=");
                                                        var opresult1553 = callmethodChecked(string1551, "++", [1], call1549);
                                                        var opresult1555 = callmethodChecked(opresult1553, "++", [1], string1547);
                                                        var opresult1557 = callmethodChecked(opresult1555, "++", [1], call1545);
                                                        var opresult1559 = callmethodChecked(opresult1557, "++", [1], string1543);
                                                        var call1560 = callmethodChecked(var_dom, "window", [0]);
                                                        var call1561 = callmethodChecked(call1560, "open", [3], string1541, string1542, opresult1559);
                                                        onSelf = true;
                                                        var call1562 = callmethodChecked(this, "theWindow:=", [1], call1561);
                                                        setLineNumber(1123);    // compilenode call
                                                        onSelf = true;
                                                        var call1563 = callmethodChecked(this, "theTitle", [0]);
                                                        onSelf = true;
                                                        var call1564 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1565 = callmethodChecked(call1564, "document", [0]);
                                                        var call1566 = callmethodChecked(call1565, "title:=", [1], call1563);
                                                        setLineNumber(1124);    // compilenode call
                                                        onSelf = true;
                                                        var call1567 = callmethodChecked(this, "element", [0]);
                                                        onSelf = true;
                                                        var call1568 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1569 = callmethodChecked(call1568, "document", [0]);
                                                        var call1570 = callmethodChecked(call1569, "body", [0]);
                                                        var call1571 = callmethodChecked(call1570, "appendChild", [1], call1567);
                                                        var if1572 = GraceDone;
                                                        setLineNumber(1126);    // compilenode identifier
                                                        var call1573 = callmethodChecked(var_dom, "window", [0]);
                                                        var string1574 = new GraceString("graceRegisterWindow");
                                                        var call1575 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], call1573, string1574);
                                                        if (Grace_isTrue(call1575)) {
                                                          setLineNumber(1127);    // compilenode call
                                                          onSelf = true;
                                                          var call1576 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1577 = callmethodChecked(var_dom, "window", [0]);
                                                          var call1578 = callmethodChecked(call1577, "graceRegisterWindow", [1], call1576);
                                                          if1572 = call1578;
                                                        }
                                                        setLineNumber(1130);    // compilenode identifier
                                                        onSelf = true;
                                                        var call1579 = callmethodChecked(this, "isOpened:=", [1], GraceTrue);
                                                        setLineNumber(1132);    // compilenode string
                                                        var string1580 = new GraceString("100%");
                                                        onSelf = true;
                                                        var call1581 = callmethodChecked(this, "element", [0]);
                                                        var call1582 = callmethodChecked(call1581, "style", [0]);
                                                        var call1583 = callmethodChecked(call1582, "width:=", [1], string1580);
                                                        setLineNumber(1133);    // compilenode string
                                                        var string1584 = new GraceString("0px");
                                                        onSelf = true;
                                                        var call1585 = callmethodChecked(this, "element", [0]);
                                                        var call1586 = callmethodChecked(call1585, "style", [0]);
                                                        var call1587 = callmethodChecked(call1586, "margin:=", [1], string1584);
                                                        var if1588 = GraceDone;
                                                        setLineNumber(1135);    // compilenode call
                                                        onSelf = true;
                                                        var call1589 = callmethodChecked(this, "isHorizontal", [0]);
                                                        if (Grace_isTrue(call1589)) {
                                                          setLineNumber(1136);    // compilenode call
                                                          onSelf = true;
                                                          var call1590 = callmethodChecked(this, "arrangeHorizontal", [0]);
                                                          if1588 = call1590;
                                                        } else {
                                                          setLineNumber(1138);    // compilenode call
                                                          onSelf = true;
                                                          var call1591 = callmethodChecked(this, "arrangeVertical", [0]);
                                                          if1588 = call1591;
                                                        }
                                                        setLineNumber(1141);    // compilenode call
                                                        onSelf = true;
                                                        var call1592 = callmethodChecked(this, "events", [0]);
                                                        var block1593 = new GraceBlock(this, 1141, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block1593.real = function(var_anEvent) {
                                                          setLineNumber(1142);    // compilenode identifier
                                                          var call1594 = callmethodChecked(var_anEvent, "kind", [0]);
                                                          var call1595 = callmethodChecked(var_anEvent, "response", [0]);
                                                          onSelf = true;
                                                          var call1596 = callmethodChecked(this, "on()do", [1, 1], call1594, call1595);
                                                          return call1596;
                                                        };
                                                        var call1597 = callmethodChecked(var_prelude, "for()do", [1, 1], call1592, block1593);
                                                        if1538 = call1597;
                                                      }
                                                      setLineNumber(1121);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1538)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method startApplication does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1538;
                                                    };
                                                    func1537.paramCounts = [0];
                                                    obj1451.methods["startApplication"] = func1537;
                                                    func1537.definitionLine = 1120;
                                                    func1537.definitionModule = "objectdraw";
                                                    var func1598 = function(argcv) {    // method stopApplication
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for stopApplication"));
                                                      setModuleName("objectdraw");
                                                      var if1599 = GraceDone;
                                                      setLineNumber(1149);    // compilenode call
                                                      onSelf = true;
                                                      var call1600 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1600)) {
                                                        setLineNumber(1150);    // compilenode call
                                                        onSelf = true;
                                                        var call1601 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1602 = callmethodChecked(call1601, "close", [0]);
                                                        if1599 = call1602;
                                                      }
                                                      setLineNumber(1149);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1599)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method stopApplication does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1599;
                                                    };
                                                    func1598.paramCounts = [0];
                                                    obj1451.methods["stopApplication"] = func1598;
                                                    func1598.definitionLine = 1148;
                                                    func1598.definitionModule = "objectdraw";
                                                    var func1603 = function(argcv) {    // method asString
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                      setModuleName("objectdraw");
                                                      setLineNumber(1156);    // compilenode string
                                                      var string1604 = new GraceString("");
                                                      onSelf = true;
                                                      var call1606 = callmethodChecked(this, "windowTitle", [0]);
                                                      var string1608 = new GraceString("application titled ");
                                                      var opresult1610 = callmethodChecked(string1608, "++", [1], call1606);
                                                      var opresult1612 = callmethodChecked(opresult1610, "++", [1], string1604);
                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1612)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method asString does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      return opresult1612;
                                                    };
                                                    func1603.paramCounts = [0];
                                                    obj1451.methods["asString"] = func1603;
                                                    func1603.definitionLine = 1155;
                                                    func1603.definitionModule = "objectdraw";
                                                    setLineNumber(997);    // compilenode identifier
                                                    var call1613 = callmethodChecked(var_document, "createDocumentFragment", [0]);
                                                    var call1614 = callmethodChecked(superDepth, "outer", [0]);
                                                    onOuter = true;
                                                    onSelf = true;
                                                    var call1615 = callmethodChecked(call1614, "containerFromElement()object", [1, 1], call1613, this);
                                                    obj1451.superobj = call1615;
                                                    if (call1615.data) obj1451.data = call1615.data;
                                                    if (call1615.hasOwnProperty('_value'))
                                                        obj1451._value = call1615._value;
                                                    setLineNumber(999);    // compilenode identifier
                                                    obj1451.data["isOpened"] = GraceFalse;
                                                    var reader_objectdraw_isOpened1616 = function() {
                                                      return this.data["isOpened"];
                                                    };
                                                    obj1451.methods["isOpened"] = reader_objectdraw_isOpened1616;
                                                    obj1451.data["isOpened"] = GraceFalse;
                                                    var writer_objectdraw_isOpened1616 = function(argcv, o) {
                                                      this.data["isOpened"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1451.methods["isOpened:="] = writer_objectdraw_isOpened1616;
                                                    reader_objectdraw_isOpened1616.confidential = true;
                                                    writer_objectdraw_isOpened1616.confidential = true;
                                                    if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("initial value of var 'isOpened' is not of type Boolean"));
                                                    obj1451.mutable = true;
                                                    obj1451.data["theWindow"] = undefined;
                                                    var reader_objectdraw_theWindow1617 = function() {
                                                      return this.data["theWindow"];
                                                    };
                                                    obj1451.methods["theWindow"] = reader_objectdraw_theWindow1617;
                                                    obj1451.data["theWindow"] = undefined;
                                                    var writer_objectdraw_theWindow1617 = function(argcv, o) {
                                                      this.data["theWindow"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1451.methods["theWindow:="] = writer_objectdraw_theWindow1617;
                                                    reader_objectdraw_theWindow1617.confidential = true;
                                                    writer_objectdraw_theWindow1617.confidential = true;
                                                    obj1451.mutable = true;
                                                    setLineNumber(1002);    // compilenode identifier
                                                    obj1451.data["theTitle"] = var_initialTitle;
                                                    var reader_objectdraw_theTitle1618 = function() {
                                                      return this.data["theTitle"];
                                                    };
                                                    obj1451.methods["theTitle"] = reader_objectdraw_theTitle1618;
                                                    obj1451.data["theTitle"] = var_initialTitle;
                                                    var writer_objectdraw_theTitle1618 = function(argcv, o) {
                                                      this.data["theTitle"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1451.methods["theTitle:="] = writer_objectdraw_theTitle1618;
                                                    reader_objectdraw_theTitle1618.confidential = true;
                                                    writer_objectdraw_theTitle1618.confidential = true;
                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], var_initialTitle)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("initial value of var 'theTitle' is not of type String"));
                                                    obj1451.mutable = true;
                                                    setLineNumber(1003);    // compilenode identifier
                                                    var call1619 = callmethodChecked(var_dimensions__39__, "x", [0]);
                                                    obj1451.data["theWidth"] = call1619;
                                                    var reader_objectdraw_theWidth1620 = function() {
                                                      return this.data["theWidth"];
                                                    };
                                                    obj1451.methods["theWidth"] = reader_objectdraw_theWidth1620;
                                                    obj1451.data["theWidth"] = call1619;
                                                    var writer_objectdraw_theWidth1620 = function(argcv, o) {
                                                      this.data["theWidth"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1451.methods["theWidth:="] = writer_objectdraw_theWidth1620;
                                                    reader_objectdraw_theWidth1620.confidential = true;
                                                    writer_objectdraw_theWidth1620.confidential = true;
                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1619)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("initial value of var 'theWidth' is not of type Number"));
                                                    obj1451.mutable = true;
                                                    setLineNumber(1004);    // compilenode identifier
                                                    var call1621 = callmethodChecked(var_dimensions__39__, "y", [0]);
                                                    obj1451.data["theHeight"] = call1621;
                                                    var reader_objectdraw_theHeight1622 = function() {
                                                      return this.data["theHeight"];
                                                    };
                                                    obj1451.methods["theHeight"] = reader_objectdraw_theHeight1622;
                                                    obj1451.data["theHeight"] = call1621;
                                                    var writer_objectdraw_theHeight1622 = function(argcv, o) {
                                                      this.data["theHeight"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1451.methods["theHeight:="] = writer_objectdraw_theHeight1622;
                                                    reader_objectdraw_theHeight1622.confidential = true;
                                                    writer_objectdraw_theHeight1622.confidential = true;
                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1621)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("initial value of var 'theHeight' is not of type Number"));
                                                    obj1451.mutable = true;
                                                    setLineNumber(1006);    // compilenode array
                                                    var array1623 = new PrimitiveGraceList([]);
                                                    obj1451.data["events"] = array1623;
                                                    var reader_objectdraw_events1624 = function() {
                                                      return this.data["events"];
                                                    };
                                                    reader_objectdraw_events1624.def = true;
                                                    reader_objectdraw_events1624.confidential = true;
                                                    obj1451.methods["events"] = reader_objectdraw_events1624;
                                                    setLineNumber(1017);    // compilenode identifier
                                                    obj1451.data["isHorizontal"] = GraceTrue;
                                                    var reader_objectdraw_isHorizontal1625 = function() {
                                                      return this.data["isHorizontal"];
                                                    };
                                                    obj1451.methods["isHorizontal"] = reader_objectdraw_isHorizontal1625;
                                                    obj1451.data["isHorizontal"] = GraceTrue;
                                                    var writer_objectdraw_isHorizontal1625 = function(argcv, o) {
                                                      this.data["isHorizontal"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1451.methods["isHorizontal:="] = writer_objectdraw_isHorizontal1625;
                                                    reader_objectdraw_isHorizontal1625.confidential = true;
                                                    writer_objectdraw_isHorizontal1625.confidential = true;
                                                    if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceTrue)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("initial value of var 'isHorizontal' is not of type Boolean"));
                                                    obj1451.mutable = true;
                                                    superDepth = origSuperDepth;
                                                  };
                                                  obj_init_1451.apply(obj1451, []);
                                                  setLineNumber(992);    // return value
                                                  if (!Grace_isTrue(callmethod(var_Application, "match", [1], obj1451)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method applicationTitle(1)size(1) does not have " + 
                                                              callmethod(var_Application, "asString", [0])._value + "."));
                                                  return obj1451;
                                                };
                                                func1449.paramTypes = [];
                                                func1449.paramTypes.push([type_String, "initialTitle"]);
                                                func1449.paramTypes.push([]);
                                                func1449.paramCounts = [1, 1];
                                                this.methods["applicationTitle()size"] = func1449;
                                                func1449.definitionLine = 992;
                                                func1449.definitionModule = "objectdraw";
                                                  var func1626 = function(argcv) {    // method applicationTitle(1     )size(1     )()object
                                                    var curarg = 1;
                                                    var var_initialTitle = arguments[curarg];
                                                    curarg++;
                                                    var var_dimensions__39__ = arguments[curarg];
                                                    curarg++;
                                                    var inheritingObject = arguments[curarg++];
                                                    // Start argument processing
                                                    curarg = 1;
                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in applicationTitle (arg list 1), which corresponds to parameter initialTitle, does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    curarg++;
                                                    setLineNumber(993);    // compilenode call
                                                    onSelf = true;
                                                    var call1627 = callmethodChecked(this, "Point", [0]);
                                                    if (!Grace_isTrue(callmethod(call1627, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                callmethod(call1627, "asString", [0])._value + "."));
                                                    curarg++;
                                                    // End argument processing
                                                    setModuleName("objectdraw");
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var obj1628 = Grace_allocObject(null, "applicationTitle()size");
                                                    obj1628.definitionModule = "objectdraw";
                                                    obj1628.definitionLine = 992;
                                                    var inho1628 = inheritingObject;
                                                    while (inho1628.superobj) inho1628 = inho1628.superobj;
                                                    inho1628.superobj = obj1628;
                                                    obj1628.data = inheritingObject.data;
                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                      obj1628._value = inheritingObject._value;
                                                    obj1628.outer = this;
                                                    var reader_objectdraw_outer1629 = function() {
                                                      return this.outer;
                                                    };
                                                    obj1628.methods["outer"] = reader_objectdraw_outer1629;
                                                    var obj_init_1628 = function() {
                                                      var origSuperDepth = superDepth;
                                                      superDepth = obj1628;
                                                      var func1630 = function(argcv) {    // method element
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for element"));
                                                        setModuleName("objectdraw");
                                                        var if1631 = GraceDone;
                                                        setLineNumber(1009);    // compilenode call
                                                        onSelf = true;
                                                        var call1632 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1632)) {
                                                          setLineNumber(1010);    // compilenode call
                                                          onSelf = true;
                                                          var call1633 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1634 = callmethodChecked(call1633, "document", [0]);
                                                          var call1635 = callmethodChecked(call1634, "body", [0]);
                                                          if1631 = call1635;
                                                        } else {
                                                          setLineNumber(1012);    // compilenode call
                                                          var call1636 = callmethodsuper(this, "element", [0]);
                                                          if1631 = call1636;
                                                        }
                                                        setLineNumber(1009);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], if1631)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method element does not have " + 
                                                                    callmethod(var_Foreign, "asString", [0])._value + "."));
                                                        return if1631;
                                                      };
                                                      func1630.paramCounts = [0];
                                                      obj1628.methods["element"] = func1630;
                                                      func1630.definitionLine = 1008;
                                                      func1630.definitionModule = "objectdraw";
                                                      var func1637 = function(argcv) {    // method arrangeHorizontal
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeHorizontal"));
                                                        setModuleName("objectdraw");
                                                        var if1638 = GraceDone;
                                                        setLineNumber(1022);    // compilenode call
                                                        onSelf = true;
                                                        var call1639 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1639)) {
                                                          setLineNumber(1023);    // compilenode call
                                                          var call1640 = callmethodsuper(this, "arrangeHorizontal", [0]);
                                                          if1638 = call1640;
                                                        } else {
                                                          setLineNumber(1025);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1641 = callmethodChecked(this, "isHorizontal:=", [1], GraceTrue);
                                                          if1638 = call1641;
                                                        }
                                                        setLineNumber(1022);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1638)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method arrangeHorizontal does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1638;
                                                      };
                                                      func1637.paramCounts = [0];
                                                      obj1628.methods["arrangeHorizontal"] = func1637;
                                                      func1637.definitionLine = 1021;
                                                      func1637.definitionModule = "objectdraw";
                                                      var func1642 = function(argcv) {    // method arrangeVertical
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeVertical"));
                                                        setModuleName("objectdraw");
                                                        var if1643 = GraceDone;
                                                        setLineNumber(1032);    // compilenode call
                                                        onSelf = true;
                                                        var call1644 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1644)) {
                                                          setLineNumber(1033);    // compilenode call
                                                          var call1645 = callmethodsuper(this, "arrangeVertical", [0]);
                                                          if1643 = call1645;
                                                        } else {
                                                          setLineNumber(1035);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1646 = callmethodChecked(this, "isHorizontal:=", [1], GraceFalse);
                                                          if1643 = call1646;
                                                        }
                                                        setLineNumber(1032);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1643)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method arrangeVertical does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1643;
                                                      };
                                                      func1642.paramCounts = [0];
                                                      obj1628.methods["arrangeVertical"] = func1642;
                                                      func1642.definitionLine = 1031;
                                                      func1642.definitionModule = "objectdraw";
                                                      var func1647 = function(argcv) {    // method on(1)do(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_kind = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)do(1)"));
                                                        var var_response = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[1] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of on(1)do(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1040);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        curarg++;
                                                        setLineNumber(1041);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in do (arg list 2), which corresponds to parameter response, does not have " + 
                                                                    callmethod(var_Procedure, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        var if1648 = GraceDone;
                                                        setLineNumber(1042);    // compilenode call
                                                        onSelf = true;
                                                        var call1649 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1649)) {
                                                          setLineNumber(1043);    // compilenode call
                                                          onSelf = true;
                                                          var call1650 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1651 = callmethodChecked(call1650, "addEventListener", [2], var_kind, var_response);
                                                          if1648 = call1651;
                                                        } else {
                                                          setLineNumber(1045);    // compilenode call
                                                          var call1652 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call1653 = callmethodChecked(call1652, "eventLogKind()response", [1, 1], var_kind, var_response);
                                                          onSelf = true;
                                                          var call1654 = callmethodChecked(this, "events", [0]);
                                                          var call1655 = callmethodChecked(call1654, "push", [1], call1653);
                                                          if1648 = call1655;
                                                        }
                                                        setLineNumber(1042);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1648)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method on(1)do(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1648;
                                                      };
                                                      func1647.paramTypes = [];
                                                      func1647.paramTypes.push([type_String, "kind"]);
                                                      func1647.paramTypes.push([]);
                                                      func1647.confidential = true;
                                                      func1647.paramCounts = [1, 1];
                                                      obj1628.methods["on()do"] = func1647;
                                                      func1647.definitionLine = 1040;
                                                      func1647.definitionModule = "objectdraw";
                                                      var func1656 = function(argcv) {    // method windowTitle
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for windowTitle"));
                                                        setModuleName("objectdraw");
                                                        var if1657 = GraceDone;
                                                        setLineNumber(1051);    // compilenode call
                                                        onSelf = true;
                                                        var call1658 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1658)) {
                                                          setLineNumber(1052);    // compilenode call
                                                          onSelf = true;
                                                          var call1659 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1660 = callmethodChecked(call1659, "title", [0]);
                                                          if1657 = call1660;
                                                        } else {
                                                          setLineNumber(1054);    // compilenode call
                                                          onSelf = true;
                                                          var call1661 = callmethodChecked(this, "theTitle", [0]);
                                                          if1657 = call1661;
                                                        }
                                                        setLineNumber(1051);    // return value
                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], if1657)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method windowTitle does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        return if1657;
                                                      };
                                                      func1656.paramCounts = [0];
                                                      obj1628.methods["windowTitle"] = func1656;
                                                      func1656.definitionLine = 1050;
                                                      func1656.definitionModule = "objectdraw";
                                                      var func1662 = function(argcv) {    // method windowTitle:=(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_value = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for windowTitle:=(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1059);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in windowTitle:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        var if1663 = GraceDone;
                                                        setLineNumber(1060);    // compilenode call
                                                        onSelf = true;
                                                        var call1664 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1664)) {
                                                          setLineNumber(1061);    // compilenode call
                                                          onSelf = true;
                                                          var call1665 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1666 = callmethodChecked(call1665, "title:=", [1], var_value);
                                                          if1663 = call1666;
                                                        } else {
                                                          setLineNumber(1063);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1667 = callmethodChecked(this, "theTitle:=", [1], var_value);
                                                          if1663 = call1667;
                                                        }
                                                        setLineNumber(1060);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1663)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method windowTitle:=(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1663;
                                                      };
                                                      func1662.paramTypes = [];
                                                      func1662.paramTypes.push([type_String, "value"]);
                                                      func1662.paramCounts = [1];
                                                      obj1628.methods["windowTitle:="] = func1662;
                                                      func1662.definitionLine = 1059;
                                                      func1662.definitionModule = "objectdraw";
                                                      var func1668 = function(argcv) {    // method width
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                        setModuleName("objectdraw");
                                                        var if1669 = GraceDone;
                                                        setLineNumber(1069);    // compilenode call
                                                        onSelf = true;
                                                        var call1670 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1670)) {
                                                          setLineNumber(1070);    // compilenode call
                                                          onSelf = true;
                                                          var call1671 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1672 = callmethodChecked(call1671, "width", [0]);
                                                          if1669 = call1672;
                                                        } else {
                                                          setLineNumber(1072);    // compilenode call
                                                          onSelf = true;
                                                          var call1673 = callmethodChecked(this, "theWidth", [0]);
                                                          if1669 = call1673;
                                                        }
                                                        setLineNumber(1069);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], if1669)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method width does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        return if1669;
                                                      };
                                                      func1668.paramCounts = [0];
                                                      obj1628.methods["width"] = func1668;
                                                      func1668.definitionLine = 1068;
                                                      func1668.definitionModule = "objectdraw";
                                                      var func1674 = function(argcv) {    // method height
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                        setModuleName("objectdraw");
                                                        var if1675 = GraceDone;
                                                        setLineNumber(1078);    // compilenode call
                                                        onSelf = true;
                                                        var call1676 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1676)) {
                                                          setLineNumber(1079);    // compilenode call
                                                          onSelf = true;
                                                          var call1677 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1678 = callmethodChecked(call1677, "height", [0]);
                                                          if1675 = call1678;
                                                        } else {
                                                          setLineNumber(1081);    // compilenode call
                                                          onSelf = true;
                                                          var call1679 = callmethodChecked(this, "theHeight", [0]);
                                                          if1675 = call1679;
                                                        }
                                                        setLineNumber(1078);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], if1675)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method height does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        return if1675;
                                                      };
                                                      func1674.paramCounts = [0];
                                                      obj1628.methods["height"] = func1674;
                                                      func1674.definitionLine = 1077;
                                                      func1674.definitionModule = "objectdraw";
                                                      var func1680 = function(argcv) {    // method onMouseEnterDo(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_f = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnterDo(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1091);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in onMouseEnterDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1092);    // compilenode string
                                                        var string1681 = new GraceString("mouseover");
                                                        var block1682 = new GraceBlock(this, 1092, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block1682.real = function(var_event__39__) {
                                                          setLineNumber(1093);    // compilenode identifier
                                                          var call1683 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                                                          var var_from = call1683;
                                                          var if1684 = GraceDone;
                                                          setLineNumber(1095);    // compilenode identifier
                                                          var call1686 = callmethodChecked(var_dom, "noObject", [0]);
                                                          var opresult1688 = callmethodChecked(call1686, "==", [1], var_from);
                                                          if (Grace_isTrue(opresult1688)) {
                                                            setLineNumber(1096);    // compilenode identifier
                                                            onSelf = true;
                                                            var call1689 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                                                            var call1690 = callmethodChecked(var_f, "apply", [1], call1689);
                                                            if1684 = call1690;
                                                          }
                                                          return if1684;
                                                        };
                                                        onSelf = true;
                                                        var call1691 = callmethodChecked(this, "on()do", [1, 1], string1681, block1682);
                                                        setLineNumber(1092);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1691)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method onMouseEnterDo(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1691;
                                                      };
                                                      func1680.paramTypes = [];
                                                      func1680.paramTypes.push([]);
                                                      func1680.paramCounts = [1];
                                                      obj1628.methods["onMouseEnterDo"] = func1680;
                                                      func1680.definitionLine = 1091;
                                                      func1680.definitionModule = "objectdraw";
                                                      var func1692 = function(argcv) {    // method onMouseExitDo(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_f = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExitDo(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1102);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in onMouseExitDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1103);    // compilenode string
                                                        var string1693 = new GraceString("mouseout");
                                                        var block1694 = new GraceBlock(this, 1103, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block1694.real = function(var_event__39__) {
                                                          setLineNumber(1104);    // compilenode identifier
                                                          var call1695 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                                                          var var_to = call1695;
                                                          var if1696 = GraceDone;
                                                          setLineNumber(1106);    // compilenode identifier
                                                          var call1698 = callmethodChecked(var_dom, "noObject", [0]);
                                                          var opresult1700 = callmethodChecked(call1698, "==", [1], var_to);
                                                          if (Grace_isTrue(opresult1700)) {
                                                            setLineNumber(1107);    // compilenode identifier
                                                            onSelf = true;
                                                            var call1701 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                                                            var call1702 = callmethodChecked(var_f, "apply", [1], call1701);
                                                            if1696 = call1702;
                                                          }
                                                          return if1696;
                                                        };
                                                        onSelf = true;
                                                        var call1703 = callmethodChecked(this, "on()do", [1, 1], string1693, block1694);
                                                        setLineNumber(1103);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1703)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method onMouseExitDo(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1703;
                                                      };
                                                      func1692.paramTypes = [];
                                                      func1692.paramTypes.push([]);
                                                      func1692.paramCounts = [1];
                                                      obj1628.methods["onMouseExitDo"] = func1692;
                                                      func1692.definitionLine = 1102;
                                                      func1692.definitionModule = "objectdraw";
                                                      var func1704 = function(argcv) {    // method onMouse(1)do(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_kind = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouse (arg list 1) of onMouse(1)do(1)"));
                                                        var var_bl = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[1] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of onMouse(1)do(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1113);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in onMouse (arg list 1), which corresponds to parameter kind, does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        curarg++;
                                                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in do (arg list 2), which corresponds to parameter bl, does not have " + 
                                                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1114);    // compilenode block
                                                        var block1705 = new GraceBlock(this, 1114, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block1705.real = function(var_evt) {
                                                          setLineNumber(1115);    // compilenode identifier
                                                          var call1706 = callmethodChecked(var_evt, "pageY", [0]);
                                                          var call1708 = callmethodChecked(var_evt, "pageX", [0]);
                                                          var opresult1710 = callmethodChecked(call1708, "@", [1], call1706);
                                                          var call1711 = callmethodChecked(var_bl, "apply", [1], opresult1710);
                                                          return call1711;
                                                        };
                                                        setLineNumber(1114);    // compilenode call
                                                        onSelf = true;
                                                        var call1712 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1713 = callmethodChecked(call1712, "addEventListener", [2], var_kind, block1705);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1713)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method onMouse(1)do(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1713;
                                                      };
                                                      func1704.paramTypes = [];
                                                      func1704.paramTypes.push([type_String, "kind"]);
                                                      func1704.paramTypes.push([]);
                                                      func1704.confidential = true;
                                                      func1704.paramCounts = [1, 1];
                                                      obj1628.methods["onMouse()do"] = func1704;
                                                      func1704.definitionLine = 1113;
                                                      func1704.definitionModule = "objectdraw";
                                                      var func1714 = function(argcv) {    // method startApplication
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startApplication"));
                                                        setModuleName("objectdraw");
                                                        var if1715 = GraceDone;
                                                        setLineNumber(1121);    // compilenode call
                                                        onSelf = true;
                                                        var call1716 = callmethodChecked(this, "isOpened", [0]);
                                                        var call1717 = callmethodChecked(call1716, "prefix!", [0]);
                                                        if (Grace_isTrue(call1717)) {
                                                          setLineNumber(1122);    // compilenode string
                                                          var string1718 = new GraceString("");
                                                          var string1719 = new GraceString("");
                                                          var string1720 = new GraceString("");
                                                          onSelf = true;
                                                          var call1722 = callmethodChecked(this, "theHeight", [0]);
                                                          var string1724 = new GraceString(",height=");
                                                          onSelf = true;
                                                          var call1726 = callmethodChecked(this, "theWidth", [0]);
                                                          var string1728 = new GraceString("width=");
                                                          var opresult1730 = callmethodChecked(string1728, "++", [1], call1726);
                                                          var opresult1732 = callmethodChecked(opresult1730, "++", [1], string1724);
                                                          var opresult1734 = callmethodChecked(opresult1732, "++", [1], call1722);
                                                          var opresult1736 = callmethodChecked(opresult1734, "++", [1], string1720);
                                                          var call1737 = callmethodChecked(var_dom, "window", [0]);
                                                          var call1738 = callmethodChecked(call1737, "open", [3], string1718, string1719, opresult1736);
                                                          onSelf = true;
                                                          var call1739 = callmethodChecked(this, "theWindow:=", [1], call1738);
                                                          setLineNumber(1123);    // compilenode call
                                                          onSelf = true;
                                                          var call1740 = callmethodChecked(this, "theTitle", [0]);
                                                          onSelf = true;
                                                          var call1741 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1742 = callmethodChecked(call1741, "document", [0]);
                                                          var call1743 = callmethodChecked(call1742, "title:=", [1], call1740);
                                                          setLineNumber(1124);    // compilenode call
                                                          onSelf = true;
                                                          var call1744 = callmethodChecked(this, "element", [0]);
                                                          onSelf = true;
                                                          var call1745 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1746 = callmethodChecked(call1745, "document", [0]);
                                                          var call1747 = callmethodChecked(call1746, "body", [0]);
                                                          var call1748 = callmethodChecked(call1747, "appendChild", [1], call1744);
                                                          var if1749 = GraceDone;
                                                          setLineNumber(1126);    // compilenode identifier
                                                          var call1750 = callmethodChecked(var_dom, "window", [0]);
                                                          var string1751 = new GraceString("graceRegisterWindow");
                                                          var call1752 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], call1750, string1751);
                                                          if (Grace_isTrue(call1752)) {
                                                            setLineNumber(1127);    // compilenode call
                                                            onSelf = true;
                                                            var call1753 = callmethodChecked(this, "theWindow", [0]);
                                                            var call1754 = callmethodChecked(var_dom, "window", [0]);
                                                            var call1755 = callmethodChecked(call1754, "graceRegisterWindow", [1], call1753);
                                                            if1749 = call1755;
                                                          }
                                                          setLineNumber(1130);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1756 = callmethodChecked(this, "isOpened:=", [1], GraceTrue);
                                                          setLineNumber(1132);    // compilenode string
                                                          var string1757 = new GraceString("100%");
                                                          onSelf = true;
                                                          var call1758 = callmethodChecked(this, "element", [0]);
                                                          var call1759 = callmethodChecked(call1758, "style", [0]);
                                                          var call1760 = callmethodChecked(call1759, "width:=", [1], string1757);
                                                          setLineNumber(1133);    // compilenode string
                                                          var string1761 = new GraceString("0px");
                                                          onSelf = true;
                                                          var call1762 = callmethodChecked(this, "element", [0]);
                                                          var call1763 = callmethodChecked(call1762, "style", [0]);
                                                          var call1764 = callmethodChecked(call1763, "margin:=", [1], string1761);
                                                          var if1765 = GraceDone;
                                                          setLineNumber(1135);    // compilenode call
                                                          onSelf = true;
                                                          var call1766 = callmethodChecked(this, "isHorizontal", [0]);
                                                          if (Grace_isTrue(call1766)) {
                                                            setLineNumber(1136);    // compilenode call
                                                            onSelf = true;
                                                            var call1767 = callmethodChecked(this, "arrangeHorizontal", [0]);
                                                            if1765 = call1767;
                                                          } else {
                                                            setLineNumber(1138);    // compilenode call
                                                            onSelf = true;
                                                            var call1768 = callmethodChecked(this, "arrangeVertical", [0]);
                                                            if1765 = call1768;
                                                          }
                                                          setLineNumber(1141);    // compilenode call
                                                          onSelf = true;
                                                          var call1769 = callmethodChecked(this, "events", [0]);
                                                          var block1770 = new GraceBlock(this, 1141, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block1770.real = function(var_anEvent) {
                                                            setLineNumber(1142);    // compilenode identifier
                                                            var call1771 = callmethodChecked(var_anEvent, "kind", [0]);
                                                            var call1772 = callmethodChecked(var_anEvent, "response", [0]);
                                                            onSelf = true;
                                                            var call1773 = callmethodChecked(this, "on()do", [1, 1], call1771, call1772);
                                                            return call1773;
                                                          };
                                                          var call1774 = callmethodChecked(var_prelude, "for()do", [1, 1], call1769, block1770);
                                                          if1715 = call1774;
                                                        }
                                                        setLineNumber(1121);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1715)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method startApplication does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1715;
                                                      };
                                                      func1714.paramCounts = [0];
                                                      obj1628.methods["startApplication"] = func1714;
                                                      func1714.definitionLine = 1120;
                                                      func1714.definitionModule = "objectdraw";
                                                      var func1775 = function(argcv) {    // method stopApplication
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for stopApplication"));
                                                        setModuleName("objectdraw");
                                                        var if1776 = GraceDone;
                                                        setLineNumber(1149);    // compilenode call
                                                        onSelf = true;
                                                        var call1777 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1777)) {
                                                          setLineNumber(1150);    // compilenode call
                                                          onSelf = true;
                                                          var call1778 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1779 = callmethodChecked(call1778, "close", [0]);
                                                          if1776 = call1779;
                                                        }
                                                        setLineNumber(1149);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1776)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method stopApplication does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1776;
                                                      };
                                                      func1775.paramCounts = [0];
                                                      obj1628.methods["stopApplication"] = func1775;
                                                      func1775.definitionLine = 1148;
                                                      func1775.definitionModule = "objectdraw";
                                                      var func1780 = function(argcv) {    // method asString
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1156);    // compilenode string
                                                        var string1781 = new GraceString("");
                                                        onSelf = true;
                                                        var call1783 = callmethodChecked(this, "windowTitle", [0]);
                                                        var string1785 = new GraceString("application titled ");
                                                        var opresult1787 = callmethodChecked(string1785, "++", [1], call1783);
                                                        var opresult1789 = callmethodChecked(opresult1787, "++", [1], string1781);
                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1789)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method asString does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        return opresult1789;
                                                      };
                                                      func1780.paramCounts = [0];
                                                      obj1628.methods["asString"] = func1780;
                                                      func1780.definitionLine = 1155;
                                                      func1780.definitionModule = "objectdraw";
                                                      setLineNumber(997);    // compilenode identifier
                                                      var call1790 = callmethodChecked(var_document, "createDocumentFragment", [0]);
                                                      var call1791 = callmethodChecked(superDepth, "outer", [0]);
                                                      onOuter = true;
                                                      onSelf = true;
                                                      var call1792 = callmethodChecked(call1791, "containerFromElement()object", [1, 1], call1790, this);
                                                      obj1628.superobj = call1792;
                                                      if (call1792.data) obj1628.data = call1792.data;
                                                      if (call1792.hasOwnProperty('_value'))
                                                          obj1628._value = call1792._value;
                                                      setLineNumber(999);    // compilenode identifier
                                                      obj1628.data["isOpened"] = GraceFalse;
                                                      var reader_objectdraw_isOpened1793 = function() {
                                                        return this.data["isOpened"];
                                                      };
                                                      obj1628.methods["isOpened"] = reader_objectdraw_isOpened1793;
                                                      obj1628.data["isOpened"] = GraceFalse;
                                                      var writer_objectdraw_isOpened1793 = function(argcv, o) {
                                                        this.data["isOpened"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1628.methods["isOpened:="] = writer_objectdraw_isOpened1793;
                                                      reader_objectdraw_isOpened1793.confidential = true;
                                                      writer_objectdraw_isOpened1793.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'isOpened' is not of type Boolean"));
                                                      obj1628.mutable = true;
                                                      obj1628.data["theWindow"] = undefined;
                                                      var reader_objectdraw_theWindow1794 = function() {
                                                        return this.data["theWindow"];
                                                      };
                                                      obj1628.methods["theWindow"] = reader_objectdraw_theWindow1794;
                                                      obj1628.data["theWindow"] = undefined;
                                                      var writer_objectdraw_theWindow1794 = function(argcv, o) {
                                                        this.data["theWindow"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1628.methods["theWindow:="] = writer_objectdraw_theWindow1794;
                                                      reader_objectdraw_theWindow1794.confidential = true;
                                                      writer_objectdraw_theWindow1794.confidential = true;
                                                      obj1628.mutable = true;
                                                      setLineNumber(1002);    // compilenode identifier
                                                      obj1628.data["theTitle"] = var_initialTitle;
                                                      var reader_objectdraw_theTitle1795 = function() {
                                                        return this.data["theTitle"];
                                                      };
                                                      obj1628.methods["theTitle"] = reader_objectdraw_theTitle1795;
                                                      obj1628.data["theTitle"] = var_initialTitle;
                                                      var writer_objectdraw_theTitle1795 = function(argcv, o) {
                                                        this.data["theTitle"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1628.methods["theTitle:="] = writer_objectdraw_theTitle1795;
                                                      reader_objectdraw_theTitle1795.confidential = true;
                                                      writer_objectdraw_theTitle1795.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], var_initialTitle)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'theTitle' is not of type String"));
                                                      obj1628.mutable = true;
                                                      setLineNumber(1003);    // compilenode identifier
                                                      var call1796 = callmethodChecked(var_dimensions__39__, "x", [0]);
                                                      obj1628.data["theWidth"] = call1796;
                                                      var reader_objectdraw_theWidth1797 = function() {
                                                        return this.data["theWidth"];
                                                      };
                                                      obj1628.methods["theWidth"] = reader_objectdraw_theWidth1797;
                                                      obj1628.data["theWidth"] = call1796;
                                                      var writer_objectdraw_theWidth1797 = function(argcv, o) {
                                                        this.data["theWidth"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1628.methods["theWidth:="] = writer_objectdraw_theWidth1797;
                                                      reader_objectdraw_theWidth1797.confidential = true;
                                                      writer_objectdraw_theWidth1797.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1796)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'theWidth' is not of type Number"));
                                                      obj1628.mutable = true;
                                                      setLineNumber(1004);    // compilenode identifier
                                                      var call1798 = callmethodChecked(var_dimensions__39__, "y", [0]);
                                                      obj1628.data["theHeight"] = call1798;
                                                      var reader_objectdraw_theHeight1799 = function() {
                                                        return this.data["theHeight"];
                                                      };
                                                      obj1628.methods["theHeight"] = reader_objectdraw_theHeight1799;
                                                      obj1628.data["theHeight"] = call1798;
                                                      var writer_objectdraw_theHeight1799 = function(argcv, o) {
                                                        this.data["theHeight"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1628.methods["theHeight:="] = writer_objectdraw_theHeight1799;
                                                      reader_objectdraw_theHeight1799.confidential = true;
                                                      writer_objectdraw_theHeight1799.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1798)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'theHeight' is not of type Number"));
                                                      obj1628.mutable = true;
                                                      setLineNumber(1006);    // compilenode array
                                                      var array1800 = new PrimitiveGraceList([]);
                                                      obj1628.data["events"] = array1800;
                                                      var reader_objectdraw_events1801 = function() {
                                                        return this.data["events"];
                                                      };
                                                      reader_objectdraw_events1801.def = true;
                                                      reader_objectdraw_events1801.confidential = true;
                                                      obj1628.methods["events"] = reader_objectdraw_events1801;
                                                      setLineNumber(1017);    // compilenode identifier
                                                      obj1628.data["isHorizontal"] = GraceTrue;
                                                      var reader_objectdraw_isHorizontal1802 = function() {
                                                        return this.data["isHorizontal"];
                                                      };
                                                      obj1628.methods["isHorizontal"] = reader_objectdraw_isHorizontal1802;
                                                      obj1628.data["isHorizontal"] = GraceTrue;
                                                      var writer_objectdraw_isHorizontal1802 = function(argcv, o) {
                                                        this.data["isHorizontal"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1628.methods["isHorizontal:="] = writer_objectdraw_isHorizontal1802;
                                                      reader_objectdraw_isHorizontal1802.confidential = true;
                                                      writer_objectdraw_isHorizontal1802.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceTrue)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'isHorizontal' is not of type Boolean"));
                                                      obj1628.mutable = true;
                                                      superDepth = origSuperDepth;
                                                    };
                                                    obj_init_1628.apply(inheritingObject, []);
                                                    return obj1628;
                                                    };
                                                    func1626.paramTypes = [];
                                                    func1626.paramTypes.push([type_String, "initialTitle"]);
                                                    func1626.paramTypes.push([]);
                                                    this.methods["applicationTitle()size()object"] = func1626;
                                                  setLineNumber(1160);    // compilenode method
                                                  var func1803 = function(argcv) {    // method drawingCanvasSize(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_dimensions__39__ = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for drawingCanvasSize(1)"));
                                                    // Start argument checking
                                                    curarg = 1;
                                                    onSelf = true;
                                                    var call1804 = callmethodChecked(this, "Point", [0]);
                                                    if (!Grace_isTrue(callmethod(call1804, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in drawingCanvasSize (arg list 1), which corresponds to parameter dimensions', does not have " + 
                                                                callmethod(call1804, "asString", [0])._value + "."));
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("objectdraw");
                                                    var obj1805 = Grace_allocObject(null, "objectdraw.drawingCanvasSize");
                                                    obj1805.definitionModule = "objectdraw";
                                                    obj1805.definitionLine = 1160;
                                                    obj1805.outer = this;
                                                    var reader_objectdraw_outer1806 = function() {
                                                      return this.outer;
                                                    };
                                                    obj1805.methods["outer"] = reader_objectdraw_outer1806;
                                                    var obj_init_1805 = function() {
                                                      var origSuperDepth = superDepth;
                                                      superDepth = obj1805;
                                                      var func1807 = function(argcv) {    // method width
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1175);    // compilenode call
                                                        onSelf = true;
                                                        var call1808 = callmethodChecked(this, "element", [0]);
                                                        var call1809 = callmethodChecked(call1808, "width", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1809)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method width does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        return call1809;
                                                      };
                                                      func1807.paramCounts = [0];
                                                      obj1805.methods["width"] = func1807;
                                                      func1807.definitionLine = 1174;
                                                      func1807.definitionModule = "objectdraw";
                                                      var func1810 = function(argcv) {    // method height
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1180);    // compilenode call
                                                        onSelf = true;
                                                        var call1811 = callmethodChecked(this, "element", [0]);
                                                        var call1812 = callmethodChecked(call1811, "height", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1812)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method height does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        return call1812;
                                                      };
                                                      func1810.paramCounts = [0];
                                                      obj1805.methods["height"] = func1810;
                                                      func1810.definitionLine = 1179;
                                                      func1810.definitionModule = "objectdraw";
                                                      var func1813 = function(argcv) {    // method size
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1183);    // compilenode call
                                                        onSelf = true;
                                                        var call1814 = callmethodChecked(this, "element", [0]);
                                                        var call1815 = callmethodChecked(call1814, "height", [0]);
                                                        onSelf = true;
                                                        var call1817 = callmethodChecked(this, "element", [0]);
                                                        var call1818 = callmethodChecked(call1817, "width", [0]);
                                                        var opresult1820 = callmethodChecked(call1818, "@", [1], call1815);
                                                        var call1821 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call1822 = callmethodChecked(call1821, "Point", [0]);
                                                        if (!Grace_isTrue(callmethod(call1822, "match", [1], opresult1820)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method size does not have " + 
                                                                    callmethod(call1822, "asString", [0])._value + "."));
                                                        return opresult1820;
                                                      };
                                                      func1813.paramCounts = [0];
                                                      obj1805.methods["size"] = func1813;
                                                      func1813.definitionLine = 1183;
                                                      func1813.definitionModule = "objectdraw";
                                                      var func1823 = function(argcv) {    // method notifyRedraw
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for notifyRedraw"));
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1192);    // compilenode identifier
                                                        onSelf = true;
                                                        var call1824 = callmethodChecked(this, "redraw:=", [1], GraceTrue);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1824)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method notifyRedraw does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1824;
                                                      };
                                                      func1823.paramCounts = [0];
                                                      obj1805.methods["notifyRedraw"] = func1823;
                                                      func1823.definitionLine = 1191;
                                                      func1823.definitionModule = "objectdraw";
                                                      var func1825 = function(argcv) {    // method startDrawing
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startDrawing"));
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1197);    // compilenode block
                                                        var block1826 = new GraceBlock(this, 1197, 0);
                                                        block1826.real = function() {
                                                          var if1827 = GraceDone;
                                                          setLineNumber(1198);    // compilenode call
                                                          onSelf = true;
                                                          var call1828 = callmethodChecked(this, "redraw", [0]);
                                                          if (Grace_isTrue(call1828)) {
                                                            setLineNumber(1199);    // compilenode call
                                                            onSelf = true;
                                                            var call1829 = callmethodChecked(this, "theContext", [0]);
                                                            onSelf = true;
                                                            var call1830 = callmethodChecked(this, "theGraphics", [0]);
                                                            onSelf = true;
                                                            var call1831 = callmethodChecked(this, "width", [0]);
                                                            onSelf = true;
                                                            var call1832 = callmethodChecked(this, "height", [0]);
                                                            var call1833 = callmethodChecked(var_dom, "draw", [4], call1829, call1830, call1831, call1832);
                                                            if1827 = call1833;
                                                          }
                                                          return if1827;
                                                        };
                                                        setLineNumber(1201);    // compilenode num
                                                        var quotient1836 = callmethodChecked(new GraceNum(1000), "/", [1], var_frameRate);
                                                        setLineNumber(1197);    // compilenode call
                                                        onSelf = true;
                                                        var call1837 = callmethodChecked(this, "element", [0]);
                                                        var call1838 = callmethodChecked(call1837, "ownerDocument", [0]);
                                                        var call1839 = callmethodChecked(call1838, "defaultView", [0]);
                                                        var call1840 = callmethodChecked(call1839, "setInterval", [2], block1826, quotient1836);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1840)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method startDrawing does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1840;
                                                      };
                                                      func1825.paramCounts = [0];
                                                      obj1805.methods["startDrawing"] = func1825;
                                                      func1825.definitionLine = 1196;
                                                      func1825.definitionModule = "objectdraw";
                                                      var func1841 = function(argcv) {    // method clear
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for clear"));
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1206);    // compilenode array
                                                        var array1842 = new PrimitiveGraceList([]);
                                                        onSelf = true;
                                                        var call1843 = callmethodChecked(this, "theGraphics:=", [1], array1842);
                                                        setLineNumber(1207);    // compilenode call
                                                        onSelf = true;
                                                        var call1844 = callmethodChecked(this, "notifyRedraw", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1844)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method clear does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1844;
                                                      };
                                                      func1841.paramCounts = [0];
                                                      obj1805.methods["clear"] = func1841;
                                                      func1841.definitionLine = 1205;
                                                      func1841.definitionModule = "objectdraw";
                                                      var func1845 = function(argcv) {    // method add(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_d = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for add(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1211);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in add (arg list 1), which corresponds to parameter d, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1212);    // compilenode call
                                                        onSelf = true;
                                                        var call1846 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1847 = callmethodChecked(call1846, "push", [1], var_d);
                                                        setLineNumber(1213);    // compilenode call
                                                        onSelf = true;
                                                        var call1848 = callmethodChecked(this, "notifyRedraw", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1848)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method add(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1848;
                                                      };
                                                      func1845.paramTypes = [];
                                                      func1845.paramTypes.push([]);
                                                      func1845.paramCounts = [1];
                                                      obj1805.methods["add"] = func1845;
                                                      func1845.definitionLine = 1211;
                                                      func1845.definitionModule = "objectdraw";
                                                      var func1849 = function(argcv) {    // method remove(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_aGraphic = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for remove(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1217);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in remove (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        var if1850 = GraceDone;
                                                        setLineNumber(1218);    // compilenode call
                                                        onSelf = true;
                                                        var call1851 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1852 = callmethodChecked(call1851, "contains", [1], var_aGraphic);
                                                        if (Grace_isTrue(call1852)) {
                                                          setLineNumber(1219);    // compilenode call
                                                          onSelf = true;
                                                          var call1853 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1854 = callmethodChecked(call1853, "remove", [1], var_aGraphic);
                                                          setLineNumber(1220);    // compilenode call
                                                          onSelf = true;
                                                          var call1855 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if1850 = call1855;
                                                        }
                                                        setLineNumber(1218);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1850)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method remove(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1850;
                                                      };
                                                      func1849.paramTypes = [];
                                                      func1849.paramTypes.push([]);
                                                      func1849.paramCounts = [1];
                                                      obj1805.methods["remove"] = func1849;
                                                      func1849.definitionLine = 1217;
                                                      func1849.definitionModule = "objectdraw";
                                                      var func1856 = function(argcv) {    // method sendToFront(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_aGraphic = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToFront(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1225);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in sendToFront (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1226);    // compilenode call
                                                        onSelf = true;
                                                        var call1857 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1858 = callmethodChecked(call1857, "remove", [1], var_aGraphic);
                                                        setLineNumber(1227);    // compilenode call
                                                        onSelf = true;
                                                        var call1859 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1860 = callmethodChecked(call1859, "push", [1], var_aGraphic);
                                                        setLineNumber(1228);    // compilenode call
                                                        onSelf = true;
                                                        var call1861 = callmethodChecked(this, "notifyRedraw", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1861)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method sendToFront(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1861;
                                                      };
                                                      func1856.paramTypes = [];
                                                      func1856.paramTypes.push([]);
                                                      func1856.paramCounts = [1];
                                                      obj1805.methods["sendToFront"] = func1856;
                                                      func1856.definitionLine = 1225;
                                                      func1856.definitionModule = "objectdraw";
                                                      var func1862 = function(argcv) {    // method sendToBack(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_aGraphic = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToBack(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1232);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in sendToBack (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1233);    // compilenode call
                                                        onSelf = true;
                                                        var call1863 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1864 = callmethodChecked(call1863, "remove", [1], var_aGraphic);
                                                        setLineNumber(1234);    // compilenode call
                                                        onSelf = true;
                                                        var call1865 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1866 = callmethodChecked(call1865, "unshift", [1], var_aGraphic);
                                                        setLineNumber(1235);    // compilenode call
                                                        onSelf = true;
                                                        var call1867 = callmethodChecked(this, "notifyRedraw", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1867)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method sendToBack(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1867;
                                                      };
                                                      func1862.paramTypes = [];
                                                      func1862.paramTypes.push([]);
                                                      func1862.paramCounts = [1];
                                                      obj1805.methods["sendToBack"] = func1862;
                                                      func1862.definitionLine = 1232;
                                                      func1862.definitionModule = "objectdraw";
                                                      var func1868 = function(argcv) {    // method sendForward(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_aGraphic = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendForward(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1239);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in sendForward (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1240);    // compilenode call
                                                        onSelf = true;
                                                        var call1869 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1870 = callmethodChecked(call1869, "indexOf", [1], var_aGraphic);
                                                        var var_theIndex = call1870;
                                                        var if1871 = GraceDone;
                                                        setLineNumber(1242);    // compilenode call
                                                        onSelf = true;
                                                        var call1872 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1873 = callmethodChecked(call1872, "size", [0]);
                                                        var opresult1876 = callmethodChecked(var_theIndex, "\u2260", [1], call1873);
                                                        if (Grace_isTrue(opresult1876)) {
                                                          setLineNumber(1243);    // compilenode call
                                                          onSelf = true;
                                                          var call1877 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1878 = callmethodChecked(call1877, "remove", [1], var_aGraphic);
                                                          setLineNumber(1244);    // compilenode identifier
                                                          var opresult1881 = callmethodChecked(var_theIndex, "+", [1], new GraceNum(1));
                                                          onSelf = true;
                                                          var call1882 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1883 = callmethodChecked(call1882, "at()add", [1, 1], opresult1881, var_aGraphic);
                                                          setLineNumber(1245);    // compilenode call
                                                          onSelf = true;
                                                          var call1884 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if1871 = call1884;
                                                        }
                                                        setLineNumber(1242);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1871)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method sendForward(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1871;
                                                      };
                                                      func1868.paramTypes = [];
                                                      func1868.paramTypes.push([]);
                                                      func1868.paramCounts = [1];
                                                      obj1805.methods["sendForward"] = func1868;
                                                      func1868.definitionLine = 1239;
                                                      func1868.definitionModule = "objectdraw";
                                                      var func1885 = function(argcv) {    // method sendBackward(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_aGraphic = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendBackward(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1250);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in sendBackward (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1251);    // compilenode call
                                                        onSelf = true;
                                                        var call1886 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1887 = callmethodChecked(call1886, "indexOf", [1], var_aGraphic);
                                                        var var_theIndex = call1887;
                                                        var if1888 = GraceDone;
                                                        setLineNumber(1253);    // compilenode identifier
                                                        var opresult1891 = callmethodChecked(var_theIndex, "\u2260", [1], new GraceNum(1));
                                                        if (Grace_isTrue(opresult1891)) {
                                                          setLineNumber(1254);    // compilenode call
                                                          onSelf = true;
                                                          var call1892 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1893 = callmethodChecked(call1892, "remove", [1], var_aGraphic);
                                                          setLineNumber(1255);    // compilenode identifier
                                                          var diff1896 = callmethodChecked(var_theIndex, "-", [1], new GraceNum(1));
                                                          onSelf = true;
                                                          var call1897 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1898 = callmethodChecked(call1897, "at()add", [1, 1], diff1896, var_aGraphic);
                                                          setLineNumber(1256);    // compilenode call
                                                          onSelf = true;
                                                          var call1899 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if1888 = call1899;
                                                        }
                                                        setLineNumber(1253);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1888)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method sendBackward(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1888;
                                                      };
                                                      func1885.paramTypes = [];
                                                      func1885.paramTypes.push([]);
                                                      func1885.paramCounts = [1];
                                                      obj1805.methods["sendBackward"] = func1885;
                                                      func1885.definitionLine = 1250;
                                                      func1885.definitionModule = "objectdraw";
                                                      var func1900 = function(argcv) {    // method printObjects
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for printObjects"));
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1262);    // compilenode call
                                                        onSelf = true;
                                                        var call1901 = callmethodChecked(this, "theGraphics", [0]);
                                                        var block1902 = new GraceBlock(this, 1262, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block1902.real = function(var_aGraphic) {
                                                          setLineNumber(1263);    // compilenode identifier
                                                          var call1903 = Grace_print(var_aGraphic);
                                                          return call1903;
                                                        };
                                                        var call1904 = callmethodChecked(var_prelude, "for()do", [1, 1], call1901, block1902);
                                                        setLineNumber(1262);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1904)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method printObjects does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1904;
                                                      };
                                                      func1900.paramCounts = [0];
                                                      obj1805.methods["printObjects"] = func1900;
                                                      func1900.definitionLine = 1261;
                                                      func1900.definitionModule = "objectdraw";
                                                      var func1905 = function(argcv) {    // method asString
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                        setModuleName("objectdraw");
                                                        setLineNumber(1269);    // compilenode string
                                                        var string1906 = new GraceString(" objects");
                                                        onSelf = true;
                                                        var call1908 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1909 = callmethodChecked(call1908, "size", [0]);
                                                        var string1911 = new GraceString("canvas: with ");
                                                        var opresult1913 = callmethodChecked(string1911, "++", [1], call1909);
                                                        var opresult1915 = callmethodChecked(opresult1913, "++", [1], string1906);
                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1915)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method asString does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        return opresult1915;
                                                      };
                                                      func1905.paramCounts = [0];
                                                      obj1805.methods["asString"] = func1905;
                                                      func1905.definitionLine = 1268;
                                                      func1905.definitionModule = "objectdraw";
                                                      setLineNumber(1164);    // compilenode string
                                                      var string1916 = new GraceString("canvas");
                                                      var call1917 = callmethodChecked(var_document, "createElement", [1], string1916);
                                                      var call1918 = callmethodChecked(superDepth, "outer", [0]);
                                                      onOuter = true;
                                                      onSelf = true;
                                                      var call1919 = callmethodChecked(call1918, "componentFromElement()object", [1, 1], call1917, this);
                                                      obj1805.superobj = call1919;
                                                      if (call1919.data) obj1805.data = call1919.data;
                                                      if (call1919.hasOwnProperty('_value'))
                                                          obj1805._value = call1919._value;
                                                      setLineNumber(1166);    // compilenode identifier
                                                      var call1920 = callmethodChecked(var_dimensions__39__, "x", [0]);
                                                      onSelf = true;
                                                      var call1921 = callmethodChecked(this, "element", [0]);
                                                      var call1922 = callmethodChecked(call1921, "width:=", [1], call1920);
                                                      setLineNumber(1167);    // compilenode identifier
                                                      var call1923 = callmethodChecked(var_dimensions__39__, "y", [0]);
                                                      onSelf = true;
                                                      var call1924 = callmethodChecked(this, "element", [0]);
                                                      var call1925 = callmethodChecked(call1924, "height:=", [1], call1923);
                                                      setLineNumber(1168);    // compilenode string
                                                      var string1926 = new GraceString("center");
                                                      onSelf = true;
                                                      var call1927 = callmethodChecked(this, "element", [0]);
                                                      var call1928 = callmethodChecked(call1927, "style", [0]);
                                                      var call1929 = callmethodChecked(call1928, "alignSelf:=", [1], string1926);
                                                      setLineNumber(1170);    // compilenode string
                                                      var string1930 = new GraceString("2d");
                                                      onSelf = true;
                                                      var call1931 = callmethodChecked(this, "element", [0]);
                                                      var call1932 = callmethodChecked(call1931, "getContext", [1], string1930);
                                                      obj1805.data["theContext"] = call1932;
                                                      var reader_objectdraw_theContext1933 = function() {
                                                        return this.data["theContext"];
                                                      };
                                                      reader_objectdraw_theContext1933.def = true;
                                                      reader_objectdraw_theContext1933.confidential = true;
                                                      obj1805.methods["theContext"] = reader_objectdraw_theContext1933;
                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call1932)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("value of def 'theContext' is not of type Foreign"));
                                                      setLineNumber(1171);    // compilenode call
                                                      onSelf = true;
                                                      var call1934 = callmethodChecked(this, "theContext", [0]);
                                                      var call1935 = callmethodChecked(call1934, "lineWidth:=", [1], new GraceNum(2));
                                                      setLineNumber(1186);    // compilenode array
                                                      var array1936 = new PrimitiveGraceList([]);
                                                      obj1805.data["theGraphics"] = array1936;
                                                      var reader_objectdraw_theGraphics1937 = function() {
                                                        return this.data["theGraphics"];
                                                      };
                                                      obj1805.methods["theGraphics"] = reader_objectdraw_theGraphics1937;
                                                      obj1805.data["theGraphics"] = array1936;
                                                      var writer_objectdraw_theGraphics1937 = function(argcv, o) {
                                                        this.data["theGraphics"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1805.methods["theGraphics:="] = writer_objectdraw_theGraphics1937;
                                                      reader_objectdraw_theGraphics1937.confidential = true;
                                                      writer_objectdraw_theGraphics1937.confidential = true;
                                                      obj1805.mutable = true;
                                                      setLineNumber(1188);    // compilenode identifier
                                                      obj1805.data["redraw"] = GraceFalse;
                                                      var reader_objectdraw_redraw1938 = function() {
                                                        return this.data["redraw"];
                                                      };
                                                      obj1805.methods["redraw"] = reader_objectdraw_redraw1938;
                                                      obj1805.data["redraw"] = GraceFalse;
                                                      var writer_objectdraw_redraw1938 = function(argcv, o) {
                                                        this.data["redraw"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1805.methods["redraw:="] = writer_objectdraw_redraw1938;
                                                      reader_objectdraw_redraw1938.confidential = true;
                                                      writer_objectdraw_redraw1938.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'redraw' is not of type Boolean"));
                                                      obj1805.mutable = true;
                                                      superDepth = origSuperDepth;
                                                    };
                                                    obj_init_1805.apply(obj1805, []);
                                                    setLineNumber(1160);    // return value
                                                    if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match", [1], obj1805)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method drawingCanvasSize(1) does not have " + 
                                                                callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                    return obj1805;
                                                  };
                                                  func1803.paramCounts = [1];
                                                  this.methods["drawingCanvasSize"] = func1803;
                                                  func1803.definitionLine = 1160;
                                                  func1803.definitionModule = "objectdraw";
                                                    var func1939 = function(argcv) {    // method drawingCanvasSize(1     )()object
                                                      var curarg = 1;
                                                      var var_dimensions__39__ = arguments[curarg];
                                                      curarg++;
                                                      var inheritingObject = arguments[curarg++];
                                                      // Start argument processing
                                                      curarg = 1;
                                                      onSelf = true;
                                                      var call1940 = callmethodChecked(this, "Point", [0]);
                                                      if (!Grace_isTrue(callmethod(call1940, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in drawingCanvasSize (arg list 1), which corresponds to parameter dimensions', does not have " + 
                                                                  callmethod(call1940, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument processing
                                                      setModuleName("objectdraw");
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var obj1941 = Grace_allocObject(null, "drawingCanvasSize");
                                                      obj1941.definitionModule = "objectdraw";
                                                      obj1941.definitionLine = 1160;
                                                      var inho1941 = inheritingObject;
                                                      while (inho1941.superobj) inho1941 = inho1941.superobj;
                                                      inho1941.superobj = obj1941;
                                                      obj1941.data = inheritingObject.data;
                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                        obj1941._value = inheritingObject._value;
                                                      obj1941.outer = this;
                                                      var reader_objectdraw_outer1942 = function() {
                                                        return this.outer;
                                                      };
                                                      obj1941.methods["outer"] = reader_objectdraw_outer1942;
                                                      var obj_init_1941 = function() {
                                                        var origSuperDepth = superDepth;
                                                        superDepth = obj1941;
                                                        var func1943 = function(argcv) {    // method width
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1175);    // compilenode call
                                                          onSelf = true;
                                                          var call1944 = callmethodChecked(this, "element", [0]);
                                                          var call1945 = callmethodChecked(call1944, "width", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1945)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method width does not have " + 
                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                          return call1945;
                                                        };
                                                        func1943.paramCounts = [0];
                                                        obj1941.methods["width"] = func1943;
                                                        func1943.definitionLine = 1174;
                                                        func1943.definitionModule = "objectdraw";
                                                        var func1946 = function(argcv) {    // method height
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1180);    // compilenode call
                                                          onSelf = true;
                                                          var call1947 = callmethodChecked(this, "element", [0]);
                                                          var call1948 = callmethodChecked(call1947, "height", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1948)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method height does not have " + 
                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                          return call1948;
                                                        };
                                                        func1946.paramCounts = [0];
                                                        obj1941.methods["height"] = func1946;
                                                        func1946.definitionLine = 1179;
                                                        func1946.definitionModule = "objectdraw";
                                                        var func1949 = function(argcv) {    // method size
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1183);    // compilenode call
                                                          onSelf = true;
                                                          var call1950 = callmethodChecked(this, "element", [0]);
                                                          var call1951 = callmethodChecked(call1950, "height", [0]);
                                                          onSelf = true;
                                                          var call1953 = callmethodChecked(this, "element", [0]);
                                                          var call1954 = callmethodChecked(call1953, "width", [0]);
                                                          var opresult1956 = callmethodChecked(call1954, "@", [1], call1951);
                                                          var call1957 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call1958 = callmethodChecked(call1957, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call1958, "match", [1], opresult1956)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method size does not have " + 
                                                                      callmethod(call1958, "asString", [0])._value + "."));
                                                          return opresult1956;
                                                        };
                                                        func1949.paramCounts = [0];
                                                        obj1941.methods["size"] = func1949;
                                                        func1949.definitionLine = 1183;
                                                        func1949.definitionModule = "objectdraw";
                                                        var func1959 = function(argcv) {    // method notifyRedraw
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for notifyRedraw"));
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1192);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1960 = callmethodChecked(this, "redraw:=", [1], GraceTrue);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1960)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method notifyRedraw does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call1960;
                                                        };
                                                        func1959.paramCounts = [0];
                                                        obj1941.methods["notifyRedraw"] = func1959;
                                                        func1959.definitionLine = 1191;
                                                        func1959.definitionModule = "objectdraw";
                                                        var func1961 = function(argcv) {    // method startDrawing
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startDrawing"));
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1197);    // compilenode block
                                                          var block1962 = new GraceBlock(this, 1197, 0);
                                                          block1962.real = function() {
                                                            var if1963 = GraceDone;
                                                            setLineNumber(1198);    // compilenode call
                                                            onSelf = true;
                                                            var call1964 = callmethodChecked(this, "redraw", [0]);
                                                            if (Grace_isTrue(call1964)) {
                                                              setLineNumber(1199);    // compilenode call
                                                              onSelf = true;
                                                              var call1965 = callmethodChecked(this, "theContext", [0]);
                                                              onSelf = true;
                                                              var call1966 = callmethodChecked(this, "theGraphics", [0]);
                                                              onSelf = true;
                                                              var call1967 = callmethodChecked(this, "width", [0]);
                                                              onSelf = true;
                                                              var call1968 = callmethodChecked(this, "height", [0]);
                                                              var call1969 = callmethodChecked(var_dom, "draw", [4], call1965, call1966, call1967, call1968);
                                                              if1963 = call1969;
                                                            }
                                                            return if1963;
                                                          };
                                                          setLineNumber(1201);    // compilenode num
                                                          var quotient1972 = callmethodChecked(new GraceNum(1000), "/", [1], var_frameRate);
                                                          setLineNumber(1197);    // compilenode call
                                                          onSelf = true;
                                                          var call1973 = callmethodChecked(this, "element", [0]);
                                                          var call1974 = callmethodChecked(call1973, "ownerDocument", [0]);
                                                          var call1975 = callmethodChecked(call1974, "defaultView", [0]);
                                                          var call1976 = callmethodChecked(call1975, "setInterval", [2], block1962, quotient1972);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1976)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method startDrawing does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call1976;
                                                        };
                                                        func1961.paramCounts = [0];
                                                        obj1941.methods["startDrawing"] = func1961;
                                                        func1961.definitionLine = 1196;
                                                        func1961.definitionModule = "objectdraw";
                                                        var func1977 = function(argcv) {    // method clear
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for clear"));
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1206);    // compilenode array
                                                          var array1978 = new PrimitiveGraceList([]);
                                                          onSelf = true;
                                                          var call1979 = callmethodChecked(this, "theGraphics:=", [1], array1978);
                                                          setLineNumber(1207);    // compilenode call
                                                          onSelf = true;
                                                          var call1980 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1980)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method clear does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call1980;
                                                        };
                                                        func1977.paramCounts = [0];
                                                        obj1941.methods["clear"] = func1977;
                                                        func1977.definitionLine = 1205;
                                                        func1977.definitionModule = "objectdraw";
                                                        var func1981 = function(argcv) {    // method add(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_d = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for add(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1211);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in add (arg list 1), which corresponds to parameter d, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1212);    // compilenode call
                                                          onSelf = true;
                                                          var call1982 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1983 = callmethodChecked(call1982, "push", [1], var_d);
                                                          setLineNumber(1213);    // compilenode call
                                                          onSelf = true;
                                                          var call1984 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1984)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method add(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call1984;
                                                        };
                                                        func1981.paramTypes = [];
                                                        func1981.paramTypes.push([]);
                                                        func1981.paramCounts = [1];
                                                        obj1941.methods["add"] = func1981;
                                                        func1981.definitionLine = 1211;
                                                        func1981.definitionModule = "objectdraw";
                                                        var func1985 = function(argcv) {    // method remove(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aGraphic = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for remove(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1217);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in remove (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          var if1986 = GraceDone;
                                                          setLineNumber(1218);    // compilenode call
                                                          onSelf = true;
                                                          var call1987 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1988 = callmethodChecked(call1987, "contains", [1], var_aGraphic);
                                                          if (Grace_isTrue(call1988)) {
                                                            setLineNumber(1219);    // compilenode call
                                                            onSelf = true;
                                                            var call1989 = callmethodChecked(this, "theGraphics", [0]);
                                                            var call1990 = callmethodChecked(call1989, "remove", [1], var_aGraphic);
                                                            setLineNumber(1220);    // compilenode call
                                                            onSelf = true;
                                                            var call1991 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if1986 = call1991;
                                                          }
                                                          setLineNumber(1218);    // return value
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1986)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method remove(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return if1986;
                                                        };
                                                        func1985.paramTypes = [];
                                                        func1985.paramTypes.push([]);
                                                        func1985.paramCounts = [1];
                                                        obj1941.methods["remove"] = func1985;
                                                        func1985.definitionLine = 1217;
                                                        func1985.definitionModule = "objectdraw";
                                                        var func1992 = function(argcv) {    // method sendToFront(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aGraphic = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToFront(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1225);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in sendToFront (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1226);    // compilenode call
                                                          onSelf = true;
                                                          var call1993 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1994 = callmethodChecked(call1993, "remove", [1], var_aGraphic);
                                                          setLineNumber(1227);    // compilenode call
                                                          onSelf = true;
                                                          var call1995 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1996 = callmethodChecked(call1995, "push", [1], var_aGraphic);
                                                          setLineNumber(1228);    // compilenode call
                                                          onSelf = true;
                                                          var call1997 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1997)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method sendToFront(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call1997;
                                                        };
                                                        func1992.paramTypes = [];
                                                        func1992.paramTypes.push([]);
                                                        func1992.paramCounts = [1];
                                                        obj1941.methods["sendToFront"] = func1992;
                                                        func1992.definitionLine = 1225;
                                                        func1992.definitionModule = "objectdraw";
                                                        var func1998 = function(argcv) {    // method sendToBack(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aGraphic = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToBack(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1232);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in sendToBack (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1233);    // compilenode call
                                                          onSelf = true;
                                                          var call1999 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2000 = callmethodChecked(call1999, "remove", [1], var_aGraphic);
                                                          setLineNumber(1234);    // compilenode call
                                                          onSelf = true;
                                                          var call2001 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2002 = callmethodChecked(call2001, "unshift", [1], var_aGraphic);
                                                          setLineNumber(1235);    // compilenode call
                                                          onSelf = true;
                                                          var call2003 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2003)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method sendToBack(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2003;
                                                        };
                                                        func1998.paramTypes = [];
                                                        func1998.paramTypes.push([]);
                                                        func1998.paramCounts = [1];
                                                        obj1941.methods["sendToBack"] = func1998;
                                                        func1998.definitionLine = 1232;
                                                        func1998.definitionModule = "objectdraw";
                                                        var func2004 = function(argcv) {    // method sendForward(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aGraphic = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendForward(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1239);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in sendForward (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1240);    // compilenode call
                                                          onSelf = true;
                                                          var call2005 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2006 = callmethodChecked(call2005, "indexOf", [1], var_aGraphic);
                                                          var var_theIndex = call2006;
                                                          var if2007 = GraceDone;
                                                          setLineNumber(1242);    // compilenode call
                                                          onSelf = true;
                                                          var call2008 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2009 = callmethodChecked(call2008, "size", [0]);
                                                          var opresult2012 = callmethodChecked(var_theIndex, "\u2260", [1], call2009);
                                                          if (Grace_isTrue(opresult2012)) {
                                                            setLineNumber(1243);    // compilenode call
                                                            onSelf = true;
                                                            var call2013 = callmethodChecked(this, "theGraphics", [0]);
                                                            var call2014 = callmethodChecked(call2013, "remove", [1], var_aGraphic);
                                                            setLineNumber(1244);    // compilenode identifier
                                                            var opresult2017 = callmethodChecked(var_theIndex, "+", [1], new GraceNum(1));
                                                            onSelf = true;
                                                            var call2018 = callmethodChecked(this, "theGraphics", [0]);
                                                            var call2019 = callmethodChecked(call2018, "at()add", [1, 1], opresult2017, var_aGraphic);
                                                            setLineNumber(1245);    // compilenode call
                                                            onSelf = true;
                                                            var call2020 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if2007 = call2020;
                                                          }
                                                          setLineNumber(1242);    // return value
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], if2007)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method sendForward(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return if2007;
                                                        };
                                                        func2004.paramTypes = [];
                                                        func2004.paramTypes.push([]);
                                                        func2004.paramCounts = [1];
                                                        obj1941.methods["sendForward"] = func2004;
                                                        func2004.definitionLine = 1239;
                                                        func2004.definitionModule = "objectdraw";
                                                        var func2021 = function(argcv) {    // method sendBackward(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aGraphic = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendBackward(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1250);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in sendBackward (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1251);    // compilenode call
                                                          onSelf = true;
                                                          var call2022 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2023 = callmethodChecked(call2022, "indexOf", [1], var_aGraphic);
                                                          var var_theIndex = call2023;
                                                          var if2024 = GraceDone;
                                                          setLineNumber(1253);    // compilenode identifier
                                                          var opresult2027 = callmethodChecked(var_theIndex, "\u2260", [1], new GraceNum(1));
                                                          if (Grace_isTrue(opresult2027)) {
                                                            setLineNumber(1254);    // compilenode call
                                                            onSelf = true;
                                                            var call2028 = callmethodChecked(this, "theGraphics", [0]);
                                                            var call2029 = callmethodChecked(call2028, "remove", [1], var_aGraphic);
                                                            setLineNumber(1255);    // compilenode identifier
                                                            var diff2032 = callmethodChecked(var_theIndex, "-", [1], new GraceNum(1));
                                                            onSelf = true;
                                                            var call2033 = callmethodChecked(this, "theGraphics", [0]);
                                                            var call2034 = callmethodChecked(call2033, "at()add", [1, 1], diff2032, var_aGraphic);
                                                            setLineNumber(1256);    // compilenode call
                                                            onSelf = true;
                                                            var call2035 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if2024 = call2035;
                                                          }
                                                          setLineNumber(1253);    // return value
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], if2024)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method sendBackward(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return if2024;
                                                        };
                                                        func2021.paramTypes = [];
                                                        func2021.paramTypes.push([]);
                                                        func2021.paramCounts = [1];
                                                        obj1941.methods["sendBackward"] = func2021;
                                                        func2021.definitionLine = 1250;
                                                        func2021.definitionModule = "objectdraw";
                                                        var func2036 = function(argcv) {    // method printObjects
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for printObjects"));
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1262);    // compilenode call
                                                          onSelf = true;
                                                          var call2037 = callmethodChecked(this, "theGraphics", [0]);
                                                          var block2038 = new GraceBlock(this, 1262, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2038.real = function(var_aGraphic) {
                                                            setLineNumber(1263);    // compilenode identifier
                                                            var call2039 = Grace_print(var_aGraphic);
                                                            return call2039;
                                                          };
                                                          var call2040 = callmethodChecked(var_prelude, "for()do", [1, 1], call2037, block2038);
                                                          setLineNumber(1262);    // return value
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2040)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method printObjects does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2040;
                                                        };
                                                        func2036.paramCounts = [0];
                                                        obj1941.methods["printObjects"] = func2036;
                                                        func2036.definitionLine = 1261;
                                                        func2036.definitionModule = "objectdraw";
                                                        var func2041 = function(argcv) {    // method asString
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1269);    // compilenode string
                                                          var string2042 = new GraceString(" objects");
                                                          onSelf = true;
                                                          var call2044 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2045 = callmethodChecked(call2044, "size", [0]);
                                                          var string2047 = new GraceString("canvas: with ");
                                                          var opresult2049 = callmethodChecked(string2047, "++", [1], call2045);
                                                          var opresult2051 = callmethodChecked(opresult2049, "++", [1], string2042);
                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2051)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method asString does not have " + 
                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                          return opresult2051;
                                                        };
                                                        func2041.paramCounts = [0];
                                                        obj1941.methods["asString"] = func2041;
                                                        func2041.definitionLine = 1268;
                                                        func2041.definitionModule = "objectdraw";
                                                        setLineNumber(1164);    // compilenode string
                                                        var string2052 = new GraceString("canvas");
                                                        var call2053 = callmethodChecked(var_document, "createElement", [1], string2052);
                                                        var call2054 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call2055 = callmethodChecked(call2054, "componentFromElement()object", [1, 1], call2053, this);
                                                        obj1941.superobj = call2055;
                                                        if (call2055.data) obj1941.data = call2055.data;
                                                        if (call2055.hasOwnProperty('_value'))
                                                            obj1941._value = call2055._value;
                                                        setLineNumber(1166);    // compilenode identifier
                                                        var call2056 = callmethodChecked(var_dimensions__39__, "x", [0]);
                                                        onSelf = true;
                                                        var call2057 = callmethodChecked(this, "element", [0]);
                                                        var call2058 = callmethodChecked(call2057, "width:=", [1], call2056);
                                                        setLineNumber(1167);    // compilenode identifier
                                                        var call2059 = callmethodChecked(var_dimensions__39__, "y", [0]);
                                                        onSelf = true;
                                                        var call2060 = callmethodChecked(this, "element", [0]);
                                                        var call2061 = callmethodChecked(call2060, "height:=", [1], call2059);
                                                        setLineNumber(1168);    // compilenode string
                                                        var string2062 = new GraceString("center");
                                                        onSelf = true;
                                                        var call2063 = callmethodChecked(this, "element", [0]);
                                                        var call2064 = callmethodChecked(call2063, "style", [0]);
                                                        var call2065 = callmethodChecked(call2064, "alignSelf:=", [1], string2062);
                                                        setLineNumber(1170);    // compilenode string
                                                        var string2066 = new GraceString("2d");
                                                        onSelf = true;
                                                        var call2067 = callmethodChecked(this, "element", [0]);
                                                        var call2068 = callmethodChecked(call2067, "getContext", [1], string2066);
                                                        obj1941.data["theContext"] = call2068;
                                                        var reader_objectdraw_theContext2069 = function() {
                                                          return this.data["theContext"];
                                                        };
                                                        reader_objectdraw_theContext2069.def = true;
                                                        reader_objectdraw_theContext2069.confidential = true;
                                                        obj1941.methods["theContext"] = reader_objectdraw_theContext2069;
                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call2068)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("value of def 'theContext' is not of type Foreign"));
                                                        setLineNumber(1171);    // compilenode call
                                                        onSelf = true;
                                                        var call2070 = callmethodChecked(this, "theContext", [0]);
                                                        var call2071 = callmethodChecked(call2070, "lineWidth:=", [1], new GraceNum(2));
                                                        setLineNumber(1186);    // compilenode array
                                                        var array2072 = new PrimitiveGraceList([]);
                                                        obj1941.data["theGraphics"] = array2072;
                                                        var reader_objectdraw_theGraphics2073 = function() {
                                                          return this.data["theGraphics"];
                                                        };
                                                        obj1941.methods["theGraphics"] = reader_objectdraw_theGraphics2073;
                                                        obj1941.data["theGraphics"] = array2072;
                                                        var writer_objectdraw_theGraphics2073 = function(argcv, o) {
                                                          this.data["theGraphics"] = o;
                                                          return GraceDone;
                                                        };
                                                        obj1941.methods["theGraphics:="] = writer_objectdraw_theGraphics2073;
                                                        reader_objectdraw_theGraphics2073.confidential = true;
                                                        writer_objectdraw_theGraphics2073.confidential = true;
                                                        obj1941.mutable = true;
                                                        setLineNumber(1188);    // compilenode identifier
                                                        obj1941.data["redraw"] = GraceFalse;
                                                        var reader_objectdraw_redraw2074 = function() {
                                                          return this.data["redraw"];
                                                        };
                                                        obj1941.methods["redraw"] = reader_objectdraw_redraw2074;
                                                        obj1941.data["redraw"] = GraceFalse;
                                                        var writer_objectdraw_redraw2074 = function(argcv, o) {
                                                          this.data["redraw"] = o;
                                                          return GraceDone;
                                                        };
                                                        obj1941.methods["redraw:="] = writer_objectdraw_redraw2074;
                                                        reader_objectdraw_redraw2074.confidential = true;
                                                        writer_objectdraw_redraw2074.confidential = true;
                                                        if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("initial value of var 'redraw' is not of type Boolean"));
                                                        obj1941.mutable = true;
                                                        superDepth = origSuperDepth;
                                                      };
                                                      obj_init_1941.apply(inheritingObject, []);
                                                      return obj1941;
                                                      };
                                                      this.methods["drawingCanvasSize()object"] = func1939;
                                                    setLineNumber(1273);    // compilenode method
                                                    var func2075 = function(argcv) {    // method graphicApplicationSize(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_theDimension__39__ = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for graphicApplicationSize(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      onSelf = true;
                                                      var call2076 = callmethodChecked(this, "Point", [0]);
                                                      if (!Grace_isTrue(callmethod(call2076, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in graphicApplicationSize (arg list 1), which corresponds to parameter theDimension', does not have " + 
                                                                  callmethod(call2076, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("objectdraw");
                                                      var obj2077 = Grace_allocObject(null, "objectdraw.graphicApplicationSize");
                                                      obj2077.definitionModule = "objectdraw";
                                                      obj2077.definitionLine = 1273;
                                                      obj2077.outer = this;
                                                      var reader_objectdraw_outer2078 = function() {
                                                        return this.outer;
                                                      };
                                                      obj2077.methods["outer"] = reader_objectdraw_outer2078;
                                                      var obj_init_2077 = function() {
                                                        var origSuperDepth = superDepth;
                                                        superDepth = obj2077;
                                                        var func2079 = function(argcv) {    // method prepend(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aComponent = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for prepend(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1292);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in prepend (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                                                      callmethod(var_Component, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1293);    // compilenode call
                                                          onSelf = true;
                                                          var call2080 = callmethodChecked(this, "before", [0]);
                                                          var call2081 = callmethodChecked(call2080, "prepend", [1], var_aComponent);
                                                          setLineNumber(1294);    // compilenode call
                                                          onSelf = true;
                                                          var call2082 = callmethodChecked(this, "children", [0]);
                                                          var call2083 = callmethodChecked(call2082, "unshift", [1], var_aComponent);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2083)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method prepend(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2083;
                                                        };
                                                        func2079.paramTypes = [];
                                                        func2079.paramTypes.push([]);
                                                        func2079.paramCounts = [1];
                                                        obj2077.methods["prepend"] = func2079;
                                                        func2079.definitionLine = 1292;
                                                        func2079.definitionModule = "objectdraw";
                                                        var func2084 = function(argcv) {    // method append(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aComponent = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for append(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1298);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in append (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                                                      callmethod(var_Component, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1299);    // compilenode call
                                                          onSelf = true;
                                                          var call2085 = callmethodChecked(this, "after", [0]);
                                                          var call2086 = callmethodChecked(call2085, "append", [1], var_aComponent);
                                                          setLineNumber(1300);    // compilenode call
                                                          onSelf = true;
                                                          var call2087 = callmethodChecked(this, "children", [0]);
                                                          var call2088 = callmethodChecked(call2087, "push", [1], var_aComponent);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2088)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method append(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2088;
                                                        };
                                                        func2084.paramTypes = [];
                                                        func2084.paramTypes.push([]);
                                                        func2084.paramCounts = [1];
                                                        obj2077.methods["append"] = func2084;
                                                        func2084.definitionLine = 1298;
                                                        func2084.definitionModule = "objectdraw";
                                                        var func2089 = function(argcv) {    // method onMouseClick(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseClick(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1307);    // compilenode call
                                                          var call2090 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2091 = callmethodChecked(call2090, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2091, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseClick (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2091, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseClick(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2089.paramCounts = [1];
                                                        obj2077.methods["onMouseClick"] = func2089;
                                                        func2089.definitionLine = 1307;
                                                        func2089.definitionModule = "objectdraw";
                                                        var func2092 = function(argcv) {    // method onMousePress(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMousePress(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1310);    // compilenode call
                                                          var call2093 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2094 = callmethodChecked(call2093, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2094, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMousePress (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2094, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMousePress(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2092.paramCounts = [1];
                                                        obj2077.methods["onMousePress"] = func2092;
                                                        func2092.definitionLine = 1310;
                                                        func2092.definitionModule = "objectdraw";
                                                        var func2095 = function(argcv) {    // method onMouseRelease(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseRelease(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1313);    // compilenode call
                                                          var call2096 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2097 = callmethodChecked(call2096, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2097, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseRelease (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2097, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseRelease(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2095.paramCounts = [1];
                                                        obj2077.methods["onMouseRelease"] = func2095;
                                                        func2095.definitionLine = 1313;
                                                        func2095.definitionModule = "objectdraw";
                                                        var func2098 = function(argcv) {    // method onMouseMove(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseMove(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1316);    // compilenode call
                                                          var call2099 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2100 = callmethodChecked(call2099, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2100, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseMove (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2100, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseMove(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2098.paramCounts = [1];
                                                        obj2077.methods["onMouseMove"] = func2098;
                                                        func2098.definitionLine = 1316;
                                                        func2098.definitionModule = "objectdraw";
                                                        var func2101 = function(argcv) {    // method onMouseDrag(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseDrag(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1319);    // compilenode call
                                                          var call2102 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2103 = callmethodChecked(call2102, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2103, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseDrag (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2103, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseDrag(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2101.paramCounts = [1];
                                                        obj2077.methods["onMouseDrag"] = func2101;
                                                        func2101.definitionLine = 1319;
                                                        func2101.definitionModule = "objectdraw";
                                                        var func2104 = function(argcv) {    // method onMouseEnter(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnter(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1322);    // compilenode call
                                                          var call2105 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2106 = callmethodChecked(call2105, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2106, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseEnter (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2106, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseEnter(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2104.paramCounts = [1];
                                                        obj2077.methods["onMouseEnter"] = func2104;
                                                        func2104.definitionLine = 1322;
                                                        func2104.definitionModule = "objectdraw";
                                                        var func2107 = function(argcv) {    // method onMouseExit(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExit(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1325);    // compilenode call
                                                          var call2108 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2109 = callmethodChecked(call2108, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2109, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseExit (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2109, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseExit(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2107.paramCounts = [1];
                                                        obj2077.methods["onMouseExit"] = func2107;
                                                        func2107.definitionLine = 1325;
                                                        func2107.definitionModule = "objectdraw";
                                                        var func2110 = function(argcv) {    // method startGraphics
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startGraphics"));
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1330);    // compilenode string
                                                          var string2111 = new GraceString("div");
                                                          var call2112 = callmethodChecked(var_document, "createElement", [1], string2111);
                                                          var var_parentElement = call2112;
                                                          setLineNumber(1331);    // compilenode string
                                                          var string2113 = new GraceString("height-calculator");
                                                          var call2114 = callmethodChecked(var_parentElement, "className:=", [1], string2113);
                                                          setLineNumber(1332);    // compilenode string
                                                          var string2115 = new GraceString("px");
                                                          var call2117 = callmethodChecked(var_theDimension__39__, "x", [0]);
                                                          var string2119 = new GraceString("");
                                                          var opresult2121 = callmethodChecked(string2119, "++", [1], call2117);
                                                          var opresult2123 = callmethodChecked(opresult2121, "++", [1], string2115);
                                                          var call2124 = callmethodChecked(var_parentElement, "style", [0]);
                                                          var call2125 = callmethodChecked(call2124, "width:=", [1], opresult2123);
                                                          setLineNumber(1333);    // compilenode call
                                                          onSelf = true;
                                                          var call2126 = callmethodChecked(this, "element", [0]);
                                                          var call2127 = callmethodChecked(call2126, "cloneNode", [1], GraceTrue);
                                                          var call2128 = callmethodChecked(var_parentElement, "appendChild", [1], call2127);
                                                          setLineNumber(1334);    // compilenode identifier
                                                          var call2129 = callmethodChecked(var_document, "body", [0]);
                                                          var call2130 = callmethodChecked(call2129, "appendChild", [1], var_parentElement);
                                                          setLineNumber(1335);    // compilenode identifier
                                                          var call2131 = callmethodChecked(var_parentElement, "offsetHeight", [0]);
                                                          onSelf = true;
                                                          var call2132 = callmethodChecked(this, "theHeight:=", [1], call2131);
                                                          setLineNumber(1336);    // compilenode identifier
                                                          var call2133 = callmethodChecked(var_document, "body", [0]);
                                                          var call2134 = callmethodChecked(call2133, "removeChild", [1], var_parentElement);
                                                          setLineNumber(1338);    // compilenode call
                                                          onSelf = true;
                                                          var call2135 = callmethodChecked(this, "startApplication", [0]);
                                                          setLineNumber(1339);    // compilenode call
                                                          onSelf = true;
                                                          var call2136 = callmethodChecked(this, "canvas", [0]);
                                                          var call2137 = callmethodChecked(call2136, "startDrawing", [0]);
                                                          setLineNumber(1341);    // compilenode string
                                                          var string2138 = new GraceString("hidden");
                                                          onSelf = true;
                                                          var call2139 = callmethodChecked(this, "theWindow", [0]);
                                                          var call2140 = callmethodChecked(call2139, "document", [0]);
                                                          var call2141 = callmethodChecked(call2140, "documentElement", [0]);
                                                          var call2142 = callmethodChecked(call2141, "style", [0]);
                                                          var call2143 = callmethodChecked(call2142, "overflow:=", [1], string2138);
                                                          setLineNumber(1343);    // compilenode block
                                                          var block2144 = new GraceBlock(this, 1343, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2144.real = function(var_event__39__) {
                                                            setLineNumber(1344);    // compilenode identifier
                                                            var call2145 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2146 = callmethodChecked(this, "onMouseClick", [1], call2145);
                                                            return call2146;
                                                          };
                                                          setLineNumber(1343);    // compilenode call
                                                          onSelf = true;
                                                          var call2147 = callmethodChecked(this, "canvas", [0]);
                                                          var call2148 = callmethodChecked(call2147, "onMouseClickDo", [1], block2144);
                                                          setLineNumber(1347);    // compilenode block
                                                          var block2149 = new GraceBlock(this, 1347, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2149.real = function(var_event__39__) {
                                                            setLineNumber(1348);    // compilenode identifier
                                                            var call2150 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2151 = callmethodChecked(this, "onMousePress", [1], call2150);
                                                            return call2151;
                                                          };
                                                          setLineNumber(1347);    // compilenode call
                                                          onSelf = true;
                                                          var call2152 = callmethodChecked(this, "canvas", [0]);
                                                          var call2153 = callmethodChecked(call2152, "onMousePressDo", [1], block2149);
                                                          setLineNumber(1351);    // compilenode block
                                                          var block2154 = new GraceBlock(this, 1351, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2154.real = function(var_event__39__) {
                                                            setLineNumber(1352);    // compilenode identifier
                                                            var call2155 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2156 = callmethodChecked(this, "onMouseRelease", [1], call2155);
                                                            return call2156;
                                                          };
                                                          setLineNumber(1351);    // compilenode call
                                                          onSelf = true;
                                                          var call2157 = callmethodChecked(this, "canvas", [0]);
                                                          var call2158 = callmethodChecked(call2157, "onMouseReleaseDo", [1], block2154);
                                                          setLineNumber(1355);    // compilenode block
                                                          var block2159 = new GraceBlock(this, 1355, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2159.real = function(var_event__39__) {
                                                            setLineNumber(1356);    // compilenode identifier
                                                            var call2160 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2161 = callmethodChecked(this, "onMouseMove", [1], call2160);
                                                            return call2161;
                                                          };
                                                          setLineNumber(1355);    // compilenode call
                                                          onSelf = true;
                                                          var call2162 = callmethodChecked(this, "canvas", [0]);
                                                          var call2163 = callmethodChecked(call2162, "onMouseMoveDo", [1], block2159);
                                                          setLineNumber(1359);    // compilenode block
                                                          var block2164 = new GraceBlock(this, 1359, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2164.real = function(var_event__39__) {
                                                            setLineNumber(1360);    // compilenode identifier
                                                            var call2165 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2166 = callmethodChecked(this, "onMouseDrag", [1], call2165);
                                                            return call2166;
                                                          };
                                                          setLineNumber(1359);    // compilenode call
                                                          onSelf = true;
                                                          var call2167 = callmethodChecked(this, "canvas", [0]);
                                                          var call2168 = callmethodChecked(call2167, "onMouseDragDo", [1], block2164);
                                                          setLineNumber(1363);    // compilenode block
                                                          var block2169 = new GraceBlock(this, 1363, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2169.real = function(var_event__39__) {
                                                            setLineNumber(1364);    // compilenode identifier
                                                            var call2170 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2171 = callmethodChecked(this, "onMouseEnter", [1], call2170);
                                                            return call2171;
                                                          };
                                                          setLineNumber(1363);    // compilenode call
                                                          onSelf = true;
                                                          var call2172 = callmethodChecked(this, "canvas", [0]);
                                                          var call2173 = callmethodChecked(call2172, "onMouseEnterDo", [1], block2169);
                                                          setLineNumber(1367);    // compilenode block
                                                          var block2174 = new GraceBlock(this, 1367, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2174.real = function(var_event__39__) {
                                                            setLineNumber(1368);    // compilenode identifier
                                                            var call2175 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2176 = callmethodChecked(this, "onMouseExit", [1], call2175);
                                                            return call2176;
                                                          };
                                                          setLineNumber(1367);    // compilenode call
                                                          onSelf = true;
                                                          var call2177 = callmethodChecked(this, "canvas", [0]);
                                                          var call2178 = callmethodChecked(call2177, "onMouseExitDo", [1], block2174);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2178)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method startGraphics does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2178;
                                                        };
                                                        func2110.paramCounts = [0];
                                                        obj2077.methods["startGraphics"] = func2110;
                                                        func2110.definitionLine = 1329;
                                                        func2110.definitionModule = "objectdraw";
                                                        var func2179 = function(argcv) {    // method asString
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1373);    // compilenode string
                                                          var string2180 = new GraceString("");
                                                          onSelf = true;
                                                          var call2182 = callmethodChecked(this, "canvas", [0]);
                                                          var string2184 = new GraceString("graphic application of ");
                                                          var opresult2186 = callmethodChecked(string2184, "++", [1], call2182);
                                                          var opresult2188 = callmethodChecked(opresult2186, "++", [1], string2180);
                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2188)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method asString does not have " + 
                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                          return opresult2188;
                                                        };
                                                        func2179.paramCounts = [0];
                                                        obj2077.methods["asString"] = func2179;
                                                        func2179.definitionLine = 1372;
                                                        func2179.definitionModule = "objectdraw";
                                                        setLineNumber(1277);    // compilenode string
                                                        var string2189 = new GraceString("Simple graphics");
                                                        var call2190 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call2191 = callmethodChecked(call2190, "applicationTitle()size()object", [1, 1, 1], string2189, var_theDimension__39__, this);
                                                        obj2077.superobj = call2191;
                                                        if (call2191.data) obj2077.data = call2191.data;
                                                        if (call2191.hasOwnProperty('_value'))
                                                            obj2077._value = call2191._value;
                                                        setLineNumber(1279);    // compilenode call
                                                        var call2192 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call2193 = callmethodChecked(call2192, "drawingCanvasSize", [1], var_theDimension__39__);
                                                        obj2077.data["canvas"] = call2193;
                                                        var reader_objectdraw_canvas2194 = function() {
                                                          return this.data["canvas"];
                                                        };
                                                        reader_objectdraw_canvas2194.def = true;
                                                        obj2077.methods["canvas"] = reader_objectdraw_canvas2194;
                                                        if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match", [1], call2193)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("value of def 'canvas' is not of type DrawingCanvas"));
                                                        setLineNumber(1281);    // compilenode call
                                                        onSelf = true;
                                                        var call2195 = callmethodChecked(this, "canvas", [0]);
                                                        onSelf = true;
                                                        var call2196 = callmethodChecked(this, "children", [0]);
                                                        var call2197 = callmethodChecked(call2196, "push", [1], call2195);
                                                        setLineNumber(1283);    // compilenode call
                                                        var call2198 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call2199 = callmethodChecked(call2198, "containerEmpty", [0]);
                                                        obj2077.data["before"] = call2199;
                                                        var reader_objectdraw_before2200 = function() {
                                                          return this.data["before"];
                                                        };
                                                        reader_objectdraw_before2200.def = true;
                                                        reader_objectdraw_before2200.confidential = true;
                                                        obj2077.methods["before"] = reader_objectdraw_before2200;
                                                        if (!Grace_isTrue(callmethod(var_Container, "match", [1], call2199)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("value of def 'before' is not of type Container"));
                                                        setLineNumber(1284);    // compilenode call
                                                        var call2201 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call2202 = callmethodChecked(call2201, "containerEmpty", [0]);
                                                        obj2077.data["after"] = call2202;
                                                        var reader_objectdraw_after2203 = function() {
                                                          return this.data["after"];
                                                        };
                                                        reader_objectdraw_after2203.def = true;
                                                        reader_objectdraw_after2203.confidential = true;
                                                        obj2077.methods["after"] = reader_objectdraw_after2203;
                                                        if (!Grace_isTrue(callmethod(var_Container, "match", [1], call2202)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("value of def 'after' is not of type Container"));
                                                        setLineNumber(1286);    // compilenode call
                                                        onSelf = true;
                                                        var call2204 = callmethodChecked(this, "arrangeVertical", [0]);
                                                        setLineNumber(1287);    // compilenode call
                                                        onSelf = true;
                                                        var call2205 = callmethodChecked(this, "before", [0]);
                                                        var call2206 = callmethodChecked(call2205, "element", [0]);
                                                        onSelf = true;
                                                        var call2207 = callmethodChecked(this, "element", [0]);
                                                        var call2208 = callmethodChecked(call2207, "appendChild", [1], call2206);
                                                        setLineNumber(1288);    // compilenode call
                                                        onSelf = true;
                                                        var call2209 = callmethodChecked(this, "canvas", [0]);
                                                        var call2210 = callmethodChecked(call2209, "element", [0]);
                                                        onSelf = true;
                                                        var call2211 = callmethodChecked(this, "element", [0]);
                                                        var call2212 = callmethodChecked(call2211, "appendChild", [1], call2210);
                                                        setLineNumber(1289);    // compilenode call
                                                        onSelf = true;
                                                        var call2213 = callmethodChecked(this, "after", [0]);
                                                        var call2214 = callmethodChecked(call2213, "element", [0]);
                                                        onSelf = true;
                                                        var call2215 = callmethodChecked(this, "element", [0]);
                                                        var call2216 = callmethodChecked(call2215, "appendChild", [1], call2214);
                                                        superDepth = origSuperDepth;
                                                      };
                                                      obj_init_2077.apply(obj2077, []);
                                                      setLineNumber(1273);    // return value
                                                      if (!Grace_isTrue(callmethod(var_GraphicApplication, "match", [1], obj2077)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method graphicApplicationSize(1) does not have " + 
                                                                  callmethod(var_GraphicApplication, "asString", [0])._value + "."));
                                                      return obj2077;
                                                    };
                                                    func2075.paramCounts = [1];
                                                    this.methods["graphicApplicationSize"] = func2075;
                                                    func2075.definitionLine = 1273;
                                                    func2075.definitionModule = "objectdraw";
                                                      var func2217 = function(argcv) {    // method graphicApplicationSize(1     )()object
                                                        var curarg = 1;
                                                        var var_theDimension__39__ = arguments[curarg];
                                                        curarg++;
                                                        var inheritingObject = arguments[curarg++];
                                                        // Start argument processing
                                                        curarg = 1;
                                                        onSelf = true;
                                                        var call2218 = callmethodChecked(this, "Point", [0]);
                                                        if (!Grace_isTrue(callmethod(call2218, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in graphicApplicationSize (arg list 1), which corresponds to parameter theDimension', does not have " + 
                                                                    callmethod(call2218, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument processing
                                                        setModuleName("objectdraw");
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var obj2219 = Grace_allocObject(null, "graphicApplicationSize");
                                                        obj2219.definitionModule = "objectdraw";
                                                        obj2219.definitionLine = 1273;
                                                        var inho2219 = inheritingObject;
                                                        while (inho2219.superobj) inho2219 = inho2219.superobj;
                                                        inho2219.superobj = obj2219;
                                                        obj2219.data = inheritingObject.data;
                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                          obj2219._value = inheritingObject._value;
                                                        obj2219.outer = this;
                                                        var reader_objectdraw_outer2220 = function() {
                                                          return this.outer;
                                                        };
                                                        obj2219.methods["outer"] = reader_objectdraw_outer2220;
                                                        var obj_init_2219 = function() {
                                                          var origSuperDepth = superDepth;
                                                          superDepth = obj2219;
                                                          var func2221 = function(argcv) {    // method prepend(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_aComponent = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for prepend(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1292);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in prepend (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                                                        callmethod(var_Component, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1293);    // compilenode call
                                                            onSelf = true;
                                                            var call2222 = callmethodChecked(this, "before", [0]);
                                                            var call2223 = callmethodChecked(call2222, "prepend", [1], var_aComponent);
                                                            setLineNumber(1294);    // compilenode call
                                                            onSelf = true;
                                                            var call2224 = callmethodChecked(this, "children", [0]);
                                                            var call2225 = callmethodChecked(call2224, "unshift", [1], var_aComponent);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2225)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method prepend(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2225;
                                                          };
                                                          func2221.paramTypes = [];
                                                          func2221.paramTypes.push([]);
                                                          func2221.paramCounts = [1];
                                                          obj2219.methods["prepend"] = func2221;
                                                          func2221.definitionLine = 1292;
                                                          func2221.definitionModule = "objectdraw";
                                                          var func2226 = function(argcv) {    // method append(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_aComponent = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for append(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1298);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in append (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                                                        callmethod(var_Component, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1299);    // compilenode call
                                                            onSelf = true;
                                                            var call2227 = callmethodChecked(this, "after", [0]);
                                                            var call2228 = callmethodChecked(call2227, "append", [1], var_aComponent);
                                                            setLineNumber(1300);    // compilenode call
                                                            onSelf = true;
                                                            var call2229 = callmethodChecked(this, "children", [0]);
                                                            var call2230 = callmethodChecked(call2229, "push", [1], var_aComponent);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2230)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method append(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2230;
                                                          };
                                                          func2226.paramTypes = [];
                                                          func2226.paramTypes.push([]);
                                                          func2226.paramCounts = [1];
                                                          obj2219.methods["append"] = func2226;
                                                          func2226.definitionLine = 1298;
                                                          func2226.definitionModule = "objectdraw";
                                                          var func2231 = function(argcv) {    // method onMouseClick(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseClick(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1307);    // compilenode call
                                                            var call2232 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2233 = callmethodChecked(call2232, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2233, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseClick (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2233, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseClick(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2231.paramCounts = [1];
                                                          obj2219.methods["onMouseClick"] = func2231;
                                                          func2231.definitionLine = 1307;
                                                          func2231.definitionModule = "objectdraw";
                                                          var func2234 = function(argcv) {    // method onMousePress(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMousePress(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1310);    // compilenode call
                                                            var call2235 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2236 = callmethodChecked(call2235, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2236, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMousePress (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2236, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMousePress(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2234.paramCounts = [1];
                                                          obj2219.methods["onMousePress"] = func2234;
                                                          func2234.definitionLine = 1310;
                                                          func2234.definitionModule = "objectdraw";
                                                          var func2237 = function(argcv) {    // method onMouseRelease(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseRelease(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1313);    // compilenode call
                                                            var call2238 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2239 = callmethodChecked(call2238, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2239, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseRelease (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2239, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseRelease(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2237.paramCounts = [1];
                                                          obj2219.methods["onMouseRelease"] = func2237;
                                                          func2237.definitionLine = 1313;
                                                          func2237.definitionModule = "objectdraw";
                                                          var func2240 = function(argcv) {    // method onMouseMove(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseMove(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1316);    // compilenode call
                                                            var call2241 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2242 = callmethodChecked(call2241, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2242, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseMove (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2242, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseMove(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2240.paramCounts = [1];
                                                          obj2219.methods["onMouseMove"] = func2240;
                                                          func2240.definitionLine = 1316;
                                                          func2240.definitionModule = "objectdraw";
                                                          var func2243 = function(argcv) {    // method onMouseDrag(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseDrag(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1319);    // compilenode call
                                                            var call2244 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2245 = callmethodChecked(call2244, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2245, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseDrag (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2245, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseDrag(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2243.paramCounts = [1];
                                                          obj2219.methods["onMouseDrag"] = func2243;
                                                          func2243.definitionLine = 1319;
                                                          func2243.definitionModule = "objectdraw";
                                                          var func2246 = function(argcv) {    // method onMouseEnter(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnter(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1322);    // compilenode call
                                                            var call2247 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2248 = callmethodChecked(call2247, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2248, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseEnter (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2248, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseEnter(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2246.paramCounts = [1];
                                                          obj2219.methods["onMouseEnter"] = func2246;
                                                          func2246.definitionLine = 1322;
                                                          func2246.definitionModule = "objectdraw";
                                                          var func2249 = function(argcv) {    // method onMouseExit(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExit(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1325);    // compilenode call
                                                            var call2250 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2251 = callmethodChecked(call2250, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2251, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseExit (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2251, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseExit(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2249.paramCounts = [1];
                                                          obj2219.methods["onMouseExit"] = func2249;
                                                          func2249.definitionLine = 1325;
                                                          func2249.definitionModule = "objectdraw";
                                                          var func2252 = function(argcv) {    // method startGraphics
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startGraphics"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1330);    // compilenode string
                                                            var string2253 = new GraceString("div");
                                                            var call2254 = callmethodChecked(var_document, "createElement", [1], string2253);
                                                            var var_parentElement = call2254;
                                                            setLineNumber(1331);    // compilenode string
                                                            var string2255 = new GraceString("height-calculator");
                                                            var call2256 = callmethodChecked(var_parentElement, "className:=", [1], string2255);
                                                            setLineNumber(1332);    // compilenode string
                                                            var string2257 = new GraceString("px");
                                                            var call2259 = callmethodChecked(var_theDimension__39__, "x", [0]);
                                                            var string2261 = new GraceString("");
                                                            var opresult2263 = callmethodChecked(string2261, "++", [1], call2259);
                                                            var opresult2265 = callmethodChecked(opresult2263, "++", [1], string2257);
                                                            var call2266 = callmethodChecked(var_parentElement, "style", [0]);
                                                            var call2267 = callmethodChecked(call2266, "width:=", [1], opresult2265);
                                                            setLineNumber(1333);    // compilenode call
                                                            onSelf = true;
                                                            var call2268 = callmethodChecked(this, "element", [0]);
                                                            var call2269 = callmethodChecked(call2268, "cloneNode", [1], GraceTrue);
                                                            var call2270 = callmethodChecked(var_parentElement, "appendChild", [1], call2269);
                                                            setLineNumber(1334);    // compilenode identifier
                                                            var call2271 = callmethodChecked(var_document, "body", [0]);
                                                            var call2272 = callmethodChecked(call2271, "appendChild", [1], var_parentElement);
                                                            setLineNumber(1335);    // compilenode identifier
                                                            var call2273 = callmethodChecked(var_parentElement, "offsetHeight", [0]);
                                                            onSelf = true;
                                                            var call2274 = callmethodChecked(this, "theHeight:=", [1], call2273);
                                                            setLineNumber(1336);    // compilenode identifier
                                                            var call2275 = callmethodChecked(var_document, "body", [0]);
                                                            var call2276 = callmethodChecked(call2275, "removeChild", [1], var_parentElement);
                                                            setLineNumber(1338);    // compilenode call
                                                            onSelf = true;
                                                            var call2277 = callmethodChecked(this, "startApplication", [0]);
                                                            setLineNumber(1339);    // compilenode call
                                                            onSelf = true;
                                                            var call2278 = callmethodChecked(this, "canvas", [0]);
                                                            var call2279 = callmethodChecked(call2278, "startDrawing", [0]);
                                                            setLineNumber(1341);    // compilenode string
                                                            var string2280 = new GraceString("hidden");
                                                            onSelf = true;
                                                            var call2281 = callmethodChecked(this, "theWindow", [0]);
                                                            var call2282 = callmethodChecked(call2281, "document", [0]);
                                                            var call2283 = callmethodChecked(call2282, "documentElement", [0]);
                                                            var call2284 = callmethodChecked(call2283, "style", [0]);
                                                            var call2285 = callmethodChecked(call2284, "overflow:=", [1], string2280);
                                                            setLineNumber(1343);    // compilenode block
                                                            var block2286 = new GraceBlock(this, 1343, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2286.real = function(var_event__39__) {
                                                              setLineNumber(1344);    // compilenode identifier
                                                              var call2287 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2288 = callmethodChecked(this, "onMouseClick", [1], call2287);
                                                              return call2288;
                                                            };
                                                            setLineNumber(1343);    // compilenode call
                                                            onSelf = true;
                                                            var call2289 = callmethodChecked(this, "canvas", [0]);
                                                            var call2290 = callmethodChecked(call2289, "onMouseClickDo", [1], block2286);
                                                            setLineNumber(1347);    // compilenode block
                                                            var block2291 = new GraceBlock(this, 1347, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2291.real = function(var_event__39__) {
                                                              setLineNumber(1348);    // compilenode identifier
                                                              var call2292 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2293 = callmethodChecked(this, "onMousePress", [1], call2292);
                                                              return call2293;
                                                            };
                                                            setLineNumber(1347);    // compilenode call
                                                            onSelf = true;
                                                            var call2294 = callmethodChecked(this, "canvas", [0]);
                                                            var call2295 = callmethodChecked(call2294, "onMousePressDo", [1], block2291);
                                                            setLineNumber(1351);    // compilenode block
                                                            var block2296 = new GraceBlock(this, 1351, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2296.real = function(var_event__39__) {
                                                              setLineNumber(1352);    // compilenode identifier
                                                              var call2297 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2298 = callmethodChecked(this, "onMouseRelease", [1], call2297);
                                                              return call2298;
                                                            };
                                                            setLineNumber(1351);    // compilenode call
                                                            onSelf = true;
                                                            var call2299 = callmethodChecked(this, "canvas", [0]);
                                                            var call2300 = callmethodChecked(call2299, "onMouseReleaseDo", [1], block2296);
                                                            setLineNumber(1355);    // compilenode block
                                                            var block2301 = new GraceBlock(this, 1355, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2301.real = function(var_event__39__) {
                                                              setLineNumber(1356);    // compilenode identifier
                                                              var call2302 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2303 = callmethodChecked(this, "onMouseMove", [1], call2302);
                                                              return call2303;
                                                            };
                                                            setLineNumber(1355);    // compilenode call
                                                            onSelf = true;
                                                            var call2304 = callmethodChecked(this, "canvas", [0]);
                                                            var call2305 = callmethodChecked(call2304, "onMouseMoveDo", [1], block2301);
                                                            setLineNumber(1359);    // compilenode block
                                                            var block2306 = new GraceBlock(this, 1359, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2306.real = function(var_event__39__) {
                                                              setLineNumber(1360);    // compilenode identifier
                                                              var call2307 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2308 = callmethodChecked(this, "onMouseDrag", [1], call2307);
                                                              return call2308;
                                                            };
                                                            setLineNumber(1359);    // compilenode call
                                                            onSelf = true;
                                                            var call2309 = callmethodChecked(this, "canvas", [0]);
                                                            var call2310 = callmethodChecked(call2309, "onMouseDragDo", [1], block2306);
                                                            setLineNumber(1363);    // compilenode block
                                                            var block2311 = new GraceBlock(this, 1363, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2311.real = function(var_event__39__) {
                                                              setLineNumber(1364);    // compilenode identifier
                                                              var call2312 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2313 = callmethodChecked(this, "onMouseEnter", [1], call2312);
                                                              return call2313;
                                                            };
                                                            setLineNumber(1363);    // compilenode call
                                                            onSelf = true;
                                                            var call2314 = callmethodChecked(this, "canvas", [0]);
                                                            var call2315 = callmethodChecked(call2314, "onMouseEnterDo", [1], block2311);
                                                            setLineNumber(1367);    // compilenode block
                                                            var block2316 = new GraceBlock(this, 1367, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2316.real = function(var_event__39__) {
                                                              setLineNumber(1368);    // compilenode identifier
                                                              var call2317 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2318 = callmethodChecked(this, "onMouseExit", [1], call2317);
                                                              return call2318;
                                                            };
                                                            setLineNumber(1367);    // compilenode call
                                                            onSelf = true;
                                                            var call2319 = callmethodChecked(this, "canvas", [0]);
                                                            var call2320 = callmethodChecked(call2319, "onMouseExitDo", [1], block2316);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2320)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method startGraphics does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2320;
                                                          };
                                                          func2252.paramCounts = [0];
                                                          obj2219.methods["startGraphics"] = func2252;
                                                          func2252.definitionLine = 1329;
                                                          func2252.definitionModule = "objectdraw";
                                                          var func2321 = function(argcv) {    // method asString
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1373);    // compilenode string
                                                            var string2322 = new GraceString("");
                                                            onSelf = true;
                                                            var call2324 = callmethodChecked(this, "canvas", [0]);
                                                            var string2326 = new GraceString("graphic application of ");
                                                            var opresult2328 = callmethodChecked(string2326, "++", [1], call2324);
                                                            var opresult2330 = callmethodChecked(opresult2328, "++", [1], string2322);
                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2330)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method asString does not have " + 
                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                            return opresult2330;
                                                          };
                                                          func2321.paramCounts = [0];
                                                          obj2219.methods["asString"] = func2321;
                                                          func2321.definitionLine = 1372;
                                                          func2321.definitionModule = "objectdraw";
                                                          setLineNumber(1277);    // compilenode string
                                                          var string2331 = new GraceString("Simple graphics");
                                                          var call2332 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2333 = callmethodChecked(call2332, "applicationTitle()size()object", [1, 1, 1], string2331, var_theDimension__39__, this);
                                                          obj2219.superobj = call2333;
                                                          if (call2333.data) obj2219.data = call2333.data;
                                                          if (call2333.hasOwnProperty('_value'))
                                                              obj2219._value = call2333._value;
                                                          setLineNumber(1279);    // compilenode call
                                                          var call2334 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2335 = callmethodChecked(call2334, "drawingCanvasSize", [1], var_theDimension__39__);
                                                          obj2219.data["canvas"] = call2335;
                                                          var reader_objectdraw_canvas2336 = function() {
                                                            return this.data["canvas"];
                                                          };
                                                          reader_objectdraw_canvas2336.def = true;
                                                          obj2219.methods["canvas"] = reader_objectdraw_canvas2336;
                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match", [1], call2335)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("value of def 'canvas' is not of type DrawingCanvas"));
                                                          setLineNumber(1281);    // compilenode call
                                                          onSelf = true;
                                                          var call2337 = callmethodChecked(this, "canvas", [0]);
                                                          onSelf = true;
                                                          var call2338 = callmethodChecked(this, "children", [0]);
                                                          var call2339 = callmethodChecked(call2338, "push", [1], call2337);
                                                          setLineNumber(1283);    // compilenode call
                                                          var call2340 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2341 = callmethodChecked(call2340, "containerEmpty", [0]);
                                                          obj2219.data["before"] = call2341;
                                                          var reader_objectdraw_before2342 = function() {
                                                            return this.data["before"];
                                                          };
                                                          reader_objectdraw_before2342.def = true;
                                                          reader_objectdraw_before2342.confidential = true;
                                                          obj2219.methods["before"] = reader_objectdraw_before2342;
                                                          if (!Grace_isTrue(callmethod(var_Container, "match", [1], call2341)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("value of def 'before' is not of type Container"));
                                                          setLineNumber(1284);    // compilenode call
                                                          var call2343 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2344 = callmethodChecked(call2343, "containerEmpty", [0]);
                                                          obj2219.data["after"] = call2344;
                                                          var reader_objectdraw_after2345 = function() {
                                                            return this.data["after"];
                                                          };
                                                          reader_objectdraw_after2345.def = true;
                                                          reader_objectdraw_after2345.confidential = true;
                                                          obj2219.methods["after"] = reader_objectdraw_after2345;
                                                          if (!Grace_isTrue(callmethod(var_Container, "match", [1], call2344)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("value of def 'after' is not of type Container"));
                                                          setLineNumber(1286);    // compilenode call
                                                          onSelf = true;
                                                          var call2346 = callmethodChecked(this, "arrangeVertical", [0]);
                                                          setLineNumber(1287);    // compilenode call
                                                          onSelf = true;
                                                          var call2347 = callmethodChecked(this, "before", [0]);
                                                          var call2348 = callmethodChecked(call2347, "element", [0]);
                                                          onSelf = true;
                                                          var call2349 = callmethodChecked(this, "element", [0]);
                                                          var call2350 = callmethodChecked(call2349, "appendChild", [1], call2348);
                                                          setLineNumber(1288);    // compilenode call
                                                          onSelf = true;
                                                          var call2351 = callmethodChecked(this, "canvas", [0]);
                                                          var call2352 = callmethodChecked(call2351, "element", [0]);
                                                          onSelf = true;
                                                          var call2353 = callmethodChecked(this, "element", [0]);
                                                          var call2354 = callmethodChecked(call2353, "appendChild", [1], call2352);
                                                          setLineNumber(1289);    // compilenode call
                                                          onSelf = true;
                                                          var call2355 = callmethodChecked(this, "after", [0]);
                                                          var call2356 = callmethodChecked(call2355, "element", [0]);
                                                          onSelf = true;
                                                          var call2357 = callmethodChecked(this, "element", [0]);
                                                          var call2358 = callmethodChecked(call2357, "appendChild", [1], call2356);
                                                          superDepth = origSuperDepth;
                                                        };
                                                        obj_init_2219.apply(inheritingObject, []);
                                                        return obj2219;
                                                        };
                                                        this.methods["graphicApplicationSize()object"] = func2217;
                                                      setLineNumber(1377);    // compilenode method
                                                      var func2359 = function(argcv) {    // method drawableAt(1)on(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_location__39__ = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for drawableAt (arg list 1) of drawableAt(1)on(1)"));
                                                        var var_canvas__39__ = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[1] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 2) of drawableAt(1)on(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        onSelf = true;
                                                        var call2360 = callmethodChecked(this, "Point", [0]);
                                                        if (!Grace_isTrue(callmethod(call2360, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in drawableAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                    callmethod(call2360, "asString", [0])._value + "."));
                                                        curarg++;
                                                        if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in on (arg list 2), which corresponds to parameter canvas', does not have " + 
                                                                    callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("objectdraw");
                                                        var obj2361 = Grace_allocObject(GraceObject, "objectdraw.drawableAt()on");
                                                        obj2361.definitionModule = "objectdraw";
                                                        obj2361.definitionLine = 1377;
                                                        obj2361.outer = this;
                                                        var reader_objectdraw_outer2362 = function() {
                                                          return this.outer;
                                                        };
                                                        obj2361.methods["outer"] = reader_objectdraw_outer2362;
                                                        var obj_init_2361 = function() {
                                                          var origSuperDepth = superDepth;
                                                          superDepth = obj2361;
                                                          var func2363 = function(argcv) {    // method x
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for x"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1385);    // compilenode call
                                                            onSelf = true;
                                                            var call2364 = callmethodChecked(this, "location", [0]);
                                                            var call2365 = callmethodChecked(call2364, "x", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2365)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method x does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            return call2365;
                                                          };
                                                          func2363.paramCounts = [0];
                                                          obj2361.methods["x"] = func2363;
                                                          func2363.definitionLine = 1384;
                                                          func2363.definitionModule = "objectdraw";
                                                          var func2366 = function(argcv) {    // method y
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for y"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1390);    // compilenode call
                                                            onSelf = true;
                                                            var call2367 = callmethodChecked(this, "location", [0]);
                                                            var call2368 = callmethodChecked(call2367, "y", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2368)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method y does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            return call2368;
                                                          };
                                                          func2366.paramCounts = [0];
                                                          obj2361.methods["y"] = func2366;
                                                          func2366.definitionLine = 1389;
                                                          func2366.definitionModule = "objectdraw";
                                                          var func2369 = function(argcv) {    // method ==(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_other = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1396);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2370 = callmethodChecked(this, "isMe", [1], var_other);
                                                            return call2370;
                                                          };
                                                          func2369.paramCounts = [1];
                                                          obj2361.methods["=="] = func2369;
                                                          func2369.definitionLine = 1393;
                                                          func2369.definitionModule = "objectdraw";
                                                          var func2371 = function(argcv) {    // method color
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for color"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1405);    // compilenode call
                                                            onSelf = true;
                                                            var call2372 = callmethodChecked(this, "theColor", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Color, "match", [1], call2372)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method color does not have " + 
                                                                        callmethod(var_Color, "asString", [0])._value + "."));
                                                            return call2372;
                                                          };
                                                          func2371.paramCounts = [0];
                                                          obj2361.methods["color"] = func2371;
                                                          func2371.definitionLine = 1405;
                                                          func2371.definitionModule = "objectdraw";
                                                          var func2373 = function(argcv) {    // method color:=(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_newColor = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for color:=(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1407);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in color:= (arg list 1), which corresponds to parameter newColor, does not have " + 
                                                                        callmethod(var_Color, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1408);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2374 = callmethodChecked(this, "theColor:=", [1], var_newColor);
                                                            setLineNumber(1409);    // compilenode call
                                                            onSelf = true;
                                                            var call2375 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2375)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method color:=(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2375;
                                                          };
                                                          func2373.paramTypes = [];
                                                          func2373.paramTypes.push([]);
                                                          func2373.paramCounts = [1];
                                                          obj2361.methods["color:="] = func2373;
                                                          func2373.definitionLine = 1407;
                                                          func2373.definitionModule = "objectdraw";
                                                          var func2376 = function(argcv) {    // method frameColor
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for frameColor"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1414);    // compilenode call
                                                            onSelf = true;
                                                            var call2377 = callmethodChecked(this, "theFrameColor", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Color, "match", [1], call2377)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method frameColor does not have " + 
                                                                        callmethod(var_Color, "asString", [0])._value + "."));
                                                            return call2377;
                                                          };
                                                          func2376.paramCounts = [0];
                                                          obj2361.methods["frameColor"] = func2376;
                                                          func2376.definitionLine = 1414;
                                                          func2376.definitionModule = "objectdraw";
                                                          var func2378 = function(argcv) {    // method frameColor:=(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_newfColor = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for frameColor:=(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1415);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in frameColor:= (arg list 1), which corresponds to parameter newfColor, does not have " + 
                                                                        callmethod(var_Color, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1416);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2379 = callmethodChecked(this, "theFrameColor:=", [1], var_newfColor);
                                                            setLineNumber(1417);    // compilenode call
                                                            onSelf = true;
                                                            var call2380 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2380)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method frameColor:=(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2380;
                                                          };
                                                          func2378.paramTypes = [];
                                                          func2378.paramTypes.push([]);
                                                          func2378.paramCounts = [1];
                                                          obj2361.methods["frameColor:="] = func2378;
                                                          func2378.definitionLine = 1415;
                                                          func2378.definitionModule = "objectdraw";
                                                          var func2381 = function(argcv) {    // method visible:=(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_b = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visible:=(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1424);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in visible:= (arg list 1), which corresponds to parameter b, does not have " + 
                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1425);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2382 = callmethodChecked(this, "isVisible:=", [1], var_b);
                                                            setLineNumber(1426);    // compilenode call
                                                            onSelf = true;
                                                            var call2383 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2383)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method visible:=(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2383;
                                                          };
                                                          func2381.paramTypes = [];
                                                          func2381.paramTypes.push([type_Boolean, "b"]);
                                                          func2381.paramCounts = [1];
                                                          obj2361.methods["visible:="] = func2381;
                                                          func2381.definitionLine = 1424;
                                                          func2381.definitionModule = "objectdraw";
                                                          var func2384 = function(argcv) {    // method addToCanvas(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_c = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addToCanvas(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1430);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in addToCanvas (arg list 1), which corresponds to parameter c, does not have " + 
                                                                        callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1431);    // compilenode call
                                                            onSelf = true;
                                                            var call2385 = callmethodChecked(this, "removeFromCanvas", [0]);
                                                            setLineNumber(1432);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2386 = callmethodChecked(this, "canvas:=", [1], var_c);
                                                            setLineNumber(1433);    // compilenode identifier
                                                            var call2387 = callmethodChecked(var_c, "add", [1], this);
                                                            setLineNumber(1434);    // compilenode call
                                                            onSelf = true;
                                                            var call2388 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2388)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method addToCanvas(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2388;
                                                          };
                                                          func2384.paramTypes = [];
                                                          func2384.paramTypes.push([]);
                                                          func2384.paramCounts = [1];
                                                          obj2361.methods["addToCanvas"] = func2384;
                                                          func2384.definitionLine = 1430;
                                                          func2384.definitionModule = "objectdraw";
                                                          var func2389 = function(argcv) {    // method removeFromCanvas
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for removeFromCanvas"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1439);    // compilenode call
                                                            onSelf = true;
                                                            var call2390 = callmethodChecked(this, "canvas", [0]);
                                                            var call2391 = callmethodChecked(call2390, "remove", [1], this);
                                                            setLineNumber(1440);    // compilenode call
                                                            onSelf = true;
                                                            var call2392 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2392)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method removeFromCanvas does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2392;
                                                          };
                                                          func2389.paramCounts = [0];
                                                          obj2361.methods["removeFromCanvas"] = func2389;
                                                          func2389.definitionLine = 1438;
                                                          func2389.definitionModule = "objectdraw";
                                                          var func2393 = function(argcv) {    // method moveTo(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_newLocn = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveTo(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1444);    // compilenode call
                                                            var call2394 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2395 = callmethodChecked(call2394, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2395, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in moveTo (arg list 1), which corresponds to parameter newLocn, does not have " + 
                                                                        callmethod(call2395, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1445);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2396 = callmethodChecked(this, "location:=", [1], var_newLocn);
                                                            setLineNumber(1446);    // compilenode call
                                                            onSelf = true;
                                                            var call2397 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2397)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method moveTo(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2397;
                                                          };
                                                          func2393.paramCounts = [1];
                                                          obj2361.methods["moveTo"] = func2393;
                                                          func2393.definitionLine = 1444;
                                                          func2393.definitionModule = "objectdraw";
                                                          var func2398 = function(argcv) {    // method moveBy(2)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_dx = arguments[curarg];
                                                            curarg++;
                                                            var var_dy = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 2)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveBy(2)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1450);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in moveBy (arg list 1), which corresponds to parameter dx, does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            curarg++;
                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 2 in moveBy (arg list 1), which corresponds to parameter dy, does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1451);    // compilenode identifier
                                                            var opresult2401 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                            onSelf = true;
                                                            var call2403 = callmethodChecked(this, "location", [0]);
                                                            var opresult2405 = callmethodChecked(call2403, "+", [1], opresult2401);
                                                            onSelf = true;
                                                            var call2406 = callmethodChecked(this, "location:=", [1], opresult2405);
                                                            setLineNumber(1452);    // compilenode call
                                                            onSelf = true;
                                                            var call2407 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2407)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method moveBy(2) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2407;
                                                          };
                                                          func2398.paramTypes = [];
                                                          func2398.paramTypes.push([type_Number, "dx"]);
                                                          func2398.paramTypes.push([type_Number, "dy"]);
                                                          func2398.paramCounts = [2];
                                                          obj2361.methods["moveBy"] = func2398;
                                                          func2398.definitionLine = 1450;
                                                          func2398.definitionModule = "objectdraw";
                                                          var func2408 = function(argcv) {    // method contains(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_locn = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1456);    // compilenode call
                                                            var call2409 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2410 = callmethodChecked(call2409, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2410, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter locn, does not have " + 
                                                                        callmethod(call2410, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1457);    // compilenode string
                                                            var string2411 = new GraceString("");
                                                            var string2414 = new GraceString("contains not implemented for ");
                                                            var opresult2416 = callmethodChecked(string2414, "++", [1], this);
                                                            var opresult2418 = callmethodChecked(opresult2416, "++", [1], string2411);
                                                            var call2419 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2420 = callmethodChecked(call2419, "SubobjectResponsibility", [0]);
                                                            var call2421 = callmethodChecked(call2420, "raise", [1], opresult2418);
                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2421)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method contains(1) does not have " + 
                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                            return call2421;
                                                          };
                                                          func2408.paramCounts = [1];
                                                          obj2361.methods["contains"] = func2408;
                                                          func2408.definitionLine = 1456;
                                                          func2408.definitionModule = "objectdraw";
                                                          var func2422 = function(argcv) {    // method overlaps(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_otherObject = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for overlaps(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1461);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Graphic2D, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in overlaps (arg list 1), which corresponds to parameter otherObject, does not have " + 
                                                                        callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1462);    // compilenode string
                                                            var string2423 = new GraceString("");
                                                            var string2426 = new GraceString("overlaps not implemented for ");
                                                            var opresult2428 = callmethodChecked(string2426, "++", [1], this);
                                                            var opresult2430 = callmethodChecked(opresult2428, "++", [1], string2423);
                                                            var call2431 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2432 = callmethodChecked(call2431, "SubobjectResponsibility", [0]);
                                                            var call2433 = callmethodChecked(call2432, "raise", [1], opresult2430);
                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2433)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method overlaps(1) does not have " + 
                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                            return call2433;
                                                          };
                                                          func2422.paramTypes = [];
                                                          func2422.paramTypes.push([]);
                                                          func2422.paramCounts = [1];
                                                          obj2361.methods["overlaps"] = func2422;
                                                          func2422.definitionLine = 1461;
                                                          func2422.definitionModule = "objectdraw";
                                                          var func2434 = function(argcv) {    // method sendForward
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendForward"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1467);    // compilenode call
                                                            onSelf = true;
                                                            var call2435 = callmethodChecked(this, "canvas", [0]);
                                                            var call2436 = callmethodChecked(call2435, "sendForward", [1], this);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2436)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method sendForward does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2436;
                                                          };
                                                          func2434.paramCounts = [0];
                                                          obj2361.methods["sendForward"] = func2434;
                                                          func2434.definitionLine = 1466;
                                                          func2434.definitionModule = "objectdraw";
                                                          var func2437 = function(argcv) {    // method sendBackward
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendBackward"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1472);    // compilenode call
                                                            onSelf = true;
                                                            var call2438 = callmethodChecked(this, "canvas", [0]);
                                                            var call2439 = callmethodChecked(call2438, "sendBackward", [1], this);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2439)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method sendBackward does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2439;
                                                          };
                                                          func2437.paramCounts = [0];
                                                          obj2361.methods["sendBackward"] = func2437;
                                                          func2437.definitionLine = 1471;
                                                          func2437.definitionModule = "objectdraw";
                                                          var func2440 = function(argcv) {    // method sendToFront
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToFront"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1477);    // compilenode call
                                                            onSelf = true;
                                                            var call2441 = callmethodChecked(this, "canvas", [0]);
                                                            var call2442 = callmethodChecked(call2441, "sendToFront", [1], this);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2442)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method sendToFront does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2442;
                                                          };
                                                          func2440.paramCounts = [0];
                                                          obj2361.methods["sendToFront"] = func2440;
                                                          func2440.definitionLine = 1476;
                                                          func2440.definitionModule = "objectdraw";
                                                          var func2443 = function(argcv) {    // method sendToBack
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToBack"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1482);    // compilenode call
                                                            onSelf = true;
                                                            var call2444 = callmethodChecked(this, "canvas", [0]);
                                                            var call2445 = callmethodChecked(call2444, "sendToBack", [1], this);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2445)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method sendToBack does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2445;
                                                          };
                                                          func2443.paramCounts = [0];
                                                          obj2361.methods["sendToBack"] = func2443;
                                                          func2443.definitionLine = 1481;
                                                          func2443.definitionModule = "objectdraw";
                                                          var func2446 = function(argcv) {    // method notifyRedraw
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for notifyRedraw"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1487);    // compilenode call
                                                            onSelf = true;
                                                            var call2447 = callmethodChecked(this, "canvas", [0]);
                                                            var call2448 = callmethodChecked(call2447, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2448)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method notifyRedraw does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2448;
                                                          };
                                                          func2446.confidential = true;
                                                          func2446.paramCounts = [0];
                                                          obj2361.methods["notifyRedraw"] = func2446;
                                                          func2446.definitionLine = 1486;
                                                          func2446.definitionModule = "objectdraw";
                                                          var func2449 = function(argcv) {    // method draw(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_ctx = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1491);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                        callmethod(var_Foreign, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1492);    // compilenode string
                                                            var string2450 = new GraceString("");
                                                            var string2453 = new GraceString("draw not implemented for ");
                                                            var opresult2455 = callmethodChecked(string2453, "++", [1], this);
                                                            var opresult2457 = callmethodChecked(opresult2455, "++", [1], string2450);
                                                            var call2458 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2459 = callmethodChecked(call2458, "SubobjectResponsibility", [0]);
                                                            var call2460 = callmethodChecked(call2459, "raise", [1], opresult2457);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2460)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method draw(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2460;
                                                          };
                                                          func2449.paramTypes = [];
                                                          func2449.paramTypes.push([]);
                                                          func2449.paramCounts = [1];
                                                          obj2361.methods["draw"] = func2449;
                                                          func2449.definitionLine = 1491;
                                                          func2449.definitionModule = "objectdraw";
                                                          var func2461 = function(argcv) {    // method asString
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1497);    // compilenode string
                                                            var string2462 = new GraceString("Graphic object");
                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], string2462)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method asString does not have " + 
                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                            return string2462;
                                                          };
                                                          func2461.paramCounts = [0];
                                                          obj2361.methods["asString"] = func2461;
                                                          func2461.definitionLine = 1496;
                                                          func2461.definitionModule = "objectdraw";
                                                          setLineNumber(1381);    // compilenode identifier
                                                          obj2361.data["location"] = var_location__39__;
                                                          var reader_objectdraw_location2463 = function() {
                                                            return this.data["location"];
                                                          };
                                                          obj2361.methods["location"] = reader_objectdraw_location2463;
                                                          obj2361.data["location"] = var_location__39__;
                                                          var writer_objectdraw_location2463 = function(argcv, o) {
                                                            this.data["location"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj2361.methods["location:="] = writer_objectdraw_location2463;
                                                          writer_objectdraw_location2463.confidential = true;
                                                          var call2464 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2465 = callmethodChecked(call2464, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2465, "match", [1], var_location__39__)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("initial value of var 'location' is not of type self.outer.Point"));
                                                          obj2361.mutable = true;
                                                          setLineNumber(1400);    // compilenode identifier
                                                          obj2361.data["canvas"] = var_canvas__39__;
                                                          var reader_objectdraw_canvas2466 = function() {
                                                            return this.data["canvas"];
                                                          };
                                                          obj2361.methods["canvas"] = reader_objectdraw_canvas2466;
                                                          obj2361.data["canvas"] = var_canvas__39__;
                                                          var writer_objectdraw_canvas2466 = function(argcv, o) {
                                                            this.data["canvas"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj2361.methods["canvas:="] = writer_objectdraw_canvas2466;
                                                          reader_objectdraw_canvas2466.confidential = true;
                                                          writer_objectdraw_canvas2466.confidential = true;
                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match", [1], var_canvas__39__)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("initial value of var 'canvas' is not of type DrawingCanvas"));
                                                          obj2361.mutable = true;
                                                          setLineNumber(1403);    // compilenode identifier
                                                          obj2361.data["theColor"] = var_black;
                                                          var reader_objectdraw_theColor2467 = function() {
                                                            return this.data["theColor"];
                                                          };
                                                          obj2361.methods["theColor"] = reader_objectdraw_theColor2467;
                                                          obj2361.data["theColor"] = var_black;
                                                          var writer_objectdraw_theColor2467 = function(argcv, o) {
                                                            this.data["theColor"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj2361.methods["theColor:="] = writer_objectdraw_theColor2467;
                                                          reader_objectdraw_theColor2467.confidential = true;
                                                          writer_objectdraw_theColor2467.confidential = true;
                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_black)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("initial value of var 'theColor' is not of type Color"));
                                                          obj2361.mutable = true;
                                                          setLineNumber(1412);    // compilenode identifier
                                                          obj2361.data["theFrameColor"] = var_black;
                                                          var reader_objectdraw_theFrameColor2468 = function() {
                                                            return this.data["theFrameColor"];
                                                          };
                                                          obj2361.methods["theFrameColor"] = reader_objectdraw_theFrameColor2468;
                                                          obj2361.data["theFrameColor"] = var_black;
                                                          var writer_objectdraw_theFrameColor2468 = function(argcv, o) {
                                                            this.data["theFrameColor"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj2361.methods["theFrameColor:="] = writer_objectdraw_theFrameColor2468;
                                                          reader_objectdraw_theFrameColor2468.confidential = true;
                                                          writer_objectdraw_theFrameColor2468.confidential = true;
                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_black)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("initial value of var 'theFrameColor' is not of type Color"));
                                                          obj2361.mutable = true;
                                                          setLineNumber(1421);    // compilenode identifier
                                                          obj2361.data["isVisible"] = GraceTrue;
                                                          var reader_objectdraw_isVisible2469 = function() {
                                                            return this.data["isVisible"];
                                                          };
                                                          obj2361.methods["isVisible"] = reader_objectdraw_isVisible2469;
                                                          obj2361.data["isVisible"] = GraceTrue;
                                                          var writer_objectdraw_isVisible2469 = function(argcv, o) {
                                                            this.data["isVisible"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj2361.methods["isVisible:="] = writer_objectdraw_isVisible2469;
                                                          writer_objectdraw_isVisible2469.confidential = true;
                                                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceTrue)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("initial value of var 'isVisible' is not of type Boolean"));
                                                          obj2361.mutable = true;
                                                          superDepth = origSuperDepth;
                                                        };
                                                        obj_init_2361.apply(obj2361, []);
                                                        setLineNumber(1377);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match", [1], obj2361)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method drawableAt(1)on(1) does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        return obj2361;
                                                      };
                                                      func2359.paramTypes = [];
                                                      func2359.paramTypes.push([]);
                                                      func2359.paramTypes.push([]);
                                                      func2359.paramCounts = [1, 1];
                                                      this.methods["drawableAt()on"] = func2359;
                                                      func2359.definitionLine = 1377;
                                                      func2359.definitionModule = "objectdraw";
                                                        var func2470 = function(argcv) {    // method drawableAt(1     )on(1     )()object
                                                          var curarg = 1;
                                                          var var_location__39__ = arguments[curarg];
                                                          curarg++;
                                                          var var_canvas__39__ = arguments[curarg];
                                                          curarg++;
                                                          var inheritingObject = arguments[curarg++];
                                                          // Start argument processing
                                                          curarg = 1;
                                                          onSelf = true;
                                                          var call2471 = callmethodChecked(this, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2471, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in drawableAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                      callmethod(call2471, "asString", [0])._value + "."));
                                                          curarg++;
                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in on (arg list 2), which corresponds to parameter canvas', does not have " + 
                                                                      callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument processing
                                                          setModuleName("objectdraw");
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var obj2472 = Grace_allocObject(GraceObject, "drawableAt()on");
                                                          obj2472.definitionModule = "objectdraw";
                                                          obj2472.definitionLine = 1377;
                                                          var inho2472 = inheritingObject;
                                                          while (inho2472.superobj) inho2472 = inho2472.superobj;
                                                          inho2472.superobj = obj2472;
                                                          obj2472.data = inheritingObject.data;
                                                          if (inheritingObject.hasOwnProperty('_value'))
                                                            obj2472._value = inheritingObject._value;
                                                          obj2472.outer = this;
                                                          var reader_objectdraw_outer2473 = function() {
                                                            return this.outer;
                                                          };
                                                          obj2472.methods["outer"] = reader_objectdraw_outer2473;
                                                          var obj_init_2472 = function() {
                                                            var origSuperDepth = superDepth;
                                                            superDepth = obj2472;
                                                            var func2474 = function(argcv) {    // method x
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for x"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1385);    // compilenode call
                                                              onSelf = true;
                                                              var call2475 = callmethodChecked(this, "location", [0]);
                                                              var call2476 = callmethodChecked(call2475, "x", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2476)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method x does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              return call2476;
                                                            };
                                                            func2474.paramCounts = [0];
                                                            obj2472.methods["x"] = func2474;
                                                            func2474.definitionLine = 1384;
                                                            func2474.definitionModule = "objectdraw";
                                                            var func2477 = function(argcv) {    // method y
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for y"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1390);    // compilenode call
                                                              onSelf = true;
                                                              var call2478 = callmethodChecked(this, "location", [0]);
                                                              var call2479 = callmethodChecked(call2478, "y", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2479)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method y does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              return call2479;
                                                            };
                                                            func2477.paramCounts = [0];
                                                            obj2472.methods["y"] = func2477;
                                                            func2477.definitionLine = 1389;
                                                            func2477.definitionModule = "objectdraw";
                                                            var func2480 = function(argcv) {    // method ==(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_other = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1396);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2481 = callmethodChecked(this, "isMe", [1], var_other);
                                                              return call2481;
                                                            };
                                                            func2480.paramCounts = [1];
                                                            obj2472.methods["=="] = func2480;
                                                            func2480.definitionLine = 1393;
                                                            func2480.definitionModule = "objectdraw";
                                                            var func2482 = function(argcv) {    // method color
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for color"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1405);    // compilenode call
                                                              onSelf = true;
                                                              var call2483 = callmethodChecked(this, "theColor", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Color, "match", [1], call2483)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method color does not have " + 
                                                                          callmethod(var_Color, "asString", [0])._value + "."));
                                                              return call2483;
                                                            };
                                                            func2482.paramCounts = [0];
                                                            obj2472.methods["color"] = func2482;
                                                            func2482.definitionLine = 1405;
                                                            func2482.definitionModule = "objectdraw";
                                                            var func2484 = function(argcv) {    // method color:=(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_newColor = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for color:=(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1407);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in color:= (arg list 1), which corresponds to parameter newColor, does not have " + 
                                                                          callmethod(var_Color, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1408);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2485 = callmethodChecked(this, "theColor:=", [1], var_newColor);
                                                              setLineNumber(1409);    // compilenode call
                                                              onSelf = true;
                                                              var call2486 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2486)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method color:=(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2486;
                                                            };
                                                            func2484.paramTypes = [];
                                                            func2484.paramTypes.push([]);
                                                            func2484.paramCounts = [1];
                                                            obj2472.methods["color:="] = func2484;
                                                            func2484.definitionLine = 1407;
                                                            func2484.definitionModule = "objectdraw";
                                                            var func2487 = function(argcv) {    // method frameColor
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for frameColor"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1414);    // compilenode call
                                                              onSelf = true;
                                                              var call2488 = callmethodChecked(this, "theFrameColor", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Color, "match", [1], call2488)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method frameColor does not have " + 
                                                                          callmethod(var_Color, "asString", [0])._value + "."));
                                                              return call2488;
                                                            };
                                                            func2487.paramCounts = [0];
                                                            obj2472.methods["frameColor"] = func2487;
                                                            func2487.definitionLine = 1414;
                                                            func2487.definitionModule = "objectdraw";
                                                            var func2489 = function(argcv) {    // method frameColor:=(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_newfColor = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for frameColor:=(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1415);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in frameColor:= (arg list 1), which corresponds to parameter newfColor, does not have " + 
                                                                          callmethod(var_Color, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1416);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2490 = callmethodChecked(this, "theFrameColor:=", [1], var_newfColor);
                                                              setLineNumber(1417);    // compilenode call
                                                              onSelf = true;
                                                              var call2491 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2491)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method frameColor:=(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2491;
                                                            };
                                                            func2489.paramTypes = [];
                                                            func2489.paramTypes.push([]);
                                                            func2489.paramCounts = [1];
                                                            obj2472.methods["frameColor:="] = func2489;
                                                            func2489.definitionLine = 1415;
                                                            func2489.definitionModule = "objectdraw";
                                                            var func2492 = function(argcv) {    // method visible:=(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_b = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visible:=(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1424);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in visible:= (arg list 1), which corresponds to parameter b, does not have " + 
                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1425);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2493 = callmethodChecked(this, "isVisible:=", [1], var_b);
                                                              setLineNumber(1426);    // compilenode call
                                                              onSelf = true;
                                                              var call2494 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2494)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method visible:=(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2494;
                                                            };
                                                            func2492.paramTypes = [];
                                                            func2492.paramTypes.push([type_Boolean, "b"]);
                                                            func2492.paramCounts = [1];
                                                            obj2472.methods["visible:="] = func2492;
                                                            func2492.definitionLine = 1424;
                                                            func2492.definitionModule = "objectdraw";
                                                            var func2495 = function(argcv) {    // method addToCanvas(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_c = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addToCanvas(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1430);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in addToCanvas (arg list 1), which corresponds to parameter c, does not have " + 
                                                                          callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1431);    // compilenode call
                                                              onSelf = true;
                                                              var call2496 = callmethodChecked(this, "removeFromCanvas", [0]);
                                                              setLineNumber(1432);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2497 = callmethodChecked(this, "canvas:=", [1], var_c);
                                                              setLineNumber(1433);    // compilenode identifier
                                                              var call2498 = callmethodChecked(var_c, "add", [1], this);
                                                              setLineNumber(1434);    // compilenode call
                                                              onSelf = true;
                                                              var call2499 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2499)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method addToCanvas(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2499;
                                                            };
                                                            func2495.paramTypes = [];
                                                            func2495.paramTypes.push([]);
                                                            func2495.paramCounts = [1];
                                                            obj2472.methods["addToCanvas"] = func2495;
                                                            func2495.definitionLine = 1430;
                                                            func2495.definitionModule = "objectdraw";
                                                            var func2500 = function(argcv) {    // method removeFromCanvas
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for removeFromCanvas"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1439);    // compilenode call
                                                              onSelf = true;
                                                              var call2501 = callmethodChecked(this, "canvas", [0]);
                                                              var call2502 = callmethodChecked(call2501, "remove", [1], this);
                                                              setLineNumber(1440);    // compilenode call
                                                              onSelf = true;
                                                              var call2503 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2503)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method removeFromCanvas does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2503;
                                                            };
                                                            func2500.paramCounts = [0];
                                                            obj2472.methods["removeFromCanvas"] = func2500;
                                                            func2500.definitionLine = 1438;
                                                            func2500.definitionModule = "objectdraw";
                                                            var func2504 = function(argcv) {    // method moveTo(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_newLocn = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveTo(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1444);    // compilenode call
                                                              var call2505 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2506 = callmethodChecked(call2505, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2506, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in moveTo (arg list 1), which corresponds to parameter newLocn, does not have " + 
                                                                          callmethod(call2506, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1445);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2507 = callmethodChecked(this, "location:=", [1], var_newLocn);
                                                              setLineNumber(1446);    // compilenode call
                                                              onSelf = true;
                                                              var call2508 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2508)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method moveTo(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2508;
                                                            };
                                                            func2504.paramCounts = [1];
                                                            obj2472.methods["moveTo"] = func2504;
                                                            func2504.definitionLine = 1444;
                                                            func2504.definitionModule = "objectdraw";
                                                            var func2509 = function(argcv) {    // method moveBy(2)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_dx = arguments[curarg];
                                                              curarg++;
                                                              var var_dy = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 2)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveBy(2)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1450);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in moveBy (arg list 1), which corresponds to parameter dx, does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              curarg++;
                                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 2 in moveBy (arg list 1), which corresponds to parameter dy, does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1451);    // compilenode identifier
                                                              var opresult2512 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                              onSelf = true;
                                                              var call2514 = callmethodChecked(this, "location", [0]);
                                                              var opresult2516 = callmethodChecked(call2514, "+", [1], opresult2512);
                                                              onSelf = true;
                                                              var call2517 = callmethodChecked(this, "location:=", [1], opresult2516);
                                                              setLineNumber(1452);    // compilenode call
                                                              onSelf = true;
                                                              var call2518 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2518)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method moveBy(2) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2518;
                                                            };
                                                            func2509.paramTypes = [];
                                                            func2509.paramTypes.push([type_Number, "dx"]);
                                                            func2509.paramTypes.push([type_Number, "dy"]);
                                                            func2509.paramCounts = [2];
                                                            obj2472.methods["moveBy"] = func2509;
                                                            func2509.definitionLine = 1450;
                                                            func2509.definitionModule = "objectdraw";
                                                            var func2519 = function(argcv) {    // method contains(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_locn = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1456);    // compilenode call
                                                              var call2520 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2521 = callmethodChecked(call2520, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2521, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter locn, does not have " + 
                                                                          callmethod(call2521, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1457);    // compilenode string
                                                              var string2522 = new GraceString("");
                                                              var string2525 = new GraceString("contains not implemented for ");
                                                              var opresult2527 = callmethodChecked(string2525, "++", [1], this);
                                                              var opresult2529 = callmethodChecked(opresult2527, "++", [1], string2522);
                                                              var call2530 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2531 = callmethodChecked(call2530, "SubobjectResponsibility", [0]);
                                                              var call2532 = callmethodChecked(call2531, "raise", [1], opresult2529);
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2532)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method contains(1) does not have " + 
                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                              return call2532;
                                                            };
                                                            func2519.paramCounts = [1];
                                                            obj2472.methods["contains"] = func2519;
                                                            func2519.definitionLine = 1456;
                                                            func2519.definitionModule = "objectdraw";
                                                            var func2533 = function(argcv) {    // method overlaps(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_otherObject = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for overlaps(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1461);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Graphic2D, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in overlaps (arg list 1), which corresponds to parameter otherObject, does not have " + 
                                                                          callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1462);    // compilenode string
                                                              var string2534 = new GraceString("");
                                                              var string2537 = new GraceString("overlaps not implemented for ");
                                                              var opresult2539 = callmethodChecked(string2537, "++", [1], this);
                                                              var opresult2541 = callmethodChecked(opresult2539, "++", [1], string2534);
                                                              var call2542 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2543 = callmethodChecked(call2542, "SubobjectResponsibility", [0]);
                                                              var call2544 = callmethodChecked(call2543, "raise", [1], opresult2541);
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2544)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method overlaps(1) does not have " + 
                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                              return call2544;
                                                            };
                                                            func2533.paramTypes = [];
                                                            func2533.paramTypes.push([]);
                                                            func2533.paramCounts = [1];
                                                            obj2472.methods["overlaps"] = func2533;
                                                            func2533.definitionLine = 1461;
                                                            func2533.definitionModule = "objectdraw";
                                                            var func2545 = function(argcv) {    // method sendForward
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendForward"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1467);    // compilenode call
                                                              onSelf = true;
                                                              var call2546 = callmethodChecked(this, "canvas", [0]);
                                                              var call2547 = callmethodChecked(call2546, "sendForward", [1], this);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2547)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method sendForward does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2547;
                                                            };
                                                            func2545.paramCounts = [0];
                                                            obj2472.methods["sendForward"] = func2545;
                                                            func2545.definitionLine = 1466;
                                                            func2545.definitionModule = "objectdraw";
                                                            var func2548 = function(argcv) {    // method sendBackward
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendBackward"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1472);    // compilenode call
                                                              onSelf = true;
                                                              var call2549 = callmethodChecked(this, "canvas", [0]);
                                                              var call2550 = callmethodChecked(call2549, "sendBackward", [1], this);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2550)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method sendBackward does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2550;
                                                            };
                                                            func2548.paramCounts = [0];
                                                            obj2472.methods["sendBackward"] = func2548;
                                                            func2548.definitionLine = 1471;
                                                            func2548.definitionModule = "objectdraw";
                                                            var func2551 = function(argcv) {    // method sendToFront
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToFront"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1477);    // compilenode call
                                                              onSelf = true;
                                                              var call2552 = callmethodChecked(this, "canvas", [0]);
                                                              var call2553 = callmethodChecked(call2552, "sendToFront", [1], this);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2553)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method sendToFront does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2553;
                                                            };
                                                            func2551.paramCounts = [0];
                                                            obj2472.methods["sendToFront"] = func2551;
                                                            func2551.definitionLine = 1476;
                                                            func2551.definitionModule = "objectdraw";
                                                            var func2554 = function(argcv) {    // method sendToBack
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToBack"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1482);    // compilenode call
                                                              onSelf = true;
                                                              var call2555 = callmethodChecked(this, "canvas", [0]);
                                                              var call2556 = callmethodChecked(call2555, "sendToBack", [1], this);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2556)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method sendToBack does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2556;
                                                            };
                                                            func2554.paramCounts = [0];
                                                            obj2472.methods["sendToBack"] = func2554;
                                                            func2554.definitionLine = 1481;
                                                            func2554.definitionModule = "objectdraw";
                                                            var func2557 = function(argcv) {    // method notifyRedraw
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for notifyRedraw"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1487);    // compilenode call
                                                              onSelf = true;
                                                              var call2558 = callmethodChecked(this, "canvas", [0]);
                                                              var call2559 = callmethodChecked(call2558, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2559)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method notifyRedraw does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2559;
                                                            };
                                                            func2557.confidential = true;
                                                            func2557.paramCounts = [0];
                                                            obj2472.methods["notifyRedraw"] = func2557;
                                                            func2557.definitionLine = 1486;
                                                            func2557.definitionModule = "objectdraw";
                                                            var func2560 = function(argcv) {    // method draw(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_ctx = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1491);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                          callmethod(var_Foreign, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1492);    // compilenode string
                                                              var string2561 = new GraceString("");
                                                              var string2564 = new GraceString("draw not implemented for ");
                                                              var opresult2566 = callmethodChecked(string2564, "++", [1], this);
                                                              var opresult2568 = callmethodChecked(opresult2566, "++", [1], string2561);
                                                              var call2569 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2570 = callmethodChecked(call2569, "SubobjectResponsibility", [0]);
                                                              var call2571 = callmethodChecked(call2570, "raise", [1], opresult2568);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2571)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method draw(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2571;
                                                            };
                                                            func2560.paramTypes = [];
                                                            func2560.paramTypes.push([]);
                                                            func2560.paramCounts = [1];
                                                            obj2472.methods["draw"] = func2560;
                                                            func2560.definitionLine = 1491;
                                                            func2560.definitionModule = "objectdraw";
                                                            var func2572 = function(argcv) {    // method asString
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1497);    // compilenode string
                                                              var string2573 = new GraceString("Graphic object");
                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], string2573)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method asString does not have " + 
                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                              return string2573;
                                                            };
                                                            func2572.paramCounts = [0];
                                                            obj2472.methods["asString"] = func2572;
                                                            func2572.definitionLine = 1496;
                                                            func2572.definitionModule = "objectdraw";
                                                            setLineNumber(1381);    // compilenode identifier
                                                            obj2472.data["location"] = var_location__39__;
                                                            var reader_objectdraw_location2574 = function() {
                                                              return this.data["location"];
                                                            };
                                                            obj2472.methods["location"] = reader_objectdraw_location2574;
                                                            obj2472.data["location"] = var_location__39__;
                                                            var writer_objectdraw_location2574 = function(argcv, o) {
                                                              this.data["location"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2472.methods["location:="] = writer_objectdraw_location2574;
                                                            writer_objectdraw_location2574.confidential = true;
                                                            var call2575 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2576 = callmethodChecked(call2575, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2576, "match", [1], var_location__39__)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'location' is not of type self.outer.Point"));
                                                            obj2472.mutable = true;
                                                            setLineNumber(1400);    // compilenode identifier
                                                            obj2472.data["canvas"] = var_canvas__39__;
                                                            var reader_objectdraw_canvas2577 = function() {
                                                              return this.data["canvas"];
                                                            };
                                                            obj2472.methods["canvas"] = reader_objectdraw_canvas2577;
                                                            obj2472.data["canvas"] = var_canvas__39__;
                                                            var writer_objectdraw_canvas2577 = function(argcv, o) {
                                                              this.data["canvas"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2472.methods["canvas:="] = writer_objectdraw_canvas2577;
                                                            reader_objectdraw_canvas2577.confidential = true;
                                                            writer_objectdraw_canvas2577.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match", [1], var_canvas__39__)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'canvas' is not of type DrawingCanvas"));
                                                            obj2472.mutable = true;
                                                            setLineNumber(1403);    // compilenode identifier
                                                            obj2472.data["theColor"] = var_black;
                                                            var reader_objectdraw_theColor2578 = function() {
                                                              return this.data["theColor"];
                                                            };
                                                            obj2472.methods["theColor"] = reader_objectdraw_theColor2578;
                                                            obj2472.data["theColor"] = var_black;
                                                            var writer_objectdraw_theColor2578 = function(argcv, o) {
                                                              this.data["theColor"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2472.methods["theColor:="] = writer_objectdraw_theColor2578;
                                                            reader_objectdraw_theColor2578.confidential = true;
                                                            writer_objectdraw_theColor2578.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_black)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'theColor' is not of type Color"));
                                                            obj2472.mutable = true;
                                                            setLineNumber(1412);    // compilenode identifier
                                                            obj2472.data["theFrameColor"] = var_black;
                                                            var reader_objectdraw_theFrameColor2579 = function() {
                                                              return this.data["theFrameColor"];
                                                            };
                                                            obj2472.methods["theFrameColor"] = reader_objectdraw_theFrameColor2579;
                                                            obj2472.data["theFrameColor"] = var_black;
                                                            var writer_objectdraw_theFrameColor2579 = function(argcv, o) {
                                                              this.data["theFrameColor"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2472.methods["theFrameColor:="] = writer_objectdraw_theFrameColor2579;
                                                            reader_objectdraw_theFrameColor2579.confidential = true;
                                                            writer_objectdraw_theFrameColor2579.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_black)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'theFrameColor' is not of type Color"));
                                                            obj2472.mutable = true;
                                                            setLineNumber(1421);    // compilenode identifier
                                                            obj2472.data["isVisible"] = GraceTrue;
                                                            var reader_objectdraw_isVisible2580 = function() {
                                                              return this.data["isVisible"];
                                                            };
                                                            obj2472.methods["isVisible"] = reader_objectdraw_isVisible2580;
                                                            obj2472.data["isVisible"] = GraceTrue;
                                                            var writer_objectdraw_isVisible2580 = function(argcv, o) {
                                                              this.data["isVisible"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2472.methods["isVisible:="] = writer_objectdraw_isVisible2580;
                                                            writer_objectdraw_isVisible2580.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceTrue)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'isVisible' is not of type Boolean"));
                                                            obj2472.mutable = true;
                                                            superDepth = origSuperDepth;
                                                          };
                                                          obj_init_2472.apply(inheritingObject, []);
                                                          return obj2472;
                                                          };
                                                          func2470.paramTypes = [];
                                                          func2470.paramTypes.push([]);
                                                          func2470.paramTypes.push([]);
                                                          this.methods["drawableAt()on()object"] = func2470;
                                                        setLineNumber(1502);    // compilenode method
                                                        var func2581 = function(argcv) {    // method drawable2DAt(1)size(1)on(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_location__39__ = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for drawable2DAt (arg list 1) of drawable2DAt(1)size(1)on(1)"));
                                                          var var_dimension__39__ = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[1] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of drawable2DAt(1)size(1)on(1)"));
                                                          var var_canvas__39__ = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[2] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of drawable2DAt(1)size(1)on(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          onSelf = true;
                                                          var call2582 = callmethodChecked(this, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2582, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in drawable2DAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                      callmethod(call2582, "asString", [0])._value + "."));
                                                          curarg++;
                                                          setLineNumber(1503);    // compilenode call
                                                          onSelf = true;
                                                          var call2583 = callmethodChecked(this, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2583, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimension', does not have " + 
                                                                      callmethod(call2583, "asString", [0])._value + "."));
                                                          curarg++;
                                                          setLineNumber(1504);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                      callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("objectdraw");
                                                          setLineNumber(1502);    // compilenode object
                                                          var obj2584 = Grace_allocObject(null, "objectdraw.drawable2DAt()size()on");
                                                          obj2584.definitionModule = "objectdraw";
                                                          obj2584.definitionLine = 1502;
                                                          obj2584.outer = this;
                                                          var reader_objectdraw_outer2585 = function() {
                                                            return this.outer;
                                                          };
                                                          obj2584.methods["outer"] = reader_objectdraw_outer2585;
                                                          var obj_init_2584 = function() {
                                                            var origSuperDepth = superDepth;
                                                            superDepth = obj2584;
                                                            var func2586 = function(argcv) {    // method width
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1511);    // compilenode call
                                                              onSelf = true;
                                                              var call2587 = callmethodChecked(this, "theWidth", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2587)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method width does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              return call2587;
                                                            };
                                                            func2586.paramCounts = [0];
                                                            obj2584.methods["width"] = func2586;
                                                            func2586.definitionLine = 1511;
                                                            func2586.definitionModule = "objectdraw";
                                                            var func2588 = function(argcv) {    // method height
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1515);    // compilenode call
                                                              onSelf = true;
                                                              var call2589 = callmethodChecked(this, "theHeight", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2589)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method height does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              return call2589;
                                                            };
                                                            func2588.paramCounts = [0];
                                                            obj2584.methods["height"] = func2588;
                                                            func2588.definitionLine = 1515;
                                                            func2588.definitionModule = "objectdraw";
                                                            var func2590 = function(argcv) {    // method size
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1517);    // compilenode call
                                                              onSelf = true;
                                                              var call2591 = callmethodChecked(this, "theHeight", [0]);
                                                              onSelf = true;
                                                              var call2593 = callmethodChecked(this, "theWidth", [0]);
                                                              var opresult2595 = callmethodChecked(call2593, "@", [1], call2591);
                                                              var call2596 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2597 = callmethodChecked(call2596, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2597, "match", [1], opresult2595)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method size does not have " + 
                                                                          callmethod(call2597, "asString", [0])._value + "."));
                                                              return opresult2595;
                                                            };
                                                            func2590.paramCounts = [0];
                                                            obj2584.methods["size"] = func2590;
                                                            func2590.definitionLine = 1517;
                                                            func2590.definitionModule = "objectdraw";
                                                            var func2598 = function(argcv) {    // method contains(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_locn = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1521);    // compilenode call
                                                              var call2599 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2600 = callmethodChecked(call2599, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2600, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter locn, does not have " + 
                                                                          callmethod(call2600, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1523);    // compilenode call
                                                              onSelf = true;
                                                              var call2601 = callmethodChecked(this, "height", [0]);
                                                              onSelf = true;
                                                              var call2603 = callmethodChecked(this, "y", [0]);
                                                              var opresult2605 = callmethodChecked(call2603, "+", [1], call2601);
                                                              var call2607 = callmethodChecked(var_locn, "y", [0]);
                                                              var opresult2609 = callmethodChecked(call2607, "\u2264", [1], opresult2605);
                                                              var call2611 = callmethodChecked(var_locn, "y", [0]);
                                                              onSelf = true;
                                                              var call2613 = callmethodChecked(this, "y", [0]);
                                                              var opresult2615 = callmethodChecked(call2613, "\u2264", [1], call2611);
                                                              setLineNumber(1522);    // compilenode call
                                                              onSelf = true;
                                                              var call2617 = callmethodChecked(this, "width", [0]);
                                                              onSelf = true;
                                                              var call2619 = callmethodChecked(this, "x", [0]);
                                                              var opresult2621 = callmethodChecked(call2619, "+", [1], call2617);
                                                              var call2623 = callmethodChecked(var_locn, "x", [0]);
                                                              var opresult2625 = callmethodChecked(call2623, "\u2264", [1], opresult2621);
                                                              var call2627 = callmethodChecked(var_locn, "x", [0]);
                                                              onSelf = true;
                                                              var call2629 = callmethodChecked(this, "x", [0]);
                                                              var opresult2631 = callmethodChecked(call2629, "\u2264", [1], call2627);
                                                              var opresult2633 = callmethodChecked(opresult2631, "&&", [1], opresult2625);
                                                              var opresult2635 = callmethodChecked(opresult2633, "&&", [1], opresult2615);
                                                              var opresult2637 = callmethodChecked(opresult2635, "&&", [1], opresult2609);
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult2637)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method contains(1) does not have " + 
                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                              return opresult2637;
                                                            };
                                                            func2598.paramCounts = [1];
                                                            obj2584.methods["contains"] = func2598;
                                                            func2598.definitionLine = 1521;
                                                            func2598.definitionModule = "objectdraw";
                                                            var func2638 = function(argcv) {    // method overlaps(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_other = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for overlaps(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1527);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Graphic2D, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in overlaps (arg list 1), which corresponds to parameter other, does not have " + 
                                                                          callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1528);    // compilenode identifier
                                                              var call2639 = callmethodChecked(var_other, "x", [0]);
                                                              var var_itemleft = call2639;
                                                              setLineNumber(1529);    // compilenode identifier
                                                              var call2640 = callmethodChecked(var_other, "width", [0]);
                                                              var call2642 = callmethodChecked(var_other, "x", [0]);
                                                              var opresult2644 = callmethodChecked(call2642, "+", [1], call2640);
                                                              var var_itemright = opresult2644;
                                                              setLineNumber(1530);    // compilenode identifier
                                                              var call2645 = callmethodChecked(var_other, "y", [0]);
                                                              var var_itemtop = call2645;
                                                              setLineNumber(1531);    // compilenode identifier
                                                              var call2646 = callmethodChecked(var_other, "height", [0]);
                                                              var call2648 = callmethodChecked(var_other, "y", [0]);
                                                              var opresult2650 = callmethodChecked(call2648, "+", [1], call2646);
                                                              var var_itembottom = opresult2650;
                                                              setLineNumber(1533);    // compilenode call
                                                              onSelf = true;
                                                              var call2651 = callmethodChecked(this, "y", [0]);
                                                              var opresult2654 = callmethodChecked(var_itembottom, "<", [1], call2651);
                                                              onSelf = true;
                                                              var call2657 = callmethodChecked(this, "height", [0]);
                                                              onSelf = true;
                                                              var call2659 = callmethodChecked(this, "y", [0]);
                                                              var opresult2661 = callmethodChecked(call2659, "+", [1], call2657);
                                                              var opresult2663 = callmethodChecked(opresult2661, "<", [1], var_itemtop);
                                                              setLineNumber(1532);    // compilenode call
                                                              onSelf = true;
                                                              var call2665 = callmethodChecked(this, "x", [0]);
                                                              var opresult2668 = callmethodChecked(var_itemright, "<", [1], call2665);
                                                              onSelf = true;
                                                              var call2671 = callmethodChecked(this, "width", [0]);
                                                              onSelf = true;
                                                              var call2673 = callmethodChecked(this, "x", [0]);
                                                              var opresult2675 = callmethodChecked(call2673, "+", [1], call2671);
                                                              var opresult2677 = callmethodChecked(opresult2675, "<", [1], var_itemleft);
                                                              var opresult2679 = callmethodChecked(opresult2677, "||", [1], opresult2668);
                                                              var opresult2681 = callmethodChecked(opresult2679, "||", [1], opresult2663);
                                                              var opresult2683 = callmethodChecked(opresult2681, "||", [1], opresult2654);
                                                              var var_disjoint = opresult2683;
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], var_disjoint)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("value of def 'disjoint' is not of type Boolean"));
                                                              setLineNumber(1534);    // compilenode identifier
                                                              var call2684 = callmethodChecked(var_disjoint, "prefix!", [0]);
                                                              setLineNumber(1535);    // return value
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2684)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method overlaps(1) does not have " + 
                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                              return call2684;
                                                            };
                                                            func2638.paramTypes = [];
                                                            func2638.paramTypes.push([]);
                                                            func2638.paramCounts = [1];
                                                            obj2584.methods["overlaps"] = func2638;
                                                            func2638.definitionLine = 1527;
                                                            func2638.definitionModule = "objectdraw";
                                                            var func2685 = function(argcv) {    // method asString
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1540);    // compilenode string
                                                              var string2686 = new GraceString("");
                                                              onSelf = true;
                                                              var call2688 = callmethodChecked(this, "color", [0]);
                                                              var string2690 = new GraceString(", and color ");
                                                              onSelf = true;
                                                              var call2692 = callmethodChecked(this, "width", [0]);
                                                              var string2694 = new GraceString(", width ");
                                                              onSelf = true;
                                                              var call2696 = callmethodChecked(this, "height", [0]);
                                                              var string2698 = new GraceString("with height ");
                                                              var opresult2700 = callmethodChecked(string2698, "++", [1], call2696);
                                                              var opresult2702 = callmethodChecked(opresult2700, "++", [1], string2694);
                                                              var opresult2704 = callmethodChecked(opresult2702, "++", [1], call2692);
                                                              var opresult2706 = callmethodChecked(opresult2704, "++", [1], string2690);
                                                              var opresult2708 = callmethodChecked(opresult2706, "++", [1], call2688);
                                                              var opresult2710 = callmethodChecked(opresult2708, "++", [1], string2686);
                                                              setLineNumber(1539);    // compilenode string
                                                              var string2712 = new GraceString(") ");
                                                              onSelf = true;
                                                              var call2714 = callmethodChecked(this, "y", [0]);
                                                              var string2716 = new GraceString(",");
                                                              onSelf = true;
                                                              var call2718 = callmethodChecked(this, "x", [0]);
                                                              var string2720 = new GraceString("drawable2D object at (");
                                                              var opresult2722 = callmethodChecked(string2720, "++", [1], call2718);
                                                              var opresult2724 = callmethodChecked(opresult2722, "++", [1], string2716);
                                                              var opresult2726 = callmethodChecked(opresult2724, "++", [1], call2714);
                                                              var opresult2728 = callmethodChecked(opresult2726, "++", [1], string2712);
                                                              var opresult2730 = callmethodChecked(opresult2728, "++", [1], opresult2710);
                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2730)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method asString does not have " + 
                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                              return opresult2730;
                                                            };
                                                            func2685.paramCounts = [0];
                                                            obj2584.methods["asString"] = func2685;
                                                            func2685.definitionLine = 1538;
                                                            func2685.definitionModule = "objectdraw";
                                                            setLineNumber(1507);    // compilenode call
                                                            var call2731 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2732 = callmethodChecked(call2731, "drawableAt()on()object", [1, 1, 1], var_location__39__, var_canvas__39__, this);
                                                            obj2584.superobj = call2732;
                                                            if (call2732.data) obj2584.data = call2732.data;
                                                            if (call2732.hasOwnProperty('_value'))
                                                                obj2584._value = call2732._value;
                                                            setLineNumber(1508);    // compilenode identifier
                                                            var call2733 = callmethodChecked(var_dimension__39__, "x", [0]);
                                                            obj2584.data["theWidth"] = call2733;
                                                            var reader_objectdraw_theWidth2734 = function() {
                                                              return this.data["theWidth"];
                                                            };
                                                            obj2584.methods["theWidth"] = reader_objectdraw_theWidth2734;
                                                            obj2584.data["theWidth"] = call2733;
                                                            var writer_objectdraw_theWidth2734 = function(argcv, o) {
                                                              this.data["theWidth"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2584.methods["theWidth:="] = writer_objectdraw_theWidth2734;
                                                            reader_objectdraw_theWidth2734.confidential = true;
                                                            writer_objectdraw_theWidth2734.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2733)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'theWidth' is not of type Number"));
                                                            obj2584.mutable = true;
                                                            setLineNumber(1512);    // compilenode identifier
                                                            var call2735 = callmethodChecked(var_dimension__39__, "y", [0]);
                                                            obj2584.data["theHeight"] = call2735;
                                                            var reader_objectdraw_theHeight2736 = function() {
                                                              return this.data["theHeight"];
                                                            };
                                                            obj2584.methods["theHeight"] = reader_objectdraw_theHeight2736;
                                                            obj2584.data["theHeight"] = call2735;
                                                            var writer_objectdraw_theHeight2736 = function(argcv, o) {
                                                              this.data["theHeight"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2584.methods["theHeight:="] = writer_objectdraw_theHeight2736;
                                                            reader_objectdraw_theHeight2736.confidential = true;
                                                            writer_objectdraw_theHeight2736.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2735)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'theHeight' is not of type Number"));
                                                            obj2584.mutable = true;
                                                            superDepth = origSuperDepth;
                                                          };
                                                          obj_init_2584.apply(obj2584, []);
                                                          setLineNumber(1502);    // return value
                                                          if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj2584)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method drawable2DAt(1)size(1)on(1) does not have " + 
                                                                      callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                          return obj2584;
                                                        };
                                                        func2581.paramTypes = [];
                                                        func2581.paramTypes.push([]);
                                                        func2581.paramTypes.push([]);
                                                        func2581.paramTypes.push([]);
                                                        func2581.paramCounts = [1, 1, 1];
                                                        this.methods["drawable2DAt()size()on"] = func2581;
                                                        func2581.definitionLine = 1502;
                                                        func2581.definitionModule = "objectdraw";
                                                          var func2737 = function(argcv) {    // method drawable2DAt(1     )size(1     )on(1     )()object
                                                            var curarg = 1;
                                                            var var_location__39__ = arguments[curarg];
                                                            curarg++;
                                                            var var_dimension__39__ = arguments[curarg];
                                                            curarg++;
                                                            var var_canvas__39__ = arguments[curarg];
                                                            curarg++;
                                                            var inheritingObject = arguments[curarg++];
                                                            // Start argument processing
                                                            curarg = 1;
                                                            onSelf = true;
                                                            var call2738 = callmethodChecked(this, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2738, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in drawable2DAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                        callmethod(call2738, "asString", [0])._value + "."));
                                                            curarg++;
                                                            setLineNumber(1503);    // compilenode call
                                                            onSelf = true;
                                                            var call2739 = callmethodChecked(this, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2739, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimension', does not have " + 
                                                                        callmethod(call2739, "asString", [0])._value + "."));
                                                            curarg++;
                                                            setLineNumber(1504);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                        callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument processing
                                                            setModuleName("objectdraw");
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var obj2740 = Grace_allocObject(null, "drawable2DAt()size()on");
                                                            obj2740.definitionModule = "objectdraw";
                                                            obj2740.definitionLine = 1502;
                                                            var inho2740 = inheritingObject;
                                                            while (inho2740.superobj) inho2740 = inho2740.superobj;
                                                            inho2740.superobj = obj2740;
                                                            obj2740.data = inheritingObject.data;
                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                              obj2740._value = inheritingObject._value;
                                                            obj2740.outer = this;
                                                            var reader_objectdraw_outer2741 = function() {
                                                              return this.outer;
                                                            };
                                                            obj2740.methods["outer"] = reader_objectdraw_outer2741;
                                                            var obj_init_2740 = function() {
                                                              var origSuperDepth = superDepth;
                                                              superDepth = obj2740;
                                                              var func2742 = function(argcv) {    // method width
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1511);    // compilenode call
                                                                onSelf = true;
                                                                var call2743 = callmethodChecked(this, "theWidth", [0]);
                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2743)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method width does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                return call2743;
                                                              };
                                                              func2742.paramCounts = [0];
                                                              obj2740.methods["width"] = func2742;
                                                              func2742.definitionLine = 1511;
                                                              func2742.definitionModule = "objectdraw";
                                                              var func2744 = function(argcv) {    // method height
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1515);    // compilenode call
                                                                onSelf = true;
                                                                var call2745 = callmethodChecked(this, "theHeight", [0]);
                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2745)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method height does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                return call2745;
                                                              };
                                                              func2744.paramCounts = [0];
                                                              obj2740.methods["height"] = func2744;
                                                              func2744.definitionLine = 1515;
                                                              func2744.definitionModule = "objectdraw";
                                                              var func2746 = function(argcv) {    // method size
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1517);    // compilenode call
                                                                onSelf = true;
                                                                var call2747 = callmethodChecked(this, "theHeight", [0]);
                                                                onSelf = true;
                                                                var call2749 = callmethodChecked(this, "theWidth", [0]);
                                                                var opresult2751 = callmethodChecked(call2749, "@", [1], call2747);
                                                                var call2752 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call2753 = callmethodChecked(call2752, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call2753, "match", [1], opresult2751)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method size does not have " + 
                                                                            callmethod(call2753, "asString", [0])._value + "."));
                                                                return opresult2751;
                                                              };
                                                              func2746.paramCounts = [0];
                                                              obj2740.methods["size"] = func2746;
                                                              func2746.definitionLine = 1517;
                                                              func2746.definitionModule = "objectdraw";
                                                              var func2754 = function(argcv) {    // method contains(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_locn = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1521);    // compilenode call
                                                                var call2755 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call2756 = callmethodChecked(call2755, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call2756, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter locn, does not have " + 
                                                                            callmethod(call2756, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1523);    // compilenode call
                                                                onSelf = true;
                                                                var call2757 = callmethodChecked(this, "height", [0]);
                                                                onSelf = true;
                                                                var call2759 = callmethodChecked(this, "y", [0]);
                                                                var opresult2761 = callmethodChecked(call2759, "+", [1], call2757);
                                                                var call2763 = callmethodChecked(var_locn, "y", [0]);
                                                                var opresult2765 = callmethodChecked(call2763, "\u2264", [1], opresult2761);
                                                                var call2767 = callmethodChecked(var_locn, "y", [0]);
                                                                onSelf = true;
                                                                var call2769 = callmethodChecked(this, "y", [0]);
                                                                var opresult2771 = callmethodChecked(call2769, "\u2264", [1], call2767);
                                                                setLineNumber(1522);    // compilenode call
                                                                onSelf = true;
                                                                var call2773 = callmethodChecked(this, "width", [0]);
                                                                onSelf = true;
                                                                var call2775 = callmethodChecked(this, "x", [0]);
                                                                var opresult2777 = callmethodChecked(call2775, "+", [1], call2773);
                                                                var call2779 = callmethodChecked(var_locn, "x", [0]);
                                                                var opresult2781 = callmethodChecked(call2779, "\u2264", [1], opresult2777);
                                                                var call2783 = callmethodChecked(var_locn, "x", [0]);
                                                                onSelf = true;
                                                                var call2785 = callmethodChecked(this, "x", [0]);
                                                                var opresult2787 = callmethodChecked(call2785, "\u2264", [1], call2783);
                                                                var opresult2789 = callmethodChecked(opresult2787, "&&", [1], opresult2781);
                                                                var opresult2791 = callmethodChecked(opresult2789, "&&", [1], opresult2771);
                                                                var opresult2793 = callmethodChecked(opresult2791, "&&", [1], opresult2765);
                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult2793)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method contains(1) does not have " + 
                                                                            callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                return opresult2793;
                                                              };
                                                              func2754.paramCounts = [1];
                                                              obj2740.methods["contains"] = func2754;
                                                              func2754.definitionLine = 1521;
                                                              func2754.definitionModule = "objectdraw";
                                                              var func2794 = function(argcv) {    // method overlaps(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_other = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for overlaps(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1527);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_Graphic2D, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in overlaps (arg list 1), which corresponds to parameter other, does not have " + 
                                                                            callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1528);    // compilenode identifier
                                                                var call2795 = callmethodChecked(var_other, "x", [0]);
                                                                var var_itemleft = call2795;
                                                                setLineNumber(1529);    // compilenode identifier
                                                                var call2796 = callmethodChecked(var_other, "width", [0]);
                                                                var call2798 = callmethodChecked(var_other, "x", [0]);
                                                                var opresult2800 = callmethodChecked(call2798, "+", [1], call2796);
                                                                var var_itemright = opresult2800;
                                                                setLineNumber(1530);    // compilenode identifier
                                                                var call2801 = callmethodChecked(var_other, "y", [0]);
                                                                var var_itemtop = call2801;
                                                                setLineNumber(1531);    // compilenode identifier
                                                                var call2802 = callmethodChecked(var_other, "height", [0]);
                                                                var call2804 = callmethodChecked(var_other, "y", [0]);
                                                                var opresult2806 = callmethodChecked(call2804, "+", [1], call2802);
                                                                var var_itembottom = opresult2806;
                                                                setLineNumber(1533);    // compilenode call
                                                                onSelf = true;
                                                                var call2807 = callmethodChecked(this, "y", [0]);
                                                                var opresult2810 = callmethodChecked(var_itembottom, "<", [1], call2807);
                                                                onSelf = true;
                                                                var call2813 = callmethodChecked(this, "height", [0]);
                                                                onSelf = true;
                                                                var call2815 = callmethodChecked(this, "y", [0]);
                                                                var opresult2817 = callmethodChecked(call2815, "+", [1], call2813);
                                                                var opresult2819 = callmethodChecked(opresult2817, "<", [1], var_itemtop);
                                                                setLineNumber(1532);    // compilenode call
                                                                onSelf = true;
                                                                var call2821 = callmethodChecked(this, "x", [0]);
                                                                var opresult2824 = callmethodChecked(var_itemright, "<", [1], call2821);
                                                                onSelf = true;
                                                                var call2827 = callmethodChecked(this, "width", [0]);
                                                                onSelf = true;
                                                                var call2829 = callmethodChecked(this, "x", [0]);
                                                                var opresult2831 = callmethodChecked(call2829, "+", [1], call2827);
                                                                var opresult2833 = callmethodChecked(opresult2831, "<", [1], var_itemleft);
                                                                var opresult2835 = callmethodChecked(opresult2833, "||", [1], opresult2824);
                                                                var opresult2837 = callmethodChecked(opresult2835, "||", [1], opresult2819);
                                                                var opresult2839 = callmethodChecked(opresult2837, "||", [1], opresult2810);
                                                                var var_disjoint = opresult2839;
                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], var_disjoint)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("value of def 'disjoint' is not of type Boolean"));
                                                                setLineNumber(1534);    // compilenode identifier
                                                                var call2840 = callmethodChecked(var_disjoint, "prefix!", [0]);
                                                                setLineNumber(1535);    // return value
                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2840)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method overlaps(1) does not have " + 
                                                                            callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                return call2840;
                                                              };
                                                              func2794.paramTypes = [];
                                                              func2794.paramTypes.push([]);
                                                              func2794.paramCounts = [1];
                                                              obj2740.methods["overlaps"] = func2794;
                                                              func2794.definitionLine = 1527;
                                                              func2794.definitionModule = "objectdraw";
                                                              var func2841 = function(argcv) {    // method asString
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1540);    // compilenode string
                                                                var string2842 = new GraceString("");
                                                                onSelf = true;
                                                                var call2844 = callmethodChecked(this, "color", [0]);
                                                                var string2846 = new GraceString(", and color ");
                                                                onSelf = true;
                                                                var call2848 = callmethodChecked(this, "width", [0]);
                                                                var string2850 = new GraceString(", width ");
                                                                onSelf = true;
                                                                var call2852 = callmethodChecked(this, "height", [0]);
                                                                var string2854 = new GraceString("with height ");
                                                                var opresult2856 = callmethodChecked(string2854, "++", [1], call2852);
                                                                var opresult2858 = callmethodChecked(opresult2856, "++", [1], string2850);
                                                                var opresult2860 = callmethodChecked(opresult2858, "++", [1], call2848);
                                                                var opresult2862 = callmethodChecked(opresult2860, "++", [1], string2846);
                                                                var opresult2864 = callmethodChecked(opresult2862, "++", [1], call2844);
                                                                var opresult2866 = callmethodChecked(opresult2864, "++", [1], string2842);
                                                                setLineNumber(1539);    // compilenode string
                                                                var string2868 = new GraceString(") ");
                                                                onSelf = true;
                                                                var call2870 = callmethodChecked(this, "y", [0]);
                                                                var string2872 = new GraceString(",");
                                                                onSelf = true;
                                                                var call2874 = callmethodChecked(this, "x", [0]);
                                                                var string2876 = new GraceString("drawable2D object at (");
                                                                var opresult2878 = callmethodChecked(string2876, "++", [1], call2874);
                                                                var opresult2880 = callmethodChecked(opresult2878, "++", [1], string2872);
                                                                var opresult2882 = callmethodChecked(opresult2880, "++", [1], call2870);
                                                                var opresult2884 = callmethodChecked(opresult2882, "++", [1], string2868);
                                                                var opresult2886 = callmethodChecked(opresult2884, "++", [1], opresult2866);
                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2886)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method asString does not have " + 
                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                return opresult2886;
                                                              };
                                                              func2841.paramCounts = [0];
                                                              obj2740.methods["asString"] = func2841;
                                                              func2841.definitionLine = 1538;
                                                              func2841.definitionModule = "objectdraw";
                                                              setLineNumber(1507);    // compilenode call
                                                              var call2887 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2888 = callmethodChecked(call2887, "drawableAt()on()object", [1, 1, 1], var_location__39__, var_canvas__39__, this);
                                                              obj2740.superobj = call2888;
                                                              if (call2888.data) obj2740.data = call2888.data;
                                                              if (call2888.hasOwnProperty('_value'))
                                                                  obj2740._value = call2888._value;
                                                              setLineNumber(1508);    // compilenode identifier
                                                              var call2889 = callmethodChecked(var_dimension__39__, "x", [0]);
                                                              obj2740.data["theWidth"] = call2889;
                                                              var reader_objectdraw_theWidth2890 = function() {
                                                                return this.data["theWidth"];
                                                              };
                                                              obj2740.methods["theWidth"] = reader_objectdraw_theWidth2890;
                                                              obj2740.data["theWidth"] = call2889;
                                                              var writer_objectdraw_theWidth2890 = function(argcv, o) {
                                                                this.data["theWidth"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj2740.methods["theWidth:="] = writer_objectdraw_theWidth2890;
                                                              reader_objectdraw_theWidth2890.confidential = true;
                                                              writer_objectdraw_theWidth2890.confidential = true;
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2889)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("initial value of var 'theWidth' is not of type Number"));
                                                              obj2740.mutable = true;
                                                              setLineNumber(1512);    // compilenode identifier
                                                              var call2891 = callmethodChecked(var_dimension__39__, "y", [0]);
                                                              obj2740.data["theHeight"] = call2891;
                                                              var reader_objectdraw_theHeight2892 = function() {
                                                                return this.data["theHeight"];
                                                              };
                                                              obj2740.methods["theHeight"] = reader_objectdraw_theHeight2892;
                                                              obj2740.data["theHeight"] = call2891;
                                                              var writer_objectdraw_theHeight2892 = function(argcv, o) {
                                                                this.data["theHeight"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj2740.methods["theHeight:="] = writer_objectdraw_theHeight2892;
                                                              reader_objectdraw_theHeight2892.confidential = true;
                                                              writer_objectdraw_theHeight2892.confidential = true;
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2891)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("initial value of var 'theHeight' is not of type Number"));
                                                              obj2740.mutable = true;
                                                              superDepth = origSuperDepth;
                                                            };
                                                            obj_init_2740.apply(inheritingObject, []);
                                                            return obj2740;
                                                            };
                                                            func2737.paramTypes = [];
                                                            func2737.paramTypes.push([]);
                                                            func2737.paramTypes.push([]);
                                                            func2737.paramTypes.push([]);
                                                            this.methods["drawable2DAt()size()on()object"] = func2737;
                                                          setLineNumber(1544);    // compilenode method
                                                          var func2893 = function(argcv) {    // method resizable2DAt(1)size(1)on(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_location__39__ = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for resizable2DAt (arg list 1) of resizable2DAt(1)size(1)on(1)"));
                                                            var var_dimensions__39__ = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[1] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of resizable2DAt(1)size(1)on(1)"));
                                                            var var_canvas__39__ = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[2] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of resizable2DAt(1)size(1)on(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            onSelf = true;
                                                            var call2894 = callmethodChecked(this, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2894, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in resizable2DAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                        callmethod(call2894, "asString", [0])._value + "."));
                                                            curarg++;
                                                            onSelf = true;
                                                            var call2895 = callmethodChecked(this, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2895, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                        callmethod(call2895, "asString", [0])._value + "."));
                                                            curarg++;
                                                            setLineNumber(1545);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                        callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("objectdraw");
                                                            setLineNumber(1544);    // compilenode object
                                                            var obj2896 = Grace_allocObject(null, "objectdraw.resizable2DAt()size()on");
                                                            obj2896.definitionModule = "objectdraw";
                                                            obj2896.definitionLine = 1544;
                                                            obj2896.outer = this;
                                                            var reader_objectdraw_outer2897 = function() {
                                                              return this.outer;
                                                            };
                                                            obj2896.methods["outer"] = reader_objectdraw_outer2897;
                                                            var obj_init_2896 = function() {
                                                              var origSuperDepth = superDepth;
                                                              superDepth = obj2896;
                                                              var func2898 = function(argcv) {    // method width:=(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_w = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width:=(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1551);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in width:= (arg list 1), which corresponds to parameter w, does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1552);    // compilenode identifier
                                                                onSelf = true;
                                                                var call2899 = callmethodChecked(this, "theWidth:=", [1], var_w);
                                                                setLineNumber(1553);    // compilenode call
                                                                onSelf = true;
                                                                var call2900 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2900)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method width:=(1) does not have " + 
                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                return call2900;
                                                              };
                                                              func2898.paramTypes = [];
                                                              func2898.paramTypes.push([type_Number, "w"]);
                                                              func2898.paramCounts = [1];
                                                              obj2896.methods["width:="] = func2898;
                                                              func2898.definitionLine = 1551;
                                                              func2898.definitionModule = "objectdraw";
                                                              var func2901 = function(argcv) {    // method height:=(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_h = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height:=(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1557);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in height:= (arg list 1), which corresponds to parameter h, does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1558);    // compilenode identifier
                                                                onSelf = true;
                                                                var call2902 = callmethodChecked(this, "theHeight:=", [1], var_h);
                                                                setLineNumber(1559);    // compilenode call
                                                                onSelf = true;
                                                                var call2903 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2903)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method height:=(1) does not have " + 
                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                return call2903;
                                                              };
                                                              func2901.paramTypes = [];
                                                              func2901.paramTypes.push([type_Number, "h"]);
                                                              func2901.paramCounts = [1];
                                                              obj2896.methods["height:="] = func2901;
                                                              func2901.definitionLine = 1557;
                                                              func2901.definitionModule = "objectdraw";
                                                              var func2904 = function(argcv) {    // method size:=(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_dimensions = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size:=(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1563);    // compilenode call
                                                                var call2905 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call2906 = callmethodChecked(call2905, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call2906, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in size:= (arg list 1), which corresponds to parameter dimensions, does not have " + 
                                                                            callmethod(call2906, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1564);    // compilenode identifier
                                                                var call2907 = callmethodChecked(var_dimensions, "x", [0]);
                                                                onSelf = true;
                                                                var call2908 = callmethodChecked(this, "width:=", [1], call2907);
                                                                setLineNumber(1565);    // compilenode identifier
                                                                var call2909 = callmethodChecked(var_dimensions, "y", [0]);
                                                                onSelf = true;
                                                                var call2910 = callmethodChecked(this, "height:=", [1], call2909);
                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2910)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method size:=(1) does not have " + 
                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                return call2910;
                                                              };
                                                              func2904.paramCounts = [1];
                                                              obj2896.methods["size:="] = func2904;
                                                              func2904.definitionLine = 1563;
                                                              func2904.definitionModule = "objectdraw";
                                                              var func2911 = function(argcv) {    // method asString
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1571);    // compilenode string
                                                                var string2912 = new GraceString("");
                                                                onSelf = true;
                                                                var call2914 = callmethodChecked(this, "color", [0]);
                                                                var string2916 = new GraceString(", and color ");
                                                                onSelf = true;
                                                                var call2918 = callmethodChecked(this, "width", [0]);
                                                                var string2920 = new GraceString(", width ");
                                                                onSelf = true;
                                                                var call2922 = callmethodChecked(this, "height", [0]);
                                                                var string2924 = new GraceString("with height ");
                                                                var opresult2926 = callmethodChecked(string2924, "++", [1], call2922);
                                                                var opresult2928 = callmethodChecked(opresult2926, "++", [1], string2920);
                                                                var opresult2930 = callmethodChecked(opresult2928, "++", [1], call2918);
                                                                var opresult2932 = callmethodChecked(opresult2930, "++", [1], string2916);
                                                                var opresult2934 = callmethodChecked(opresult2932, "++", [1], call2914);
                                                                var opresult2936 = callmethodChecked(opresult2934, "++", [1], string2912);
                                                                setLineNumber(1570);    // compilenode string
                                                                var string2938 = new GraceString(") ");
                                                                onSelf = true;
                                                                var call2940 = callmethodChecked(this, "y", [0]);
                                                                var string2942 = new GraceString(",");
                                                                onSelf = true;
                                                                var call2944 = callmethodChecked(this, "x", [0]);
                                                                var string2946 = new GraceString("Resizable2D object at (");
                                                                var opresult2948 = callmethodChecked(string2946, "++", [1], call2944);
                                                                var opresult2950 = callmethodChecked(opresult2948, "++", [1], string2942);
                                                                var opresult2952 = callmethodChecked(opresult2950, "++", [1], call2940);
                                                                var opresult2954 = callmethodChecked(opresult2952, "++", [1], string2938);
                                                                var opresult2956 = callmethodChecked(opresult2954, "++", [1], opresult2936);
                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2956)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method asString does not have " + 
                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                return opresult2956;
                                                              };
                                                              func2911.paramCounts = [0];
                                                              obj2896.methods["asString"] = func2911;
                                                              func2911.definitionLine = 1569;
                                                              func2911.definitionModule = "objectdraw";
                                                              setLineNumber(1548);    // compilenode call
                                                              var call2957 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2958 = callmethodChecked(call2957, "drawable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                              obj2896.superobj = call2958;
                                                              if (call2958.data) obj2896.data = call2958.data;
                                                              if (call2958.hasOwnProperty('_value'))
                                                                  obj2896._value = call2958._value;
                                                              superDepth = origSuperDepth;
                                                            };
                                                            obj_init_2896.apply(obj2896, []);
                                                            setLineNumber(1544);    // return value
                                                            if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj2896)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method resizable2DAt(1)size(1)on(1) does not have " + 
                                                                        callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                            return obj2896;
                                                          };
                                                          func2893.paramTypes = [];
                                                          func2893.paramTypes.push([]);
                                                          func2893.paramTypes.push([]);
                                                          func2893.paramTypes.push([]);
                                                          func2893.paramCounts = [1, 1, 1];
                                                          this.methods["resizable2DAt()size()on"] = func2893;
                                                          func2893.definitionLine = 1544;
                                                          func2893.definitionModule = "objectdraw";
                                                            var func2959 = function(argcv) {    // method resizable2DAt(1     )size(1     )on(1     )()object
                                                              var curarg = 1;
                                                              var var_location__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_dimensions__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_canvas__39__ = arguments[curarg];
                                                              curarg++;
                                                              var inheritingObject = arguments[curarg++];
                                                              // Start argument processing
                                                              curarg = 1;
                                                              onSelf = true;
                                                              var call2960 = callmethodChecked(this, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2960, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in resizable2DAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                          callmethod(call2960, "asString", [0])._value + "."));
                                                              curarg++;
                                                              onSelf = true;
                                                              var call2961 = callmethodChecked(this, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2961, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                          callmethod(call2961, "asString", [0])._value + "."));
                                                              curarg++;
                                                              setLineNumber(1545);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                          callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument processing
                                                              setModuleName("objectdraw");
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var obj2962 = Grace_allocObject(null, "resizable2DAt()size()on");
                                                              obj2962.definitionModule = "objectdraw";
                                                              obj2962.definitionLine = 1544;
                                                              var inho2962 = inheritingObject;
                                                              while (inho2962.superobj) inho2962 = inho2962.superobj;
                                                              inho2962.superobj = obj2962;
                                                              obj2962.data = inheritingObject.data;
                                                              if (inheritingObject.hasOwnProperty('_value'))
                                                                obj2962._value = inheritingObject._value;
                                                              obj2962.outer = this;
                                                              var reader_objectdraw_outer2963 = function() {
                                                                return this.outer;
                                                              };
                                                              obj2962.methods["outer"] = reader_objectdraw_outer2963;
                                                              var obj_init_2962 = function() {
                                                                var origSuperDepth = superDepth;
                                                                superDepth = obj2962;
                                                                var func2964 = function(argcv) {    // method width:=(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_w = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width:=(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(1551);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in width:= (arg list 1), which corresponds to parameter w, does not have " + 
                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("objectdraw");
                                                                  setLineNumber(1552);    // compilenode identifier
                                                                  onSelf = true;
                                                                  var call2965 = callmethodChecked(this, "theWidth:=", [1], var_w);
                                                                  setLineNumber(1553);    // compilenode call
                                                                  onSelf = true;
                                                                  var call2966 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2966)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method width:=(1) does not have " + 
                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                  return call2966;
                                                                };
                                                                func2964.paramTypes = [];
                                                                func2964.paramTypes.push([type_Number, "w"]);
                                                                func2964.paramCounts = [1];
                                                                obj2962.methods["width:="] = func2964;
                                                                func2964.definitionLine = 1551;
                                                                func2964.definitionModule = "objectdraw";
                                                                var func2967 = function(argcv) {    // method height:=(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_h = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height:=(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(1557);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in height:= (arg list 1), which corresponds to parameter h, does not have " + 
                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("objectdraw");
                                                                  setLineNumber(1558);    // compilenode identifier
                                                                  onSelf = true;
                                                                  var call2968 = callmethodChecked(this, "theHeight:=", [1], var_h);
                                                                  setLineNumber(1559);    // compilenode call
                                                                  onSelf = true;
                                                                  var call2969 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2969)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method height:=(1) does not have " + 
                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                  return call2969;
                                                                };
                                                                func2967.paramTypes = [];
                                                                func2967.paramTypes.push([type_Number, "h"]);
                                                                func2967.paramCounts = [1];
                                                                obj2962.methods["height:="] = func2967;
                                                                func2967.definitionLine = 1557;
                                                                func2967.definitionModule = "objectdraw";
                                                                var func2970 = function(argcv) {    // method size:=(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_dimensions = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size:=(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(1563);    // compilenode call
                                                                  var call2971 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call2972 = callmethodChecked(call2971, "Point", [0]);
                                                                  if (!Grace_isTrue(callmethod(call2972, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in size:= (arg list 1), which corresponds to parameter dimensions, does not have " + 
                                                                              callmethod(call2972, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("objectdraw");
                                                                  setLineNumber(1564);    // compilenode identifier
                                                                  var call2973 = callmethodChecked(var_dimensions, "x", [0]);
                                                                  onSelf = true;
                                                                  var call2974 = callmethodChecked(this, "width:=", [1], call2973);
                                                                  setLineNumber(1565);    // compilenode identifier
                                                                  var call2975 = callmethodChecked(var_dimensions, "y", [0]);
                                                                  onSelf = true;
                                                                  var call2976 = callmethodChecked(this, "height:=", [1], call2975);
                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2976)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method size:=(1) does not have " + 
                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                  return call2976;
                                                                };
                                                                func2970.paramCounts = [1];
                                                                obj2962.methods["size:="] = func2970;
                                                                func2970.definitionLine = 1563;
                                                                func2970.definitionModule = "objectdraw";
                                                                var func2977 = function(argcv) {    // method asString
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                  setModuleName("objectdraw");
                                                                  setLineNumber(1571);    // compilenode string
                                                                  var string2978 = new GraceString("");
                                                                  onSelf = true;
                                                                  var call2980 = callmethodChecked(this, "color", [0]);
                                                                  var string2982 = new GraceString(", and color ");
                                                                  onSelf = true;
                                                                  var call2984 = callmethodChecked(this, "width", [0]);
                                                                  var string2986 = new GraceString(", width ");
                                                                  onSelf = true;
                                                                  var call2988 = callmethodChecked(this, "height", [0]);
                                                                  var string2990 = new GraceString("with height ");
                                                                  var opresult2992 = callmethodChecked(string2990, "++", [1], call2988);
                                                                  var opresult2994 = callmethodChecked(opresult2992, "++", [1], string2986);
                                                                  var opresult2996 = callmethodChecked(opresult2994, "++", [1], call2984);
                                                                  var opresult2998 = callmethodChecked(opresult2996, "++", [1], string2982);
                                                                  var opresult3000 = callmethodChecked(opresult2998, "++", [1], call2980);
                                                                  var opresult3002 = callmethodChecked(opresult3000, "++", [1], string2978);
                                                                  setLineNumber(1570);    // compilenode string
                                                                  var string3004 = new GraceString(") ");
                                                                  onSelf = true;
                                                                  var call3006 = callmethodChecked(this, "y", [0]);
                                                                  var string3008 = new GraceString(",");
                                                                  onSelf = true;
                                                                  var call3010 = callmethodChecked(this, "x", [0]);
                                                                  var string3012 = new GraceString("Resizable2D object at (");
                                                                  var opresult3014 = callmethodChecked(string3012, "++", [1], call3010);
                                                                  var opresult3016 = callmethodChecked(opresult3014, "++", [1], string3008);
                                                                  var opresult3018 = callmethodChecked(opresult3016, "++", [1], call3006);
                                                                  var opresult3020 = callmethodChecked(opresult3018, "++", [1], string3004);
                                                                  var opresult3022 = callmethodChecked(opresult3020, "++", [1], opresult3002);
                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3022)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method asString does not have " + 
                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                  return opresult3022;
                                                                };
                                                                func2977.paramCounts = [0];
                                                                obj2962.methods["asString"] = func2977;
                                                                func2977.definitionLine = 1569;
                                                                func2977.definitionModule = "objectdraw";
                                                                setLineNumber(1548);    // compilenode call
                                                                var call3023 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call3024 = callmethodChecked(call3023, "drawable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                obj2962.superobj = call3024;
                                                                if (call3024.data) obj2962.data = call3024.data;
                                                                if (call3024.hasOwnProperty('_value'))
                                                                    obj2962._value = call3024._value;
                                                                superDepth = origSuperDepth;
                                                              };
                                                              obj_init_2962.apply(inheritingObject, []);
                                                              return obj2962;
                                                              };
                                                              func2959.paramTypes = [];
                                                              func2959.paramTypes.push([]);
                                                              func2959.paramTypes.push([]);
                                                              func2959.paramTypes.push([]);
                                                              this.methods["resizable2DAt()size()on()object"] = func2959;
                                                            setLineNumber(1575);    // compilenode method
                                                            var func3025 = function(argcv) {    // method framedRectAt(1)size(1)on(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_location__39__ = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for framedRectAt (arg list 1) of framedRectAt(1)size(1)on(1)"));
                                                              var var_dimensions__39__ = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[1] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of framedRectAt(1)size(1)on(1)"));
                                                              var var_canvas__39__ = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[2] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of framedRectAt(1)size(1)on(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              onSelf = true;
                                                              var call3026 = callmethodChecked(this, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call3026, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in framedRectAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                          callmethod(call3026, "asString", [0])._value + "."));
                                                              curarg++;
                                                              onSelf = true;
                                                              var call3027 = callmethodChecked(this, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call3027, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                          callmethod(call3027, "asString", [0])._value + "."));
                                                              curarg++;
                                                              setLineNumber(1576);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                          callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("objectdraw");
                                                              setLineNumber(1575);    // compilenode object
                                                              var obj3028 = Grace_allocObject(null, "objectdraw.framedRectAt()size()on");
                                                              obj3028.definitionModule = "objectdraw";
                                                              obj3028.definitionLine = 1575;
                                                              obj3028.outer = this;
                                                              var reader_objectdraw_outer3029 = function() {
                                                                return this.outer;
                                                              };
                                                              obj3028.methods["outer"] = reader_objectdraw_outer3029;
                                                              var obj_init_3028 = function() {
                                                                var origSuperDepth = superDepth;
                                                                superDepth = obj3028;
                                                                var func3030 = function(argcv) {    // method draw(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_ctx = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(1584);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                              callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("objectdraw");
                                                                  setLineNumber(1585);    // compilenode identifier
                                                                  var call3031 = callmethodChecked(var_ctx, "save", [0]);
                                                                  setLineNumber(1586);    // compilenode string
                                                                  var string3032 = new GraceString(")");
                                                                  onSelf = true;
                                                                  var call3034 = callmethodChecked(this, "color", [0]);
                                                                  var call3035 = callmethodChecked(call3034, "blue", [0]);
                                                                  var string3037 = new GraceString(", ");
                                                                  onSelf = true;
                                                                  var call3039 = callmethodChecked(this, "color", [0]);
                                                                  var call3040 = callmethodChecked(call3039, "green", [0]);
                                                                  var string3042 = new GraceString(", ");
                                                                  onSelf = true;
                                                                  var call3044 = callmethodChecked(this, "color", [0]);
                                                                  var call3045 = callmethodChecked(call3044, "red", [0]);
                                                                  var string3047 = new GraceString("rgb(");
                                                                  var opresult3049 = callmethodChecked(string3047, "++", [1], call3045);
                                                                  var opresult3051 = callmethodChecked(opresult3049, "++", [1], string3042);
                                                                  var opresult3053 = callmethodChecked(opresult3051, "++", [1], call3040);
                                                                  var opresult3055 = callmethodChecked(opresult3053, "++", [1], string3037);
                                                                  var opresult3057 = callmethodChecked(opresult3055, "++", [1], call3035);
                                                                  var opresult3059 = callmethodChecked(opresult3057, "++", [1], string3032);
                                                                  var call3060 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult3059);
                                                                  setLineNumber(1587);    // compilenode call
                                                                  onSelf = true;
                                                                  var call3061 = callmethodChecked(this, "x", [0]);
                                                                  onSelf = true;
                                                                  var call3062 = callmethodChecked(this, "y", [0]);
                                                                  onSelf = true;
                                                                  var call3063 = callmethodChecked(this, "width", [0]);
                                                                  onSelf = true;
                                                                  var call3064 = callmethodChecked(this, "height", [0]);
                                                                  var call3065 = callmethodChecked(var_ctx, "strokeRect", [4], call3061, call3062, call3063, call3064);
                                                                  setLineNumber(1588);    // compilenode identifier
                                                                  var call3066 = callmethodChecked(var_ctx, "restore", [0]);
                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3066)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method draw(1) does not have " + 
                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                  return call3066;
                                                                };
                                                                func3030.paramTypes = [];
                                                                func3030.paramTypes.push([]);
                                                                func3030.paramCounts = [1];
                                                                obj3028.methods["draw"] = func3030;
                                                                func3030.definitionLine = 1584;
                                                                func3030.definitionModule = "objectdraw";
                                                                var func3067 = function(argcv) {    // method asString
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                  setModuleName("objectdraw");
                                                                  setLineNumber(1594);    // compilenode string
                                                                  var string3068 = new GraceString("");
                                                                  onSelf = true;
                                                                  var call3070 = callmethodChecked(this, "color", [0]);
                                                                  var string3072 = new GraceString(", and color ");
                                                                  onSelf = true;
                                                                  var call3074 = callmethodChecked(this, "width", [0]);
                                                                  var string3076 = new GraceString(", width ");
                                                                  onSelf = true;
                                                                  var call3078 = callmethodChecked(this, "height", [0]);
                                                                  var string3080 = new GraceString("with height ");
                                                                  var opresult3082 = callmethodChecked(string3080, "++", [1], call3078);
                                                                  var opresult3084 = callmethodChecked(opresult3082, "++", [1], string3076);
                                                                  var opresult3086 = callmethodChecked(opresult3084, "++", [1], call3074);
                                                                  var opresult3088 = callmethodChecked(opresult3086, "++", [1], string3072);
                                                                  var opresult3090 = callmethodChecked(opresult3088, "++", [1], call3070);
                                                                  var opresult3092 = callmethodChecked(opresult3090, "++", [1], string3068);
                                                                  setLineNumber(1593);    // compilenode string
                                                                  var string3094 = new GraceString(") ");
                                                                  onSelf = true;
                                                                  var call3096 = callmethodChecked(this, "y", [0]);
                                                                  var string3098 = new GraceString(",");
                                                                  onSelf = true;
                                                                  var call3100 = callmethodChecked(this, "x", [0]);
                                                                  var string3102 = new GraceString("FramedRect at (");
                                                                  var opresult3104 = callmethodChecked(string3102, "++", [1], call3100);
                                                                  var opresult3106 = callmethodChecked(opresult3104, "++", [1], string3098);
                                                                  var opresult3108 = callmethodChecked(opresult3106, "++", [1], call3096);
                                                                  var opresult3110 = callmethodChecked(opresult3108, "++", [1], string3094);
                                                                  var opresult3112 = callmethodChecked(opresult3110, "++", [1], opresult3092);
                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3112)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method asString does not have " + 
                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                  return opresult3112;
                                                                };
                                                                func3067.paramCounts = [0];
                                                                obj3028.methods["asString"] = func3067;
                                                                func3067.definitionLine = 1592;
                                                                func3067.definitionModule = "objectdraw";
                                                                setLineNumber(1580);    // compilenode call
                                                                var call3113 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call3114 = callmethodChecked(call3113, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                obj3028.superobj = call3114;
                                                                if (call3114.data) obj3028.data = call3114.data;
                                                                if (call3114.hasOwnProperty('_value'))
                                                                    obj3028._value = call3114._value;
                                                                setLineNumber(1581);    // compilenode identifier
                                                                onSelf = true;
                                                                var call3115 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                superDepth = origSuperDepth;
                                                              };
                                                              obj_init_3028.apply(obj3028, []);
                                                              setLineNumber(1575);    // return value
                                                              if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj3028)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method framedRectAt(1)size(1)on(1) does not have " + 
                                                                          callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                              return obj3028;
                                                            };
                                                            func3025.paramTypes = [];
                                                            func3025.paramTypes.push([]);
                                                            func3025.paramTypes.push([]);
                                                            func3025.paramTypes.push([]);
                                                            func3025.paramCounts = [1, 1, 1];
                                                            this.methods["framedRectAt()size()on"] = func3025;
                                                            func3025.definitionLine = 1575;
                                                            func3025.definitionModule = "objectdraw";
                                                              var func3116 = function(argcv) {    // method framedRectAt(1     )size(1     )on(1     )()object
                                                                var curarg = 1;
                                                                var var_location__39__ = arguments[curarg];
                                                                curarg++;
                                                                var var_dimensions__39__ = arguments[curarg];
                                                                curarg++;
                                                                var var_canvas__39__ = arguments[curarg];
                                                                curarg++;
                                                                var inheritingObject = arguments[curarg++];
                                                                // Start argument processing
                                                                curarg = 1;
                                                                onSelf = true;
                                                                var call3117 = callmethodChecked(this, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call3117, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in framedRectAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                            callmethod(call3117, "asString", [0])._value + "."));
                                                                curarg++;
                                                                onSelf = true;
                                                                var call3118 = callmethodChecked(this, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call3118, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                            callmethod(call3118, "asString", [0])._value + "."));
                                                                curarg++;
                                                                setLineNumber(1576);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                            callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument processing
                                                                setModuleName("objectdraw");
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var obj3119 = Grace_allocObject(null, "framedRectAt()size()on");
                                                                obj3119.definitionModule = "objectdraw";
                                                                obj3119.definitionLine = 1575;
                                                                var inho3119 = inheritingObject;
                                                                while (inho3119.superobj) inho3119 = inho3119.superobj;
                                                                inho3119.superobj = obj3119;
                                                                obj3119.data = inheritingObject.data;
                                                                if (inheritingObject.hasOwnProperty('_value'))
                                                                  obj3119._value = inheritingObject._value;
                                                                obj3119.outer = this;
                                                                var reader_objectdraw_outer3120 = function() {
                                                                  return this.outer;
                                                                };
                                                                obj3119.methods["outer"] = reader_objectdraw_outer3120;
                                                                var obj_init_3119 = function() {
                                                                  var origSuperDepth = superDepth;
                                                                  superDepth = obj3119;
                                                                  var func3121 = function(argcv) {    // method draw(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_ctx = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(1584);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("objectdraw");
                                                                    setLineNumber(1585);    // compilenode identifier
                                                                    var call3122 = callmethodChecked(var_ctx, "save", [0]);
                                                                    setLineNumber(1586);    // compilenode string
                                                                    var string3123 = new GraceString(")");
                                                                    onSelf = true;
                                                                    var call3125 = callmethodChecked(this, "color", [0]);
                                                                    var call3126 = callmethodChecked(call3125, "blue", [0]);
                                                                    var string3128 = new GraceString(", ");
                                                                    onSelf = true;
                                                                    var call3130 = callmethodChecked(this, "color", [0]);
                                                                    var call3131 = callmethodChecked(call3130, "green", [0]);
                                                                    var string3133 = new GraceString(", ");
                                                                    onSelf = true;
                                                                    var call3135 = callmethodChecked(this, "color", [0]);
                                                                    var call3136 = callmethodChecked(call3135, "red", [0]);
                                                                    var string3138 = new GraceString("rgb(");
                                                                    var opresult3140 = callmethodChecked(string3138, "++", [1], call3136);
                                                                    var opresult3142 = callmethodChecked(opresult3140, "++", [1], string3133);
                                                                    var opresult3144 = callmethodChecked(opresult3142, "++", [1], call3131);
                                                                    var opresult3146 = callmethodChecked(opresult3144, "++", [1], string3128);
                                                                    var opresult3148 = callmethodChecked(opresult3146, "++", [1], call3126);
                                                                    var opresult3150 = callmethodChecked(opresult3148, "++", [1], string3123);
                                                                    var call3151 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult3150);
                                                                    setLineNumber(1587);    // compilenode call
                                                                    onSelf = true;
                                                                    var call3152 = callmethodChecked(this, "x", [0]);
                                                                    onSelf = true;
                                                                    var call3153 = callmethodChecked(this, "y", [0]);
                                                                    onSelf = true;
                                                                    var call3154 = callmethodChecked(this, "width", [0]);
                                                                    onSelf = true;
                                                                    var call3155 = callmethodChecked(this, "height", [0]);
                                                                    var call3156 = callmethodChecked(var_ctx, "strokeRect", [4], call3152, call3153, call3154, call3155);
                                                                    setLineNumber(1588);    // compilenode identifier
                                                                    var call3157 = callmethodChecked(var_ctx, "restore", [0]);
                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3157)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method draw(1) does not have " + 
                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                    return call3157;
                                                                  };
                                                                  func3121.paramTypes = [];
                                                                  func3121.paramTypes.push([]);
                                                                  func3121.paramCounts = [1];
                                                                  obj3119.methods["draw"] = func3121;
                                                                  func3121.definitionLine = 1584;
                                                                  func3121.definitionModule = "objectdraw";
                                                                  var func3158 = function(argcv) {    // method asString
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                    setModuleName("objectdraw");
                                                                    setLineNumber(1594);    // compilenode string
                                                                    var string3159 = new GraceString("");
                                                                    onSelf = true;
                                                                    var call3161 = callmethodChecked(this, "color", [0]);
                                                                    var string3163 = new GraceString(", and color ");
                                                                    onSelf = true;
                                                                    var call3165 = callmethodChecked(this, "width", [0]);
                                                                    var string3167 = new GraceString(", width ");
                                                                    onSelf = true;
                                                                    var call3169 = callmethodChecked(this, "height", [0]);
                                                                    var string3171 = new GraceString("with height ");
                                                                    var opresult3173 = callmethodChecked(string3171, "++", [1], call3169);
                                                                    var opresult3175 = callmethodChecked(opresult3173, "++", [1], string3167);
                                                                    var opresult3177 = callmethodChecked(opresult3175, "++", [1], call3165);
                                                                    var opresult3179 = callmethodChecked(opresult3177, "++", [1], string3163);
                                                                    var opresult3181 = callmethodChecked(opresult3179, "++", [1], call3161);
                                                                    var opresult3183 = callmethodChecked(opresult3181, "++", [1], string3159);
                                                                    setLineNumber(1593);    // compilenode string
                                                                    var string3185 = new GraceString(") ");
                                                                    onSelf = true;
                                                                    var call3187 = callmethodChecked(this, "y", [0]);
                                                                    var string3189 = new GraceString(",");
                                                                    onSelf = true;
                                                                    var call3191 = callmethodChecked(this, "x", [0]);
                                                                    var string3193 = new GraceString("FramedRect at (");
                                                                    var opresult3195 = callmethodChecked(string3193, "++", [1], call3191);
                                                                    var opresult3197 = callmethodChecked(opresult3195, "++", [1], string3189);
                                                                    var opresult3199 = callmethodChecked(opresult3197, "++", [1], call3187);
                                                                    var opresult3201 = callmethodChecked(opresult3199, "++", [1], string3185);
                                                                    var opresult3203 = callmethodChecked(opresult3201, "++", [1], opresult3183);
                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3203)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method asString does not have " + 
                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                    return opresult3203;
                                                                  };
                                                                  func3158.paramCounts = [0];
                                                                  obj3119.methods["asString"] = func3158;
                                                                  func3158.definitionLine = 1592;
                                                                  func3158.definitionModule = "objectdraw";
                                                                  setLineNumber(1580);    // compilenode call
                                                                  var call3204 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call3205 = callmethodChecked(call3204, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                  obj3119.superobj = call3205;
                                                                  if (call3205.data) obj3119.data = call3205.data;
                                                                  if (call3205.hasOwnProperty('_value'))
                                                                      obj3119._value = call3205._value;
                                                                  setLineNumber(1581);    // compilenode identifier
                                                                  onSelf = true;
                                                                  var call3206 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                  superDepth = origSuperDepth;
                                                                };
                                                                obj_init_3119.apply(inheritingObject, []);
                                                                return obj3119;
                                                                };
                                                                func3116.paramTypes = [];
                                                                func3116.paramTypes.push([]);
                                                                func3116.paramTypes.push([]);
                                                                func3116.paramTypes.push([]);
                                                                this.methods["framedRectAt()size()on()object"] = func3116;
                                                              setLineNumber(1598);    // compilenode method
                                                              var func3207 = function(argcv) {    // method filledRectAt(1)size(1)on(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_location__39__ = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for filledRectAt (arg list 1) of filledRectAt(1)size(1)on(1)"));
                                                                var var_dimensions__39__ = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[1] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of filledRectAt(1)size(1)on(1)"));
                                                                var var_canvas__39__ = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[2] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of filledRectAt(1)size(1)on(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                onSelf = true;
                                                                var call3208 = callmethodChecked(this, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call3208, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in filledRectAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                            callmethod(call3208, "asString", [0])._value + "."));
                                                                curarg++;
                                                                onSelf = true;
                                                                var call3209 = callmethodChecked(this, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call3209, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                            callmethod(call3209, "asString", [0])._value + "."));
                                                                curarg++;
                                                                setLineNumber(1599);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                            callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("objectdraw");
                                                                setLineNumber(1598);    // compilenode object
                                                                var obj3210 = Grace_allocObject(null, "objectdraw.filledRectAt()size()on");
                                                                obj3210.definitionModule = "objectdraw";
                                                                obj3210.definitionLine = 1598;
                                                                obj3210.outer = this;
                                                                var reader_objectdraw_outer3211 = function() {
                                                                  return this.outer;
                                                                };
                                                                obj3210.methods["outer"] = reader_objectdraw_outer3211;
                                                                var obj_init_3210 = function() {
                                                                  var origSuperDepth = superDepth;
                                                                  superDepth = obj3210;
                                                                  var func3212 = function(argcv) {    // method draw(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_ctx = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(1608);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("objectdraw");
                                                                    setLineNumber(1609);    // compilenode identifier
                                                                    var call3213 = callmethodChecked(var_ctx, "save", [0]);
                                                                    setLineNumber(1610);    // compilenode string
                                                                    var string3214 = new GraceString(")");
                                                                    onSelf = true;
                                                                    var call3216 = callmethodChecked(this, "color", [0]);
                                                                    var call3217 = callmethodChecked(call3216, "blue", [0]);
                                                                    var string3219 = new GraceString(", ");
                                                                    onSelf = true;
                                                                    var call3221 = callmethodChecked(this, "color", [0]);
                                                                    var call3222 = callmethodChecked(call3221, "green", [0]);
                                                                    var string3224 = new GraceString(", ");
                                                                    onSelf = true;
                                                                    var call3226 = callmethodChecked(this, "color", [0]);
                                                                    var call3227 = callmethodChecked(call3226, "red", [0]);
                                                                    var string3229 = new GraceString("rgb(");
                                                                    var opresult3231 = callmethodChecked(string3229, "++", [1], call3227);
                                                                    var opresult3233 = callmethodChecked(opresult3231, "++", [1], string3224);
                                                                    var opresult3235 = callmethodChecked(opresult3233, "++", [1], call3222);
                                                                    var opresult3237 = callmethodChecked(opresult3235, "++", [1], string3219);
                                                                    var opresult3239 = callmethodChecked(opresult3237, "++", [1], call3217);
                                                                    var opresult3241 = callmethodChecked(opresult3239, "++", [1], string3214);
                                                                    var call3242 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult3241);
                                                                    setLineNumber(1611);    // compilenode call
                                                                    onSelf = true;
                                                                    var call3243 = callmethodChecked(this, "x", [0]);
                                                                    onSelf = true;
                                                                    var call3244 = callmethodChecked(this, "y", [0]);
                                                                    onSelf = true;
                                                                    var call3245 = callmethodChecked(this, "width", [0]);
                                                                    onSelf = true;
                                                                    var call3246 = callmethodChecked(this, "height", [0]);
                                                                    var call3247 = callmethodChecked(var_ctx, "fillRect", [4], call3243, call3244, call3245, call3246);
                                                                    setLineNumber(1612);    // compilenode identifier
                                                                    var call3248 = callmethodChecked(var_ctx, "restore", [0]);
                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3248)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method draw(1) does not have " + 
                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                    return call3248;
                                                                  };
                                                                  func3212.paramTypes = [];
                                                                  func3212.paramTypes.push([]);
                                                                  func3212.paramCounts = [1];
                                                                  obj3210.methods["draw"] = func3212;
                                                                  func3212.definitionLine = 1608;
                                                                  func3212.definitionModule = "objectdraw";
                                                                  var func3249 = function(argcv) {    // method asString
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                    setModuleName("objectdraw");
                                                                    setLineNumber(1618);    // compilenode string
                                                                    var string3250 = new GraceString("");
                                                                    onSelf = true;
                                                                    var call3252 = callmethodChecked(this, "color", [0]);
                                                                    var string3254 = new GraceString(", and color ");
                                                                    onSelf = true;
                                                                    var call3256 = callmethodChecked(this, "width", [0]);
                                                                    var string3258 = new GraceString(", width ");
                                                                    onSelf = true;
                                                                    var call3260 = callmethodChecked(this, "height", [0]);
                                                                    var string3262 = new GraceString("with height ");
                                                                    var opresult3264 = callmethodChecked(string3262, "++", [1], call3260);
                                                                    var opresult3266 = callmethodChecked(opresult3264, "++", [1], string3258);
                                                                    var opresult3268 = callmethodChecked(opresult3266, "++", [1], call3256);
                                                                    var opresult3270 = callmethodChecked(opresult3268, "++", [1], string3254);
                                                                    var opresult3272 = callmethodChecked(opresult3270, "++", [1], call3252);
                                                                    var opresult3274 = callmethodChecked(opresult3272, "++", [1], string3250);
                                                                    setLineNumber(1617);    // compilenode string
                                                                    var string3276 = new GraceString(") ");
                                                                    onSelf = true;
                                                                    var call3278 = callmethodChecked(this, "y", [0]);
                                                                    var string3280 = new GraceString(", ");
                                                                    onSelf = true;
                                                                    var call3282 = callmethodChecked(this, "x", [0]);
                                                                    var string3284 = new GraceString("FilledRect at (");
                                                                    var opresult3286 = callmethodChecked(string3284, "++", [1], call3282);
                                                                    var opresult3288 = callmethodChecked(opresult3286, "++", [1], string3280);
                                                                    var opresult3290 = callmethodChecked(opresult3288, "++", [1], call3278);
                                                                    var opresult3292 = callmethodChecked(opresult3290, "++", [1], string3276);
                                                                    var opresult3294 = callmethodChecked(opresult3292, "++", [1], opresult3274);
                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3294)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method asString does not have " + 
                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                    return opresult3294;
                                                                  };
                                                                  func3249.paramCounts = [0];
                                                                  obj3210.methods["asString"] = func3249;
                                                                  func3249.definitionLine = 1616;
                                                                  func3249.definitionModule = "objectdraw";
                                                                  setLineNumber(1603);    // compilenode call
                                                                  var call3295 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call3296 = callmethodChecked(call3295, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                  obj3210.superobj = call3296;
                                                                  if (call3296.data) obj3210.data = call3296.data;
                                                                  if (call3296.hasOwnProperty('_value'))
                                                                      obj3210._value = call3296._value;
                                                                  setLineNumber(1605);    // compilenode identifier
                                                                  onSelf = true;
                                                                  var call3297 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                  superDepth = origSuperDepth;
                                                                };
                                                                obj_init_3210.apply(obj3210, []);
                                                                setLineNumber(1598);    // return value
                                                                if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj3210)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method filledRectAt(1)size(1)on(1) does not have " + 
                                                                            callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                return obj3210;
                                                              };
                                                              func3207.paramTypes = [];
                                                              func3207.paramTypes.push([]);
                                                              func3207.paramTypes.push([]);
                                                              func3207.paramTypes.push([]);
                                                              func3207.paramCounts = [1, 1, 1];
                                                              this.methods["filledRectAt()size()on"] = func3207;
                                                              func3207.definitionLine = 1598;
                                                              func3207.definitionModule = "objectdraw";
                                                                var func3298 = function(argcv) {    // method filledRectAt(1     )size(1     )on(1     )()object
                                                                  var curarg = 1;
                                                                  var var_location__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  var var_dimensions__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  var var_canvas__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  var inheritingObject = arguments[curarg++];
                                                                  // Start argument processing
                                                                  curarg = 1;
                                                                  onSelf = true;
                                                                  var call3299 = callmethodChecked(this, "Point", [0]);
                                                                  if (!Grace_isTrue(callmethod(call3299, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in filledRectAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                              callmethod(call3299, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  onSelf = true;
                                                                  var call3300 = callmethodChecked(this, "Point", [0]);
                                                                  if (!Grace_isTrue(callmethod(call3300, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                              callmethod(call3300, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  setLineNumber(1599);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                              callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument processing
                                                                  setModuleName("objectdraw");
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var obj3301 = Grace_allocObject(null, "filledRectAt()size()on");
                                                                  obj3301.definitionModule = "objectdraw";
                                                                  obj3301.definitionLine = 1598;
                                                                  var inho3301 = inheritingObject;
                                                                  while (inho3301.superobj) inho3301 = inho3301.superobj;
                                                                  inho3301.superobj = obj3301;
                                                                  obj3301.data = inheritingObject.data;
                                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                                    obj3301._value = inheritingObject._value;
                                                                  obj3301.outer = this;
                                                                  var reader_objectdraw_outer3302 = function() {
                                                                    return this.outer;
                                                                  };
                                                                  obj3301.methods["outer"] = reader_objectdraw_outer3302;
                                                                  var obj_init_3301 = function() {
                                                                    var origSuperDepth = superDepth;
                                                                    superDepth = obj3301;
                                                                    var func3303 = function(argcv) {    // method draw(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_ctx = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(1608);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                  callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("objectdraw");
                                                                      setLineNumber(1609);    // compilenode identifier
                                                                      var call3304 = callmethodChecked(var_ctx, "save", [0]);
                                                                      setLineNumber(1610);    // compilenode string
                                                                      var string3305 = new GraceString(")");
                                                                      onSelf = true;
                                                                      var call3307 = callmethodChecked(this, "color", [0]);
                                                                      var call3308 = callmethodChecked(call3307, "blue", [0]);
                                                                      var string3310 = new GraceString(", ");
                                                                      onSelf = true;
                                                                      var call3312 = callmethodChecked(this, "color", [0]);
                                                                      var call3313 = callmethodChecked(call3312, "green", [0]);
                                                                      var string3315 = new GraceString(", ");
                                                                      onSelf = true;
                                                                      var call3317 = callmethodChecked(this, "color", [0]);
                                                                      var call3318 = callmethodChecked(call3317, "red", [0]);
                                                                      var string3320 = new GraceString("rgb(");
                                                                      var opresult3322 = callmethodChecked(string3320, "++", [1], call3318);
                                                                      var opresult3324 = callmethodChecked(opresult3322, "++", [1], string3315);
                                                                      var opresult3326 = callmethodChecked(opresult3324, "++", [1], call3313);
                                                                      var opresult3328 = callmethodChecked(opresult3326, "++", [1], string3310);
                                                                      var opresult3330 = callmethodChecked(opresult3328, "++", [1], call3308);
                                                                      var opresult3332 = callmethodChecked(opresult3330, "++", [1], string3305);
                                                                      var call3333 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult3332);
                                                                      setLineNumber(1611);    // compilenode call
                                                                      onSelf = true;
                                                                      var call3334 = callmethodChecked(this, "x", [0]);
                                                                      onSelf = true;
                                                                      var call3335 = callmethodChecked(this, "y", [0]);
                                                                      onSelf = true;
                                                                      var call3336 = callmethodChecked(this, "width", [0]);
                                                                      onSelf = true;
                                                                      var call3337 = callmethodChecked(this, "height", [0]);
                                                                      var call3338 = callmethodChecked(var_ctx, "fillRect", [4], call3334, call3335, call3336, call3337);
                                                                      setLineNumber(1612);    // compilenode identifier
                                                                      var call3339 = callmethodChecked(var_ctx, "restore", [0]);
                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3339)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method draw(1) does not have " + 
                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                      return call3339;
                                                                    };
                                                                    func3303.paramTypes = [];
                                                                    func3303.paramTypes.push([]);
                                                                    func3303.paramCounts = [1];
                                                                    obj3301.methods["draw"] = func3303;
                                                                    func3303.definitionLine = 1608;
                                                                    func3303.definitionModule = "objectdraw";
                                                                    var func3340 = function(argcv) {    // method asString
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                      setModuleName("objectdraw");
                                                                      setLineNumber(1618);    // compilenode string
                                                                      var string3341 = new GraceString("");
                                                                      onSelf = true;
                                                                      var call3343 = callmethodChecked(this, "color", [0]);
                                                                      var string3345 = new GraceString(", and color ");
                                                                      onSelf = true;
                                                                      var call3347 = callmethodChecked(this, "width", [0]);
                                                                      var string3349 = new GraceString(", width ");
                                                                      onSelf = true;
                                                                      var call3351 = callmethodChecked(this, "height", [0]);
                                                                      var string3353 = new GraceString("with height ");
                                                                      var opresult3355 = callmethodChecked(string3353, "++", [1], call3351);
                                                                      var opresult3357 = callmethodChecked(opresult3355, "++", [1], string3349);
                                                                      var opresult3359 = callmethodChecked(opresult3357, "++", [1], call3347);
                                                                      var opresult3361 = callmethodChecked(opresult3359, "++", [1], string3345);
                                                                      var opresult3363 = callmethodChecked(opresult3361, "++", [1], call3343);
                                                                      var opresult3365 = callmethodChecked(opresult3363, "++", [1], string3341);
                                                                      setLineNumber(1617);    // compilenode string
                                                                      var string3367 = new GraceString(") ");
                                                                      onSelf = true;
                                                                      var call3369 = callmethodChecked(this, "y", [0]);
                                                                      var string3371 = new GraceString(", ");
                                                                      onSelf = true;
                                                                      var call3373 = callmethodChecked(this, "x", [0]);
                                                                      var string3375 = new GraceString("FilledRect at (");
                                                                      var opresult3377 = callmethodChecked(string3375, "++", [1], call3373);
                                                                      var opresult3379 = callmethodChecked(opresult3377, "++", [1], string3371);
                                                                      var opresult3381 = callmethodChecked(opresult3379, "++", [1], call3369);
                                                                      var opresult3383 = callmethodChecked(opresult3381, "++", [1], string3367);
                                                                      var opresult3385 = callmethodChecked(opresult3383, "++", [1], opresult3365);
                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3385)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method asString does not have " + 
                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                      return opresult3385;
                                                                    };
                                                                    func3340.paramCounts = [0];
                                                                    obj3301.methods["asString"] = func3340;
                                                                    func3340.definitionLine = 1616;
                                                                    func3340.definitionModule = "objectdraw";
                                                                    setLineNumber(1603);    // compilenode call
                                                                    var call3386 = callmethodChecked(superDepth, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call3387 = callmethodChecked(call3386, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                    obj3301.superobj = call3387;
                                                                    if (call3387.data) obj3301.data = call3387.data;
                                                                    if (call3387.hasOwnProperty('_value'))
                                                                        obj3301._value = call3387._value;
                                                                    setLineNumber(1605);    // compilenode identifier
                                                                    onSelf = true;
                                                                    var call3388 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                    superDepth = origSuperDepth;
                                                                  };
                                                                  obj_init_3301.apply(inheritingObject, []);
                                                                  return obj3301;
                                                                  };
                                                                  func3298.paramTypes = [];
                                                                  func3298.paramTypes.push([]);
                                                                  func3298.paramTypes.push([]);
                                                                  func3298.paramTypes.push([]);
                                                                  this.methods["filledRectAt()size()on()object"] = func3298;
                                                                setLineNumber(1623);    // compilenode method
                                                                var func3389 = function(argcv) {    // method framedOvalAt(1)size(1)on(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_location__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for framedOvalAt (arg list 1) of framedOvalAt(1)size(1)on(1)"));
                                                                  var var_dimensions__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[1] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of framedOvalAt(1)size(1)on(1)"));
                                                                  var var_canvas__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[2] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of framedOvalAt(1)size(1)on(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  onSelf = true;
                                                                  var call3390 = callmethodChecked(this, "Point", [0]);
                                                                  if (!Grace_isTrue(callmethod(call3390, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in framedOvalAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                              callmethod(call3390, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  onSelf = true;
                                                                  var call3391 = callmethodChecked(this, "Point", [0]);
                                                                  if (!Grace_isTrue(callmethod(call3391, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                              callmethod(call3391, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  setLineNumber(1624);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                              callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("objectdraw");
                                                                  setLineNumber(1623);    // compilenode object
                                                                  var obj3392 = Grace_allocObject(null, "objectdraw.framedOvalAt()size()on");
                                                                  obj3392.definitionModule = "objectdraw";
                                                                  obj3392.definitionLine = 1623;
                                                                  obj3392.outer = this;
                                                                  var reader_objectdraw_outer3393 = function() {
                                                                    return this.outer;
                                                                  };
                                                                  obj3392.methods["outer"] = reader_objectdraw_outer3393;
                                                                  var obj_init_3392 = function() {
                                                                    var origSuperDepth = superDepth;
                                                                    superDepth = obj3392;
                                                                    var func3394 = function(argcv) {    // method draw(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_ctx = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(1632);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                  callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("objectdraw");
                                                                      setLineNumber(1633);    // compilenode identifier
                                                                      var call3395 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                      setLineNumber(1634);    // compilenode identifier
                                                                      var call3396 = callmethodChecked(var_ctx, "save", [0]);
                                                                      setLineNumber(1635);    // compilenode call
                                                                      onSelf = true;
                                                                      var call3398 = callmethodChecked(this, "width", [0]);
                                                                      var quotient3400 = callmethodChecked(call3398, "/", [1], new GraceNum(2));
                                                                      onSelf = true;
                                                                      var call3402 = callmethodChecked(this, "x", [0]);
                                                                      var opresult3404 = callmethodChecked(call3402, "+", [1], quotient3400);
                                                                      onSelf = true;
                                                                      var call3406 = callmethodChecked(this, "height", [0]);
                                                                      var quotient3408 = callmethodChecked(call3406, "/", [1], new GraceNum(2));
                                                                      onSelf = true;
                                                                      var call3410 = callmethodChecked(this, "y", [0]);
                                                                      var opresult3412 = callmethodChecked(call3410, "+", [1], quotient3408);
                                                                      var call3413 = callmethodChecked(var_ctx, "translate", [2], opresult3404, opresult3412);
                                                                      setLineNumber(1636);    // compilenode call
                                                                      onSelf = true;
                                                                      var call3415 = callmethodChecked(this, "width", [0]);
                                                                      var quotient3417 = callmethodChecked(call3415, "/", [1], new GraceNum(2));
                                                                      onSelf = true;
                                                                      var call3419 = callmethodChecked(this, "height", [0]);
                                                                      var quotient3421 = callmethodChecked(call3419, "/", [1], new GraceNum(2));
                                                                      var call3422 = callmethodChecked(var_ctx, "scale", [2], quotient3417, quotient3421);
                                                                      setLineNumber(1637);    // compilenode num
                                                                      var prod3425 = callmethodChecked(new GraceNum(2), "*", [1], var_pi);
                                                                      var call3426 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), new GraceNum(0), prod3425);
                                                                      setLineNumber(1638);    // compilenode identifier
                                                                      var call3427 = callmethodChecked(var_ctx, "restore", [0]);
                                                                      setLineNumber(1639);    // compilenode identifier
                                                                      var call3428 = callmethodChecked(var_ctx, "save", [0]);
                                                                      setLineNumber(1640);    // compilenode string
                                                                      var string3429 = new GraceString(")");
                                                                      onSelf = true;
                                                                      var call3431 = callmethodChecked(this, "color", [0]);
                                                                      var call3432 = callmethodChecked(call3431, "blue", [0]);
                                                                      var string3434 = new GraceString(", ");
                                                                      onSelf = true;
                                                                      var call3436 = callmethodChecked(this, "color", [0]);
                                                                      var call3437 = callmethodChecked(call3436, "green", [0]);
                                                                      var string3439 = new GraceString(", ");
                                                                      onSelf = true;
                                                                      var call3441 = callmethodChecked(this, "color", [0]);
                                                                      var call3442 = callmethodChecked(call3441, "red", [0]);
                                                                      var string3444 = new GraceString("rgb(");
                                                                      var opresult3446 = callmethodChecked(string3444, "++", [1], call3442);
                                                                      var opresult3448 = callmethodChecked(opresult3446, "++", [1], string3439);
                                                                      var opresult3450 = callmethodChecked(opresult3448, "++", [1], call3437);
                                                                      var opresult3452 = callmethodChecked(opresult3450, "++", [1], string3434);
                                                                      var opresult3454 = callmethodChecked(opresult3452, "++", [1], call3432);
                                                                      var opresult3456 = callmethodChecked(opresult3454, "++", [1], string3429);
                                                                      var call3457 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult3456);
                                                                      setLineNumber(1641);    // compilenode identifier
                                                                      var call3458 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                      setLineNumber(1642);    // compilenode identifier
                                                                      var call3459 = callmethodChecked(var_ctx, "restore", [0]);
                                                                      setLineNumber(1643);    // compilenode identifier
                                                                      var call3460 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3460)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method draw(1) does not have " + 
                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                      return call3460;
                                                                    };
                                                                    func3394.paramTypes = [];
                                                                    func3394.paramTypes.push([]);
                                                                    func3394.paramCounts = [1];
                                                                    obj3392.methods["draw"] = func3394;
                                                                    func3394.definitionLine = 1632;
                                                                    func3394.definitionModule = "objectdraw";
                                                                    var func3461 = function(argcv) {    // method asString
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                      setModuleName("objectdraw");
                                                                      setLineNumber(1649);    // compilenode string
                                                                      var string3462 = new GraceString("");
                                                                      onSelf = true;
                                                                      var call3464 = callmethodChecked(this, "color", [0]);
                                                                      var string3466 = new GraceString(", and color ");
                                                                      onSelf = true;
                                                                      var call3468 = callmethodChecked(this, "width", [0]);
                                                                      var string3470 = new GraceString(", width ");
                                                                      onSelf = true;
                                                                      var call3472 = callmethodChecked(this, "height", [0]);
                                                                      var string3474 = new GraceString("with height ");
                                                                      var opresult3476 = callmethodChecked(string3474, "++", [1], call3472);
                                                                      var opresult3478 = callmethodChecked(opresult3476, "++", [1], string3470);
                                                                      var opresult3480 = callmethodChecked(opresult3478, "++", [1], call3468);
                                                                      var opresult3482 = callmethodChecked(opresult3480, "++", [1], string3466);
                                                                      var opresult3484 = callmethodChecked(opresult3482, "++", [1], call3464);
                                                                      var opresult3486 = callmethodChecked(opresult3484, "++", [1], string3462);
                                                                      setLineNumber(1648);    // compilenode string
                                                                      var string3488 = new GraceString(") ");
                                                                      onSelf = true;
                                                                      var call3490 = callmethodChecked(this, "y", [0]);
                                                                      var string3492 = new GraceString(",");
                                                                      onSelf = true;
                                                                      var call3494 = callmethodChecked(this, "x", [0]);
                                                                      var string3496 = new GraceString("FramedOval at (");
                                                                      var opresult3498 = callmethodChecked(string3496, "++", [1], call3494);
                                                                      var opresult3500 = callmethodChecked(opresult3498, "++", [1], string3492);
                                                                      var opresult3502 = callmethodChecked(opresult3500, "++", [1], call3490);
                                                                      var opresult3504 = callmethodChecked(opresult3502, "++", [1], string3488);
                                                                      var opresult3506 = callmethodChecked(opresult3504, "++", [1], opresult3486);
                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3506)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method asString does not have " + 
                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                      return opresult3506;
                                                                    };
                                                                    func3461.paramCounts = [0];
                                                                    obj3392.methods["asString"] = func3461;
                                                                    func3461.definitionLine = 1647;
                                                                    func3461.definitionModule = "objectdraw";
                                                                    setLineNumber(1628);    // compilenode call
                                                                    var call3507 = callmethodChecked(superDepth, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call3508 = callmethodChecked(call3507, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                    obj3392.superobj = call3508;
                                                                    if (call3508.data) obj3392.data = call3508.data;
                                                                    if (call3508.hasOwnProperty('_value'))
                                                                        obj3392._value = call3508._value;
                                                                    setLineNumber(1629);    // compilenode identifier
                                                                    onSelf = true;
                                                                    var call3509 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                    superDepth = origSuperDepth;
                                                                  };
                                                                  obj_init_3392.apply(obj3392, []);
                                                                  setLineNumber(1623);    // return value
                                                                  if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj3392)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method framedOvalAt(1)size(1)on(1) does not have " + 
                                                                              callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                  return obj3392;
                                                                };
                                                                func3389.paramTypes = [];
                                                                func3389.paramTypes.push([]);
                                                                func3389.paramTypes.push([]);
                                                                func3389.paramTypes.push([]);
                                                                func3389.paramCounts = [1, 1, 1];
                                                                this.methods["framedOvalAt()size()on"] = func3389;
                                                                func3389.definitionLine = 1623;
                                                                func3389.definitionModule = "objectdraw";
                                                                  var func3510 = function(argcv) {    // method framedOvalAt(1     )size(1     )on(1     )()object
                                                                    var curarg = 1;
                                                                    var var_location__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    var var_dimensions__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    var var_canvas__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    var inheritingObject = arguments[curarg++];
                                                                    // Start argument processing
                                                                    curarg = 1;
                                                                    onSelf = true;
                                                                    var call3511 = callmethodChecked(this, "Point", [0]);
                                                                    if (!Grace_isTrue(callmethod(call3511, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in framedOvalAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                callmethod(call3511, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    onSelf = true;
                                                                    var call3512 = callmethodChecked(this, "Point", [0]);
                                                                    if (!Grace_isTrue(callmethod(call3512, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                callmethod(call3512, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    setLineNumber(1624);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument processing
                                                                    setModuleName("objectdraw");
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var obj3513 = Grace_allocObject(null, "framedOvalAt()size()on");
                                                                    obj3513.definitionModule = "objectdraw";
                                                                    obj3513.definitionLine = 1623;
                                                                    var inho3513 = inheritingObject;
                                                                    while (inho3513.superobj) inho3513 = inho3513.superobj;
                                                                    inho3513.superobj = obj3513;
                                                                    obj3513.data = inheritingObject.data;
                                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                                      obj3513._value = inheritingObject._value;
                                                                    obj3513.outer = this;
                                                                    var reader_objectdraw_outer3514 = function() {
                                                                      return this.outer;
                                                                    };
                                                                    obj3513.methods["outer"] = reader_objectdraw_outer3514;
                                                                    var obj_init_3513 = function() {
                                                                      var origSuperDepth = superDepth;
                                                                      superDepth = obj3513;
                                                                      var func3515 = function(argcv) {    // method draw(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_ctx = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(1632);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                    callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("objectdraw");
                                                                        setLineNumber(1633);    // compilenode identifier
                                                                        var call3516 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                        setLineNumber(1634);    // compilenode identifier
                                                                        var call3517 = callmethodChecked(var_ctx, "save", [0]);
                                                                        setLineNumber(1635);    // compilenode call
                                                                        onSelf = true;
                                                                        var call3519 = callmethodChecked(this, "width", [0]);
                                                                        var quotient3521 = callmethodChecked(call3519, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3523 = callmethodChecked(this, "x", [0]);
                                                                        var opresult3525 = callmethodChecked(call3523, "+", [1], quotient3521);
                                                                        onSelf = true;
                                                                        var call3527 = callmethodChecked(this, "height", [0]);
                                                                        var quotient3529 = callmethodChecked(call3527, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3531 = callmethodChecked(this, "y", [0]);
                                                                        var opresult3533 = callmethodChecked(call3531, "+", [1], quotient3529);
                                                                        var call3534 = callmethodChecked(var_ctx, "translate", [2], opresult3525, opresult3533);
                                                                        setLineNumber(1636);    // compilenode call
                                                                        onSelf = true;
                                                                        var call3536 = callmethodChecked(this, "width", [0]);
                                                                        var quotient3538 = callmethodChecked(call3536, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3540 = callmethodChecked(this, "height", [0]);
                                                                        var quotient3542 = callmethodChecked(call3540, "/", [1], new GraceNum(2));
                                                                        var call3543 = callmethodChecked(var_ctx, "scale", [2], quotient3538, quotient3542);
                                                                        setLineNumber(1637);    // compilenode num
                                                                        var prod3546 = callmethodChecked(new GraceNum(2), "*", [1], var_pi);
                                                                        var call3547 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), new GraceNum(0), prod3546);
                                                                        setLineNumber(1638);    // compilenode identifier
                                                                        var call3548 = callmethodChecked(var_ctx, "restore", [0]);
                                                                        setLineNumber(1639);    // compilenode identifier
                                                                        var call3549 = callmethodChecked(var_ctx, "save", [0]);
                                                                        setLineNumber(1640);    // compilenode string
                                                                        var string3550 = new GraceString(")");
                                                                        onSelf = true;
                                                                        var call3552 = callmethodChecked(this, "color", [0]);
                                                                        var call3553 = callmethodChecked(call3552, "blue", [0]);
                                                                        var string3555 = new GraceString(", ");
                                                                        onSelf = true;
                                                                        var call3557 = callmethodChecked(this, "color", [0]);
                                                                        var call3558 = callmethodChecked(call3557, "green", [0]);
                                                                        var string3560 = new GraceString(", ");
                                                                        onSelf = true;
                                                                        var call3562 = callmethodChecked(this, "color", [0]);
                                                                        var call3563 = callmethodChecked(call3562, "red", [0]);
                                                                        var string3565 = new GraceString("rgb(");
                                                                        var opresult3567 = callmethodChecked(string3565, "++", [1], call3563);
                                                                        var opresult3569 = callmethodChecked(opresult3567, "++", [1], string3560);
                                                                        var opresult3571 = callmethodChecked(opresult3569, "++", [1], call3558);
                                                                        var opresult3573 = callmethodChecked(opresult3571, "++", [1], string3555);
                                                                        var opresult3575 = callmethodChecked(opresult3573, "++", [1], call3553);
                                                                        var opresult3577 = callmethodChecked(opresult3575, "++", [1], string3550);
                                                                        var call3578 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult3577);
                                                                        setLineNumber(1641);    // compilenode identifier
                                                                        var call3579 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                        setLineNumber(1642);    // compilenode identifier
                                                                        var call3580 = callmethodChecked(var_ctx, "restore", [0]);
                                                                        setLineNumber(1643);    // compilenode identifier
                                                                        var call3581 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3581)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method draw(1) does not have " + 
                                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                                        return call3581;
                                                                      };
                                                                      func3515.paramTypes = [];
                                                                      func3515.paramTypes.push([]);
                                                                      func3515.paramCounts = [1];
                                                                      obj3513.methods["draw"] = func3515;
                                                                      func3515.definitionLine = 1632;
                                                                      func3515.definitionModule = "objectdraw";
                                                                      var func3582 = function(argcv) {    // method asString
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                        setModuleName("objectdraw");
                                                                        setLineNumber(1649);    // compilenode string
                                                                        var string3583 = new GraceString("");
                                                                        onSelf = true;
                                                                        var call3585 = callmethodChecked(this, "color", [0]);
                                                                        var string3587 = new GraceString(", and color ");
                                                                        onSelf = true;
                                                                        var call3589 = callmethodChecked(this, "width", [0]);
                                                                        var string3591 = new GraceString(", width ");
                                                                        onSelf = true;
                                                                        var call3593 = callmethodChecked(this, "height", [0]);
                                                                        var string3595 = new GraceString("with height ");
                                                                        var opresult3597 = callmethodChecked(string3595, "++", [1], call3593);
                                                                        var opresult3599 = callmethodChecked(opresult3597, "++", [1], string3591);
                                                                        var opresult3601 = callmethodChecked(opresult3599, "++", [1], call3589);
                                                                        var opresult3603 = callmethodChecked(opresult3601, "++", [1], string3587);
                                                                        var opresult3605 = callmethodChecked(opresult3603, "++", [1], call3585);
                                                                        var opresult3607 = callmethodChecked(opresult3605, "++", [1], string3583);
                                                                        setLineNumber(1648);    // compilenode string
                                                                        var string3609 = new GraceString(") ");
                                                                        onSelf = true;
                                                                        var call3611 = callmethodChecked(this, "y", [0]);
                                                                        var string3613 = new GraceString(",");
                                                                        onSelf = true;
                                                                        var call3615 = callmethodChecked(this, "x", [0]);
                                                                        var string3617 = new GraceString("FramedOval at (");
                                                                        var opresult3619 = callmethodChecked(string3617, "++", [1], call3615);
                                                                        var opresult3621 = callmethodChecked(opresult3619, "++", [1], string3613);
                                                                        var opresult3623 = callmethodChecked(opresult3621, "++", [1], call3611);
                                                                        var opresult3625 = callmethodChecked(opresult3623, "++", [1], string3609);
                                                                        var opresult3627 = callmethodChecked(opresult3625, "++", [1], opresult3607);
                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3627)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method asString does not have " + 
                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                        return opresult3627;
                                                                      };
                                                                      func3582.paramCounts = [0];
                                                                      obj3513.methods["asString"] = func3582;
                                                                      func3582.definitionLine = 1647;
                                                                      func3582.definitionModule = "objectdraw";
                                                                      setLineNumber(1628);    // compilenode call
                                                                      var call3628 = callmethodChecked(superDepth, "outer", [0]);
                                                                      onOuter = true;
                                                                      onSelf = true;
                                                                      var call3629 = callmethodChecked(call3628, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                      obj3513.superobj = call3629;
                                                                      if (call3629.data) obj3513.data = call3629.data;
                                                                      if (call3629.hasOwnProperty('_value'))
                                                                          obj3513._value = call3629._value;
                                                                      setLineNumber(1629);    // compilenode identifier
                                                                      onSelf = true;
                                                                      var call3630 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                      superDepth = origSuperDepth;
                                                                    };
                                                                    obj_init_3513.apply(inheritingObject, []);
                                                                    return obj3513;
                                                                    };
                                                                    func3510.paramTypes = [];
                                                                    func3510.paramTypes.push([]);
                                                                    func3510.paramTypes.push([]);
                                                                    func3510.paramTypes.push([]);
                                                                    this.methods["framedOvalAt()size()on()object"] = func3510;
                                                                  setLineNumber(1653);    // compilenode method
                                                                  var func3631 = function(argcv) {    // method filledOvalAt(1)size(1)on(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_location__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for filledOvalAt (arg list 1) of filledOvalAt(1)size(1)on(1)"));
                                                                    var var_dimensions__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[1] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of filledOvalAt(1)size(1)on(1)"));
                                                                    var var_canvas__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[2] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of filledOvalAt(1)size(1)on(1)"));
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    onSelf = true;
                                                                    var call3632 = callmethodChecked(this, "Point", [0]);
                                                                    if (!Grace_isTrue(callmethod(call3632, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in filledOvalAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                callmethod(call3632, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    onSelf = true;
                                                                    var call3633 = callmethodChecked(this, "Point", [0]);
                                                                    if (!Grace_isTrue(callmethod(call3633, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                callmethod(call3633, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    setLineNumber(1654);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("objectdraw");
                                                                    setLineNumber(1653);    // compilenode object
                                                                    var obj3634 = Grace_allocObject(null, "objectdraw.filledOvalAt()size()on");
                                                                    obj3634.definitionModule = "objectdraw";
                                                                    obj3634.definitionLine = 1653;
                                                                    obj3634.outer = this;
                                                                    var reader_objectdraw_outer3635 = function() {
                                                                      return this.outer;
                                                                    };
                                                                    obj3634.methods["outer"] = reader_objectdraw_outer3635;
                                                                    var obj_init_3634 = function() {
                                                                      var origSuperDepth = superDepth;
                                                                      superDepth = obj3634;
                                                                      var func3636 = function(argcv) {    // method draw(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_ctx = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(1663);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                    callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("objectdraw");
                                                                        setLineNumber(1664);    // compilenode identifier
                                                                        var call3637 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                        setLineNumber(1665);    // compilenode identifier
                                                                        var call3638 = callmethodChecked(var_ctx, "save", [0]);
                                                                        setLineNumber(1666);    // compilenode call
                                                                        onSelf = true;
                                                                        var call3640 = callmethodChecked(this, "width", [0]);
                                                                        var quotient3642 = callmethodChecked(call3640, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3644 = callmethodChecked(this, "x", [0]);
                                                                        var opresult3646 = callmethodChecked(call3644, "+", [1], quotient3642);
                                                                        onSelf = true;
                                                                        var call3648 = callmethodChecked(this, "height", [0]);
                                                                        var quotient3650 = callmethodChecked(call3648, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3652 = callmethodChecked(this, "y", [0]);
                                                                        var opresult3654 = callmethodChecked(call3652, "+", [1], quotient3650);
                                                                        var call3655 = callmethodChecked(var_ctx, "translate", [2], opresult3646, opresult3654);
                                                                        setLineNumber(1667);    // compilenode call
                                                                        onSelf = true;
                                                                        var call3657 = callmethodChecked(this, "width", [0]);
                                                                        var quotient3659 = callmethodChecked(call3657, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3661 = callmethodChecked(this, "height", [0]);
                                                                        var quotient3663 = callmethodChecked(call3661, "/", [1], new GraceNum(2));
                                                                        var call3664 = callmethodChecked(var_ctx, "scale", [2], quotient3659, quotient3663);
                                                                        setLineNumber(1668);    // compilenode num
                                                                        var prod3667 = callmethodChecked(new GraceNum(2), "*", [1], var_pi);
                                                                        var call3668 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), new GraceNum(0), prod3667);
                                                                        setLineNumber(1669);    // compilenode identifier
                                                                        var call3669 = callmethodChecked(var_ctx, "restore", [0]);
                                                                        setLineNumber(1670);    // compilenode identifier
                                                                        var call3670 = callmethodChecked(var_ctx, "save", [0]);
                                                                        setLineNumber(1671);    // compilenode string
                                                                        var string3671 = new GraceString(")");
                                                                        onSelf = true;
                                                                        var call3673 = callmethodChecked(this, "color", [0]);
                                                                        var call3674 = callmethodChecked(call3673, "blue", [0]);
                                                                        var string3676 = new GraceString(", ");
                                                                        onSelf = true;
                                                                        var call3678 = callmethodChecked(this, "color", [0]);
                                                                        var call3679 = callmethodChecked(call3678, "green", [0]);
                                                                        var string3681 = new GraceString(", ");
                                                                        onSelf = true;
                                                                        var call3683 = callmethodChecked(this, "color", [0]);
                                                                        var call3684 = callmethodChecked(call3683, "red", [0]);
                                                                        var string3686 = new GraceString("rgb(");
                                                                        var opresult3688 = callmethodChecked(string3686, "++", [1], call3684);
                                                                        var opresult3690 = callmethodChecked(opresult3688, "++", [1], string3681);
                                                                        var opresult3692 = callmethodChecked(opresult3690, "++", [1], call3679);
                                                                        var opresult3694 = callmethodChecked(opresult3692, "++", [1], string3676);
                                                                        var opresult3696 = callmethodChecked(opresult3694, "++", [1], call3674);
                                                                        var opresult3698 = callmethodChecked(opresult3696, "++", [1], string3671);
                                                                        var call3699 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult3698);
                                                                        setLineNumber(1672);    // compilenode identifier
                                                                        var call3700 = callmethodChecked(var_ctx, "fill", [0]);
                                                                        setLineNumber(1673);    // compilenode identifier
                                                                        var call3701 = callmethodChecked(var_ctx, "restore", [0]);
                                                                        setLineNumber(1674);    // compilenode identifier
                                                                        var call3702 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3702)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method draw(1) does not have " + 
                                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                                        return call3702;
                                                                      };
                                                                      func3636.paramTypes = [];
                                                                      func3636.paramTypes.push([]);
                                                                      func3636.paramCounts = [1];
                                                                      obj3634.methods["draw"] = func3636;
                                                                      func3636.definitionLine = 1663;
                                                                      func3636.definitionModule = "objectdraw";
                                                                      var func3703 = function(argcv) {    // method asString
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                        setModuleName("objectdraw");
                                                                        setLineNumber(1680);    // compilenode string
                                                                        var string3704 = new GraceString("");
                                                                        onSelf = true;
                                                                        var call3706 = callmethodChecked(this, "color", [0]);
                                                                        var string3708 = new GraceString(", and color ");
                                                                        onSelf = true;
                                                                        var call3710 = callmethodChecked(this, "width", [0]);
                                                                        var string3712 = new GraceString(", width ");
                                                                        onSelf = true;
                                                                        var call3714 = callmethodChecked(this, "height", [0]);
                                                                        var string3716 = new GraceString("with height ");
                                                                        var opresult3718 = callmethodChecked(string3716, "++", [1], call3714);
                                                                        var opresult3720 = callmethodChecked(opresult3718, "++", [1], string3712);
                                                                        var opresult3722 = callmethodChecked(opresult3720, "++", [1], call3710);
                                                                        var opresult3724 = callmethodChecked(opresult3722, "++", [1], string3708);
                                                                        var opresult3726 = callmethodChecked(opresult3724, "++", [1], call3706);
                                                                        var opresult3728 = callmethodChecked(opresult3726, "++", [1], string3704);
                                                                        setLineNumber(1679);    // compilenode string
                                                                        var string3730 = new GraceString(") ");
                                                                        onSelf = true;
                                                                        var call3732 = callmethodChecked(this, "y", [0]);
                                                                        var string3734 = new GraceString(",");
                                                                        onSelf = true;
                                                                        var call3736 = callmethodChecked(this, "x", [0]);
                                                                        var string3738 = new GraceString("FilledOval at (");
                                                                        var opresult3740 = callmethodChecked(string3738, "++", [1], call3736);
                                                                        var opresult3742 = callmethodChecked(opresult3740, "++", [1], string3734);
                                                                        var opresult3744 = callmethodChecked(opresult3742, "++", [1], call3732);
                                                                        var opresult3746 = callmethodChecked(opresult3744, "++", [1], string3730);
                                                                        var opresult3748 = callmethodChecked(opresult3746, "++", [1], opresult3728);
                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3748)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method asString does not have " + 
                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                        return opresult3748;
                                                                      };
                                                                      func3703.paramCounts = [0];
                                                                      obj3634.methods["asString"] = func3703;
                                                                      func3703.definitionLine = 1678;
                                                                      func3703.definitionModule = "objectdraw";
                                                                      setLineNumber(1658);    // compilenode call
                                                                      var call3749 = callmethodChecked(superDepth, "outer", [0]);
                                                                      onOuter = true;
                                                                      onSelf = true;
                                                                      var call3750 = callmethodChecked(call3749, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                      obj3634.superobj = call3750;
                                                                      if (call3750.data) obj3634.data = call3750.data;
                                                                      if (call3750.hasOwnProperty('_value'))
                                                                          obj3634._value = call3750._value;
                                                                      setLineNumber(1660);    // compilenode identifier
                                                                      onSelf = true;
                                                                      var call3751 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                      superDepth = origSuperDepth;
                                                                    };
                                                                    obj_init_3634.apply(obj3634, []);
                                                                    setLineNumber(1653);    // return value
                                                                    if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj3634)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method filledOvalAt(1)size(1)on(1) does not have " + 
                                                                                callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                    return obj3634;
                                                                  };
                                                                  func3631.paramTypes = [];
                                                                  func3631.paramTypes.push([]);
                                                                  func3631.paramTypes.push([]);
                                                                  func3631.paramTypes.push([]);
                                                                  func3631.paramCounts = [1, 1, 1];
                                                                  this.methods["filledOvalAt()size()on"] = func3631;
                                                                  func3631.definitionLine = 1653;
                                                                  func3631.definitionModule = "objectdraw";
                                                                    var func3752 = function(argcv) {    // method filledOvalAt(1     )size(1     )on(1     )()object
                                                                      var curarg = 1;
                                                                      var var_location__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      var var_dimensions__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      var var_canvas__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      var inheritingObject = arguments[curarg++];
                                                                      // Start argument processing
                                                                      curarg = 1;
                                                                      onSelf = true;
                                                                      var call3753 = callmethodChecked(this, "Point", [0]);
                                                                      if (!Grace_isTrue(callmethod(call3753, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in filledOvalAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                  callmethod(call3753, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      onSelf = true;
                                                                      var call3754 = callmethodChecked(this, "Point", [0]);
                                                                      if (!Grace_isTrue(callmethod(call3754, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                  callmethod(call3754, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      setLineNumber(1654);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                  callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument processing
                                                                      setModuleName("objectdraw");
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var obj3755 = Grace_allocObject(null, "filledOvalAt()size()on");
                                                                      obj3755.definitionModule = "objectdraw";
                                                                      obj3755.definitionLine = 1653;
                                                                      var inho3755 = inheritingObject;
                                                                      while (inho3755.superobj) inho3755 = inho3755.superobj;
                                                                      inho3755.superobj = obj3755;
                                                                      obj3755.data = inheritingObject.data;
                                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                                        obj3755._value = inheritingObject._value;
                                                                      obj3755.outer = this;
                                                                      var reader_objectdraw_outer3756 = function() {
                                                                        return this.outer;
                                                                      };
                                                                      obj3755.methods["outer"] = reader_objectdraw_outer3756;
                                                                      var obj_init_3755 = function() {
                                                                        var origSuperDepth = superDepth;
                                                                        superDepth = obj3755;
                                                                        var func3757 = function(argcv) {    // method draw(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_ctx = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(1663);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                      callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("objectdraw");
                                                                          setLineNumber(1664);    // compilenode identifier
                                                                          var call3758 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                          setLineNumber(1665);    // compilenode identifier
                                                                          var call3759 = callmethodChecked(var_ctx, "save", [0]);
                                                                          setLineNumber(1666);    // compilenode call
                                                                          onSelf = true;
                                                                          var call3761 = callmethodChecked(this, "width", [0]);
                                                                          var quotient3763 = callmethodChecked(call3761, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3765 = callmethodChecked(this, "x", [0]);
                                                                          var opresult3767 = callmethodChecked(call3765, "+", [1], quotient3763);
                                                                          onSelf = true;
                                                                          var call3769 = callmethodChecked(this, "height", [0]);
                                                                          var quotient3771 = callmethodChecked(call3769, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3773 = callmethodChecked(this, "y", [0]);
                                                                          var opresult3775 = callmethodChecked(call3773, "+", [1], quotient3771);
                                                                          var call3776 = callmethodChecked(var_ctx, "translate", [2], opresult3767, opresult3775);
                                                                          setLineNumber(1667);    // compilenode call
                                                                          onSelf = true;
                                                                          var call3778 = callmethodChecked(this, "width", [0]);
                                                                          var quotient3780 = callmethodChecked(call3778, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3782 = callmethodChecked(this, "height", [0]);
                                                                          var quotient3784 = callmethodChecked(call3782, "/", [1], new GraceNum(2));
                                                                          var call3785 = callmethodChecked(var_ctx, "scale", [2], quotient3780, quotient3784);
                                                                          setLineNumber(1668);    // compilenode num
                                                                          var prod3788 = callmethodChecked(new GraceNum(2), "*", [1], var_pi);
                                                                          var call3789 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), new GraceNum(0), prod3788);
                                                                          setLineNumber(1669);    // compilenode identifier
                                                                          var call3790 = callmethodChecked(var_ctx, "restore", [0]);
                                                                          setLineNumber(1670);    // compilenode identifier
                                                                          var call3791 = callmethodChecked(var_ctx, "save", [0]);
                                                                          setLineNumber(1671);    // compilenode string
                                                                          var string3792 = new GraceString(")");
                                                                          onSelf = true;
                                                                          var call3794 = callmethodChecked(this, "color", [0]);
                                                                          var call3795 = callmethodChecked(call3794, "blue", [0]);
                                                                          var string3797 = new GraceString(", ");
                                                                          onSelf = true;
                                                                          var call3799 = callmethodChecked(this, "color", [0]);
                                                                          var call3800 = callmethodChecked(call3799, "green", [0]);
                                                                          var string3802 = new GraceString(", ");
                                                                          onSelf = true;
                                                                          var call3804 = callmethodChecked(this, "color", [0]);
                                                                          var call3805 = callmethodChecked(call3804, "red", [0]);
                                                                          var string3807 = new GraceString("rgb(");
                                                                          var opresult3809 = callmethodChecked(string3807, "++", [1], call3805);
                                                                          var opresult3811 = callmethodChecked(opresult3809, "++", [1], string3802);
                                                                          var opresult3813 = callmethodChecked(opresult3811, "++", [1], call3800);
                                                                          var opresult3815 = callmethodChecked(opresult3813, "++", [1], string3797);
                                                                          var opresult3817 = callmethodChecked(opresult3815, "++", [1], call3795);
                                                                          var opresult3819 = callmethodChecked(opresult3817, "++", [1], string3792);
                                                                          var call3820 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult3819);
                                                                          setLineNumber(1672);    // compilenode identifier
                                                                          var call3821 = callmethodChecked(var_ctx, "fill", [0]);
                                                                          setLineNumber(1673);    // compilenode identifier
                                                                          var call3822 = callmethodChecked(var_ctx, "restore", [0]);
                                                                          setLineNumber(1674);    // compilenode identifier
                                                                          var call3823 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3823)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method draw(1) does not have " + 
                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                          return call3823;
                                                                        };
                                                                        func3757.paramTypes = [];
                                                                        func3757.paramTypes.push([]);
                                                                        func3757.paramCounts = [1];
                                                                        obj3755.methods["draw"] = func3757;
                                                                        func3757.definitionLine = 1663;
                                                                        func3757.definitionModule = "objectdraw";
                                                                        var func3824 = function(argcv) {    // method asString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                          setModuleName("objectdraw");
                                                                          setLineNumber(1680);    // compilenode string
                                                                          var string3825 = new GraceString("");
                                                                          onSelf = true;
                                                                          var call3827 = callmethodChecked(this, "color", [0]);
                                                                          var string3829 = new GraceString(", and color ");
                                                                          onSelf = true;
                                                                          var call3831 = callmethodChecked(this, "width", [0]);
                                                                          var string3833 = new GraceString(", width ");
                                                                          onSelf = true;
                                                                          var call3835 = callmethodChecked(this, "height", [0]);
                                                                          var string3837 = new GraceString("with height ");
                                                                          var opresult3839 = callmethodChecked(string3837, "++", [1], call3835);
                                                                          var opresult3841 = callmethodChecked(opresult3839, "++", [1], string3833);
                                                                          var opresult3843 = callmethodChecked(opresult3841, "++", [1], call3831);
                                                                          var opresult3845 = callmethodChecked(opresult3843, "++", [1], string3829);
                                                                          var opresult3847 = callmethodChecked(opresult3845, "++", [1], call3827);
                                                                          var opresult3849 = callmethodChecked(opresult3847, "++", [1], string3825);
                                                                          setLineNumber(1679);    // compilenode string
                                                                          var string3851 = new GraceString(") ");
                                                                          onSelf = true;
                                                                          var call3853 = callmethodChecked(this, "y", [0]);
                                                                          var string3855 = new GraceString(",");
                                                                          onSelf = true;
                                                                          var call3857 = callmethodChecked(this, "x", [0]);
                                                                          var string3859 = new GraceString("FilledOval at (");
                                                                          var opresult3861 = callmethodChecked(string3859, "++", [1], call3857);
                                                                          var opresult3863 = callmethodChecked(opresult3861, "++", [1], string3855);
                                                                          var opresult3865 = callmethodChecked(opresult3863, "++", [1], call3853);
                                                                          var opresult3867 = callmethodChecked(opresult3865, "++", [1], string3851);
                                                                          var opresult3869 = callmethodChecked(opresult3867, "++", [1], opresult3849);
                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3869)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method asString does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          return opresult3869;
                                                                        };
                                                                        func3824.paramCounts = [0];
                                                                        obj3755.methods["asString"] = func3824;
                                                                        func3824.definitionLine = 1678;
                                                                        func3824.definitionModule = "objectdraw";
                                                                        setLineNumber(1658);    // compilenode call
                                                                        var call3870 = callmethodChecked(superDepth, "outer", [0]);
                                                                        onOuter = true;
                                                                        onSelf = true;
                                                                        var call3871 = callmethodChecked(call3870, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                        obj3755.superobj = call3871;
                                                                        if (call3871.data) obj3755.data = call3871.data;
                                                                        if (call3871.hasOwnProperty('_value'))
                                                                            obj3755._value = call3871._value;
                                                                        setLineNumber(1660);    // compilenode identifier
                                                                        onSelf = true;
                                                                        var call3872 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                        superDepth = origSuperDepth;
                                                                      };
                                                                      obj_init_3755.apply(inheritingObject, []);
                                                                      return obj3755;
                                                                      };
                                                                      func3752.paramTypes = [];
                                                                      func3752.paramTypes.push([]);
                                                                      func3752.paramTypes.push([]);
                                                                      func3752.paramTypes.push([]);
                                                                      this.methods["filledOvalAt()size()on()object"] = func3752;
                                                                    setLineNumber(1684);    // compilenode method
                                                                    var func3873 = function(argcv) {    // method framedArcAt(1)size(1)from(1)to(1)on(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_location__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for framedArcAt (arg list 1) of framedArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                      var var_dimensions__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[1] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of framedArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                      var var_startAngle = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[2] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 3) of framedArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                      var var_endAngle = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[3] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 4) of framedArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                      var var_canvas__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[4] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 5) of framedArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      onSelf = true;
                                                                      var call3874 = callmethodChecked(this, "Point", [0]);
                                                                      if (!Grace_isTrue(callmethod(call3874, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in framedArcAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                  callmethod(call3874, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      onSelf = true;
                                                                      var call3875 = callmethodChecked(this, "Point", [0]);
                                                                      if (!Grace_isTrue(callmethod(call3875, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                  callmethod(call3875, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      setLineNumber(1685);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in from (arg list 3), which corresponds to parameter startAngle, does not have " + 
                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in to (arg list 4), which corresponds to parameter endAngle, does not have " + 
                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      setLineNumber(1686);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in on (arg list 5), which corresponds to parameter canvas', does not have " + 
                                                                                  callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("objectdraw");
                                                                      setLineNumber(1684);    // compilenode object
                                                                      var obj3876 = Grace_allocObject(null, "objectdraw.framedArcAt()size()from()to()on");
                                                                      obj3876.definitionModule = "objectdraw";
                                                                      obj3876.definitionLine = 1684;
                                                                      obj3876.outer = this;
                                                                      var reader_objectdraw_outer3877 = function() {
                                                                        return this.outer;
                                                                      };
                                                                      obj3876.methods["outer"] = reader_objectdraw_outer3877;
                                                                      var obj_init_3876 = function() {
                                                                        var origSuperDepth = superDepth;
                                                                        superDepth = obj3876;
                                                                        var func3878 = function(argcv) {    // method draw(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_ctx = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(1695);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                      callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("objectdraw");
                                                                          setLineNumber(1696);    // compilenode identifier
                                                                          var call3879 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                          setLineNumber(1697);    // compilenode identifier
                                                                          var call3880 = callmethodChecked(var_ctx, "save", [0]);
                                                                          setLineNumber(1698);    // compilenode call
                                                                          onSelf = true;
                                                                          var call3882 = callmethodChecked(this, "width", [0]);
                                                                          var quotient3884 = callmethodChecked(call3882, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3886 = callmethodChecked(this, "x", [0]);
                                                                          var opresult3888 = callmethodChecked(call3886, "+", [1], quotient3884);
                                                                          onSelf = true;
                                                                          var call3890 = callmethodChecked(this, "height", [0]);
                                                                          var quotient3892 = callmethodChecked(call3890, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3894 = callmethodChecked(this, "y", [0]);
                                                                          var opresult3896 = callmethodChecked(call3894, "+", [1], quotient3892);
                                                                          var call3897 = callmethodChecked(var_ctx, "translate", [2], opresult3888, opresult3896);
                                                                          setLineNumber(1699);    // compilenode call
                                                                          onSelf = true;
                                                                          var call3899 = callmethodChecked(this, "width", [0]);
                                                                          var quotient3901 = callmethodChecked(call3899, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3903 = callmethodChecked(this, "height", [0]);
                                                                          var quotient3905 = callmethodChecked(call3903, "/", [1], new GraceNum(2));
                                                                          var call3906 = callmethodChecked(var_ctx, "scale", [2], quotient3901, quotient3905);
                                                                          var if3907 = GraceDone;
                                                                          setLineNumber(1700);    // compilenode identifier
                                                                          var opresult3910 = callmethodChecked(var_startAngle, "\u2264", [1], var_endAngle);
                                                                          if (Grace_isTrue(opresult3910)) {
                                                                            setLineNumber(1701);    // compilenode identifier
                                                                            var prod3914 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                            var quotient3916 = callmethodChecked(prod3914, "/", [1], new GraceNum(180));
                                                                            var prod3920 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                            var quotient3922 = callmethodChecked(prod3920, "/", [1], new GraceNum(180));
                                                                            var call3923 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient3916, quotient3922);
                                                                            if3907 = call3923;
                                                                          } else {
                                                                            setLineNumber(1703);    // compilenode identifier
                                                                            var prod3927 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                            var quotient3929 = callmethodChecked(prod3927, "/", [1], new GraceNum(180));
                                                                            var prod3933 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                            var quotient3935 = callmethodChecked(prod3933, "/", [1], new GraceNum(180));
                                                                            var call3936 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient3929, quotient3935);
                                                                            if3907 = call3936;
                                                                          }
                                                                          setLineNumber(1705);    // compilenode identifier
                                                                          var call3937 = callmethodChecked(var_ctx, "restore", [0]);
                                                                          setLineNumber(1706);    // compilenode identifier
                                                                          var call3938 = callmethodChecked(var_ctx, "save", [0]);
                                                                          setLineNumber(1707);    // compilenode string
                                                                          var string3939 = new GraceString(")");
                                                                          onSelf = true;
                                                                          var call3941 = callmethodChecked(this, "color", [0]);
                                                                          var call3942 = callmethodChecked(call3941, "blue", [0]);
                                                                          var string3944 = new GraceString(", ");
                                                                          onSelf = true;
                                                                          var call3946 = callmethodChecked(this, "color", [0]);
                                                                          var call3947 = callmethodChecked(call3946, "green", [0]);
                                                                          var string3949 = new GraceString(", ");
                                                                          onSelf = true;
                                                                          var call3951 = callmethodChecked(this, "color", [0]);
                                                                          var call3952 = callmethodChecked(call3951, "red", [0]);
                                                                          var string3954 = new GraceString("rgb(");
                                                                          var opresult3956 = callmethodChecked(string3954, "++", [1], call3952);
                                                                          var opresult3958 = callmethodChecked(opresult3956, "++", [1], string3949);
                                                                          var opresult3960 = callmethodChecked(opresult3958, "++", [1], call3947);
                                                                          var opresult3962 = callmethodChecked(opresult3960, "++", [1], string3944);
                                                                          var opresult3964 = callmethodChecked(opresult3962, "++", [1], call3942);
                                                                          var opresult3966 = callmethodChecked(opresult3964, "++", [1], string3939);
                                                                          var call3967 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult3966);
                                                                          setLineNumber(1708);    // compilenode identifier
                                                                          var call3968 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                          setLineNumber(1709);    // compilenode identifier
                                                                          var call3969 = callmethodChecked(var_ctx, "restore", [0]);
                                                                          setLineNumber(1710);    // compilenode identifier
                                                                          var call3970 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3970)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method draw(1) does not have " + 
                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                          return call3970;
                                                                        };
                                                                        func3878.paramTypes = [];
                                                                        func3878.paramTypes.push([]);
                                                                        func3878.paramCounts = [1];
                                                                        obj3876.methods["draw"] = func3878;
                                                                        func3878.definitionLine = 1695;
                                                                        func3878.definitionModule = "objectdraw";
                                                                        var func3971 = function(argcv) {    // method asString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                          setModuleName("objectdraw");
                                                                          setLineNumber(1717);    // compilenode string
                                                                          var string3972 = new GraceString(" degrees");
                                                                          var string3975 = new GraceString(" degrees to ");
                                                                          var string3978 = new GraceString("from ");
                                                                          var opresult3980 = callmethodChecked(string3978, "++", [1], var_startAngle);
                                                                          var opresult3982 = callmethodChecked(opresult3980, "++", [1], string3975);
                                                                          var opresult3984 = callmethodChecked(opresult3982, "++", [1], var_endAngle);
                                                                          var opresult3986 = callmethodChecked(opresult3984, "++", [1], string3972);
                                                                          setLineNumber(1716);    // compilenode string
                                                                          var string3988 = new GraceString(" going ");
                                                                          onSelf = true;
                                                                          var call3990 = callmethodChecked(this, "color", [0]);
                                                                          var string3992 = new GraceString(", and color ");
                                                                          onSelf = true;
                                                                          var call3994 = callmethodChecked(this, "width", [0]);
                                                                          var string3996 = new GraceString(", width ");
                                                                          onSelf = true;
                                                                          var call3998 = callmethodChecked(this, "height", [0]);
                                                                          var string4000 = new GraceString("with height ");
                                                                          var opresult4002 = callmethodChecked(string4000, "++", [1], call3998);
                                                                          var opresult4004 = callmethodChecked(opresult4002, "++", [1], string3996);
                                                                          var opresult4006 = callmethodChecked(opresult4004, "++", [1], call3994);
                                                                          var opresult4008 = callmethodChecked(opresult4006, "++", [1], string3992);
                                                                          var opresult4010 = callmethodChecked(opresult4008, "++", [1], call3990);
                                                                          var opresult4012 = callmethodChecked(opresult4010, "++", [1], string3988);
                                                                          setLineNumber(1715);    // compilenode string
                                                                          var string4014 = new GraceString(") ");
                                                                          onSelf = true;
                                                                          var call4016 = callmethodChecked(this, "y", [0]);
                                                                          var string4018 = new GraceString(",");
                                                                          onSelf = true;
                                                                          var call4020 = callmethodChecked(this, "x", [0]);
                                                                          var string4022 = new GraceString("FramedArc at (");
                                                                          var opresult4024 = callmethodChecked(string4022, "++", [1], call4020);
                                                                          var opresult4026 = callmethodChecked(opresult4024, "++", [1], string4018);
                                                                          var opresult4028 = callmethodChecked(opresult4026, "++", [1], call4016);
                                                                          var opresult4030 = callmethodChecked(opresult4028, "++", [1], string4014);
                                                                          var opresult4032 = callmethodChecked(opresult4030, "++", [1], opresult4012);
                                                                          var opresult4034 = callmethodChecked(opresult4032, "++", [1], opresult3986);
                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4034)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method asString does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          return opresult4034;
                                                                        };
                                                                        func3971.paramCounts = [0];
                                                                        obj3876.methods["asString"] = func3971;
                                                                        func3971.definitionLine = 1714;
                                                                        func3971.definitionModule = "objectdraw";
                                                                        setLineNumber(1691);    // compilenode call
                                                                        var call4035 = callmethodChecked(superDepth, "outer", [0]);
                                                                        onOuter = true;
                                                                        onSelf = true;
                                                                        var call4036 = callmethodChecked(call4035, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                        obj3876.superobj = call4036;
                                                                        if (call4036.data) obj3876.data = call4036.data;
                                                                        if (call4036.hasOwnProperty('_value'))
                                                                            obj3876._value = call4036._value;
                                                                        setLineNumber(1692);    // compilenode identifier
                                                                        onSelf = true;
                                                                        var call4037 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                        superDepth = origSuperDepth;
                                                                      };
                                                                      obj_init_3876.apply(obj3876, []);
                                                                      setLineNumber(1684);    // return value
                                                                      if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj3876)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method framedArcAt(1)size(1)from(1)to(1)on(1) does not have " + 
                                                                                  callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                      return obj3876;
                                                                    };
                                                                    func3873.paramTypes = [];
                                                                    func3873.paramTypes.push([]);
                                                                    func3873.paramTypes.push([]);
                                                                    func3873.paramTypes.push([type_Number, "startAngle"]);
                                                                    func3873.paramTypes.push([type_Number, "endAngle"]);
                                                                    func3873.paramTypes.push([]);
                                                                    func3873.paramCounts = [1, 1, 1, 1, 1];
                                                                    this.methods["framedArcAt()size()from()to()on"] = func3873;
                                                                    func3873.definitionLine = 1684;
                                                                    func3873.definitionModule = "objectdraw";
                                                                      var func4038 = function(argcv) {    // method framedArcAt(1     )size(1     )from(1     )to(1     )on(1     )()object
                                                                        var curarg = 1;
                                                                        var var_location__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        var var_dimensions__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        var var_startAngle = arguments[curarg];
                                                                        curarg++;
                                                                        var var_endAngle = arguments[curarg];
                                                                        curarg++;
                                                                        var var_canvas__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        var inheritingObject = arguments[curarg++];
                                                                        // Start argument processing
                                                                        curarg = 1;
                                                                        onSelf = true;
                                                                        var call4039 = callmethodChecked(this, "Point", [0]);
                                                                        if (!Grace_isTrue(callmethod(call4039, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in framedArcAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                    callmethod(call4039, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        onSelf = true;
                                                                        var call4040 = callmethodChecked(this, "Point", [0]);
                                                                        if (!Grace_isTrue(callmethod(call4040, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                    callmethod(call4040, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        setLineNumber(1685);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in from (arg list 3), which corresponds to parameter startAngle, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in to (arg list 4), which corresponds to parameter endAngle, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        setLineNumber(1686);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in on (arg list 5), which corresponds to parameter canvas', does not have " + 
                                                                                    callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument processing
                                                                        setModuleName("objectdraw");
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var obj4041 = Grace_allocObject(null, "framedArcAt()size()from()to()on");
                                                                        obj4041.definitionModule = "objectdraw";
                                                                        obj4041.definitionLine = 1684;
                                                                        var inho4041 = inheritingObject;
                                                                        while (inho4041.superobj) inho4041 = inho4041.superobj;
                                                                        inho4041.superobj = obj4041;
                                                                        obj4041.data = inheritingObject.data;
                                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                                          obj4041._value = inheritingObject._value;
                                                                        obj4041.outer = this;
                                                                        var reader_objectdraw_outer4042 = function() {
                                                                          return this.outer;
                                                                        };
                                                                        obj4041.methods["outer"] = reader_objectdraw_outer4042;
                                                                        var obj_init_4041 = function() {
                                                                          var origSuperDepth = superDepth;
                                                                          superDepth = obj4041;
                                                                          var func4043 = function(argcv) {    // method draw(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_ctx = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            setLineNumber(1695);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                        callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("objectdraw");
                                                                            setLineNumber(1696);    // compilenode identifier
                                                                            var call4044 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                            setLineNumber(1697);    // compilenode identifier
                                                                            var call4045 = callmethodChecked(var_ctx, "save", [0]);
                                                                            setLineNumber(1698);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4047 = callmethodChecked(this, "width", [0]);
                                                                            var quotient4049 = callmethodChecked(call4047, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4051 = callmethodChecked(this, "x", [0]);
                                                                            var opresult4053 = callmethodChecked(call4051, "+", [1], quotient4049);
                                                                            onSelf = true;
                                                                            var call4055 = callmethodChecked(this, "height", [0]);
                                                                            var quotient4057 = callmethodChecked(call4055, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4059 = callmethodChecked(this, "y", [0]);
                                                                            var opresult4061 = callmethodChecked(call4059, "+", [1], quotient4057);
                                                                            var call4062 = callmethodChecked(var_ctx, "translate", [2], opresult4053, opresult4061);
                                                                            setLineNumber(1699);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4064 = callmethodChecked(this, "width", [0]);
                                                                            var quotient4066 = callmethodChecked(call4064, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4068 = callmethodChecked(this, "height", [0]);
                                                                            var quotient4070 = callmethodChecked(call4068, "/", [1], new GraceNum(2));
                                                                            var call4071 = callmethodChecked(var_ctx, "scale", [2], quotient4066, quotient4070);
                                                                            var if4072 = GraceDone;
                                                                            setLineNumber(1700);    // compilenode identifier
                                                                            var opresult4075 = callmethodChecked(var_startAngle, "\u2264", [1], var_endAngle);
                                                                            if (Grace_isTrue(opresult4075)) {
                                                                              setLineNumber(1701);    // compilenode identifier
                                                                              var prod4079 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                              var quotient4081 = callmethodChecked(prod4079, "/", [1], new GraceNum(180));
                                                                              var prod4085 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                              var quotient4087 = callmethodChecked(prod4085, "/", [1], new GraceNum(180));
                                                                              var call4088 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4081, quotient4087);
                                                                              if4072 = call4088;
                                                                            } else {
                                                                              setLineNumber(1703);    // compilenode identifier
                                                                              var prod4092 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                              var quotient4094 = callmethodChecked(prod4092, "/", [1], new GraceNum(180));
                                                                              var prod4098 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                              var quotient4100 = callmethodChecked(prod4098, "/", [1], new GraceNum(180));
                                                                              var call4101 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4094, quotient4100);
                                                                              if4072 = call4101;
                                                                            }
                                                                            setLineNumber(1705);    // compilenode identifier
                                                                            var call4102 = callmethodChecked(var_ctx, "restore", [0]);
                                                                            setLineNumber(1706);    // compilenode identifier
                                                                            var call4103 = callmethodChecked(var_ctx, "save", [0]);
                                                                            setLineNumber(1707);    // compilenode string
                                                                            var string4104 = new GraceString(")");
                                                                            onSelf = true;
                                                                            var call4106 = callmethodChecked(this, "color", [0]);
                                                                            var call4107 = callmethodChecked(call4106, "blue", [0]);
                                                                            var string4109 = new GraceString(", ");
                                                                            onSelf = true;
                                                                            var call4111 = callmethodChecked(this, "color", [0]);
                                                                            var call4112 = callmethodChecked(call4111, "green", [0]);
                                                                            var string4114 = new GraceString(", ");
                                                                            onSelf = true;
                                                                            var call4116 = callmethodChecked(this, "color", [0]);
                                                                            var call4117 = callmethodChecked(call4116, "red", [0]);
                                                                            var string4119 = new GraceString("rgb(");
                                                                            var opresult4121 = callmethodChecked(string4119, "++", [1], call4117);
                                                                            var opresult4123 = callmethodChecked(opresult4121, "++", [1], string4114);
                                                                            var opresult4125 = callmethodChecked(opresult4123, "++", [1], call4112);
                                                                            var opresult4127 = callmethodChecked(opresult4125, "++", [1], string4109);
                                                                            var opresult4129 = callmethodChecked(opresult4127, "++", [1], call4107);
                                                                            var opresult4131 = callmethodChecked(opresult4129, "++", [1], string4104);
                                                                            var call4132 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult4131);
                                                                            setLineNumber(1708);    // compilenode identifier
                                                                            var call4133 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                            setLineNumber(1709);    // compilenode identifier
                                                                            var call4134 = callmethodChecked(var_ctx, "restore", [0]);
                                                                            setLineNumber(1710);    // compilenode identifier
                                                                            var call4135 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4135)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method draw(1) does not have " + 
                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                            return call4135;
                                                                          };
                                                                          func4043.paramTypes = [];
                                                                          func4043.paramTypes.push([]);
                                                                          func4043.paramCounts = [1];
                                                                          obj4041.methods["draw"] = func4043;
                                                                          func4043.definitionLine = 1695;
                                                                          func4043.definitionModule = "objectdraw";
                                                                          var func4136 = function(argcv) {    // method asString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                            setModuleName("objectdraw");
                                                                            setLineNumber(1717);    // compilenode string
                                                                            var string4137 = new GraceString(" degrees");
                                                                            var string4140 = new GraceString(" degrees to ");
                                                                            var string4143 = new GraceString("from ");
                                                                            var opresult4145 = callmethodChecked(string4143, "++", [1], var_startAngle);
                                                                            var opresult4147 = callmethodChecked(opresult4145, "++", [1], string4140);
                                                                            var opresult4149 = callmethodChecked(opresult4147, "++", [1], var_endAngle);
                                                                            var opresult4151 = callmethodChecked(opresult4149, "++", [1], string4137);
                                                                            setLineNumber(1716);    // compilenode string
                                                                            var string4153 = new GraceString(" going ");
                                                                            onSelf = true;
                                                                            var call4155 = callmethodChecked(this, "color", [0]);
                                                                            var string4157 = new GraceString(", and color ");
                                                                            onSelf = true;
                                                                            var call4159 = callmethodChecked(this, "width", [0]);
                                                                            var string4161 = new GraceString(", width ");
                                                                            onSelf = true;
                                                                            var call4163 = callmethodChecked(this, "height", [0]);
                                                                            var string4165 = new GraceString("with height ");
                                                                            var opresult4167 = callmethodChecked(string4165, "++", [1], call4163);
                                                                            var opresult4169 = callmethodChecked(opresult4167, "++", [1], string4161);
                                                                            var opresult4171 = callmethodChecked(opresult4169, "++", [1], call4159);
                                                                            var opresult4173 = callmethodChecked(opresult4171, "++", [1], string4157);
                                                                            var opresult4175 = callmethodChecked(opresult4173, "++", [1], call4155);
                                                                            var opresult4177 = callmethodChecked(opresult4175, "++", [1], string4153);
                                                                            setLineNumber(1715);    // compilenode string
                                                                            var string4179 = new GraceString(") ");
                                                                            onSelf = true;
                                                                            var call4181 = callmethodChecked(this, "y", [0]);
                                                                            var string4183 = new GraceString(",");
                                                                            onSelf = true;
                                                                            var call4185 = callmethodChecked(this, "x", [0]);
                                                                            var string4187 = new GraceString("FramedArc at (");
                                                                            var opresult4189 = callmethodChecked(string4187, "++", [1], call4185);
                                                                            var opresult4191 = callmethodChecked(opresult4189, "++", [1], string4183);
                                                                            var opresult4193 = callmethodChecked(opresult4191, "++", [1], call4181);
                                                                            var opresult4195 = callmethodChecked(opresult4193, "++", [1], string4179);
                                                                            var opresult4197 = callmethodChecked(opresult4195, "++", [1], opresult4177);
                                                                            var opresult4199 = callmethodChecked(opresult4197, "++", [1], opresult4151);
                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4199)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method asString does not have " + 
                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                            return opresult4199;
                                                                          };
                                                                          func4136.paramCounts = [0];
                                                                          obj4041.methods["asString"] = func4136;
                                                                          func4136.definitionLine = 1714;
                                                                          func4136.definitionModule = "objectdraw";
                                                                          setLineNumber(1691);    // compilenode call
                                                                          var call4200 = callmethodChecked(superDepth, "outer", [0]);
                                                                          onOuter = true;
                                                                          onSelf = true;
                                                                          var call4201 = callmethodChecked(call4200, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                          obj4041.superobj = call4201;
                                                                          if (call4201.data) obj4041.data = call4201.data;
                                                                          if (call4201.hasOwnProperty('_value'))
                                                                              obj4041._value = call4201._value;
                                                                          setLineNumber(1692);    // compilenode identifier
                                                                          onSelf = true;
                                                                          var call4202 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                          superDepth = origSuperDepth;
                                                                        };
                                                                        obj_init_4041.apply(inheritingObject, []);
                                                                        return obj4041;
                                                                        };
                                                                        func4038.paramTypes = [];
                                                                        func4038.paramTypes.push([]);
                                                                        func4038.paramTypes.push([]);
                                                                        func4038.paramTypes.push([type_Number, "startAngle"]);
                                                                        func4038.paramTypes.push([type_Number, "endAngle"]);
                                                                        func4038.paramTypes.push([]);
                                                                        this.methods["framedArcAt()size()from()to()on()object"] = func4038;
                                                                      setLineNumber(1722);    // compilenode method
                                                                      var func4203 = function(argcv) {    // method filledArcAt(1)size(1)from(1)to(1)on(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_location__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for filledArcAt (arg list 1) of filledArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                        var var_dimensions__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[1] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of filledArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                        var var_startAngle = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[2] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 3) of filledArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                        var var_endAngle = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[3] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 4) of filledArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                        var var_canvas__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[4] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 5) of filledArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        onSelf = true;
                                                                        var call4204 = callmethodChecked(this, "Point", [0]);
                                                                        if (!Grace_isTrue(callmethod(call4204, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in filledArcAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                    callmethod(call4204, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        onSelf = true;
                                                                        var call4205 = callmethodChecked(this, "Point", [0]);
                                                                        if (!Grace_isTrue(callmethod(call4205, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                    callmethod(call4205, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        setLineNumber(1723);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in from (arg list 3), which corresponds to parameter startAngle, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in to (arg list 4), which corresponds to parameter endAngle, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        setLineNumber(1724);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in on (arg list 5), which corresponds to parameter canvas', does not have " + 
                                                                                    callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("objectdraw");
                                                                        setLineNumber(1722);    // compilenode object
                                                                        var obj4206 = Grace_allocObject(null, "objectdraw.filledArcAt()size()from()to()on");
                                                                        obj4206.definitionModule = "objectdraw";
                                                                        obj4206.definitionLine = 1722;
                                                                        obj4206.outer = this;
                                                                        var reader_objectdraw_outer4207 = function() {
                                                                          return this.outer;
                                                                        };
                                                                        obj4206.methods["outer"] = reader_objectdraw_outer4207;
                                                                        var obj_init_4206 = function() {
                                                                          var origSuperDepth = superDepth;
                                                                          superDepth = obj4206;
                                                                          var func4208 = function(argcv) {    // method draw(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_ctx = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            setLineNumber(1734);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                        callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("objectdraw");
                                                                            setLineNumber(1735);    // compilenode identifier
                                                                            var call4209 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                            setLineNumber(1736);    // compilenode identifier
                                                                            var call4210 = callmethodChecked(var_ctx, "save", [0]);
                                                                            setLineNumber(1737);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4212 = callmethodChecked(this, "width", [0]);
                                                                            var quotient4214 = callmethodChecked(call4212, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4216 = callmethodChecked(this, "x", [0]);
                                                                            var opresult4218 = callmethodChecked(call4216, "+", [1], quotient4214);
                                                                            onSelf = true;
                                                                            var call4220 = callmethodChecked(this, "height", [0]);
                                                                            var quotient4222 = callmethodChecked(call4220, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4224 = callmethodChecked(this, "y", [0]);
                                                                            var opresult4226 = callmethodChecked(call4224, "+", [1], quotient4222);
                                                                            var call4227 = callmethodChecked(var_ctx, "translate", [2], opresult4218, opresult4226);
                                                                            setLineNumber(1738);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4229 = callmethodChecked(this, "width", [0]);
                                                                            var quotient4231 = callmethodChecked(call4229, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4233 = callmethodChecked(this, "height", [0]);
                                                                            var quotient4235 = callmethodChecked(call4233, "/", [1], new GraceNum(2));
                                                                            var call4236 = callmethodChecked(var_ctx, "scale", [2], quotient4231, quotient4235);
                                                                            var if4237 = GraceDone;
                                                                            setLineNumber(1739);    // compilenode identifier
                                                                            var opresult4240 = callmethodChecked(var_startAngle, "\u2264", [1], var_endAngle);
                                                                            if (Grace_isTrue(opresult4240)) {
                                                                              setLineNumber(1740);    // compilenode identifier
                                                                              var prod4244 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                              var quotient4246 = callmethodChecked(prod4244, "/", [1], new GraceNum(180));
                                                                              var prod4250 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                              var quotient4252 = callmethodChecked(prod4250, "/", [1], new GraceNum(180));
                                                                              var call4253 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4246, quotient4252);
                                                                              if4237 = call4253;
                                                                            } else {
                                                                              setLineNumber(1742);    // compilenode identifier
                                                                              var prod4257 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                              var quotient4259 = callmethodChecked(prod4257, "/", [1], new GraceNum(180));
                                                                              var prod4263 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                              var quotient4265 = callmethodChecked(prod4263, "/", [1], new GraceNum(180));
                                                                              var call4266 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4259, quotient4265);
                                                                              if4237 = call4266;
                                                                            }
                                                                            setLineNumber(1744);    // compilenode identifier
                                                                            var call4267 = callmethodChecked(var_ctx, "restore", [0]);
                                                                            setLineNumber(1745);    // compilenode identifier
                                                                            var call4268 = callmethodChecked(var_ctx, "save", [0]);
                                                                            setLineNumber(1746);    // compilenode string
                                                                            var string4269 = new GraceString(")");
                                                                            onSelf = true;
                                                                            var call4271 = callmethodChecked(this, "color", [0]);
                                                                            var call4272 = callmethodChecked(call4271, "blue", [0]);
                                                                            var string4274 = new GraceString(", ");
                                                                            onSelf = true;
                                                                            var call4276 = callmethodChecked(this, "color", [0]);
                                                                            var call4277 = callmethodChecked(call4276, "green", [0]);
                                                                            var string4279 = new GraceString(", ");
                                                                            onSelf = true;
                                                                            var call4281 = callmethodChecked(this, "color", [0]);
                                                                            var call4282 = callmethodChecked(call4281, "red", [0]);
                                                                            var string4284 = new GraceString("rgb(");
                                                                            var opresult4286 = callmethodChecked(string4284, "++", [1], call4282);
                                                                            var opresult4288 = callmethodChecked(opresult4286, "++", [1], string4279);
                                                                            var opresult4290 = callmethodChecked(opresult4288, "++", [1], call4277);
                                                                            var opresult4292 = callmethodChecked(opresult4290, "++", [1], string4274);
                                                                            var opresult4294 = callmethodChecked(opresult4292, "++", [1], call4272);
                                                                            var opresult4296 = callmethodChecked(opresult4294, "++", [1], string4269);
                                                                            var call4297 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult4296);
                                                                            setLineNumber(1747);    // compilenode identifier
                                                                            var call4298 = callmethodChecked(var_ctx, "fill", [0]);
                                                                            setLineNumber(1748);    // compilenode identifier
                                                                            var call4299 = callmethodChecked(var_ctx, "save", [0]);
                                                                            setLineNumber(1749);    // compilenode identifier
                                                                            var call4300 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4300)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method draw(1) does not have " + 
                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                            return call4300;
                                                                          };
                                                                          func4208.paramTypes = [];
                                                                          func4208.paramTypes.push([]);
                                                                          func4208.paramCounts = [1];
                                                                          obj4206.methods["draw"] = func4208;
                                                                          func4208.definitionLine = 1734;
                                                                          func4208.definitionModule = "objectdraw";
                                                                          var func4301 = function(argcv) {    // method asString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                            setModuleName("objectdraw");
                                                                            setLineNumber(1756);    // compilenode string
                                                                            var string4302 = new GraceString(" degrees");
                                                                            var string4305 = new GraceString(" degrees to ");
                                                                            var string4308 = new GraceString("from ");
                                                                            var opresult4310 = callmethodChecked(string4308, "++", [1], var_startAngle);
                                                                            var opresult4312 = callmethodChecked(opresult4310, "++", [1], string4305);
                                                                            var opresult4314 = callmethodChecked(opresult4312, "++", [1], var_endAngle);
                                                                            var opresult4316 = callmethodChecked(opresult4314, "++", [1], string4302);
                                                                            setLineNumber(1755);    // compilenode string
                                                                            var string4318 = new GraceString(" going ");
                                                                            onSelf = true;
                                                                            var call4320 = callmethodChecked(this, "color", [0]);
                                                                            var string4322 = new GraceString(", and color ");
                                                                            onSelf = true;
                                                                            var call4324 = callmethodChecked(this, "width", [0]);
                                                                            var string4326 = new GraceString(", width ");
                                                                            onSelf = true;
                                                                            var call4328 = callmethodChecked(this, "height", [0]);
                                                                            var string4330 = new GraceString("with height ");
                                                                            var opresult4332 = callmethodChecked(string4330, "++", [1], call4328);
                                                                            var opresult4334 = callmethodChecked(opresult4332, "++", [1], string4326);
                                                                            var opresult4336 = callmethodChecked(opresult4334, "++", [1], call4324);
                                                                            var opresult4338 = callmethodChecked(opresult4336, "++", [1], string4322);
                                                                            var opresult4340 = callmethodChecked(opresult4338, "++", [1], call4320);
                                                                            var opresult4342 = callmethodChecked(opresult4340, "++", [1], string4318);
                                                                            setLineNumber(1754);    // compilenode string
                                                                            var string4344 = new GraceString(") ");
                                                                            onSelf = true;
                                                                            var call4346 = callmethodChecked(this, "y", [0]);
                                                                            var string4348 = new GraceString(",");
                                                                            onSelf = true;
                                                                            var call4350 = callmethodChecked(this, "x", [0]);
                                                                            var string4352 = new GraceString("FilledArc at (");
                                                                            var opresult4354 = callmethodChecked(string4352, "++", [1], call4350);
                                                                            var opresult4356 = callmethodChecked(opresult4354, "++", [1], string4348);
                                                                            var opresult4358 = callmethodChecked(opresult4356, "++", [1], call4346);
                                                                            var opresult4360 = callmethodChecked(opresult4358, "++", [1], string4344);
                                                                            var opresult4362 = callmethodChecked(opresult4360, "++", [1], opresult4342);
                                                                            var opresult4364 = callmethodChecked(opresult4362, "++", [1], opresult4316);
                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4364)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method asString does not have " + 
                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                            return opresult4364;
                                                                          };
                                                                          func4301.paramCounts = [0];
                                                                          obj4206.methods["asString"] = func4301;
                                                                          func4301.definitionLine = 1753;
                                                                          func4301.definitionModule = "objectdraw";
                                                                          setLineNumber(1730);    // compilenode call
                                                                          var call4365 = callmethodChecked(superDepth, "outer", [0]);
                                                                          onOuter = true;
                                                                          onSelf = true;
                                                                          var call4366 = callmethodChecked(call4365, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                          obj4206.superobj = call4366;
                                                                          if (call4366.data) obj4206.data = call4366.data;
                                                                          if (call4366.hasOwnProperty('_value'))
                                                                              obj4206._value = call4366._value;
                                                                          setLineNumber(1731);    // compilenode identifier
                                                                          onSelf = true;
                                                                          var call4367 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                          superDepth = origSuperDepth;
                                                                        };
                                                                        obj_init_4206.apply(obj4206, []);
                                                                        setLineNumber(1722);    // return value
                                                                        if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj4206)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method filledArcAt(1)size(1)from(1)to(1)on(1) does not have " + 
                                                                                    callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                        return obj4206;
                                                                      };
                                                                      func4203.paramTypes = [];
                                                                      func4203.paramTypes.push([]);
                                                                      func4203.paramTypes.push([]);
                                                                      func4203.paramTypes.push([type_Number, "startAngle"]);
                                                                      func4203.paramTypes.push([type_Number, "endAngle"]);
                                                                      func4203.paramTypes.push([]);
                                                                      func4203.paramCounts = [1, 1, 1, 1, 1];
                                                                      this.methods["filledArcAt()size()from()to()on"] = func4203;
                                                                      func4203.definitionLine = 1722;
                                                                      func4203.definitionModule = "objectdraw";
                                                                        var func4368 = function(argcv) {    // method filledArcAt(1     )size(1     )from(1     )to(1     )on(1     )()object
                                                                          var curarg = 1;
                                                                          var var_location__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          var var_dimensions__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          var var_startAngle = arguments[curarg];
                                                                          curarg++;
                                                                          var var_endAngle = arguments[curarg];
                                                                          curarg++;
                                                                          var var_canvas__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          var inheritingObject = arguments[curarg++];
                                                                          // Start argument processing
                                                                          curarg = 1;
                                                                          onSelf = true;
                                                                          var call4369 = callmethodChecked(this, "Point", [0]);
                                                                          if (!Grace_isTrue(callmethod(call4369, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in filledArcAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                      callmethod(call4369, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          onSelf = true;
                                                                          var call4370 = callmethodChecked(this, "Point", [0]);
                                                                          if (!Grace_isTrue(callmethod(call4370, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                      callmethod(call4370, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          setLineNumber(1723);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in from (arg list 3), which corresponds to parameter startAngle, does not have " + 
                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in to (arg list 4), which corresponds to parameter endAngle, does not have " + 
                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          setLineNumber(1724);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in on (arg list 5), which corresponds to parameter canvas', does not have " + 
                                                                                      callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument processing
                                                                          setModuleName("objectdraw");
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var obj4371 = Grace_allocObject(null, "filledArcAt()size()from()to()on");
                                                                          obj4371.definitionModule = "objectdraw";
                                                                          obj4371.definitionLine = 1722;
                                                                          var inho4371 = inheritingObject;
                                                                          while (inho4371.superobj) inho4371 = inho4371.superobj;
                                                                          inho4371.superobj = obj4371;
                                                                          obj4371.data = inheritingObject.data;
                                                                          if (inheritingObject.hasOwnProperty('_value'))
                                                                            obj4371._value = inheritingObject._value;
                                                                          obj4371.outer = this;
                                                                          var reader_objectdraw_outer4372 = function() {
                                                                            return this.outer;
                                                                          };
                                                                          obj4371.methods["outer"] = reader_objectdraw_outer4372;
                                                                          var obj_init_4371 = function() {
                                                                            var origSuperDepth = superDepth;
                                                                            superDepth = obj4371;
                                                                            var func4373 = function(argcv) {    // method draw(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_ctx = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                              // Start argument checking
                                                                              curarg = 1;
                                                                              setLineNumber(1734);    // compilenode identifier
                                                                              if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                          callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              // End argument checking
                                                                              setModuleName("objectdraw");
                                                                              setLineNumber(1735);    // compilenode identifier
                                                                              var call4374 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                              setLineNumber(1736);    // compilenode identifier
                                                                              var call4375 = callmethodChecked(var_ctx, "save", [0]);
                                                                              setLineNumber(1737);    // compilenode call
                                                                              onSelf = true;
                                                                              var call4377 = callmethodChecked(this, "width", [0]);
                                                                              var quotient4379 = callmethodChecked(call4377, "/", [1], new GraceNum(2));
                                                                              onSelf = true;
                                                                              var call4381 = callmethodChecked(this, "x", [0]);
                                                                              var opresult4383 = callmethodChecked(call4381, "+", [1], quotient4379);
                                                                              onSelf = true;
                                                                              var call4385 = callmethodChecked(this, "height", [0]);
                                                                              var quotient4387 = callmethodChecked(call4385, "/", [1], new GraceNum(2));
                                                                              onSelf = true;
                                                                              var call4389 = callmethodChecked(this, "y", [0]);
                                                                              var opresult4391 = callmethodChecked(call4389, "+", [1], quotient4387);
                                                                              var call4392 = callmethodChecked(var_ctx, "translate", [2], opresult4383, opresult4391);
                                                                              setLineNumber(1738);    // compilenode call
                                                                              onSelf = true;
                                                                              var call4394 = callmethodChecked(this, "width", [0]);
                                                                              var quotient4396 = callmethodChecked(call4394, "/", [1], new GraceNum(2));
                                                                              onSelf = true;
                                                                              var call4398 = callmethodChecked(this, "height", [0]);
                                                                              var quotient4400 = callmethodChecked(call4398, "/", [1], new GraceNum(2));
                                                                              var call4401 = callmethodChecked(var_ctx, "scale", [2], quotient4396, quotient4400);
                                                                              var if4402 = GraceDone;
                                                                              setLineNumber(1739);    // compilenode identifier
                                                                              var opresult4405 = callmethodChecked(var_startAngle, "\u2264", [1], var_endAngle);
                                                                              if (Grace_isTrue(opresult4405)) {
                                                                                setLineNumber(1740);    // compilenode identifier
                                                                                var prod4409 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                                var quotient4411 = callmethodChecked(prod4409, "/", [1], new GraceNum(180));
                                                                                var prod4415 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                                var quotient4417 = callmethodChecked(prod4415, "/", [1], new GraceNum(180));
                                                                                var call4418 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4411, quotient4417);
                                                                                if4402 = call4418;
                                                                              } else {
                                                                                setLineNumber(1742);    // compilenode identifier
                                                                                var prod4422 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                                var quotient4424 = callmethodChecked(prod4422, "/", [1], new GraceNum(180));
                                                                                var prod4428 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                                var quotient4430 = callmethodChecked(prod4428, "/", [1], new GraceNum(180));
                                                                                var call4431 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4424, quotient4430);
                                                                                if4402 = call4431;
                                                                              }
                                                                              setLineNumber(1744);    // compilenode identifier
                                                                              var call4432 = callmethodChecked(var_ctx, "restore", [0]);
                                                                              setLineNumber(1745);    // compilenode identifier
                                                                              var call4433 = callmethodChecked(var_ctx, "save", [0]);
                                                                              setLineNumber(1746);    // compilenode string
                                                                              var string4434 = new GraceString(")");
                                                                              onSelf = true;
                                                                              var call4436 = callmethodChecked(this, "color", [0]);
                                                                              var call4437 = callmethodChecked(call4436, "blue", [0]);
                                                                              var string4439 = new GraceString(", ");
                                                                              onSelf = true;
                                                                              var call4441 = callmethodChecked(this, "color", [0]);
                                                                              var call4442 = callmethodChecked(call4441, "green", [0]);
                                                                              var string4444 = new GraceString(", ");
                                                                              onSelf = true;
                                                                              var call4446 = callmethodChecked(this, "color", [0]);
                                                                              var call4447 = callmethodChecked(call4446, "red", [0]);
                                                                              var string4449 = new GraceString("rgb(");
                                                                              var opresult4451 = callmethodChecked(string4449, "++", [1], call4447);
                                                                              var opresult4453 = callmethodChecked(opresult4451, "++", [1], string4444);
                                                                              var opresult4455 = callmethodChecked(opresult4453, "++", [1], call4442);
                                                                              var opresult4457 = callmethodChecked(opresult4455, "++", [1], string4439);
                                                                              var opresult4459 = callmethodChecked(opresult4457, "++", [1], call4437);
                                                                              var opresult4461 = callmethodChecked(opresult4459, "++", [1], string4434);
                                                                              var call4462 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult4461);
                                                                              setLineNumber(1747);    // compilenode identifier
                                                                              var call4463 = callmethodChecked(var_ctx, "fill", [0]);
                                                                              setLineNumber(1748);    // compilenode identifier
                                                                              var call4464 = callmethodChecked(var_ctx, "save", [0]);
                                                                              setLineNumber(1749);    // compilenode identifier
                                                                              var call4465 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4465)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("result of method draw(1) does not have " + 
                                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                                              return call4465;
                                                                            };
                                                                            func4373.paramTypes = [];
                                                                            func4373.paramTypes.push([]);
                                                                            func4373.paramCounts = [1];
                                                                            obj4371.methods["draw"] = func4373;
                                                                            func4373.definitionLine = 1734;
                                                                            func4373.definitionModule = "objectdraw";
                                                                            var func4466 = function(argcv) {    // method asString
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              if (argcv[0] !== 0)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                              setModuleName("objectdraw");
                                                                              setLineNumber(1756);    // compilenode string
                                                                              var string4467 = new GraceString(" degrees");
                                                                              var string4470 = new GraceString(" degrees to ");
                                                                              var string4473 = new GraceString("from ");
                                                                              var opresult4475 = callmethodChecked(string4473, "++", [1], var_startAngle);
                                                                              var opresult4477 = callmethodChecked(opresult4475, "++", [1], string4470);
                                                                              var opresult4479 = callmethodChecked(opresult4477, "++", [1], var_endAngle);
                                                                              var opresult4481 = callmethodChecked(opresult4479, "++", [1], string4467);
                                                                              setLineNumber(1755);    // compilenode string
                                                                              var string4483 = new GraceString(" going ");
                                                                              onSelf = true;
                                                                              var call4485 = callmethodChecked(this, "color", [0]);
                                                                              var string4487 = new GraceString(", and color ");
                                                                              onSelf = true;
                                                                              var call4489 = callmethodChecked(this, "width", [0]);
                                                                              var string4491 = new GraceString(", width ");
                                                                              onSelf = true;
                                                                              var call4493 = callmethodChecked(this, "height", [0]);
                                                                              var string4495 = new GraceString("with height ");
                                                                              var opresult4497 = callmethodChecked(string4495, "++", [1], call4493);
                                                                              var opresult4499 = callmethodChecked(opresult4497, "++", [1], string4491);
                                                                              var opresult4501 = callmethodChecked(opresult4499, "++", [1], call4489);
                                                                              var opresult4503 = callmethodChecked(opresult4501, "++", [1], string4487);
                                                                              var opresult4505 = callmethodChecked(opresult4503, "++", [1], call4485);
                                                                              var opresult4507 = callmethodChecked(opresult4505, "++", [1], string4483);
                                                                              setLineNumber(1754);    // compilenode string
                                                                              var string4509 = new GraceString(") ");
                                                                              onSelf = true;
                                                                              var call4511 = callmethodChecked(this, "y", [0]);
                                                                              var string4513 = new GraceString(",");
                                                                              onSelf = true;
                                                                              var call4515 = callmethodChecked(this, "x", [0]);
                                                                              var string4517 = new GraceString("FilledArc at (");
                                                                              var opresult4519 = callmethodChecked(string4517, "++", [1], call4515);
                                                                              var opresult4521 = callmethodChecked(opresult4519, "++", [1], string4513);
                                                                              var opresult4523 = callmethodChecked(opresult4521, "++", [1], call4511);
                                                                              var opresult4525 = callmethodChecked(opresult4523, "++", [1], string4509);
                                                                              var opresult4527 = callmethodChecked(opresult4525, "++", [1], opresult4507);
                                                                              var opresult4529 = callmethodChecked(opresult4527, "++", [1], opresult4481);
                                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4529)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("result of method asString does not have " + 
                                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                                              return opresult4529;
                                                                            };
                                                                            func4466.paramCounts = [0];
                                                                            obj4371.methods["asString"] = func4466;
                                                                            func4466.definitionLine = 1753;
                                                                            func4466.definitionModule = "objectdraw";
                                                                            setLineNumber(1730);    // compilenode call
                                                                            var call4530 = callmethodChecked(superDepth, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call4531 = callmethodChecked(call4530, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                            obj4371.superobj = call4531;
                                                                            if (call4531.data) obj4371.data = call4531.data;
                                                                            if (call4531.hasOwnProperty('_value'))
                                                                                obj4371._value = call4531._value;
                                                                            setLineNumber(1731);    // compilenode identifier
                                                                            onSelf = true;
                                                                            var call4532 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_4371.apply(inheritingObject, []);
                                                                          return obj4371;
                                                                          };
                                                                          func4368.paramTypes = [];
                                                                          func4368.paramTypes.push([]);
                                                                          func4368.paramTypes.push([]);
                                                                          func4368.paramTypes.push([type_Number, "startAngle"]);
                                                                          func4368.paramTypes.push([type_Number, "endAngle"]);
                                                                          func4368.paramTypes.push([]);
                                                                          this.methods["filledArcAt()size()from()to()on()object"] = func4368;
                                                                        setLineNumber(1803);    // compilenode method
                                                                        var func4533 = function(argcv) {    // method drawableImageAt(1)size(1)url(1)on(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_location__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for drawableImageAt (arg list 1) of drawableImageAt(1)size(1)url(1)on(1)"));
                                                                          var var_dimensions__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[1] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of drawableImageAt(1)size(1)url(1)on(1)"));
                                                                          var var_url = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[2] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for url (arg list 3) of drawableImageAt(1)size(1)url(1)on(1)"));
                                                                          var var_canvas__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[3] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 4) of drawableImageAt(1)size(1)url(1)on(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          onSelf = true;
                                                                          var call4534 = callmethodChecked(this, "Point", [0]);
                                                                          if (!Grace_isTrue(callmethod(call4534, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in drawableImageAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                      callmethod(call4534, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          setLineNumber(1804);    // compilenode call
                                                                          onSelf = true;
                                                                          var call4535 = callmethodChecked(this, "Point", [0]);
                                                                          if (!Grace_isTrue(callmethod(call4535, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                      callmethod(call4535, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          setLineNumber(1805);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in url (arg list 3), which corresponds to parameter url, does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          setLineNumber(1806);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in on (arg list 4), which corresponds to parameter canvas', does not have " + 
                                                                                      callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("objectdraw");
                                                                          setLineNumber(1803);    // compilenode object
                                                                          var obj4536 = Grace_allocObject(null, "objectdraw.drawableImageAt()size()url()on");
                                                                          obj4536.definitionModule = "objectdraw";
                                                                          obj4536.definitionLine = 1803;
                                                                          obj4536.outer = this;
                                                                          var reader_objectdraw_outer4537 = function() {
                                                                            return this.outer;
                                                                          };
                                                                          obj4536.methods["outer"] = reader_objectdraw_outer4537;
                                                                          var obj_init_4536 = function() {
                                                                            var origSuperDepth = superDepth;
                                                                            superDepth = obj4536;
                                                                            var func4538 = function(argcv) {    // method draw(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_ctx = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                              // Start argument checking
                                                                              curarg = 1;
                                                                              setLineNumber(1820);    // compilenode identifier
                                                                              if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                          callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              // End argument checking
                                                                              setModuleName("objectdraw");
                                                                              setLineNumber(1821);    // compilenode call
                                                                              onSelf = true;
                                                                              var call4539 = callmethodChecked(this, "theImage", [0]);
                                                                              onSelf = true;
                                                                              var call4540 = callmethodChecked(this, "x", [0]);
                                                                              onSelf = true;
                                                                              var call4541 = callmethodChecked(this, "y", [0]);
                                                                              onSelf = true;
                                                                              var call4542 = callmethodChecked(this, "width", [0]);
                                                                              onSelf = true;
                                                                              var call4543 = callmethodChecked(this, "height", [0]);
                                                                              var call4544 = callmethodChecked(var_ctx, "drawImage", [5], call4539, call4540, call4541, call4542, call4543);
                                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4544)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("result of method draw(1) does not have " + 
                                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                                              return call4544;
                                                                            };
                                                                            func4538.paramTypes = [];
                                                                            func4538.paramTypes.push([]);
                                                                            func4538.paramCounts = [1];
                                                                            obj4536.methods["draw"] = func4538;
                                                                            func4538.definitionLine = 1820;
                                                                            func4538.definitionModule = "objectdraw";
                                                                            var func4545 = function(argcv) {    // method asString
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              if (argcv[0] !== 0)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                              setModuleName("objectdraw");
                                                                              setLineNumber(1828);    // compilenode string
                                                                              var string4546 = new GraceString("");
                                                                              var string4549 = new GraceString("from url ");
                                                                              var opresult4551 = callmethodChecked(string4549, "++", [1], var_url);
                                                                              var opresult4553 = callmethodChecked(opresult4551, "++", [1], string4546);
                                                                              setLineNumber(1827);    // compilenode string
                                                                              var string4555 = new GraceString(", ");
                                                                              onSelf = true;
                                                                              var call4557 = callmethodChecked(this, "width", [0]);
                                                                              var string4559 = new GraceString(", width ");
                                                                              onSelf = true;
                                                                              var call4561 = callmethodChecked(this, "height", [0]);
                                                                              var string4563 = new GraceString("with height ");
                                                                              var opresult4565 = callmethodChecked(string4563, "++", [1], call4561);
                                                                              var opresult4567 = callmethodChecked(opresult4565, "++", [1], string4559);
                                                                              var opresult4569 = callmethodChecked(opresult4567, "++", [1], call4557);
                                                                              var opresult4571 = callmethodChecked(opresult4569, "++", [1], string4555);
                                                                              setLineNumber(1826);    // compilenode string
                                                                              var string4573 = new GraceString(") ");
                                                                              onSelf = true;
                                                                              var call4575 = callmethodChecked(this, "y", [0]);
                                                                              var string4577 = new GraceString(",");
                                                                              onSelf = true;
                                                                              var call4579 = callmethodChecked(this, "x", [0]);
                                                                              var string4581 = new GraceString("DrawableImage at (");
                                                                              var opresult4583 = callmethodChecked(string4581, "++", [1], call4579);
                                                                              var opresult4585 = callmethodChecked(opresult4583, "++", [1], string4577);
                                                                              var opresult4587 = callmethodChecked(opresult4585, "++", [1], call4575);
                                                                              var opresult4589 = callmethodChecked(opresult4587, "++", [1], string4573);
                                                                              var opresult4591 = callmethodChecked(opresult4589, "++", [1], opresult4571);
                                                                              var opresult4593 = callmethodChecked(opresult4591, "++", [1], opresult4553);
                                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4593)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("result of method asString does not have " + 
                                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                                              return opresult4593;
                                                                            };
                                                                            func4545.paramCounts = [0];
                                                                            obj4536.methods["asString"] = func4545;
                                                                            func4545.definitionLine = 1825;
                                                                            func4545.definitionModule = "objectdraw";
                                                                            setLineNumber(1810);    // compilenode call
                                                                            var call4594 = callmethodChecked(superDepth, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call4595 = callmethodChecked(call4594, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                            obj4536.superobj = call4595;
                                                                            if (call4595.data) obj4536.data = call4595.data;
                                                                            if (call4595.hasOwnProperty('_value'))
                                                                                obj4536._value = call4595._value;
                                                                            setLineNumber(1812);    // compilenode string
                                                                            var string4596 = new GraceString("img");
                                                                            var call4597 = callmethodChecked(var_document, "createElement", [1], string4596);
                                                                            obj4536.data["theImage"] = call4597;
                                                                            var reader_objectdraw_theImage4598 = function() {
                                                                              return this.data["theImage"];
                                                                            };
                                                                            obj4536.methods["theImage"] = reader_objectdraw_theImage4598;
                                                                            obj4536.data["theImage"] = call4597;
                                                                            var writer_objectdraw_theImage4598 = function(argcv, o) {
                                                                              this.data["theImage"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj4536.methods["theImage:="] = writer_objectdraw_theImage4598;
                                                                            reader_objectdraw_theImage4598.confidential = true;
                                                                            writer_objectdraw_theImage4598.confidential = true;
                                                                            obj4536.mutable = true;
                                                                            setLineNumber(1813);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4599 = callmethodChecked(this, "theImage", [0]);
                                                                            var call4600 = callmethodChecked(call4599, "src:=", [1], var_url);
                                                                            setLineNumber(1815);    // compilenode string
                                                                            var string4601 = new GraceString("load");
                                                                            var block4602 = new GraceBlock(this, 1815, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block4602.real = function(var___95____95__23) {
                                                                              setLineNumber(1816);    // compilenode identifier
                                                                              onSelf = true;
                                                                              var call4603 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                              return call4603;
                                                                            };
                                                                            setLineNumber(1815);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4604 = callmethodChecked(this, "theImage", [0]);
                                                                            var call4605 = callmethodChecked(call4604, "addEventListener", [2], string4601, block4602);
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_4536.apply(obj4536, []);
                                                                          setLineNumber(1803);    // return value
                                                                          if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj4536)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method drawableImageAt(1)size(1)url(1)on(1) does not have " + 
                                                                                      callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                          return obj4536;
                                                                        };
                                                                        func4533.paramTypes = [];
                                                                        func4533.paramTypes.push([]);
                                                                        func4533.paramTypes.push([]);
                                                                        func4533.paramTypes.push([type_String, "url"]);
                                                                        func4533.paramTypes.push([]);
                                                                        func4533.paramCounts = [1, 1, 1, 1];
                                                                        this.methods["drawableImageAt()size()url()on"] = func4533;
                                                                        func4533.definitionLine = 1803;
                                                                        func4533.definitionModule = "objectdraw";
                                                                          var func4606 = function(argcv) {    // method drawableImageAt(1     )size(1     )url(1     )on(1     )()object
                                                                            var curarg = 1;
                                                                            var var_location__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            var var_dimensions__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            var var_url = arguments[curarg];
                                                                            curarg++;
                                                                            var var_canvas__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            var inheritingObject = arguments[curarg++];
                                                                            // Start argument processing
                                                                            curarg = 1;
                                                                            onSelf = true;
                                                                            var call4607 = callmethodChecked(this, "Point", [0]);
                                                                            if (!Grace_isTrue(callmethod(call4607, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in drawableImageAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                        callmethod(call4607, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            setLineNumber(1804);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4608 = callmethodChecked(this, "Point", [0]);
                                                                            if (!Grace_isTrue(callmethod(call4608, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                        callmethod(call4608, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            setLineNumber(1805);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in url (arg list 3), which corresponds to parameter url, does not have " + 
                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            setLineNumber(1806);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in on (arg list 4), which corresponds to parameter canvas', does not have " + 
                                                                                        callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            // End argument processing
                                                                            setModuleName("objectdraw");
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var obj4609 = Grace_allocObject(null, "drawableImageAt()size()url()on");
                                                                            obj4609.definitionModule = "objectdraw";
                                                                            obj4609.definitionLine = 1803;
                                                                            var inho4609 = inheritingObject;
                                                                            while (inho4609.superobj) inho4609 = inho4609.superobj;
                                                                            inho4609.superobj = obj4609;
                                                                            obj4609.data = inheritingObject.data;
                                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                                              obj4609._value = inheritingObject._value;
                                                                            obj4609.outer = this;
                                                                            var reader_objectdraw_outer4610 = function() {
                                                                              return this.outer;
                                                                            };
                                                                            obj4609.methods["outer"] = reader_objectdraw_outer4610;
                                                                            var obj_init_4609 = function() {
                                                                              var origSuperDepth = superDepth;
                                                                              superDepth = obj4609;
                                                                              var func4611 = function(argcv) {    // method draw(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_ctx = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1820);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                            callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1821);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4612 = callmethodChecked(this, "theImage", [0]);
                                                                                onSelf = true;
                                                                                var call4613 = callmethodChecked(this, "x", [0]);
                                                                                onSelf = true;
                                                                                var call4614 = callmethodChecked(this, "y", [0]);
                                                                                onSelf = true;
                                                                                var call4615 = callmethodChecked(this, "width", [0]);
                                                                                onSelf = true;
                                                                                var call4616 = callmethodChecked(this, "height", [0]);
                                                                                var call4617 = callmethodChecked(var_ctx, "drawImage", [5], call4612, call4613, call4614, call4615, call4616);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4617)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method draw(1) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4617;
                                                                              };
                                                                              func4611.paramTypes = [];
                                                                              func4611.paramTypes.push([]);
                                                                              func4611.paramCounts = [1];
                                                                              obj4609.methods["draw"] = func4611;
                                                                              func4611.definitionLine = 1820;
                                                                              func4611.definitionModule = "objectdraw";
                                                                              var func4618 = function(argcv) {    // method asString
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1828);    // compilenode string
                                                                                var string4619 = new GraceString("");
                                                                                var string4622 = new GraceString("from url ");
                                                                                var opresult4624 = callmethodChecked(string4622, "++", [1], var_url);
                                                                                var opresult4626 = callmethodChecked(opresult4624, "++", [1], string4619);
                                                                                setLineNumber(1827);    // compilenode string
                                                                                var string4628 = new GraceString(", ");
                                                                                onSelf = true;
                                                                                var call4630 = callmethodChecked(this, "width", [0]);
                                                                                var string4632 = new GraceString(", width ");
                                                                                onSelf = true;
                                                                                var call4634 = callmethodChecked(this, "height", [0]);
                                                                                var string4636 = new GraceString("with height ");
                                                                                var opresult4638 = callmethodChecked(string4636, "++", [1], call4634);
                                                                                var opresult4640 = callmethodChecked(opresult4638, "++", [1], string4632);
                                                                                var opresult4642 = callmethodChecked(opresult4640, "++", [1], call4630);
                                                                                var opresult4644 = callmethodChecked(opresult4642, "++", [1], string4628);
                                                                                setLineNumber(1826);    // compilenode string
                                                                                var string4646 = new GraceString(") ");
                                                                                onSelf = true;
                                                                                var call4648 = callmethodChecked(this, "y", [0]);
                                                                                var string4650 = new GraceString(",");
                                                                                onSelf = true;
                                                                                var call4652 = callmethodChecked(this, "x", [0]);
                                                                                var string4654 = new GraceString("DrawableImage at (");
                                                                                var opresult4656 = callmethodChecked(string4654, "++", [1], call4652);
                                                                                var opresult4658 = callmethodChecked(opresult4656, "++", [1], string4650);
                                                                                var opresult4660 = callmethodChecked(opresult4658, "++", [1], call4648);
                                                                                var opresult4662 = callmethodChecked(opresult4660, "++", [1], string4646);
                                                                                var opresult4664 = callmethodChecked(opresult4662, "++", [1], opresult4644);
                                                                                var opresult4666 = callmethodChecked(opresult4664, "++", [1], opresult4626);
                                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4666)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method asString does not have " + 
                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                return opresult4666;
                                                                              };
                                                                              func4618.paramCounts = [0];
                                                                              obj4609.methods["asString"] = func4618;
                                                                              func4618.definitionLine = 1825;
                                                                              func4618.definitionModule = "objectdraw";
                                                                              setLineNumber(1810);    // compilenode call
                                                                              var call4667 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call4668 = callmethodChecked(call4667, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                              obj4609.superobj = call4668;
                                                                              if (call4668.data) obj4609.data = call4668.data;
                                                                              if (call4668.hasOwnProperty('_value'))
                                                                                  obj4609._value = call4668._value;
                                                                              setLineNumber(1812);    // compilenode string
                                                                              var string4669 = new GraceString("img");
                                                                              var call4670 = callmethodChecked(var_document, "createElement", [1], string4669);
                                                                              obj4609.data["theImage"] = call4670;
                                                                              var reader_objectdraw_theImage4671 = function() {
                                                                                return this.data["theImage"];
                                                                              };
                                                                              obj4609.methods["theImage"] = reader_objectdraw_theImage4671;
                                                                              obj4609.data["theImage"] = call4670;
                                                                              var writer_objectdraw_theImage4671 = function(argcv, o) {
                                                                                this.data["theImage"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj4609.methods["theImage:="] = writer_objectdraw_theImage4671;
                                                                              reader_objectdraw_theImage4671.confidential = true;
                                                                              writer_objectdraw_theImage4671.confidential = true;
                                                                              obj4609.mutable = true;
                                                                              setLineNumber(1813);    // compilenode call
                                                                              onSelf = true;
                                                                              var call4672 = callmethodChecked(this, "theImage", [0]);
                                                                              var call4673 = callmethodChecked(call4672, "src:=", [1], var_url);
                                                                              setLineNumber(1815);    // compilenode string
                                                                              var string4674 = new GraceString("load");
                                                                              var block4675 = new GraceBlock(this, 1815, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block4675.real = function(var___95____95__23) {
                                                                                setLineNumber(1816);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4676 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                                return call4676;
                                                                              };
                                                                              setLineNumber(1815);    // compilenode call
                                                                              onSelf = true;
                                                                              var call4677 = callmethodChecked(this, "theImage", [0]);
                                                                              var call4678 = callmethodChecked(call4677, "addEventListener", [2], string4674, block4675);
                                                                              superDepth = origSuperDepth;
                                                                            };
                                                                            obj_init_4609.apply(inheritingObject, []);
                                                                            return obj4609;
                                                                            };
                                                                            func4606.paramTypes = [];
                                                                            func4606.paramTypes.push([]);
                                                                            func4606.paramTypes.push([]);
                                                                            func4606.paramTypes.push([type_String, "url"]);
                                                                            func4606.paramTypes.push([]);
                                                                            this.methods["drawableImageAt()size()url()on()object"] = func4606;
                                                                          setLineNumber(1844);    // compilenode method
                                                                          var func4679 = function(argcv) {    // method lineFrom(1)to(1)on(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_start__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for lineFrom (arg list 1) of lineFrom(1)to(1)on(1)"));
                                                                            var var_end__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[1] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 2) of lineFrom(1)to(1)on(1)"));
                                                                            var var_canvas__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[2] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of lineFrom(1)to(1)on(1)"));
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            onSelf = true;
                                                                            var call4680 = callmethodChecked(this, "Point", [0]);
                                                                            if (!Grace_isTrue(callmethod(call4680, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in lineFrom (arg list 1), which corresponds to parameter start', does not have " + 
                                                                                        callmethod(call4680, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            onSelf = true;
                                                                            var call4681 = callmethodChecked(this, "Point", [0]);
                                                                            if (!Grace_isTrue(callmethod(call4681, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in to (arg list 2), which corresponds to parameter end', does not have " + 
                                                                                        callmethod(call4681, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            setLineNumber(1845);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                        callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("objectdraw");
                                                                            setLineNumber(1844);    // compilenode object
                                                                            var obj4682 = Grace_allocObject(null, "objectdraw.lineFrom()to()on");
                                                                            obj4682.definitionModule = "objectdraw";
                                                                            obj4682.definitionLine = 1844;
                                                                            obj4682.outer = this;
                                                                            var reader_objectdraw_outer4683 = function() {
                                                                              return this.outer;
                                                                            };
                                                                            obj4682.methods["outer"] = reader_objectdraw_outer4683;
                                                                            var obj_init_4682 = function() {
                                                                              var origSuperDepth = superDepth;
                                                                              superDepth = obj4682;
                                                                              var func4684 = function(argcv) {    // method start
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for start"));
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1854);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4685 = callmethodChecked(this, "location", [0]);
                                                                                setLineNumber(1851);    // compilenode call
                                                                                var call4686 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4687 = callmethodChecked(call4686, "Point", [0]);
                                                                                setLineNumber(1854);    // return value
                                                                                if (!Grace_isTrue(callmethod(call4687, "match", [1], call4685)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method start does not have " + 
                                                                                            callmethod(call4687, "asString", [0])._value + "."));
                                                                                return call4685;
                                                                              };
                                                                              func4684.paramCounts = [0];
                                                                              obj4682.methods["start"] = func4684;
                                                                              func4684.definitionLine = 1851;
                                                                              func4684.definitionModule = "objectdraw";
                                                                              var func4688 = function(argcv) {    // method end
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for end"));
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1860);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4689 = callmethodChecked(this, "theEnd", [0]);
                                                                                setLineNumber(1857);    // compilenode call
                                                                                var call4690 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4691 = callmethodChecked(call4690, "Point", [0]);
                                                                                setLineNumber(1860);    // return value
                                                                                if (!Grace_isTrue(callmethod(call4691, "match", [1], call4689)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method end does not have " + 
                                                                                            callmethod(call4691, "asString", [0])._value + "."));
                                                                                return call4689;
                                                                              };
                                                                              func4688.paramCounts = [0];
                                                                              obj4682.methods["end"] = func4688;
                                                                              func4688.definitionLine = 1857;
                                                                              func4688.definitionModule = "objectdraw";
                                                                              var func4692 = function(argcv) {    // method start:=(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_newStart = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for start:=(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1865);    // compilenode call
                                                                                var call4693 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4694 = callmethodChecked(call4693, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4694, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in start:= (arg list 1), which corresponds to parameter newStart, does not have " + 
                                                                                            callmethod(call4694, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1868);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4695 = callmethodChecked(this, "location:=", [1], var_newStart);
                                                                                setLineNumber(1869);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4696 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4696)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method start:=(1) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4696;
                                                                              };
                                                                              func4692.paramCounts = [1];
                                                                              obj4682.methods["start:="] = func4692;
                                                                              func4692.definitionLine = 1865;
                                                                              func4692.definitionModule = "objectdraw";
                                                                              var func4697 = function(argcv) {    // method end:=(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_newEnd = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for end:=(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1872);    // compilenode call
                                                                                var call4698 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4699 = callmethodChecked(call4698, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4699, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in end:= (arg list 1), which corresponds to parameter newEnd, does not have " + 
                                                                                            callmethod(call4699, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1875);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4700 = callmethodChecked(this, "theEnd:=", [1], var_newEnd);
                                                                                setLineNumber(1876);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4701 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4701)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method end:=(1) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4701;
                                                                              };
                                                                              func4697.paramCounts = [1];
                                                                              obj4682.methods["end:="] = func4697;
                                                                              func4697.definitionLine = 1872;
                                                                              func4697.definitionModule = "objectdraw";
                                                                              var func4702 = function(argcv) {    // method setEndPoints(2)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_newStart = arguments[curarg];
                                                                                curarg++;
                                                                                var var_newEnd = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 2)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for setEndPoints(2)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1879);    // compilenode call
                                                                                var call4703 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4704 = callmethodChecked(call4703, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4704, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in setEndPoints (arg list 1), which corresponds to parameter newStart, does not have " + 
                                                                                            callmethod(call4704, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4705 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4706 = callmethodChecked(call4705, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4706, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 2 in setEndPoints (arg list 1), which corresponds to parameter newEnd, does not have " + 
                                                                                            callmethod(call4706, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1882);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4707 = callmethodChecked(this, "start:=", [1], var_newStart);
                                                                                setLineNumber(1883);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4708 = callmethodChecked(this, "end:=", [1], var_newEnd);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4708)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method setEndPoints(2) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4708;
                                                                              };
                                                                              func4702.paramCounts = [2];
                                                                              obj4682.methods["setEndPoints"] = func4702;
                                                                              func4702.definitionLine = 1879;
                                                                              func4702.definitionModule = "objectdraw";
                                                                              var func4709 = function(argcv) {    // method draw(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_ctx = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1887);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                            callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1889);    // compilenode identifier
                                                                                var call4710 = callmethodChecked(var_ctx, "save", [0]);
                                                                                setLineNumber(1890);    // compilenode string
                                                                                var string4711 = new GraceString(")");
                                                                                onSelf = true;
                                                                                var call4713 = callmethodChecked(this, "color", [0]);
                                                                                var call4714 = callmethodChecked(call4713, "blue", [0]);
                                                                                var string4716 = new GraceString(", ");
                                                                                onSelf = true;
                                                                                var call4718 = callmethodChecked(this, "color", [0]);
                                                                                var call4719 = callmethodChecked(call4718, "green", [0]);
                                                                                var string4721 = new GraceString(", ");
                                                                                onSelf = true;
                                                                                var call4723 = callmethodChecked(this, "color", [0]);
                                                                                var call4724 = callmethodChecked(call4723, "red", [0]);
                                                                                var string4726 = new GraceString("rgb(");
                                                                                var opresult4728 = callmethodChecked(string4726, "++", [1], call4724);
                                                                                var opresult4730 = callmethodChecked(opresult4728, "++", [1], string4721);
                                                                                var opresult4732 = callmethodChecked(opresult4730, "++", [1], call4719);
                                                                                var opresult4734 = callmethodChecked(opresult4732, "++", [1], string4716);
                                                                                var opresult4736 = callmethodChecked(opresult4734, "++", [1], call4714);
                                                                                var opresult4738 = callmethodChecked(opresult4736, "++", [1], string4711);
                                                                                var call4739 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult4738);
                                                                                setLineNumber(1891);    // compilenode identifier
                                                                                var call4740 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                                setLineNumber(1892);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4741 = callmethodChecked(this, "location", [0]);
                                                                                var call4742 = callmethodChecked(call4741, "x", [0]);
                                                                                onSelf = true;
                                                                                var call4743 = callmethodChecked(this, "location", [0]);
                                                                                var call4744 = callmethodChecked(call4743, "y", [0]);
                                                                                var call4745 = callmethodChecked(var_ctx, "moveTo", [2], call4742, call4744);
                                                                                setLineNumber(1893);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4746 = callmethodChecked(this, "theEnd", [0]);
                                                                                var call4747 = callmethodChecked(call4746, "x", [0]);
                                                                                onSelf = true;
                                                                                var call4748 = callmethodChecked(this, "theEnd", [0]);
                                                                                var call4749 = callmethodChecked(call4748, "y", [0]);
                                                                                var call4750 = callmethodChecked(var_ctx, "lineTo", [2], call4747, call4749);
                                                                                setLineNumber(1894);    // compilenode identifier
                                                                                var call4751 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                                setLineNumber(1895);    // compilenode identifier
                                                                                var call4752 = callmethodChecked(var_ctx, "restore", [0]);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4752)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method draw(1) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4752;
                                                                              };
                                                                              func4709.paramTypes = [];
                                                                              func4709.paramTypes.push([]);
                                                                              func4709.paramCounts = [1];
                                                                              obj4682.methods["draw"] = func4709;
                                                                              func4709.definitionLine = 1887;
                                                                              func4709.definitionModule = "objectdraw";
                                                                              var func4753 = function(argcv) {    // method moveBy(2)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_dx = arguments[curarg];
                                                                                curarg++;
                                                                                var var_dy = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 2)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveBy(2)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1898);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in moveBy (arg list 1), which corresponds to parameter dx, does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 2 in moveBy (arg list 1), which corresponds to parameter dy, does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1901);    // compilenode identifier
                                                                                var opresult4756 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                onSelf = true;
                                                                                var call4758 = callmethodChecked(this, "location", [0]);
                                                                                var opresult4760 = callmethodChecked(call4758, "+", [1], opresult4756);
                                                                                onSelf = true;
                                                                                var call4761 = callmethodChecked(this, "location:=", [1], opresult4760);
                                                                                setLineNumber(1902);    // compilenode identifier
                                                                                var opresult4764 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                onSelf = true;
                                                                                var call4766 = callmethodChecked(this, "theEnd", [0]);
                                                                                var opresult4768 = callmethodChecked(call4766, "+", [1], opresult4764);
                                                                                onSelf = true;
                                                                                var call4769 = callmethodChecked(this, "theEnd:=", [1], opresult4768);
                                                                                setLineNumber(1903);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4770 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4770)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method moveBy(2) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4770;
                                                                              };
                                                                              func4753.paramTypes = [];
                                                                              func4753.paramTypes.push([type_Number, "dx"]);
                                                                              func4753.paramTypes.push([type_Number, "dy"]);
                                                                              func4753.paramCounts = [2];
                                                                              obj4682.methods["moveBy"] = func4753;
                                                                              func4753.definitionLine = 1898;
                                                                              func4753.definitionModule = "objectdraw";
                                                                              var func4771 = function(argcv) {    // method moveTo(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_newLocn = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveTo(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1906);    // compilenode call
                                                                                var call4772 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4773 = callmethodChecked(call4772, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4773, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in moveTo (arg list 1), which corresponds to parameter newLocn, does not have " + 
                                                                                            callmethod(call4773, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1909);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4774 = callmethodChecked(this, "location", [0]);
                                                                                var diff4777 = callmethodChecked(var_newLocn, "-", [1], call4774);
                                                                                var call4778 = callmethodChecked(diff4777, "x", [0]);
                                                                                var var_dx = call4778;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_dx)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("value of def 'dx' is not of type Number"));
                                                                                setLineNumber(1910);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4779 = callmethodChecked(this, "location", [0]);
                                                                                var diff4782 = callmethodChecked(var_newLocn, "-", [1], call4779);
                                                                                var call4783 = callmethodChecked(diff4782, "y", [0]);
                                                                                var var_dy = call4783;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_dy)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("value of def 'dy' is not of type Number"));
                                                                                setLineNumber(1911);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4784 = callmethodChecked(this, "location:=", [1], var_newLocn);
                                                                                setLineNumber(1912);    // compilenode identifier
                                                                                var opresult4787 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                onSelf = true;
                                                                                var call4789 = callmethodChecked(this, "theEnd", [0]);
                                                                                var opresult4791 = callmethodChecked(call4789, "+", [1], opresult4787);
                                                                                onSelf = true;
                                                                                var call4792 = callmethodChecked(this, "theEnd:=", [1], opresult4791);
                                                                                setLineNumber(1913);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4793 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4793)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method moveTo(1) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4793;
                                                                              };
                                                                              func4771.paramCounts = [1];
                                                                              obj4682.methods["moveTo"] = func4771;
                                                                              func4771.definitionLine = 1906;
                                                                              func4771.definitionModule = "objectdraw";
                                                                              var func4794 = function(argcv) {    // method dist2(2)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_v = arguments[curarg];
                                                                                curarg++;
                                                                                var var_w = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 2)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dist2(2)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1917);    // compilenode call
                                                                                var call4795 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4796 = callmethodChecked(call4795, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4796, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in dist2 (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                            callmethod(call4796, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4797 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4798 = callmethodChecked(call4797, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4798, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 2 in dist2 (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                            callmethod(call4798, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1919);    // compilenode identifier
                                                                                var call4800 = callmethodChecked(var_w, "y", [0]);
                                                                                var call4802 = callmethodChecked(var_v, "y", [0]);
                                                                                var diff4804 = callmethodChecked(call4802, "-", [1], call4800);
                                                                                var opresult4806 = callmethodChecked(diff4804, "^", [1], new GraceNum(2));
                                                                                var call4809 = callmethodChecked(var_w, "x", [0]);
                                                                                var call4811 = callmethodChecked(var_v, "x", [0]);
                                                                                var diff4813 = callmethodChecked(call4811, "-", [1], call4809);
                                                                                var opresult4815 = callmethodChecked(diff4813, "^", [1], new GraceNum(2));
                                                                                var opresult4817 = callmethodChecked(opresult4815, "+", [1], opresult4806);
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], opresult4817)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method dist2(2) does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                return opresult4817;
                                                                              };
                                                                              func4794.confidential = true;
                                                                              func4794.paramCounts = [2];
                                                                              obj4682.methods["dist2"] = func4794;
                                                                              func4794.definitionLine = 1917;
                                                                              func4794.definitionModule = "objectdraw";
                                                                              var func4818 = function(argcv) {    // method distToSegmentSquared(3)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_p = arguments[curarg];
                                                                                curarg++;
                                                                                var var_v = arguments[curarg];
                                                                                curarg++;
                                                                                var var_w = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 3)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for distToSegmentSquared(3)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1923);    // compilenode call
                                                                                var call4819 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4820 = callmethodChecked(call4819, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4820, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in distToSegmentSquared (arg list 1), which corresponds to parameter p, does not have " + 
                                                                                            callmethod(call4820, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4821 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4822 = callmethodChecked(call4821, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4822, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 2 in distToSegmentSquared (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                            callmethod(call4822, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4823 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4824 = callmethodChecked(call4823, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4824, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 3 in distToSegmentSquared (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                            callmethod(call4824, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1927);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4825 = callmethodChecked(this, "dist2", [2], var_v, var_w);
                                                                                var var_l2 = call4825;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_l2)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("initial value of var 'l2' is not of type Number"));
                                                                                var if4826 = GraceDone;
                                                                                setLineNumber(1928);    // compilenode identifier
                                                                                var opresult4829 = callmethodChecked(var_l2, "==", [1], new GraceNum(0));
                                                                                if (Grace_isTrue(opresult4829)) {
                                                                                  onSelf = true;
                                                                                  var call4830 = callmethodChecked(this, "dist2", [2], var_p, var_v);
                                                                                  return call4830;
                                                                                }
                                                                                setLineNumber(1929);    // compilenode identifier
                                                                                var call4832 = callmethodChecked(var_v, "y", [0]);
                                                                                var call4834 = callmethodChecked(var_w, "y", [0]);
                                                                                var diff4836 = callmethodChecked(call4834, "-", [1], call4832);
                                                                                var call4838 = callmethodChecked(var_v, "y", [0]);
                                                                                var call4840 = callmethodChecked(var_p, "y", [0]);
                                                                                var diff4842 = callmethodChecked(call4840, "-", [1], call4838);
                                                                                var prod4844 = callmethodChecked(diff4842, "*", [1], diff4836);
                                                                                var call4846 = callmethodChecked(var_v, "x", [0]);
                                                                                var call4848 = callmethodChecked(var_w, "x", [0]);
                                                                                var diff4850 = callmethodChecked(call4848, "-", [1], call4846);
                                                                                var call4852 = callmethodChecked(var_v, "x", [0]);
                                                                                var call4854 = callmethodChecked(var_p, "x", [0]);
                                                                                var diff4856 = callmethodChecked(call4854, "-", [1], call4852);
                                                                                var prod4858 = callmethodChecked(diff4856, "*", [1], diff4850);
                                                                                var opresult4860 = callmethodChecked(prod4858, "+", [1], prod4844);
                                                                                var quotient4862 = callmethodChecked(opresult4860, "/", [1], var_l2);
                                                                                var var_t = quotient4862;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_t)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("initial value of var 't' is not of type Number"));
                                                                                var if4863 = GraceDone;
                                                                                setLineNumber(1930);    // compilenode identifier
                                                                                var opresult4866 = callmethodChecked(var_t, "<", [1], new GraceNum(0));
                                                                                if (Grace_isTrue(opresult4866)) {
                                                                                  onSelf = true;
                                                                                  var call4867 = callmethodChecked(this, "dist2", [2], var_p, var_v);
                                                                                  return call4867;
                                                                                }
                                                                                var if4868 = GraceDone;
                                                                                setLineNumber(1931);    // compilenode identifier
                                                                                var opresult4871 = callmethodChecked(var_t, ">", [1], new GraceNum(1));
                                                                                if (Grace_isTrue(opresult4871)) {
                                                                                  onSelf = true;
                                                                                  var call4872 = callmethodChecked(this, "dist2", [2], var_p, var_w);
                                                                                  return call4872;
                                                                                }
                                                                                setLineNumber(1933);    // compilenode identifier
                                                                                var call4873 = callmethodChecked(var_v, "y", [0]);
                                                                                var call4875 = callmethodChecked(var_w, "y", [0]);
                                                                                var diff4877 = callmethodChecked(call4875, "-", [1], call4873);
                                                                                var prod4880 = callmethodChecked(var_t, "*", [1], diff4877);
                                                                                var call4882 = callmethodChecked(var_v, "y", [0]);
                                                                                var opresult4884 = callmethodChecked(call4882, "+", [1], prod4880);
                                                                                setLineNumber(1932);    // compilenode identifier
                                                                                var call4886 = callmethodChecked(var_v, "x", [0]);
                                                                                var call4888 = callmethodChecked(var_w, "x", [0]);
                                                                                var diff4890 = callmethodChecked(call4888, "-", [1], call4886);
                                                                                var prod4893 = callmethodChecked(var_t, "*", [1], diff4890);
                                                                                var call4895 = callmethodChecked(var_v, "x", [0]);
                                                                                var opresult4897 = callmethodChecked(call4895, "+", [1], prod4893);
                                                                                var opresult4899 = callmethodChecked(opresult4897, "@", [1], opresult4884);
                                                                                onSelf = true;
                                                                                var call4900 = callmethodChecked(this, "dist2", [2], var_p, opresult4899);
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], call4900)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method distToSegmentSquared(3) does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                return call4900;
                                                                              };
                                                                              func4818.confidential = true;
                                                                              func4818.paramCounts = [3];
                                                                              obj4682.methods["distToSegmentSquared"] = func4818;
                                                                              func4818.definitionLine = 1923;
                                                                              func4818.definitionModule = "objectdraw";
                                                                              var func4901 = function(argcv) {    // method distToSegment(3)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_p = arguments[curarg];
                                                                                curarg++;
                                                                                var var_v = arguments[curarg];
                                                                                curarg++;
                                                                                var var_w = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 3)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for distToSegment(3)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1936);    // compilenode call
                                                                                var call4902 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4903 = callmethodChecked(call4902, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4903, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in distToSegment (arg list 1), which corresponds to parameter p, does not have " + 
                                                                                            callmethod(call4903, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4904 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4905 = callmethodChecked(call4904, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4905, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 2 in distToSegment (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                            callmethod(call4905, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4906 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4907 = callmethodChecked(call4906, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4907, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 3 in distToSegment (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                            callmethod(call4907, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1938);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4908 = callmethodChecked(this, "distToSegmentSquared", [3], var_p, var_v, var_w);
                                                                                var call4909 = callmethodChecked(var_math, "sqrt", [1], call4908);
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], call4909)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method distToSegment(3) does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                return call4909;
                                                                              };
                                                                              func4901.paramCounts = [3];
                                                                              obj4682.methods["distToSegment"] = func4901;
                                                                              func4901.definitionLine = 1936;
                                                                              func4901.definitionModule = "objectdraw";
                                                                              var func4910 = function(argcv) {    // method contains(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_pt = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1941);    // compilenode call
                                                                                var call4911 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4912 = callmethodChecked(call4911, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4912, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                                            callmethod(call4912, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1945);    // compilenode num
                                                                                var var_tolerance = new GraceNum(2);
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_tolerance)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("value of def 'tolerance' is not of type Number"));
                                                                                setLineNumber(1946);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4914 = callmethodChecked(this, "start", [0]);
                                                                                onSelf = true;
                                                                                var call4915 = callmethodChecked(this, "end", [0]);
                                                                                onSelf = true;
                                                                                var call4916 = callmethodChecked(this, "distToSegment", [3], var_pt, call4914, call4915);
                                                                                var opresult4918 = callmethodChecked(call4916, "<", [1], var_tolerance);
                                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult4918)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method contains(1) does not have " + 
                                                                                            callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                return opresult4918;
                                                                              };
                                                                              func4910.paramCounts = [1];
                                                                              obj4682.methods["contains"] = func4910;
                                                                              func4910.definitionLine = 1941;
                                                                              func4910.definitionModule = "objectdraw";
                                                                              var func4919 = function(argcv) {    // method asString
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1951);    // compilenode string
                                                                                var string4920 = new GraceString("");
                                                                                onSelf = true;
                                                                                var call4922 = callmethodChecked(this, "color", [0]);
                                                                                var string4924 = new GraceString(" with color ");
                                                                                onSelf = true;
                                                                                var call4926 = callmethodChecked(this, "end", [0]);
                                                                                var string4928 = new GraceString(" to ");
                                                                                onSelf = true;
                                                                                var call4930 = callmethodChecked(this, "start", [0]);
                                                                                var string4932 = new GraceString("Line from ");
                                                                                var opresult4934 = callmethodChecked(string4932, "++", [1], call4930);
                                                                                var opresult4936 = callmethodChecked(opresult4934, "++", [1], string4928);
                                                                                var opresult4938 = callmethodChecked(opresult4936, "++", [1], call4926);
                                                                                var opresult4940 = callmethodChecked(opresult4938, "++", [1], string4924);
                                                                                var opresult4942 = callmethodChecked(opresult4940, "++", [1], call4922);
                                                                                var opresult4944 = callmethodChecked(opresult4942, "++", [1], string4920);
                                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4944)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method asString does not have " + 
                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                return opresult4944;
                                                                              };
                                                                              func4919.paramCounts = [0];
                                                                              obj4682.methods["asString"] = func4919;
                                                                              func4919.definitionLine = 1949;
                                                                              func4919.definitionModule = "objectdraw";
                                                                              setLineNumber(1847);    // compilenode call
                                                                              var call4945 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call4946 = callmethodChecked(call4945, "drawableAt()on()object", [1, 1, 1], var_start__39__, var_canvas__39__, this);
                                                                              obj4682.superobj = call4946;
                                                                              if (call4946.data) obj4682.data = call4946.data;
                                                                              if (call4946.hasOwnProperty('_value'))
                                                                                  obj4682._value = call4946._value;
                                                                              setLineNumber(1849);    // compilenode identifier
                                                                              obj4682.data["theEnd"] = var_end__39__;
                                                                              var reader_objectdraw_theEnd4947 = function() {
                                                                                return this.data["theEnd"];
                                                                              };
                                                                              obj4682.methods["theEnd"] = reader_objectdraw_theEnd4947;
                                                                              obj4682.data["theEnd"] = var_end__39__;
                                                                              var writer_objectdraw_theEnd4947 = function(argcv, o) {
                                                                                this.data["theEnd"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj4682.methods["theEnd:="] = writer_objectdraw_theEnd4947;
                                                                              reader_objectdraw_theEnd4947.confidential = true;
                                                                              writer_objectdraw_theEnd4947.confidential = true;
                                                                              var call4948 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call4949 = callmethodChecked(call4948, "Point", [0]);
                                                                              if (!Grace_isTrue(callmethod(call4949, "match", [1], var_end__39__)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("initial value of var 'theEnd' is not of type self.outer.Point"));
                                                                              obj4682.mutable = true;
                                                                              setLineNumber(1863);    // compilenode identifier
                                                                              onSelf = true;
                                                                              var call4950 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                              superDepth = origSuperDepth;
                                                                            };
                                                                            obj_init_4682.apply(obj4682, []);
                                                                            setLineNumber(1844);    // return value
                                                                            if (!Grace_isTrue(callmethod(var_Line, "match", [1], obj4682)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method lineFrom(1)to(1)on(1) does not have " + 
                                                                                        callmethod(var_Line, "asString", [0])._value + "."));
                                                                            return obj4682;
                                                                          };
                                                                          func4679.paramTypes = [];
                                                                          func4679.paramTypes.push([]);
                                                                          func4679.paramTypes.push([]);
                                                                          func4679.paramTypes.push([]);
                                                                          func4679.paramCounts = [1, 1, 1];
                                                                          this.methods["lineFrom()to()on"] = func4679;
                                                                          func4679.definitionLine = 1844;
                                                                          func4679.definitionModule = "objectdraw";
                                                                            var func4951 = function(argcv) {    // method lineFrom(1     )to(1     )on(1     )()object
                                                                              var curarg = 1;
                                                                              var var_start__39__ = arguments[curarg];
                                                                              curarg++;
                                                                              var var_end__39__ = arguments[curarg];
                                                                              curarg++;
                                                                              var var_canvas__39__ = arguments[curarg];
                                                                              curarg++;
                                                                              var inheritingObject = arguments[curarg++];
                                                                              // Start argument processing
                                                                              curarg = 1;
                                                                              onSelf = true;
                                                                              var call4952 = callmethodChecked(this, "Point", [0]);
                                                                              if (!Grace_isTrue(callmethod(call4952, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in lineFrom (arg list 1), which corresponds to parameter start', does not have " + 
                                                                                          callmethod(call4952, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              onSelf = true;
                                                                              var call4953 = callmethodChecked(this, "Point", [0]);
                                                                              if (!Grace_isTrue(callmethod(call4953, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in to (arg list 2), which corresponds to parameter end', does not have " + 
                                                                                          callmethod(call4953, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              setLineNumber(1845);    // compilenode identifier
                                                                              if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                          callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              // End argument processing
                                                                              setModuleName("objectdraw");
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var obj4954 = Grace_allocObject(null, "lineFrom()to()on");
                                                                              obj4954.definitionModule = "objectdraw";
                                                                              obj4954.definitionLine = 1844;
                                                                              var inho4954 = inheritingObject;
                                                                              while (inho4954.superobj) inho4954 = inho4954.superobj;
                                                                              inho4954.superobj = obj4954;
                                                                              obj4954.data = inheritingObject.data;
                                                                              if (inheritingObject.hasOwnProperty('_value'))
                                                                                obj4954._value = inheritingObject._value;
                                                                              obj4954.outer = this;
                                                                              var reader_objectdraw_outer4955 = function() {
                                                                                return this.outer;
                                                                              };
                                                                              obj4954.methods["outer"] = reader_objectdraw_outer4955;
                                                                              var obj_init_4954 = function() {
                                                                                var origSuperDepth = superDepth;
                                                                                superDepth = obj4954;
                                                                                var func4956 = function(argcv) {    // method start
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for start"));
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1854);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call4957 = callmethodChecked(this, "location", [0]);
                                                                                  setLineNumber(1851);    // compilenode call
                                                                                  var call4958 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4959 = callmethodChecked(call4958, "Point", [0]);
                                                                                  setLineNumber(1854);    // return value
                                                                                  if (!Grace_isTrue(callmethod(call4959, "match", [1], call4957)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method start does not have " + 
                                                                                              callmethod(call4959, "asString", [0])._value + "."));
                                                                                  return call4957;
                                                                                };
                                                                                func4956.paramCounts = [0];
                                                                                obj4954.methods["start"] = func4956;
                                                                                func4956.definitionLine = 1851;
                                                                                func4956.definitionModule = "objectdraw";
                                                                                var func4960 = function(argcv) {    // method end
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for end"));
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1860);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call4961 = callmethodChecked(this, "theEnd", [0]);
                                                                                  setLineNumber(1857);    // compilenode call
                                                                                  var call4962 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4963 = callmethodChecked(call4962, "Point", [0]);
                                                                                  setLineNumber(1860);    // return value
                                                                                  if (!Grace_isTrue(callmethod(call4963, "match", [1], call4961)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method end does not have " + 
                                                                                              callmethod(call4963, "asString", [0])._value + "."));
                                                                                  return call4961;
                                                                                };
                                                                                func4960.paramCounts = [0];
                                                                                obj4954.methods["end"] = func4960;
                                                                                func4960.definitionLine = 1857;
                                                                                func4960.definitionModule = "objectdraw";
                                                                                var func4964 = function(argcv) {    // method start:=(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_newStart = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for start:=(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1865);    // compilenode call
                                                                                  var call4965 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4966 = callmethodChecked(call4965, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call4966, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in start:= (arg list 1), which corresponds to parameter newStart, does not have " + 
                                                                                              callmethod(call4966, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1868);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call4967 = callmethodChecked(this, "location:=", [1], var_newStart);
                                                                                  setLineNumber(1869);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call4968 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4968)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method start:=(1) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call4968;
                                                                                };
                                                                                func4964.paramCounts = [1];
                                                                                obj4954.methods["start:="] = func4964;
                                                                                func4964.definitionLine = 1865;
                                                                                func4964.definitionModule = "objectdraw";
                                                                                var func4969 = function(argcv) {    // method end:=(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_newEnd = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for end:=(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1872);    // compilenode call
                                                                                  var call4970 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4971 = callmethodChecked(call4970, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call4971, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in end:= (arg list 1), which corresponds to parameter newEnd, does not have " + 
                                                                                              callmethod(call4971, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1875);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call4972 = callmethodChecked(this, "theEnd:=", [1], var_newEnd);
                                                                                  setLineNumber(1876);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call4973 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4973)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method end:=(1) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call4973;
                                                                                };
                                                                                func4969.paramCounts = [1];
                                                                                obj4954.methods["end:="] = func4969;
                                                                                func4969.definitionLine = 1872;
                                                                                func4969.definitionModule = "objectdraw";
                                                                                var func4974 = function(argcv) {    // method setEndPoints(2)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_newStart = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_newEnd = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 2)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for setEndPoints(2)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1879);    // compilenode call
                                                                                  var call4975 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4976 = callmethodChecked(call4975, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call4976, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in setEndPoints (arg list 1), which corresponds to parameter newStart, does not have " + 
                                                                                              callmethod(call4976, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call4977 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4978 = callmethodChecked(call4977, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call4978, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 2 in setEndPoints (arg list 1), which corresponds to parameter newEnd, does not have " + 
                                                                                              callmethod(call4978, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1882);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call4979 = callmethodChecked(this, "start:=", [1], var_newStart);
                                                                                  setLineNumber(1883);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call4980 = callmethodChecked(this, "end:=", [1], var_newEnd);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4980)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method setEndPoints(2) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call4980;
                                                                                };
                                                                                func4974.paramCounts = [2];
                                                                                obj4954.methods["setEndPoints"] = func4974;
                                                                                func4974.definitionLine = 1879;
                                                                                func4974.definitionModule = "objectdraw";
                                                                                var func4981 = function(argcv) {    // method draw(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_ctx = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1887);    // compilenode identifier
                                                                                  if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                              callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1889);    // compilenode identifier
                                                                                  var call4982 = callmethodChecked(var_ctx, "save", [0]);
                                                                                  setLineNumber(1890);    // compilenode string
                                                                                  var string4983 = new GraceString(")");
                                                                                  onSelf = true;
                                                                                  var call4985 = callmethodChecked(this, "color", [0]);
                                                                                  var call4986 = callmethodChecked(call4985, "blue", [0]);
                                                                                  var string4988 = new GraceString(", ");
                                                                                  onSelf = true;
                                                                                  var call4990 = callmethodChecked(this, "color", [0]);
                                                                                  var call4991 = callmethodChecked(call4990, "green", [0]);
                                                                                  var string4993 = new GraceString(", ");
                                                                                  onSelf = true;
                                                                                  var call4995 = callmethodChecked(this, "color", [0]);
                                                                                  var call4996 = callmethodChecked(call4995, "red", [0]);
                                                                                  var string4998 = new GraceString("rgb(");
                                                                                  var opresult5000 = callmethodChecked(string4998, "++", [1], call4996);
                                                                                  var opresult5002 = callmethodChecked(opresult5000, "++", [1], string4993);
                                                                                  var opresult5004 = callmethodChecked(opresult5002, "++", [1], call4991);
                                                                                  var opresult5006 = callmethodChecked(opresult5004, "++", [1], string4988);
                                                                                  var opresult5008 = callmethodChecked(opresult5006, "++", [1], call4986);
                                                                                  var opresult5010 = callmethodChecked(opresult5008, "++", [1], string4983);
                                                                                  var call5011 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult5010);
                                                                                  setLineNumber(1891);    // compilenode identifier
                                                                                  var call5012 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                                  setLineNumber(1892);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5013 = callmethodChecked(this, "location", [0]);
                                                                                  var call5014 = callmethodChecked(call5013, "x", [0]);
                                                                                  onSelf = true;
                                                                                  var call5015 = callmethodChecked(this, "location", [0]);
                                                                                  var call5016 = callmethodChecked(call5015, "y", [0]);
                                                                                  var call5017 = callmethodChecked(var_ctx, "moveTo", [2], call5014, call5016);
                                                                                  setLineNumber(1893);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5018 = callmethodChecked(this, "theEnd", [0]);
                                                                                  var call5019 = callmethodChecked(call5018, "x", [0]);
                                                                                  onSelf = true;
                                                                                  var call5020 = callmethodChecked(this, "theEnd", [0]);
                                                                                  var call5021 = callmethodChecked(call5020, "y", [0]);
                                                                                  var call5022 = callmethodChecked(var_ctx, "lineTo", [2], call5019, call5021);
                                                                                  setLineNumber(1894);    // compilenode identifier
                                                                                  var call5023 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                                  setLineNumber(1895);    // compilenode identifier
                                                                                  var call5024 = callmethodChecked(var_ctx, "restore", [0]);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5024)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method draw(1) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call5024;
                                                                                };
                                                                                func4981.paramTypes = [];
                                                                                func4981.paramTypes.push([]);
                                                                                func4981.paramCounts = [1];
                                                                                obj4954.methods["draw"] = func4981;
                                                                                func4981.definitionLine = 1887;
                                                                                func4981.definitionModule = "objectdraw";
                                                                                var func5025 = function(argcv) {    // method moveBy(2)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_dx = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_dy = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 2)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveBy(2)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1898);    // compilenode identifier
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in moveBy (arg list 1), which corresponds to parameter dx, does not have " + 
                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 2 in moveBy (arg list 1), which corresponds to parameter dy, does not have " + 
                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1901);    // compilenode identifier
                                                                                  var opresult5028 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                  onSelf = true;
                                                                                  var call5030 = callmethodChecked(this, "location", [0]);
                                                                                  var opresult5032 = callmethodChecked(call5030, "+", [1], opresult5028);
                                                                                  onSelf = true;
                                                                                  var call5033 = callmethodChecked(this, "location:=", [1], opresult5032);
                                                                                  setLineNumber(1902);    // compilenode identifier
                                                                                  var opresult5036 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                  onSelf = true;
                                                                                  var call5038 = callmethodChecked(this, "theEnd", [0]);
                                                                                  var opresult5040 = callmethodChecked(call5038, "+", [1], opresult5036);
                                                                                  onSelf = true;
                                                                                  var call5041 = callmethodChecked(this, "theEnd:=", [1], opresult5040);
                                                                                  setLineNumber(1903);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5042 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5042)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method moveBy(2) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call5042;
                                                                                };
                                                                                func5025.paramTypes = [];
                                                                                func5025.paramTypes.push([type_Number, "dx"]);
                                                                                func5025.paramTypes.push([type_Number, "dy"]);
                                                                                func5025.paramCounts = [2];
                                                                                obj4954.methods["moveBy"] = func5025;
                                                                                func5025.definitionLine = 1898;
                                                                                func5025.definitionModule = "objectdraw";
                                                                                var func5043 = function(argcv) {    // method moveTo(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_newLocn = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveTo(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1906);    // compilenode call
                                                                                  var call5044 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5045 = callmethodChecked(call5044, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5045, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in moveTo (arg list 1), which corresponds to parameter newLocn, does not have " + 
                                                                                              callmethod(call5045, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1909);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5046 = callmethodChecked(this, "location", [0]);
                                                                                  var diff5049 = callmethodChecked(var_newLocn, "-", [1], call5046);
                                                                                  var call5050 = callmethodChecked(diff5049, "x", [0]);
                                                                                  var var_dx = call5050;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_dx)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("value of def 'dx' is not of type Number"));
                                                                                  setLineNumber(1910);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5051 = callmethodChecked(this, "location", [0]);
                                                                                  var diff5054 = callmethodChecked(var_newLocn, "-", [1], call5051);
                                                                                  var call5055 = callmethodChecked(diff5054, "y", [0]);
                                                                                  var var_dy = call5055;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_dy)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("value of def 'dy' is not of type Number"));
                                                                                  setLineNumber(1911);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call5056 = callmethodChecked(this, "location:=", [1], var_newLocn);
                                                                                  setLineNumber(1912);    // compilenode identifier
                                                                                  var opresult5059 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                  onSelf = true;
                                                                                  var call5061 = callmethodChecked(this, "theEnd", [0]);
                                                                                  var opresult5063 = callmethodChecked(call5061, "+", [1], opresult5059);
                                                                                  onSelf = true;
                                                                                  var call5064 = callmethodChecked(this, "theEnd:=", [1], opresult5063);
                                                                                  setLineNumber(1913);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5065 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5065)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method moveTo(1) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call5065;
                                                                                };
                                                                                func5043.paramCounts = [1];
                                                                                obj4954.methods["moveTo"] = func5043;
                                                                                func5043.definitionLine = 1906;
                                                                                func5043.definitionModule = "objectdraw";
                                                                                var func5066 = function(argcv) {    // method dist2(2)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_v = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_w = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 2)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dist2(2)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1917);    // compilenode call
                                                                                  var call5067 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5068 = callmethodChecked(call5067, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5068, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in dist2 (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                              callmethod(call5068, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call5069 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5070 = callmethodChecked(call5069, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5070, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 2 in dist2 (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                              callmethod(call5070, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1919);    // compilenode identifier
                                                                                  var call5072 = callmethodChecked(var_w, "y", [0]);
                                                                                  var call5074 = callmethodChecked(var_v, "y", [0]);
                                                                                  var diff5076 = callmethodChecked(call5074, "-", [1], call5072);
                                                                                  var opresult5078 = callmethodChecked(diff5076, "^", [1], new GraceNum(2));
                                                                                  var call5081 = callmethodChecked(var_w, "x", [0]);
                                                                                  var call5083 = callmethodChecked(var_v, "x", [0]);
                                                                                  var diff5085 = callmethodChecked(call5083, "-", [1], call5081);
                                                                                  var opresult5087 = callmethodChecked(diff5085, "^", [1], new GraceNum(2));
                                                                                  var opresult5089 = callmethodChecked(opresult5087, "+", [1], opresult5078);
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], opresult5089)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method dist2(2) does not have " + 
                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                  return opresult5089;
                                                                                };
                                                                                func5066.confidential = true;
                                                                                func5066.paramCounts = [2];
                                                                                obj4954.methods["dist2"] = func5066;
                                                                                func5066.definitionLine = 1917;
                                                                                func5066.definitionModule = "objectdraw";
                                                                                var func5090 = function(argcv) {    // method distToSegmentSquared(3)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_p = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_v = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_w = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 3)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for distToSegmentSquared(3)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1923);    // compilenode call
                                                                                  var call5091 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5092 = callmethodChecked(call5091, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5092, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in distToSegmentSquared (arg list 1), which corresponds to parameter p, does not have " + 
                                                                                              callmethod(call5092, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call5093 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5094 = callmethodChecked(call5093, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5094, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 2 in distToSegmentSquared (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                              callmethod(call5094, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call5095 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5096 = callmethodChecked(call5095, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5096, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 3 in distToSegmentSquared (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                              callmethod(call5096, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1927);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call5097 = callmethodChecked(this, "dist2", [2], var_v, var_w);
                                                                                  var var_l2 = call5097;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_l2)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("initial value of var 'l2' is not of type Number"));
                                                                                  var if5098 = GraceDone;
                                                                                  setLineNumber(1928);    // compilenode identifier
                                                                                  var opresult5101 = callmethodChecked(var_l2, "==", [1], new GraceNum(0));
                                                                                  if (Grace_isTrue(opresult5101)) {
                                                                                    onSelf = true;
                                                                                    var call5102 = callmethodChecked(this, "dist2", [2], var_p, var_v);
                                                                                    return call5102;
                                                                                  }
                                                                                  setLineNumber(1929);    // compilenode identifier
                                                                                  var call5104 = callmethodChecked(var_v, "y", [0]);
                                                                                  var call5106 = callmethodChecked(var_w, "y", [0]);
                                                                                  var diff5108 = callmethodChecked(call5106, "-", [1], call5104);
                                                                                  var call5110 = callmethodChecked(var_v, "y", [0]);
                                                                                  var call5112 = callmethodChecked(var_p, "y", [0]);
                                                                                  var diff5114 = callmethodChecked(call5112, "-", [1], call5110);
                                                                                  var prod5116 = callmethodChecked(diff5114, "*", [1], diff5108);
                                                                                  var call5118 = callmethodChecked(var_v, "x", [0]);
                                                                                  var call5120 = callmethodChecked(var_w, "x", [0]);
                                                                                  var diff5122 = callmethodChecked(call5120, "-", [1], call5118);
                                                                                  var call5124 = callmethodChecked(var_v, "x", [0]);
                                                                                  var call5126 = callmethodChecked(var_p, "x", [0]);
                                                                                  var diff5128 = callmethodChecked(call5126, "-", [1], call5124);
                                                                                  var prod5130 = callmethodChecked(diff5128, "*", [1], diff5122);
                                                                                  var opresult5132 = callmethodChecked(prod5130, "+", [1], prod5116);
                                                                                  var quotient5134 = callmethodChecked(opresult5132, "/", [1], var_l2);
                                                                                  var var_t = quotient5134;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_t)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("initial value of var 't' is not of type Number"));
                                                                                  var if5135 = GraceDone;
                                                                                  setLineNumber(1930);    // compilenode identifier
                                                                                  var opresult5138 = callmethodChecked(var_t, "<", [1], new GraceNum(0));
                                                                                  if (Grace_isTrue(opresult5138)) {
                                                                                    onSelf = true;
                                                                                    var call5139 = callmethodChecked(this, "dist2", [2], var_p, var_v);
                                                                                    return call5139;
                                                                                  }
                                                                                  var if5140 = GraceDone;
                                                                                  setLineNumber(1931);    // compilenode identifier
                                                                                  var opresult5143 = callmethodChecked(var_t, ">", [1], new GraceNum(1));
                                                                                  if (Grace_isTrue(opresult5143)) {
                                                                                    onSelf = true;
                                                                                    var call5144 = callmethodChecked(this, "dist2", [2], var_p, var_w);
                                                                                    return call5144;
                                                                                  }
                                                                                  setLineNumber(1933);    // compilenode identifier
                                                                                  var call5145 = callmethodChecked(var_v, "y", [0]);
                                                                                  var call5147 = callmethodChecked(var_w, "y", [0]);
                                                                                  var diff5149 = callmethodChecked(call5147, "-", [1], call5145);
                                                                                  var prod5152 = callmethodChecked(var_t, "*", [1], diff5149);
                                                                                  var call5154 = callmethodChecked(var_v, "y", [0]);
                                                                                  var opresult5156 = callmethodChecked(call5154, "+", [1], prod5152);
                                                                                  setLineNumber(1932);    // compilenode identifier
                                                                                  var call5158 = callmethodChecked(var_v, "x", [0]);
                                                                                  var call5160 = callmethodChecked(var_w, "x", [0]);
                                                                                  var diff5162 = callmethodChecked(call5160, "-", [1], call5158);
                                                                                  var prod5165 = callmethodChecked(var_t, "*", [1], diff5162);
                                                                                  var call5167 = callmethodChecked(var_v, "x", [0]);
                                                                                  var opresult5169 = callmethodChecked(call5167, "+", [1], prod5165);
                                                                                  var opresult5171 = callmethodChecked(opresult5169, "@", [1], opresult5156);
                                                                                  onSelf = true;
                                                                                  var call5172 = callmethodChecked(this, "dist2", [2], var_p, opresult5171);
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5172)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method distToSegmentSquared(3) does not have " + 
                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                  return call5172;
                                                                                };
                                                                                func5090.confidential = true;
                                                                                func5090.paramCounts = [3];
                                                                                obj4954.methods["distToSegmentSquared"] = func5090;
                                                                                func5090.definitionLine = 1923;
                                                                                func5090.definitionModule = "objectdraw";
                                                                                var func5173 = function(argcv) {    // method distToSegment(3)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_p = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_v = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_w = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 3)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for distToSegment(3)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1936);    // compilenode call
                                                                                  var call5174 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5175 = callmethodChecked(call5174, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5175, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in distToSegment (arg list 1), which corresponds to parameter p, does not have " + 
                                                                                              callmethod(call5175, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call5176 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5177 = callmethodChecked(call5176, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5177, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 2 in distToSegment (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                              callmethod(call5177, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call5178 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5179 = callmethodChecked(call5178, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5179, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 3 in distToSegment (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                              callmethod(call5179, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1938);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call5180 = callmethodChecked(this, "distToSegmentSquared", [3], var_p, var_v, var_w);
                                                                                  var call5181 = callmethodChecked(var_math, "sqrt", [1], call5180);
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5181)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method distToSegment(3) does not have " + 
                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                  return call5181;
                                                                                };
                                                                                func5173.paramCounts = [3];
                                                                                obj4954.methods["distToSegment"] = func5173;
                                                                                func5173.definitionLine = 1936;
                                                                                func5173.definitionModule = "objectdraw";
                                                                                var func5182 = function(argcv) {    // method contains(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_pt = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1941);    // compilenode call
                                                                                  var call5183 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5184 = callmethodChecked(call5183, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5184, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                                              callmethod(call5184, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1945);    // compilenode num
                                                                                  var var_tolerance = new GraceNum(2);
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_tolerance)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("value of def 'tolerance' is not of type Number"));
                                                                                  setLineNumber(1946);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5186 = callmethodChecked(this, "start", [0]);
                                                                                  onSelf = true;
                                                                                  var call5187 = callmethodChecked(this, "end", [0]);
                                                                                  onSelf = true;
                                                                                  var call5188 = callmethodChecked(this, "distToSegment", [3], var_pt, call5186, call5187);
                                                                                  var opresult5190 = callmethodChecked(call5188, "<", [1], var_tolerance);
                                                                                  if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult5190)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method contains(1) does not have " + 
                                                                                              callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                  return opresult5190;
                                                                                };
                                                                                func5182.paramCounts = [1];
                                                                                obj4954.methods["contains"] = func5182;
                                                                                func5182.definitionLine = 1941;
                                                                                func5182.definitionModule = "objectdraw";
                                                                                var func5191 = function(argcv) {    // method asString
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                  setModuleName("objectdraw");
                                                                                  setLineNumber(1951);    // compilenode string
                                                                                  var string5192 = new GraceString("");
                                                                                  onSelf = true;
                                                                                  var call5194 = callmethodChecked(this, "color", [0]);
                                                                                  var string5196 = new GraceString(" with color ");
                                                                                  onSelf = true;
                                                                                  var call5198 = callmethodChecked(this, "end", [0]);
                                                                                  var string5200 = new GraceString(" to ");
                                                                                  onSelf = true;
                                                                                  var call5202 = callmethodChecked(this, "start", [0]);
                                                                                  var string5204 = new GraceString("Line from ");
                                                                                  var opresult5206 = callmethodChecked(string5204, "++", [1], call5202);
                                                                                  var opresult5208 = callmethodChecked(opresult5206, "++", [1], string5200);
                                                                                  var opresult5210 = callmethodChecked(opresult5208, "++", [1], call5198);
                                                                                  var opresult5212 = callmethodChecked(opresult5210, "++", [1], string5196);
                                                                                  var opresult5214 = callmethodChecked(opresult5212, "++", [1], call5194);
                                                                                  var opresult5216 = callmethodChecked(opresult5214, "++", [1], string5192);
                                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5216)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method asString does not have " + 
                                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                                  return opresult5216;
                                                                                };
                                                                                func5191.paramCounts = [0];
                                                                                obj4954.methods["asString"] = func5191;
                                                                                func5191.definitionLine = 1949;
                                                                                func5191.definitionModule = "objectdraw";
                                                                                setLineNumber(1847);    // compilenode call
                                                                                var call5217 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call5218 = callmethodChecked(call5217, "drawableAt()on()object", [1, 1, 1], var_start__39__, var_canvas__39__, this);
                                                                                obj4954.superobj = call5218;
                                                                                if (call5218.data) obj4954.data = call5218.data;
                                                                                if (call5218.hasOwnProperty('_value'))
                                                                                    obj4954._value = call5218._value;
                                                                                setLineNumber(1849);    // compilenode identifier
                                                                                obj4954.data["theEnd"] = var_end__39__;
                                                                                var reader_objectdraw_theEnd5219 = function() {
                                                                                  return this.data["theEnd"];
                                                                                };
                                                                                obj4954.methods["theEnd"] = reader_objectdraw_theEnd5219;
                                                                                obj4954.data["theEnd"] = var_end__39__;
                                                                                var writer_objectdraw_theEnd5219 = function(argcv, o) {
                                                                                  this.data["theEnd"] = o;
                                                                                  return GraceDone;
                                                                                };
                                                                                obj4954.methods["theEnd:="] = writer_objectdraw_theEnd5219;
                                                                                reader_objectdraw_theEnd5219.confidential = true;
                                                                                writer_objectdraw_theEnd5219.confidential = true;
                                                                                var call5220 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call5221 = callmethodChecked(call5220, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call5221, "match", [1], var_end__39__)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("initial value of var 'theEnd' is not of type self.outer.Point"));
                                                                                obj4954.mutable = true;
                                                                                setLineNumber(1863);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call5222 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                                superDepth = origSuperDepth;
                                                                              };
                                                                              obj_init_4954.apply(inheritingObject, []);
                                                                              return obj4954;
                                                                              };
                                                                              func4951.paramTypes = [];
                                                                              func4951.paramTypes.push([]);
                                                                              func4951.paramTypes.push([]);
                                                                              func4951.paramTypes.push([]);
                                                                              this.methods["lineFrom()to()on()object"] = func4951;
                                                                            setLineNumber(1955);    // compilenode method
                                                                            var func5223 = function(argcv) {    // method lineFrom(1)length(1)direction(1)on(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_pt = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for lineFrom (arg list 1) of lineFrom(1)length(1)direction(1)on(1)"));
                                                                              var var_len = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[1] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for length (arg list 2) of lineFrom(1)length(1)direction(1)on(1)"));
                                                                              var var_radians = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[2] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for direction (arg list 3) of lineFrom(1)length(1)direction(1)on(1)"));
                                                                              var var_canvas__39__ = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[3] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 4) of lineFrom(1)length(1)direction(1)on(1)"));
                                                                              // Start argument checking
                                                                              curarg = 1;
                                                                              onSelf = true;
                                                                              var call5224 = callmethodChecked(this, "Point", [0]);
                                                                              if (!Grace_isTrue(callmethod(call5224, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in lineFrom (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                                          callmethod(call5224, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in length (arg list 2), which corresponds to parameter len, does not have " + 
                                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in direction (arg list 3), which corresponds to parameter radians, does not have " + 
                                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              setLineNumber(1956);    // compilenode identifier
                                                                              if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in on (arg list 4), which corresponds to parameter canvas', does not have " + 
                                                                                          callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              // End argument checking
                                                                              setModuleName("objectdraw");
                                                                              setLineNumber(1955);    // compilenode object
                                                                              var obj5225 = Grace_allocObject(null, "objectdraw.lineFrom()length()direction()on");
                                                                              obj5225.definitionModule = "objectdraw";
                                                                              obj5225.definitionLine = 1955;
                                                                              obj5225.outer = this;
                                                                              var reader_objectdraw_outer5226 = function() {
                                                                                return this.outer;
                                                                              };
                                                                              obj5225.methods["outer"] = reader_objectdraw_outer5226;
                                                                              var obj_init_5225 = function() {
                                                                                var origSuperDepth = superDepth;
                                                                                superDepth = obj5225;
                                                                                setLineNumber(1961);    // compilenode identifier
                                                                                var call5227 = callmethodChecked(var_math, "sin", [1], var_radians);
                                                                                var call5229 = callmethodChecked(var_len, "prefix-", [0]);
                                                                                var prod5231 = callmethodChecked(call5229, "*", [1], call5227);
                                                                                setLineNumber(1960);    // compilenode identifier
                                                                                var call5233 = callmethodChecked(var_math, "cos", [1], var_radians);
                                                                                var prod5236 = callmethodChecked(var_len, "*", [1], call5233);
                                                                                var opresult5238 = callmethodChecked(prod5236, "@", [1], prod5231);
                                                                                var opresult5241 = callmethodChecked(var_pt, "+", [1], opresult5238);
                                                                                var call5242 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call5243 = callmethodChecked(call5242, "lineFrom()to()on()object", [1, 1, 1, 1], var_pt, opresult5241, var_canvas__39__, this);
                                                                                obj5225.superobj = call5243;
                                                                                if (call5243.data) obj5225.data = call5243.data;
                                                                                if (call5243.hasOwnProperty('_value'))
                                                                                    obj5225._value = call5243._value;
                                                                                superDepth = origSuperDepth;
                                                                              };
                                                                              obj_init_5225.apply(obj5225, []);
                                                                              setLineNumber(1955);    // return value
                                                                              if (!Grace_isTrue(callmethod(var_Line, "match", [1], obj5225)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("result of method lineFrom(1)length(1)direction(1)on(1) does not have " + 
                                                                                          callmethod(var_Line, "asString", [0])._value + "."));
                                                                              return obj5225;
                                                                            };
                                                                            func5223.paramTypes = [];
                                                                            func5223.paramTypes.push([]);
                                                                            func5223.paramTypes.push([type_Number, "len"]);
                                                                            func5223.paramTypes.push([type_Number, "radians"]);
                                                                            func5223.paramTypes.push([]);
                                                                            func5223.paramCounts = [1, 1, 1, 1];
                                                                            this.methods["lineFrom()length()direction()on"] = func5223;
                                                                            func5223.definitionLine = 1955;
                                                                            func5223.definitionModule = "objectdraw";
                                                                              var func5244 = function(argcv) {    // method lineFrom(1     )length(1     )direction(1     )on(1     )()object
                                                                                var curarg = 1;
                                                                                var var_pt = arguments[curarg];
                                                                                curarg++;
                                                                                var var_len = arguments[curarg];
                                                                                curarg++;
                                                                                var var_radians = arguments[curarg];
                                                                                curarg++;
                                                                                var var_canvas__39__ = arguments[curarg];
                                                                                curarg++;
                                                                                var inheritingObject = arguments[curarg++];
                                                                                // Start argument processing
                                                                                curarg = 1;
                                                                                onSelf = true;
                                                                                var call5245 = callmethodChecked(this, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call5245, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in lineFrom (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                                            callmethod(call5245, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in length (arg list 2), which corresponds to parameter len, does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in direction (arg list 3), which corresponds to parameter radians, does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                setLineNumber(1956);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in on (arg list 4), which corresponds to parameter canvas', does not have " + 
                                                                                            callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument processing
                                                                                setModuleName("objectdraw");
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var obj5246 = Grace_allocObject(null, "lineFrom()length()direction()on");
                                                                                obj5246.definitionModule = "objectdraw";
                                                                                obj5246.definitionLine = 1955;
                                                                                var inho5246 = inheritingObject;
                                                                                while (inho5246.superobj) inho5246 = inho5246.superobj;
                                                                                inho5246.superobj = obj5246;
                                                                                obj5246.data = inheritingObject.data;
                                                                                if (inheritingObject.hasOwnProperty('_value'))
                                                                                  obj5246._value = inheritingObject._value;
                                                                                obj5246.outer = this;
                                                                                var reader_objectdraw_outer5247 = function() {
                                                                                  return this.outer;
                                                                                };
                                                                                obj5246.methods["outer"] = reader_objectdraw_outer5247;
                                                                                var obj_init_5246 = function() {
                                                                                  var origSuperDepth = superDepth;
                                                                                  superDepth = obj5246;
                                                                                  setLineNumber(1961);    // compilenode identifier
                                                                                  var call5248 = callmethodChecked(var_math, "sin", [1], var_radians);
                                                                                  var call5250 = callmethodChecked(var_len, "prefix-", [0]);
                                                                                  var prod5252 = callmethodChecked(call5250, "*", [1], call5248);
                                                                                  setLineNumber(1960);    // compilenode identifier
                                                                                  var call5254 = callmethodChecked(var_math, "cos", [1], var_radians);
                                                                                  var prod5257 = callmethodChecked(var_len, "*", [1], call5254);
                                                                                  var opresult5259 = callmethodChecked(prod5257, "@", [1], prod5252);
                                                                                  var opresult5262 = callmethodChecked(var_pt, "+", [1], opresult5259);
                                                                                  var call5263 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5264 = callmethodChecked(call5263, "lineFrom()to()on()object", [1, 1, 1, 1], var_pt, opresult5262, var_canvas__39__, this);
                                                                                  obj5246.superobj = call5264;
                                                                                  if (call5264.data) obj5246.data = call5264.data;
                                                                                  if (call5264.hasOwnProperty('_value'))
                                                                                      obj5246._value = call5264._value;
                                                                                  superDepth = origSuperDepth;
                                                                                };
                                                                                obj_init_5246.apply(inheritingObject, []);
                                                                                return obj5246;
                                                                                };
                                                                                func5244.paramTypes = [];
                                                                                func5244.paramTypes.push([]);
                                                                                func5244.paramTypes.push([type_Number, "len"]);
                                                                                func5244.paramTypes.push([type_Number, "radians"]);
                                                                                func5244.paramTypes.push([]);
                                                                                this.methods["lineFrom()length()direction()on()object"] = func5244;
                                                                              setLineNumber(1964);    // compilenode method
                                                                              var func5265 = function(argcv) {    // method textAt(1)with(1)on(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_location__39__ = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for textAt (arg list 1) of textAt(1)with(1)on(1)"));
                                                                                var var_contents__39__ = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[1] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for with (arg list 2) of textAt(1)with(1)on(1)"));
                                                                                var var_canvas__39__ = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[2] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of textAt(1)with(1)on(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                onSelf = true;
                                                                                var call5266 = callmethodChecked(this, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call5266, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in textAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                            callmethod(call5266, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in with (arg list 2), which corresponds to parameter contents', does not have " + 
                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                setLineNumber(1965);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                            callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("objectdraw");
                                                                                setLineNumber(1964);    // compilenode object
                                                                                var obj5267 = Grace_allocObject(null, "objectdraw.textAt()with()on");
                                                                                obj5267.definitionModule = "objectdraw";
                                                                                obj5267.definitionLine = 1964;
                                                                                obj5267.outer = this;
                                                                                var reader_objectdraw_outer5268 = function() {
                                                                                  return this.outer;
                                                                                };
                                                                                obj5267.methods["outer"] = reader_objectdraw_outer5268;
                                                                                var obj_init_5267 = function() {
                                                                                  var origSuperDepth = superDepth;
                                                                                  superDepth = obj5267;
                                                                                  var func5269 = function(argcv) {    // method width
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    if (argcv[0] !== 0)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                                                    setModuleName("objectdraw");
                                                                                    setLineNumber(1975);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5270 = callmethodChecked(this, "wid", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5270)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method width does not have " + 
                                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                                    return call5270;
                                                                                  };
                                                                                  func5269.paramCounts = [0];
                                                                                  obj5267.methods["width"] = func5269;
                                                                                  func5269.definitionLine = 1974;
                                                                                  func5269.definitionModule = "objectdraw";
                                                                                  var func5271 = function(argcv) {    // method draw(1)
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    var var_ctx = arguments[curarg];
                                                                                    curarg++;
                                                                                    if (argcv[0] !== 1)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                                    // Start argument checking
                                                                                    curarg = 1;
                                                                                    setLineNumber(1979);    // compilenode identifier
                                                                                    if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                                callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                    curarg++;
                                                                                    // End argument checking
                                                                                    setModuleName("objectdraw");
                                                                                    setLineNumber(1980);    // compilenode identifier
                                                                                    var call5272 = callmethodChecked(var_ctx, "save", [0]);
                                                                                    setLineNumber(1981);    // compilenode string
                                                                                    var string5273 = new GraceString("pt sans-serif");
                                                                                    onSelf = true;
                                                                                    var call5275 = callmethodChecked(this, "fontSize", [0]);
                                                                                    var string5277 = new GraceString("");
                                                                                    var opresult5279 = callmethodChecked(string5277, "++", [1], call5275);
                                                                                    var opresult5281 = callmethodChecked(opresult5279, "++", [1], string5273);
                                                                                    var call5282 = callmethodChecked(var_ctx, "font:=", [1], opresult5281);
                                                                                    setLineNumber(1982);    // compilenode string
                                                                                    var string5283 = new GraceString(")");
                                                                                    onSelf = true;
                                                                                    var call5285 = callmethodChecked(this, "color", [0]);
                                                                                    var call5286 = callmethodChecked(call5285, "blue", [0]);
                                                                                    var string5288 = new GraceString(", ");
                                                                                    onSelf = true;
                                                                                    var call5290 = callmethodChecked(this, "color", [0]);
                                                                                    var call5291 = callmethodChecked(call5290, "green", [0]);
                                                                                    var string5293 = new GraceString(", ");
                                                                                    onSelf = true;
                                                                                    var call5295 = callmethodChecked(this, "color", [0]);
                                                                                    var call5296 = callmethodChecked(call5295, "red", [0]);
                                                                                    var string5298 = new GraceString("rgb(");
                                                                                    var opresult5300 = callmethodChecked(string5298, "++", [1], call5296);
                                                                                    var opresult5302 = callmethodChecked(opresult5300, "++", [1], string5293);
                                                                                    var opresult5304 = callmethodChecked(opresult5302, "++", [1], call5291);
                                                                                    var opresult5306 = callmethodChecked(opresult5304, "++", [1], string5288);
                                                                                    var opresult5308 = callmethodChecked(opresult5306, "++", [1], call5286);
                                                                                    var opresult5310 = callmethodChecked(opresult5308, "++", [1], string5283);
                                                                                    var call5311 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult5310);
                                                                                    setLineNumber(1983);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5312 = callmethodChecked(this, "contents", [0]);
                                                                                    onSelf = true;
                                                                                    var call5313 = callmethodChecked(this, "location", [0]);
                                                                                    var call5314 = callmethodChecked(call5313, "x", [0]);
                                                                                    onSelf = true;
                                                                                    var call5315 = callmethodChecked(this, "location", [0]);
                                                                                    var call5316 = callmethodChecked(call5315, "y", [0]);
                                                                                    var call5317 = callmethodChecked(var_ctx, "fillText", [3], call5312, call5314, call5316);
                                                                                    setLineNumber(1984);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5318 = callmethodChecked(this, "theContents", [0]);
                                                                                    var call5319 = callmethodChecked(var_ctx, "measureText", [1], call5318);
                                                                                    var call5320 = callmethodChecked(call5319, "width", [0]);
                                                                                    onSelf = true;
                                                                                    var call5321 = callmethodChecked(this, "wid:=", [1], call5320);
                                                                                    setLineNumber(1985);    // compilenode identifier
                                                                                    var call5322 = callmethodChecked(var_ctx, "restore", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5322)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method draw(1) does not have " + 
                                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                                    return call5322;
                                                                                  };
                                                                                  func5271.paramTypes = [];
                                                                                  func5271.paramTypes.push([]);
                                                                                  func5271.paramCounts = [1];
                                                                                  obj5267.methods["draw"] = func5271;
                                                                                  func5271.definitionLine = 1979;
                                                                                  func5271.definitionModule = "objectdraw";
                                                                                  var func5323 = function(argcv) {    // method contents
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    if (argcv[0] !== 0)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents"));
                                                                                    setModuleName("objectdraw");
                                                                                    setLineNumber(1990);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5324 = callmethodChecked(this, "theContents", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], call5324)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method contents does not have " + 
                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                    return call5324;
                                                                                  };
                                                                                  func5323.paramCounts = [0];
                                                                                  obj5267.methods["contents"] = func5323;
                                                                                  func5323.definitionLine = 1989;
                                                                                  func5323.definitionModule = "objectdraw";
                                                                                  var func5325 = function(argcv) {    // method contents:=(1)
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    var var_newContents = arguments[curarg];
                                                                                    curarg++;
                                                                                    if (argcv[0] !== 1)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents:=(1)"));
                                                                                    // Start argument checking
                                                                                    curarg = 1;
                                                                                    setLineNumber(1994);    // compilenode identifier
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("argument 1 in contents:= (arg list 1), which corresponds to parameter newContents, does not have " + 
                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                    curarg++;
                                                                                    // End argument checking
                                                                                    setModuleName("objectdraw");
                                                                                    setLineNumber(1995);    // compilenode identifier
                                                                                    onSelf = true;
                                                                                    var call5326 = callmethodChecked(this, "theContents:=", [1], var_newContents);
                                                                                    setLineNumber(1996);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5327 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5327)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method contents:=(1) does not have " + 
                                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                                    return call5327;
                                                                                  };
                                                                                  func5325.paramTypes = [];
                                                                                  func5325.paramTypes.push([type_String, "newContents"]);
                                                                                  func5325.paramCounts = [1];
                                                                                  obj5267.methods["contents:="] = func5325;
                                                                                  func5325.definitionLine = 1994;
                                                                                  func5325.definitionModule = "objectdraw";
                                                                                  var func5328 = function(argcv) {    // method fontSize:=(1)
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    var var_size__39__ = arguments[curarg];
                                                                                    curarg++;
                                                                                    if (argcv[0] !== 1)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fontSize:=(1)"));
                                                                                    // Start argument checking
                                                                                    curarg = 1;
                                                                                    setLineNumber(2000);    // compilenode identifier
                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("argument 1 in fontSize:= (arg list 1), which corresponds to parameter size', does not have " + 
                                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                                    curarg++;
                                                                                    // End argument checking
                                                                                    setModuleName("objectdraw");
                                                                                    setLineNumber(2001);    // compilenode identifier
                                                                                    onSelf = true;
                                                                                    var call5329 = callmethodChecked(this, "fsize:=", [1], var_size__39__);
                                                                                    setLineNumber(2002);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5330 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5330)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method fontSize:=(1) does not have " + 
                                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                                    return call5330;
                                                                                  };
                                                                                  func5328.paramTypes = [];
                                                                                  func5328.paramTypes.push([type_Number, "size'"]);
                                                                                  func5328.paramCounts = [1];
                                                                                  obj5267.methods["fontSize:="] = func5328;
                                                                                  func5328.definitionLine = 2000;
                                                                                  func5328.definitionModule = "objectdraw";
                                                                                  var func5331 = function(argcv) {    // method fontSize
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    if (argcv[0] !== 0)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fontSize"));
                                                                                    setModuleName("objectdraw");
                                                                                    setLineNumber(2007);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5332 = callmethodChecked(this, "fsize", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5332)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method fontSize does not have " + 
                                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                                    return call5332;
                                                                                  };
                                                                                  func5331.paramCounts = [0];
                                                                                  obj5267.methods["fontSize"] = func5331;
                                                                                  func5331.definitionLine = 2006;
                                                                                  func5331.definitionModule = "objectdraw";
                                                                                  var func5333 = function(argcv) {    // method asString
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    if (argcv[0] !== 0)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                    setModuleName("objectdraw");
                                                                                    setLineNumber(2012);    // compilenode string
                                                                                    var string5334 = new GraceString("");
                                                                                    onSelf = true;
                                                                                    var call5336 = callmethodChecked(this, "color", [0]);
                                                                                    var string5338 = new GraceString(" and color ");
                                                                                    onSelf = true;
                                                                                    var call5340 = callmethodChecked(this, "contents", [0]);
                                                                                    var string5342 = new GraceString(") with value ");
                                                                                    onSelf = true;
                                                                                    var call5344 = callmethodChecked(this, "y", [0]);
                                                                                    var string5346 = new GraceString(",");
                                                                                    onSelf = true;
                                                                                    var call5348 = callmethodChecked(this, "x", [0]);
                                                                                    var string5350 = new GraceString("Text at (");
                                                                                    var opresult5352 = callmethodChecked(string5350, "++", [1], call5348);
                                                                                    var opresult5354 = callmethodChecked(opresult5352, "++", [1], string5346);
                                                                                    var opresult5356 = callmethodChecked(opresult5354, "++", [1], call5344);
                                                                                    var opresult5358 = callmethodChecked(opresult5356, "++", [1], string5342);
                                                                                    var opresult5360 = callmethodChecked(opresult5358, "++", [1], call5340);
                                                                                    var opresult5362 = callmethodChecked(opresult5360, "++", [1], string5338);
                                                                                    var opresult5364 = callmethodChecked(opresult5362, "++", [1], call5336);
                                                                                    var opresult5366 = callmethodChecked(opresult5364, "++", [1], string5334);
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5366)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method asString does not have " + 
                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                    return opresult5366;
                                                                                  };
                                                                                  func5333.paramCounts = [0];
                                                                                  obj5267.methods["asString"] = func5333;
                                                                                  func5333.definitionLine = 2011;
                                                                                  func5333.definitionModule = "objectdraw";
                                                                                  setLineNumber(1968);    // compilenode call
                                                                                  var call5367 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5368 = callmethodChecked(call5367, "drawableAt()on()object", [1, 1, 1], var_location__39__, var_canvas__39__, this);
                                                                                  obj5267.superobj = call5368;
                                                                                  if (call5368.data) obj5267.data = call5368.data;
                                                                                  if (call5368.hasOwnProperty('_value'))
                                                                                      obj5267._value = call5368._value;
                                                                                  setLineNumber(1970);    // compilenode identifier
                                                                                  obj5267.data["theContents"] = var_contents__39__;
                                                                                  var reader_objectdraw_theContents5369 = function() {
                                                                                    return this.data["theContents"];
                                                                                  };
                                                                                  obj5267.methods["theContents"] = reader_objectdraw_theContents5369;
                                                                                  obj5267.data["theContents"] = var_contents__39__;
                                                                                  var writer_objectdraw_theContents5369 = function(argcv, o) {
                                                                                    this.data["theContents"] = o;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  obj5267.methods["theContents:="] = writer_objectdraw_theContents5369;
                                                                                  reader_objectdraw_theContents5369.confidential = true;
                                                                                  writer_objectdraw_theContents5369.confidential = true;
                                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], var_contents__39__)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("initial value of var 'theContents' is not of type String"));
                                                                                  obj5267.mutable = true;
                                                                                  setLineNumber(1971);    // compilenode num
                                                                                  obj5267.data["fsize"] = new GraceNum(10);
                                                                                  var reader_objectdraw_fsize5370 = function() {
                                                                                    return this.data["fsize"];
                                                                                  };
                                                                                  obj5267.methods["fsize"] = reader_objectdraw_fsize5370;
                                                                                  obj5267.data["fsize"] = new GraceNum(10);
                                                                                  var writer_objectdraw_fsize5370 = function(argcv, o) {
                                                                                    this.data["fsize"] = o;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  obj5267.methods["fsize:="] = writer_objectdraw_fsize5370;
                                                                                  writer_objectdraw_fsize5370.confidential = true;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], new GraceNum(10))))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("initial value of var 'fsize' is not of type Number"));
                                                                                  obj5267.mutable = true;
                                                                                  setLineNumber(1972);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5372 = callmethodChecked(this, "fsize", [0]);
                                                                                  onSelf = true;
                                                                                  var call5374 = callmethodChecked(this, "theContents", [0]);
                                                                                  var call5375 = callmethodChecked(call5374, "size", [0]);
                                                                                  var prod5377 = callmethodChecked(call5375, "*", [1], call5372);
                                                                                  var quotient5379 = callmethodChecked(prod5377, "/", [1], new GraceNum(2));
                                                                                  obj5267.data["wid"] = quotient5379;
                                                                                  var reader_objectdraw_wid5380 = function() {
                                                                                    return this.data["wid"];
                                                                                  };
                                                                                  obj5267.methods["wid"] = reader_objectdraw_wid5380;
                                                                                  obj5267.data["wid"] = quotient5379;
                                                                                  var writer_objectdraw_wid5380 = function(argcv, o) {
                                                                                    this.data["wid"] = o;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  obj5267.methods["wid:="] = writer_objectdraw_wid5380;
                                                                                  reader_objectdraw_wid5380.confidential = true;
                                                                                  writer_objectdraw_wid5380.confidential = true;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], quotient5379)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("initial value of var 'wid' is not of type Number"));
                                                                                  obj5267.mutable = true;
                                                                                  setLineNumber(2015);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call5381 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                                  superDepth = origSuperDepth;
                                                                                };
                                                                                obj_init_5267.apply(obj5267, []);
                                                                                setLineNumber(1964);    // return value
                                                                                if (!Grace_isTrue(callmethod(var_Text, "match", [1], obj5267)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method textAt(1)with(1)on(1) does not have " + 
                                                                                            callmethod(var_Text, "asString", [0])._value + "."));
                                                                                return obj5267;
                                                                              };
                                                                              func5265.paramTypes = [];
                                                                              func5265.paramTypes.push([]);
                                                                              func5265.paramTypes.push([type_String, "contents'"]);
                                                                              func5265.paramTypes.push([]);
                                                                              func5265.paramCounts = [1, 1, 1];
                                                                              this.methods["textAt()with()on"] = func5265;
                                                                              func5265.definitionLine = 1964;
                                                                              func5265.definitionModule = "objectdraw";
                                                                                var func5382 = function(argcv) {    // method textAt(1     )with(1     )on(1     )()object
                                                                                  var curarg = 1;
                                                                                  var var_location__39__ = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_contents__39__ = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_canvas__39__ = arguments[curarg];
                                                                                  curarg++;
                                                                                  var inheritingObject = arguments[curarg++];
                                                                                  // Start argument processing
                                                                                  curarg = 1;
                                                                                  onSelf = true;
                                                                                  var call5383 = callmethodChecked(this, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5383, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in textAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                              callmethod(call5383, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in with (arg list 2), which corresponds to parameter contents', does not have " + 
                                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  setLineNumber(1965);    // compilenode identifier
                                                                                  if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                              callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument processing
                                                                                  setModuleName("objectdraw");
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var obj5384 = Grace_allocObject(null, "textAt()with()on");
                                                                                  obj5384.definitionModule = "objectdraw";
                                                                                  obj5384.definitionLine = 1964;
                                                                                  var inho5384 = inheritingObject;
                                                                                  while (inho5384.superobj) inho5384 = inho5384.superobj;
                                                                                  inho5384.superobj = obj5384;
                                                                                  obj5384.data = inheritingObject.data;
                                                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                                                    obj5384._value = inheritingObject._value;
                                                                                  obj5384.outer = this;
                                                                                  var reader_objectdraw_outer5385 = function() {
                                                                                    return this.outer;
                                                                                  };
                                                                                  obj5384.methods["outer"] = reader_objectdraw_outer5385;
                                                                                  var obj_init_5384 = function() {
                                                                                    var origSuperDepth = superDepth;
                                                                                    superDepth = obj5384;
                                                                                    var func5386 = function(argcv) {    // method width
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                                                      setModuleName("objectdraw");
                                                                                      setLineNumber(1975);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5387 = callmethodChecked(this, "wid", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5387)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method width does not have " + 
                                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                                      return call5387;
                                                                                    };
                                                                                    func5386.paramCounts = [0];
                                                                                    obj5384.methods["width"] = func5386;
                                                                                    func5386.definitionLine = 1974;
                                                                                    func5386.definitionModule = "objectdraw";
                                                                                    var func5388 = function(argcv) {    // method draw(1)
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      var var_ctx = arguments[curarg];
                                                                                      curarg++;
                                                                                      if (argcv[0] !== 1)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                                      // Start argument checking
                                                                                      curarg = 1;
                                                                                      setLineNumber(1979);    // compilenode identifier
                                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                                  callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument checking
                                                                                      setModuleName("objectdraw");
                                                                                      setLineNumber(1980);    // compilenode identifier
                                                                                      var call5389 = callmethodChecked(var_ctx, "save", [0]);
                                                                                      setLineNumber(1981);    // compilenode string
                                                                                      var string5390 = new GraceString("pt sans-serif");
                                                                                      onSelf = true;
                                                                                      var call5392 = callmethodChecked(this, "fontSize", [0]);
                                                                                      var string5394 = new GraceString("");
                                                                                      var opresult5396 = callmethodChecked(string5394, "++", [1], call5392);
                                                                                      var opresult5398 = callmethodChecked(opresult5396, "++", [1], string5390);
                                                                                      var call5399 = callmethodChecked(var_ctx, "font:=", [1], opresult5398);
                                                                                      setLineNumber(1982);    // compilenode string
                                                                                      var string5400 = new GraceString(")");
                                                                                      onSelf = true;
                                                                                      var call5402 = callmethodChecked(this, "color", [0]);
                                                                                      var call5403 = callmethodChecked(call5402, "blue", [0]);
                                                                                      var string5405 = new GraceString(", ");
                                                                                      onSelf = true;
                                                                                      var call5407 = callmethodChecked(this, "color", [0]);
                                                                                      var call5408 = callmethodChecked(call5407, "green", [0]);
                                                                                      var string5410 = new GraceString(", ");
                                                                                      onSelf = true;
                                                                                      var call5412 = callmethodChecked(this, "color", [0]);
                                                                                      var call5413 = callmethodChecked(call5412, "red", [0]);
                                                                                      var string5415 = new GraceString("rgb(");
                                                                                      var opresult5417 = callmethodChecked(string5415, "++", [1], call5413);
                                                                                      var opresult5419 = callmethodChecked(opresult5417, "++", [1], string5410);
                                                                                      var opresult5421 = callmethodChecked(opresult5419, "++", [1], call5408);
                                                                                      var opresult5423 = callmethodChecked(opresult5421, "++", [1], string5405);
                                                                                      var opresult5425 = callmethodChecked(opresult5423, "++", [1], call5403);
                                                                                      var opresult5427 = callmethodChecked(opresult5425, "++", [1], string5400);
                                                                                      var call5428 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult5427);
                                                                                      setLineNumber(1983);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5429 = callmethodChecked(this, "contents", [0]);
                                                                                      onSelf = true;
                                                                                      var call5430 = callmethodChecked(this, "location", [0]);
                                                                                      var call5431 = callmethodChecked(call5430, "x", [0]);
                                                                                      onSelf = true;
                                                                                      var call5432 = callmethodChecked(this, "location", [0]);
                                                                                      var call5433 = callmethodChecked(call5432, "y", [0]);
                                                                                      var call5434 = callmethodChecked(var_ctx, "fillText", [3], call5429, call5431, call5433);
                                                                                      setLineNumber(1984);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5435 = callmethodChecked(this, "theContents", [0]);
                                                                                      var call5436 = callmethodChecked(var_ctx, "measureText", [1], call5435);
                                                                                      var call5437 = callmethodChecked(call5436, "width", [0]);
                                                                                      onSelf = true;
                                                                                      var call5438 = callmethodChecked(this, "wid:=", [1], call5437);
                                                                                      setLineNumber(1985);    // compilenode identifier
                                                                                      var call5439 = callmethodChecked(var_ctx, "restore", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5439)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method draw(1) does not have " + 
                                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                                      return call5439;
                                                                                    };
                                                                                    func5388.paramTypes = [];
                                                                                    func5388.paramTypes.push([]);
                                                                                    func5388.paramCounts = [1];
                                                                                    obj5384.methods["draw"] = func5388;
                                                                                    func5388.definitionLine = 1979;
                                                                                    func5388.definitionModule = "objectdraw";
                                                                                    var func5440 = function(argcv) {    // method contents
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents"));
                                                                                      setModuleName("objectdraw");
                                                                                      setLineNumber(1990);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5441 = callmethodChecked(this, "theContents", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], call5441)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method contents does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      return call5441;
                                                                                    };
                                                                                    func5440.paramCounts = [0];
                                                                                    obj5384.methods["contents"] = func5440;
                                                                                    func5440.definitionLine = 1989;
                                                                                    func5440.definitionModule = "objectdraw";
                                                                                    var func5442 = function(argcv) {    // method contents:=(1)
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      var var_newContents = arguments[curarg];
                                                                                      curarg++;
                                                                                      if (argcv[0] !== 1)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents:=(1)"));
                                                                                      // Start argument checking
                                                                                      curarg = 1;
                                                                                      setLineNumber(1994);    // compilenode identifier
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in contents:= (arg list 1), which corresponds to parameter newContents, does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument checking
                                                                                      setModuleName("objectdraw");
                                                                                      setLineNumber(1995);    // compilenode identifier
                                                                                      onSelf = true;
                                                                                      var call5443 = callmethodChecked(this, "theContents:=", [1], var_newContents);
                                                                                      setLineNumber(1996);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5444 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5444)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method contents:=(1) does not have " + 
                                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                                      return call5444;
                                                                                    };
                                                                                    func5442.paramTypes = [];
                                                                                    func5442.paramTypes.push([type_String, "newContents"]);
                                                                                    func5442.paramCounts = [1];
                                                                                    obj5384.methods["contents:="] = func5442;
                                                                                    func5442.definitionLine = 1994;
                                                                                    func5442.definitionModule = "objectdraw";
                                                                                    var func5445 = function(argcv) {    // method fontSize:=(1)
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      var var_size__39__ = arguments[curarg];
                                                                                      curarg++;
                                                                                      if (argcv[0] !== 1)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fontSize:=(1)"));
                                                                                      // Start argument checking
                                                                                      curarg = 1;
                                                                                      setLineNumber(2000);    // compilenode identifier
                                                                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in fontSize:= (arg list 1), which corresponds to parameter size', does not have " + 
                                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument checking
                                                                                      setModuleName("objectdraw");
                                                                                      setLineNumber(2001);    // compilenode identifier
                                                                                      onSelf = true;
                                                                                      var call5446 = callmethodChecked(this, "fsize:=", [1], var_size__39__);
                                                                                      setLineNumber(2002);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5447 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5447)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method fontSize:=(1) does not have " + 
                                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                                      return call5447;
                                                                                    };
                                                                                    func5445.paramTypes = [];
                                                                                    func5445.paramTypes.push([type_Number, "size'"]);
                                                                                    func5445.paramCounts = [1];
                                                                                    obj5384.methods["fontSize:="] = func5445;
                                                                                    func5445.definitionLine = 2000;
                                                                                    func5445.definitionModule = "objectdraw";
                                                                                    var func5448 = function(argcv) {    // method fontSize
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fontSize"));
                                                                                      setModuleName("objectdraw");
                                                                                      setLineNumber(2007);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5449 = callmethodChecked(this, "fsize", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5449)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method fontSize does not have " + 
                                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                                      return call5449;
                                                                                    };
                                                                                    func5448.paramCounts = [0];
                                                                                    obj5384.methods["fontSize"] = func5448;
                                                                                    func5448.definitionLine = 2006;
                                                                                    func5448.definitionModule = "objectdraw";
                                                                                    var func5450 = function(argcv) {    // method asString
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                      setModuleName("objectdraw");
                                                                                      setLineNumber(2012);    // compilenode string
                                                                                      var string5451 = new GraceString("");
                                                                                      onSelf = true;
                                                                                      var call5453 = callmethodChecked(this, "color", [0]);
                                                                                      var string5455 = new GraceString(" and color ");
                                                                                      onSelf = true;
                                                                                      var call5457 = callmethodChecked(this, "contents", [0]);
                                                                                      var string5459 = new GraceString(") with value ");
                                                                                      onSelf = true;
                                                                                      var call5461 = callmethodChecked(this, "y", [0]);
                                                                                      var string5463 = new GraceString(",");
                                                                                      onSelf = true;
                                                                                      var call5465 = callmethodChecked(this, "x", [0]);
                                                                                      var string5467 = new GraceString("Text at (");
                                                                                      var opresult5469 = callmethodChecked(string5467, "++", [1], call5465);
                                                                                      var opresult5471 = callmethodChecked(opresult5469, "++", [1], string5463);
                                                                                      var opresult5473 = callmethodChecked(opresult5471, "++", [1], call5461);
                                                                                      var opresult5475 = callmethodChecked(opresult5473, "++", [1], string5459);
                                                                                      var opresult5477 = callmethodChecked(opresult5475, "++", [1], call5457);
                                                                                      var opresult5479 = callmethodChecked(opresult5477, "++", [1], string5455);
                                                                                      var opresult5481 = callmethodChecked(opresult5479, "++", [1], call5453);
                                                                                      var opresult5483 = callmethodChecked(opresult5481, "++", [1], string5451);
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5483)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method asString does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      return opresult5483;
                                                                                    };
                                                                                    func5450.paramCounts = [0];
                                                                                    obj5384.methods["asString"] = func5450;
                                                                                    func5450.definitionLine = 2011;
                                                                                    func5450.definitionModule = "objectdraw";
                                                                                    setLineNumber(1968);    // compilenode call
                                                                                    var call5484 = callmethodChecked(superDepth, "outer", [0]);
                                                                                    onOuter = true;
                                                                                    onSelf = true;
                                                                                    var call5485 = callmethodChecked(call5484, "drawableAt()on()object", [1, 1, 1], var_location__39__, var_canvas__39__, this);
                                                                                    obj5384.superobj = call5485;
                                                                                    if (call5485.data) obj5384.data = call5485.data;
                                                                                    if (call5485.hasOwnProperty('_value'))
                                                                                        obj5384._value = call5485._value;
                                                                                    setLineNumber(1970);    // compilenode identifier
                                                                                    obj5384.data["theContents"] = var_contents__39__;
                                                                                    var reader_objectdraw_theContents5486 = function() {
                                                                                      return this.data["theContents"];
                                                                                    };
                                                                                    obj5384.methods["theContents"] = reader_objectdraw_theContents5486;
                                                                                    obj5384.data["theContents"] = var_contents__39__;
                                                                                    var writer_objectdraw_theContents5486 = function(argcv, o) {
                                                                                      this.data["theContents"] = o;
                                                                                      return GraceDone;
                                                                                    };
                                                                                    obj5384.methods["theContents:="] = writer_objectdraw_theContents5486;
                                                                                    reader_objectdraw_theContents5486.confidential = true;
                                                                                    writer_objectdraw_theContents5486.confidential = true;
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], var_contents__39__)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("initial value of var 'theContents' is not of type String"));
                                                                                    obj5384.mutable = true;
                                                                                    setLineNumber(1971);    // compilenode num
                                                                                    obj5384.data["fsize"] = new GraceNum(10);
                                                                                    var reader_objectdraw_fsize5487 = function() {
                                                                                      return this.data["fsize"];
                                                                                    };
                                                                                    obj5384.methods["fsize"] = reader_objectdraw_fsize5487;
                                                                                    obj5384.data["fsize"] = new GraceNum(10);
                                                                                    var writer_objectdraw_fsize5487 = function(argcv, o) {
                                                                                      this.data["fsize"] = o;
                                                                                      return GraceDone;
                                                                                    };
                                                                                    obj5384.methods["fsize:="] = writer_objectdraw_fsize5487;
                                                                                    writer_objectdraw_fsize5487.confidential = true;
                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], new GraceNum(10))))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("initial value of var 'fsize' is not of type Number"));
                                                                                    obj5384.mutable = true;
                                                                                    setLineNumber(1972);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5489 = callmethodChecked(this, "fsize", [0]);
                                                                                    onSelf = true;
                                                                                    var call5491 = callmethodChecked(this, "theContents", [0]);
                                                                                    var call5492 = callmethodChecked(call5491, "size", [0]);
                                                                                    var prod5494 = callmethodChecked(call5492, "*", [1], call5489);
                                                                                    var quotient5496 = callmethodChecked(prod5494, "/", [1], new GraceNum(2));
                                                                                    obj5384.data["wid"] = quotient5496;
                                                                                    var reader_objectdraw_wid5497 = function() {
                                                                                      return this.data["wid"];
                                                                                    };
                                                                                    obj5384.methods["wid"] = reader_objectdraw_wid5497;
                                                                                    obj5384.data["wid"] = quotient5496;
                                                                                    var writer_objectdraw_wid5497 = function(argcv, o) {
                                                                                      this.data["wid"] = o;
                                                                                      return GraceDone;
                                                                                    };
                                                                                    obj5384.methods["wid:="] = writer_objectdraw_wid5497;
                                                                                    reader_objectdraw_wid5497.confidential = true;
                                                                                    writer_objectdraw_wid5497.confidential = true;
                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], quotient5496)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("initial value of var 'wid' is not of type Number"));
                                                                                    obj5384.mutable = true;
                                                                                    setLineNumber(2015);    // compilenode identifier
                                                                                    onSelf = true;
                                                                                    var call5498 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                                    superDepth = origSuperDepth;
                                                                                  };
                                                                                  obj_init_5384.apply(inheritingObject, []);
                                                                                  return obj5384;
                                                                                  };
                                                                                  func5382.paramTypes = [];
                                                                                  func5382.paramTypes.push([]);
                                                                                  func5382.paramTypes.push([type_String, "contents'"]);
                                                                                  func5382.paramTypes.push([]);
                                                                                  this.methods["textAt()with()on()object"] = func5382;
                                                                                setLineNumber(2018);    // compilenode method
                                                                                var func5499 = function(argcv) {    // method textBoxWith(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_contents__39__ = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for textBoxWith(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in textBoxWith (arg list 1), which corresponds to parameter contents', does not have " + 
                                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("objectdraw");
                                                                                  var obj5500 = Grace_allocObject(null, "objectdraw.textBoxWith");
                                                                                  obj5500.definitionModule = "objectdraw";
                                                                                  obj5500.definitionLine = 2018;
                                                                                  obj5500.outer = this;
                                                                                  var reader_objectdraw_outer5501 = function() {
                                                                                    return this.outer;
                                                                                  };
                                                                                  obj5500.methods["outer"] = reader_objectdraw_outer5501;
                                                                                  var obj_init_5500 = function() {
                                                                                    var origSuperDepth = superDepth;
                                                                                    superDepth = obj5500;
                                                                                    var func5502 = function(argcv) {    // method contents
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents"));
                                                                                      setModuleName("objectdraw");
                                                                                      setLineNumber(2026);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5503 = callmethodChecked(this, "element", [0]);
                                                                                      var call5504 = callmethodChecked(call5503, "textContent", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], call5504)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method contents does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      return call5504;
                                                                                    };
                                                                                    func5502.paramCounts = [0];
                                                                                    obj5500.methods["contents"] = func5502;
                                                                                    func5502.definitionLine = 2025;
                                                                                    func5502.definitionModule = "objectdraw";
                                                                                    var func5505 = function(argcv) {    // method contents:=(1)
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      var var_value = arguments[curarg];
                                                                                      curarg++;
                                                                                      if (argcv[0] !== 1)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents:=(1)"));
                                                                                      // Start argument checking
                                                                                      curarg = 1;
                                                                                      setLineNumber(2030);    // compilenode identifier
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in contents:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument checking
                                                                                      setModuleName("objectdraw");
                                                                                      setLineNumber(2031);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5506 = callmethodChecked(this, "element", [0]);
                                                                                      var call5507 = callmethodChecked(call5506, "textContent:=", [1], var_value);
                                                                                      setLineNumber(2032);    // return value
                                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method contents:=(1) does not have " + 
                                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                                      return var_done;
                                                                                    };
                                                                                    func5505.paramTypes = [];
                                                                                    func5505.paramTypes.push([type_String, "value"]);
                                                                                    func5505.paramCounts = [1];
                                                                                    obj5500.methods["contents:="] = func5505;
                                                                                    func5505.definitionLine = 2030;
                                                                                    func5505.definitionModule = "objectdraw";
                                                                                    var func5508 = function(argcv) {    // method asString
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                      setModuleName("objectdraw");
                                                                                      setLineNumber(2037);    // compilenode string
                                                                                      var string5509 = new GraceString("");
                                                                                      onSelf = true;
                                                                                      var call5511 = callmethodChecked(this, "contents", [0]);
                                                                                      var string5513 = new GraceString("a text box showing ");
                                                                                      var opresult5515 = callmethodChecked(string5513, "++", [1], call5511);
                                                                                      var opresult5517 = callmethodChecked(opresult5515, "++", [1], string5509);
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5517)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method asString does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      return opresult5517;
                                                                                    };
                                                                                    func5508.paramCounts = [0];
                                                                                    obj5500.methods["asString"] = func5508;
                                                                                    func5508.definitionLine = 2036;
                                                                                    func5508.definitionModule = "objectdraw";
                                                                                    setLineNumber(2022);    // compilenode string
                                                                                    var string5518 = new GraceString("span");
                                                                                    var call5519 = callmethodChecked(superDepth, "outer", [0]);
                                                                                    onOuter = true;
                                                                                    onSelf = true;
                                                                                    var call5520 = callmethodChecked(call5519, "componentOfElementType()object", [1, 1], string5518, this);
                                                                                    obj5500.superobj = call5520;
                                                                                    if (call5520.data) obj5500.data = call5520.data;
                                                                                    if (call5520.hasOwnProperty('_value'))
                                                                                        obj5500._value = call5520._value;
                                                                                    setLineNumber(2040);    // compilenode identifier
                                                                                    onSelf = true;
                                                                                    var call5521 = callmethodChecked(this, "contents:=", [1], var_contents__39__);
                                                                                    superDepth = origSuperDepth;
                                                                                  };
                                                                                  obj_init_5500.apply(obj5500, []);
                                                                                  setLineNumber(2018);    // return value
                                                                                  if (!Grace_isTrue(callmethod(var_TextBox, "match", [1], obj5500)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method textBoxWith(1) does not have " + 
                                                                                              callmethod(var_TextBox, "asString", [0])._value + "."));
                                                                                  return obj5500;
                                                                                };
                                                                                func5499.paramTypes = [];
                                                                                func5499.paramTypes.push([type_String, "contents'"]);
                                                                                func5499.paramCounts = [1];
                                                                                this.methods["textBoxWith"] = func5499;
                                                                                func5499.definitionLine = 2018;
                                                                                func5499.definitionModule = "objectdraw";
                                                                                  var func5522 = function(argcv) {    // method textBoxWith(1     )()object
                                                                                    var curarg = 1;
                                                                                    var var_contents__39__ = arguments[curarg];
                                                                                    curarg++;
                                                                                    var inheritingObject = arguments[curarg++];
                                                                                    // Start argument processing
                                                                                    curarg = 1;
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("argument 1 in textBoxWith (arg list 1), which corresponds to parameter contents', does not have " + 
                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                    curarg++;
                                                                                    // End argument processing
                                                                                    setModuleName("objectdraw");
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var obj5523 = Grace_allocObject(null, "textBoxWith");
                                                                                    obj5523.definitionModule = "objectdraw";
                                                                                    obj5523.definitionLine = 2018;
                                                                                    var inho5523 = inheritingObject;
                                                                                    while (inho5523.superobj) inho5523 = inho5523.superobj;
                                                                                    inho5523.superobj = obj5523;
                                                                                    obj5523.data = inheritingObject.data;
                                                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                                                      obj5523._value = inheritingObject._value;
                                                                                    obj5523.outer = this;
                                                                                    var reader_objectdraw_outer5524 = function() {
                                                                                      return this.outer;
                                                                                    };
                                                                                    obj5523.methods["outer"] = reader_objectdraw_outer5524;
                                                                                    var obj_init_5523 = function() {
                                                                                      var origSuperDepth = superDepth;
                                                                                      superDepth = obj5523;
                                                                                      var func5525 = function(argcv) {    // method contents
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var curarg = 1;
                                                                                        if (argcv[0] !== 0)
                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents"));
                                                                                        setModuleName("objectdraw");
                                                                                        setLineNumber(2026);    // compilenode call
                                                                                        onSelf = true;
                                                                                        var call5526 = callmethodChecked(this, "element", [0]);
                                                                                        var call5527 = callmethodChecked(call5526, "textContent", [0]);
                                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], call5527)))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("result of method contents does not have " + 
                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                        return call5527;
                                                                                      };
                                                                                      func5525.paramCounts = [0];
                                                                                      obj5523.methods["contents"] = func5525;
                                                                                      func5525.definitionLine = 2025;
                                                                                      func5525.definitionModule = "objectdraw";
                                                                                      var func5528 = function(argcv) {    // method contents:=(1)
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var curarg = 1;
                                                                                        var var_value = arguments[curarg];
                                                                                        curarg++;
                                                                                        if (argcv[0] !== 1)
                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents:=(1)"));
                                                                                        // Start argument checking
                                                                                        curarg = 1;
                                                                                        setLineNumber(2030);    // compilenode identifier
                                                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("argument 1 in contents:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                        curarg++;
                                                                                        // End argument checking
                                                                                        setModuleName("objectdraw");
                                                                                        setLineNumber(2031);    // compilenode call
                                                                                        onSelf = true;
                                                                                        var call5529 = callmethodChecked(this, "element", [0]);
                                                                                        var call5530 = callmethodChecked(call5529, "textContent:=", [1], var_value);
                                                                                        setLineNumber(2032);    // return value
                                                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("result of method contents:=(1) does not have " + 
                                                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                                                        return var_done;
                                                                                      };
                                                                                      func5528.paramTypes = [];
                                                                                      func5528.paramTypes.push([type_String, "value"]);
                                                                                      func5528.paramCounts = [1];
                                                                                      obj5523.methods["contents:="] = func5528;
                                                                                      func5528.definitionLine = 2030;
                                                                                      func5528.definitionModule = "objectdraw";
                                                                                      var func5531 = function(argcv) {    // method asString
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var curarg = 1;
                                                                                        if (argcv[0] !== 0)
                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                        setModuleName("objectdraw");
                                                                                        setLineNumber(2037);    // compilenode string
                                                                                        var string5532 = new GraceString("");
                                                                                        onSelf = true;
                                                                                        var call5534 = callmethodChecked(this, "contents", [0]);
                                                                                        var string5536 = new GraceString("a text box showing ");
                                                                                        var opresult5538 = callmethodChecked(string5536, "++", [1], call5534);
                                                                                        var opresult5540 = callmethodChecked(opresult5538, "++", [1], string5532);
                                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5540)))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("result of method asString does not have " + 
                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                        return opresult5540;
                                                                                      };
                                                                                      func5531.paramCounts = [0];
                                                                                      obj5523.methods["asString"] = func5531;
                                                                                      func5531.definitionLine = 2036;
                                                                                      func5531.definitionModule = "objectdraw";
                                                                                      setLineNumber(2022);    // compilenode string
                                                                                      var string5541 = new GraceString("span");
                                                                                      var call5542 = callmethodChecked(superDepth, "outer", [0]);
                                                                                      onOuter = true;
                                                                                      onSelf = true;
                                                                                      var call5543 = callmethodChecked(call5542, "componentOfElementType()object", [1, 1], string5541, this);
                                                                                      obj5523.superobj = call5543;
                                                                                      if (call5543.data) obj5523.data = call5543.data;
                                                                                      if (call5543.hasOwnProperty('_value'))
                                                                                          obj5523._value = call5543._value;
                                                                                      setLineNumber(2040);    // compilenode identifier
                                                                                      onSelf = true;
                                                                                      var call5544 = callmethodChecked(this, "contents:=", [1], var_contents__39__);
                                                                                      superDepth = origSuperDepth;
                                                                                    };
                                                                                    obj_init_5523.apply(inheritingObject, []);
                                                                                    return obj5523;
                                                                                    };
                                                                                    func5522.paramTypes = [];
                                                                                    func5522.paramTypes.push([type_String, "contents'"]);
                                                                                    this.methods["textBoxWith()object"] = func5522;
                                                                                  setLineNumber(2043);    // compilenode method
                                                                                  var func5545 = function(argcv) {    // method buttonLabeled(1)
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    var var_label__39__ = arguments[curarg];
                                                                                    curarg++;
                                                                                    if (argcv[0] !== 1)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buttonLabeled(1)"));
                                                                                    // Start argument checking
                                                                                    curarg = 1;
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("argument 1 in buttonLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                    curarg++;
                                                                                    // End argument checking
                                                                                    setModuleName("objectdraw");
                                                                                    var obj5546 = Grace_allocObject(null, "objectdraw.buttonLabeled");
                                                                                    obj5546.definitionModule = "objectdraw";
                                                                                    obj5546.definitionLine = 2043;
                                                                                    obj5546.outer = this;
                                                                                    var reader_objectdraw_outer5547 = function() {
                                                                                      return this.outer;
                                                                                    };
                                                                                    obj5546.methods["outer"] = reader_objectdraw_outer5547;
                                                                                    var obj_init_5546 = function() {
                                                                                      var origSuperDepth = superDepth;
                                                                                      superDepth = obj5546;
                                                                                      var func5548 = function(argcv) {    // method asString
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var curarg = 1;
                                                                                        if (argcv[0] !== 0)
                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                        setModuleName("objectdraw");
                                                                                        setLineNumber(2048);    // compilenode string
                                                                                        var string5549 = new GraceString("");
                                                                                        onSelf = true;
                                                                                        var call5551 = callmethodChecked(this, "label", [0]);
                                                                                        var string5553 = new GraceString("a button labeled: ");
                                                                                        var opresult5555 = callmethodChecked(string5553, "++", [1], call5551);
                                                                                        var opresult5557 = callmethodChecked(opresult5555, "++", [1], string5549);
                                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5557)))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("result of method asString does not have " + 
                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                        return opresult5557;
                                                                                      };
                                                                                      func5548.paramCounts = [0];
                                                                                      obj5546.methods["asString"] = func5548;
                                                                                      func5548.definitionLine = 2047;
                                                                                      func5548.definitionModule = "objectdraw";
                                                                                      setLineNumber(2045);    // compilenode string
                                                                                      var string5558 = new GraceString("button");
                                                                                      var call5559 = callmethodChecked(superDepth, "outer", [0]);
                                                                                      onOuter = true;
                                                                                      onSelf = true;
                                                                                      var call5560 = callmethodChecked(call5559, "labeledWidgetOfElementType()labeled()object", [1, 1, 1], string5558, var_label__39__, this);
                                                                                      obj5546.superobj = call5560;
                                                                                      if (call5560.data) obj5546.data = call5560.data;
                                                                                      if (call5560.hasOwnProperty('_value'))
                                                                                          obj5546._value = call5560._value;
                                                                                      superDepth = origSuperDepth;
                                                                                    };
                                                                                    obj_init_5546.apply(obj5546, []);
                                                                                    setLineNumber(2043);    // return value
                                                                                    if (!Grace_isTrue(callmethod(var_Button, "match", [1], obj5546)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method buttonLabeled(1) does not have " + 
                                                                                                callmethod(var_Button, "asString", [0])._value + "."));
                                                                                    return obj5546;
                                                                                  };
                                                                                  func5545.paramTypes = [];
                                                                                  func5545.paramTypes.push([type_String, "label'"]);
                                                                                  func5545.paramCounts = [1];
                                                                                  this.methods["buttonLabeled"] = func5545;
                                                                                  func5545.definitionLine = 2043;
                                                                                  func5545.definitionModule = "objectdraw";
                                                                                    var func5561 = function(argcv) {    // method buttonLabeled(1     )()object
                                                                                      var curarg = 1;
                                                                                      var var_label__39__ = arguments[curarg];
                                                                                      curarg++;
                                                                                      var inheritingObject = arguments[curarg++];
                                                                                      // Start argument processing
                                                                                      curarg = 1;
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in buttonLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument processing
                                                                                      setModuleName("objectdraw");
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var obj5562 = Grace_allocObject(null, "buttonLabeled");
                                                                                      obj5562.definitionModule = "objectdraw";
                                                                                      obj5562.definitionLine = 2043;
                                                                                      var inho5562 = inheritingObject;
                                                                                      while (inho5562.superobj) inho5562 = inho5562.superobj;
                                                                                      inho5562.superobj = obj5562;
                                                                                      obj5562.data = inheritingObject.data;
                                                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                                                        obj5562._value = inheritingObject._value;
                                                                                      obj5562.outer = this;
                                                                                      var reader_objectdraw_outer5563 = function() {
                                                                                        return this.outer;
                                                                                      };
                                                                                      obj5562.methods["outer"] = reader_objectdraw_outer5563;
                                                                                      var obj_init_5562 = function() {
                                                                                        var origSuperDepth = superDepth;
                                                                                        superDepth = obj5562;
                                                                                        var func5564 = function(argcv) {    // method asString
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var curarg = 1;
                                                                                          if (argcv[0] !== 0)
                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                          setModuleName("objectdraw");
                                                                                          setLineNumber(2048);    // compilenode string
                                                                                          var string5565 = new GraceString("");
                                                                                          onSelf = true;
                                                                                          var call5567 = callmethodChecked(this, "label", [0]);
                                                                                          var string5569 = new GraceString("a button labeled: ");
                                                                                          var opresult5571 = callmethodChecked(string5569, "++", [1], call5567);
                                                                                          var opresult5573 = callmethodChecked(opresult5571, "++", [1], string5565);
                                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5573)))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("result of method asString does not have " + 
                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                          return opresult5573;
                                                                                        };
                                                                                        func5564.paramCounts = [0];
                                                                                        obj5562.methods["asString"] = func5564;
                                                                                        func5564.definitionLine = 2047;
                                                                                        func5564.definitionModule = "objectdraw";
                                                                                        setLineNumber(2045);    // compilenode string
                                                                                        var string5574 = new GraceString("button");
                                                                                        var call5575 = callmethodChecked(superDepth, "outer", [0]);
                                                                                        onOuter = true;
                                                                                        onSelf = true;
                                                                                        var call5576 = callmethodChecked(call5575, "labeledWidgetOfElementType()labeled()object", [1, 1, 1], string5574, var_label__39__, this);
                                                                                        obj5562.superobj = call5576;
                                                                                        if (call5576.data) obj5562.data = call5576.data;
                                                                                        if (call5576.hasOwnProperty('_value'))
                                                                                            obj5562._value = call5576._value;
                                                                                        superDepth = origSuperDepth;
                                                                                      };
                                                                                      obj_init_5562.apply(inheritingObject, []);
                                                                                      return obj5562;
                                                                                      };
                                                                                      func5561.paramTypes = [];
                                                                                      func5561.paramTypes.push([type_String, "label'"]);
                                                                                      this.methods["buttonLabeled()object"] = func5561;
                                                                                    setLineNumber(2065);    // compilenode method
                                                                                    var func5577 = function(argcv) {    // method textFieldLabeled(1)
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      var var_label__39__ = arguments[curarg];
                                                                                      curarg++;
                                                                                      if (argcv[0] !== 1)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for textFieldLabeled(1)"));
                                                                                      // Start argument checking
                                                                                      curarg = 1;
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in textFieldLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument checking
                                                                                      setModuleName("objectdraw");
                                                                                      var obj5578 = Grace_allocObject(null, "objectdraw.textFieldLabeled");
                                                                                      obj5578.definitionModule = "objectdraw";
                                                                                      obj5578.definitionLine = 2065;
                                                                                      obj5578.outer = this;
                                                                                      var reader_objectdraw_outer5579 = function() {
                                                                                        return this.outer;
                                                                                      };
                                                                                      obj5578.methods["outer"] = reader_objectdraw_outer5579;
                                                                                      var obj_init_5578 = function() {
                                                                                        var origSuperDepth = superDepth;
                                                                                        superDepth = obj5578;
                                                                                        var func5580 = function(argcv) {    // method text
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var curarg = 1;
                                                                                          if (argcv[0] !== 0)
                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for text"));
                                                                                          setModuleName("objectdraw");
                                                                                          setLineNumber(2072);    // compilenode call
                                                                                          onSelf = true;
                                                                                          var call5581 = callmethodChecked(this, "element", [0]);
                                                                                          var call5582 = callmethodChecked(call5581, "value", [0]);
                                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], call5582)))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("result of method text does not have " + 
                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                          return call5582;
                                                                                        };
                                                                                        func5580.paramCounts = [0];
                                                                                        obj5578.methods["text"] = func5580;
                                                                                        func5580.definitionLine = 2070;
                                                                                        func5580.definitionModule = "objectdraw";
                                                                                        var func5583 = function(argcv) {    // method text:=(1)
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var curarg = 1;
                                                                                          var var_value = arguments[curarg];
                                                                                          curarg++;
                                                                                          if (argcv[0] !== 1)
                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for text:=(1)"));
                                                                                          // Start argument checking
                                                                                          curarg = 1;
                                                                                          setLineNumber(2075);    // compilenode identifier
                                                                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("argument 1 in text:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                          curarg++;
                                                                                          // End argument checking
                                                                                          setModuleName("objectdraw");
                                                                                          setLineNumber(2077);    // compilenode call
                                                                                          onSelf = true;
                                                                                          var call5584 = callmethodChecked(this, "element", [0]);
                                                                                          var call5585 = callmethodChecked(call5584, "value:=", [1], var_value);
                                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5585)))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("result of method text:=(1) does not have " + 
                                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                                          return call5585;
                                                                                        };
                                                                                        func5583.paramTypes = [];
                                                                                        func5583.paramTypes.push([type_String, "value"]);
                                                                                        func5583.paramCounts = [1];
                                                                                        obj5578.methods["text:="] = func5583;
                                                                                        func5583.definitionLine = 2075;
                                                                                        func5583.definitionModule = "objectdraw";
                                                                                        var func5586 = function(argcv) {    // method asString
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var curarg = 1;
                                                                                          if (argcv[0] !== 0)
                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                          setModuleName("objectdraw");
                                                                                          var if5587 = GraceDone;
                                                                                          setLineNumber(2082);    // compilenode string
                                                                                          var string5588 = new GraceString("");
                                                                                          onSelf = true;
                                                                                          var call5590 = callmethodChecked(this, "label", [0]);
                                                                                          var opresult5592 = callmethodChecked(call5590, "==", [1], string5588);
                                                                                          if (Grace_isTrue(opresult5592)) {
                                                                                            setLineNumber(2083);    // compilenode string
                                                                                            var string5593 = new GraceString("");
                                                                                            onSelf = true;
                                                                                            var call5595 = callmethodChecked(this, "text", [0]);
                                                                                            var string5597 = new GraceString("a text field with ");
                                                                                            var opresult5599 = callmethodChecked(string5597, "++", [1], call5595);
                                                                                            var opresult5601 = callmethodChecked(opresult5599, "++", [1], string5593);
                                                                                            if5587 = opresult5601;
                                                                                          } else {
                                                                                            setLineNumber(2085);    // compilenode string
                                                                                            var string5602 = new GraceString("");
                                                                                            onSelf = true;
                                                                                            var call5604 = callmethodChecked(this, "text", [0]);
                                                                                            var string5606 = new GraceString(" with ");
                                                                                            onSelf = true;
                                                                                            var call5608 = callmethodChecked(this, "label", [0]);
                                                                                            var string5610 = new GraceString("a text field labeled: ");
                                                                                            var opresult5612 = callmethodChecked(string5610, "++", [1], call5608);
                                                                                            var opresult5614 = callmethodChecked(opresult5612, "++", [1], string5606);
                                                                                            var opresult5616 = callmethodChecked(opresult5614, "++", [1], call5604);
                                                                                            var opresult5618 = callmethodChecked(opresult5616, "++", [1], string5602);
                                                                                            if5587 = opresult5618;
                                                                                          }
                                                                                          setLineNumber(2082);    // return value
                                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], if5587)))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("result of method asString does not have " + 
                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                          return if5587;
                                                                                        };
                                                                                        func5586.paramCounts = [0];
                                                                                        obj5578.methods["asString"] = func5586;
                                                                                        func5586.definitionLine = 2081;
                                                                                        func5586.definitionModule = "objectdraw";
                                                                                        setLineNumber(2068);    // compilenode string
                                                                                        var string5619 = new GraceString("text");
                                                                                        var call5620 = callmethodChecked(superDepth, "outer", [0]);
                                                                                        onOuter = true;
                                                                                        onSelf = true;
                                                                                        var call5621 = callmethodChecked(call5620, "fieldOfType()labeled()object", [1, 1, 1], string5619, var_label__39__, this);
                                                                                        obj5578.superobj = call5621;
                                                                                        if (call5621.data) obj5578.data = call5621.data;
                                                                                        if (call5621.hasOwnProperty('_value'))
                                                                                            obj5578._value = call5621._value;
                                                                                        superDepth = origSuperDepth;
                                                                                      };
                                                                                      obj_init_5578.apply(obj5578, []);
                                                                                      setLineNumber(2065);    // return value
                                                                                      if (!Grace_isTrue(callmethod(var_TextField, "match", [1], obj5578)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method textFieldLabeled(1) does not have " + 
                                                                                                  callmethod(var_TextField, "asString", [0])._value + "."));
                                                                                      return obj5578;
                                                                                    };
                                                                                    func5577.paramTypes = [];
                                                                                    func5577.paramTypes.push([type_String, "label'"]);
                                                                                    func5577.paramCounts = [1];
                                                                                    this.methods["textFieldLabeled"] = func5577;
                                                                                    func5577.definitionLine = 2065;
                                                                                    func5577.definitionModule = "objectdraw";
                                                                                      var func5622 = function(argcv) {    // method textFieldLabeled(1     )()object
                                                                                        var curarg = 1;
                                                                                        var var_label__39__ = arguments[curarg];
                                                                                        curarg++;
                                                                                        var inheritingObject = arguments[curarg++];
                                                                                        // Start argument processing
                                                                                        curarg = 1;
                                                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("argument 1 in textFieldLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                        curarg++;
                                                                                        // End argument processing
                                                                                        setModuleName("objectdraw");
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var obj5623 = Grace_allocObject(null, "textFieldLabeled");
                                                                                        obj5623.definitionModule = "objectdraw";
                                                                                        obj5623.definitionLine = 2065;
                                                                                        var inho5623 = inheritingObject;
                                                                                        while (inho5623.superobj) inho5623 = inho5623.superobj;
                                                                                        inho5623.superobj = obj5623;
                                                                                        obj5623.data = inheritingObject.data;
                                                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                                                          obj5623._value = inheritingObject._value;
                                                                                        obj5623.outer = this;
                                                                                        var reader_objectdraw_outer5624 = function() {
                                                                                          return this.outer;
                                                                                        };
                                                                                        obj5623.methods["outer"] = reader_objectdraw_outer5624;
                                                                                        var obj_init_5623 = function() {
                                                                                          var origSuperDepth = superDepth;
                                                                                          superDepth = obj5623;
                                                                                          var func5625 = function(argcv) {    // method text
                                                                                            var returnTarget = invocationCount;
                                                                                            invocationCount++;
                                                                                            var curarg = 1;
                                                                                            if (argcv[0] !== 0)
                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for text"));
                                                                                            setModuleName("objectdraw");
                                                                                            setLineNumber(2072);    // compilenode call
                                                                                            onSelf = true;
                                                                                            var call5626 = callmethodChecked(this, "element", [0]);
                                                                                            var call5627 = callmethodChecked(call5626, "value", [0]);
                                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], call5627)))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("result of method text does not have " + 
                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                            return call5627;
                                                                                          };
                                                                                          func5625.paramCounts = [0];
                                                                                          obj5623.methods["text"] = func5625;
                                                                                          func5625.definitionLine = 2070;
                                                                                          func5625.definitionModule = "objectdraw";
                                                                                          var func5628 = function(argcv) {    // method text:=(1)
                                                                                            var returnTarget = invocationCount;
                                                                                            invocationCount++;
                                                                                            var curarg = 1;
                                                                                            var var_value = arguments[curarg];
                                                                                            curarg++;
                                                                                            if (argcv[0] !== 1)
                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for text:=(1)"));
                                                                                            // Start argument checking
                                                                                            curarg = 1;
                                                                                            setLineNumber(2075);    // compilenode identifier
                                                                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("argument 1 in text:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                            curarg++;
                                                                                            // End argument checking
                                                                                            setModuleName("objectdraw");
                                                                                            setLineNumber(2077);    // compilenode call
                                                                                            onSelf = true;
                                                                                            var call5629 = callmethodChecked(this, "element", [0]);
                                                                                            var call5630 = callmethodChecked(call5629, "value:=", [1], var_value);
                                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5630)))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("result of method text:=(1) does not have " + 
                                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                                            return call5630;
                                                                                          };
                                                                                          func5628.paramTypes = [];
                                                                                          func5628.paramTypes.push([type_String, "value"]);
                                                                                          func5628.paramCounts = [1];
                                                                                          obj5623.methods["text:="] = func5628;
                                                                                          func5628.definitionLine = 2075;
                                                                                          func5628.definitionModule = "objectdraw";
                                                                                          var func5631 = function(argcv) {    // method asString
                                                                                            var returnTarget = invocationCount;
                                                                                            invocationCount++;
                                                                                            var curarg = 1;
                                                                                            if (argcv[0] !== 0)
                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                            setModuleName("objectdraw");
                                                                                            var if5632 = GraceDone;
                                                                                            setLineNumber(2082);    // compilenode string
                                                                                            var string5633 = new GraceString("");
                                                                                            onSelf = true;
                                                                                            var call5635 = callmethodChecked(this, "label", [0]);
                                                                                            var opresult5637 = callmethodChecked(call5635, "==", [1], string5633);
                                                                                            if (Grace_isTrue(opresult5637)) {
                                                                                              setLineNumber(2083);    // compilenode string
                                                                                              var string5638 = new GraceString("");
                                                                                              onSelf = true;
                                                                                              var call5640 = callmethodChecked(this, "text", [0]);
                                                                                              var string5642 = new GraceString("a text field with ");
                                                                                              var opresult5644 = callmethodChecked(string5642, "++", [1], call5640);
                                                                                              var opresult5646 = callmethodChecked(opresult5644, "++", [1], string5638);
                                                                                              if5632 = opresult5646;
                                                                                            } else {
                                                                                              setLineNumber(2085);    // compilenode string
                                                                                              var string5647 = new GraceString("");
                                                                                              onSelf = true;
                                                                                              var call5649 = callmethodChecked(this, "text", [0]);
                                                                                              var string5651 = new GraceString(" with ");
                                                                                              onSelf = true;
                                                                                              var call5653 = callmethodChecked(this, "label", [0]);
                                                                                              var string5655 = new GraceString("a text field labeled: ");
                                                                                              var opresult5657 = callmethodChecked(string5655, "++", [1], call5653);
                                                                                              var opresult5659 = callmethodChecked(opresult5657, "++", [1], string5651);
                                                                                              var opresult5661 = callmethodChecked(opresult5659, "++", [1], call5649);
                                                                                              var opresult5663 = callmethodChecked(opresult5661, "++", [1], string5647);
                                                                                              if5632 = opresult5663;
                                                                                            }
                                                                                            setLineNumber(2082);    // return value
                                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], if5632)))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("result of method asString does not have " + 
                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                            return if5632;
                                                                                          };
                                                                                          func5631.paramCounts = [0];
                                                                                          obj5623.methods["asString"] = func5631;
                                                                                          func5631.definitionLine = 2081;
                                                                                          func5631.definitionModule = "objectdraw";
                                                                                          setLineNumber(2068);    // compilenode string
                                                                                          var string5664 = new GraceString("text");
                                                                                          var call5665 = callmethodChecked(superDepth, "outer", [0]);
                                                                                          onOuter = true;
                                                                                          onSelf = true;
                                                                                          var call5666 = callmethodChecked(call5665, "fieldOfType()labeled()object", [1, 1, 1], string5664, var_label__39__, this);
                                                                                          obj5623.superobj = call5666;
                                                                                          if (call5666.data) obj5623.data = call5666.data;
                                                                                          if (call5666.hasOwnProperty('_value'))
                                                                                              obj5623._value = call5666._value;
                                                                                          superDepth = origSuperDepth;
                                                                                        };
                                                                                        obj_init_5623.apply(inheritingObject, []);
                                                                                        return obj5623;
                                                                                        };
                                                                                        func5622.paramTypes = [];
                                                                                        func5622.paramTypes.push([type_String, "label'"]);
                                                                                        this.methods["textFieldLabeled()object"] = func5622;
                                                                                      setLineNumber(2090);    // compilenode method
                                                                                      var func5667 = function(argcv) {    // method textFieldUnlabeled
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var curarg = 1;
                                                                                        if (argcv[0] !== 0)
                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for textFieldUnlabeled"));
                                                                                        setModuleName("objectdraw");
                                                                                        var obj5668 = Grace_allocObject(null, "objectdraw.textFieldUnlabeled");
                                                                                        obj5668.definitionModule = "objectdraw";
                                                                                        obj5668.definitionLine = 2090;
                                                                                        obj5668.outer = this;
                                                                                        var reader_objectdraw_outer5669 = function() {
                                                                                          return this.outer;
                                                                                        };
                                                                                        obj5668.methods["outer"] = reader_objectdraw_outer5669;
                                                                                        var obj_init_5668 = function() {
                                                                                          var origSuperDepth = superDepth;
                                                                                          superDepth = obj5668;
                                                                                          setLineNumber(2093);    // compilenode string
                                                                                          var string5670 = new GraceString("");
                                                                                          var call5671 = callmethodChecked(superDepth, "outer", [0]);
                                                                                          onOuter = true;
                                                                                          onSelf = true;
                                                                                          var call5672 = callmethodChecked(call5671, "textFieldLabeled()object", [1, 1], string5670, this);
                                                                                          obj5668.superobj = call5672;
                                                                                          if (call5672.data) obj5668.data = call5672.data;
                                                                                          if (call5672.hasOwnProperty('_value'))
                                                                                              obj5668._value = call5672._value;
                                                                                          superDepth = origSuperDepth;
                                                                                        };
                                                                                        obj_init_5668.apply(obj5668, []);
                                                                                        setLineNumber(2090);    // return value
                                                                                        if (!Grace_isTrue(callmethod(var_TextField, "match", [1], obj5668)))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("result of method textFieldUnlabeled does not have " + 
                                                                                                    callmethod(var_TextField, "asString", [0])._value + "."));
                                                                                        return obj5668;
                                                                                      };
                                                                                      func5667.paramCounts = [0];
                                                                                      this.methods["textFieldUnlabeled"] = func5667;
                                                                                      func5667.definitionLine = 2090;
                                                                                      func5667.definitionModule = "objectdraw";
                                                                                        var func5673 = function(argcv) {    // method textFieldUnlabeled()object
                                                                                          var curarg = 1;
                                                                                          var inheritingObject = arguments[curarg++];
                                                                                          // Start argument processing
                                                                                          curarg = 1;
                                                                                          // End argument processing
                                                                                          setModuleName("objectdraw");
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var obj5674 = Grace_allocObject(null, "textFieldUnlabeled");
                                                                                          obj5674.definitionModule = "objectdraw";
                                                                                          obj5674.definitionLine = 2090;
                                                                                          var inho5674 = inheritingObject;
                                                                                          while (inho5674.superobj) inho5674 = inho5674.superobj;
                                                                                          inho5674.superobj = obj5674;
                                                                                          obj5674.data = inheritingObject.data;
                                                                                          if (inheritingObject.hasOwnProperty('_value'))
                                                                                            obj5674._value = inheritingObject._value;
                                                                                          obj5674.outer = this;
                                                                                          var reader_objectdraw_outer5675 = function() {
                                                                                            return this.outer;
                                                                                          };
                                                                                          obj5674.methods["outer"] = reader_objectdraw_outer5675;
                                                                                          var obj_init_5674 = function() {
                                                                                            var origSuperDepth = superDepth;
                                                                                            superDepth = obj5674;
                                                                                            setLineNumber(2093);    // compilenode string
                                                                                            var string5676 = new GraceString("");
                                                                                            var call5677 = callmethodChecked(superDepth, "outer", [0]);
                                                                                            onOuter = true;
                                                                                            onSelf = true;
                                                                                            var call5678 = callmethodChecked(call5677, "textFieldLabeled()object", [1, 1], string5676, this);
                                                                                            obj5674.superobj = call5678;
                                                                                            if (call5678.data) obj5674.data = call5678.data;
                                                                                            if (call5678.hasOwnProperty('_value'))
                                                                                                obj5674._value = call5678._value;
                                                                                            superDepth = origSuperDepth;
                                                                                          };
                                                                                          obj_init_5674.apply(inheritingObject, []);
                                                                                          return obj5674;
                                                                                          };
                                                                                          this.methods["textFieldUnlabeled()object"] = func5673;
                                                                                        setLineNumber(2097);    // compilenode method
                                                                                        var func5679 = function(argcv) {    // method passwordFieldLabeled(1)
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var curarg = 1;
                                                                                          var var_lab = arguments[curarg];
                                                                                          curarg++;
                                                                                          if (argcv[0] !== 1)
                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for passwordFieldLabeled(1)"));
                                                                                          // Start argument checking
                                                                                          curarg = 1;
                                                                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("argument 1 in passwordFieldLabeled (arg list 1), which corresponds to parameter lab, does not have " + 
                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                          curarg++;
                                                                                          // End argument checking
                                                                                          setModuleName("objectdraw");
                                                                                          var obj5680 = Grace_allocObject(null, "objectdraw.passwordFieldLabeled");
                                                                                          obj5680.definitionModule = "objectdraw";
                                                                                          obj5680.definitionLine = 2097;
                                                                                          obj5680.outer = this;
                                                                                          var reader_objectdraw_outer5681 = function() {
                                                                                            return this.outer;
                                                                                          };
                                                                                          obj5680.methods["outer"] = reader_objectdraw_outer5681;
                                                                                          var obj_init_5680 = function() {
                                                                                            var origSuperDepth = superDepth;
                                                                                            superDepth = obj5680;
                                                                                            var func5682 = function(argcv) {    // method asString
                                                                                              var returnTarget = invocationCount;
                                                                                              invocationCount++;
                                                                                              var curarg = 1;
                                                                                              if (argcv[0] !== 0)
                                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                              setModuleName("objectdraw");
                                                                                              var if5683 = GraceDone;
                                                                                              setLineNumber(2106);    // compilenode string
                                                                                              var string5684 = new GraceString("");
                                                                                              onSelf = true;
                                                                                              var call5686 = callmethodChecked(this, "label", [0]);
                                                                                              var opresult5688 = callmethodChecked(call5686, "==", [1], string5684);
                                                                                              if (Grace_isTrue(opresult5688)) {
                                                                                                setLineNumber(2107);    // compilenode string
                                                                                                var string5689 = new GraceString("a password field");
                                                                                                if5683 = string5689;
                                                                                              } else {
                                                                                                setLineNumber(2109);    // compilenode string
                                                                                                var string5690 = new GraceString("");
                                                                                                onSelf = true;
                                                                                                var call5692 = callmethodChecked(this, "label", [0]);
                                                                                                var string5694 = new GraceString("a password field labeled: ");
                                                                                                var opresult5696 = callmethodChecked(string5694, "++", [1], call5692);
                                                                                                var opresult5698 = callmethodChecked(opresult5696, "++", [1], string5690);
                                                                                                if5683 = opresult5698;
                                                                                              }
                                                                                              setLineNumber(2106);    // return value
                                                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], if5683)))
                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                      new GraceString("result of method asString does not have " + 
                                                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                                                              return if5683;
                                                                                            };
                                                                                            func5682.paramCounts = [0];
                                                                                            obj5680.methods["asString"] = func5682;
                                                                                            func5682.definitionLine = 2104;
                                                                                            func5682.definitionModule = "objectdraw";
                                                                                            setLineNumber(2100);    // compilenode call
                                                                                            var call5699 = callmethodChecked(superDepth, "outer", [0]);
                                                                                            onOuter = true;
                                                                                            onSelf = true;
                                                                                            var call5700 = callmethodChecked(call5699, "textFieldLabeled()object", [1, 1], var_lab, this);
                                                                                            obj5680.superobj = call5700;
                                                                                            if (call5700.data) obj5680.data = call5700.data;
                                                                                            if (call5700.hasOwnProperty('_value'))
                                                                                                obj5680._value = call5700._value;
                                                                                            setLineNumber(2102);    // compilenode string
                                                                                            var string5701 = new GraceString("type");
                                                                                            var string5702 = new GraceString("password");
                                                                                            onSelf = true;
                                                                                            var call5703 = callmethodChecked(this, "element", [0]);
                                                                                            var call5704 = callmethodChecked(call5703, "setAttribute", [2], string5701, string5702);
                                                                                            superDepth = origSuperDepth;
                                                                                          };
                                                                                          obj_init_5680.apply(obj5680, []);
                                                                                          setLineNumber(2097);    // return value
                                                                                          if (!Grace_isTrue(callmethod(var_Input, "match", [1], obj5680)))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("result of method passwordFieldLabeled(1) does not have " + 
                                                                                                      callmethod(var_Input, "asString", [0])._value + "."));
                                                                                          return obj5680;
                                                                                        };
                                                                                        func5679.paramTypes = [];
                                                                                        func5679.paramTypes.push([type_String, "lab"]);
                                                                                        func5679.paramCounts = [1];
                                                                                        this.methods["passwordFieldLabeled"] = func5679;
                                                                                        func5679.definitionLine = 2097;
                                                                                        func5679.definitionModule = "objectdraw";
                                                                                          var func5705 = function(argcv) {    // method passwordFieldLabeled(1     )()object
                                                                                            var curarg = 1;
                                                                                            var var_lab = arguments[curarg];
                                                                                            curarg++;
                                                                                            var inheritingObject = arguments[curarg++];
                                                                                            // Start argument processing
                                                                                            curarg = 1;
                                                                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("argument 1 in passwordFieldLabeled (arg list 1), which corresponds to parameter lab, does not have " + 
                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                            curarg++;
                                                                                            // End argument processing
                                                                                            setModuleName("objectdraw");
                                                                                            var returnTarget = invocationCount;
                                                                                            invocationCount++;
                                                                                            var obj5706 = Grace_allocObject(null, "passwordFieldLabeled");
                                                                                            obj5706.definitionModule = "objectdraw";
                                                                                            obj5706.definitionLine = 2097;
                                                                                            var inho5706 = inheritingObject;
                                                                                            while (inho5706.superobj) inho5706 = inho5706.superobj;
                                                                                            inho5706.superobj = obj5706;
                                                                                            obj5706.data = inheritingObject.data;
                                                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                                                              obj5706._value = inheritingObject._value;
                                                                                            obj5706.outer = this;
                                                                                            var reader_objectdraw_outer5707 = function() {
                                                                                              return this.outer;
                                                                                            };
                                                                                            obj5706.methods["outer"] = reader_objectdraw_outer5707;
                                                                                            var obj_init_5706 = function() {
                                                                                              var origSuperDepth = superDepth;
                                                                                              superDepth = obj5706;
                                                                                              var func5708 = function(argcv) {    // method asString
                                                                                                var returnTarget = invocationCount;
                                                                                                invocationCount++;
                                                                                                var curarg = 1;
                                                                                                if (argcv[0] !== 0)
                                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                setModuleName("objectdraw");
                                                                                                var if5709 = GraceDone;
                                                                                                setLineNumber(2106);    // compilenode string
                                                                                                var string5710 = new GraceString("");
                                                                                                onSelf = true;
                                                                                                var call5712 = callmethodChecked(this, "label", [0]);
                                                                                                var opresult5714 = callmethodChecked(call5712, "==", [1], string5710);
                                                                                                if (Grace_isTrue(opresult5714)) {
                                                                                                  setLineNumber(2107);    // compilenode string
                                                                                                  var string5715 = new GraceString("a password field");
                                                                                                  if5709 = string5715;
                                                                                                } else {
                                                                                                  setLineNumber(2109);    // compilenode string
                                                                                                  var string5716 = new GraceString("");
                                                                                                  onSelf = true;
                                                                                                  var call5718 = callmethodChecked(this, "label", [0]);
                                                                                                  var string5720 = new GraceString("a password field labeled: ");
                                                                                                  var opresult5722 = callmethodChecked(string5720, "++", [1], call5718);
                                                                                                  var opresult5724 = callmethodChecked(opresult5722, "++", [1], string5716);
                                                                                                  if5709 = opresult5724;
                                                                                                }
                                                                                                setLineNumber(2106);    // return value
                                                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], if5709)))
                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                        new GraceString("result of method asString does not have " + 
                                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                                return if5709;
                                                                                              };
                                                                                              func5708.paramCounts = [0];
                                                                                              obj5706.methods["asString"] = func5708;
                                                                                              func5708.definitionLine = 2104;
                                                                                              func5708.definitionModule = "objectdraw";
                                                                                              setLineNumber(2100);    // compilenode call
                                                                                              var call5725 = callmethodChecked(superDepth, "outer", [0]);
                                                                                              onOuter = true;
                                                                                              onSelf = true;
                                                                                              var call5726 = callmethodChecked(call5725, "textFieldLabeled()object", [1, 1], var_lab, this);
                                                                                              obj5706.superobj = call5726;
                                                                                              if (call5726.data) obj5706.data = call5726.data;
                                                                                              if (call5726.hasOwnProperty('_value'))
                                                                                                  obj5706._value = call5726._value;
                                                                                              setLineNumber(2102);    // compilenode string
                                                                                              var string5727 = new GraceString("type");
                                                                                              var string5728 = new GraceString("password");
                                                                                              onSelf = true;
                                                                                              var call5729 = callmethodChecked(this, "element", [0]);
                                                                                              var call5730 = callmethodChecked(call5729, "setAttribute", [2], string5727, string5728);
                                                                                              superDepth = origSuperDepth;
                                                                                            };
                                                                                            obj_init_5706.apply(inheritingObject, []);
                                                                                            return obj5706;
                                                                                            };
                                                                                            func5705.paramTypes = [];
                                                                                            func5705.paramTypes.push([type_String, "lab"]);
                                                                                            this.methods["passwordFieldLabeled()object"] = func5705;
                                                                                          setLineNumber(2115);    // compilenode method
                                                                                          var func5731 = function(argcv) {    // method passwordFieldUnlabeled
                                                                                            var returnTarget = invocationCount;
                                                                                            invocationCount++;
                                                                                            var curarg = 1;
                                                                                            if (argcv[0] !== 0)
                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for passwordFieldUnlabeled"));
                                                                                            setModuleName("objectdraw");
                                                                                            var obj5732 = Grace_allocObject(null, "objectdraw.passwordFieldUnlabeled");
                                                                                            obj5732.definitionModule = "objectdraw";
                                                                                            obj5732.definitionLine = 2115;
                                                                                            obj5732.outer = this;
                                                                                            var reader_objectdraw_outer5733 = function() {
                                                                                              return this.outer;
                                                                                            };
                                                                                            obj5732.methods["outer"] = reader_objectdraw_outer5733;
                                                                                            var obj_init_5732 = function() {
                                                                                              var origSuperDepth = superDepth;
                                                                                              superDepth = obj5732;
                                                                                              setLineNumber(2116);    // compilenode string
                                                                                              var string5734 = new GraceString("");
                                                                                              var call5735 = callmethodChecked(superDepth, "outer", [0]);
                                                                                              onOuter = true;
                                                                                              onSelf = true;
                                                                                              var call5736 = callmethodChecked(call5735, "passwordFieldLabeled()object", [1, 1], string5734, this);
                                                                                              obj5732.superobj = call5736;
                                                                                              if (call5736.data) obj5732.data = call5736.data;
                                                                                              if (call5736.hasOwnProperty('_value'))
                                                                                                  obj5732._value = call5736._value;
                                                                                              superDepth = origSuperDepth;
                                                                                            };
                                                                                            obj_init_5732.apply(obj5732, []);
                                                                                            setLineNumber(2115);    // return value
                                                                                            if (!Grace_isTrue(callmethod(var_TextField, "match", [1], obj5732)))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("result of method passwordFieldUnlabeled does not have " + 
                                                                                                        callmethod(var_TextField, "asString", [0])._value + "."));
                                                                                            return obj5732;
                                                                                          };
                                                                                          func5731.paramCounts = [0];
                                                                                          this.methods["passwordFieldUnlabeled"] = func5731;
                                                                                          func5731.definitionLine = 2115;
                                                                                          func5731.definitionModule = "objectdraw";
                                                                                            var func5737 = function(argcv) {    // method passwordFieldUnlabeled()object
                                                                                              var curarg = 1;
                                                                                              var inheritingObject = arguments[curarg++];
                                                                                              // Start argument processing
                                                                                              curarg = 1;
                                                                                              // End argument processing
                                                                                              setModuleName("objectdraw");
                                                                                              var returnTarget = invocationCount;
                                                                                              invocationCount++;
                                                                                              var obj5738 = Grace_allocObject(null, "passwordFieldUnlabeled");
                                                                                              obj5738.definitionModule = "objectdraw";
                                                                                              obj5738.definitionLine = 2115;
                                                                                              var inho5738 = inheritingObject;
                                                                                              while (inho5738.superobj) inho5738 = inho5738.superobj;
                                                                                              inho5738.superobj = obj5738;
                                                                                              obj5738.data = inheritingObject.data;
                                                                                              if (inheritingObject.hasOwnProperty('_value'))
                                                                                                obj5738._value = inheritingObject._value;
                                                                                              obj5738.outer = this;
                                                                                              var reader_objectdraw_outer5739 = function() {
                                                                                                return this.outer;
                                                                                              };
                                                                                              obj5738.methods["outer"] = reader_objectdraw_outer5739;
                                                                                              var obj_init_5738 = function() {
                                                                                                var origSuperDepth = superDepth;
                                                                                                superDepth = obj5738;
                                                                                                setLineNumber(2116);    // compilenode string
                                                                                                var string5740 = new GraceString("");
                                                                                                var call5741 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                onOuter = true;
                                                                                                onSelf = true;
                                                                                                var call5742 = callmethodChecked(call5741, "passwordFieldLabeled()object", [1, 1], string5740, this);
                                                                                                obj5738.superobj = call5742;
                                                                                                if (call5742.data) obj5738.data = call5742.data;
                                                                                                if (call5742.hasOwnProperty('_value'))
                                                                                                    obj5738._value = call5742._value;
                                                                                                superDepth = origSuperDepth;
                                                                                              };
                                                                                              obj_init_5738.apply(inheritingObject, []);
                                                                                              return obj5738;
                                                                                              };
                                                                                              this.methods["passwordFieldUnlabeled()object"] = func5737;
                                                                                            setLineNumber(2119);    // compilenode method
                                                                                            var func5743 = function(argcv) {    // method numberFieldLabeled(1)
                                                                                              var returnTarget = invocationCount;
                                                                                              invocationCount++;
                                                                                              var curarg = 1;
                                                                                              var var_label__39__ = arguments[curarg];
                                                                                              curarg++;
                                                                                              if (argcv[0] !== 1)
                                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for numberFieldLabeled(1)"));
                                                                                              // Start argument checking
                                                                                              curarg = 1;
                                                                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                      new GraceString("argument 1 in numberFieldLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                                                              curarg++;
                                                                                              // End argument checking
                                                                                              setModuleName("objectdraw");
                                                                                              var obj5744 = Grace_allocObject(null, "objectdraw.numberFieldLabeled");
                                                                                              obj5744.definitionModule = "objectdraw";
                                                                                              obj5744.definitionLine = 2119;
                                                                                              obj5744.outer = this;
                                                                                              var reader_objectdraw_outer5745 = function() {
                                                                                                return this.outer;
                                                                                              };
                                                                                              obj5744.methods["outer"] = reader_objectdraw_outer5745;
                                                                                              var obj_init_5744 = function() {
                                                                                                var origSuperDepth = superDepth;
                                                                                                superDepth = obj5744;
                                                                                                var func5746 = function(argcv) {    // method number
                                                                                                  var returnTarget = invocationCount;
                                                                                                  invocationCount++;
                                                                                                  var curarg = 1;
                                                                                                  if (argcv[0] !== 0)
                                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for number"));
                                                                                                  setModuleName("objectdraw");
                                                                                                  setLineNumber(2126);    // compilenode call
                                                                                                  onSelf = true;
                                                                                                  var call5747 = callmethodChecked(this, "element", [0]);
                                                                                                  var call5748 = callmethodChecked(call5747, "value", [0]);
                                                                                                  var call5749 = callmethodChecked(call5748, "asNumber", [0]);
                                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5749)))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("result of method number does not have " + 
                                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                  return call5749;
                                                                                                };
                                                                                                func5746.paramCounts = [0];
                                                                                                obj5744.methods["number"] = func5746;
                                                                                                func5746.definitionLine = 2125;
                                                                                                func5746.definitionModule = "objectdraw";
                                                                                                var func5750 = function(argcv) {    // method number:=(1)
                                                                                                  var returnTarget = invocationCount;
                                                                                                  invocationCount++;
                                                                                                  var curarg = 1;
                                                                                                  var var_value = arguments[curarg];
                                                                                                  curarg++;
                                                                                                  if (argcv[0] !== 1)
                                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for number:=(1)"));
                                                                                                  // Start argument checking
                                                                                                  curarg = 1;
                                                                                                  setLineNumber(2130);    // compilenode identifier
                                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("argument 1 in number:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                  curarg++;
                                                                                                  // End argument checking
                                                                                                  setModuleName("objectdraw");
                                                                                                  setLineNumber(2131);    // compilenode call
                                                                                                  onSelf = true;
                                                                                                  var call5751 = callmethodChecked(this, "element", [0]);
                                                                                                  var call5752 = callmethodChecked(call5751, "value:=", [1], var_value);
                                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5752)))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("result of method number:=(1) does not have " + 
                                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                  return call5752;
                                                                                                };
                                                                                                func5750.paramTypes = [];
                                                                                                func5750.paramTypes.push([type_Number, "value"]);
                                                                                                func5750.paramCounts = [1];
                                                                                                obj5744.methods["number:="] = func5750;
                                                                                                func5750.definitionLine = 2130;
                                                                                                func5750.definitionModule = "objectdraw";
                                                                                                var func5753 = function(argcv) {    // method asString
                                                                                                  var returnTarget = invocationCount;
                                                                                                  invocationCount++;
                                                                                                  var curarg = 1;
                                                                                                  if (argcv[0] !== 0)
                                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                  setModuleName("objectdraw");
                                                                                                  var if5754 = GraceDone;
                                                                                                  setLineNumber(2136);    // compilenode string
                                                                                                  var string5755 = new GraceString("");
                                                                                                  onSelf = true;
                                                                                                  var call5757 = callmethodChecked(this, "label", [0]);
                                                                                                  var opresult5759 = callmethodChecked(call5757, "==", [1], string5755);
                                                                                                  if (Grace_isTrue(opresult5759)) {
                                                                                                    setLineNumber(2137);    // compilenode string
                                                                                                    var string5760 = new GraceString("");
                                                                                                    onSelf = true;
                                                                                                    var call5762 = callmethodChecked(this, "number", [0]);
                                                                                                    var string5764 = new GraceString("a number field holding ");
                                                                                                    var opresult5766 = callmethodChecked(string5764, "++", [1], call5762);
                                                                                                    var opresult5768 = callmethodChecked(opresult5766, "++", [1], string5760);
                                                                                                    if5754 = opresult5768;
                                                                                                  } else {
                                                                                                    setLineNumber(2139);    // compilenode string
                                                                                                    var string5769 = new GraceString("");
                                                                                                    onSelf = true;
                                                                                                    var call5771 = callmethodChecked(this, "number", [0]);
                                                                                                    var string5773 = new GraceString(" holding ");
                                                                                                    onSelf = true;
                                                                                                    var call5775 = callmethodChecked(this, "label", [0]);
                                                                                                    var string5777 = new GraceString("a number field labeled: ");
                                                                                                    var opresult5779 = callmethodChecked(string5777, "++", [1], call5775);
                                                                                                    var opresult5781 = callmethodChecked(opresult5779, "++", [1], string5773);
                                                                                                    var opresult5783 = callmethodChecked(opresult5781, "++", [1], call5771);
                                                                                                    var opresult5785 = callmethodChecked(opresult5783, "++", [1], string5769);
                                                                                                    if5754 = opresult5785;
                                                                                                  }
                                                                                                  setLineNumber(2136);    // return value
                                                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], if5754)))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("result of method asString does not have " + 
                                                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                                                  return if5754;
                                                                                                };
                                                                                                func5753.paramCounts = [0];
                                                                                                obj5744.methods["asString"] = func5753;
                                                                                                func5753.definitionLine = 2135;
                                                                                                func5753.definitionModule = "objectdraw";
                                                                                                setLineNumber(2122);    // compilenode string
                                                                                                var string5786 = new GraceString("number");
                                                                                                var call5787 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                onOuter = true;
                                                                                                onSelf = true;
                                                                                                var call5788 = callmethodChecked(call5787, "fieldOfType()labeled()object", [1, 1, 1], string5786, var_label__39__, this);
                                                                                                obj5744.superobj = call5788;
                                                                                                if (call5788.data) obj5744.data = call5788.data;
                                                                                                if (call5788.hasOwnProperty('_value'))
                                                                                                    obj5744._value = call5788._value;
                                                                                                superDepth = origSuperDepth;
                                                                                              };
                                                                                              obj_init_5744.apply(obj5744, []);
                                                                                              setLineNumber(2119);    // return value
                                                                                              if (!Grace_isTrue(callmethod(var_NumberField, "match", [1], obj5744)))
                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                      new GraceString("result of method numberFieldLabeled(1) does not have " + 
                                                                                                          callmethod(var_NumberField, "asString", [0])._value + "."));
                                                                                              return obj5744;
                                                                                            };
                                                                                            func5743.paramTypes = [];
                                                                                            func5743.paramTypes.push([type_String, "label'"]);
                                                                                            func5743.paramCounts = [1];
                                                                                            this.methods["numberFieldLabeled"] = func5743;
                                                                                            func5743.definitionLine = 2119;
                                                                                            func5743.definitionModule = "objectdraw";
                                                                                              var func5789 = function(argcv) {    // method numberFieldLabeled(1     )()object
                                                                                                var curarg = 1;
                                                                                                var var_label__39__ = arguments[curarg];
                                                                                                curarg++;
                                                                                                var inheritingObject = arguments[curarg++];
                                                                                                // Start argument processing
                                                                                                curarg = 1;
                                                                                                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                        new GraceString("argument 1 in numberFieldLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                                curarg++;
                                                                                                // End argument processing
                                                                                                setModuleName("objectdraw");
                                                                                                var returnTarget = invocationCount;
                                                                                                invocationCount++;
                                                                                                var obj5790 = Grace_allocObject(null, "numberFieldLabeled");
                                                                                                obj5790.definitionModule = "objectdraw";
                                                                                                obj5790.definitionLine = 2119;
                                                                                                var inho5790 = inheritingObject;
                                                                                                while (inho5790.superobj) inho5790 = inho5790.superobj;
                                                                                                inho5790.superobj = obj5790;
                                                                                                obj5790.data = inheritingObject.data;
                                                                                                if (inheritingObject.hasOwnProperty('_value'))
                                                                                                  obj5790._value = inheritingObject._value;
                                                                                                obj5790.outer = this;
                                                                                                var reader_objectdraw_outer5791 = function() {
                                                                                                  return this.outer;
                                                                                                };
                                                                                                obj5790.methods["outer"] = reader_objectdraw_outer5791;
                                                                                                var obj_init_5790 = function() {
                                                                                                  var origSuperDepth = superDepth;
                                                                                                  superDepth = obj5790;
                                                                                                  var func5792 = function(argcv) {    // method number
                                                                                                    var returnTarget = invocationCount;
                                                                                                    invocationCount++;
                                                                                                    var curarg = 1;
                                                                                                    if (argcv[0] !== 0)
                                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for number"));
                                                                                                    setModuleName("objectdraw");
                                                                                                    setLineNumber(2126);    // compilenode call
                                                                                                    onSelf = true;
                                                                                                    var call5793 = callmethodChecked(this, "element", [0]);
                                                                                                    var call5794 = callmethodChecked(call5793, "value", [0]);
                                                                                                    var call5795 = callmethodChecked(call5794, "asNumber", [0]);
                                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5795)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("result of method number does not have " + 
                                                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                    return call5795;
                                                                                                  };
                                                                                                  func5792.paramCounts = [0];
                                                                                                  obj5790.methods["number"] = func5792;
                                                                                                  func5792.definitionLine = 2125;
                                                                                                  func5792.definitionModule = "objectdraw";
                                                                                                  var func5796 = function(argcv) {    // method number:=(1)
                                                                                                    var returnTarget = invocationCount;
                                                                                                    invocationCount++;
                                                                                                    var curarg = 1;
                                                                                                    var var_value = arguments[curarg];
                                                                                                    curarg++;
                                                                                                    if (argcv[0] !== 1)
                                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for number:=(1)"));
                                                                                                    // Start argument checking
                                                                                                    curarg = 1;
                                                                                                    setLineNumber(2130);    // compilenode identifier
                                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("argument 1 in number:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                    curarg++;
                                                                                                    // End argument checking
                                                                                                    setModuleName("objectdraw");
                                                                                                    setLineNumber(2131);    // compilenode call
                                                                                                    onSelf = true;
                                                                                                    var call5797 = callmethodChecked(this, "element", [0]);
                                                                                                    var call5798 = callmethodChecked(call5797, "value:=", [1], var_value);
                                                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5798)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("result of method number:=(1) does not have " + 
                                                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                    return call5798;
                                                                                                  };
                                                                                                  func5796.paramTypes = [];
                                                                                                  func5796.paramTypes.push([type_Number, "value"]);
                                                                                                  func5796.paramCounts = [1];
                                                                                                  obj5790.methods["number:="] = func5796;
                                                                                                  func5796.definitionLine = 2130;
                                                                                                  func5796.definitionModule = "objectdraw";
                                                                                                  var func5799 = function(argcv) {    // method asString
                                                                                                    var returnTarget = invocationCount;
                                                                                                    invocationCount++;
                                                                                                    var curarg = 1;
                                                                                                    if (argcv[0] !== 0)
                                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                    setModuleName("objectdraw");
                                                                                                    var if5800 = GraceDone;
                                                                                                    setLineNumber(2136);    // compilenode string
                                                                                                    var string5801 = new GraceString("");
                                                                                                    onSelf = true;
                                                                                                    var call5803 = callmethodChecked(this, "label", [0]);
                                                                                                    var opresult5805 = callmethodChecked(call5803, "==", [1], string5801);
                                                                                                    if (Grace_isTrue(opresult5805)) {
                                                                                                      setLineNumber(2137);    // compilenode string
                                                                                                      var string5806 = new GraceString("");
                                                                                                      onSelf = true;
                                                                                                      var call5808 = callmethodChecked(this, "number", [0]);
                                                                                                      var string5810 = new GraceString("a number field holding ");
                                                                                                      var opresult5812 = callmethodChecked(string5810, "++", [1], call5808);
                                                                                                      var opresult5814 = callmethodChecked(opresult5812, "++", [1], string5806);
                                                                                                      if5800 = opresult5814;
                                                                                                    } else {
                                                                                                      setLineNumber(2139);    // compilenode string
                                                                                                      var string5815 = new GraceString("");
                                                                                                      onSelf = true;
                                                                                                      var call5817 = callmethodChecked(this, "number", [0]);
                                                                                                      var string5819 = new GraceString(" holding ");
                                                                                                      onSelf = true;
                                                                                                      var call5821 = callmethodChecked(this, "label", [0]);
                                                                                                      var string5823 = new GraceString("a number field labeled: ");
                                                                                                      var opresult5825 = callmethodChecked(string5823, "++", [1], call5821);
                                                                                                      var opresult5827 = callmethodChecked(opresult5825, "++", [1], string5819);
                                                                                                      var opresult5829 = callmethodChecked(opresult5827, "++", [1], call5817);
                                                                                                      var opresult5831 = callmethodChecked(opresult5829, "++", [1], string5815);
                                                                                                      if5800 = opresult5831;
                                                                                                    }
                                                                                                    setLineNumber(2136);    // return value
                                                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], if5800)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("result of method asString does not have " + 
                                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                                    return if5800;
                                                                                                  };
                                                                                                  func5799.paramCounts = [0];
                                                                                                  obj5790.methods["asString"] = func5799;
                                                                                                  func5799.definitionLine = 2135;
                                                                                                  func5799.definitionModule = "objectdraw";
                                                                                                  setLineNumber(2122);    // compilenode string
                                                                                                  var string5832 = new GraceString("number");
                                                                                                  var call5833 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                  onOuter = true;
                                                                                                  onSelf = true;
                                                                                                  var call5834 = callmethodChecked(call5833, "fieldOfType()labeled()object", [1, 1, 1], string5832, var_label__39__, this);
                                                                                                  obj5790.superobj = call5834;
                                                                                                  if (call5834.data) obj5790.data = call5834.data;
                                                                                                  if (call5834.hasOwnProperty('_value'))
                                                                                                      obj5790._value = call5834._value;
                                                                                                  superDepth = origSuperDepth;
                                                                                                };
                                                                                                obj_init_5790.apply(inheritingObject, []);
                                                                                                return obj5790;
                                                                                                };
                                                                                                func5789.paramTypes = [];
                                                                                                func5789.paramTypes.push([type_String, "label'"]);
                                                                                                this.methods["numberFieldLabeled()object"] = func5789;
                                                                                              setLineNumber(2144);    // compilenode method
                                                                                              var func5835 = function(argcv) {    // method numberFieldUnlabeled
                                                                                                var returnTarget = invocationCount;
                                                                                                invocationCount++;
                                                                                                var curarg = 1;
                                                                                                if (argcv[0] !== 0)
                                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for numberFieldUnlabeled"));
                                                                                                setModuleName("objectdraw");
                                                                                                var obj5836 = Grace_allocObject(null, "objectdraw.numberFieldUnlabeled");
                                                                                                obj5836.definitionModule = "objectdraw";
                                                                                                obj5836.definitionLine = 2144;
                                                                                                obj5836.outer = this;
                                                                                                var reader_objectdraw_outer5837 = function() {
                                                                                                  return this.outer;
                                                                                                };
                                                                                                obj5836.methods["outer"] = reader_objectdraw_outer5837;
                                                                                                var obj_init_5836 = function() {
                                                                                                  var origSuperDepth = superDepth;
                                                                                                  superDepth = obj5836;
                                                                                                  setLineNumber(2146);    // compilenode string
                                                                                                  var string5838 = new GraceString("");
                                                                                                  var call5839 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                  onOuter = true;
                                                                                                  onSelf = true;
                                                                                                  var call5840 = callmethodChecked(call5839, "numberFieldLabeled()object", [1, 1], string5838, this);
                                                                                                  obj5836.superobj = call5840;
                                                                                                  if (call5840.data) obj5836.data = call5840.data;
                                                                                                  if (call5840.hasOwnProperty('_value'))
                                                                                                      obj5836._value = call5840._value;
                                                                                                  superDepth = origSuperDepth;
                                                                                                };
                                                                                                obj_init_5836.apply(obj5836, []);
                                                                                                setLineNumber(2144);    // return value
                                                                                                if (!Grace_isTrue(callmethod(var_NumberField, "match", [1], obj5836)))
                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                        new GraceString("result of method numberFieldUnlabeled does not have " + 
                                                                                                            callmethod(var_NumberField, "asString", [0])._value + "."));
                                                                                                return obj5836;
                                                                                              };
                                                                                              func5835.paramCounts = [0];
                                                                                              this.methods["numberFieldUnlabeled"] = func5835;
                                                                                              func5835.definitionLine = 2144;
                                                                                              func5835.definitionModule = "objectdraw";
                                                                                                var func5841 = function(argcv) {    // method numberFieldUnlabeled()object
                                                                                                  var curarg = 1;
                                                                                                  var inheritingObject = arguments[curarg++];
                                                                                                  // Start argument processing
                                                                                                  curarg = 1;
                                                                                                  // End argument processing
                                                                                                  setModuleName("objectdraw");
                                                                                                  var returnTarget = invocationCount;
                                                                                                  invocationCount++;
                                                                                                  var obj5842 = Grace_allocObject(null, "numberFieldUnlabeled");
                                                                                                  obj5842.definitionModule = "objectdraw";
                                                                                                  obj5842.definitionLine = 2144;
                                                                                                  var inho5842 = inheritingObject;
                                                                                                  while (inho5842.superobj) inho5842 = inho5842.superobj;
                                                                                                  inho5842.superobj = obj5842;
                                                                                                  obj5842.data = inheritingObject.data;
                                                                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                                                                    obj5842._value = inheritingObject._value;
                                                                                                  obj5842.outer = this;
                                                                                                  var reader_objectdraw_outer5843 = function() {
                                                                                                    return this.outer;
                                                                                                  };
                                                                                                  obj5842.methods["outer"] = reader_objectdraw_outer5843;
                                                                                                  var obj_init_5842 = function() {
                                                                                                    var origSuperDepth = superDepth;
                                                                                                    superDepth = obj5842;
                                                                                                    setLineNumber(2146);    // compilenode string
                                                                                                    var string5844 = new GraceString("");
                                                                                                    var call5845 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                    onOuter = true;
                                                                                                    onSelf = true;
                                                                                                    var call5846 = callmethodChecked(call5845, "numberFieldLabeled()object", [1, 1], string5844, this);
                                                                                                    obj5842.superobj = call5846;
                                                                                                    if (call5846.data) obj5842.data = call5846.data;
                                                                                                    if (call5846.hasOwnProperty('_value'))
                                                                                                        obj5842._value = call5846._value;
                                                                                                    superDepth = origSuperDepth;
                                                                                                  };
                                                                                                  obj_init_5842.apply(inheritingObject, []);
                                                                                                  return obj5842;
                                                                                                  };
                                                                                                  this.methods["numberFieldUnlabeled()object"] = func5841;
                                                                                                setLineNumber(2159);    // compilenode method
                                                                                                var func5847 = function(argcv) {    // method selectBoxOptionsFrom(1)labeled(1)
                                                                                                  var returnTarget = invocationCount;
                                                                                                  invocationCount++;
                                                                                                  var curarg = 1;
                                                                                                  var var_options = arguments[curarg];
                                                                                                  curarg++;
                                                                                                  if (argcv[0] !== 1)
                                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selectBoxOptionsFrom (arg list 1) of selectBoxOptionsFrom(1)labeled(1)"));
                                                                                                  var var_label__39__ = arguments[curarg];
                                                                                                  curarg++;
                                                                                                  if (argcv[1] !== 1)
                                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeled (arg list 2) of selectBoxOptionsFrom(1)labeled(1)"));
                                                                                                  // Start argument checking
                                                                                                  curarg = 1;
                                                                                                  onSelf = true;
                                                                                                  var call5848 = callmethodChecked(this, "Sequence", [0]);
                                                                                                  if (!Grace_isTrue(callmethod(call5848, "match",  [1], arguments[curarg])))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("argument 1 in selectBoxOptionsFrom (arg list 1), which corresponds to parameter options, does not have " + 
                                                                                                              callmethod(call5848, "asString", [0])._value + "."));
                                                                                                  curarg++;
                                                                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter label', does not have " + 
                                                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                                                  curarg++;
                                                                                                  // End argument checking
                                                                                                  setModuleName("objectdraw");
                                                                                                  var obj5849 = Grace_allocObject(null, "objectdraw.selectBoxOptionsFrom()labeled");
                                                                                                  obj5849.definitionModule = "objectdraw";
                                                                                                  obj5849.definitionLine = 2159;
                                                                                                  obj5849.outer = this;
                                                                                                  var reader_objectdraw_outer5850 = function() {
                                                                                                    return this.outer;
                                                                                                  };
                                                                                                  obj5849.methods["outer"] = reader_objectdraw_outer5850;
                                                                                                  var obj_init_5849 = function() {
                                                                                                    var origSuperDepth = superDepth;
                                                                                                    superDepth = obj5849;
                                                                                                    var func5851 = function(argcv) {    // method labelElement
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var curarg = 1;
                                                                                                      if (argcv[0] !== 0)
                                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labelElement"));
                                                                                                      setModuleName("objectdraw");
                                                                                                      setLineNumber(2170);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5852 = callmethodChecked(this, "labeler", [0]);
                                                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call5852)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("result of method labelElement does not have " + 
                                                                                                                  callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                                      return call5852;
                                                                                                    };
                                                                                                    func5851.paramCounts = [0];
                                                                                                    obj5849.methods["labelElement"] = func5851;
                                                                                                    func5851.definitionLine = 2169;
                                                                                                    func5851.definitionModule = "objectdraw";
                                                                                                    var func5853 = function(argcv) {    // method selected
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var curarg = 1;
                                                                                                      if (argcv[0] !== 0)
                                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selected"));
                                                                                                      setModuleName("objectdraw");
                                                                                                      setLineNumber(2184);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5854 = callmethodChecked(this, "element", [0]);
                                                                                                      var call5855 = callmethodChecked(call5854, "value", [0]);
                                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], call5855)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("result of method selected does not have " + 
                                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                                      return call5855;
                                                                                                    };
                                                                                                    func5853.paramCounts = [0];
                                                                                                    obj5849.methods["selected"] = func5853;
                                                                                                    func5853.definitionLine = 2183;
                                                                                                    func5853.definitionModule = "objectdraw";
                                                                                                    var func5856 = function(argcv) {    // method selected:=(1)
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var curarg = 1;
                                                                                                      var var_value = arguments[curarg];
                                                                                                      curarg++;
                                                                                                      if (argcv[0] !== 1)
                                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selected:=(1)"));
                                                                                                      // Start argument checking
                                                                                                      curarg = 1;
                                                                                                      setLineNumber(2188);    // compilenode identifier
                                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("argument 1 in selected:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                                      curarg++;
                                                                                                      // End argument checking
                                                                                                      setModuleName("objectdraw");
                                                                                                      setLineNumber(2189);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5857 = callmethodChecked(this, "element", [0]);
                                                                                                      var call5858 = callmethodChecked(call5857, "value:=", [1], var_value);
                                                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5858)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("result of method selected:=(1) does not have " + 
                                                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                      return call5858;
                                                                                                    };
                                                                                                    func5856.paramTypes = [];
                                                                                                    func5856.paramTypes.push([type_String, "value"]);
                                                                                                    func5856.paramCounts = [1];
                                                                                                    obj5849.methods["selected:="] = func5856;
                                                                                                    func5856.definitionLine = 2188;
                                                                                                    func5856.definitionModule = "objectdraw";
                                                                                                    var func5859 = function(argcv) {    // method asString
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var curarg = 1;
                                                                                                      if (argcv[0] !== 0)
                                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                      setModuleName("objectdraw");
                                                                                                      var if5860 = GraceDone;
                                                                                                      setLineNumber(2194);    // compilenode string
                                                                                                      var string5861 = new GraceString("");
                                                                                                      onSelf = true;
                                                                                                      var call5863 = callmethodChecked(this, "label", [0]);
                                                                                                      var opresult5865 = callmethodChecked(call5863, "==", [1], string5861);
                                                                                                      if (Grace_isTrue(opresult5865)) {
                                                                                                        setLineNumber(2195);    // compilenode string
                                                                                                        var string5866 = new GraceString("a select box");
                                                                                                        if5860 = string5866;
                                                                                                      } else {
                                                                                                        setLineNumber(2197);    // compilenode string
                                                                                                        var string5867 = new GraceString("");
                                                                                                        onSelf = true;
                                                                                                        var call5869 = callmethodChecked(this, "label", [0]);
                                                                                                        var string5871 = new GraceString("a select box labeled: ");
                                                                                                        var opresult5873 = callmethodChecked(string5871, "++", [1], call5869);
                                                                                                        var opresult5875 = callmethodChecked(opresult5873, "++", [1], string5867);
                                                                                                        if5860 = opresult5875;
                                                                                                      }
                                                                                                      setLineNumber(2194);    // return value
                                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], if5860)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("result of method asString does not have " + 
                                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                                      return if5860;
                                                                                                    };
                                                                                                    func5859.paramCounts = [0];
                                                                                                    obj5849.methods["asString"] = func5859;
                                                                                                    func5859.definitionLine = 2193;
                                                                                                    func5859.definitionModule = "objectdraw";
                                                                                                    setLineNumber(2163);    // compilenode string
                                                                                                    var string5876 = new GraceString("select");
                                                                                                    var call5877 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                    onOuter = true;
                                                                                                    onSelf = true;
                                                                                                    var call5878 = callmethodChecked(call5877, "labeledWidgetOfElementType()labeled()object", [1, 1, 1], string5876, var_label__39__, this);
                                                                                                    obj5849.superobj = call5878;
                                                                                                    if (call5878.data) obj5849.data = call5878.data;
                                                                                                    if (call5878.hasOwnProperty('_value'))
                                                                                                        obj5849._value = call5878._value;
                                                                                                    setLineNumber(2165);    // compilenode string
                                                                                                    var string5879 = new GraceString("option");
                                                                                                    var call5880 = callmethodChecked(var_document, "createElement", [1], string5879);
                                                                                                    obj5849.data["labeler"] = call5880;
                                                                                                    var reader_objectdraw_labeler5881 = function() {
                                                                                                      return this.data["labeler"];
                                                                                                    };
                                                                                                    reader_objectdraw_labeler5881.def = true;
                                                                                                    reader_objectdraw_labeler5881.confidential = true;
                                                                                                    obj5849.methods["labeler"] = reader_objectdraw_labeler5881;
                                                                                                    if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call5880)))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("value of def 'labeler' is not of type Foreign"));
                                                                                                    setLineNumber(2166);    // compilenode string
                                                                                                    var string5882 = new GraceString("");
                                                                                                    onSelf = true;
                                                                                                    var call5883 = callmethodChecked(this, "labeler", [0]);
                                                                                                    var call5884 = callmethodChecked(call5883, "value:=", [1], string5882);
                                                                                                    setLineNumber(2173);    // compilenode call
                                                                                                    onSelf = true;
                                                                                                    var call5885 = callmethodChecked(this, "labeler", [0]);
                                                                                                    onSelf = true;
                                                                                                    var call5886 = callmethodChecked(this, "element", [0]);
                                                                                                    var call5887 = callmethodChecked(call5886, "appendChild", [1], call5885);
                                                                                                    setLineNumber(2175);    // compilenode block
                                                                                                    var block5888 = new GraceBlock(this, 2175, 1);
                                                                                                    setLineNumber(0);    // compilenode string
                                                                                                    var string5889 = new GraceString("name");
                                                                                                    var call5890 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                                                                                    var call5891 = callmethodChecked(call5890, "new", [1], string5889);
                                                                                                    var call5892 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                                                                                    var call5893 = callmethodChecked(call5892, "new", [2], call5891, var_String);
                                                                                                    block5888.pattern = call5893;
                                                                                                    setLineNumber(2175);    // compilenode identifier
                                                                                                    block5888.paramTypes = [var_String];
                                                                                                    block5888.real = function(var_name) {
                                                                                                      setLineNumber(2176);    // compilenode string
                                                                                                      var string5894 = new GraceString("option");
                                                                                                      var call5895 = callmethodChecked(var_document, "createElement", [1], string5894);
                                                                                                      var var_anOption = call5895;
                                                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], var_anOption)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'anOption' is not of type Foreign"));
                                                                                                      setLineNumber(2177);    // compilenode identifier
                                                                                                      var call5896 = callmethodChecked(var_anOption, "value:=", [1], var_name);
                                                                                                      setLineNumber(2178);    // compilenode identifier
                                                                                                      var call5897 = callmethodChecked(var_anOption, "textContent:=", [1], var_name);
                                                                                                      setLineNumber(2179);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5898 = callmethodChecked(this, "element", [0]);
                                                                                                      var call5899 = callmethodChecked(call5898, "appendChild", [1], var_anOption);
                                                                                                      return call5899;
                                                                                                    };
                                                                                                    var call5900 = callmethodChecked(var_prelude, "for()do", [1, 1], var_options, block5888);
                                                                                                    superDepth = origSuperDepth;
                                                                                                  };
                                                                                                  obj_init_5849.apply(obj5849, []);
                                                                                                  setLineNumber(2159);    // return value
                                                                                                  if (!Grace_isTrue(callmethod(var_Choice, "match", [1], obj5849)))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("result of method selectBoxOptionsFrom(1)labeled(1) does not have " + 
                                                                                                              callmethod(var_Choice, "asString", [0])._value + "."));
                                                                                                  return obj5849;
                                                                                                };
                                                                                                func5847.paramTypes = [];
                                                                                                func5847.paramTypes.push([]);
                                                                                                func5847.paramTypes.push([type_String, "label'"]);
                                                                                                func5847.confidential = true;
                                                                                                func5847.paramCounts = [1, 1];
                                                                                                this.methods["selectBoxOptionsFrom()labeled"] = func5847;
                                                                                                func5847.definitionLine = 2159;
                                                                                                func5847.definitionModule = "objectdraw";
                                                                                                  var func5901 = function(argcv) {    // method selectBoxOptionsFrom(1     )labeled(1     )()object
                                                                                                    var curarg = 1;
                                                                                                    var var_options = arguments[curarg];
                                                                                                    curarg++;
                                                                                                    var var_label__39__ = arguments[curarg];
                                                                                                    curarg++;
                                                                                                    var inheritingObject = arguments[curarg++];
                                                                                                    // Start argument processing
                                                                                                    curarg = 1;
                                                                                                    onSelf = true;
                                                                                                    var call5902 = callmethodChecked(this, "Sequence", [0]);
                                                                                                    if (!Grace_isTrue(callmethod(call5902, "match",  [1], arguments[curarg])))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("argument 1 in selectBoxOptionsFrom (arg list 1), which corresponds to parameter options, does not have " + 
                                                                                                                callmethod(call5902, "asString", [0])._value + "."));
                                                                                                    curarg++;
                                                                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter label', does not have " + 
                                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                                    curarg++;
                                                                                                    // End argument processing
                                                                                                    setModuleName("objectdraw");
                                                                                                    var returnTarget = invocationCount;
                                                                                                    invocationCount++;
                                                                                                    var obj5903 = Grace_allocObject(null, "selectBoxOptionsFrom()labeled");
                                                                                                    obj5903.definitionModule = "objectdraw";
                                                                                                    obj5903.definitionLine = 2159;
                                                                                                    var inho5903 = inheritingObject;
                                                                                                    while (inho5903.superobj) inho5903 = inho5903.superobj;
                                                                                                    inho5903.superobj = obj5903;
                                                                                                    obj5903.data = inheritingObject.data;
                                                                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                                                                      obj5903._value = inheritingObject._value;
                                                                                                    obj5903.outer = this;
                                                                                                    var reader_objectdraw_outer5904 = function() {
                                                                                                      return this.outer;
                                                                                                    };
                                                                                                    obj5903.methods["outer"] = reader_objectdraw_outer5904;
                                                                                                    var obj_init_5903 = function() {
                                                                                                      var origSuperDepth = superDepth;
                                                                                                      superDepth = obj5903;
                                                                                                      var func5905 = function(argcv) {    // method labelElement
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labelElement"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        setLineNumber(2170);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call5906 = callmethodChecked(this, "labeler", [0]);
                                                                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call5906)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("result of method labelElement does not have " + 
                                                                                                                    callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                                        return call5906;
                                                                                                      };
                                                                                                      func5905.paramCounts = [0];
                                                                                                      obj5903.methods["labelElement"] = func5905;
                                                                                                      func5905.definitionLine = 2169;
                                                                                                      func5905.definitionModule = "objectdraw";
                                                                                                      var func5907 = function(argcv) {    // method selected
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selected"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        setLineNumber(2184);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call5908 = callmethodChecked(this, "element", [0]);
                                                                                                        var call5909 = callmethodChecked(call5908, "value", [0]);
                                                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], call5909)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("result of method selected does not have " + 
                                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                                        return call5909;
                                                                                                      };
                                                                                                      func5907.paramCounts = [0];
                                                                                                      obj5903.methods["selected"] = func5907;
                                                                                                      func5907.definitionLine = 2183;
                                                                                                      func5907.definitionModule = "objectdraw";
                                                                                                      var func5910 = function(argcv) {    // method selected:=(1)
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        var var_value = arguments[curarg];
                                                                                                        curarg++;
                                                                                                        if (argcv[0] !== 1)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selected:=(1)"));
                                                                                                        // Start argument checking
                                                                                                        curarg = 1;
                                                                                                        setLineNumber(2188);    // compilenode identifier
                                                                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("argument 1 in selected:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                                        curarg++;
                                                                                                        // End argument checking
                                                                                                        setModuleName("objectdraw");
                                                                                                        setLineNumber(2189);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call5911 = callmethodChecked(this, "element", [0]);
                                                                                                        var call5912 = callmethodChecked(call5911, "value:=", [1], var_value);
                                                                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5912)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("result of method selected:=(1) does not have " + 
                                                                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                        return call5912;
                                                                                                      };
                                                                                                      func5910.paramTypes = [];
                                                                                                      func5910.paramTypes.push([type_String, "value"]);
                                                                                                      func5910.paramCounts = [1];
                                                                                                      obj5903.methods["selected:="] = func5910;
                                                                                                      func5910.definitionLine = 2188;
                                                                                                      func5910.definitionModule = "objectdraw";
                                                                                                      var func5913 = function(argcv) {    // method asString
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        var if5914 = GraceDone;
                                                                                                        setLineNumber(2194);    // compilenode string
                                                                                                        var string5915 = new GraceString("");
                                                                                                        onSelf = true;
                                                                                                        var call5917 = callmethodChecked(this, "label", [0]);
                                                                                                        var opresult5919 = callmethodChecked(call5917, "==", [1], string5915);
                                                                                                        if (Grace_isTrue(opresult5919)) {
                                                                                                          setLineNumber(2195);    // compilenode string
                                                                                                          var string5920 = new GraceString("a select box");
                                                                                                          if5914 = string5920;
                                                                                                        } else {
                                                                                                          setLineNumber(2197);    // compilenode string
                                                                                                          var string5921 = new GraceString("");
                                                                                                          onSelf = true;
                                                                                                          var call5923 = callmethodChecked(this, "label", [0]);
                                                                                                          var string5925 = new GraceString("a select box labeled: ");
                                                                                                          var opresult5927 = callmethodChecked(string5925, "++", [1], call5923);
                                                                                                          var opresult5929 = callmethodChecked(opresult5927, "++", [1], string5921);
                                                                                                          if5914 = opresult5929;
                                                                                                        }
                                                                                                        setLineNumber(2194);    // return value
                                                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], if5914)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("result of method asString does not have " + 
                                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                                        return if5914;
                                                                                                      };
                                                                                                      func5913.paramCounts = [0];
                                                                                                      obj5903.methods["asString"] = func5913;
                                                                                                      func5913.definitionLine = 2193;
                                                                                                      func5913.definitionModule = "objectdraw";
                                                                                                      setLineNumber(2163);    // compilenode string
                                                                                                      var string5930 = new GraceString("select");
                                                                                                      var call5931 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                      onOuter = true;
                                                                                                      onSelf = true;
                                                                                                      var call5932 = callmethodChecked(call5931, "labeledWidgetOfElementType()labeled()object", [1, 1, 1], string5930, var_label__39__, this);
                                                                                                      obj5903.superobj = call5932;
                                                                                                      if (call5932.data) obj5903.data = call5932.data;
                                                                                                      if (call5932.hasOwnProperty('_value'))
                                                                                                          obj5903._value = call5932._value;
                                                                                                      setLineNumber(2165);    // compilenode string
                                                                                                      var string5933 = new GraceString("option");
                                                                                                      var call5934 = callmethodChecked(var_document, "createElement", [1], string5933);
                                                                                                      obj5903.data["labeler"] = call5934;
                                                                                                      var reader_objectdraw_labeler5935 = function() {
                                                                                                        return this.data["labeler"];
                                                                                                      };
                                                                                                      reader_objectdraw_labeler5935.def = true;
                                                                                                      reader_objectdraw_labeler5935.confidential = true;
                                                                                                      obj5903.methods["labeler"] = reader_objectdraw_labeler5935;
                                                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call5934)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'labeler' is not of type Foreign"));
                                                                                                      setLineNumber(2166);    // compilenode string
                                                                                                      var string5936 = new GraceString("");
                                                                                                      onSelf = true;
                                                                                                      var call5937 = callmethodChecked(this, "labeler", [0]);
                                                                                                      var call5938 = callmethodChecked(call5937, "value:=", [1], string5936);
                                                                                                      setLineNumber(2173);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5939 = callmethodChecked(this, "labeler", [0]);
                                                                                                      onSelf = true;
                                                                                                      var call5940 = callmethodChecked(this, "element", [0]);
                                                                                                      var call5941 = callmethodChecked(call5940, "appendChild", [1], call5939);
                                                                                                      setLineNumber(2175);    // compilenode block
                                                                                                      var block5942 = new GraceBlock(this, 2175, 1);
                                                                                                      setLineNumber(0);    // compilenode string
                                                                                                      var string5943 = new GraceString("name");
                                                                                                      var call5944 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                                                                                      var call5945 = callmethodChecked(call5944, "new", [1], string5943);
                                                                                                      var call5946 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                                                                                      var call5947 = callmethodChecked(call5946, "new", [2], call5945, var_String);
                                                                                                      block5942.pattern = call5947;
                                                                                                      setLineNumber(2175);    // compilenode identifier
                                                                                                      block5942.paramTypes = [var_String];
                                                                                                      block5942.real = function(var_name) {
                                                                                                        setLineNumber(2176);    // compilenode string
                                                                                                        var string5948 = new GraceString("option");
                                                                                                        var call5949 = callmethodChecked(var_document, "createElement", [1], string5948);
                                                                                                        var var_anOption = call5949;
                                                                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], var_anOption)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'anOption' is not of type Foreign"));
                                                                                                        setLineNumber(2177);    // compilenode identifier
                                                                                                        var call5950 = callmethodChecked(var_anOption, "value:=", [1], var_name);
                                                                                                        setLineNumber(2178);    // compilenode identifier
                                                                                                        var call5951 = callmethodChecked(var_anOption, "textContent:=", [1], var_name);
                                                                                                        setLineNumber(2179);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call5952 = callmethodChecked(this, "element", [0]);
                                                                                                        var call5953 = callmethodChecked(call5952, "appendChild", [1], var_anOption);
                                                                                                        return call5953;
                                                                                                      };
                                                                                                      var call5954 = callmethodChecked(var_prelude, "for()do", [1, 1], var_options, block5942);
                                                                                                      superDepth = origSuperDepth;
                                                                                                    };
                                                                                                    obj_init_5903.apply(inheritingObject, []);
                                                                                                    return obj5903;
                                                                                                    };
                                                                                                    func5901.paramTypes = [];
                                                                                                    func5901.paramTypes.push([]);
                                                                                                    func5901.paramTypes.push([type_String, "label'"]);
                                                                                                    func5901.confidential = true;
                                                                                                    this.methods["selectBoxOptionsFrom()labeled()object"] = func5901;
                                                                                                  setLineNumber(2202);    // compilenode method
                                                                                                  var func5955 = function(argcv) {    // method selectBoxOptionsFrom(1)
                                                                                                    var returnTarget = invocationCount;
                                                                                                    invocationCount++;
                                                                                                    var curarg = 1;
                                                                                                    var var_options = arguments[curarg];
                                                                                                    curarg++;
                                                                                                    if (argcv[0] !== 1)
                                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selectBoxOptionsFrom(1)"));
                                                                                                    // Start argument checking
                                                                                                    curarg = 1;
                                                                                                    onSelf = true;
                                                                                                    var call5956 = callmethodChecked(this, "Sequence", [0]);
                                                                                                    if (!Grace_isTrue(callmethod(call5956, "match",  [1], arguments[curarg])))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("argument 1 in selectBoxOptionsFrom (arg list 1), which corresponds to parameter options, does not have " + 
                                                                                                                callmethod(call5956, "asString", [0])._value + "."));
                                                                                                    curarg++;
                                                                                                    // End argument checking
                                                                                                    setModuleName("objectdraw");
                                                                                                    var obj5957 = Grace_allocObject(null, "objectdraw.selectBoxOptionsFrom");
                                                                                                    obj5957.definitionModule = "objectdraw";
                                                                                                    obj5957.definitionLine = 2202;
                                                                                                    obj5957.outer = this;
                                                                                                    var reader_objectdraw_outer5958 = function() {
                                                                                                      return this.outer;
                                                                                                    };
                                                                                                    obj5957.methods["outer"] = reader_objectdraw_outer5958;
                                                                                                    var obj_init_5957 = function() {
                                                                                                      var origSuperDepth = superDepth;
                                                                                                      superDepth = obj5957;
                                                                                                      setLineNumber(2205);    // compilenode string
                                                                                                      var string5959 = new GraceString("");
                                                                                                      var call5960 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                      onOuter = true;
                                                                                                      onSelf = true;
                                                                                                      var call5961 = callmethodChecked(call5960, "selectBoxOptionsFrom()labeled()object", [1, 1, 1], var_options, string5959, this);
                                                                                                      obj5957.superobj = call5961;
                                                                                                      if (call5961.data) obj5957.data = call5961.data;
                                                                                                      if (call5961.hasOwnProperty('_value'))
                                                                                                          obj5957._value = call5961._value;
                                                                                                      setLineNumber(2206);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5962 = callmethodChecked(this, "labelElement", [0]);
                                                                                                      onSelf = true;
                                                                                                      var call5963 = callmethodChecked(this, "element", [0]);
                                                                                                      var call5964 = callmethodChecked(call5963, "removeChild", [1], call5962);
                                                                                                      superDepth = origSuperDepth;
                                                                                                    };
                                                                                                    obj_init_5957.apply(obj5957, []);
                                                                                                    setLineNumber(2202);    // return value
                                                                                                    if (!Grace_isTrue(callmethod(var_Choice, "match", [1], obj5957)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("result of method selectBoxOptionsFrom(1) does not have " + 
                                                                                                                callmethod(var_Choice, "asString", [0])._value + "."));
                                                                                                    return obj5957;
                                                                                                  };
                                                                                                  func5955.paramCounts = [1];
                                                                                                  this.methods["selectBoxOptionsFrom"] = func5955;
                                                                                                  func5955.definitionLine = 2202;
                                                                                                  func5955.definitionModule = "objectdraw";
                                                                                                    var func5965 = function(argcv) {    // method selectBoxOptionsFrom(1     )()object
                                                                                                      var curarg = 1;
                                                                                                      var var_options = arguments[curarg];
                                                                                                      curarg++;
                                                                                                      var inheritingObject = arguments[curarg++];
                                                                                                      // Start argument processing
                                                                                                      curarg = 1;
                                                                                                      onSelf = true;
                                                                                                      var call5966 = callmethodChecked(this, "Sequence", [0]);
                                                                                                      if (!Grace_isTrue(callmethod(call5966, "match",  [1], arguments[curarg])))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("argument 1 in selectBoxOptionsFrom (arg list 1), which corresponds to parameter options, does not have " + 
                                                                                                                  callmethod(call5966, "asString", [0])._value + "."));
                                                                                                      curarg++;
                                                                                                      // End argument processing
                                                                                                      setModuleName("objectdraw");
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var obj5967 = Grace_allocObject(null, "selectBoxOptionsFrom");
                                                                                                      obj5967.definitionModule = "objectdraw";
                                                                                                      obj5967.definitionLine = 2202;
                                                                                                      var inho5967 = inheritingObject;
                                                                                                      while (inho5967.superobj) inho5967 = inho5967.superobj;
                                                                                                      inho5967.superobj = obj5967;
                                                                                                      obj5967.data = inheritingObject.data;
                                                                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                                                                        obj5967._value = inheritingObject._value;
                                                                                                      obj5967.outer = this;
                                                                                                      var reader_objectdraw_outer5968 = function() {
                                                                                                        return this.outer;
                                                                                                      };
                                                                                                      obj5967.methods["outer"] = reader_objectdraw_outer5968;
                                                                                                      var obj_init_5967 = function() {
                                                                                                        var origSuperDepth = superDepth;
                                                                                                        superDepth = obj5967;
                                                                                                        setLineNumber(2205);    // compilenode string
                                                                                                        var string5969 = new GraceString("");
                                                                                                        var call5970 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                        onOuter = true;
                                                                                                        onSelf = true;
                                                                                                        var call5971 = callmethodChecked(call5970, "selectBoxOptionsFrom()labeled()object", [1, 1, 1], var_options, string5969, this);
                                                                                                        obj5967.superobj = call5971;
                                                                                                        if (call5971.data) obj5967.data = call5971.data;
                                                                                                        if (call5971.hasOwnProperty('_value'))
                                                                                                            obj5967._value = call5971._value;
                                                                                                        setLineNumber(2206);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call5972 = callmethodChecked(this, "labelElement", [0]);
                                                                                                        onSelf = true;
                                                                                                        var call5973 = callmethodChecked(this, "element", [0]);
                                                                                                        var call5974 = callmethodChecked(call5973, "removeChild", [1], call5972);
                                                                                                        superDepth = origSuperDepth;
                                                                                                      };
                                                                                                      obj_init_5967.apply(inheritingObject, []);
                                                                                                      return obj5967;
                                                                                                      };
                                                                                                      this.methods["selectBoxOptionsFrom()object"] = func5965;
                                                                                                    setLineNumber(2224);    // compilenode method
                                                                                                    var func5975 = function(argcv) {    // method audioUrl(1)
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var curarg = 1;
                                                                                                      var var_source__39__ = arguments[curarg];
                                                                                                      curarg++;
                                                                                                      if (argcv[0] !== 1)
                                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for audioUrl(1)"));
                                                                                                      // Start argument checking
                                                                                                      curarg = 1;
                                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("argument 1 in audioUrl (arg list 1), which corresponds to parameter source', does not have " + 
                                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                                      curarg++;
                                                                                                      // End argument checking
                                                                                                      setModuleName("objectdraw");
                                                                                                      var obj5976 = Grace_allocObject(GraceObject, "objectdraw.audioUrl");
                                                                                                      obj5976.definitionModule = "objectdraw";
                                                                                                      obj5976.definitionLine = 2224;
                                                                                                      obj5976.outer = this;
                                                                                                      var reader_objectdraw_outer5977 = function() {
                                                                                                        return this.outer;
                                                                                                      };
                                                                                                      obj5976.methods["outer"] = reader_objectdraw_outer5977;
                                                                                                      var obj_init_5976 = function() {
                                                                                                        var origSuperDepth = superDepth;
                                                                                                        superDepth = obj5976;
                                                                                                        var func5978 = function(argcv) {    // method source
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for source"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          setLineNumber(2236);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5979 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5980 = callmethodChecked(call5979, "src", [0]);
                                                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], call5980)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method source does not have " + 
                                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                                          return call5980;
                                                                                                        };
                                                                                                        func5978.paramCounts = [0];
                                                                                                        obj5976.methods["source"] = func5978;
                                                                                                        func5978.definitionLine = 2235;
                                                                                                        func5978.definitionModule = "objectdraw";
                                                                                                        var func5981 = function(argcv) {    // method source:=(1)
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          var var_value = arguments[curarg];
                                                                                                          curarg++;
                                                                                                          if (argcv[0] !== 1)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for source:=(1)"));
                                                                                                          // Start argument checking
                                                                                                          curarg = 1;
                                                                                                          setLineNumber(2240);    // compilenode identifier
                                                                                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("argument 1 in source:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                                          curarg++;
                                                                                                          // End argument checking
                                                                                                          setModuleName("objectdraw");
                                                                                                          setLineNumber(2241);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5982 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5983 = callmethodChecked(call5982, "src:=", [1], var_value);
                                                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5983)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method source:=(1) does not have " + 
                                                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                          return call5983;
                                                                                                        };
                                                                                                        func5981.paramTypes = [];
                                                                                                        func5981.paramTypes.push([type_String, "value"]);
                                                                                                        func5981.paramCounts = [1];
                                                                                                        obj5976.methods["source:="] = func5981;
                                                                                                        func5981.definitionLine = 2240;
                                                                                                        func5981.definitionModule = "objectdraw";
                                                                                                        var func5984 = function(argcv) {    // method play
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for play"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          setLineNumber(2246);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5985 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5986 = callmethodChecked(call5985, "play", [0]);
                                                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5986)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method play does not have " + 
                                                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                          return call5986;
                                                                                                        };
                                                                                                        func5984.paramCounts = [0];
                                                                                                        obj5976.methods["play"] = func5984;
                                                                                                        func5984.definitionLine = 2245;
                                                                                                        func5984.definitionModule = "objectdraw";
                                                                                                        var func5987 = function(argcv) {    // method pause
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pause"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          setLineNumber(2251);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5988 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5989 = callmethodChecked(call5988, "pause", [0]);
                                                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5989)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method pause does not have " + 
                                                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                          return call5989;
                                                                                                        };
                                                                                                        func5987.paramCounts = [0];
                                                                                                        obj5976.methods["pause"] = func5987;
                                                                                                        func5987.definitionLine = 2250;
                                                                                                        func5987.definitionModule = "objectdraw";
                                                                                                        var func5990 = function(argcv) {    // method isLooping
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLooping"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          setLineNumber(2256);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5991 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5992 = callmethodChecked(call5991, "loop", [0]);
                                                                                                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call5992)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method isLooping does not have " + 
                                                                                                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                          return call5992;
                                                                                                        };
                                                                                                        func5990.paramCounts = [0];
                                                                                                        obj5976.methods["isLooping"] = func5990;
                                                                                                        func5990.definitionLine = 2255;
                                                                                                        func5990.definitionModule = "objectdraw";
                                                                                                        var func5993 = function(argcv) {    // method looping:=(1)
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          var var_value = arguments[curarg];
                                                                                                          curarg++;
                                                                                                          if (argcv[0] !== 1)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for looping:=(1)"));
                                                                                                          // Start argument checking
                                                                                                          curarg = 1;
                                                                                                          setLineNumber(2260);    // compilenode identifier
                                                                                                          if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("argument 1 in looping:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                          curarg++;
                                                                                                          // End argument checking
                                                                                                          setModuleName("objectdraw");
                                                                                                          setLineNumber(2261);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5994 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5995 = callmethodChecked(call5994, "loop:=", [1], var_value);
                                                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5995)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method looping:=(1) does not have " + 
                                                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                          return call5995;
                                                                                                        };
                                                                                                        func5993.paramTypes = [];
                                                                                                        func5993.paramTypes.push([type_Boolean, "value"]);
                                                                                                        func5993.paramCounts = [1];
                                                                                                        obj5976.methods["looping:="] = func5993;
                                                                                                        func5993.definitionLine = 2260;
                                                                                                        func5993.definitionModule = "objectdraw";
                                                                                                        var func5996 = function(argcv) {    // method isEnded
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEnded"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          setLineNumber(2266);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5997 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5998 = callmethodChecked(call5997, "ended", [0]);
                                                                                                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call5998)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method isEnded does not have " + 
                                                                                                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                          return call5998;
                                                                                                        };
                                                                                                        func5996.paramCounts = [0];
                                                                                                        obj5976.methods["isEnded"] = func5996;
                                                                                                        func5996.definitionLine = 2265;
                                                                                                        func5996.definitionModule = "objectdraw";
                                                                                                        var func5999 = function(argcv) {    // method asString
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          setLineNumber(2271);    // compilenode string
                                                                                                          var string6000 = new GraceString("");
                                                                                                          onSelf = true;
                                                                                                          var call6002 = callmethodChecked(this, "source", [0]);
                                                                                                          var string6004 = new GraceString("audio from ");
                                                                                                          var opresult6006 = callmethodChecked(string6004, "++", [1], call6002);
                                                                                                          var opresult6008 = callmethodChecked(opresult6006, "++", [1], string6000);
                                                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult6008)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method asString does not have " + 
                                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                                          return opresult6008;
                                                                                                        };
                                                                                                        func5999.paramCounts = [0];
                                                                                                        obj5976.methods["asString"] = func5999;
                                                                                                        func5999.definitionLine = 2270;
                                                                                                        func5999.definitionModule = "objectdraw";
                                                                                                        setLineNumber(2226);    // compilenode string
                                                                                                        var string6009 = new GraceString("audio");
                                                                                                        var call6010 = callmethodChecked(var_document, "createElement", [1], string6009);
                                                                                                        obj5976.data["element"] = call6010;
                                                                                                        var reader_objectdraw_element6011 = function() {
                                                                                                          return this.data["element"];
                                                                                                        };
                                                                                                        reader_objectdraw_element6011.def = true;
                                                                                                        reader_objectdraw_element6011.confidential = true;
                                                                                                        obj5976.methods["element"] = reader_objectdraw_element6011;
                                                                                                        setLineNumber(2228);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call6012 = callmethodChecked(this, "element", [0]);
                                                                                                        var call6013 = callmethodChecked(call6012, "src:=", [1], var_source__39__);
                                                                                                        var if6014 = GraceDone;
                                                                                                        setLineNumber(2230);    // compilenode identifier
                                                                                                        var call6015 = callmethodChecked(var_dom, "window", [0]);
                                                                                                        var string6016 = new GraceString("graceRegisterAudio");
                                                                                                        var call6017 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], call6015, string6016);
                                                                                                        if (Grace_isTrue(call6017)) {
                                                                                                          setLineNumber(2231);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call6018 = callmethodChecked(this, "element", [0]);
                                                                                                          var call6019 = callmethodChecked(var_dom, "window", [0]);
                                                                                                          var call6020 = callmethodChecked(call6019, "graceRegisterAudio", [1], call6018);
                                                                                                          if6014 = call6020;
                                                                                                        }
                                                                                                        superDepth = origSuperDepth;
                                                                                                      };
                                                                                                      obj_init_5976.apply(obj5976, []);
                                                                                                      setLineNumber(2224);    // return value
                                                                                                      if (!Grace_isTrue(callmethod(var_Audio, "match", [1], obj5976)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("result of method audioUrl(1) does not have " + 
                                                                                                                  callmethod(var_Audio, "asString", [0])._value + "."));
                                                                                                      return obj5976;
                                                                                                    };
                                                                                                    func5975.paramTypes = [];
                                                                                                    func5975.paramTypes.push([type_String, "source'"]);
                                                                                                    func5975.paramCounts = [1];
                                                                                                    this.methods["audioUrl"] = func5975;
                                                                                                    func5975.definitionLine = 2224;
                                                                                                    func5975.definitionModule = "objectdraw";
                                                                                                      var func6021 = function(argcv) {    // method audioUrl(1     )()object
                                                                                                        var curarg = 1;
                                                                                                        var var_source__39__ = arguments[curarg];
                                                                                                        curarg++;
                                                                                                        var inheritingObject = arguments[curarg++];
                                                                                                        // Start argument processing
                                                                                                        curarg = 1;
                                                                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("argument 1 in audioUrl (arg list 1), which corresponds to parameter source', does not have " + 
                                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                                        curarg++;
                                                                                                        // End argument processing
                                                                                                        setModuleName("objectdraw");
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var obj6022 = Grace_allocObject(GraceObject, "audioUrl");
                                                                                                        obj6022.definitionModule = "objectdraw";
                                                                                                        obj6022.definitionLine = 2224;
                                                                                                        var inho6022 = inheritingObject;
                                                                                                        while (inho6022.superobj) inho6022 = inho6022.superobj;
                                                                                                        inho6022.superobj = obj6022;
                                                                                                        obj6022.data = inheritingObject.data;
                                                                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                                                                          obj6022._value = inheritingObject._value;
                                                                                                        obj6022.outer = this;
                                                                                                        var reader_objectdraw_outer6023 = function() {
                                                                                                          return this.outer;
                                                                                                        };
                                                                                                        obj6022.methods["outer"] = reader_objectdraw_outer6023;
                                                                                                        var obj_init_6022 = function() {
                                                                                                          var origSuperDepth = superDepth;
                                                                                                          superDepth = obj6022;
                                                                                                          var func6024 = function(argcv) {    // method source
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for source"));
                                                                                                            setModuleName("objectdraw");
                                                                                                            setLineNumber(2236);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6025 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6026 = callmethodChecked(call6025, "src", [0]);
                                                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], call6026)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method source does not have " + 
                                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                                            return call6026;
                                                                                                          };
                                                                                                          func6024.paramCounts = [0];
                                                                                                          obj6022.methods["source"] = func6024;
                                                                                                          func6024.definitionLine = 2235;
                                                                                                          func6024.definitionModule = "objectdraw";
                                                                                                          var func6027 = function(argcv) {    // method source:=(1)
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            var var_value = arguments[curarg];
                                                                                                            curarg++;
                                                                                                            if (argcv[0] !== 1)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for source:=(1)"));
                                                                                                            // Start argument checking
                                                                                                            curarg = 1;
                                                                                                            setLineNumber(2240);    // compilenode identifier
                                                                                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("argument 1 in source:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                                            curarg++;
                                                                                                            // End argument checking
                                                                                                            setModuleName("objectdraw");
                                                                                                            setLineNumber(2241);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6028 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6029 = callmethodChecked(call6028, "src:=", [1], var_value);
                                                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call6029)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method source:=(1) does not have " + 
                                                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                            return call6029;
                                                                                                          };
                                                                                                          func6027.paramTypes = [];
                                                                                                          func6027.paramTypes.push([type_String, "value"]);
                                                                                                          func6027.paramCounts = [1];
                                                                                                          obj6022.methods["source:="] = func6027;
                                                                                                          func6027.definitionLine = 2240;
                                                                                                          func6027.definitionModule = "objectdraw";
                                                                                                          var func6030 = function(argcv) {    // method play
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for play"));
                                                                                                            setModuleName("objectdraw");
                                                                                                            setLineNumber(2246);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6031 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6032 = callmethodChecked(call6031, "play", [0]);
                                                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call6032)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method play does not have " + 
                                                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                            return call6032;
                                                                                                          };
                                                                                                          func6030.paramCounts = [0];
                                                                                                          obj6022.methods["play"] = func6030;
                                                                                                          func6030.definitionLine = 2245;
                                                                                                          func6030.definitionModule = "objectdraw";
                                                                                                          var func6033 = function(argcv) {    // method pause
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pause"));
                                                                                                            setModuleName("objectdraw");
                                                                                                            setLineNumber(2251);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6034 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6035 = callmethodChecked(call6034, "pause", [0]);
                                                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call6035)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method pause does not have " + 
                                                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                            return call6035;
                                                                                                          };
                                                                                                          func6033.paramCounts = [0];
                                                                                                          obj6022.methods["pause"] = func6033;
                                                                                                          func6033.definitionLine = 2250;
                                                                                                          func6033.definitionModule = "objectdraw";
                                                                                                          var func6036 = function(argcv) {    // method isLooping
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLooping"));
                                                                                                            setModuleName("objectdraw");
                                                                                                            setLineNumber(2256);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6037 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6038 = callmethodChecked(call6037, "loop", [0]);
                                                                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call6038)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method isLooping does not have " + 
                                                                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                            return call6038;
                                                                                                          };
                                                                                                          func6036.paramCounts = [0];
                                                                                                          obj6022.methods["isLooping"] = func6036;
                                                                                                          func6036.definitionLine = 2255;
                                                                                                          func6036.definitionModule = "objectdraw";
                                                                                                          var func6039 = function(argcv) {    // method looping:=(1)
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            var var_value = arguments[curarg];
                                                                                                            curarg++;
                                                                                                            if (argcv[0] !== 1)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for looping:=(1)"));
                                                                                                            // Start argument checking
                                                                                                            curarg = 1;
                                                                                                            setLineNumber(2260);    // compilenode identifier
                                                                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("argument 1 in looping:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                            curarg++;
                                                                                                            // End argument checking
                                                                                                            setModuleName("objectdraw");
                                                                                                            setLineNumber(2261);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6040 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6041 = callmethodChecked(call6040, "loop:=", [1], var_value);
                                                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call6041)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method looping:=(1) does not have " + 
                                                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                            return call6041;
                                                                                                          };
                                                                                                          func6039.paramTypes = [];
                                                                                                          func6039.paramTypes.push([type_Boolean, "value"]);
                                                                                                          func6039.paramCounts = [1];
                                                                                                          obj6022.methods["looping:="] = func6039;
                                                                                                          func6039.definitionLine = 2260;
                                                                                                          func6039.definitionModule = "objectdraw";
                                                                                                          var func6042 = function(argcv) {    // method isEnded
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEnded"));
                                                                                                            setModuleName("objectdraw");
                                                                                                            setLineNumber(2266);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6043 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6044 = callmethodChecked(call6043, "ended", [0]);
                                                                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call6044)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method isEnded does not have " + 
                                                                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                            return call6044;
                                                                                                          };
                                                                                                          func6042.paramCounts = [0];
                                                                                                          obj6022.methods["isEnded"] = func6042;
                                                                                                          func6042.definitionLine = 2265;
                                                                                                          func6042.definitionModule = "objectdraw";
                                                                                                          var func6045 = function(argcv) {    // method asString
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                            setModuleName("objectdraw");
                                                                                                            setLineNumber(2271);    // compilenode string
                                                                                                            var string6046 = new GraceString("");
                                                                                                            onSelf = true;
                                                                                                            var call6048 = callmethodChecked(this, "source", [0]);
                                                                                                            var string6050 = new GraceString("audio from ");
                                                                                                            var opresult6052 = callmethodChecked(string6050, "++", [1], call6048);
                                                                                                            var opresult6054 = callmethodChecked(opresult6052, "++", [1], string6046);
                                                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult6054)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method asString does not have " + 
                                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                                            return opresult6054;
                                                                                                          };
                                                                                                          func6045.paramCounts = [0];
                                                                                                          obj6022.methods["asString"] = func6045;
                                                                                                          func6045.definitionLine = 2270;
                                                                                                          func6045.definitionModule = "objectdraw";
                                                                                                          setLineNumber(2226);    // compilenode string
                                                                                                          var string6055 = new GraceString("audio");
                                                                                                          var call6056 = callmethodChecked(var_document, "createElement", [1], string6055);
                                                                                                          obj6022.data["element"] = call6056;
                                                                                                          var reader_objectdraw_element6057 = function() {
                                                                                                            return this.data["element"];
                                                                                                          };
                                                                                                          reader_objectdraw_element6057.def = true;
                                                                                                          reader_objectdraw_element6057.confidential = true;
                                                                                                          obj6022.methods["element"] = reader_objectdraw_element6057;
                                                                                                          setLineNumber(2228);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call6058 = callmethodChecked(this, "element", [0]);
                                                                                                          var call6059 = callmethodChecked(call6058, "src:=", [1], var_source__39__);
                                                                                                          var if6060 = GraceDone;
                                                                                                          setLineNumber(2230);    // compilenode identifier
                                                                                                          var call6061 = callmethodChecked(var_dom, "window", [0]);
                                                                                                          var string6062 = new GraceString("graceRegisterAudio");
                                                                                                          var call6063 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], call6061, string6062);
                                                                                                          if (Grace_isTrue(call6063)) {
                                                                                                            setLineNumber(2231);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6064 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6065 = callmethodChecked(var_dom, "window", [0]);
                                                                                                            var call6066 = callmethodChecked(call6065, "graceRegisterAudio", [1], call6064);
                                                                                                            if6060 = call6066;
                                                                                                          }
                                                                                                          superDepth = origSuperDepth;
                                                                                                        };
                                                                                                        obj_init_6022.apply(inheritingObject, []);
                                                                                                        return obj6022;
                                                                                                        };
                                                                                                        func6021.paramTypes = [];
                                                                                                        func6021.paramTypes.push([type_String, "source'"]);
                                                                                                        this.methods["audioUrl()object"] = func6021;
                                                                                                      setLineNumber(11);    // compilenode num
                                                                                                      var var_frameRate = new GraceNum(30);
                                                                                                      setLineNumber(2231);    // compilenode method
                                                                                                      var func6067 = function(argcv) {    // method frameRate
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for frameRate"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // frameRate is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(11);    // compilenode identifier
                                                                                                        return var_frameRate;
                                                                                                      };
                                                                                                      func6067.paramCounts = [0];
                                                                                                      this.methods["frameRate"] = func6067;
                                                                                                      func6067.definitionLine = 2231;
                                                                                                      func6067.definitionModule = "objectdraw";
                                                                                                      this.methods["frameRate"].debug = "def";
                                                                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_frameRate)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'frameRate' is not of type Number"));
                                                                                                      setLineNumber(24);    // compilenode call
                                                                                                      var call6068 = callmethodChecked(var_prelude, "\u03c0", [0]);
                                                                                                      var var_pi = call6068;
                                                                                                      var func6069 = function(argcv) {    // method pi
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pi"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // pi is a simple accessor - elide try ... catch
                                                                                                        return var_pi;
                                                                                                      };
                                                                                                      func6069.paramCounts = [0];
                                                                                                      this.methods["pi"] = func6069;
                                                                                                      func6069.definitionLine = 24;
                                                                                                      func6069.definitionModule = "objectdraw";
                                                                                                      this.methods["pi"].debug = "def";
                                                                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_pi)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'pi' is not of type Number"));
                                                                                                      setLineNumber(26);    // compilenode typedec
                                                                                                      // Type decl Foreign
                                                                                                      var var_Foreign = var_Unknown;
                                                                                                      setLineNumber(24);    // compilenode method
                                                                                                      var func6071 = function(argcv) {    // method Foreign
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Foreign"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Foreign is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(26);    // compilenode identifier
                                                                                                        return var_Foreign;
                                                                                                      };
                                                                                                      func6071.paramCounts = [0];
                                                                                                      this.methods["Foreign"] = func6071;
                                                                                                      func6071.definitionLine = 24;
                                                                                                      func6071.definitionModule = "objectdraw";
                                                                                                      setLineNumber(28);    // compilenode identifier
                                                                                                      var call6072 = callmethodChecked(var_dom, "document", [0]);
                                                                                                      var var_document = call6072;
                                                                                                      var func6073 = function(argcv) {    // method document
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for document"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // document is a simple accessor - elide try ... catch
                                                                                                        return var_document;
                                                                                                      };
                                                                                                      func6073.paramCounts = [0];
                                                                                                      this.methods["document"] = func6073;
                                                                                                      func6073.definitionLine = 28;
                                                                                                      func6073.definitionModule = "objectdraw";
                                                                                                      this.methods["document"].debug = "def";
                                                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], var_document)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'document' is not of type Foreign"));
                                                                                                      setLineNumber(32);    // compilenode typedec
                                                                                                      // Type decl Function
                                                                                                      var call6075 = callmethodChecked(var_prelude, "Block1", [0]);
                                                                                                      var var_Function = call6075;
                                                                                                      var func6076 = function(argcv) {    // method Function
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Function"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Function is a simple accessor - elide try ... catch
                                                                                                        return var_Function;
                                                                                                      };
                                                                                                      func6076.paramCounts = [0];
                                                                                                      this.methods["Function"] = func6076;
                                                                                                      func6076.definitionLine = 32;
                                                                                                      func6076.definitionModule = "objectdraw";
                                                                                                      setLineNumber(36);    // compilenode typedec
                                                                                                      // Type decl Function2
                                                                                                      var call6078 = callmethodChecked(var_prelude, "Block2", [0]);
                                                                                                      var var_Function2 = call6078;
                                                                                                      var func6079 = function(argcv) {    // method Function2
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Function2"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Function2 is a simple accessor - elide try ... catch
                                                                                                        return var_Function2;
                                                                                                      };
                                                                                                      func6079.paramCounts = [0];
                                                                                                      this.methods["Function2"] = func6079;
                                                                                                      func6079.definitionLine = 36;
                                                                                                      func6079.definitionModule = "objectdraw";
                                                                                                      setLineNumber(39);    // compilenode typedec
                                                                                                      // Type decl Procedure
                                                                                                      var call6081 = callmethodChecked(var_prelude, "Block1", [0]);
                                                                                                      var var_Procedure = call6081;
                                                                                                      var func6082 = function(argcv) {    // method Procedure
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Procedure"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Procedure is a simple accessor - elide try ... catch
                                                                                                        return var_Procedure;
                                                                                                      };
                                                                                                      func6082.paramCounts = [0];
                                                                                                      this.methods["Procedure"] = func6082;
                                                                                                      func6082.definitionLine = 39;
                                                                                                      func6082.definitionModule = "objectdraw";
                                                                                                      setLineNumber(44);    // compilenode typedec
                                                                                                      // Type decl Component
                                                                                                      //   Type literal 
                                                                                                      var type6084 = new GraceType("Component");
                                                                                                      type6084.typeMethods.push("element");
                                                                                                      type6084.typeMethods.push("width");
                                                                                                      type6084.typeMethods.push("height");
                                                                                                      type6084.typeMethods.push("size");
                                                                                                      type6084.typeMethods.push("onMouseClickDo");
                                                                                                      type6084.typeMethods.push("onMousePressDo");
                                                                                                      type6084.typeMethods.push("onMouseReleaseDo");
                                                                                                      type6084.typeMethods.push("onMouseMoveDo");
                                                                                                      type6084.typeMethods.push("onMouseDragDo");
                                                                                                      type6084.typeMethods.push("onMouseEnterDo");
                                                                                                      type6084.typeMethods.push("onMouseExitDo");
                                                                                                      type6084.typeMethods.push("onKeyTypeDo");
                                                                                                      type6084.typeMethods.push("onKeyPressDo");
                                                                                                      type6084.typeMethods.push("onKeyReleaseDo");
                                                                                                      type6084.typeMethods.push("isFlexible");
                                                                                                      type6084.typeMethods.push("flexible:=");
                                                                                                      var var_Component = type6084;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6085 = function(argcv) {    // method Component
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Component"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Component is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(44);    // compilenode identifier
                                                                                                        return var_Component;
                                                                                                      };
                                                                                                      func6085.paramCounts = [0];
                                                                                                      this.methods["Component"] = func6085;
                                                                                                      func6085.definitionLine = 39;
                                                                                                      func6085.definitionModule = "objectdraw";
                                                                                                      setLineNumber(101);    // compilenode typedec
                                                                                                      // Type decl Container
                                                                                                      //   Type literal 
                                                                                                      var type6087 = new GraceType("\u2039anon\u203a");
                                                                                                      type6087.typeMethods.push("size");
                                                                                                      type6087.typeMethods.push("at");
                                                                                                      type6087.typeMethods.push("at()put");
                                                                                                      type6087.typeMethods.push("append");
                                                                                                      type6087.typeMethods.push("prepend");
                                                                                                      type6087.typeMethods.push("do");
                                                                                                      type6087.typeMethods.push("arrangeHorizontal");
                                                                                                      type6087.typeMethods.push("arrangeVertical");
                                                                                                      var opresult6090 = callmethodChecked(var_Component, "&", [1], type6087);
                                                                                                      var var_Container = opresult6090;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6091 = function(argcv) {    // method Container
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Container"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Container is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(101);    // compilenode identifier
                                                                                                        return var_Container;
                                                                                                      };
                                                                                                      func6091.paramCounts = [0];
                                                                                                      this.methods["Container"] = func6091;
                                                                                                      func6091.definitionLine = 39;
                                                                                                      func6091.definitionModule = "objectdraw";
                                                                                                      setLineNumber(132);    // compilenode typedec
                                                                                                      // Type decl Application
                                                                                                      //   Type literal 
                                                                                                      var type6093 = new GraceType("\u2039anon\u203a");
                                                                                                      type6093.typeMethods.push("windowTitle");
                                                                                                      type6093.typeMethods.push("windowTitle:=");
                                                                                                      type6093.typeMethods.push("startApplication");
                                                                                                      type6093.typeMethods.push("stopApplication");
                                                                                                      var opresult6096 = callmethodChecked(var_Container, "&", [1], type6093);
                                                                                                      var var_Application = opresult6096;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6097 = function(argcv) {    // method Application
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Application"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Application is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(132);    // compilenode identifier
                                                                                                        return var_Application;
                                                                                                      };
                                                                                                      func6097.paramCounts = [0];
                                                                                                      this.methods["Application"] = func6097;
                                                                                                      func6097.definitionLine = 39;
                                                                                                      func6097.definitionModule = "objectdraw";
                                                                                                      setLineNumber(148);    // compilenode typedec
                                                                                                      // Type decl Graphic
                                                                                                      //   Type literal 
                                                                                                      var type6099 = new GraceType("Graphic");
                                                                                                      type6099.typeMethods.push("location");
                                                                                                      type6099.typeMethods.push("x");
                                                                                                      type6099.typeMethods.push("y");
                                                                                                      type6099.typeMethods.push("addToCanvas");
                                                                                                      type6099.typeMethods.push("removeFromCanvas");
                                                                                                      type6099.typeMethods.push("isVisible");
                                                                                                      type6099.typeMethods.push("visible:=");
                                                                                                      type6099.typeMethods.push("moveTo");
                                                                                                      type6099.typeMethods.push("moveBy");
                                                                                                      type6099.typeMethods.push("contains");
                                                                                                      type6099.typeMethods.push("overlaps");
                                                                                                      type6099.typeMethods.push("color:=");
                                                                                                      type6099.typeMethods.push("color");
                                                                                                      type6099.typeMethods.push("sendForward");
                                                                                                      type6099.typeMethods.push("sendBackward");
                                                                                                      type6099.typeMethods.push("sendToFront");
                                                                                                      type6099.typeMethods.push("sendToBack");
                                                                                                      var var_Graphic = type6099;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6100 = function(argcv) {    // method Graphic
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Graphic"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Graphic is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(148);    // compilenode identifier
                                                                                                        return var_Graphic;
                                                                                                      };
                                                                                                      func6100.paramCounts = [0];
                                                                                                      this.methods["Graphic"] = func6100;
                                                                                                      func6100.definitionLine = 39;
                                                                                                      func6100.definitionModule = "objectdraw";
                                                                                                      setLineNumber(206);    // compilenode typedec
                                                                                                      // Type decl DrawingCanvas
                                                                                                      //   Type literal 
                                                                                                      var type6102 = new GraceType("\u2039anon\u203a");
                                                                                                      type6102.typeMethods.push("startDrawing");
                                                                                                      type6102.typeMethods.push("add");
                                                                                                      type6102.typeMethods.push("remove");
                                                                                                      type6102.typeMethods.push("notifyRedraw");
                                                                                                      type6102.typeMethods.push("clear");
                                                                                                      type6102.typeMethods.push("sendToFront");
                                                                                                      type6102.typeMethods.push("sendToBack");
                                                                                                      type6102.typeMethods.push("sendForward");
                                                                                                      type6102.typeMethods.push("sendBackward");
                                                                                                      type6102.typeMethods.push("width");
                                                                                                      type6102.typeMethods.push("height");
                                                                                                      var opresult6105 = callmethodChecked(var_Component, "&", [1], type6102);
                                                                                                      var var_DrawingCanvas = opresult6105;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6106 = function(argcv) {    // method DrawingCanvas
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for DrawingCanvas"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // DrawingCanvas is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(206);    // compilenode identifier
                                                                                                        return var_DrawingCanvas;
                                                                                                      };
                                                                                                      func6106.paramCounts = [0];
                                                                                                      this.methods["DrawingCanvas"] = func6106;
                                                                                                      func6106.definitionLine = 39;
                                                                                                      func6106.definitionModule = "objectdraw";
                                                                                                      setLineNumber(243);    // compilenode typedec
                                                                                                      // Type decl GraphicApplication
                                                                                                      //   Type literal 
                                                                                                      var type6108 = new GraceType("\u2039anon\u203a");
                                                                                                      type6108.typeMethods.push("canvas");
                                                                                                      type6108.typeMethods.push("onMouseClick");
                                                                                                      type6108.typeMethods.push("onMousePress");
                                                                                                      type6108.typeMethods.push("onMouseRelease");
                                                                                                      type6108.typeMethods.push("onMouseMove");
                                                                                                      type6108.typeMethods.push("onMouseDrag");
                                                                                                      type6108.typeMethods.push("onMouseEnter");
                                                                                                      type6108.typeMethods.push("onMouseExit");
                                                                                                      type6108.typeMethods.push("startGraphics");
                                                                                                      var opresult6111 = callmethodChecked(var_Application, "&", [1], type6108);
                                                                                                      var var_GraphicApplication = opresult6111;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6112 = function(argcv) {    // method GraphicApplication
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for GraphicApplication"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // GraphicApplication is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(243);    // compilenode identifier
                                                                                                        return var_GraphicApplication;
                                                                                                      };
                                                                                                      func6112.paramCounts = [0];
                                                                                                      this.methods["GraphicApplication"] = func6112;
                                                                                                      func6112.definitionLine = 39;
                                                                                                      func6112.definitionModule = "objectdraw";
                                                                                                      setLineNumber(276);    // compilenode typedec
                                                                                                      // Type decl Graphic2D
                                                                                                      //   Type literal 
                                                                                                      var type6114 = new GraceType("\u2039anon\u203a");
                                                                                                      type6114.typeMethods.push("width");
                                                                                                      type6114.typeMethods.push("height");
                                                                                                      type6114.typeMethods.push("size");
                                                                                                      type6114.typeMethods.push("size:=");
                                                                                                      type6114.typeMethods.push("width:=");
                                                                                                      type6114.typeMethods.push("height:=");
                                                                                                      var opresult6117 = callmethodChecked(var_Graphic, "&", [1], type6114);
                                                                                                      var var_Graphic2D = opresult6117;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6118 = function(argcv) {    // method Graphic2D
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Graphic2D"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Graphic2D is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(276);    // compilenode identifier
                                                                                                        return var_Graphic2D;
                                                                                                      };
                                                                                                      func6118.paramCounts = [0];
                                                                                                      this.methods["Graphic2D"] = func6118;
                                                                                                      func6118.definitionLine = 39;
                                                                                                      func6118.definitionModule = "objectdraw";
                                                                                                      setLineNumber(290);    // compilenode typedec
                                                                                                      // Type decl Line
                                                                                                      //   Type literal 
                                                                                                      var type6120 = new GraceType("\u2039anon\u203a");
                                                                                                      type6120.typeMethods.push("start");
                                                                                                      type6120.typeMethods.push("end");
                                                                                                      type6120.typeMethods.push("start:=");
                                                                                                      type6120.typeMethods.push("end:=");
                                                                                                      type6120.typeMethods.push("setEndPoints");
                                                                                                      var opresult6123 = callmethodChecked(var_Graphic, "&", [1], type6120);
                                                                                                      var var_Line = opresult6123;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6124 = function(argcv) {    // method Line
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Line"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Line is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(290);    // compilenode identifier
                                                                                                        return var_Line;
                                                                                                      };
                                                                                                      func6124.paramCounts = [0];
                                                                                                      this.methods["Line"] = func6124;
                                                                                                      func6124.definitionLine = 39;
                                                                                                      func6124.definitionModule = "objectdraw";
                                                                                                      setLineNumber(302);    // compilenode typedec
                                                                                                      // Type decl Text
                                                                                                      //   Type literal 
                                                                                                      var type6126 = new GraceType("\u2039anon\u203a");
                                                                                                      type6126.typeMethods.push("contents");
                                                                                                      type6126.typeMethods.push("contents:=");
                                                                                                      type6126.typeMethods.push("width");
                                                                                                      type6126.typeMethods.push("fontSize");
                                                                                                      type6126.typeMethods.push("fontSize:=");
                                                                                                      var opresult6129 = callmethodChecked(var_Graphic, "&", [1], type6126);
                                                                                                      var var_Text = opresult6129;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6130 = function(argcv) {    // method Text
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Text"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Text is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(302);    // compilenode identifier
                                                                                                        return var_Text;
                                                                                                      };
                                                                                                      func6130.paramCounts = [0];
                                                                                                      this.methods["Text"] = func6130;
                                                                                                      func6130.definitionLine = 39;
                                                                                                      func6130.definitionModule = "objectdraw";
                                                                                                      setLineNumber(322);    // compilenode typedec
                                                                                                      // Type decl TextBox
                                                                                                      //   Type literal 
                                                                                                      var type6132 = new GraceType("\u2039anon\u203a");
                                                                                                      type6132.typeMethods.push("contents");
                                                                                                      type6132.typeMethods.push("contents:=");
                                                                                                      var opresult6135 = callmethodChecked(var_Component, "&", [1], type6132);
                                                                                                      var var_TextBox = opresult6135;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6136 = function(argcv) {    // method TextBox
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for TextBox"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // TextBox is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(322);    // compilenode identifier
                                                                                                        return var_TextBox;
                                                                                                      };
                                                                                                      func6136.paramCounts = [0];
                                                                                                      this.methods["TextBox"] = func6136;
                                                                                                      func6136.definitionLine = 39;
                                                                                                      func6136.definitionModule = "objectdraw";
                                                                                                      setLineNumber(331);    // compilenode typedec
                                                                                                      // Type decl Labeled
                                                                                                      //   Type literal 
                                                                                                      var type6138 = new GraceType("\u2039anon\u203a");
                                                                                                      type6138.typeMethods.push("label");
                                                                                                      type6138.typeMethods.push("label:=");
                                                                                                      var opresult6141 = callmethodChecked(var_Component, "&", [1], type6138);
                                                                                                      var var_Labeled = opresult6141;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6142 = function(argcv) {    // method Labeled
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Labeled"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Labeled is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(331);    // compilenode identifier
                                                                                                        return var_Labeled;
                                                                                                      };
                                                                                                      func6142.paramCounts = [0];
                                                                                                      this.methods["Labeled"] = func6142;
                                                                                                      func6142.definitionLine = 39;
                                                                                                      func6142.definitionModule = "objectdraw";
                                                                                                      setLineNumber(340);    // compilenode typedec
                                                                                                      // Type decl Button
                                                                                                      var var_Button = var_Labeled;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6144 = function(argcv) {    // method Button
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Button"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Button is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(340);    // compilenode identifier
                                                                                                        return var_Button;
                                                                                                      };
                                                                                                      func6144.paramCounts = [0];
                                                                                                      this.methods["Button"] = func6144;
                                                                                                      func6144.definitionLine = 39;
                                                                                                      func6144.definitionModule = "objectdraw";
                                                                                                      setLineNumber(343);    // compilenode typedec
                                                                                                      // Type decl Input
                                                                                                      //   Type literal 
                                                                                                      var type6146 = new GraceType("\u2039anon\u203a");
                                                                                                      type6146.typeMethods.push("onFocusDo");
                                                                                                      type6146.typeMethods.push("onBlurDo");
                                                                                                      type6146.typeMethods.push("onChangeDo");
                                                                                                      var opresult6149 = callmethodChecked(var_Labeled, "&", [1], type6146);
                                                                                                      var var_Input = opresult6149;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6150 = function(argcv) {    // method Input
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Input"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Input is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(343);    // compilenode identifier
                                                                                                        return var_Input;
                                                                                                      };
                                                                                                      func6150.paramCounts = [0];
                                                                                                      this.methods["Input"] = func6150;
                                                                                                      func6150.definitionLine = 39;
                                                                                                      func6150.definitionModule = "objectdraw";
                                                                                                      setLineNumber(357);    // compilenode typedec
                                                                                                      // Type decl TextField
                                                                                                      //   Type literal 
                                                                                                      var type6152 = new GraceType("\u2039anon\u203a");
                                                                                                      type6152.typeMethods.push("text");
                                                                                                      type6152.typeMethods.push("text:=");
                                                                                                      var opresult6155 = callmethodChecked(var_Input, "&", [1], type6152);
                                                                                                      var var_TextField = opresult6155;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6156 = function(argcv) {    // method TextField
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for TextField"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // TextField is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(357);    // compilenode identifier
                                                                                                        return var_TextField;
                                                                                                      };
                                                                                                      func6156.paramCounts = [0];
                                                                                                      this.methods["TextField"] = func6156;
                                                                                                      func6156.definitionLine = 39;
                                                                                                      func6156.definitionModule = "objectdraw";
                                                                                                      setLineNumber(366);    // compilenode typedec
                                                                                                      // Type decl NumberField
                                                                                                      //   Type literal 
                                                                                                      var type6158 = new GraceType("\u2039anon\u203a");
                                                                                                      type6158.typeMethods.push("number");
                                                                                                      type6158.typeMethods.push("number:=");
                                                                                                      var opresult6161 = callmethodChecked(var_Input, "&", [1], type6158);
                                                                                                      var var_NumberField = opresult6161;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6162 = function(argcv) {    // method NumberField
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for NumberField"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // NumberField is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(366);    // compilenode identifier
                                                                                                        return var_NumberField;
                                                                                                      };
                                                                                                      func6162.paramCounts = [0];
                                                                                                      this.methods["NumberField"] = func6162;
                                                                                                      func6162.definitionLine = 39;
                                                                                                      func6162.definitionModule = "objectdraw";
                                                                                                      setLineNumber(375);    // compilenode typedec
                                                                                                      // Type decl Choice
                                                                                                      //   Type literal 
                                                                                                      var type6164 = new GraceType("\u2039anon\u203a");
                                                                                                      type6164.typeMethods.push("selected");
                                                                                                      type6164.typeMethods.push("selected:=");
                                                                                                      var opresult6167 = callmethodChecked(var_Input, "&", [1], type6164);
                                                                                                      var var_Choice = opresult6167;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6168 = function(argcv) {    // method Choice
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Choice"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Choice is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(375);    // compilenode identifier
                                                                                                        return var_Choice;
                                                                                                      };
                                                                                                      func6168.paramCounts = [0];
                                                                                                      this.methods["Choice"] = func6168;
                                                                                                      func6168.definitionLine = 39;
                                                                                                      func6168.definitionModule = "objectdraw";
                                                                                                      setLineNumber(385);    // compilenode typedec
                                                                                                      // Type decl Color
                                                                                                      //   Type literal 
                                                                                                      var type6170 = new GraceType("Color");
                                                                                                      type6170.typeMethods.push("red");
                                                                                                      type6170.typeMethods.push("green");
                                                                                                      type6170.typeMethods.push("blue");
                                                                                                      var var_Color = type6170;
                                                                                                      setLineNumber(39);    // compilenode method
                                                                                                      var func6171 = function(argcv) {    // method Color
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Color"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // Color is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(385);    // compilenode identifier
                                                                                                        return var_Color;
                                                                                                      };
                                                                                                      func6171.paramCounts = [0];
                                                                                                      this.methods["Color"] = func6171;
                                                                                                      func6171.definitionLine = 39;
                                                                                                      func6171.definitionModule = "objectdraw";
                                                                                                      setLineNumber(394);    // compilenode string
                                                                                                      var string6172 = new GraceString("Color Out Of Range");
                                                                                                      var call6173 = callmethodChecked(var_prelude, "ProgrammingError", [0]);
                                                                                                      var call6174 = callmethodChecked(call6173, "refine", [1], string6172);
                                                                                                      var var_ColorOutOfRange = call6174;
                                                                                                      var func6175 = function(argcv) {    // method ColorOutOfRange
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ColorOutOfRange"));
                                                                                                        setModuleName("objectdraw");
                                                                                                        // ColorOutOfRange is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(393);    // compilenode identifier
                                                                                                        return var_ColorOutOfRange;
                                                                                                      };
                                                                                                      func6175.paramCounts = [0];
                                                                                                      this.methods["ColorOutOfRange"] = func6175;
                                                                                                      func6175.definitionLine = 394;
                                                                                                      func6175.definitionModule = "objectdraw";
                                                                                                      this.methods["ColorOutOfRange"].debug = "def";
                                                                                                      var call6176 = callmethodChecked(var_prelude, "ExceptionKind", [0]);
                                                                                                      if (!Grace_isTrue(callmethod(call6176, "match", [1], var_ColorOutOfRange)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'ColorOutOfRange' is not of type prelude.ExceptionKind"));
                                                                                                      setLineNumber(397);    // compilenode object
                                                                                                      var obj6177 = Grace_allocObject(GraceObject, "color");
                                                                                                      obj6177.definitionModule = "objectdraw";
                                                                                                      obj6177.definitionLine = 397;
                                                                                                      obj6177.outer = this;
                                                                                                      var reader_objectdraw_outer6178 = function() {
                                                                                                        return this.outer;
                                                                                                      };
                                                                                                      obj6177.methods["outer"] = reader_objectdraw_outer6178;
                                                                                                      var obj_init_6177 = function() {
                                                                                                        var origSuperDepth = superDepth;
                                                                                                        superDepth = obj6177;
                                                                                                        var func6179 = function(argcv) {    // method r(1)g(1)b(1)
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          var var_r__39__ = arguments[curarg];
                                                                                                          curarg++;
                                                                                                          if (argcv[0] !== 1)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for r (arg list 1) of r(1)g(1)b(1)"));
                                                                                                          var var_g__39__ = arguments[curarg];
                                                                                                          curarg++;
                                                                                                          if (argcv[1] !== 1)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for g (arg list 2) of r(1)g(1)b(1)"));
                                                                                                          var var_b__39__ = arguments[curarg];
                                                                                                          curarg++;
                                                                                                          if (argcv[2] !== 1)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for b (arg list 3) of r(1)g(1)b(1)"));
                                                                                                          // Start argument checking
                                                                                                          curarg = 1;
                                                                                                          setLineNumber(398);    // compilenode identifier
                                                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("argument 1 in r (arg list 1), which corresponds to parameter r', does not have " + 
                                                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                          curarg++;
                                                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("argument 1 in g (arg list 2), which corresponds to parameter g', does not have " + 
                                                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                          curarg++;
                                                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("argument 1 in b (arg list 3), which corresponds to parameter b', does not have " + 
                                                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                          curarg++;
                                                                                                          // End argument checking
                                                                                                          setModuleName("objectdraw");
                                                                                                          var obj6180 = Grace_allocObject(GraceObject, "color.r()g()b");
                                                                                                          obj6180.definitionModule = "objectdraw";
                                                                                                          obj6180.definitionLine = 398;
                                                                                                          obj6180.outer = this;
                                                                                                          var reader_objectdraw_outer6181 = function() {
                                                                                                            return this.outer;
                                                                                                          };
                                                                                                          obj6180.methods["outer"] = reader_objectdraw_outer6181;
                                                                                                          var obj_init_6180 = function() {
                                                                                                            var origSuperDepth = superDepth;
                                                                                                            superDepth = obj6180;
                                                                                                            var func6182 = function(argcv) {    // method ==(1)
                                                                                                              var returnTarget = invocationCount;
                                                                                                              invocationCount++;
                                                                                                              var curarg = 1;
                                                                                                              var var_c = arguments[curarg];
                                                                                                              curarg++;
                                                                                                              if (argcv[0] !== 1)
                                                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
                                                                                                              // Start argument checking
                                                                                                              curarg = 1;
                                                                                                              setLineNumber(416);    // compilenode identifier
                                                                                                              if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                      new GraceString("argument 1 in == (arg list 1), which corresponds to parameter c, does not have " + 
                                                                                                                          callmethod(var_Color, "asString", [0])._value + "."));
                                                                                                              curarg++;
                                                                                                              // End argument checking
                                                                                                              setModuleName("objectdraw");
                                                                                                              setLineNumber(417);    // compilenode identifier
                                                                                                              var call6183 = callmethodChecked(var_c, "blue", [0]);
                                                                                                              onSelf = true;
                                                                                                              var call6185 = callmethodChecked(this, "blue", [0]);
                                                                                                              var opresult6187 = callmethodChecked(call6185, "==", [1], call6183);
                                                                                                              var call6189 = callmethodChecked(var_c, "green", [0]);
                                                                                                              onSelf = true;
                                                                                                              var call6191 = callmethodChecked(this, "green", [0]);
                                                                                                              var opresult6193 = callmethodChecked(call6191, "==", [1], call6189);
                                                                                                              var call6195 = callmethodChecked(var_c, "red", [0]);
                                                                                                              onSelf = true;
                                                                                                              var call6197 = callmethodChecked(this, "red", [0]);
                                                                                                              var opresult6199 = callmethodChecked(call6197, "==", [1], call6195);
                                                                                                              var opresult6201 = callmethodChecked(opresult6199, "&&", [1], opresult6193);
                                                                                                              var opresult6203 = callmethodChecked(opresult6201, "&&", [1], opresult6187);
                                                                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult6203)))
                                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                      new GraceString("result of method ==(1) does not have " + 
                                                                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                              return opresult6203;
                                                                                                            };
                                                                                                            func6182.paramTypes = [];
                                                                                                            func6182.paramTypes.push([]);
                                                                                                            func6182.paramCounts = [1];
                                                                                                            obj6180.methods["=="] = func6182;
                                                                                                            func6182.definitionLine = 416;
                                                                                                            func6182.definitionModule = "objectdraw";
                                                                                                            var func6204 = function(argcv) {    // method asString
                                                                                                              var returnTarget = invocationCount;
                                                                                                              invocationCount++;
                                                                                                              var curarg = 1;
                                                                                                              if (argcv[0] !== 0)
                                                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                              setModuleName("objectdraw");
                                                                                                              setLineNumber(421);    // compilenode string
                                                                                                              var string6205 = new GraceString(")");
                                                                                                              onSelf = true;
                                                                                                              var call6207 = callmethodChecked(this, "blue", [0]);
                                                                                                              var string6209 = new GraceString(", ");
                                                                                                              onSelf = true;
                                                                                                              var call6211 = callmethodChecked(this, "green", [0]);
                                                                                                              var string6213 = new GraceString(", ");
                                                                                                              onSelf = true;
                                                                                                              var call6215 = callmethodChecked(this, "red", [0]);
                                                                                                              var string6217 = new GraceString("color w/ rgb(");
                                                                                                              var opresult6219 = callmethodChecked(string6217, "++", [1], call6215);
                                                                                                              var opresult6221 = callmethodChecked(opresult6219, "++", [1], string6213);
                                                                                                              var opresult6223 = callmethodChecked(opresult6221, "++", [1], call6211);
                                                                                                              var opresult6225 = callmethodChecked(opresult6223, "++", [1], string6209);
                                                                                                              var opresult6227 = callmethodChecked(opresult6225, "++", [1], call6207);
                                                                                                              var opresult6229 = callmethodChecked(opresult6227, "++", [1], string6205);
                                                                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult6229)))
                                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                      new GraceString("result of method asString does not have " + 
                                                                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                                                                              return opresult6229;
                                                                                                            };
                                                                                                            func6204.paramCounts = [0];
                                                                                                            obj6180.methods["asString"] = func6204;
                                                                                                            func6204.definitionLine = 420;
                                                                                                            func6204.definitionModule = "objectdraw";
                                                                                                            var if6230 = GraceDone;
                                                                                                            setLineNumber(400);    // compilenode identifier
                                                                                                            var opresult6233 = callmethodChecked(var_r__39__, ">", [1], new GraceNum(255));
                                                                                                            var opresult6237 = callmethodChecked(var_r__39__, "<", [1], new GraceNum(0));
                                                                                                            var opresult6239 = callmethodChecked(opresult6237, "||", [1], opresult6233);
                                                                                                            if (Grace_isTrue(opresult6239)) {
                                                                                                              setLineNumber(401);    // compilenode string
                                                                                                              var string6240 = new GraceString(" out of bounds 0..255");
                                                                                                              var string6243 = new GraceString("red index ");
                                                                                                              var opresult6245 = callmethodChecked(string6243, "++", [1], var_r__39__);
                                                                                                              var opresult6247 = callmethodChecked(opresult6245, "++", [1], string6240);
                                                                                                              var call6248 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6247);
                                                                                                              if6230 = call6248;
                                                                                                            }
                                                                                                            var if6249 = GraceDone;
                                                                                                            setLineNumber(404);    // compilenode identifier
                                                                                                            var opresult6252 = callmethodChecked(var_g__39__, ">", [1], new GraceNum(255));
                                                                                                            var opresult6256 = callmethodChecked(var_g__39__, "<", [1], new GraceNum(0));
                                                                                                            var opresult6258 = callmethodChecked(opresult6256, "||", [1], opresult6252);
                                                                                                            if (Grace_isTrue(opresult6258)) {
                                                                                                              setLineNumber(405);    // compilenode string
                                                                                                              var string6259 = new GraceString(" out of bounds 0..255");
                                                                                                              var string6262 = new GraceString("green index ");
                                                                                                              var opresult6264 = callmethodChecked(string6262, "++", [1], var_g__39__);
                                                                                                              var opresult6266 = callmethodChecked(opresult6264, "++", [1], string6259);
                                                                                                              var call6267 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6266);
                                                                                                              if6249 = call6267;
                                                                                                            }
                                                                                                            var if6268 = GraceDone;
                                                                                                            setLineNumber(408);    // compilenode identifier
                                                                                                            var opresult6271 = callmethodChecked(var_b__39__, ">", [1], new GraceNum(255));
                                                                                                            var opresult6275 = callmethodChecked(var_b__39__, "<", [1], new GraceNum(0));
                                                                                                            var opresult6277 = callmethodChecked(opresult6275, "||", [1], opresult6271);
                                                                                                            if (Grace_isTrue(opresult6277)) {
                                                                                                              setLineNumber(409);    // compilenode string
                                                                                                              var string6278 = new GraceString(" out of bounds 0..255");
                                                                                                              var string6281 = new GraceString("blue index ");
                                                                                                              var opresult6283 = callmethodChecked(string6281, "++", [1], var_b__39__);
                                                                                                              var opresult6285 = callmethodChecked(opresult6283, "++", [1], string6278);
                                                                                                              var call6286 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6285);
                                                                                                              if6268 = call6286;
                                                                                                            }
                                                                                                            setLineNumber(412);    // compilenode identifier
                                                                                                            var call6287 = callmethodChecked(var_r__39__, "truncated", [0]);
                                                                                                            obj6180.data["red"] = call6287;
                                                                                                            var reader_objectdraw_red6288 = function() {
                                                                                                              return this.data["red"];
                                                                                                            };
                                                                                                            reader_objectdraw_red6288.def = true;
                                                                                                            obj6180.methods["red"] = reader_objectdraw_red6288;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6287)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("value of def 'red' is not of type Number"));
                                                                                                            setLineNumber(413);    // compilenode identifier
                                                                                                            var call6289 = callmethodChecked(var_g__39__, "truncated", [0]);
                                                                                                            obj6180.data["green"] = call6289;
                                                                                                            var reader_objectdraw_green6290 = function() {
                                                                                                              return this.data["green"];
                                                                                                            };
                                                                                                            reader_objectdraw_green6290.def = true;
                                                                                                            obj6180.methods["green"] = reader_objectdraw_green6290;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6289)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("value of def 'green' is not of type Number"));
                                                                                                            setLineNumber(414);    // compilenode identifier
                                                                                                            var call6291 = callmethodChecked(var_b__39__, "truncated", [0]);
                                                                                                            obj6180.data["blue"] = call6291;
                                                                                                            var reader_objectdraw_blue6292 = function() {
                                                                                                              return this.data["blue"];
                                                                                                            };
                                                                                                            reader_objectdraw_blue6292.def = true;
                                                                                                            obj6180.methods["blue"] = reader_objectdraw_blue6292;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6291)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("value of def 'blue' is not of type Number"));
                                                                                                            superDepth = origSuperDepth;
                                                                                                          };
                                                                                                          obj_init_6180.apply(obj6180, []);
                                                                                                          setLineNumber(398);    // return value
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], obj6180)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method r(1)g(1)b(1) does not have " + 
                                                                                                                      callmethod(var_Color, "asString", [0])._value + "."));
                                                                                                          return obj6180;
                                                                                                        };
                                                                                                        func6179.paramTypes = [];
                                                                                                        func6179.paramTypes.push([type_Number, "r'"]);
                                                                                                        func6179.paramTypes.push([type_Number, "g'"]);
                                                                                                        func6179.paramTypes.push([type_Number, "b'"]);
                                                                                                        func6179.paramCounts = [1, 1, 1];
                                                                                                        obj6177.methods["r()g()b"] = func6179;
                                                                                                        func6179.definitionLine = 398;
                                                                                                        func6179.definitionModule = "objectdraw";
                                                                                                          var func6293 = function(argcv) {    // method r(1     )g(1     )b(1     )()object
                                                                                                            var curarg = 1;
                                                                                                            var var_r__39__ = arguments[curarg];
                                                                                                            curarg++;
                                                                                                            var var_g__39__ = arguments[curarg];
                                                                                                            curarg++;
                                                                                                            var var_b__39__ = arguments[curarg];
                                                                                                            curarg++;
                                                                                                            var inheritingObject = arguments[curarg++];
                                                                                                            // Start argument processing
                                                                                                            curarg = 1;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("argument 1 in r (arg list 1), which corresponds to parameter r', does not have " + 
                                                                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                            curarg++;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("argument 1 in g (arg list 2), which corresponds to parameter g', does not have " + 
                                                                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                            curarg++;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("argument 1 in b (arg list 3), which corresponds to parameter b', does not have " + 
                                                                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                            curarg++;
                                                                                                            // End argument processing
                                                                                                            setModuleName("objectdraw");
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var obj6294 = Grace_allocObject(GraceObject, "r()g()b");
                                                                                                            obj6294.definitionModule = "objectdraw";
                                                                                                            obj6294.definitionLine = 398;
                                                                                                            var inho6294 = inheritingObject;
                                                                                                            while (inho6294.superobj) inho6294 = inho6294.superobj;
                                                                                                            inho6294.superobj = obj6294;
                                                                                                            obj6294.data = inheritingObject.data;
                                                                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                                                                              obj6294._value = inheritingObject._value;
                                                                                                            obj6294.outer = this;
                                                                                                            var reader_objectdraw_outer6295 = function() {
                                                                                                              return this.outer;
                                                                                                            };
                                                                                                            obj6294.methods["outer"] = reader_objectdraw_outer6295;
                                                                                                            var obj_init_6294 = function() {
                                                                                                              var origSuperDepth = superDepth;
                                                                                                              superDepth = obj6294;
                                                                                                              var func6296 = function(argcv) {    // method ==(1)
                                                                                                                var returnTarget = invocationCount;
                                                                                                                invocationCount++;
                                                                                                                var curarg = 1;
                                                                                                                var var_c = arguments[curarg];
                                                                                                                curarg++;
                                                                                                                if (argcv[0] !== 1)
                                                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
                                                                                                                // Start argument checking
                                                                                                                curarg = 1;
                                                                                                                setLineNumber(416);    // compilenode identifier
                                                                                                                if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                        new GraceString("argument 1 in == (arg list 1), which corresponds to parameter c, does not have " + 
                                                                                                                            callmethod(var_Color, "asString", [0])._value + "."));
                                                                                                                curarg++;
                                                                                                                // End argument checking
                                                                                                                setModuleName("objectdraw");
                                                                                                                setLineNumber(417);    // compilenode identifier
                                                                                                                var call6297 = callmethodChecked(var_c, "blue", [0]);
                                                                                                                onSelf = true;
                                                                                                                var call6299 = callmethodChecked(this, "blue", [0]);
                                                                                                                var opresult6301 = callmethodChecked(call6299, "==", [1], call6297);
                                                                                                                var call6303 = callmethodChecked(var_c, "green", [0]);
                                                                                                                onSelf = true;
                                                                                                                var call6305 = callmethodChecked(this, "green", [0]);
                                                                                                                var opresult6307 = callmethodChecked(call6305, "==", [1], call6303);
                                                                                                                var call6309 = callmethodChecked(var_c, "red", [0]);
                                                                                                                onSelf = true;
                                                                                                                var call6311 = callmethodChecked(this, "red", [0]);
                                                                                                                var opresult6313 = callmethodChecked(call6311, "==", [1], call6309);
                                                                                                                var opresult6315 = callmethodChecked(opresult6313, "&&", [1], opresult6307);
                                                                                                                var opresult6317 = callmethodChecked(opresult6315, "&&", [1], opresult6301);
                                                                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult6317)))
                                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                        new GraceString("result of method ==(1) does not have " + 
                                                                                                                            callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                                return opresult6317;
                                                                                                              };
                                                                                                              func6296.paramTypes = [];
                                                                                                              func6296.paramTypes.push([]);
                                                                                                              func6296.paramCounts = [1];
                                                                                                              obj6294.methods["=="] = func6296;
                                                                                                              func6296.definitionLine = 416;
                                                                                                              func6296.definitionModule = "objectdraw";
                                                                                                              var func6318 = function(argcv) {    // method asString
                                                                                                                var returnTarget = invocationCount;
                                                                                                                invocationCount++;
                                                                                                                var curarg = 1;
                                                                                                                if (argcv[0] !== 0)
                                                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                                setModuleName("objectdraw");
                                                                                                                setLineNumber(421);    // compilenode string
                                                                                                                var string6319 = new GraceString(")");
                                                                                                                onSelf = true;
                                                                                                                var call6321 = callmethodChecked(this, "blue", [0]);
                                                                                                                var string6323 = new GraceString(", ");
                                                                                                                onSelf = true;
                                                                                                                var call6325 = callmethodChecked(this, "green", [0]);
                                                                                                                var string6327 = new GraceString(", ");
                                                                                                                onSelf = true;
                                                                                                                var call6329 = callmethodChecked(this, "red", [0]);
                                                                                                                var string6331 = new GraceString("color w/ rgb(");
                                                                                                                var opresult6333 = callmethodChecked(string6331, "++", [1], call6329);
                                                                                                                var opresult6335 = callmethodChecked(opresult6333, "++", [1], string6327);
                                                                                                                var opresult6337 = callmethodChecked(opresult6335, "++", [1], call6325);
                                                                                                                var opresult6339 = callmethodChecked(opresult6337, "++", [1], string6323);
                                                                                                                var opresult6341 = callmethodChecked(opresult6339, "++", [1], call6321);
                                                                                                                var opresult6343 = callmethodChecked(opresult6341, "++", [1], string6319);
                                                                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult6343)))
                                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                        new GraceString("result of method asString does not have " + 
                                                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                                                return opresult6343;
                                                                                                              };
                                                                                                              func6318.paramCounts = [0];
                                                                                                              obj6294.methods["asString"] = func6318;
                                                                                                              func6318.definitionLine = 420;
                                                                                                              func6318.definitionModule = "objectdraw";
                                                                                                              var if6344 = GraceDone;
                                                                                                              setLineNumber(400);    // compilenode identifier
                                                                                                              var opresult6347 = callmethodChecked(var_r__39__, ">", [1], new GraceNum(255));
                                                                                                              var opresult6351 = callmethodChecked(var_r__39__, "<", [1], new GraceNum(0));
                                                                                                              var opresult6353 = callmethodChecked(opresult6351, "||", [1], opresult6347);
                                                                                                              if (Grace_isTrue(opresult6353)) {
                                                                                                                setLineNumber(401);    // compilenode string
                                                                                                                var string6354 = new GraceString(" out of bounds 0..255");
                                                                                                                var string6357 = new GraceString("red index ");
                                                                                                                var opresult6359 = callmethodChecked(string6357, "++", [1], var_r__39__);
                                                                                                                var opresult6361 = callmethodChecked(opresult6359, "++", [1], string6354);
                                                                                                                var call6362 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6361);
                                                                                                                if6344 = call6362;
                                                                                                              }
                                                                                                              var if6363 = GraceDone;
                                                                                                              setLineNumber(404);    // compilenode identifier
                                                                                                              var opresult6366 = callmethodChecked(var_g__39__, ">", [1], new GraceNum(255));
                                                                                                              var opresult6370 = callmethodChecked(var_g__39__, "<", [1], new GraceNum(0));
                                                                                                              var opresult6372 = callmethodChecked(opresult6370, "||", [1], opresult6366);
                                                                                                              if (Grace_isTrue(opresult6372)) {
                                                                                                                setLineNumber(405);    // compilenode string
                                                                                                                var string6373 = new GraceString(" out of bounds 0..255");
                                                                                                                var string6376 = new GraceString("green index ");
                                                                                                                var opresult6378 = callmethodChecked(string6376, "++", [1], var_g__39__);
                                                                                                                var opresult6380 = callmethodChecked(opresult6378, "++", [1], string6373);
                                                                                                                var call6381 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6380);
                                                                                                                if6363 = call6381;
                                                                                                              }
                                                                                                              var if6382 = GraceDone;
                                                                                                              setLineNumber(408);    // compilenode identifier
                                                                                                              var opresult6385 = callmethodChecked(var_b__39__, ">", [1], new GraceNum(255));
                                                                                                              var opresult6389 = callmethodChecked(var_b__39__, "<", [1], new GraceNum(0));
                                                                                                              var opresult6391 = callmethodChecked(opresult6389, "||", [1], opresult6385);
                                                                                                              if (Grace_isTrue(opresult6391)) {
                                                                                                                setLineNumber(409);    // compilenode string
                                                                                                                var string6392 = new GraceString(" out of bounds 0..255");
                                                                                                                var string6395 = new GraceString("blue index ");
                                                                                                                var opresult6397 = callmethodChecked(string6395, "++", [1], var_b__39__);
                                                                                                                var opresult6399 = callmethodChecked(opresult6397, "++", [1], string6392);
                                                                                                                var call6400 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6399);
                                                                                                                if6382 = call6400;
                                                                                                              }
                                                                                                              setLineNumber(412);    // compilenode identifier
                                                                                                              var call6401 = callmethodChecked(var_r__39__, "truncated", [0]);
                                                                                                              obj6294.data["red"] = call6401;
                                                                                                              var reader_objectdraw_red6402 = function() {
                                                                                                                return this.data["red"];
                                                                                                              };
                                                                                                              reader_objectdraw_red6402.def = true;
                                                                                                              obj6294.methods["red"] = reader_objectdraw_red6402;
                                                                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6401)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("value of def 'red' is not of type Number"));
                                                                                                              setLineNumber(413);    // compilenode identifier
                                                                                                              var call6403 = callmethodChecked(var_g__39__, "truncated", [0]);
                                                                                                              obj6294.data["green"] = call6403;
                                                                                                              var reader_objectdraw_green6404 = function() {
                                                                                                                return this.data["green"];
                                                                                                              };
                                                                                                              reader_objectdraw_green6404.def = true;
                                                                                                              obj6294.methods["green"] = reader_objectdraw_green6404;
                                                                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6403)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("value of def 'green' is not of type Number"));
                                                                                                              setLineNumber(414);    // compilenode identifier
                                                                                                              var call6405 = callmethodChecked(var_b__39__, "truncated", [0]);
                                                                                                              obj6294.data["blue"] = call6405;
                                                                                                              var reader_objectdraw_blue6406 = function() {
                                                                                                                return this.data["blue"];
                                                                                                              };
                                                                                                              reader_objectdraw_blue6406.def = true;
                                                                                                              obj6294.methods["blue"] = reader_objectdraw_blue6406;
                                                                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6405)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("value of def 'blue' is not of type Number"));
                                                                                                              superDepth = origSuperDepth;
                                                                                                            };
                                                                                                            obj_init_6294.apply(inheritingObject, []);
                                                                                                            return obj6294;
                                                                                                            };
                                                                                                            func6293.paramTypes = [];
                                                                                                            func6293.paramTypes.push([type_Number, "r'"]);
                                                                                                            func6293.paramTypes.push([type_Number, "g'"]);
                                                                                                            func6293.paramTypes.push([type_Number, "b'"]);
                                                                                                            obj6177.methods["r()g()b()object"] = func6293;
                                                                                                          var func6407 = function(argcv) {    // method random
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for random"));
                                                                                                            setModuleName("objectdraw");
                                                                                                            setLineNumber(427);    // compilenode call
                                                                                                            var call6408 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                            onOuter = true;
                                                                                                            onSelf = true;
                                                                                                            var call6409 = callmethodChecked(call6408, "randomIntFrom()to", [1, 1], new GraceNum(0), new GraceNum(255));
                                                                                                            setLineNumber(428);    // compilenode call
                                                                                                            var call6410 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                            onOuter = true;
                                                                                                            onSelf = true;
                                                                                                            var call6411 = callmethodChecked(call6410, "randomIntFrom()to", [1, 1], new GraceNum(0), new GraceNum(255));
                                                                                                            setLineNumber(429);    // compilenode call
                                                                                                            var call6412 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                            onOuter = true;
                                                                                                            onSelf = true;
                                                                                                            var call6413 = callmethodChecked(call6412, "randomIntFrom()to", [1, 1], new GraceNum(0), new GraceNum(255));
                                                                                                            onSelf = true;
                                                                                                            var call6414 = callmethodChecked(this, "r()g()b", [1, 1, 1], call6409, call6411, call6413);
                                                                                                            setLineNumber(427);    // return value
                                                                                                            if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6414)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method random does not have " + 
                                                                                                                        callmethod(var_Color, "asString", [0])._value + "."));
                                                                                                            return call6414;
                                                                                                          };
                                                                                                          func6407.paramCounts = [0];
                                                                                                          obj6177.methods["random"] = func6407;
                                                                                                          func6407.definitionLine = 425;
                                                                                                          func6407.definitionModule = "objectdraw";
                                                                                                          setLineNumber(432);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6415 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(255), new GraceNum(255));
                                                                                                          obj6177.data["white"] = call6415;
                                                                                                          var reader_objectdraw_white6416 = function() {
                                                                                                            return this.data["white"];
                                                                                                          };
                                                                                                          reader_objectdraw_white6416.def = true;
                                                                                                          obj6177.methods["white"] = reader_objectdraw_white6416;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6415)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'white' is not of type Color"));
                                                                                                          setLineNumber(433);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6417 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(0), new GraceNum(0));
                                                                                                          obj6177.data["black"] = call6417;
                                                                                                          var reader_objectdraw_black6418 = function() {
                                                                                                            return this.data["black"];
                                                                                                          };
                                                                                                          reader_objectdraw_black6418.def = true;
                                                                                                          obj6177.methods["black"] = reader_objectdraw_black6418;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6417)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'black' is not of type Color"));
                                                                                                          setLineNumber(434);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6419 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(255), new GraceNum(0));
                                                                                                          obj6177.data["green"] = call6419;
                                                                                                          var reader_objectdraw_green6420 = function() {
                                                                                                            return this.data["green"];
                                                                                                          };
                                                                                                          reader_objectdraw_green6420.def = true;
                                                                                                          obj6177.methods["green"] = reader_objectdraw_green6420;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6419)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'green' is not of type Color"));
                                                                                                          setLineNumber(435);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6421 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(0), new GraceNum(0));
                                                                                                          obj6177.data["red"] = call6421;
                                                                                                          var reader_objectdraw_red6422 = function() {
                                                                                                            return this.data["red"];
                                                                                                          };
                                                                                                          reader_objectdraw_red6422.def = true;
                                                                                                          obj6177.methods["red"] = reader_objectdraw_red6422;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6421)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'red' is not of type Color"));
                                                                                                          setLineNumber(436);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6423 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(60), new GraceNum(60), new GraceNum(60));
                                                                                                          obj6177.data["gray"] = call6423;
                                                                                                          var reader_objectdraw_gray6424 = function() {
                                                                                                            return this.data["gray"];
                                                                                                          };
                                                                                                          reader_objectdraw_gray6424.def = true;
                                                                                                          obj6177.methods["gray"] = reader_objectdraw_gray6424;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6423)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'gray' is not of type Color"));
                                                                                                          setLineNumber(437);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6425 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(0), new GraceNum(255));
                                                                                                          obj6177.data["blue"] = call6425;
                                                                                                          var reader_objectdraw_blue6426 = function() {
                                                                                                            return this.data["blue"];
                                                                                                          };
                                                                                                          reader_objectdraw_blue6426.def = true;
                                                                                                          obj6177.methods["blue"] = reader_objectdraw_blue6426;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6425)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'blue' is not of type Color"));
                                                                                                          setLineNumber(438);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6427 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(255), new GraceNum(255));
                                                                                                          obj6177.data["cyan"] = call6427;
                                                                                                          var reader_objectdraw_cyan6428 = function() {
                                                                                                            return this.data["cyan"];
                                                                                                          };
                                                                                                          reader_objectdraw_cyan6428.def = true;
                                                                                                          obj6177.methods["cyan"] = reader_objectdraw_cyan6428;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6427)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'cyan' is not of type Color"));
                                                                                                          setLineNumber(439);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6429 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(0), new GraceNum(255));
                                                                                                          obj6177.data["magenta"] = call6429;
                                                                                                          var reader_objectdraw_magenta6430 = function() {
                                                                                                            return this.data["magenta"];
                                                                                                          };
                                                                                                          reader_objectdraw_magenta6430.def = true;
                                                                                                          obj6177.methods["magenta"] = reader_objectdraw_magenta6430;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6429)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'magenta' is not of type Color"));
                                                                                                          setLineNumber(440);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6431 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(255), new GraceNum(0));
                                                                                                          obj6177.data["yellow"] = call6431;
                                                                                                          var reader_objectdraw_yellow6432 = function() {
                                                                                                            return this.data["yellow"];
                                                                                                          };
                                                                                                          reader_objectdraw_yellow6432.def = true;
                                                                                                          obj6177.methods["yellow"] = reader_objectdraw_yellow6432;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6431)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'yellow' is not of type Color"));
                                                                                                          setLineNumber(441);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6433 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(220), new GraceNum(220), new GraceNum(220));
                                                                                                          obj6177.data["neutral"] = call6433;
                                                                                                          var reader_objectdraw_neutral6434 = function() {
                                                                                                            return this.data["neutral"];
                                                                                                          };
                                                                                                          reader_objectdraw_neutral6434.def = true;
                                                                                                          obj6177.methods["neutral"] = reader_objectdraw_neutral6434;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6433)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'neutral' is not of type Color"));
                                                                                                          superDepth = origSuperDepth;
                                                                                                        };
                                                                                                        obj_init_6177.apply(obj6177, []);
                                                                                                        var var_color = obj6177;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6435 = function(argcv) {    // method color
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for color"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // color is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(397);    // compilenode identifier
                                                                                                          return var_color;
                                                                                                        };
                                                                                                        func6435.paramCounts = [0];
                                                                                                        this.methods["color"] = func6435;
                                                                                                        func6435.definitionLine = 429;
                                                                                                        func6435.definitionModule = "objectdraw";
                                                                                                        this.methods["color"].debug = "def";
                                                                                                        setLineNumber(445);    // compilenode identifier
                                                                                                        var call6436 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(255), new GraceNum(255));
                                                                                                        var var_white = call6436;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6437 = function(argcv) {    // method white
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for white"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // white is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(445);    // compilenode identifier
                                                                                                          return var_white;
                                                                                                        };
                                                                                                        func6437.paramCounts = [0];
                                                                                                        this.methods["white"] = func6437;
                                                                                                        func6437.definitionLine = 429;
                                                                                                        func6437.definitionModule = "objectdraw";
                                                                                                        this.methods["white"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_white)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'white' is not of type Color"));
                                                                                                        setLineNumber(446);    // compilenode identifier
                                                                                                        var call6438 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(0), new GraceNum(0));
                                                                                                        var var_black = call6438;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6439 = function(argcv) {    // method black
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for black"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // black is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(446);    // compilenode identifier
                                                                                                          return var_black;
                                                                                                        };
                                                                                                        func6439.paramCounts = [0];
                                                                                                        this.methods["black"] = func6439;
                                                                                                        func6439.definitionLine = 429;
                                                                                                        func6439.definitionModule = "objectdraw";
                                                                                                        this.methods["black"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_black)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'black' is not of type Color"));
                                                                                                        setLineNumber(447);    // compilenode identifier
                                                                                                        var call6440 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(255), new GraceNum(0));
                                                                                                        var var_green = call6440;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6441 = function(argcv) {    // method green
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for green"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // green is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(447);    // compilenode identifier
                                                                                                          return var_green;
                                                                                                        };
                                                                                                        func6441.paramCounts = [0];
                                                                                                        this.methods["green"] = func6441;
                                                                                                        func6441.definitionLine = 429;
                                                                                                        func6441.definitionModule = "objectdraw";
                                                                                                        this.methods["green"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_green)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'green' is not of type Color"));
                                                                                                        setLineNumber(448);    // compilenode identifier
                                                                                                        var call6442 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(0), new GraceNum(0));
                                                                                                        var var_red = call6442;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6443 = function(argcv) {    // method red
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for red"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // red is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(448);    // compilenode identifier
                                                                                                          return var_red;
                                                                                                        };
                                                                                                        func6443.paramCounts = [0];
                                                                                                        this.methods["red"] = func6443;
                                                                                                        func6443.definitionLine = 429;
                                                                                                        func6443.definitionModule = "objectdraw";
                                                                                                        this.methods["red"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_red)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'red' is not of type Color"));
                                                                                                        setLineNumber(449);    // compilenode identifier
                                                                                                        var call6444 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(60), new GraceNum(60), new GraceNum(60));
                                                                                                        var var_gray = call6444;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6445 = function(argcv) {    // method gray
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for gray"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // gray is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(449);    // compilenode identifier
                                                                                                          return var_gray;
                                                                                                        };
                                                                                                        func6445.paramCounts = [0];
                                                                                                        this.methods["gray"] = func6445;
                                                                                                        func6445.definitionLine = 429;
                                                                                                        func6445.definitionModule = "objectdraw";
                                                                                                        this.methods["gray"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_gray)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'gray' is not of type Color"));
                                                                                                        setLineNumber(450);    // compilenode identifier
                                                                                                        var call6446 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(0), new GraceNum(255));
                                                                                                        var var_blue = call6446;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6447 = function(argcv) {    // method blue
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for blue"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // blue is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(450);    // compilenode identifier
                                                                                                          return var_blue;
                                                                                                        };
                                                                                                        func6447.paramCounts = [0];
                                                                                                        this.methods["blue"] = func6447;
                                                                                                        func6447.definitionLine = 429;
                                                                                                        func6447.definitionModule = "objectdraw";
                                                                                                        this.methods["blue"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_blue)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'blue' is not of type Color"));
                                                                                                        setLineNumber(451);    // compilenode identifier
                                                                                                        var call6448 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(255), new GraceNum(255));
                                                                                                        var var_cyan = call6448;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6449 = function(argcv) {    // method cyan
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for cyan"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // cyan is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(451);    // compilenode identifier
                                                                                                          return var_cyan;
                                                                                                        };
                                                                                                        func6449.paramCounts = [0];
                                                                                                        this.methods["cyan"] = func6449;
                                                                                                        func6449.definitionLine = 429;
                                                                                                        func6449.definitionModule = "objectdraw";
                                                                                                        this.methods["cyan"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_cyan)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'cyan' is not of type Color"));
                                                                                                        setLineNumber(452);    // compilenode identifier
                                                                                                        var call6450 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(0), new GraceNum(255));
                                                                                                        var var_magenta = call6450;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6451 = function(argcv) {    // method magenta
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for magenta"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // magenta is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(452);    // compilenode identifier
                                                                                                          return var_magenta;
                                                                                                        };
                                                                                                        func6451.paramCounts = [0];
                                                                                                        this.methods["magenta"] = func6451;
                                                                                                        func6451.definitionLine = 429;
                                                                                                        func6451.definitionModule = "objectdraw";
                                                                                                        this.methods["magenta"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_magenta)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'magenta' is not of type Color"));
                                                                                                        setLineNumber(453);    // compilenode identifier
                                                                                                        var call6452 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(255), new GraceNum(0));
                                                                                                        var var_yellow = call6452;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6453 = function(argcv) {    // method yellow
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for yellow"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // yellow is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(453);    // compilenode identifier
                                                                                                          return var_yellow;
                                                                                                        };
                                                                                                        func6453.paramCounts = [0];
                                                                                                        this.methods["yellow"] = func6453;
                                                                                                        func6453.definitionLine = 429;
                                                                                                        func6453.definitionModule = "objectdraw";
                                                                                                        this.methods["yellow"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_yellow)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'yellow' is not of type Color"));
                                                                                                        setLineNumber(454);    // compilenode identifier
                                                                                                        var call6454 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(220), new GraceNum(220), new GraceNum(220));
                                                                                                        var var_neutral = call6454;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6455 = function(argcv) {    // method neutral
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for neutral"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // neutral is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(454);    // compilenode identifier
                                                                                                          return var_neutral;
                                                                                                        };
                                                                                                        func6455.paramCounts = [0];
                                                                                                        this.methods["neutral"] = func6455;
                                                                                                        func6455.definitionLine = 429;
                                                                                                        func6455.definitionModule = "objectdraw";
                                                                                                        this.methods["neutral"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_neutral)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'neutral' is not of type Color"));
                                                                                                        setLineNumber(462);    // compilenode typedec
                                                                                                        // Type decl Event
                                                                                                        //   Type literal 
                                                                                                        var type6457 = new GraceType("Event");
                                                                                                        type6457.typeMethods.push("source");
                                                                                                        var var_Event = type6457;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6458 = function(argcv) {    // method Event
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Event"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // Event is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(462);    // compilenode identifier
                                                                                                          return var_Event;
                                                                                                        };
                                                                                                        func6458.paramCounts = [0];
                                                                                                        this.methods["Event"] = func6458;
                                                                                                        func6458.definitionLine = 429;
                                                                                                        func6458.definitionModule = "objectdraw";
                                                                                                        setLineNumber(467);    // compilenode typedec
                                                                                                        // Type decl MouseEvent
                                                                                                        //   Type literal 
                                                                                                        var type6460 = new GraceType("\u2039anon\u203a");
                                                                                                        type6460.typeMethods.push("at");
                                                                                                        var opresult6463 = callmethodChecked(var_Event, "&", [1], type6460);
                                                                                                        var var_MouseEvent = opresult6463;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6464 = function(argcv) {    // method MouseEvent
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for MouseEvent"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // MouseEvent is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(467);    // compilenode identifier
                                                                                                          return var_MouseEvent;
                                                                                                        };
                                                                                                        func6464.paramCounts = [0];
                                                                                                        this.methods["MouseEvent"] = func6464;
                                                                                                        func6464.definitionLine = 429;
                                                                                                        func6464.definitionModule = "objectdraw";
                                                                                                        setLineNumber(472);    // compilenode typedec
                                                                                                        // Type decl KeyEvent
                                                                                                        //   Type literal 
                                                                                                        var type6466 = new GraceType("\u2039anon\u203a");
                                                                                                        type6466.typeMethods.push("code");
                                                                                                        var opresult6469 = callmethodChecked(var_Event, "&", [1], type6466);
                                                                                                        var var_KeyEvent = opresult6469;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6470 = function(argcv) {    // method KeyEvent
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for KeyEvent"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // KeyEvent is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(472);    // compilenode identifier
                                                                                                          return var_KeyEvent;
                                                                                                        };
                                                                                                        func6470.paramCounts = [0];
                                                                                                        this.methods["KeyEvent"] = func6470;
                                                                                                        func6470.definitionLine = 429;
                                                                                                        func6470.definitionModule = "objectdraw";
                                                                                                        setLineNumber(479);    // compilenode typedec
                                                                                                        // Type decl Response
                                                                                                        var var_Response = var_Procedure;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6472 = function(argcv) {    // method Response
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Response"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // Response is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(479);    // compilenode identifier
                                                                                                          return var_Response;
                                                                                                        };
                                                                                                        func6472.paramCounts = [0];
                                                                                                        this.methods["Response"] = func6472;
                                                                                                        func6472.definitionLine = 429;
                                                                                                        func6472.definitionModule = "objectdraw";
                                                                                                        setLineNumber(482);    // compilenode typedec
                                                                                                        // Type decl MouseResponse
                                                                                                        var var_MouseResponse = var_Procedure;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6474 = function(argcv) {    // method MouseResponse
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for MouseResponse"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // MouseResponse is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(482);    // compilenode identifier
                                                                                                          return var_MouseResponse;
                                                                                                        };
                                                                                                        func6474.paramCounts = [0];
                                                                                                        this.methods["MouseResponse"] = func6474;
                                                                                                        func6474.definitionLine = 429;
                                                                                                        func6474.definitionModule = "objectdraw";
                                                                                                        setLineNumber(485);    // compilenode typedec
                                                                                                        // Type decl KeyResponse
                                                                                                        var var_KeyResponse = var_Procedure;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6476 = function(argcv) {    // method KeyResponse
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for KeyResponse"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // KeyResponse is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(485);    // compilenode identifier
                                                                                                          return var_KeyResponse;
                                                                                                        };
                                                                                                        func6476.paramCounts = [0];
                                                                                                        this.methods["KeyResponse"] = func6476;
                                                                                                        func6476.definitionLine = 429;
                                                                                                        func6476.definitionModule = "objectdraw";
                                                                                                        setLineNumber(527);    // compilenode typedec
                                                                                                        // Type decl ComponentFactory
                                                                                                        //   Type literal 
                                                                                                        var type6478 = new GraceType("ComponentFactory");
                                                                                                        type6478.typeMethods.push("fromElement");
                                                                                                        type6478.typeMethods.push("ofElementType");
                                                                                                        var var_ComponentFactory = type6478;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6479 = function(argcv) {    // method ComponentFactory
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ComponentFactory"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // ComponentFactory is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(527);    // compilenode identifier
                                                                                                          return var_ComponentFactory;
                                                                                                        };
                                                                                                        func6479.paramCounts = [0];
                                                                                                        this.methods["ComponentFactory"] = func6479;
                                                                                                        func6479.definitionLine = 429;
                                                                                                        func6479.definitionModule = "objectdraw";
                                                                                                        setLineNumber(537);    // compilenode num
                                                                                                        var var_maxClickTime = new GraceNum(200);
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6480 = function(argcv) {    // method maxClickTime
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for maxClickTime"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // maxClickTime is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(537);    // compilenode identifier
                                                                                                          return var_maxClickTime;
                                                                                                        };
                                                                                                        func6480.paramCounts = [0];
                                                                                                        this.methods["maxClickTime"] = func6480;
                                                                                                        func6480.definitionLine = 429;
                                                                                                        func6480.definitionModule = "objectdraw";
                                                                                                        this.methods["maxClickTime"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_maxClickTime)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'maxClickTime' is not of type Number"));
                                                                                                        setLineNumber(2211);    // compilenode typedec
                                                                                                        // Type decl Audio
                                                                                                        //   Type literal 
                                                                                                        var type6482 = new GraceType("Audio");
                                                                                                        type6482.typeMethods.push("source");
                                                                                                        type6482.typeMethods.push("source:=");
                                                                                                        type6482.typeMethods.push("play");
                                                                                                        type6482.typeMethods.push("pause");
                                                                                                        type6482.typeMethods.push("isLooping");
                                                                                                        type6482.typeMethods.push("looping:=");
                                                                                                        type6482.typeMethods.push("isEnded");
                                                                                                        var var_Audio = type6482;
                                                                                                        setLineNumber(429);    // compilenode method
                                                                                                        var func6483 = function(argcv) {    // method Audio
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Audio"));
                                                                                                          setModuleName("objectdraw");
                                                                                                          // Audio is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(2211);    // compilenode identifier
                                                                                                          return var_Audio;
                                                                                                        };
                                                                                                        func6483.paramCounts = [0];
                                                                                                        this.methods["Audio"] = func6483;
                                                                                                        func6483.definitionLine = 429;
                                                                                                        func6483.definitionModule = "objectdraw";
                                                                                                        return this;
                                                                                                      }
                                                                                                      gracecode_objectdraw.imports = ['dom', 'math'];
                                                                                                      if (typeof gctCache !== "undefined")
                                                                                                        gctCache['objectdraw'] = "classes:\n color\nconfidential:\n eventLogKind()response\n selectBoxOptionsFrom()labeled\nconstructors-of:color:\n r()g()b\nfresh-methods:\n applicationTitle()size\n audioUrl\n buttonLabeled\n componentFromElement\n componentOfElementType\n containerEmpty\n containerFromElement\n containerOfElementType\n containerSize\n drawable2DAt()size()on\n drawableAt()on\n drawableImageAt()size()url()on\n drawingCanvasSize\n eventLogKind()response\n eventSource\n fieldOfType()labeled\n filledArcAt()size()from()to()on\n filledOvalAt()size()on\n filledRectAt()size()on\n framedArcAt()size()from()to()on\n framedOvalAt()size()on\n framedRectAt()size()on\n graphicApplicationSize\n inputFromElement\n inputOfElementType\n inputOfType\n keyEventSource()event\n labeledWidgetFromElement\n labeledWidgetOfElementType\n labeledWidgetOfElementType()labeled\n lineFrom()length()direction()on\n lineFrom()to()on\n mouseEventSource()event\n numberFieldLabeled\n numberFieldUnlabeled\n passwordFieldLabeled\n passwordFieldUnlabeled\n resizable2DAt()size()on\n selectBoxOptionsFrom\n selectBoxOptionsFrom()labeled\n textAt()with()on\n textBoxWith\n textFieldLabeled\n textFieldUnlabeled\nfresh:applicationTitle()size:\n !=\n ::\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n children\n do\n element\n eventSource\n events\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isHorizontal\n isMe\n isOpened\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouse()do\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n prepend\n size\n startApplication\n stopApplication\n theHeight\n theTitle\n theWidth\n theWindow\n width\n windowTitle\n windowTitle:=\n \u2260\nfresh:audioUrl:\n asString\n element\n isEnded\n isLooping\n looping:=\n pause\n play\n source\n source:=\nfresh:buttonLabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:componentFromElement:\n asString\n element\n eventSource\n flexible:=\n height\n isFlexible\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\nfresh:componentOfElementType:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:containerEmpty:\n !=\n ::\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n children\n do\n element\n eventSource\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n prepend\n size\n width\n \u2260\nfresh:containerFromElement:\n !=\n ::\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n children\n do\n element\n eventSource\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n prepend\n size\n width\n \u2260\nfresh:containerOfElementType:\n !=\n ::\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n children\n do\n element\n eventSource\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n prepend\n size\n width\n \u2260\nfresh:containerSize:\n !=\n ::\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n children\n do\n element\n eventSource\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n prepend\n size\n width\n \u2260\nfresh:drawable2DAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n x\n y\n \u2260\nfresh:drawableAt()on:\n ==\n addToCanvas\n asString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n theColor\n theFrameColor\n visible:=\n x\n y\nfresh:drawableImageAt()size()url()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theImage\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:drawingCanvasSize:\n !=\n ::\n add\n asDebugString\n asString\n basicAsString\n clear\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n notifyRedraw\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n printObjects\n redraw\n remove\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n startDrawing\n theContext\n theGraphics\n width\n \u2260\nfresh:eventLogKind()response:\n kind\n response\nfresh:eventSource:\n asString\n source\nfresh:fieldOfType()labeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:filledArcAt()size()from()to()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:filledOvalAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:filledRectAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:framedArcAt()size()from()to()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:framedOvalAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:framedRectAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:graphicApplicationSize:\n !=\n ::\n after\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n before\n canvas\n children\n do\n element\n eventSource\n events\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isHorizontal\n isMe\n isOpened\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouse()do\n onMouseClick\n onMouseClickDo\n onMouseDrag\n onMouseDragDo\n onMouseEnter\n onMouseEnterDo\n onMouseExit\n onMouseExitDo\n onMouseMove\n onMouseMoveDo\n onMousePress\n onMousePressDo\n onMouseRelease\n onMouseReleaseDo\n prepend\n size\n startApplication\n startGraphics\n stopApplication\n theHeight\n theTitle\n theWidth\n theWindow\n width\n windowTitle\n windowTitle:=\n \u2260\nfresh:inputFromElement:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:inputOfElementType:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:inputOfType:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:keyEventSource()event:\n !=\n ::\n asDebugString\n asString\n basicAsString\n code\n isMe\n source\n \u2260\nfresh:labeledWidgetFromElement:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:labeledWidgetOfElementType:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:labeledWidgetOfElementType()labeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:lineFrom()length()direction()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n dist2\n distToSegment\n distToSegmentSquared\n draw\n end\n end:=\n frameColor\n frameColor:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n setEndPoints\n start\n start:=\n theColor\n theEnd\n theFrameColor\n visible:=\n x\n y\n \u2260\nfresh:lineFrom()to()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n dist2\n distToSegment\n distToSegmentSquared\n draw\n end\n end:=\n frameColor\n frameColor:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n setEndPoints\n start\n start:=\n theColor\n theEnd\n theFrameColor\n visible:=\n x\n y\n \u2260\nfresh:mouseEventSource()event:\n !=\n ::\n asDebugString\n asString\n at\n basicAsString\n isMe\n source\n \u2260\nfresh:numberFieldLabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n number\n number:=\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:numberFieldUnlabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n number\n number:=\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:passwordFieldLabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n text\n text:=\n width\n \u2260\nfresh:passwordFieldUnlabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n text\n text:=\n width\n \u2260\nfresh:resizable2DAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:selectBoxOptionsFrom:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n labeler\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n selected\n selected:=\n size\n width\n \u2260\nfresh:selectBoxOptionsFrom()labeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n labeler\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n selected\n selected:=\n size\n width\n \u2260\nfresh:textAt()with()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n contents\n contents:=\n draw\n fontSize\n fontSize:=\n frameColor\n frameColor:=\n fsize\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n theColor\n theContents\n theFrameColor\n visible:=\n wid\n width\n x\n y\n \u2260\nfresh:textBoxWith:\n !=\n ::\n asDebugString\n asString\n basicAsString\n contents\n contents:=\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:textFieldLabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n text\n text:=\n width\n \u2260\nfresh:textFieldUnlabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n text\n text:=\n width\n \u2260\nmethods-of:color.r()g()b:\n ==\n asString\n blue\n green\n red\nmethodtypes-of:Application:\n & 3\n & Container\n 3 startApplication -> Done\n 3 stopApplication -> Done\n 3 windowTitle -> String\n 3 windowTitle:=(value : String) -> Done\nmethodtypes-of:Audio:\n 16 isEnded -> Boolean\n 16 isLooping -> Boolean\n 16 looping:=(value : Boolean) -> Done\n 16 pause -> Done\n 16 play -> Done\n 16 source -> String\n 16 source:=(value : String) -> Done\nmethodtypes-of:Button:\nmethodtypes-of:Choice:\n & 14\n & Input\n 14 selected -> String\n 14 selected:=(value : String) -> Done\nmethodtypes-of:Color:\n 14 blue -> Number\n 14 green -> Number\n 14 red -> Number\nmethodtypes-of:Component:\n 1 element -> Done\n 1 flexible:=(value : Boolean) -> Done\n 1 height -> Number\n 1 isFlexible -> Boolean\n 1 onKeyPressDo(f : KeyResponse) -> Done\n 1 onKeyReleaseDo(f : KeyResponse) -> Done\n 1 onKeyTypeDo(f : KeyResponse) -> Done\n 1 onMouseClickDo(f : MouseResponse) -> Done\n 1 onMouseDragDo(f : MouseResponse) -> Done\n 1 onMouseEnterDo(f : MouseResponse) -> Done\n 1 onMouseExitDo(f : MouseResponse) -> Done\n 1 onMouseMoveDo(f : MouseResponse) -> Done\n 1 onMousePressDo(f : MouseResponse) -> Done\n 1 onMouseReleaseDo(f : MouseResponse) -> Done\n 1 size -> self.Point\n 1 width -> Number\nmethodtypes-of:ComponentFactory<T>:\n 16 fromElement(element : Unknown) -> T\n 16 ofElementType(tagName : String) -> T\nmethodtypes-of:Container:\n & 2\n & Component\n 2 append(component : Component) -> Done\n 2 arrangeHorizontal -> Done\n 2 arrangeVertical -> Done\n 2 at(index : Number) -> Component\n 2 at(index : Number)put(component : Component) -> Done\n 2 do(f : Procedure<Component>) -> Done\n 2 prepend(component : Component) -> Done\n 2 size -> Number\nmethodtypes-of:DrawingCanvas:\n & 4\n & Component\n 4 add(d : Graphic) -> Done\n 4 clear -> Done\n 4 height -> Number\n 4 notifyRedraw -> Done\n 4 remove(d : Graphic) -> Done\n 4 sendBackward(d : Graphic) -> Done\n 4 sendForward(d : Graphic) -> Done\n 4 sendToBack(d : Graphic) -> Done\n 4 sendToFront(d : Graphic) -> Done\n 4 startDrawing -> Done\n 4 width -> Number\nmethodtypes-of:Event:\n 14 source -> Component\nmethodtypes-of:Foreign:\nmethodtypes-of:Function2<T, U, R>:\nmethodtypes-of:Function<T, R>:\nmethodtypes-of:Graphic:\n 3 addToCanvas(canvas : DrawingCanvas) -> Done\n 3 color -> Color\n 3 color:=(c : Color) -> Done\n 3 contains(location : self.Point) -> Boolean\n 3 isVisible -> Boolean\n 3 location -> self.Point\n 3 moveBy(dx : Number, dy : Number) -> Done\n 3 moveTo(location : self.Point) -> Done\n 3 overlaps(graphic : Graphic2D) -> Boolean\n 3 removeFromCanvas -> Done\n 3 sendBackward -> Done\n 3 sendForward -> Done\n 3 sendToBack -> Done\n 3 sendToFront -> Done\n 3 visible:=(value : Boolean) -> Done\n 3 x -> Number\n 3 y -> Number\nmethodtypes-of:Graphic2D:\n & 6\n & Graphic\n 6 height -> Number\n 6 height:=(height : Number) -> Done\n 6 size -> self.Point\n 6 size:=(dimensions : self.Point) -> Done\n 6 width -> Number\n 6 width:=(width : Number) -> Done\nmethodtypes-of:GraphicApplication:\n & 5\n & Application\n 5 canvas -> DrawingCanvas\n 5 onMouseClick(mouse : self.Point) -> Done\n 5 onMouseDrag(mouse : self.Point) -> Done\n 5 onMouseEnter(mouse : self.Point) -> Done\n 5 onMouseExit(mouse : self.Point) -> Done\n 5 onMouseMove(mouse : self.Point) -> Done\n 5 onMousePress(mouse : self.Point) -> Done\n 5 onMouseRelease(mouse : self.Point) -> Done\n 5 startGraphics -> Done\nmethodtypes-of:Input:\n & 11\n & Labeled\n 11 onBlurDo(f : Response) -> Done\n 11 onChangeDo(f : Response) -> Done\n 11 onFocusDo(f : Response) -> Done\nmethodtypes-of:KeyEvent:\n & 16\n & Event\n 16 code -> Number\nmethodtypes-of:KeyResponse:\nmethodtypes-of:Labeled:\n & 10\n & Component\n 10 label -> String\n 10 label:=(value : String) -> Done\nmethodtypes-of:Line:\n & 7\n & Graphic\n 7 end -> self.Point\n 7 end:=(end' : self.Point) -> Done\n 7 setEndPoints(start' : self.Point, end' : self.Point) -> Done\n 7 start -> self.Point\n 7 start:=(start' : self.Point) -> Done\nmethodtypes-of:MouseEvent:\n & 15\n & Event\n 15 at -> self.Point\nmethodtypes-of:MouseResponse:\nmethodtypes-of:NumberField:\n & 13\n & Input\n 13 number -> Number\n 13 number:=(value : Number) -> Done\nmethodtypes-of:Procedure<T>:\nmethodtypes-of:Response:\nmethodtypes-of:Text:\n & 8\n & Graphic\n 8 contents -> String\n 8 contents:=(s : String) -> Done\n 8 fontSize -> Number\n 8 fontSize:=(size : Number) -> Done\n 8 width -> Number\nmethodtypes-of:TextBox:\n & 9\n & Component\n 9 contents -> String\n 9 contents:=(value : String) -> Done\nmethodtypes-of:TextField:\n & 12\n & Input\n 12 text -> String\n 12 text:=(value : String) -> Done\nmodules:\n dom\n math\npath:\n objectdraw\npublic:\n AndPattern\n Application\n Audio\n BaseType\n BasicPattern\n Binding\n BindingPattern\n Block0\n Block1\n Block2\n Block3\n BoundsError\n Button\n Choice\n Cmd\n Collection\n Color\n ColorOutOfRange\n Component\n ComponentFactory\n ConcurrentModification\n Container\n Dictionary\n DrawingCanvas\n Enumerable\n Event\n ExceptionKind\n Expandable\n Extractable\n FailedMatch\n Foreign\n Fun\n Fun2\n Fun3\n Function\n Function2\n Graphic\n Graphic2D\n GraphicApplication\n Input\n Iterable\n Iterator\n IteratorExhausted\n KeyEvent\n KeyResponse\n Labeled\n Line\n List\n MatchAndDestructuringPattern\n MatchResult\n MouseEvent\n MouseResponse\n NoSuchObject\n NumberField\n OrPattern\n Pattern\n Point\n Proc\n Proc2\n Proc3\n Procedure\n RequestError\n Response\n Sequence\n Set\n Singleton\n SubobjectResponsibility\n SuccessfulMatch\n Text\n TextBox\n TextField\n TypeIntersection\n TypeSubtraction\n TypeUnion\n TypeVariant\n UninitializedVariable\n VariablePattern\n WildcardPattern\n abstract\n alwaysEqual\n applicationTitle()size\n audioUrl\n binding\n black\n blue\n buttonLabeled\n collection\n collections\n color\n componentFromElement\n componentOfElementType\n containerEmpty\n containerFromElement\n containerOfElementType\n containerSize\n cyan\n dictionary\n do()while\n drawable2DAt()size()on\n drawableAt()on\n drawableImageAt()size()url()on\n drawingCanvasSize\n emptyDictionary\n emptyList\n emptySequence\n emptySet\n enumerable\n eventSource\n fieldOfType()labeled\n filledArcAt()size()from()to()on\n filledOvalAt()size()on\n filledRectAt()size()on\n for()and()do\n framedArcAt()size()from()to()on\n framedOvalAt()size()on\n framedRectAt()size()on\n graphicApplicationSize\n gray\n green\n indexable\n inputFromElement\n inputOfElementType\n inputOfType\n keyEventSource()event\n labeledWidgetFromElement\n labeledWidgetOfElementType\n labeledWidgetOfElementType()labeled\n lineFrom()length()direction()on\n lineFrom()to()on\n list\n magenta\n max\n methods\n min\n mouseEventSource()event\n neutral\n numberFieldLabeled\n numberFieldUnlabeled\n passwordFieldLabeled\n passwordFieldUnlabeled\n pi\n point2Dx()y\n randomColor\n randomIntFrom()to\n randomNumberFrom()to\n range\n red\n repeat()times\n required\n resizable2DAt()size()on\n selectBoxOptionsFrom\n sequence\n set\n textAt()with()on\n textBoxWith\n textFieldLabeled\n textFieldUnlabeled\n valueOf\n white\n yellow\ntypes:\n Application\n Audio\n Button\n Choice\n Color\n Component\n ComponentFactory\n Container\n DrawingCanvas\n Event\n Foreign\n Function\n Function2\n Graphic\n Graphic2D\n GraphicApplication\n Input\n KeyEvent\n KeyResponse\n Labeled\n Line\n MouseEvent\n MouseResponse\n NumberField\n Procedure\n Response\n Text\n TextBox\n TextField\n";
                                                                                                      if (typeof originalSourceLines !== "undefined") {
                                                                                                        originalSourceLines["objectdraw"] = [
                                                                                                          "#pragma ExtendedLineups",
                                                                                                          "inherit _prelude.methods",
                                                                                                          "",
                                                                                                          "import \"dom\" as dom",
                                                                                                          "import \"math\" as math",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "// ** Helpers ***************************************************",
                                                                                                          "",
                                                                                                          "// The frame rate of the drawing.",
                                                                                                          "def frameRate: Number = 30",
                                                                                                          "",
                                                                                                          "// A random number from m to n, inclusive.",
                                                                                                          "method randomNumberFrom (m: Number) to (n: Number) -> Number {",
                                                                                                          "    ((n - m) * math.random) + m",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// A random integer from m to n, inclusive.",
                                                                                                          "method randomIntFrom (m: Number) to (n: Number) -> Number {",
                                                                                                          "    (((n - m + 1) * math.random).truncated % (n - m + 1)) + m",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// A rough approximation of the value of pi.",
                                                                                                          "def pi: Number is public = π",
                                                                                                          "",
                                                                                                          "type Foreign = Unknown",
                                                                                                          "",
                                                                                                          "def document: Foreign = dom.document",
                                                                                                          "",
                                                                                                          "// Types of blocks representing functions taking an argument of type T",
                                                                                                          "// and returning a value of type R",
                                                                                                          "type Function<T, R> = prelude.Block1<T,R>",
                                                                                                          "",
                                                                                                          "// Types of blocks representing functions taking two arguments of type T and U",
                                                                                                          "// and returning a value of type R",
                                                                                                          "type Function2<T, U, R> = prelude.Block2<T, U, R>",
                                                                                                          "",
                                                                                                          "// Type of block taking argument of type T and returning Done",
                                                                                                          "type Procedure<T> = prelude.Block1<T,Done>",
                                                                                                          "",
                                                                                                          "// ** Types ********************************************************************",
                                                                                                          "",
                                                                                                          "// The super-type of all components in a GUI.",
                                                                                                          "type Component = {",
                                                                                                          "",
                                                                                                          "    // The underlying DOM element of the component.",
                                                                                                          "    element",
                                                                                                          "",
                                                                                                          "    // The width of this component.",
                                                                                                          "    width -> Number",
                                                                                                          "",
                                                                                                          "    // The height of this component.",
                                                                                                          "    height -> Number",
                                                                                                          "    ",
                                                                                                          "    // The size (width, height) of this component",
                                                                                                          "    size -> Point",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse click (press and release) in this component with the",
                                                                                                          "    // given event.",
                                                                                                          "    onMouseClickDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse press in this component with the response f.",
                                                                                                          "    onMousePressDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse release in this component with the response f.",
                                                                                                          "    onMouseReleaseDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse move in this component with the response f.",
                                                                                                          "    onMouseMoveDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse drag (move during press) in this component with the",
                                                                                                          "    // response f.",
                                                                                                          "    onMouseDragDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse entering this component with the response f.",
                                                                                                          "    onMouseEnterDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse exiting this component with the response f.",
                                                                                                          "    onMouseExitDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a key type (press and release) in this component with the response f.",
                                                                                                          "    onKeyTypeDo (f: KeyResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a key press in this component with the response f.",
                                                                                                          "    onKeyPressDo (f: KeyResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a key release in this component with the response f.",
                                                                                                          "    onKeyReleaseDo (f: KeyResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Whether this component will dynamically fill up any empty space in the",
                                                                                                          "    // direction of its parent container.",
                                                                                                          "    isFlexible -> Boolean",
                                                                                                          "",
                                                                                                          "    // Set whether this component will dynamically fill up any empty space in the",
                                                                                                          "    // direction of its parent container.",
                                                                                                          "    flexible := (value: Boolean) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// The type of components that contain other components.",
                                                                                                          "type Container = Component & type {",
                                                                                                          "",
                                                                                                          "    // The number of components inside this container.",
                                                                                                          "    size -> Number",
                                                                                                          "",
                                                                                                          "    // Retrieve the component at the given index.",
                                                                                                          "    at (index: Number) -> Component",
                                                                                                          "",
                                                                                                          "    // Put the given component at the given index.",
                                                                                                          "    at (index: Number) put(component: Component) -> Done",
                                                                                                          "",
                                                                                                          "    // Add a component to the end of the container.",
                                                                                                          "    append (component: Component) -> Done",
                                                                                                          "",
                                                                                                          "    // Add a component to the start of the container.",
                                                                                                          "    prepend (component: Component) -> Done",
                                                                                                          "",
                                                                                                          "    // Perform an action for every component inside this container.",
                                                                                                          "    do (f: Procedure<Component>) -> Done",
                                                                                                          "",
                                                                                                          "    // Arrange the contents of this container along the horizontal axis.",
                                                                                                          "    // Components which exceed the width of the container will wrap around.",
                                                                                                          "    arrangeHorizontal -> Done",
                                                                                                          "",
                                                                                                          "    // Arrange the contents of this container along the vertical axis.",
                                                                                                          "    // Components which exceed the height of the container will wrap around.",
                                                                                                          "    arrangeVertical -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// A standalone window which contains other components.",
                                                                                                          "type Application = Container & type {",
                                                                                                          "",
                                                                                                          "    // The title of the application window.",
                                                                                                          "    windowTitle -> String",
                                                                                                          "",
                                                                                                          "    // Set the title of the application window.",
                                                                                                          "    windowTitle:= (value: String) -> Done",
                                                                                                          "",
                                                                                                          "    // Create window with listeners for mouse enter and exit actions",
                                                                                                          "    startApplication -> Done",
                                                                                                          "",
                                                                                                          "    // Close the window",
                                                                                                          "    stopApplication -> Done",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Objects that can be drawn on a canvas and moved around.",
                                                                                                          "type Graphic = {",
                                                                                                          "",
                                                                                                          "    // The location of this object from the top-left corner of the screen.",
                                                                                                          "    location -> Point",
                                                                                                          "",
                                                                                                          "    // The horizontal location of this object from the top-left corner of the",
                                                                                                          "    // screen.",
                                                                                                          "    x -> Number",
                                                                                                          "",
                                                                                                          "    // The vertical location of this object from the top-left corner of the",
                                                                                                          "    // screen.",
                                                                                                          "    y -> Number",
                                                                                                          "",
                                                                                                          "    // Add this object to the given canvas.",
                                                                                                          "    addToCanvas (canvas: DrawingCanvas) -> Done",
                                                                                                          "",
                                                                                                          "    // Remove this object from its canvas.",
                                                                                                          "    removeFromCanvas -> Done",
                                                                                                          "",
                                                                                                          "    // Whether this object is currently set to be visible on the canvas.",
                                                                                                          "    isVisible -> Boolean",
                                                                                                          "",
                                                                                                          "    // Set whether this object is currently visible on the canvas.",
                                                                                                          "    visible:= (value: Boolean) -> Done",
                                                                                                          "",
                                                                                                          "    // Move this object to the given point on the canvas.",
                                                                                                          "    moveTo(location: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Move this object by the given distances on the canvas.",
                                                                                                          "    moveBy(dx: Number, dy: Number) -> Done",
                                                                                                          "",
                                                                                                          "    // Whether the given location is inside this object.",
                                                                                                          "    contains(location: Point) -> Boolean",
                                                                                                          "",
                                                                                                          "    // Whether any point in the given graphic is inside this object.",
                                                                                                          "    overlaps(graphic: Graphic2D) -> Boolean",
                                                                                                          "",
                                                                                                          "    // set the color of this object to c",
                                                                                                          "    color := (c: Color)->Done",
                                                                                                          "",
                                                                                                          "    // return the color of this object",
                                                                                                          "    color -> Color",
                                                                                                          "",
                                                                                                          "    // Send this object up one layer on the screen",
                                                                                                          "    sendForward -> Done",
                                                                                                          "",
                                                                                                          "    // send this object down one layer on the screen",
                                                                                                          "    sendBackward -> Done",
                                                                                                          "",
                                                                                                          "    // send this object to the top layer on the screen",
                                                                                                          "    sendToFront -> Done",
                                                                                                          "",
                                                                                                          "    // send this object to the bottom layer on the screen",
                                                                                                          "    sendToBack -> Done",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "// DrawingCanvas holding graphic objects",
                                                                                                          "type DrawingCanvas = Component & type {",
                                                                                                          "",
                                                                                                          "    // redraws the canvas and its contents regularly as needed",
                                                                                                          "    startDrawing -> Done",
                                                                                                          "",
                                                                                                          "    // add d to canvas",
                                                                                                          "    add (d: Graphic)->Done",
                                                                                                          "",
                                                                                                          "    // remove d from canvas",
                                                                                                          "    remove (d: Graphic)->Done",
                                                                                                          "",
                                                                                                          "    // Inform canvas that it needs to be redrawn",
                                                                                                          "    notifyRedraw -> Done",
                                                                                                          "",
                                                                                                          "    // clear the canvas",
                                                                                                          "    clear -> Done",
                                                                                                          "",
                                                                                                          "    // Send d to top layer of graphics",
                                                                                                          "    sendToFront (d: Graphic) -> Done",
                                                                                                          "",
                                                                                                          "    // send d to bottom layer of graphics",
                                                                                                          "    sendToBack (d: Graphic) -> Done",
                                                                                                          "",
                                                                                                          "    // send d up one layer in graphics",
                                                                                                          "    sendForward (d: Graphic) -> Done",
                                                                                                          "",
                                                                                                          "    // send d down one layer in graphics",
                                                                                                          "    sendBackward (d: Graphic) -> Done",
                                                                                                          "",
                                                                                                          "    // return the current dimensions of the canvas",
                                                                                                          "    width -> Number",
                                                                                                          "    height -> Number",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Type of object that runs a graphical application that draws",
                                                                                                          "// objects on a canvas included in the window and responds to mouse actions",
                                                                                                          "type GraphicApplication = Application & type {",
                                                                                                          "    // canvas holds graphic objects on screen",
                                                                                                          "    canvas -> DrawingCanvas",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse click (press and release) in the canvas at the given",
                                                                                                          "    // point.",
                                                                                                          "    onMouseClick (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse press in the canvas at the given point.",
                                                                                                          "    onMousePress (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse release in the canvas at the given point.",
                                                                                                          "    onMouseRelease (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse move in the canvas at the given point.",
                                                                                                          "    onMouseMove (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse drag (move during press) in the canvas at the given",
                                                                                                          "    // point.",
                                                                                                          "    onMouseDrag (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse entering the canvas at the given point.",
                                                                                                          "    onMouseEnter (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse exiting the canvas at the given point.",
                                                                                                          "    onMouseExit (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // must be invoked to create window and its contents as well as prepare the",
                                                                                                          "    // window to handle mouse events",
                                                                                                          "    startGraphics -> Done",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Two-dimensional objects that can also be resized",
                                                                                                          "type Graphic2D = Graphic & type {",
                                                                                                          "",
                                                                                                          "    // dimensions of object",
                                                                                                          "    width -> Number",
                                                                                                          "    height -> Number",
                                                                                                          "    size -> Point",
                                                                                                          "",
                                                                                                          "    // Change dimensions of object",
                                                                                                          "    size := (dimensions: Point) -> Done",
                                                                                                          "    width := (width: Number) -> Done",
                                                                                                          "    height := (height: Number) -> Done",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// One-dimensional objects",
                                                                                                          "type Line = Graphic & type {",
                                                                                                          "    // start and end of line",
                                                                                                          "    start -> Point",
                                                                                                          "    end -> Point",
                                                                                                          "",
                                                                                                          "    // set start and end of line",
                                                                                                          "    start := (start': Point) -> Done",
                                                                                                          "    end := (end': Point) -> Done",
                                                                                                          "    setEndPoints (start': Point, end': Point) -> Done",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Text that can be drawn on a canvas.",
                                                                                                          "type Text = Graphic & type {",
                                                                                                          "",
                                                                                                          "    // return the contents displayed in the item",
                                                                                                          "    contents -> String",
                                                                                                          "",
                                                                                                          "    // reset the contents displayed to be s",
                                                                                                          "    contents := (s: String) -> Done",
                                                                                                          "",
                                                                                                          "    // return width of text item (currently inaccurate)",
                                                                                                          "    width -> Number",
                                                                                                          "",
                                                                                                          "    // return size of the font used to display the contents",
                                                                                                          "    fontSize -> Number",
                                                                                                          "",
                                                                                                          "    // Set the size of the font used to display the contents",
                                                                                                          "    fontSize := (size: Number) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Component of window that holds text",
                                                                                                          "type TextBox = Component & type {",
                                                                                                          "",
                                                                                                          "    // The text contents of the box.",
                                                                                                          "    contents -> String",
                                                                                                          "    contents:= (value: String) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Component of window that holds text",
                                                                                                          "type Labeled = Component & type {",
                                                                                                          "",
                                                                                                          "    // The label name.",
                                                                                                          "    label -> String",
                                                                                                          "    label:= (value: String) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// type of button component in window",
                                                                                                          "type Button = Labeled",
                                                                                                          "",
                                                                                                          "// Component that can take input and respond to an event",
                                                                                                          "type Input = Labeled & type {",
                                                                                                          "",
                                                                                                          "    // Respond to this input gaining focus with the given event.",
                                                                                                          "    onFocusDo(f: Response) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to this input losing focus with the given event.",
                                                                                                          "    onBlurDo(f: Response) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to this input having its value changed.",
                                                                                                          "    onChangeDo(f: Response) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Component in window taking user text input",
                                                                                                          "type TextField = Input & type {",
                                                                                                          "",
                                                                                                          "    // The contents of the text field.",
                                                                                                          "    text -> String",
                                                                                                          "    text := (value: String) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Component in window taking user numeric input",
                                                                                                          "type NumberField = Input & type {",
                                                                                                          "",
                                                                                                          "    // The contents of the number field.",
                                                                                                          "    number -> Number",
                                                                                                          "    number := (value: Number) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Type for pop-up menus",
                                                                                                          "type Choice = Input & type {",
                                                                                                          "",
                                                                                                          "    // The currently selected option.",
                                                                                                          "    selected -> String",
                                                                                                          "    selected := (value: String) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// ** Colors *******************************************************************",
                                                                                                          "",
                                                                                                          "type Color = {",
                                                                                                          "    red -> Number     // The red component of the color.",
                                                                                                          "    green -> Number   // The green component of the color.",
                                                                                                          "    blue -> Number    // The blue component of the color.",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Exception that may be thrown if the r, b, or g components",
                                                                                                          "// are not between 0 and 255 (inclusive)",
                                                                                                          "def ColorOutOfRange: prelude.ExceptionKind is public =",
                                                                                                          "    ProgrammingError.refine \"Color Out Of Range\"",
                                                                                                          "",
                                                                                                          "// Simple color class",
                                                                                                          "def color is public = object {",
                                                                                                          "    class r (r': Number) g (g': Number) b (b': Number) -> Color {",
                                                                                                          "        // Creates a color with rgb coordinates r', g', and b'",
                                                                                                          "        if ((r' < 0) || (r' > 255)) then {",
                                                                                                          "            ColorOutOfRange.raise \"red index {r'} out of bounds 0..255\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        if ((g' < 0) || (g' > 255)) then {",
                                                                                                          "            ColorOutOfRange.raise \"green index {g'} out of bounds 0..255\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        if ((b' < 0) || (b' > 255)) then {",
                                                                                                          "            ColorOutOfRange.raise \"blue index {b'} out of bounds 0..255\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        def red:Number is public = r'.truncated",
                                                                                                          "        def green:Number is public = g'.truncated",
                                                                                                          "        def blue:Number is public = b'.truncated",
                                                                                                          "",
                                                                                                          "        method == (c: Color) -> Boolean {",
                                                                                                          "             (red == c.red) && (green == c.green) && (blue == c.blue)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"color w/ rgb({red}, {green}, {blue})\"",
                                                                                                          "        }",
                                                                                                          "    }",
                                                                                                          "        ",
                                                                                                          "    method random -> Color {",
                                                                                                          "        // Produce a random color.",
                                                                                                          "        r (randomIntFrom (0) to (255))",
                                                                                                          "            g (randomIntFrom (0) to (255))",
                                                                                                          "            b (randomIntFrom (0) to (255))",
                                                                                                          "    }",
                                                                                                          "",
                                                                                                          "    def white:Color is public = r (255) g (255) b (255)",
                                                                                                          "    def black:Color is public = r (0) g (0) b (0)",
                                                                                                          "    def green:Color is public = r (0) g (255) b (0)",
                                                                                                          "    def red:Color is public = r (255) g (0) b (0)",
                                                                                                          "    def gray:Color is public = r (60) g (60) b (60)",
                                                                                                          "    def blue:Color is public = r (0) g (0) b (255)",
                                                                                                          "    def cyan:Color is public = r (0) g (255) b (255)",
                                                                                                          "    def magenta:Color is public = r (255) g (0) b (255)",
                                                                                                          "    def yellow:Color is public = r (255) g (255) b (0)",
                                                                                                          "    def neutral:Color is public = r (220) g (220) b (220)",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Predefined colors.  Deprecated: use color.white, etc.",
                                                                                                          "def white:Color is public = color.r (255) g (255) b (255)",
                                                                                                          "def black:Color is public = color.r (0) g (0) b (0)",
                                                                                                          "def green:Color is public = color.r (0) g (255) b (0)",
                                                                                                          "def red:Color is public = color.r (255) g (0) b (0)",
                                                                                                          "def gray:Color is public = color.r (60) g (60) b (60)",
                                                                                                          "def blue:Color is public = color.r (0) g (0) b (255)",
                                                                                                          "def cyan:Color is public = color.r (0) g (255) b (255)",
                                                                                                          "def magenta:Color is public = color.r (255) g (0) b (255)",
                                                                                                          "def yellow:Color is public = color.r (255) g (255) b (0)",
                                                                                                          "def neutral:Color is public = color.r (220) g (220) b (220)",
                                                                                                          "",
                                                                                                          "// A random color.  Deprecated: use color.random",
                                                                                                          "method randomColor -> Color { color.random }",
                                                                                                          "",
                                                                                                          "// ** Events *******************************************************************",
                                                                                                          "",
                                                                                                          "// Generic event containing source of the event.",
                                                                                                          "type Event = {",
                                                                                                          "    source -> Component",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Mouse event containing mouse location when event generated",
                                                                                                          "type MouseEvent = Event & type {",
                                                                                                          "    at -> Point",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Type of an event associated with a key press",
                                                                                                          "type KeyEvent = Event & type {",
                                                                                                          "    //character -> String",
                                                                                                          "    code -> Number",
                                                                                                          "    //modifiers -> Modifiers",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// type of an action taking an Event as a paramter",
                                                                                                          "type Response = Procedure<Event>",
                                                                                                          "",
                                                                                                          "// type of an action taking a MouseEvent as a parameter",
                                                                                                          "type MouseResponse = Procedure<MouseEvent>",
                                                                                                          "",
                                                                                                          "// type of an action taking a KeyEvent as a parameter",
                                                                                                          "type KeyResponse = Procedure<KeyEvent>",
                                                                                                          "",
                                                                                                          "class eventSource (source':Component) -> Event {",
                                                                                                          "        // Creates an event generated by source'",
                                                                                                          "",
                                                                                                          "        def source: Component is public = source'",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Event on {source}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class mouseEventSource (source':Component) event (event':Foreign) -> MouseEvent {",
                                                                                                          "        // Creates a mouseEvent with the mouse location from event'",
                                                                                                          "",
                                                                                                          "        inherit eventSource (source')",
                                                                                                          "        def at: Point is public = (event'.pageX - source.element.offsetLeft) @",
                                                                                                          "            (event'.pageY - source.element.offsetTop)",
                                                                                                          "",
                                                                                                          "        // String representation of the mouse event",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Mouse event on {source} at {at}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class keyEventSource (source':Component) event(event':Foreign) -> KeyEvent {",
                                                                                                          "        // Creates an event with the key-code from event'",
                                                                                                          "        inherit eventSource(source')",
                                                                                                          "        def code: Number is public = event'.which",
                                                                                                          "        //def character is public = dom.window.String.fromCharCode(event'.which)",
                                                                                                          "",
                                                                                                          "        // String representation of the key event",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Event on {source} for key-code {code}\"",
                                                                                                          "        }",
                                                                                                          "    ",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "// ** Internal factories *******************************************************",
                                                                                                          "",
                                                                                                          "// where T <: Component",
                                                                                                          "type ComponentFactory<T> = {",
                                                                                                          "",
                                                                                                          "    // Build a component around an existing element.",
                                                                                                          "    fromElement (element) -> T",
                                                                                                          "",
                                                                                                          "    // Build a component around a new element of the given tag name.",
                                                                                                          "    ofElementType (tagName: String) -> T",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "def maxClickTime: Number = 200",
                                                                                                          "// The maximum number of milliseconds for which the mouse-button can be held",
                                                                                                          "// down in order for the event to be registered as a click.",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class componentFromElement (element') -> Component {",
                                                                                                          "        def element is public = element'",
                                                                                                          "",
                                                                                                          "        // width of component",
                                                                                                          "        method width -> Number {",
                                                                                                          "            element.width",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // height of component",
                                                                                                          "        method height -> Number {",
                                                                                                          "            element.height",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        // dimensions of component",
                                                                                                          "        method size -> Point {",
                                                                                                          "            element.width @ element.height",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // assocate action f with event' on component",
                                                                                                          "        method on(event': String)",
                                                                                                          "              do(f: Procedure<Foreign>) -> Done is confidential {",
                                                                                                          "            element.addEventListener(event', f)",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // associate response f to mouse event of kind",
                                                                                                          "        method on (kind: String)",
                                                                                                          "              withPointDo (f:MouseResponse) -> Done is confidential {",
                                                                                                          "            on (kind) do { event' ->",
                                                                                                          "                f.apply (mouseEventSource (self) event (event'))",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        // debug: This is declared outside and should be visible, but its not!!",
                                                                                                          "        class mouseEventSource(source')event(event') is confidential {",
                                                                                                          "            def source is public = source'",
                                                                                                          "            def at is public  = (event'.pageX - source.element.offsetLeft) @",
                                                                                                          "                    (event'.pageY - source.element.offsetTop)",
                                                                                                          "            method asString {\"Mouse event on {source} at {at}\"}",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "        method onMouseClickDo (f:MouseResponse) -> Done {",
                                                                                                          "            // Associates action f with mouse click event",
                                                                                                          "            var lastDown: Foreign",
                                                                                                          "",
                                                                                                          "            on \"mousedown\" do {event': Foreign ->",
                                                                                                          "                lastDown:= event'.timeStamp",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            on \"click\" do {event': Foreign ->",
                                                                                                          "                if ((event'.timeStamp - lastDown) <= maxClickTime) then {",
                                                                                                          "                    f.apply (mouseEventSource(self) event(event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse press event",
                                                                                                          "        method onMousePressDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mousedown\" withPointDo (f)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse release event",
                                                                                                          "        method onMouseReleaseDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mouseup\" withPointDo (f)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse move event",
                                                                                                          "        method onMouseMoveDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mousemove\" do { event' ->",
                                                                                                          "                if (if (dom.doesObject (event') haveProperty (\"buttons\")) then {",
                                                                                                          "                    event'.buttons == 0",
                                                                                                          "                } else {",
                                                                                                          "                    event'.which == 0",
                                                                                                          "                }) then {",
                                                                                                          "                    f.apply(mouseEventSource (self) event (event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse drag event",
                                                                                                          "        method onMouseDragDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mousemove\" do { event' ->",
                                                                                                          "                if (if (dom.doesObject (event') haveProperty (\"buttons\")) then {",
                                                                                                          "                    event'.buttons == 1",
                                                                                                          "                } else {",
                                                                                                          "                    event'.which == 1",
                                                                                                          "                }) then {",
                                                                                                          "                    f.apply(mouseEventSource (self) event(event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse enter (of window) event",
                                                                                                          "        method onMouseEnterDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mouseover\" do { event' ->",
                                                                                                          "                def from = event'.relatedTarget",
                                                                                                          "//                print(\"dom = {dom}\")",
                                                                                                          "//                print(\"dom.noObject = {dom.noObject}\")",
                                                                                                          "//                print(\"from = {from}\")",
                                                                                                          "//                print(\"element = {element}\")",
                                                                                                          "//                print(\"self ={self}\")",
                                                                                                          "//                print(\"event' = {event'}\")",
                                                                                                          "//                print(\"dom.noObject == from = {dom.noObject == from}\")",
                                                                                                          "//                print(\"!element.contains(from) = {!element.contains(from)}\")",
                                                                                                          "                if ((dom.noObject == from) || {!element.contains(from)}) then {",
                                                                                                          "//                    print(\"in if\")",
                                                                                                          "//                    print(\"mouseEventSource (self) event (event') = {outer.mouseEventSource (self) event (event')}\")",
                                                                                                          "                    f.apply (mouseEventSource (self) event (event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse exit event",
                                                                                                          "        method onMouseExitDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mouseout\" do {event' ->",
                                                                                                          "                def to = event'.relatedTarget",
                                                                                                          "",
                                                                                                          "                if ((dom.noObject == to) || {!element.contains (to)}) then {",
                                                                                                          "                    f.apply (mouseEventSource (self) event (event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        // DEBUG: Needed to add because not visible in method \"on\" below",
                                                                                                          "        ",
                                                                                                          "        class eventSource (source':Component) -> Event {",
                                                                                                          "            // Creates an event generated by source'",
                                                                                                          "",
                                                                                                          "            def source: Component is public = source'",
                                                                                                          "",
                                                                                                          "            method asString -> String {",
                                                                                                          "                \"Event on {source}\"",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        class keyEventSource (source':Component) event(event':Foreign) -> KeyEvent {",
                                                                                                          "            // Creates an event with the key-code from event'",
                                                                                                          "            inherit eventSource(source')",
                                                                                                          "            def code: Number is public = event'.which",
                                                                                                          "            //def character is public = dom.window.String.fromCharCode(event'.which)",
                                                                                                          "",
                                                                                                          "            // String representation of the key event",
                                                                                                          "            method asString -> String {",
                                                                                                          "                \"Event on {source} for key-code {code}\"",
                                                                                                          "            }",
                                                                                                          "    ",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to key event of kind",
                                                                                                          "        method on (kind: String)",
                                                                                                          "              withKeyDo (f: KeyResponse) -> Done is confidential {",
                                                                                                          "            on (kind) do {event' ->",
                                                                                                          "                f.apply (keyEventSource (self) event (event'))",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to key press event",
                                                                                                          "        method onKeyPressDo(f: KeyResponse) -> Done {",
                                                                                                          "            on \"keydown\" withKeyDo (f)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to key release event",
                                                                                                          "        method onKeyReleaseDo (f: KeyResponse) -> Done {",
                                                                                                          "            on \"keyup\" withKeyDo (f)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f tokey type (press & release) event",
                                                                                                          "        method onKeyTypeDo (f: KeyResponse) -> Done {",
                                                                                                          "            on \"keypress\" withKeyDo (f)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Does component have some flex in size",
                                                                                                          "        method isFlexible -> Boolean {",
                                                                                                          "            element.style.flexGrow.asNumber > 0",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Set whether component is flexibile",
                                                                                                          "        method flexible:= (value: Boolean) -> Done {",
                                                                                                          "            element.style.flexGrow := if (value) then {",
                                                                                                          "                1",
                                                                                                          "            } else {",
                                                                                                          "                0",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // string representation of component",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"a component\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class componentOfElementType (tagName:String) -> Component {",
                                                                                                          "        // Creates a component with type tagName",
                                                                                                          "",
                                                                                                          "        inherit componentFromElement (document.createElement (tagName))",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class containerOfElementType (tagName: String) -> Component {",
                                                                                                          "        inherit containerFromElement (document.createElement (tagName))",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Create a new Component from element'",
                                                                                                          "class containerFromElement (element') -> Container {",
                                                                                                          "        inherit componentFromElement (element')",
                                                                                                          "",
                                                                                                          "        def children = []",
                                                                                                          "",
                                                                                                          "        // Number of children",
                                                                                                          "        method size -> Number {",
                                                                                                          "            children.size",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Is it empty?",
                                                                                                          "        method isEmpty -> Boolean {",
                                                                                                          "            size == 0",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Subcomponent at position index",
                                                                                                          "        method at (index: Number) -> Component {",
                                                                                                          "            if ((index < 1) || (index > size)) then {",
                                                                                                          "                collections.BoundsError.raiseForIndex (index)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            children.at (index)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Replace subcomponent at index by aComponent",
                                                                                                          "        method at (index: Number) put (aComponent: Component) -> Done {",
                                                                                                          "            if ((index < 1) || (index > (size + 1))) then {",
                                                                                                          "                BoundsError.raiseForIndex (index)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            if (index == (size + 1)) then {",
                                                                                                          "                element.appendChild (aComponent.element)",
                                                                                                          "            } else {",
                                                                                                          "                element.insertBefore (aComponent.element, children.at (index).element)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            children.at (index) put (aComponent)",
                                                                                                          "",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Add aComponent after all existing components in the container",
                                                                                                          "        method append (aComponent: Component) -> Done {",
                                                                                                          "            element.appendChild (aComponent.element)",
                                                                                                          "",
                                                                                                          "            children.push (aComponent)",
                                                                                                          "",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Add aComponent before all existing components in the container",
                                                                                                          "        method prepend (aComponent: Component) -> Done {",
                                                                                                          "            if (isEmpty) then {",
                                                                                                          "                element.appendChild (aComponent.element)",
                                                                                                          "            } else {",
                                                                                                          "                element.insertBefore (aComponent.element, element.firstChild)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            children.unshift (aComponent)",
                                                                                                          "",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Apply f to all children of container.",
                                                                                                          "        method do (f: Procedure<Component>) -> Done {",
                                                                                                          "            for (children) do {aComponent: Component ->",
                                                                                                          "                f.apply(aComponent)",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Generalize binary function f to apply to all children of container.",
                                                                                                          "        // Value if no children is initial",
                                                                                                          "        method fold<T>(f: Function2<T, Component, T>)",
                                                                                                          "              startingWith (initial: T) -> T {",
                                                                                                          "            var value: T:= initial",
                                                                                                          "",
                                                                                                          "            for (children) do {aComponent: Component ->",
                                                                                                          "                value:= f.apply (value, aComponent)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Make container more flexible",
                                                                                                          "        method flex -> Done is confidential {",
                                                                                                          "            element.style.display := \"inline-flex\"",
                                                                                                          "            element.style.justifyContent := \"center\"",
                                                                                                          "            element.style.flexFlow := \"row wrap\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Arrange elements in rows",
                                                                                                          "        method arrangeHorizontal -> Done {",
                                                                                                          "            flex",
                                                                                                          "            element.style.flexDirection:= \"row\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Arrange elements in columns",
                                                                                                          "        method arrangeVertical -> Done {",
                                                                                                          "            flex",
                                                                                                          "            element.style.flexDirection := \"column\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // return description of container",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"container: with {size} children\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Create an empty container ready to add in row",
                                                                                                          "class containerEmpty -> Container {",
                                                                                                          "        inherit containerOfElementType (\"div\")",
                                                                                                          "",
                                                                                                          "        self.arrangeHorizontal",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Set empty container with given width' and height'",
                                                                                                          "class containerSize (width': Number, height': Number) -> Container {",
                                                                                                          "        inherit containerEmpty",
                                                                                                          "",
                                                                                                          "        self.element.style.width:= \"{width'}px\"",
                                                                                                          "        self.element.style.height:= \"{height'}px\"",
                                                                                                          "        self.element.style.overflow:= \"auto\"",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// A factory building components that take input",
                                                                                                          "class inputFromElement (element') -> Input {",
                                                                                                          "        inherit componentFromElement(element')",
                                                                                                          "",
                                                                                                          "        // Respond with action f to this input gaining focus with the given event.",
                                                                                                          "        method onFocusDo (f: Response) -> Done {",
                                                                                                          "            element.addEventListener (\"focus\", { _ ->",
                                                                                                          "                f.apply (eventSource (self))",
                                                                                                          "            })",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Respond with action f to this input losing focus with the given event.",
                                                                                                          "        method onBlurDo (f: Response) -> Done {",
                                                                                                          "            element.addEventListener(\"blur\", { _ ->",
                                                                                                          "                f.apply(eventSource(self))",
                                                                                                          "            })",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Respond with action f to this input having its value changed.",
                                                                                                          "        method onChangeDo (f: Response) -> Done {",
                                                                                                          "            element.addEventListener (\"change\", { _ ->",
                                                                                                          "                f.apply(eventSource(self))",
                                                                                                          "            })",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // return description of component",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"an input\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Create component of type elementType to handle input",
                                                                                                          "class inputOfElementType(elementType: String) -> Input {",
                                                                                                          "        inherit inputFromElement (document.createElement (elementType))",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Create component of type inputType to handle input",
                                                                                                          "class inputOfType (inputType: String) -> Input {",
                                                                                                          "        inherit inputOfElementType(\"input\")",
                                                                                                          "",
                                                                                                          "        self.element.setAttribute (\"type\", inputType)",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class labeledWidgetFromElement (element') -> Labeled {",
                                                                                                          "        // create labeled input from element'",
                                                                                                          "",
                                                                                                          "        inherit inputFromElement (element')",
                                                                                                          "",
                                                                                                          "        method labelElement -> Foreign is confidential {",
                                                                                                          "            self.element",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method label -> String {",
                                                                                                          "            // answers the Text of the label",
                                                                                                          "            labelElement.textContent",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method label:= (value: String) -> Done {",
                                                                                                          "            // sets the label to value",
                                                                                                          "            labelElement.textContent:= value",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            // a human-readable description of this object",
                                                                                                          "            \"an input labeled: {label}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class labeledWidgetOfElementType (elementType:String) -> Labeled {",
                                                                                                          "        // creates labeled input a new document of elementType",
                                                                                                          "",
                                                                                                          "        inherit labeledWidgetFromElement (document.createElement (elementType))",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class labeledWidgetOfElementType (elementType: String)",
                                                                                                          "          labeled(newLabel: String) -> Labeled {",
                                                                                                          "        // Create labeled element from elementType with newLabel",
                                                                                                          "",
                                                                                                          "        inherit labeledWidgetOfElementType(elementType)",
                                                                                                          "        self.label := newLabel",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class fieldOfType(inputType: String) labeled(label': String) -> Input {",
                                                                                                          "        // Create input field of type inputType showing label'",
                                                                                                          "",
                                                                                                          "        inherit inputOfType(inputType)",
                                                                                                          "",
                                                                                                          "        // label on the field",
                                                                                                          "        method label -> String {",
                                                                                                          "            self.element.placeholder",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // reset the label on the field",
                                                                                                          "        method label:= (value: String) -> Done {",
                                                                                                          "            self.element.placeholder:= value",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // String representing the labeled field (including label)",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"a field labeled: {label}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        label:= label'",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "// ** External factories *******************************************************",
                                                                                                          "",
                                                                                                          "// Log entry to keep take of response to an event",
                                                                                                          "class eventLogKind(kind': String)",
                                                                                                          "      response(response': Procedure) is confidential {",
                                                                                                          "    def kind: String is public = kind'",
                                                                                                          "    def response: Procedure is public = response'",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class applicationTitle(initialTitle: String)",
                                                                                                          "          size (dimensions': Point) -> Application {",
                                                                                                          "        // Create an application with window titled initialTitle and",
                                                                                                          "        // size dimensions'",
                                                                                                          "",
                                                                                                          "        inherit containerFromElement(document.createDocumentFragment)",
                                                                                                          "",
                                                                                                          "        var isOpened: Boolean:= false  // whether window is visible",
                                                                                                          "        var theWindow: Foreign",
                                                                                                          "",
                                                                                                          "        var theTitle: String:= initialTitle",
                                                                                                          "        var theWidth: Number:= dimensions'.x",
                                                                                                          "        var theHeight: Number:= dimensions'.y",
                                                                                                          "",
                                                                                                          "        def events = []",
                                                                                                          "",
                                                                                                          "        method element -> Foreign {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.document.body",
                                                                                                          "            } else {",
                                                                                                          "                super.element",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Whether new items are added to window from left to right or top to bottom",
                                                                                                          "        var isHorizontal: Boolean:= true",
                                                                                                          "",
                                                                                                          "        // Arrange the contents of this container along the horizontal axis.",
                                                                                                          "        // Components which exceed the width of the container will wrap around.",
                                                                                                          "        method arrangeHorizontal -> Done {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                super.arrangeHorizontal",
                                                                                                          "            } else {",
                                                                                                          "                isHorizontal:= true",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Arrange the contents of this container along the vertical axis.",
                                                                                                          "        // Components which exceed the height of the container will wrap around.",
                                                                                                          "        method arrangeVertical -> Done {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                super.arrangeVertical",
                                                                                                          "            } else {",
                                                                                                          "                isHorizontal:= false",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate response with event kind",
                                                                                                          "        method on (kind: String)",
                                                                                                          "              do (response: Procedure<Event>) -> Done is confidential {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.addEventListener (kind, response)",
                                                                                                          "            } else {",
                                                                                                          "                events.push (eventLogKind (kind) response (response))",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // The title of the application window.",
                                                                                                          "        method windowTitle -> String {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.title",
                                                                                                          "            } else {",
                                                                                                          "                theTitle",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Set the title of the application window.",
                                                                                                          "        method windowTitle:= (value: String) -> Done {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.title:= value",
                                                                                                          "            } else {",
                                                                                                          "                theTitle:= value",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // The current width of the window",
                                                                                                          "        method width -> Number {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.width",
                                                                                                          "            } else {",
                                                                                                          "                theWidth",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // the current height of the window",
                                                                                                          "        method height -> Number {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.height",
                                                                                                          "            } else {",
                                                                                                          "                theHeight",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // The enter/exit events need to be redefined to account for the body element",
                                                                                                          "        // not necessarily accounting for all of the space in the window. If we only",
                                                                                                          "        // consider cases where relatedTarget is null, then it represents only enter",
                                                                                                          "        // and exit of the whole window.",
                                                                                                          "",
                                                                                                          "        // Respond to a mouse entering this window with the response f.",
                                                                                                          "        method onMouseEnterDo(f: MouseResponse) -> Done {",
                                                                                                          "            on \"mouseover\" do { event' ->",
                                                                                                          "                def from = event'.relatedTarget",
                                                                                                          "",
                                                                                                          "                if (dom.noObject == from) then {",
                                                                                                          "                    f.apply(mouseEventSource(self) event(event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        // Respond to a mouse exiting this window with the response f.",
                                                                                                          "        method onMouseExitDo(f: MouseResponse) -> Done {",
                                                                                                          "            on \"mouseout\" do { event' ->",
                                                                                                          "                def to = event'.relatedTarget",
                                                                                                          "",
                                                                                                          "                if (dom.noObject == to) then {",
                                                                                                          "                    f.apply(mouseEventSource(self) event(event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Respond to mouse action of kind with response bl",
                                                                                                          "        method onMouse (kind: String) do (bl: MouseResponse) -> Done is confidential {",
                                                                                                          "            theWindow.addEventListener(kind, {evt ->",
                                                                                                          "                bl.apply(evt.pageX @ evt.pageY)",
                                                                                                          "            })",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Create window with listeners for mouse enter and exit actions",
                                                                                                          "        method startApplication -> Done {",
                                                                                                          "            if (!isOpened) then {",
                                                                                                          "                theWindow:= dom.window.open(\"\", \"\", \"width={theWidth},height={theHeight}\")",
                                                                                                          "                theWindow.document.title:= theTitle",
                                                                                                          "                theWindow.document.body.appendChild(element)",
                                                                                                          "",
                                                                                                          "                if (dom.doesObject(dom.window) haveProperty(\"graceRegisterWindow\")) then {",
                                                                                                          "                    dom.window.graceRegisterWindow(theWindow)",
                                                                                                          "                }",
                                                                                                          "",
                                                                                                          "                isOpened:= true",
                                                                                                          "",
                                                                                                          "                element.style.width:= \"100%\"",
                                                                                                          "                element.style.margin:= \"0px\"",
                                                                                                          "",
                                                                                                          "                if (isHorizontal) then {",
                                                                                                          "                    arrangeHorizontal",
                                                                                                          "                } else {",
                                                                                                          "                    arrangeVertical",
                                                                                                          "                }",
                                                                                                          "",
                                                                                                          "                for (events) do { anEvent ->",
                                                                                                          "                    on(anEvent.kind) do(anEvent.response)",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Close the window",
                                                                                                          "        method stopApplication  -> Done {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.close",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representing the application",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"application titled {windowTitle}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class drawingCanvasSize (dimensions': Point) -> DrawingCanvas {",
                                                                                                          "        // class representing a window panel that manages graphics on screen",
                                                                                                          "        // The window containing the canvas has dimensions width' x height'",
                                                                                                          "",
                                                                                                          "        inherit componentFromElement(document.createElement(\"canvas\"))",
                                                                                                          "",
                                                                                                          "        element.width:= dimensions'.x",
                                                                                                          "        element.height:= dimensions'.y",
                                                                                                          "        element.style.alignSelf:= \"center\"",
                                                                                                          "",
                                                                                                          "        def theContext: Foreign = element.getContext(\"2d\")",
                                                                                                          "        theContext.lineWidth:= 2",
                                                                                                          "",
                                                                                                          "        // Current width of the canvas",
                                                                                                          "        method width -> Number {",
                                                                                                          "            element.width",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Current height of the canvas",
                                                                                                          "        method height -> Number {",
                                                                                                          "            element.height",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        method size -> Point {element.width @ element.height}",
                                                                                                          "",
                                                                                                          "        // list of all objects on canvas (hidden or not)",
                                                                                                          "        var theGraphics:= [ ] // emptyList",
                                                                                                          "",
                                                                                                          "        var redraw: Boolean:= false",
                                                                                                          "",
                                                                                                          "        // Inform canvas that it needs to be redrawn",
                                                                                                          "        method notifyRedraw -> Done {",
                                                                                                          "            redraw:= true",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // redraws the canvas and its contents regularly as needed",
                                                                                                          "        method startDrawing -> Done {",
                                                                                                          "            element.ownerDocument.defaultView.setInterval ({",
                                                                                                          "                if (redraw) then {",
                                                                                                          "                    dom.draw (theContext, theGraphics, width, height)",
                                                                                                          "                }",
                                                                                                          "            }, 1000 / frameRate)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // remove all items from canvas",
                                                                                                          "        method clear -> Done {",
                                                                                                          "            theGraphics:= []",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Add new item d to canvas",
                                                                                                          "        method add (d:Graphic) -> Done {",
                                                                                                          "            theGraphics.push(d)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // remove aGraphic from items on canvas",
                                                                                                          "        method remove (aGraphic: Graphic) -> Done {",
                                                                                                          "            if (theGraphics.contains(aGraphic)) then {",
                                                                                                          "                theGraphics.remove (aGraphic)",
                                                                                                          "                notifyRedraw",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send item d to front/top layer of canvas",
                                                                                                          "        method sendToFront (aGraphic: Graphic) -> Done {",
                                                                                                          "            theGraphics.remove (aGraphic)",
                                                                                                          "            theGraphics.push (aGraphic)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send item d to back/bottom layer of canvas",
                                                                                                          "        method sendToBack (aGraphic: Graphic) -> Done {",
                                                                                                          "            theGraphics.remove (aGraphic)",
                                                                                                          "            theGraphics.unshift (aGraphic)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send item d one layer higher on canvas",
                                                                                                          "        method sendForward (aGraphic: Graphic) -> Done {",
                                                                                                          "            def theIndex = theGraphics.indexOf (aGraphic)",
                                                                                                          "",
                                                                                                          "            if (theIndex != theGraphics.size) then {",
                                                                                                          "                theGraphics.remove (aGraphic)",
                                                                                                          "                theGraphics.at (theIndex + 1) add (aGraphic)",
                                                                                                          "                notifyRedraw",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send item d one layer lower on canvas",
                                                                                                          "        method sendBackward (aGraphic: Graphic)->Done {",
                                                                                                          "            def theIndex = theGraphics.indexOf(aGraphic)",
                                                                                                          "",
                                                                                                          "            if (theIndex != 1) then {",
                                                                                                          "                theGraphics.remove (aGraphic)",
                                                                                                          "                theGraphics.at (theIndex - 1) add (aGraphic)",
                                                                                                          "                notifyRedraw",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // debug method to print all objects on canvas",
                                                                                                          "        method printObjects -> Done {",
                                                                                                          "            for (theGraphics) do { aGraphic ->",
                                                                                                          "                print (aGraphic)",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // string representation of canvas",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"canvas: with {theGraphics.size} objects\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class graphicApplicationSize (theDimension':Point) -> GraphicApplication {",
                                                                                                          "        // Create window with dimensions theDimension', with canvas",
                                                                                                          "        // installed, and that responds to mouse actions",
                                                                                                          "",
                                                                                                          "        inherit applicationTitle (\"Simple graphics\") size (theDimension')",
                                                                                                          "",
                                                                                                          "        def canvas: DrawingCanvas is public = drawingCanvasSize (theDimension')",
                                                                                                          "",
                                                                                                          "        children.push (canvas)",
                                                                                                          "",
                                                                                                          "        def before: Container = containerEmpty",
                                                                                                          "        def after: Container = containerEmpty",
                                                                                                          "",
                                                                                                          "        arrangeVertical",
                                                                                                          "        element.appendChild (before.element)",
                                                                                                          "        element.appendChild (canvas.element)",
                                                                                                          "        element.appendChild (after.element)",
                                                                                                          "",
                                                                                                          "        // Add a component to the top of the window.",
                                                                                                          "        method prepend (aComponent: Component) -> Done {",
                                                                                                          "            before.prepend (aComponent)",
                                                                                                          "            children.unshift (aComponent)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Add a component to the bottom of the window.",
                                                                                                          "        method append (aComponent: Component) -> Done {",
                                                                                                          "            after.append (aComponent)",
                                                                                                          "            children.push (aComponent)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // The following methods are defind to be called in response to mouse",
                                                                                                          "        // actions.  They will be overridden in subclasses to provide appropriate",
                                                                                                          "        // behavior, as now they do nothing!",
                                                                                                          "        // Method to handle mouse click at pt",
                                                                                                          "        method onMouseClick (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse press at pt",
                                                                                                          "        method onMousePress (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse release at pt",
                                                                                                          "        method onMouseRelease (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse move at pt",
                                                                                                          "        method onMouseMove (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse drag at pt",
                                                                                                          "        method onMouseDrag (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse enter of canvas at pt",
                                                                                                          "        method onMouseEnter (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse exit of canvas at pt",
                                                                                                          "        method onMouseExit (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Create window and its contents as well as prepare the",
                                                                                                          "        // window to handle mouse events",
                                                                                                          "        method startGraphics -> Done {",
                                                                                                          "            def parentElement = document.createElement (\"div\")",
                                                                                                          "            parentElement.className := \"height-calculator\"",
                                                                                                          "            parentElement.style.width := \"{theDimension'.x}px\"",
                                                                                                          "            parentElement.appendChild (element.cloneNode (true))",
                                                                                                          "            document.body.appendChild (parentElement)",
                                                                                                          "            theHeight:= parentElement.offsetHeight",
                                                                                                          "            document.body.removeChild (parentElement)",
                                                                                                          "",
                                                                                                          "            startApplication",
                                                                                                          "            canvas.startDrawing",
                                                                                                          "",
                                                                                                          "            theWindow.document.documentElement.style.overflow := \"hidden\"",
                                                                                                          "",
                                                                                                          "            canvas.onMouseClickDo { event' ->",
                                                                                                          "                onMouseClick (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMousePressDo { event' ->",
                                                                                                          "                onMousePress (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMouseReleaseDo { event' ->",
                                                                                                          "                onMouseRelease (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMouseMoveDo { event' ->",
                                                                                                          "                onMouseMove (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMouseDragDo { event' ->",
                                                                                                          "                onMouseDrag (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMouseEnterDo { event' ->",
                                                                                                          "                onMouseEnter (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMouseExitDo { event' ->",
                                                                                                          "                onMouseExit (event'.at)",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"graphic application of {canvas}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class drawableAt (location':Point) on (canvas':DrawingCanvas) -> Graphic {",
                                                                                                          "        // abstract superclass for drawable objects (of type Graphic)",
                                                                                                          "",
                                                                                                          "        // location of object on screen",
                                                                                                          "        var location: Point is readable:= location'",
                                                                                                          "",
                                                                                                          "        // x coordinate of object",
                                                                                                          "        method x -> Number {",
                                                                                                          "            location.x",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // y coordinate of object",
                                                                                                          "        method y -> Number {",
                                                                                                          "            location.y",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method == (other) {",
                                                                                                          "            // Object identity.",
                                                                                                          "            // This doesn't seem right to apb, but it's what the rest of the code assumes.",
                                                                                                          "            self.isMe(other)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // The canvas this object is part of",
                                                                                                          "        var canvas: DrawingCanvas := canvas'",
                                                                                                          "",
                                                                                                          "        // the color of this object",
                                                                                                          "        var theColor: Color:= black",
                                                                                                          "",
                                                                                                          "        method color -> Color {theColor}",
                                                                                                          "",
                                                                                                          "        method color:= (newColor: Color) -> Done {",
                                                                                                          "            theColor:= newColor",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        var theFrameColor: Color := black",
                                                                                                          "",
                                                                                                          "        method frameColor -> Color { theFrameColor }",
                                                                                                          "        method frameColor := (newfColor:Color) -> Done {",
                                                                                                          "            theFrameColor:= newfColor",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Determine if object is shown on screen",
                                                                                                          "        var isVisible: Boolean is readable := true",
                                                                                                          "",
                                                                                                          "        // Set whether object is visible or hidden",
                                                                                                          "        method visible := (b:Boolean) -> Done {",
                                                                                                          "            isVisible := b",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Add this object to canvas c",
                                                                                                          "        method addToCanvas (c: DrawingCanvas) -> Done {",
                                                                                                          "            removeFromCanvas",
                                                                                                          "            canvas := c",
                                                                                                          "            c.add (self)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Remove this object from its canvas",
                                                                                                          "        method removeFromCanvas -> Done {",
                                                                                                          "            canvas.remove (self)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // move this object to newLocn",
                                                                                                          "        method moveTo (newLocn: Point) -> Done{",
                                                                                                          "            location := newLocn",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // move this object dx to the right and dy down",
                                                                                                          "        method moveBy (dx: Number, dy: Number) -> Done {",
                                                                                                          "            location := location + (dx @ dy)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Determine whether this object contains the point at locn",
                                                                                                          "        method contains (locn: Point) -> Boolean {",
                                                                                                          "            SubobjectResponsibility.raise \"contains not implemented for {self}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Determine whether this object overlaps otherObject",
                                                                                                          "        method overlaps (otherObject: Graphic2D) -> Boolean {",
                                                                                                          "            SubobjectResponsibility.raise \"overlaps not implemented for {self}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Send this object up one layer on the screen",
                                                                                                          "        method sendForward -> Done {",
                                                                                                          "            canvas.sendForward (self)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send this object down one layer on the screen",
                                                                                                          "        method sendBackward -> Done {",
                                                                                                          "            canvas.sendBackward (self)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send this object to the top layer on the screen",
                                                                                                          "        method sendToFront -> Done {",
                                                                                                          "            canvas.sendToFront (self)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send this object to the bottom layer on the screen",
                                                                                                          "        method sendToBack -> Done {",
                                                                                                          "            canvas.sendToBack (self)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Tell the canvas that the screen needs to be repainted",
                                                                                                          "        method notifyRedraw -> Done is confidential {",
                                                                                                          "            canvas.notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Draw this object on the applet !! confidential",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            SubobjectResponsibility.raise \"draw not implemented for {self}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return a string representation of the object",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Graphic object\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class drawable2DAt (location': Point)",
                                                                                                          "          size (dimension': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // abstract class for two-dimensional objects",
                                                                                                          "",
                                                                                                          "        inherit drawableAt (location') on (canvas')",
                                                                                                          "        var theWidth: Number:= dimension'.x",
                                                                                                          "",
                                                                                                          "        // Width of the object",
                                                                                                          "        method width -> Number {theWidth}",
                                                                                                          "        var theHeight: Number:= dimension'.y",
                                                                                                          "",
                                                                                                          "        // Height of the object",
                                                                                                          "        method height -> Number {theHeight}",
                                                                                                          "        ",
                                                                                                          "        method size -> Point {theWidth @ theHeight}",
                                                                                                          "",
                                                                                                          "        // whether the object contains locn",
                                                                                                          "        // Only checks whether is in the bounding box of the object!!",
                                                                                                          "        method contains(locn:Point)->Boolean{",
                                                                                                          "            (x <= locn.x) && (locn.x <= (x + width))",
                                                                                                          "                  && (y <= locn.y) && (locn.y <= (y + height))",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Whether bounding box of object overlaps bounding box of other",
                                                                                                          "        method overlaps (other:Graphic2D) -> Boolean {",
                                                                                                          "            def itemleft = other.x",
                                                                                                          "            def itemright = other.x + other.width",
                                                                                                          "            def itemtop = other.y",
                                                                                                          "            def itembottom = other.y + other.height",
                                                                                                          "            def disjoint: Boolean = ((x + width) < itemleft) || (itemright < x)",
                                                                                                          "                  || ((y + height) < itemtop) || (itembottom < y)",
                                                                                                          "            !disjoint",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of the object",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"drawable2D object at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class resizable2DAt (location': Point) size (dimensions': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // abstract class for 2 dimensional objects that can be resized.",
                                                                                                          "",
                                                                                                          "        inherit drawable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "",
                                                                                                          "        // Reset width of object to w",
                                                                                                          "        method width:= (w: Number) -> Done {",
                                                                                                          "            theWidth := w",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset height of object to h",
                                                                                                          "        method height := (h: Number) -> Done {",
                                                                                                          "            theHeight := h",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset size of object to w x h",
                                                                                                          "        method size:= (dimensions: Point) -> Done {",
                                                                                                          "            width := dimensions.x",
                                                                                                          "            height := dimensions.y",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of object",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Resizable2D object at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class framedRectAt (location': Point) size (dimensions': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // class to generate framed rectangle at (x',y') with size dimensions'",
                                                                                                          "        // created on canvas'",
                                                                                                          "",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // Draw the framed rectangle on the canvas",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.strokeStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.strokeRect (x, y, width, height)",
                                                                                                          "            ctx.restore",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return description of framed rectangle",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FramedRect at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class filledRectAt (location': Point) size (dimensions': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "          ",
                                                                                                          "        // class to generate filled rectangle at (x', y') with size width' x height'",
                                                                                                          "        // created on canvas'",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // Draw filled rectangle on the canvas",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.fillStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.fillRect (x, y, width, height)",
                                                                                                          "            ctx.restore",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of the filled rectangle",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FilledRect at ({x}, {y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class framedOvalAt (location': Point) size (dimensions': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // class to generate framed oval at (x',y') with size width' x height'",
                                                                                                          "        // created on canvas'",
                                                                                                          "",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // draw framed oval on canvas",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.beginPath",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.translate (x + width / 2, y + height / 2)",
                                                                                                          "            ctx.scale (width / 2, height / 2)",
                                                                                                          "            ctx.arc (0, 0, 1, 0, 2 * pi)",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.strokeStyle := \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.stroke",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.closePath",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // string representation of oval",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FramedOval at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class filledOvalAt (location': Point) size (dimensions': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // class to generate filled oval at (x',y') with size width' x height'",
                                                                                                          "        // created on canvas'",
                                                                                                          "",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // Draw filled oval on canvas",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.beginPath",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.translate (x + width / 2, y + height / 2)",
                                                                                                          "            ctx.scale (width / 2, height / 2)",
                                                                                                          "            ctx.arc (0, 0, 1, 0, 2*pi)",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.fillStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.fill",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.closePath",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // string representation of oval",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FilledOval at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class framedArcAt (location': Point) size (dimensions': Point)",
                                                                                                          "          from (startAngle: Number) to (endAngle: Number)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // class to generate framed arc at (x',y') with size width' x height'",
                                                                                                          "        // from startAngle radians to endAngle radians created on canvas'",
                                                                                                          "        // Note that angle 0 is in direction of positive x axis and increases in",
                                                                                                          "        // angles go clockwise.",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // Draw framed arc",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.beginPath",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.translate (x + width / 2, y + height / 2)",
                                                                                                          "            ctx.scale (width / 2, height / 2)",
                                                                                                          "            if (startAngle <= endAngle) then {",
                                                                                                          "                ctx.arc (0, 0, 1, (startAngle * pi) / 180, (endAngle * pi) / 180)",
                                                                                                          "            } else {",
                                                                                                          "                ctx.arc (0, 0, 1, (endAngle * pi) / 180, (startAngle * pi) / 180)",
                                                                                                          "            }",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.strokeStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.stroke",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.closePath",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // String representation of framed arc",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FramedArc at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color} going \"++",
                                                                                                          "                  \"from {startAngle} degrees to {endAngle} degrees\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class filledArcAt (location': Point) size (dimensions': Point)",
                                                                                                          "          from (startAngle: Number) to (endAngle: Number)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // class to generate filled arc at (x',y') with size width' x height'",
                                                                                                          "        // from startAngle degrees to endAngle degrees created on canvas'",
                                                                                                          "        // Note that angle 0 is in direction of positive x axis and increases in",
                                                                                                          "        // angles go clockwise.",
                                                                                                          "",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // Draw filled arc on canvas",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.beginPath",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.translate (x + width / 2, y + height / 2)",
                                                                                                          "            ctx.scale (width / 2, height / 2)",
                                                                                                          "            if (startAngle <= endAngle) then {",
                                                                                                          "                ctx.arc (0, 0, 1, (startAngle * pi) / 180, (endAngle * pi) / 180)",
                                                                                                          "            } else {",
                                                                                                          "                ctx.arc (0, 0, 1, (endAngle * pi) / 180, (startAngle * pi) / 180)",
                                                                                                          "            }",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.fillStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.fill",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.closePath",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // String representation of filled arc",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FilledArc at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color} going \"++",
                                                                                                          "                  \"from {startAngle} degrees to {endAngle} degrees\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "//type DrawableImageFactory = {",
                                                                                                          "    // type of factory for creating images on canvas",
                                                                                                          "",
                                                                                                          "    //at(location: Point) size (width: Number, height: Number)",
                                                                                                          "          //file(fileName: String) on (canvas: DrawingCanvas) -> Graphic2D",
                                                                                                          "",
                                                                                                          "  //  at (location: Point) dimensions (width: Number, height: Number)",
                                                                                                          "    //      url (url: String) on (canvas: DrawingCanvas) -> Graphic2D",
                                                                                                          "//}",
                                                                                                          "",
                                                                                                          "//def drawableImage: DrawableImageFactory is public = object {",
                                                                                                          "",
                                                                                                          "//  class at(location': Point)   // doesn't work - can't find image?",
                                                                                                          "//      dimensions(width': Number, height': Number)",
                                                                                                          "//      file(fileName: String)",
                                                                                                          "//      on(canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "//    // class to generate an image on canvas' at location' with size width' x height'",
                                                                                                          "//    // The image is taken from the file fileName and must be in \"png\" format.",
                                                                                                          "//",
                                                                                                          "//    inherit resizable2D.at(location')dimensions(width',height')on(canvas')",
                                                                                                          "//",
                                                                                                          "//    if (!dom.window.graceHasFile(fileName)) then {",
                                                                                                          "//      NoSuchFile.raise \"The file '{fileName}' could not be found\"",
                                                                                                          "//    }",
                                                                                                          "//",
                                                                                                          "//    def theImage = dom.document.createElement(\"img\")",
                                                                                                          "//    theImage.src:= dom.window.graceReadFile(fileName)",
                                                                                                          "//",
                                                                                                          "//    method draw(ctx: Foreign) -> Done {",
                                                                                                          "//      ctx.drawImage(theImage, x, y, width, height)",
                                                                                                          "//    }",
                                                                                                          "//",
                                                                                                          "//    method asString -> String {",
                                                                                                          "//      \"DrawableImage at ({x},{y}) \"++",
                                                                                                          "//           \"with height {height}, width {width}, \"++",
                                                                                                          "//           \"from file {fileName}\"",
                                                                                                          "//    }",
                                                                                                          "//",
                                                                                                          "//    addToCanvas(canvas')",
                                                                                                          "//  }",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class drawableImageAt (location': Point)",
                                                                                                          "          size (dimensions': Point)",
                                                                                                          "          url (url: String)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // Creates image from url and places on",
                                                                                                          "        // canvas' at location' with size width' x height'",
                                                                                                          "",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "",
                                                                                                          "        var theImage:= document.createElement(\"img\")",
                                                                                                          "        theImage.src:= url",
                                                                                                          "",
                                                                                                          "        theImage.addEventListener(\"load\", { _ ->",
                                                                                                          "            addToCanvas(canvas')",
                                                                                                          "        })",
                                                                                                          "",
                                                                                                          "        // draw the image",
                                                                                                          "        method draw(ctx: Foreign) -> Done {",
                                                                                                          "            ctx.drawImage(theImage, x, y, width, height)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of image",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"DrawableImage at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, \"++",
                                                                                                          "                  \"from url {url}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Type of factory for creating line segments",
                                                                                                          "//type LineFactory = {",
                                                                                                          "//",
                                                                                                          "//    from (start:Point) to (end:Point) on (canvas: DrawingCanvas) -> Line",
                                                                                                          "//    // Creates a line from start to end on canvas",
                                                                                                          "//",
                                                                                                          "//    from (pt:Point) length (len:Number) direction (radians:Number)",
                                                                                                          "//          on (canvas:DrawingCanvas) -> Line",
                                                                                                          "//    // Creates a line from pt, of length len, in direction radians, on canvas",
                                                                                                          "//}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class lineFrom (start': Point) to (end': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Line {",
                                                                                                          "        // Create a line from start' to end' on canvas'",
                                                                                                          "        inherit drawableAt (start') on (canvas')",
                                                                                                          "",
                                                                                                          "        var theEnd: Point:= end'",
                                                                                                          "",
                                                                                                          "        method start -> Point {",
                                                                                                          "            // position of start of line",
                                                                                                          "",
                                                                                                          "            location",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method end -> Point {",
                                                                                                          "            // position of end of line",
                                                                                                          "",
                                                                                                          "            theEnd",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        method start := (newStart: Point) -> Done {",
                                                                                                          "            // set start of line",
                                                                                                          "",
                                                                                                          "            location := newStart",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method end := (newEnd: Point) -> Done {",
                                                                                                          "            // Set end of line",
                                                                                                          "",
                                                                                                          "            theEnd := newEnd",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method setEndPoints (newStart: Point,newEnd: Point) -> Done {",
                                                                                                          "            // Set start and end of line",
                                                                                                          "",
                                                                                                          "            start := newStart",
                                                                                                          "            end := newEnd",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            // Draw the line on the canvas",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.strokeStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.beginPath",
                                                                                                          "            ctx.moveTo (location.x, location.y)",
                                                                                                          "            ctx.lineTo (theEnd.x, theEnd.y)",
                                                                                                          "            ctx.stroke",
                                                                                                          "            ctx.restore",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method moveBy (dx: Number, dy: Number) -> Done {",
                                                                                                          "            // Moves the line by (dx, dy)",
                                                                                                          "",
                                                                                                          "            location := location + (dx @ dy)  //.translate(dx,dy)",
                                                                                                          "            theEnd:= theEnd + (dx @ dy) //.translate(dx,dy)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method moveTo (newLocn:Point) -> Done {",
                                                                                                          "            // Moves this object to newLocn",
                                                                                                          "",
                                                                                                          "            def dx: Number = (newLocn - location).x",
                                                                                                          "            def dy: Number = (newLocn - location).y",
                                                                                                          "            location := newLocn",
                                                                                                          "            theEnd := theEnd + (dx @ dy)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "        method dist2 (v: Point, w: Point) -> Number is confidential {",
                                                                                                          "            // answers the square of the distance between v and w",
                                                                                                          "            ((v.x - w.x) ^ 2) + ((v.y - w.y) ^ 2)",
                                                                                                          "",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method distToSegmentSquared (p: Point, v: Point, w: Point) -> Number",
                                                                                                          "              is confidential {",
                                                                                                          "            // returns the square of the distance between p and the line through v and w",
                                                                                                          "",
                                                                                                          "            var l2: Number:= dist2 (v, w)",
                                                                                                          "            if (l2 == 0) then {return dist2 (p, v)}",
                                                                                                          "            var t: Number:= ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2",
                                                                                                          "            if (t < 0) then {return dist2 (p, v)}",
                                                                                                          "            if (t > 1) then {return dist2 (p, w)}",
                                                                                                          "            dist2 (p, ( (v.x + t * (w.x - v.x)) @",
                                                                                                          "                  (v.y + t * (w.y - v.y) )))",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method distToSegment (p: Point, v: Point, w: Point) -> Number {",
                                                                                                          "            // Return the distance from p to the line through v and w",
                                                                                                          "            math.sqrt (distToSegmentSquared (p, v, w))",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method contains(pt:Point) -> Boolean {",
                                                                                                          "            // Answers whether the line contains pt.  Returns true if pt is within",
                                                                                                          "            // 2 pixels of the line",
                                                                                                          "",
                                                                                                          "            def tolerance: Number = 2",
                                                                                                          "            distToSegment(pt,start,end) < tolerance",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            // Answers a string representation of this line",
                                                                                                          "            \"Line from {start} to {end} with color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class lineFrom (pt: Point) length (len: Number) direction (radians: Number)",
                                                                                                          "          on (canvas':DrawingCanvas) -> Line {",
                                                                                                          "        // Creates a line from pt that has length len, and in direction radians on canvas'",
                                                                                                          "",
                                                                                                          "      //  def endpt = pt + ((len * math.cos (radians)) @ (-len * math.sin (radians)))",
                                                                                                          "        inherit lineFrom (pt) to (pt + ((len * math.cos (radians)) @ ",
                                                                                                          "                                        (-len * math.sin (radians)))) on (canvas')",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class textAt (location': Point) with (contents': String)",
                                                                                                          "          on(canvas': DrawingCanvas) -> Text {",
                                                                                                          "        // class to generate text at location' on canvas' initially showing",
                                                                                                          "        // contents'",
                                                                                                          "        inherit drawableAt (location') on (canvas')",
                                                                                                          "",
                                                                                                          "        var theContents: String:= contents'",
                                                                                                          "        var fsize: Number is readable:= 10",
                                                                                                          "        var wid: Number := theContents.size * fsize / 2",
                                                                                                          "        // Return approximation of the width of the text",
                                                                                                          "        method width -> Number {",
                                                                                                          "            wid",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Draw the text",
                                                                                                          "        method draw(ctx: Foreign) -> Done {",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.font:= \"{fontSize}pt sans-serif\"",
                                                                                                          "            ctx.fillStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.fillText (contents, location.x, location.y)",
                                                                                                          "            wid := ctx.measureText(theContents).width",
                                                                                                          "            ctx.restore",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return the string held in the text item (i.e., its contents)",
                                                                                                          "        method contents -> String {",
                                                                                                          "            theContents",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset the contents to newContents",
                                                                                                          "        method contents := (newContents: String) -> Done {",
                                                                                                          "            theContents := newContents",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset the font size to size'",
                                                                                                          "        method fontSize := (size': Number) -> Done {",
                                                                                                          "            fsize := size'",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return the size of the font",
                                                                                                          "        method fontSize -> Number {",
                                                                                                          "            fsize",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of the text item",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Text at ({x},{y}) with value {contents} and color {color}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        addToCanvas(canvas')",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class textBoxWith (contents': String) -> TextBox {",
                                                                                                          "        // Create a component in window that holds the string contents'",
                                                                                                          "        // It cannot respond to user actions",
                                                                                                          "",
                                                                                                          "        inherit componentOfElementType (\"span\")",
                                                                                                          "",
                                                                                                          "        // Return string contents of the text box",
                                                                                                          "        method contents -> String {",
                                                                                                          "            self.element.textContent",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset the contents of the text box",
                                                                                                          "        method contents:= (value: String) -> Done {",
                                                                                                          "            self.element.textContent:= value",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Text representation of the text box",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"a text box showing {contents}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        contents:= contents'",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class buttonLabeled (label': String) -> Button {",
                                                                                                          "        // Creates a button with label'",
                                                                                                          "        inherit labeledWidgetOfElementType (\"button\") labeled (label')",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"a button labeled: {self.label}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "//type FieldFactory = {",
                                                                                                          "//    // Type of object that generates text fields",
                                                                                                          "//    // Text fields can respond to user actions",
                                                                                                          "//",
                                                                                                          "//    labeled (label: String) -> Input",
                                                                                                          "//    // Generates text field with initial contents given by label",
                                                                                                          "//",
                                                                                                          "//    unlabeled -> Input",
                                                                                                          "//    // Generates text field with no initial contents",
                                                                                                          "//}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class textFieldLabeled (label':String) -> TextField {",
                                                                                                          "        // Generates a text field with label'",
                                                                                                          "",
                                                                                                          "        inherit fieldOfType (\"text\") labeled (label')",
                                                                                                          "",
                                                                                                          "        method text -> String {",
                                                                                                          "            // answer the text",
                                                                                                          "            self.element.value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method text:= (value: String) -> Done {",
                                                                                                          "            // Updates the text",
                                                                                                          "            self.element.value:= value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of the text field",
                                                                                                          "        method asString -> String {",
                                                                                                          "            if (self.label == \"\") then {",
                                                                                                          "                \"a text field with {text}\"",
                                                                                                          "            } else {",
                                                                                                          "                \"a text field labeled: {self.label} with {text}\"",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class textFieldUnlabeled -> TextField {",
                                                                                                          "        // Generates a text field without initial contents",
                                                                                                          "",
                                                                                                          "        inherit textFieldLabeled \"\"",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class passwordFieldLabeled (lab: String) -> Input {",
                                                                                                          "        // Generates password field with initial contents lab",
                                                                                                          "",
                                                                                                          "        inherit textFieldLabeled (lab)",
                                                                                                          "",
                                                                                                          "        self.element.setAttribute (\"type\", \"password\")",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            // Return string representation of password field",
                                                                                                          "            if (self.label == \"\") then {",
                                                                                                          "                \"a password field\"",
                                                                                                          "            } else {",
                                                                                                          "                \"a password field labeled: {self.label}\"",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Generate an unlabeled password field",
                                                                                                          "class passwordFieldUnlabeled -> TextField {",
                                                                                                          "        inherit passwordFieldLabeled \"\"",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class numberFieldLabeled (label': String) -> NumberField {",
                                                                                                          "        // Generates a number field with initial contents label'",
                                                                                                          "",
                                                                                                          "        inherit fieldOfType(\"number\") labeled (label')",
                                                                                                          "",
                                                                                                          "        // Return the number in the field",
                                                                                                          "        method number -> Number {",
                                                                                                          "            self.element.value.asNumber",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // update the number in the field",
                                                                                                          "        method number:= (value: Number) -> Done {",
                                                                                                          "            self.element.value:= value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return description of the number field",
                                                                                                          "        method asString -> String {",
                                                                                                          "            if (self.label == \"\") then {",
                                                                                                          "                \"a number field holding {number}\"",
                                                                                                          "            } else {",
                                                                                                          "                \"a number field labeled: {self.label} holding {number}\"",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class numberFieldUnlabeled -> NumberField {",
                                                                                                          "        // Creates an unlabeled number field",
                                                                                                          "        inherit numberFieldLabeled \"\"",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "//type ChoiceFactory = {",
                                                                                                          "//    // Type of factory to generate choice boxes (pop-up menus)",
                                                                                                          "//    ",
                                                                                                          "//    optionsFrom (options: Iterable<String>) -> Choice",
                                                                                                          "//    // Creates choice box with items from options;",
                                                                                                          "//    // initially shows first item in options",
                                                                                                          "//}",
                                                                                                          "",
                                                                                                          "class selectBoxOptionsFrom(options:Sequence<String>) labeled (label':String)",
                                                                                                          "          -> Choice is confidential {",
                                                                                                          "        // Creates choice box with list of items from options; initially shows label'",
                                                                                                          "",
                                                                                                          "        inherit labeledWidgetOfElementType(\"select\") labeled(label')",
                                                                                                          "",
                                                                                                          "        def labeler:Foreign = document.createElement(\"option\")",
                                                                                                          "        labeler.value:= \"\"",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "        method labelElement -> Foreign {",
                                                                                                          "                labeler",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        self.element.appendChild(labeler)",
                                                                                                          "",
                                                                                                          "        for (options) do { name: String ->",
                                                                                                          "                def anOption: Foreign = document.createElement(\"option\")",
                                                                                                          "                anOption.value:= name",
                                                                                                          "                anOption.textContent:= name",
                                                                                                          "                self.element.appendChild(anOption)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return selected item in menu",
                                                                                                          "        method selected -> String {",
                                                                                                          "                self.element.value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Sets selected item in menu to value",
                                                                                                          "        method selected:= (value: String) -> Done {",
                                                                                                          "                self.element.value:= value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of select box",
                                                                                                          "        method asString -> String {",
                                                                                                          "                if (self.label == \"\") then {",
                                                                                                          "                    \"a select box\"",
                                                                                                          "                } else {",
                                                                                                          "                    \"a select box labeled: {self.label}\"",
                                                                                                          "                }",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class selectBoxOptionsFrom (options: Sequence<String>) -> Choice {",
                                                                                                          "        // Creates choice box with list of items from options",
                                                                                                          "        // Initially shows first item in options",
                                                                                                          "        inherit selectBoxOptionsFrom (options) labeled \"\"",
                                                                                                          "        self.element.removeChild (self.labelElement)",
                                                                                                          "    ",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "type Audio = {",
                                                                                                          "    // An audio file that can be played",
                                                                                                          "",
                                                                                                          "    source -> String        // The source URL of the audio.",
                                                                                                          "    source:= (value: String) -> Done",
                                                                                                          "    play -> Done            // Play the audio.",
                                                                                                          "    pause -> Done           // Pause playing the audio.",
                                                                                                          "    isLooping -> Boolean    // does the audio loop back to the start?",
                                                                                                          "    looping:= (value: Boolean) -> Done  // determine whether the audio will loop",
                                                                                                          "    isEnded -> Boolean      // whether the audio has finished",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class audioUrl(source': String) -> Audio {",
                                                                                                          "        // Creates an audio file from source', which is a web URL",
                                                                                                          "        def element = document.createElement(\"audio\")",
                                                                                                          "",
                                                                                                          "        element.src:= source'",
                                                                                                          "",
                                                                                                          "        if (dom.doesObject(dom.window) haveProperty(\"graceRegisterAudio\")) then {",
                                                                                                          "            dom.window.graceRegisterAudio(element)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // URL of the audio file",
                                                                                                          "        method source -> String {",
                                                                                                          "            element.src",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset the source URL of the audio file",
                                                                                                          "        method source:= (value: String) -> Done {",
                                                                                                          "            element.src:= value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Play the audio.",
                                                                                                          "        method play -> Done {",
                                                                                                          "            element.play",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Pause the audio.",
                                                                                                          "        method pause -> Done {",
                                                                                                          "            element.pause",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Whether the audio will loop back to the start when it ends.",
                                                                                                          "        method isLooping -> Boolean {",
                                                                                                          "                  element.loop",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Set whether audio loops back to start when it end",
                                                                                                          "        method looping:= (value: Boolean) -> Done {",
                                                                                                          "            element.loop:= value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Whether the audio has finished playing.",
                                                                                                          "        method isEnded -> Boolean {",
                                                                                                          "            element.ended",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // String representation of audio file",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"audio from {source}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "" ];
                                                                                                      }
                                                                                                      if (typeof global !== "undefined")
                                                                                                        global.gracecode_objectdraw = gracecode_objectdraw;
                                                                                                      if (typeof window !== "undefined")
                                                                                                        window.gracecode_objectdraw = gracecode_objectdraw;
