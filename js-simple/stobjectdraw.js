"use strict";
var___95__prelude = do_import("StandardPrelude", gracecode_StandardPrelude);
function gracecode_stobjectdraw() {
  setModuleName("stobjectdraw");
  this.definitionModule = "stobjectdraw";
  this.definitionLine = 0;
  var var_prelude = var___95__prelude;
  this.outer = var_prelude;
  var reader_stobjectdraw_outer0 = function() {
    return this.outer;
  };
  this.methods["outer"] = reader_stobjectdraw_outer0;
  setLineNumber(4);    // compilenode import
  // Import of dom as dom
  if (typeof gracecode_dom == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module dom'));
  var var_dom = do_import("dom", gracecode_dom);
  var func1 = function(argcv) {    // method dom
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dom"));
    setModuleName("stobjectdraw");
    // dom is a simple accessor - elide try ... catch
    return var_dom;
  };
  func1.paramCounts = [0];
  this.methods["dom"] = func1;
  func1.definitionLine = 4;
  func1.definitionModule = "stobjectdraw";
  func1.debug = "import";
  func1.confidential = true;
  setModuleName("stobjectdraw");
  setLineNumber(5);    // compilenode import
  // Import of math as math
  if (typeof gracecode_math == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module math'));
  var var_math = do_import("math", gracecode_math);
  var func2 = function(argcv) {    // method math
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for math"));
    setModuleName("stobjectdraw");
    // math is a simple accessor - elide try ... catch
    return var_math;
  };
  func2.paramCounts = [0];
  this.methods["math"] = func2;
  func2.definitionLine = 5;
  func2.definitionModule = "stobjectdraw";
  func2.debug = "import";
  func2.confidential = true;
  setModuleName("stobjectdraw");
  setLineNumber(6);    // compilenode import
  // Import of modules/staticTypes as st
  if (typeof gracecode_staticTypes == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module modules/staticTypes'));
  var var_st = do_import("modules/staticTypes", gracecode_staticTypes);
  var func3 = function(argcv) {    // method st
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for st"));
    setModuleName("stobjectdraw");
    // st is a simple accessor - elide try ... catch
    return var_st;
  };
  func3.paramCounts = [0];
  this.methods["st"] = func3;
  func3.definitionLine = 6;
  func3.definitionModule = "stobjectdraw";
  func3.debug = "import";
  func3.confidential = true;
  setModuleName("stobjectdraw");
  setLineNumber(2);    // compilenode identifier
  var call4 = callmethodChecked(var___95__prelude, "methods()object", [0, 1], this);
  this.superobj = call4;
  if (call4.data) this.data = call4.data;
  if (call4.hasOwnProperty('_value'))
      this._value = call4._value;
  setLineNumber(7);    // compilenode method
  var func5 = function(argcv) {    // method checker(1)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_ast = arguments[curarg];
    curarg++;
    if (argcv[0] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for checker(1)"));
    setModuleName("stobjectdraw");
    var call6 = callmethodChecked(var_st, "checker", [1], var_ast);
    return call6;
  };
  func5.paramCounts = [1];
  this.methods["checker"] = func5;
  func5.definitionLine = 7;
  func5.definitionModule = "stobjectdraw";
  setLineNumber(16);    // compilenode method
  var func7 = function(argcv) {    // method randomNumberFrom(1)to(1)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_m = arguments[curarg];
    curarg++;
    if (argcv[0] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for randomNumberFrom (arg list 1) of randomNumberFrom(1)to(1)"));
    var var_n = arguments[curarg];
    curarg++;
    if (argcv[1] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 2) of randomNumberFrom(1)to(1)"));
    // Start argument checking
    curarg = 1;
    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("argument 1 in randomNumberFrom (arg list 1), which corresponds to parameter m, does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    curarg++;
    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("argument 1 in to (arg list 2), which corresponds to parameter n, does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    curarg++;
    // End argument checking
    setModuleName("stobjectdraw");
    setLineNumber(17);    // compilenode identifier
    var call9 = callmethodChecked(var_math, "random", [0]);
    var diff13 = callmethodChecked(var_n, "-", [1], var_m);
    var prod15 = callmethodChecked(diff13, "*", [1], call9);
    var opresult17 = callmethodChecked(prod15, "+", [1], var_m);
    if (!Grace_isTrue(callmethod(var_Number, "match", [1], opresult17)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("result of method randomNumberFrom(1)to(1) does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    return opresult17;
  };
  func7.paramTypes = [];
  func7.paramTypes.push([type_Number, "m"]);
  func7.paramTypes.push([type_Number, "n"]);
  func7.paramCounts = [1, 1];
  this.methods["randomNumberFrom()to"] = func7;
  func7.definitionLine = 16;
  func7.definitionModule = "stobjectdraw";
  setLineNumber(21);    // compilenode method
  var func18 = function(argcv) {    // method randomIntFrom(1)to(1)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_m = arguments[curarg];
    curarg++;
    if (argcv[0] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for randomIntFrom (arg list 1) of randomIntFrom(1)to(1)"));
    var var_n = arguments[curarg];
    curarg++;
    if (argcv[1] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 2) of randomIntFrom(1)to(1)"));
    // Start argument checking
    curarg = 1;
    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("argument 1 in randomIntFrom (arg list 1), which corresponds to parameter m, does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    curarg++;
    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("argument 1 in to (arg list 2), which corresponds to parameter n, does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    curarg++;
    // End argument checking
    setModuleName("stobjectdraw");
    setLineNumber(22);    // compilenode identifier
    var diff23 = callmethodChecked(var_n, "-", [1], var_m);
    var opresult25 = callmethodChecked(diff23, "+", [1], new GraceNum(1));
    var call27 = callmethodChecked(var_math, "random", [0]);
    var diff32 = callmethodChecked(var_n, "-", [1], var_m);
    var opresult34 = callmethodChecked(diff32, "+", [1], new GraceNum(1));
    var prod36 = callmethodChecked(opresult34, "*", [1], call27);
    var call37 = callmethodChecked(prod36, "truncated", [0]);
    var modulus39 = callmethodChecked(call37, "%", [1], opresult25);
    var opresult41 = callmethodChecked(modulus39, "+", [1], var_m);
    if (!Grace_isTrue(callmethod(var_Number, "match", [1], opresult41)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("result of method randomIntFrom(1)to(1) does not have " + 
                callmethod(var_Number, "asString", [0])._value + "."));
    return opresult41;
  };
  func18.paramTypes = [];
  func18.paramTypes.push([type_Number, "m"]);
  func18.paramTypes.push([type_Number, "n"]);
  func18.paramCounts = [1, 1];
  this.methods["randomIntFrom()to"] = func18;
  func18.definitionLine = 21;
  func18.definitionModule = "stobjectdraw";
  setLineNumber(459);    // compilenode method
  var func42 = function(argcv) {    // method randomColor
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    if (argcv[0] !== 0)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for randomColor"));
    setModuleName("stobjectdraw");
    var call43 = callmethodChecked(var_color, "random", [0]);
    if (!Grace_isTrue(callmethod(var_Color, "match", [1], call43)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("result of method randomColor does not have " + 
                callmethod(var_Color, "asString", [0])._value + "."));
    return call43;
  };
  func42.paramCounts = [0];
  this.methods["randomColor"] = func42;
  func42.definitionLine = 459;
  func42.definitionModule = "stobjectdraw";
  setLineNumber(489);    // compilenode method
  var func44 = function(argcv) {    // method eventSource(1)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_source__39__ = arguments[curarg];
    curarg++;
    if (argcv[0] !== 1)
      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for eventSource(1)"));
    // Start argument checking
    curarg = 1;
    if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                callmethod(var_Component, "asString", [0])._value + "."));
    curarg++;
    // End argument checking
    setModuleName("stobjectdraw");
    var obj45 = Grace_allocObject(GraceObject, "stobjectdraw.eventSource");
    obj45.definitionModule = "stobjectdraw";
    obj45.definitionLine = 489;
    obj45.outer = this;
    var reader_stobjectdraw_outer46 = function() {
      return this.outer;
    };
    obj45.methods["outer"] = reader_stobjectdraw_outer46;
    var obj_init_45 = function() {
      var origSuperDepth = superDepth;
      superDepth = obj45;
      var func47 = function(argcv) {    // method asString
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        if (argcv[0] !== 0)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
        setModuleName("stobjectdraw");
        setLineNumber(495);    // compilenode string
        var string48 = new GraceString("");
        onSelf = true;
        var call50 = callmethodChecked(this, "source", [0]);
        var string52 = new GraceString("Event on ");
        var opresult54 = callmethodChecked(string52, "++", [1], call50);
        var opresult56 = callmethodChecked(opresult54, "++", [1], string48);
        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult56)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("result of method asString does not have " + 
                    callmethod(var_String, "asString", [0])._value + "."));
        return opresult56;
      };
      func47.paramCounts = [0];
      obj45.methods["asString"] = func47;
      func47.definitionLine = 494;
      func47.definitionModule = "stobjectdraw";
      setLineNumber(492);    // compilenode identifier
      obj45.data["source"] = var_source__39__;
      var reader_stobjectdraw_source57 = function() {
        return this.data["source"];
      };
      reader_stobjectdraw_source57.def = true;
      obj45.methods["source"] = reader_stobjectdraw_source57;
      if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("value of def 'source' is not of type Component"));
      superDepth = origSuperDepth;
    };
    obj_init_45.apply(obj45, []);
    setLineNumber(489);    // return value
    if (!Grace_isTrue(callmethod(var_Event, "match", [1], obj45)))
        throw new GraceExceptionPacket(TypeErrorObject,
            new GraceString("result of method eventSource(1) does not have " + 
                callmethod(var_Event, "asString", [0])._value + "."));
    return obj45;
  };
  func44.paramTypes = [];
  func44.paramTypes.push([]);
  func44.paramCounts = [1];
  this.methods["eventSource"] = func44;
  func44.definitionLine = 489;
  func44.definitionModule = "stobjectdraw";
    var func58 = function(argcv) {    // method eventSource(1     )()object
      var curarg = 1;
      var var_source__39__ = arguments[curarg];
      curarg++;
      var inheritingObject = arguments[curarg++];
      // Start argument processing
      curarg = 1;
      if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                  callmethod(var_Component, "asString", [0])._value + "."));
      curarg++;
      // End argument processing
      setModuleName("stobjectdraw");
      var returnTarget = invocationCount;
      invocationCount++;
      var obj59 = Grace_allocObject(GraceObject, "eventSource");
      obj59.definitionModule = "stobjectdraw";
      obj59.definitionLine = 489;
      var inho59 = inheritingObject;
      while (inho59.superobj) inho59 = inho59.superobj;
      inho59.superobj = obj59;
      obj59.data = inheritingObject.data;
      if (inheritingObject.hasOwnProperty('_value'))
        obj59._value = inheritingObject._value;
      obj59.outer = this;
      var reader_stobjectdraw_outer60 = function() {
        return this.outer;
      };
      obj59.methods["outer"] = reader_stobjectdraw_outer60;
      var obj_init_59 = function() {
        var origSuperDepth = superDepth;
        superDepth = obj59;
        var func61 = function(argcv) {    // method asString
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
          setModuleName("stobjectdraw");
          setLineNumber(495);    // compilenode string
          var string62 = new GraceString("");
          onSelf = true;
          var call64 = callmethodChecked(this, "source", [0]);
          var string66 = new GraceString("Event on ");
          var opresult68 = callmethodChecked(string66, "++", [1], call64);
          var opresult70 = callmethodChecked(opresult68, "++", [1], string62);
          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult70)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("result of method asString does not have " + 
                      callmethod(var_String, "asString", [0])._value + "."));
          return opresult70;
        };
        func61.paramCounts = [0];
        obj59.methods["asString"] = func61;
        func61.definitionLine = 494;
        func61.definitionModule = "stobjectdraw";
        setLineNumber(492);    // compilenode identifier
        obj59.data["source"] = var_source__39__;
        var reader_stobjectdraw_source71 = function() {
          return this.data["source"];
        };
        reader_stobjectdraw_source71.def = true;
        obj59.methods["source"] = reader_stobjectdraw_source71;
        if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("value of def 'source' is not of type Component"));
        superDepth = origSuperDepth;
      };
      obj_init_59.apply(inheritingObject, []);
      return obj59;
      };
      func58.paramTypes = [];
      func58.paramTypes.push([]);
      this.methods["eventSource()object"] = func58;
    setLineNumber(499);    // compilenode method
    var func72 = function(argcv) {    // method mouseEventSource(1)event(1)
      var returnTarget = invocationCount;
      invocationCount++;
      var curarg = 1;
      var var_source__39__ = arguments[curarg];
      curarg++;
      if (argcv[0] !== 1)
        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for mouseEventSource (arg list 1) of mouseEventSource(1)event(1)"));
      var var_event__39__ = arguments[curarg];
      curarg++;
      if (argcv[1] !== 1)
        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of mouseEventSource(1)event(1)"));
      // Start argument checking
      curarg = 1;
      if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("argument 1 in mouseEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                  callmethod(var_Component, "asString", [0])._value + "."));
      curarg++;
      if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                  callmethod(var_Foreign, "asString", [0])._value + "."));
      curarg++;
      // End argument checking
      setModuleName("stobjectdraw");
      var obj73 = Grace_allocObject(null, "stobjectdraw.mouseEventSource()event");
      obj73.definitionModule = "stobjectdraw";
      obj73.definitionLine = 499;
      obj73.outer = this;
      var reader_stobjectdraw_outer74 = function() {
        return this.outer;
      };
      obj73.methods["outer"] = reader_stobjectdraw_outer74;
      var obj_init_73 = function() {
        var origSuperDepth = superDepth;
        superDepth = obj73;
        var func75 = function(argcv) {    // method asString
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          if (argcv[0] !== 0)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
          setModuleName("stobjectdraw");
          setLineNumber(508);    // compilenode string
          var string76 = new GraceString("");
          onSelf = true;
          var call78 = callmethodChecked(this, "at", [0]);
          var string80 = new GraceString(" at ");
          onSelf = true;
          var call82 = callmethodChecked(this, "source", [0]);
          var string84 = new GraceString("Mouse event on ");
          var opresult86 = callmethodChecked(string84, "++", [1], call82);
          var opresult88 = callmethodChecked(opresult86, "++", [1], string80);
          var opresult90 = callmethodChecked(opresult88, "++", [1], call78);
          var opresult92 = callmethodChecked(opresult90, "++", [1], string76);
          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult92)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("result of method asString does not have " + 
                      callmethod(var_String, "asString", [0])._value + "."));
          return opresult92;
        };
        func75.paramCounts = [0];
        obj73.methods["asString"] = func75;
        func75.definitionLine = 507;
        func75.definitionModule = "stobjectdraw";
        setLineNumber(502);    // compilenode call
        var call93 = callmethodChecked(superDepth, "outer", [0]);
        onOuter = true;
        onSelf = true;
        var call94 = callmethodChecked(call93, "eventSource()object", [1, 1], var_source__39__, this);
        obj73.superobj = call94;
        if (call94.data) obj73.data = call94.data;
        if (call94.hasOwnProperty('_value'))
            obj73._value = call94._value;
        setLineNumber(504);    // compilenode call
        onSelf = true;
        var call95 = callmethodChecked(this, "source", [0]);
        var call96 = callmethodChecked(call95, "element", [0]);
        var call97 = callmethodChecked(call96, "offsetTop", [0]);
        var call99 = callmethodChecked(var_event__39__, "pageY", [0]);
        var diff101 = callmethodChecked(call99, "-", [1], call97);
        setLineNumber(503);    // compilenode call
        onSelf = true;
        var call103 = callmethodChecked(this, "source", [0]);
        var call104 = callmethodChecked(call103, "element", [0]);
        var call105 = callmethodChecked(call104, "offsetLeft", [0]);
        var call107 = callmethodChecked(var_event__39__, "pageX", [0]);
        var diff109 = callmethodChecked(call107, "-", [1], call105);
        var opresult111 = callmethodChecked(diff109, "@", [1], diff101);
        obj73.data["at"] = opresult111;
        var reader_stobjectdraw_at112 = function() {
          return this.data["at"];
        };
        reader_stobjectdraw_at112.def = true;
        obj73.methods["at"] = reader_stobjectdraw_at112;
        var call113 = callmethodChecked(superDepth, "outer", [0]);
        onOuter = true;
        onSelf = true;
        var call114 = callmethodChecked(call113, "Point", [0]);
        if (!Grace_isTrue(callmethod(call114, "match", [1], opresult111)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("value of def 'at' is not of type self.outer.Point"));
        superDepth = origSuperDepth;
      };
      obj_init_73.apply(obj73, []);
      setLineNumber(499);    // return value
      if (!Grace_isTrue(callmethod(var_MouseEvent, "match", [1], obj73)))
          throw new GraceExceptionPacket(TypeErrorObject,
              new GraceString("result of method mouseEventSource(1)event(1) does not have " + 
                  callmethod(var_MouseEvent, "asString", [0])._value + "."));
      return obj73;
    };
    func72.paramTypes = [];
    func72.paramTypes.push([]);
    func72.paramTypes.push([]);
    func72.paramCounts = [1, 1];
    this.methods["mouseEventSource()event"] = func72;
    func72.definitionLine = 499;
    func72.definitionModule = "stobjectdraw";
      var func115 = function(argcv) {    // method mouseEventSource(1     )event(1     )()object
        var curarg = 1;
        var var_source__39__ = arguments[curarg];
        curarg++;
        var var_event__39__ = arguments[curarg];
        curarg++;
        var inheritingObject = arguments[curarg++];
        // Start argument processing
        curarg = 1;
        if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in mouseEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                    callmethod(var_Component, "asString", [0])._value + "."));
        curarg++;
        if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                    callmethod(var_Foreign, "asString", [0])._value + "."));
        curarg++;
        // End argument processing
        setModuleName("stobjectdraw");
        var returnTarget = invocationCount;
        invocationCount++;
        var obj116 = Grace_allocObject(null, "mouseEventSource()event");
        obj116.definitionModule = "stobjectdraw";
        obj116.definitionLine = 499;
        var inho116 = inheritingObject;
        while (inho116.superobj) inho116 = inho116.superobj;
        inho116.superobj = obj116;
        obj116.data = inheritingObject.data;
        if (inheritingObject.hasOwnProperty('_value'))
          obj116._value = inheritingObject._value;
        obj116.outer = this;
        var reader_stobjectdraw_outer117 = function() {
          return this.outer;
        };
        obj116.methods["outer"] = reader_stobjectdraw_outer117;
        var obj_init_116 = function() {
          var origSuperDepth = superDepth;
          superDepth = obj116;
          var func118 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
            setModuleName("stobjectdraw");
            setLineNumber(508);    // compilenode string
            var string119 = new GraceString("");
            onSelf = true;
            var call121 = callmethodChecked(this, "at", [0]);
            var string123 = new GraceString(" at ");
            onSelf = true;
            var call125 = callmethodChecked(this, "source", [0]);
            var string127 = new GraceString("Mouse event on ");
            var opresult129 = callmethodChecked(string127, "++", [1], call125);
            var opresult131 = callmethodChecked(opresult129, "++", [1], string123);
            var opresult133 = callmethodChecked(opresult131, "++", [1], call121);
            var opresult135 = callmethodChecked(opresult133, "++", [1], string119);
            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult135)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("result of method asString does not have " + 
                        callmethod(var_String, "asString", [0])._value + "."));
            return opresult135;
          };
          func118.paramCounts = [0];
          obj116.methods["asString"] = func118;
          func118.definitionLine = 507;
          func118.definitionModule = "stobjectdraw";
          setLineNumber(502);    // compilenode call
          var call136 = callmethodChecked(superDepth, "outer", [0]);
          onOuter = true;
          onSelf = true;
          var call137 = callmethodChecked(call136, "eventSource()object", [1, 1], var_source__39__, this);
          obj116.superobj = call137;
          if (call137.data) obj116.data = call137.data;
          if (call137.hasOwnProperty('_value'))
              obj116._value = call137._value;
          setLineNumber(504);    // compilenode call
          onSelf = true;
          var call138 = callmethodChecked(this, "source", [0]);
          var call139 = callmethodChecked(call138, "element", [0]);
          var call140 = callmethodChecked(call139, "offsetTop", [0]);
          var call142 = callmethodChecked(var_event__39__, "pageY", [0]);
          var diff144 = callmethodChecked(call142, "-", [1], call140);
          setLineNumber(503);    // compilenode call
          onSelf = true;
          var call146 = callmethodChecked(this, "source", [0]);
          var call147 = callmethodChecked(call146, "element", [0]);
          var call148 = callmethodChecked(call147, "offsetLeft", [0]);
          var call150 = callmethodChecked(var_event__39__, "pageX", [0]);
          var diff152 = callmethodChecked(call150, "-", [1], call148);
          var opresult154 = callmethodChecked(diff152, "@", [1], diff144);
          obj116.data["at"] = opresult154;
          var reader_stobjectdraw_at155 = function() {
            return this.data["at"];
          };
          reader_stobjectdraw_at155.def = true;
          obj116.methods["at"] = reader_stobjectdraw_at155;
          var call156 = callmethodChecked(superDepth, "outer", [0]);
          onOuter = true;
          onSelf = true;
          var call157 = callmethodChecked(call156, "Point", [0]);
          if (!Grace_isTrue(callmethod(call157, "match", [1], opresult154)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("value of def 'at' is not of type self.outer.Point"));
          superDepth = origSuperDepth;
        };
        obj_init_116.apply(inheritingObject, []);
        return obj116;
        };
        func115.paramTypes = [];
        func115.paramTypes.push([]);
        func115.paramTypes.push([]);
        this.methods["mouseEventSource()event()object"] = func115;
      setLineNumber(512);    // compilenode method
      var func158 = function(argcv) {    // method keyEventSource(1)event(1)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_source__39__ = arguments[curarg];
        curarg++;
        if (argcv[0] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for keyEventSource (arg list 1) of keyEventSource(1)event(1)"));
        var var_event__39__ = arguments[curarg];
        curarg++;
        if (argcv[1] !== 1)
          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of keyEventSource(1)event(1)"));
        // Start argument checking
        curarg = 1;
        if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                    callmethod(var_Component, "asString", [0])._value + "."));
        curarg++;
        if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                    callmethod(var_Foreign, "asString", [0])._value + "."));
        curarg++;
        // End argument checking
        setModuleName("stobjectdraw");
        var obj159 = Grace_allocObject(null, "stobjectdraw.keyEventSource()event");
        obj159.definitionModule = "stobjectdraw";
        obj159.definitionLine = 512;
        obj159.outer = this;
        var reader_stobjectdraw_outer160 = function() {
          return this.outer;
        };
        obj159.methods["outer"] = reader_stobjectdraw_outer160;
        var obj_init_159 = function() {
          var origSuperDepth = superDepth;
          superDepth = obj159;
          var func161 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            if (argcv[0] !== 0)
              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
            setModuleName("stobjectdraw");
            setLineNumber(520);    // compilenode string
            var string162 = new GraceString("");
            onSelf = true;
            var call164 = callmethodChecked(this, "code", [0]);
            var string166 = new GraceString(" for key-code ");
            onSelf = true;
            var call168 = callmethodChecked(this, "source", [0]);
            var string170 = new GraceString("Event on ");
            var opresult172 = callmethodChecked(string170, "++", [1], call168);
            var opresult174 = callmethodChecked(opresult172, "++", [1], string166);
            var opresult176 = callmethodChecked(opresult174, "++", [1], call164);
            var opresult178 = callmethodChecked(opresult176, "++", [1], string162);
            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult178)))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("result of method asString does not have " + 
                        callmethod(var_String, "asString", [0])._value + "."));
            return opresult178;
          };
          func161.paramCounts = [0];
          obj159.methods["asString"] = func161;
          func161.definitionLine = 519;
          func161.definitionModule = "stobjectdraw";
          setLineNumber(514);    // compilenode call
          var call179 = callmethodChecked(superDepth, "outer", [0]);
          onOuter = true;
          onSelf = true;
          var call180 = callmethodChecked(call179, "eventSource()object", [1, 1], var_source__39__, this);
          obj159.superobj = call180;
          if (call180.data) obj159.data = call180.data;
          if (call180.hasOwnProperty('_value'))
              obj159._value = call180._value;
          setLineNumber(515);    // compilenode identifier
          var call181 = callmethodChecked(var_event__39__, "which", [0]);
          obj159.data["code"] = call181;
          var reader_stobjectdraw_code182 = function() {
            return this.data["code"];
          };
          reader_stobjectdraw_code182.def = true;
          obj159.methods["code"] = reader_stobjectdraw_code182;
          if (!Grace_isTrue(callmethod(var_Number, "match", [1], call181)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("value of def 'code' is not of type Number"));
          superDepth = origSuperDepth;
        };
        obj_init_159.apply(obj159, []);
        setLineNumber(512);    // return value
        if (!Grace_isTrue(callmethod(var_KeyEvent, "match", [1], obj159)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("result of method keyEventSource(1)event(1) does not have " + 
                    callmethod(var_KeyEvent, "asString", [0])._value + "."));
        return obj159;
      };
      func158.paramTypes = [];
      func158.paramTypes.push([]);
      func158.paramTypes.push([]);
      func158.paramCounts = [1, 1];
      this.methods["keyEventSource()event"] = func158;
      func158.definitionLine = 512;
      func158.definitionModule = "stobjectdraw";
        var func183 = function(argcv) {    // method keyEventSource(1     )event(1     )()object
          var curarg = 1;
          var var_source__39__ = arguments[curarg];
          curarg++;
          var var_event__39__ = arguments[curarg];
          curarg++;
          var inheritingObject = arguments[curarg++];
          // Start argument processing
          curarg = 1;
          if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                      callmethod(var_Component, "asString", [0])._value + "."));
          curarg++;
          if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                      callmethod(var_Foreign, "asString", [0])._value + "."));
          curarg++;
          // End argument processing
          setModuleName("stobjectdraw");
          var returnTarget = invocationCount;
          invocationCount++;
          var obj184 = Grace_allocObject(null, "keyEventSource()event");
          obj184.definitionModule = "stobjectdraw";
          obj184.definitionLine = 512;
          var inho184 = inheritingObject;
          while (inho184.superobj) inho184 = inho184.superobj;
          inho184.superobj = obj184;
          obj184.data = inheritingObject.data;
          if (inheritingObject.hasOwnProperty('_value'))
            obj184._value = inheritingObject._value;
          obj184.outer = this;
          var reader_stobjectdraw_outer185 = function() {
            return this.outer;
          };
          obj184.methods["outer"] = reader_stobjectdraw_outer185;
          var obj_init_184 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj184;
            var func186 = function(argcv) {    // method asString
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
              setModuleName("stobjectdraw");
              setLineNumber(520);    // compilenode string
              var string187 = new GraceString("");
              onSelf = true;
              var call189 = callmethodChecked(this, "code", [0]);
              var string191 = new GraceString(" for key-code ");
              onSelf = true;
              var call193 = callmethodChecked(this, "source", [0]);
              var string195 = new GraceString("Event on ");
              var opresult197 = callmethodChecked(string195, "++", [1], call193);
              var opresult199 = callmethodChecked(opresult197, "++", [1], string191);
              var opresult201 = callmethodChecked(opresult199, "++", [1], call189);
              var opresult203 = callmethodChecked(opresult201, "++", [1], string187);
              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult203)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method asString does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              return opresult203;
            };
            func186.paramCounts = [0];
            obj184.methods["asString"] = func186;
            func186.definitionLine = 519;
            func186.definitionModule = "stobjectdraw";
            setLineNumber(514);    // compilenode call
            var call204 = callmethodChecked(superDepth, "outer", [0]);
            onOuter = true;
            onSelf = true;
            var call205 = callmethodChecked(call204, "eventSource()object", [1, 1], var_source__39__, this);
            obj184.superobj = call205;
            if (call205.data) obj184.data = call205.data;
            if (call205.hasOwnProperty('_value'))
                obj184._value = call205._value;
            setLineNumber(515);    // compilenode identifier
            var call206 = callmethodChecked(var_event__39__, "which", [0]);
            obj184.data["code"] = call206;
            var reader_stobjectdraw_code207 = function() {
              return this.data["code"];
            };
            reader_stobjectdraw_code207.def = true;
            obj184.methods["code"] = reader_stobjectdraw_code207;
            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call206)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("value of def 'code' is not of type Number"));
            superDepth = origSuperDepth;
          };
          obj_init_184.apply(inheritingObject, []);
          return obj184;
          };
          func183.paramTypes = [];
          func183.paramTypes.push([]);
          func183.paramTypes.push([]);
          this.methods["keyEventSource()event()object"] = func183;
        setLineNumber(544);    // compilenode method
        var func208 = function(argcv) {    // method componentFromElement(1)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_element__39__ = arguments[curarg];
          curarg++;
          if (argcv[0] !== 1)
            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for componentFromElement(1)"));
          setModuleName("stobjectdraw");
          var obj209 = Grace_allocObject(GraceObject, "stobjectdraw.componentFromElement");
          obj209.definitionModule = "stobjectdraw";
          obj209.definitionLine = 544;
          obj209.outer = this;
          var reader_stobjectdraw_outer210 = function() {
            return this.outer;
          };
          obj209.methods["outer"] = reader_stobjectdraw_outer210;
          var obj_init_209 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj209;
            var func211 = function(argcv) {    // method width
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
              setModuleName("stobjectdraw");
              setLineNumber(549);    // compilenode call
              onSelf = true;
              var call212 = callmethodChecked(this, "element", [0]);
              var call213 = callmethodChecked(call212, "width", [0]);
              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call213)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method width does not have " + 
                          callmethod(var_Number, "asString", [0])._value + "."));
              return call213;
            };
            func211.paramCounts = [0];
            obj209.methods["width"] = func211;
            func211.definitionLine = 548;
            func211.definitionModule = "stobjectdraw";
            var func214 = function(argcv) {    // method height
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
              setModuleName("stobjectdraw");
              setLineNumber(554);    // compilenode call
              onSelf = true;
              var call215 = callmethodChecked(this, "element", [0]);
              var call216 = callmethodChecked(call215, "height", [0]);
              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call216)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method height does not have " + 
                          callmethod(var_Number, "asString", [0])._value + "."));
              return call216;
            };
            func214.paramCounts = [0];
            obj209.methods["height"] = func214;
            func214.definitionLine = 553;
            func214.definitionModule = "stobjectdraw";
            var func217 = function(argcv) {    // method size
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              if (argcv[0] !== 0)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
              setModuleName("stobjectdraw");
              setLineNumber(559);    // compilenode call
              onSelf = true;
              var call218 = callmethodChecked(this, "element", [0]);
              var call219 = callmethodChecked(call218, "height", [0]);
              onSelf = true;
              var call221 = callmethodChecked(this, "element", [0]);
              var call222 = callmethodChecked(call221, "width", [0]);
              var opresult224 = callmethodChecked(call222, "@", [1], call219);
              setLineNumber(558);    // compilenode call
              var call225 = callmethodChecked(superDepth, "outer", [0]);
              onOuter = true;
              onSelf = true;
              var call226 = callmethodChecked(call225, "Point", [0]);
              setLineNumber(559);    // return value
              if (!Grace_isTrue(callmethod(call226, "match", [1], opresult224)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method size does not have " + 
                          callmethod(call226, "asString", [0])._value + "."));
              return opresult224;
            };
            func217.paramCounts = [0];
            obj209.methods["size"] = func217;
            func217.definitionLine = 558;
            func217.definitionModule = "stobjectdraw";
            var func227 = function(argcv) {    // method on(1)do(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_event__39__ = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)do(1)"));
              var var_f = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of on(1)do(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(563);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in on (arg list 1), which corresponds to parameter event', does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              setLineNumber(564);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in do (arg list 2), which corresponds to parameter f, does not have " + 
                          callmethod(var_Procedure, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("stobjectdraw");
              setLineNumber(565);    // compilenode call
              onSelf = true;
              var call228 = callmethodChecked(this, "element", [0]);
              var call229 = callmethodChecked(call228, "addEventListener", [2], var_event__39__, var_f);
              setLineNumber(566);    // return value
              if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method on(1)do(1) does not have " + 
                          callmethod(var_Done, "asString", [0])._value + "."));
              return var_done;
            };
            func227.paramTypes = [];
            func227.paramTypes.push([type_String, "event'"]);
            func227.paramTypes.push([]);
            func227.confidential = true;
            func227.paramCounts = [1, 1];
            obj209.methods["on()do"] = func227;
            func227.definitionLine = 563;
            func227.definitionModule = "stobjectdraw";
            var func230 = function(argcv) {    // method on(1)withPointDo(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_kind = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)withPointDo(1)"));
              var var_f = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withPointDo (arg list 2) of on(1)withPointDo(1)"));
              // Start argument checking
              curarg = 1;
              setLineNumber(570);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                          callmethod(var_String, "asString", [0])._value + "."));
              curarg++;
              setLineNumber(571);    // compilenode identifier
              if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("argument 1 in withPointDo (arg list 2), which corresponds to parameter f, does not have " + 
                          callmethod(var_MouseResponse, "asString", [0])._value + "."));
              curarg++;
              // End argument checking
              setModuleName("stobjectdraw");
              setLineNumber(572);    // compilenode block
              var block231 = new GraceBlock(this, 572, 1);
              setLineNumber(1);    // compilenode identifier
              block231.real = function(var_event__39__) {
                setLineNumber(573);    // compilenode identifier
                onSelf = true;
                var call232 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                var call233 = callmethodChecked(var_f, "apply", [1], call232);
                return call233;
              };
              onSelf = true;
              var call234 = callmethodChecked(this, "on()do", [1, 1], var_kind, block231);
              setLineNumber(572);    // return value
              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call234)))
                  throw new GraceExceptionPacket(TypeErrorObject,
                      new GraceString("result of method on(1)withPointDo(1) does not have " + 
                          callmethod(var_Done, "asString", [0])._value + "."));
              return call234;
            };
            func230.paramTypes = [];
            func230.paramTypes.push([type_String, "kind"]);
            func230.paramTypes.push([]);
            func230.confidential = true;
            func230.paramCounts = [1, 1];
            obj209.methods["on()withPointDo"] = func230;
            func230.definitionLine = 570;
            func230.definitionModule = "stobjectdraw";
            var func235 = function(argcv) {    // method mouseEventSource(1)event(1)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_source__39__ = arguments[curarg];
              curarg++;
              if (argcv[0] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for mouseEventSource (arg list 1) of mouseEventSource(1)event(1)"));
              var var_event__39__ = arguments[curarg];
              curarg++;
              if (argcv[1] !== 1)
                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of mouseEventSource(1)event(1)"));
              setModuleName("stobjectdraw");
              setLineNumber(578);    // compilenode object
              var obj236 = Grace_allocObject(GraceObject, "stobjectdraw.componentFromElement.mouseEventSource()event");
              obj236.definitionModule = "stobjectdraw";
              obj236.definitionLine = 578;
              obj236.outer = this;
              var reader_stobjectdraw_outer237 = function() {
                return this.outer;
              };
              obj236.methods["outer"] = reader_stobjectdraw_outer237;
              var obj_init_236 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj236;
                var func238 = function(argcv) {    // method asString
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  if (argcv[0] !== 0)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                  setModuleName("stobjectdraw");
                  setLineNumber(582);    // compilenode string
                  var string239 = new GraceString("");
                  onSelf = true;
                  var call241 = callmethodChecked(this, "at", [0]);
                  var string243 = new GraceString(" at ");
                  onSelf = true;
                  var call245 = callmethodChecked(this, "source", [0]);
                  var string247 = new GraceString("Mouse event on ");
                  var opresult249 = callmethodChecked(string247, "++", [1], call245);
                  var opresult251 = callmethodChecked(opresult249, "++", [1], string243);
                  var opresult253 = callmethodChecked(opresult251, "++", [1], call241);
                  var opresult255 = callmethodChecked(opresult253, "++", [1], string239);
                  return opresult255;
                };
                func238.paramCounts = [0];
                obj236.methods["asString"] = func238;
                func238.definitionLine = 582;
                func238.definitionModule = "stobjectdraw";
                setLineNumber(579);    // compilenode identifier
                obj236.data["source"] = var_source__39__;
                var reader_stobjectdraw_source256 = function() {
                  return this.data["source"];
                };
                reader_stobjectdraw_source256.def = true;
                obj236.methods["source"] = reader_stobjectdraw_source256;
                setLineNumber(581);    // compilenode call
                onSelf = true;
                var call257 = callmethodChecked(this, "source", [0]);
                var call258 = callmethodChecked(call257, "element", [0]);
                var call259 = callmethodChecked(call258, "offsetTop", [0]);
                var call261 = callmethodChecked(var_event__39__, "pageY", [0]);
                var diff263 = callmethodChecked(call261, "-", [1], call259);
                setLineNumber(580);    // compilenode call
                onSelf = true;
                var call265 = callmethodChecked(this, "source", [0]);
                var call266 = callmethodChecked(call265, "element", [0]);
                var call267 = callmethodChecked(call266, "offsetLeft", [0]);
                var call269 = callmethodChecked(var_event__39__, "pageX", [0]);
                var diff271 = callmethodChecked(call269, "-", [1], call267);
                var opresult273 = callmethodChecked(diff271, "@", [1], diff263);
                obj236.data["at"] = opresult273;
                var reader_stobjectdraw_at274 = function() {
                  return this.data["at"];
                };
                reader_stobjectdraw_at274.def = true;
                obj236.methods["at"] = reader_stobjectdraw_at274;
                superDepth = origSuperDepth;
              };
              obj_init_236.apply(obj236, []);
              return obj236;
            };
            func235.confidential = true;
            func235.paramCounts = [1, 1];
            obj209.methods["mouseEventSource()event"] = func235;
            func235.definitionLine = 578;
            func235.definitionModule = "stobjectdraw";
              var func275 = function(argcv) {    // method mouseEventSource(1     )event(1     )()object
                var curarg = 1;
                var var_source__39__ = arguments[curarg];
                curarg++;
                var var_event__39__ = arguments[curarg];
                curarg++;
                var inheritingObject = arguments[curarg++];
                // Start argument processing
                curarg = 1;
                curarg++;
                curarg++;
                // End argument processing
                setModuleName("stobjectdraw");
                var returnTarget = invocationCount;
                invocationCount++;
                var obj276 = Grace_allocObject(GraceObject, "mouseEventSource()event");
                obj276.definitionModule = "stobjectdraw";
                obj276.definitionLine = 578;
                var inho276 = inheritingObject;
                while (inho276.superobj) inho276 = inho276.superobj;
                inho276.superobj = obj276;
                obj276.data = inheritingObject.data;
                if (inheritingObject.hasOwnProperty('_value'))
                  obj276._value = inheritingObject._value;
                obj276.outer = this;
                var reader_stobjectdraw_outer277 = function() {
                  return this.outer;
                };
                obj276.methods["outer"] = reader_stobjectdraw_outer277;
                var obj_init_276 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj276;
                  var func278 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                    setModuleName("stobjectdraw");
                    setLineNumber(582);    // compilenode string
                    var string279 = new GraceString("");
                    onSelf = true;
                    var call281 = callmethodChecked(this, "at", [0]);
                    var string283 = new GraceString(" at ");
                    onSelf = true;
                    var call285 = callmethodChecked(this, "source", [0]);
                    var string287 = new GraceString("Mouse event on ");
                    var opresult289 = callmethodChecked(string287, "++", [1], call285);
                    var opresult291 = callmethodChecked(opresult289, "++", [1], string283);
                    var opresult293 = callmethodChecked(opresult291, "++", [1], call281);
                    var opresult295 = callmethodChecked(opresult293, "++", [1], string279);
                    return opresult295;
                  };
                  func278.paramCounts = [0];
                  obj276.methods["asString"] = func278;
                  func278.definitionLine = 582;
                  func278.definitionModule = "stobjectdraw";
                  setLineNumber(579);    // compilenode identifier
                  obj276.data["source"] = var_source__39__;
                  var reader_stobjectdraw_source296 = function() {
                    return this.data["source"];
                  };
                  reader_stobjectdraw_source296.def = true;
                  obj276.methods["source"] = reader_stobjectdraw_source296;
                  setLineNumber(581);    // compilenode call
                  onSelf = true;
                  var call297 = callmethodChecked(this, "source", [0]);
                  var call298 = callmethodChecked(call297, "element", [0]);
                  var call299 = callmethodChecked(call298, "offsetTop", [0]);
                  var call301 = callmethodChecked(var_event__39__, "pageY", [0]);
                  var diff303 = callmethodChecked(call301, "-", [1], call299);
                  setLineNumber(580);    // compilenode call
                  onSelf = true;
                  var call305 = callmethodChecked(this, "source", [0]);
                  var call306 = callmethodChecked(call305, "element", [0]);
                  var call307 = callmethodChecked(call306, "offsetLeft", [0]);
                  var call309 = callmethodChecked(var_event__39__, "pageX", [0]);
                  var diff311 = callmethodChecked(call309, "-", [1], call307);
                  var opresult313 = callmethodChecked(diff311, "@", [1], diff303);
                  obj276.data["at"] = opresult313;
                  var reader_stobjectdraw_at314 = function() {
                    return this.data["at"];
                  };
                  reader_stobjectdraw_at314.def = true;
                  obj276.methods["at"] = reader_stobjectdraw_at314;
                  superDepth = origSuperDepth;
                };
                obj_init_276.apply(inheritingObject, []);
                return obj276;
                };
                func275.confidential = true;
                obj209.methods["mouseEventSource()event()object"] = func275;
              var func315 = function(argcv) {    // method onMouseClickDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseClickDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(586);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseClickDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("stobjectdraw");
                setLineNumber(588);    // compilenode vardec
                var var_lastDown;
                setLineNumber(590);    // compilenode string
                var string316 = new GraceString("mousedown");
                var block317 = new GraceBlock(this, 590, 1);
                setLineNumber(0);    // compilenode string
                var string318 = new GraceString("event'");
                var call319 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                var call320 = callmethodChecked(call319, "new", [1], string318);
                var call321 = callmethodChecked(var_prelude, "AndPattern", [0]);
                var call322 = callmethodChecked(call321, "new", [2], call320, var_Foreign);
                block317.pattern = call322;
                setLineNumber(590);    // compilenode identifier
                block317.paramTypes = [var_Foreign];
                block317.real = function(var_event__39__) {
                  setLineNumber(591);    // compilenode identifier
                  var call323 = callmethodChecked(var_event__39__, "timeStamp", [0]);
                  var_lastDown = call323;
                  return GraceDone;
                };
                onSelf = true;
                var call324 = callmethodChecked(this, "on()do", [1, 1], string316, block317);
                setLineNumber(594);    // compilenode string
                var string325 = new GraceString("click");
                var block326 = new GraceBlock(this, 594, 1);
                setLineNumber(0);    // compilenode string
                var string327 = new GraceString("event'");
                var call328 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                var call329 = callmethodChecked(call328, "new", [1], string327);
                var call330 = callmethodChecked(var_prelude, "AndPattern", [0]);
                var call331 = callmethodChecked(call330, "new", [2], call329, var_Foreign);
                block326.pattern = call331;
                setLineNumber(594);    // compilenode identifier
                block326.paramTypes = [var_Foreign];
                block326.real = function(var_event__39__) {
                  var if332 = GraceDone;
                  setLineNumber(595);    // compilenode identifier
                  var call335 = callmethodChecked(var_event__39__, "timeStamp", [0]);
                  var diff337 = callmethodChecked(call335, "-", [1], var_lastDown);
                  var opresult339 = callmethodChecked(diff337, "\u2264", [1], var_maxClickTime);
                  if (Grace_isTrue(opresult339)) {
                    setLineNumber(596);    // compilenode identifier
                    onSelf = true;
                    var call340 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                    var call341 = callmethodChecked(var_f, "apply", [1], call340);
                    if332 = call341;
                  }
                  return if332;
                };
                onSelf = true;
                var call342 = callmethodChecked(this, "on()do", [1, 1], string325, block326);
                setLineNumber(594);    // return value
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call342)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseClickDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call342;
              };
              func315.paramTypes = [];
              func315.paramTypes.push([]);
              func315.paramCounts = [1];
              obj209.methods["onMouseClickDo"] = func315;
              func315.definitionLine = 586;
              func315.definitionModule = "stobjectdraw";
              var func343 = function(argcv) {    // method onMousePressDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMousePressDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(602);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMousePressDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("stobjectdraw");
                setLineNumber(603);    // compilenode string
                var string344 = new GraceString("mousedown");
                onSelf = true;
                var call345 = callmethodChecked(this, "on()withPointDo", [1, 1], string344, var_f);
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call345)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMousePressDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call345;
              };
              func343.paramTypes = [];
              func343.paramTypes.push([]);
              func343.paramCounts = [1];
              obj209.methods["onMousePressDo"] = func343;
              func343.definitionLine = 602;
              func343.definitionModule = "stobjectdraw";
              var func346 = function(argcv) {    // method onMouseReleaseDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseReleaseDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(607);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseReleaseDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("stobjectdraw");
                setLineNumber(608);    // compilenode string
                var string347 = new GraceString("mouseup");
                onSelf = true;
                var call348 = callmethodChecked(this, "on()withPointDo", [1, 1], string347, var_f);
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call348)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseReleaseDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call348;
              };
              func346.paramTypes = [];
              func346.paramTypes.push([]);
              func346.paramCounts = [1];
              obj209.methods["onMouseReleaseDo"] = func346;
              func346.definitionLine = 607;
              func346.definitionModule = "stobjectdraw";
              var func349 = function(argcv) {    // method onMouseMoveDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseMoveDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(612);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseMoveDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("stobjectdraw");
                setLineNumber(613);    // compilenode string
                var string350 = new GraceString("mousemove");
                var block351 = new GraceBlock(this, 613, 1);
                setLineNumber(1);    // compilenode identifier
                block351.real = function(var_event__39__) {
                  var if352 = GraceDone;
                  var if353 = GraceDone;
                  setLineNumber(614);    // compilenode string
                  var string354 = new GraceString("buttons");
                  var call355 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], var_event__39__, string354);
                  if (Grace_isTrue(call355)) {
                    setLineNumber(615);    // compilenode identifier
                    var call357 = callmethodChecked(var_event__39__, "buttons", [0]);
                    var opresult359 = callmethodChecked(call357, "==", [1], new GraceNum(0));
                    if353 = opresult359;
                  } else {
                    setLineNumber(617);    // compilenode identifier
                    var call361 = callmethodChecked(var_event__39__, "which", [0]);
                    var opresult363 = callmethodChecked(call361, "==", [1], new GraceNum(0));
                    if353 = opresult363;
                  }
                  if (Grace_isTrue(if353)) {
                    setLineNumber(619);    // compilenode identifier
                    onSelf = true;
                    var call364 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                    var call365 = callmethodChecked(var_f, "apply", [1], call364);
                    if352 = call365;
                  }
                  return if352;
                };
                onSelf = true;
                var call366 = callmethodChecked(this, "on()do", [1, 1], string350, block351);
                setLineNumber(613);    // return value
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call366)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseMoveDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call366;
              };
              func349.paramTypes = [];
              func349.paramTypes.push([]);
              func349.paramCounts = [1];
              obj209.methods["onMouseMoveDo"] = func349;
              func349.definitionLine = 612;
              func349.definitionModule = "stobjectdraw";
              var func367 = function(argcv) {    // method onMouseDragDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseDragDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(625);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseDragDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("stobjectdraw");
                setLineNumber(626);    // compilenode string
                var string368 = new GraceString("mousemove");
                var block369 = new GraceBlock(this, 626, 1);
                setLineNumber(1);    // compilenode identifier
                block369.real = function(var_event__39__) {
                  var if370 = GraceDone;
                  var if371 = GraceDone;
                  setLineNumber(627);    // compilenode string
                  var string372 = new GraceString("buttons");
                  var call373 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], var_event__39__, string372);
                  if (Grace_isTrue(call373)) {
                    setLineNumber(628);    // compilenode identifier
                    var call375 = callmethodChecked(var_event__39__, "buttons", [0]);
                    var opresult377 = callmethodChecked(call375, "==", [1], new GraceNum(1));
                    if371 = opresult377;
                  } else {
                    setLineNumber(630);    // compilenode identifier
                    var call379 = callmethodChecked(var_event__39__, "which", [0]);
                    var opresult381 = callmethodChecked(call379, "==", [1], new GraceNum(1));
                    if371 = opresult381;
                  }
                  if (Grace_isTrue(if371)) {
                    setLineNumber(632);    // compilenode identifier
                    onSelf = true;
                    var call382 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                    var call383 = callmethodChecked(var_f, "apply", [1], call382);
                    if370 = call383;
                  }
                  return if370;
                };
                onSelf = true;
                var call384 = callmethodChecked(this, "on()do", [1, 1], string368, block369);
                setLineNumber(626);    // return value
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call384)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseDragDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call384;
              };
              func367.paramTypes = [];
              func367.paramTypes.push([]);
              func367.paramCounts = [1];
              obj209.methods["onMouseDragDo"] = func367;
              func367.definitionLine = 625;
              func367.definitionModule = "stobjectdraw";
              var func385 = function(argcv) {    // method onMouseEnterDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnterDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(638);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseEnterDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("stobjectdraw");
                setLineNumber(639);    // compilenode string
                var string386 = new GraceString("mouseover");
                var block387 = new GraceBlock(this, 639, 1);
                setLineNumber(1);    // compilenode identifier
                block387.real = function(var_event__39__) {
                  setLineNumber(640);    // compilenode identifier
                  var call388 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                  var var_from = call388;
                  var if389 = GraceDone;
                  setLineNumber(649);    // compilenode block
                  var block390 = new GraceBlock(this, 649, 0);
                  block390.real = function() {
                    onSelf = true;
                    var call391 = callmethodChecked(this, "element", [0]);
                    var call392 = callmethodChecked(call391, "contains", [1], var_from);
                    var call393 = callmethodChecked(call392, "prefix!", [0]);
                    return call393;
                  };
                  var call396 = callmethodChecked(var_dom, "noObject", [0]);
                  var opresult398 = callmethodChecked(call396, "==", [1], var_from);
                  var opresult400 = callmethodChecked(opresult398, "||", [1], block390);
                  if (Grace_isTrue(opresult400)) {
                    setLineNumber(652);    // compilenode identifier
                    onSelf = true;
                    var call401 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                    var call402 = callmethodChecked(var_f, "apply", [1], call401);
                    if389 = call402;
                  }
                  return if389;
                };
                onSelf = true;
                var call403 = callmethodChecked(this, "on()do", [1, 1], string386, block387);
                setLineNumber(639);    // return value
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call403)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseEnterDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call403;
              };
              func385.paramTypes = [];
              func385.paramTypes.push([]);
              func385.paramCounts = [1];
              obj209.methods["onMouseEnterDo"] = func385;
              func385.definitionLine = 638;
              func385.definitionModule = "stobjectdraw";
              var func404 = function(argcv) {    // method onMouseExitDo(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_f = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExitDo(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(658);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in onMouseExitDo (arg list 1), which corresponds to parameter f, does not have " + 
                            callmethod(var_MouseResponse, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("stobjectdraw");
                setLineNumber(659);    // compilenode string
                var string405 = new GraceString("mouseout");
                var block406 = new GraceBlock(this, 659, 1);
                setLineNumber(1);    // compilenode identifier
                block406.real = function(var_event__39__) {
                  setLineNumber(660);    // compilenode identifier
                  var call407 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                  var var_to = call407;
                  var if408 = GraceDone;
                  setLineNumber(662);    // compilenode block
                  var block409 = new GraceBlock(this, 662, 0);
                  block409.real = function() {
                    onSelf = true;
                    var call410 = callmethodChecked(this, "element", [0]);
                    var call411 = callmethodChecked(call410, "contains", [1], var_to);
                    var call412 = callmethodChecked(call411, "prefix!", [0]);
                    return call412;
                  };
                  var call415 = callmethodChecked(var_dom, "noObject", [0]);
                  var opresult417 = callmethodChecked(call415, "==", [1], var_to);
                  var opresult419 = callmethodChecked(opresult417, "||", [1], block409);
                  if (Grace_isTrue(opresult419)) {
                    setLineNumber(663);    // compilenode identifier
                    onSelf = true;
                    var call420 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                    var call421 = callmethodChecked(var_f, "apply", [1], call420);
                    if408 = call421;
                  }
                  return if408;
                };
                onSelf = true;
                var call422 = callmethodChecked(this, "on()do", [1, 1], string405, block406);
                setLineNumber(659);    // return value
                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call422)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method onMouseExitDo(1) does not have " + 
                            callmethod(var_Done, "asString", [0])._value + "."));
                return call422;
              };
              func404.paramTypes = [];
              func404.paramTypes.push([]);
              func404.paramCounts = [1];
              obj209.methods["onMouseExitDo"] = func404;
              func404.definitionLine = 658;
              func404.definitionModule = "stobjectdraw";
              var func423 = function(argcv) {    // method eventSource(1)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_source__39__ = arguments[curarg];
                curarg++;
                if (argcv[0] !== 1)
                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for eventSource(1)"));
                // Start argument checking
                curarg = 1;
                setLineNumber(670);    // compilenode identifier
                if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                            callmethod(var_Component, "asString", [0])._value + "."));
                curarg++;
                // End argument checking
                setModuleName("stobjectdraw");
                var obj424 = Grace_allocObject(GraceObject, "stobjectdraw.componentFromElement.eventSource");
                obj424.definitionModule = "stobjectdraw";
                obj424.definitionLine = 670;
                obj424.outer = this;
                var reader_stobjectdraw_outer425 = function() {
                  return this.outer;
                };
                obj424.methods["outer"] = reader_stobjectdraw_outer425;
                var obj_init_424 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj424;
                  var func426 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                    setModuleName("stobjectdraw");
                    setLineNumber(676);    // compilenode string
                    var string427 = new GraceString("");
                    onSelf = true;
                    var call429 = callmethodChecked(this, "source", [0]);
                    var string431 = new GraceString("Event on ");
                    var opresult433 = callmethodChecked(string431, "++", [1], call429);
                    var opresult435 = callmethodChecked(opresult433, "++", [1], string427);
                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult435)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method asString does not have " + 
                                callmethod(var_String, "asString", [0])._value + "."));
                    return opresult435;
                  };
                  func426.paramCounts = [0];
                  obj424.methods["asString"] = func426;
                  func426.definitionLine = 675;
                  func426.definitionModule = "stobjectdraw";
                  setLineNumber(673);    // compilenode identifier
                  obj424.data["source"] = var_source__39__;
                  var reader_stobjectdraw_source436 = function() {
                    return this.data["source"];
                  };
                  reader_stobjectdraw_source436.def = true;
                  obj424.methods["source"] = reader_stobjectdraw_source436;
                  if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("value of def 'source' is not of type Component"));
                  superDepth = origSuperDepth;
                };
                obj_init_424.apply(obj424, []);
                setLineNumber(670);    // return value
                if (!Grace_isTrue(callmethod(var_Event, "match", [1], obj424)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method eventSource(1) does not have " + 
                            callmethod(var_Event, "asString", [0])._value + "."));
                return obj424;
              };
              func423.paramTypes = [];
              func423.paramTypes.push([]);
              func423.paramCounts = [1];
              obj209.methods["eventSource"] = func423;
              func423.definitionLine = 670;
              func423.definitionModule = "stobjectdraw";
                var func437 = function(argcv) {    // method eventSource(1     )()object
                  var curarg = 1;
                  var var_source__39__ = arguments[curarg];
                  curarg++;
                  var inheritingObject = arguments[curarg++];
                  // Start argument processing
                  curarg = 1;
                  if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                              callmethod(var_Component, "asString", [0])._value + "."));
                  curarg++;
                  // End argument processing
                  setModuleName("stobjectdraw");
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var obj438 = Grace_allocObject(GraceObject, "eventSource");
                  obj438.definitionModule = "stobjectdraw";
                  obj438.definitionLine = 670;
                  var inho438 = inheritingObject;
                  while (inho438.superobj) inho438 = inho438.superobj;
                  inho438.superobj = obj438;
                  obj438.data = inheritingObject.data;
                  if (inheritingObject.hasOwnProperty('_value'))
                    obj438._value = inheritingObject._value;
                  obj438.outer = this;
                  var reader_stobjectdraw_outer439 = function() {
                    return this.outer;
                  };
                  obj438.methods["outer"] = reader_stobjectdraw_outer439;
                  var obj_init_438 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj438;
                    var func440 = function(argcv) {    // method asString
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                      setModuleName("stobjectdraw");
                      setLineNumber(676);    // compilenode string
                      var string441 = new GraceString("");
                      onSelf = true;
                      var call443 = callmethodChecked(this, "source", [0]);
                      var string445 = new GraceString("Event on ");
                      var opresult447 = callmethodChecked(string445, "++", [1], call443);
                      var opresult449 = callmethodChecked(opresult447, "++", [1], string441);
                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult449)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method asString does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      return opresult449;
                    };
                    func440.paramCounts = [0];
                    obj438.methods["asString"] = func440;
                    func440.definitionLine = 675;
                    func440.definitionModule = "stobjectdraw";
                    setLineNumber(673);    // compilenode identifier
                    obj438.data["source"] = var_source__39__;
                    var reader_stobjectdraw_source450 = function() {
                      return this.data["source"];
                    };
                    reader_stobjectdraw_source450.def = true;
                    obj438.methods["source"] = reader_stobjectdraw_source450;
                    if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("value of def 'source' is not of type Component"));
                    superDepth = origSuperDepth;
                  };
                  obj_init_438.apply(inheritingObject, []);
                  return obj438;
                  };
                  func437.paramTypes = [];
                  func437.paramTypes.push([]);
                  obj209.methods["eventSource()object"] = func437;
                var func451 = function(argcv) {    // method keyEventSource(1)event(1)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_source__39__ = arguments[curarg];
                  curarg++;
                  if (argcv[0] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for keyEventSource (arg list 1) of keyEventSource(1)event(1)"));
                  var var_event__39__ = arguments[curarg];
                  curarg++;
                  if (argcv[1] !== 1)
                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of keyEventSource(1)event(1)"));
                  // Start argument checking
                  curarg = 1;
                  setLineNumber(680);    // compilenode identifier
                  if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                              callmethod(var_Component, "asString", [0])._value + "."));
                  curarg++;
                  if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                              callmethod(var_Foreign, "asString", [0])._value + "."));
                  curarg++;
                  // End argument checking
                  setModuleName("stobjectdraw");
                  var obj452 = Grace_allocObject(null, "stobjectdraw.componentFromElement.keyEventSource()event");
                  obj452.definitionModule = "stobjectdraw";
                  obj452.definitionLine = 680;
                  obj452.outer = this;
                  var reader_stobjectdraw_outer453 = function() {
                    return this.outer;
                  };
                  obj452.methods["outer"] = reader_stobjectdraw_outer453;
                  var obj_init_452 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj452;
                    var func454 = function(argcv) {    // method asString
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                      setModuleName("stobjectdraw");
                      setLineNumber(688);    // compilenode string
                      var string455 = new GraceString("");
                      onSelf = true;
                      var call457 = callmethodChecked(this, "code", [0]);
                      var string459 = new GraceString(" for key-code ");
                      onSelf = true;
                      var call461 = callmethodChecked(this, "source", [0]);
                      var string463 = new GraceString("Event on ");
                      var opresult465 = callmethodChecked(string463, "++", [1], call461);
                      var opresult467 = callmethodChecked(opresult465, "++", [1], string459);
                      var opresult469 = callmethodChecked(opresult467, "++", [1], call457);
                      var opresult471 = callmethodChecked(opresult469, "++", [1], string455);
                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult471)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method asString does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      return opresult471;
                    };
                    func454.paramCounts = [0];
                    obj452.methods["asString"] = func454;
                    func454.definitionLine = 687;
                    func454.definitionModule = "stobjectdraw";
                    setLineNumber(682);    // compilenode call
                    var call472 = callmethodChecked(superDepth, "outer", [0]);
                    onOuter = true;
                    onSelf = true;
                    var call473 = callmethodChecked(call472, "eventSource()object", [1, 1], var_source__39__, this);
                    obj452.superobj = call473;
                    if (call473.data) obj452.data = call473.data;
                    if (call473.hasOwnProperty('_value'))
                        obj452._value = call473._value;
                    setLineNumber(683);    // compilenode identifier
                    var call474 = callmethodChecked(var_event__39__, "which", [0]);
                    obj452.data["code"] = call474;
                    var reader_stobjectdraw_code475 = function() {
                      return this.data["code"];
                    };
                    reader_stobjectdraw_code475.def = true;
                    obj452.methods["code"] = reader_stobjectdraw_code475;
                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call474)))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("value of def 'code' is not of type Number"));
                    superDepth = origSuperDepth;
                  };
                  obj_init_452.apply(obj452, []);
                  setLineNumber(680);    // return value
                  if (!Grace_isTrue(callmethod(var_KeyEvent, "match", [1], obj452)))
                      throw new GraceExceptionPacket(TypeErrorObject,
                          new GraceString("result of method keyEventSource(1)event(1) does not have " + 
                              callmethod(var_KeyEvent, "asString", [0])._value + "."));
                  return obj452;
                };
                func451.paramTypes = [];
                func451.paramTypes.push([]);
                func451.paramTypes.push([]);
                func451.paramCounts = [1, 1];
                obj209.methods["keyEventSource()event"] = func451;
                func451.definitionLine = 680;
                func451.definitionModule = "stobjectdraw";
                  var func476 = function(argcv) {    // method keyEventSource(1     )event(1     )()object
                    var curarg = 1;
                    var var_source__39__ = arguments[curarg];
                    curarg++;
                    var var_event__39__ = arguments[curarg];
                    curarg++;
                    var inheritingObject = arguments[curarg++];
                    // Start argument processing
                    curarg = 1;
                    if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                                callmethod(var_Component, "asString", [0])._value + "."));
                    curarg++;
                    if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                                callmethod(var_Foreign, "asString", [0])._value + "."));
                    curarg++;
                    // End argument processing
                    setModuleName("stobjectdraw");
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var obj477 = Grace_allocObject(null, "keyEventSource()event");
                    obj477.definitionModule = "stobjectdraw";
                    obj477.definitionLine = 680;
                    var inho477 = inheritingObject;
                    while (inho477.superobj) inho477 = inho477.superobj;
                    inho477.superobj = obj477;
                    obj477.data = inheritingObject.data;
                    if (inheritingObject.hasOwnProperty('_value'))
                      obj477._value = inheritingObject._value;
                    obj477.outer = this;
                    var reader_stobjectdraw_outer478 = function() {
                      return this.outer;
                    };
                    obj477.methods["outer"] = reader_stobjectdraw_outer478;
                    var obj_init_477 = function() {
                      var origSuperDepth = superDepth;
                      superDepth = obj477;
                      var func479 = function(argcv) {    // method asString
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        if (argcv[0] !== 0)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                        setModuleName("stobjectdraw");
                        setLineNumber(688);    // compilenode string
                        var string480 = new GraceString("");
                        onSelf = true;
                        var call482 = callmethodChecked(this, "code", [0]);
                        var string484 = new GraceString(" for key-code ");
                        onSelf = true;
                        var call486 = callmethodChecked(this, "source", [0]);
                        var string488 = new GraceString("Event on ");
                        var opresult490 = callmethodChecked(string488, "++", [1], call486);
                        var opresult492 = callmethodChecked(opresult490, "++", [1], string484);
                        var opresult494 = callmethodChecked(opresult492, "++", [1], call482);
                        var opresult496 = callmethodChecked(opresult494, "++", [1], string480);
                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult496)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method asString does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        return opresult496;
                      };
                      func479.paramCounts = [0];
                      obj477.methods["asString"] = func479;
                      func479.definitionLine = 687;
                      func479.definitionModule = "stobjectdraw";
                      setLineNumber(682);    // compilenode call
                      var call497 = callmethodChecked(superDepth, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call498 = callmethodChecked(call497, "eventSource()object", [1, 1], var_source__39__, this);
                      obj477.superobj = call498;
                      if (call498.data) obj477.data = call498.data;
                      if (call498.hasOwnProperty('_value'))
                          obj477._value = call498._value;
                      setLineNumber(683);    // compilenode identifier
                      var call499 = callmethodChecked(var_event__39__, "which", [0]);
                      obj477.data["code"] = call499;
                      var reader_stobjectdraw_code500 = function() {
                        return this.data["code"];
                      };
                      reader_stobjectdraw_code500.def = true;
                      obj477.methods["code"] = reader_stobjectdraw_code500;
                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call499)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("value of def 'code' is not of type Number"));
                      superDepth = origSuperDepth;
                    };
                    obj_init_477.apply(inheritingObject, []);
                    return obj477;
                    };
                    func476.paramTypes = [];
                    func476.paramTypes.push([]);
                    func476.paramTypes.push([]);
                    obj209.methods["keyEventSource()event()object"] = func476;
                  var func501 = function(argcv) {    // method on(1)withKeyDo(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_kind = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)withKeyDo(1)"));
                    var var_f = arguments[curarg];
                    curarg++;
                    if (argcv[1] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withKeyDo (arg list 2) of on(1)withKeyDo(1)"));
                    // Start argument checking
                    curarg = 1;
                    setLineNumber(694);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                                callmethod(var_String, "asString", [0])._value + "."));
                    curarg++;
                    setLineNumber(695);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in withKeyDo (arg list 2), which corresponds to parameter f, does not have " + 
                                callmethod(var_KeyResponse, "asString", [0])._value + "."));
                    curarg++;
                    // End argument checking
                    setModuleName("stobjectdraw");
                    setLineNumber(696);    // compilenode block
                    var block502 = new GraceBlock(this, 696, 1);
                    setLineNumber(1);    // compilenode identifier
                    block502.real = function(var_event__39__) {
                      setLineNumber(697);    // compilenode identifier
                      onSelf = true;
                      var call503 = callmethodChecked(this, "keyEventSource()event", [1, 1], this, var_event__39__);
                      var call504 = callmethodChecked(var_f, "apply", [1], call503);
                      return call504;
                    };
                    onSelf = true;
                    var call505 = callmethodChecked(this, "on()do", [1, 1], var_kind, block502);
                    setLineNumber(696);    // return value
                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call505)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method on(1)withKeyDo(1) does not have " + 
                                callmethod(var_Done, "asString", [0])._value + "."));
                    return call505;
                  };
                  func501.paramTypes = [];
                  func501.paramTypes.push([type_String, "kind"]);
                  func501.paramTypes.push([]);
                  func501.confidential = true;
                  func501.paramCounts = [1, 1];
                  obj209.methods["on()withKeyDo"] = func501;
                  func501.definitionLine = 694;
                  func501.definitionModule = "stobjectdraw";
                  var func506 = function(argcv) {    // method onKeyPressDo(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_f = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyPressDo(1)"));
                    // Start argument checking
                    curarg = 1;
                    setLineNumber(702);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in onKeyPressDo (arg list 1), which corresponds to parameter f, does not have " + 
                                callmethod(var_KeyResponse, "asString", [0])._value + "."));
                    curarg++;
                    // End argument checking
                    setModuleName("stobjectdraw");
                    setLineNumber(703);    // compilenode string
                    var string507 = new GraceString("keydown");
                    onSelf = true;
                    var call508 = callmethodChecked(this, "on()withKeyDo", [1, 1], string507, var_f);
                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call508)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method onKeyPressDo(1) does not have " + 
                                callmethod(var_Done, "asString", [0])._value + "."));
                    return call508;
                  };
                  func506.paramTypes = [];
                  func506.paramTypes.push([]);
                  func506.paramCounts = [1];
                  obj209.methods["onKeyPressDo"] = func506;
                  func506.definitionLine = 702;
                  func506.definitionModule = "stobjectdraw";
                  var func509 = function(argcv) {    // method onKeyReleaseDo(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_f = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyReleaseDo(1)"));
                    // Start argument checking
                    curarg = 1;
                    setLineNumber(707);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in onKeyReleaseDo (arg list 1), which corresponds to parameter f, does not have " + 
                                callmethod(var_KeyResponse, "asString", [0])._value + "."));
                    curarg++;
                    // End argument checking
                    setModuleName("stobjectdraw");
                    setLineNumber(708);    // compilenode string
                    var string510 = new GraceString("keyup");
                    onSelf = true;
                    var call511 = callmethodChecked(this, "on()withKeyDo", [1, 1], string510, var_f);
                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call511)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method onKeyReleaseDo(1) does not have " + 
                                callmethod(var_Done, "asString", [0])._value + "."));
                    return call511;
                  };
                  func509.paramTypes = [];
                  func509.paramTypes.push([]);
                  func509.paramCounts = [1];
                  obj209.methods["onKeyReleaseDo"] = func509;
                  func509.definitionLine = 707;
                  func509.definitionModule = "stobjectdraw";
                  var func512 = function(argcv) {    // method onKeyTypeDo(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_f = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyTypeDo(1)"));
                    // Start argument checking
                    curarg = 1;
                    setLineNumber(712);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in onKeyTypeDo (arg list 1), which corresponds to parameter f, does not have " + 
                                callmethod(var_KeyResponse, "asString", [0])._value + "."));
                    curarg++;
                    // End argument checking
                    setModuleName("stobjectdraw");
                    setLineNumber(713);    // compilenode string
                    var string513 = new GraceString("keypress");
                    onSelf = true;
                    var call514 = callmethodChecked(this, "on()withKeyDo", [1, 1], string513, var_f);
                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call514)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method onKeyTypeDo(1) does not have " + 
                                callmethod(var_Done, "asString", [0])._value + "."));
                    return call514;
                  };
                  func512.paramTypes = [];
                  func512.paramTypes.push([]);
                  func512.paramCounts = [1];
                  obj209.methods["onKeyTypeDo"] = func512;
                  func512.definitionLine = 712;
                  func512.definitionModule = "stobjectdraw";
                  var func515 = function(argcv) {    // method isFlexible
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isFlexible"));
                    setModuleName("stobjectdraw");
                    setLineNumber(718);    // compilenode call
                    onSelf = true;
                    var call517 = callmethodChecked(this, "element", [0]);
                    var call518 = callmethodChecked(call517, "style", [0]);
                    var call519 = callmethodChecked(call518, "flexGrow", [0]);
                    var call520 = callmethodChecked(call519, "asNumber", [0]);
                    var opresult522 = callmethodChecked(call520, ">", [1], new GraceNum(0));
                    if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult522)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method isFlexible does not have " + 
                                callmethod(var_Boolean, "asString", [0])._value + "."));
                    return opresult522;
                  };
                  func515.paramCounts = [0];
                  obj209.methods["isFlexible"] = func515;
                  func515.definitionLine = 717;
                  func515.definitionModule = "stobjectdraw";
                  var func523 = function(argcv) {    // method flexible:=(1)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_value = arguments[curarg];
                    curarg++;
                    if (argcv[0] !== 1)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for flexible:=(1)"));
                    // Start argument checking
                    curarg = 1;
                    setLineNumber(722);    // compilenode identifier
                    if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("argument 1 in flexible:= (arg list 1), which corresponds to parameter value, does not have " + 
                                callmethod(var_Boolean, "asString", [0])._value + "."));
                    curarg++;
                    // End argument checking
                    setModuleName("stobjectdraw");
                    var if524 = GraceDone;
                    setLineNumber(723);    // compilenode identifier
                    if (Grace_isTrue(var_value)) {
                      setLineNumber(724);    // compilenode num
                      if524 = new GraceNum(1);
                    } else {
                      setLineNumber(726);    // compilenode num
                      if524 = new GraceNum(0);
                    }
                    setLineNumber(723);    // compilenode call
                    onSelf = true;
                    var call525 = callmethodChecked(this, "element", [0]);
                    var call526 = callmethodChecked(call525, "style", [0]);
                    var call527 = callmethodChecked(call526, "flexGrow:=", [1], if524);
                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call527)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method flexible:=(1) does not have " + 
                                callmethod(var_Done, "asString", [0])._value + "."));
                    return call527;
                  };
                  func523.paramTypes = [];
                  func523.paramTypes.push([type_Boolean, "value"]);
                  func523.paramCounts = [1];
                  obj209.methods["flexible:="] = func523;
                  func523.definitionLine = 722;
                  func523.definitionModule = "stobjectdraw";
                  var func528 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    if (argcv[0] !== 0)
                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                    setModuleName("stobjectdraw");
                    setLineNumber(732);    // compilenode string
                    var string529 = new GraceString("a component");
                    if (!Grace_isTrue(callmethod(var_String, "match", [1], string529)))
                        throw new GraceExceptionPacket(TypeErrorObject,
                            new GraceString("result of method asString does not have " + 
                                callmethod(var_String, "asString", [0])._value + "."));
                    return string529;
                  };
                  func528.paramCounts = [0];
                  obj209.methods["asString"] = func528;
                  func528.definitionLine = 731;
                  func528.definitionModule = "stobjectdraw";
                  setLineNumber(545);    // compilenode identifier
                  obj209.data["element"] = var_element__39__;
                  var reader_stobjectdraw_element530 = function() {
                    return this.data["element"];
                  };
                  reader_stobjectdraw_element530.def = true;
                  obj209.methods["element"] = reader_stobjectdraw_element530;
                  superDepth = origSuperDepth;
                };
                obj_init_209.apply(obj209, []);
                setLineNumber(544);    // return value
                if (!Grace_isTrue(callmethod(var_Component, "match", [1], obj209)))
                    throw new GraceExceptionPacket(TypeErrorObject,
                        new GraceString("result of method componentFromElement(1) does not have " + 
                            callmethod(var_Component, "asString", [0])._value + "."));
                return obj209;
              };
              func208.paramCounts = [1];
              this.methods["componentFromElement"] = func208;
              func208.definitionLine = 544;
              func208.definitionModule = "stobjectdraw";
                var func531 = function(argcv) {    // method componentFromElement(1     )()object
                  var curarg = 1;
                  var var_element__39__ = arguments[curarg];
                  curarg++;
                  var inheritingObject = arguments[curarg++];
                  // Start argument processing
                  curarg = 1;
                  curarg++;
                  // End argument processing
                  setModuleName("stobjectdraw");
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var obj532 = Grace_allocObject(GraceObject, "componentFromElement");
                  obj532.definitionModule = "stobjectdraw";
                  obj532.definitionLine = 544;
                  var inho532 = inheritingObject;
                  while (inho532.superobj) inho532 = inho532.superobj;
                  inho532.superobj = obj532;
                  obj532.data = inheritingObject.data;
                  if (inheritingObject.hasOwnProperty('_value'))
                    obj532._value = inheritingObject._value;
                  obj532.outer = this;
                  var reader_stobjectdraw_outer533 = function() {
                    return this.outer;
                  };
                  obj532.methods["outer"] = reader_stobjectdraw_outer533;
                  var obj_init_532 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj532;
                    var func534 = function(argcv) {    // method width
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                      setModuleName("stobjectdraw");
                      setLineNumber(549);    // compilenode call
                      onSelf = true;
                      var call535 = callmethodChecked(this, "element", [0]);
                      var call536 = callmethodChecked(call535, "width", [0]);
                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call536)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method width does not have " + 
                                  callmethod(var_Number, "asString", [0])._value + "."));
                      return call536;
                    };
                    func534.paramCounts = [0];
                    obj532.methods["width"] = func534;
                    func534.definitionLine = 548;
                    func534.definitionModule = "stobjectdraw";
                    var func537 = function(argcv) {    // method height
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                      setModuleName("stobjectdraw");
                      setLineNumber(554);    // compilenode call
                      onSelf = true;
                      var call538 = callmethodChecked(this, "element", [0]);
                      var call539 = callmethodChecked(call538, "height", [0]);
                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call539)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method height does not have " + 
                                  callmethod(var_Number, "asString", [0])._value + "."));
                      return call539;
                    };
                    func537.paramCounts = [0];
                    obj532.methods["height"] = func537;
                    func537.definitionLine = 553;
                    func537.definitionModule = "stobjectdraw";
                    var func540 = function(argcv) {    // method size
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      if (argcv[0] !== 0)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                      setModuleName("stobjectdraw");
                      setLineNumber(559);    // compilenode call
                      onSelf = true;
                      var call541 = callmethodChecked(this, "element", [0]);
                      var call542 = callmethodChecked(call541, "height", [0]);
                      onSelf = true;
                      var call544 = callmethodChecked(this, "element", [0]);
                      var call545 = callmethodChecked(call544, "width", [0]);
                      var opresult547 = callmethodChecked(call545, "@", [1], call542);
                      setLineNumber(558);    // compilenode call
                      var call548 = callmethodChecked(superDepth, "outer", [0]);
                      onOuter = true;
                      onSelf = true;
                      var call549 = callmethodChecked(call548, "Point", [0]);
                      setLineNumber(559);    // return value
                      if (!Grace_isTrue(callmethod(call549, "match", [1], opresult547)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method size does not have " + 
                                  callmethod(call549, "asString", [0])._value + "."));
                      return opresult547;
                    };
                    func540.paramCounts = [0];
                    obj532.methods["size"] = func540;
                    func540.definitionLine = 558;
                    func540.definitionModule = "stobjectdraw";
                    var func550 = function(argcv) {    // method on(1)do(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_event__39__ = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)do(1)"));
                      var var_f = arguments[curarg];
                      curarg++;
                      if (argcv[1] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of on(1)do(1)"));
                      // Start argument checking
                      curarg = 1;
                      setLineNumber(563);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in on (arg list 1), which corresponds to parameter event', does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      curarg++;
                      setLineNumber(564);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in do (arg list 2), which corresponds to parameter f, does not have " + 
                                  callmethod(var_Procedure, "asString", [0])._value + "."));
                      curarg++;
                      // End argument checking
                      setModuleName("stobjectdraw");
                      setLineNumber(565);    // compilenode call
                      onSelf = true;
                      var call551 = callmethodChecked(this, "element", [0]);
                      var call552 = callmethodChecked(call551, "addEventListener", [2], var_event__39__, var_f);
                      setLineNumber(566);    // return value
                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method on(1)do(1) does not have " + 
                                  callmethod(var_Done, "asString", [0])._value + "."));
                      return var_done;
                    };
                    func550.paramTypes = [];
                    func550.paramTypes.push([type_String, "event'"]);
                    func550.paramTypes.push([]);
                    func550.confidential = true;
                    func550.paramCounts = [1, 1];
                    obj532.methods["on()do"] = func550;
                    func550.definitionLine = 563;
                    func550.definitionModule = "stobjectdraw";
                    var func553 = function(argcv) {    // method on(1)withPointDo(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_kind = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)withPointDo(1)"));
                      var var_f = arguments[curarg];
                      curarg++;
                      if (argcv[1] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withPointDo (arg list 2) of on(1)withPointDo(1)"));
                      // Start argument checking
                      curarg = 1;
                      setLineNumber(570);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      curarg++;
                      setLineNumber(571);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in withPointDo (arg list 2), which corresponds to parameter f, does not have " + 
                                  callmethod(var_MouseResponse, "asString", [0])._value + "."));
                      curarg++;
                      // End argument checking
                      setModuleName("stobjectdraw");
                      setLineNumber(572);    // compilenode block
                      var block554 = new GraceBlock(this, 572, 1);
                      setLineNumber(1);    // compilenode identifier
                      block554.real = function(var_event__39__) {
                        setLineNumber(573);    // compilenode identifier
                        onSelf = true;
                        var call555 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                        var call556 = callmethodChecked(var_f, "apply", [1], call555);
                        return call556;
                      };
                      onSelf = true;
                      var call557 = callmethodChecked(this, "on()do", [1, 1], var_kind, block554);
                      setLineNumber(572);    // return value
                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call557)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method on(1)withPointDo(1) does not have " + 
                                  callmethod(var_Done, "asString", [0])._value + "."));
                      return call557;
                    };
                    func553.paramTypes = [];
                    func553.paramTypes.push([type_String, "kind"]);
                    func553.paramTypes.push([]);
                    func553.confidential = true;
                    func553.paramCounts = [1, 1];
                    obj532.methods["on()withPointDo"] = func553;
                    func553.definitionLine = 570;
                    func553.definitionModule = "stobjectdraw";
                    var func558 = function(argcv) {    // method mouseEventSource(1)event(1)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_source__39__ = arguments[curarg];
                      curarg++;
                      if (argcv[0] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for mouseEventSource (arg list 1) of mouseEventSource(1)event(1)"));
                      var var_event__39__ = arguments[curarg];
                      curarg++;
                      if (argcv[1] !== 1)
                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of mouseEventSource(1)event(1)"));
                      setModuleName("stobjectdraw");
                      setLineNumber(578);    // compilenode object
                      var obj559 = Grace_allocObject(GraceObject, "mouseEventSource()event");
                      obj559.definitionModule = "stobjectdraw";
                      obj559.definitionLine = 578;
                      obj559.outer = this;
                      var reader_stobjectdraw_outer560 = function() {
                        return this.outer;
                      };
                      obj559.methods["outer"] = reader_stobjectdraw_outer560;
                      var obj_init_559 = function() {
                        var origSuperDepth = superDepth;
                        superDepth = obj559;
                        var func561 = function(argcv) {    // method asString
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          if (argcv[0] !== 0)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                          setModuleName("stobjectdraw");
                          setLineNumber(582);    // compilenode string
                          var string562 = new GraceString("");
                          onSelf = true;
                          var call564 = callmethodChecked(this, "at", [0]);
                          var string566 = new GraceString(" at ");
                          onSelf = true;
                          var call568 = callmethodChecked(this, "source", [0]);
                          var string570 = new GraceString("Mouse event on ");
                          var opresult572 = callmethodChecked(string570, "++", [1], call568);
                          var opresult574 = callmethodChecked(opresult572, "++", [1], string566);
                          var opresult576 = callmethodChecked(opresult574, "++", [1], call564);
                          var opresult578 = callmethodChecked(opresult576, "++", [1], string562);
                          return opresult578;
                        };
                        func561.paramCounts = [0];
                        obj559.methods["asString"] = func561;
                        func561.definitionLine = 582;
                        func561.definitionModule = "stobjectdraw";
                        setLineNumber(579);    // compilenode identifier
                        obj559.data["source"] = var_source__39__;
                        var reader_stobjectdraw_source579 = function() {
                          return this.data["source"];
                        };
                        reader_stobjectdraw_source579.def = true;
                        obj559.methods["source"] = reader_stobjectdraw_source579;
                        setLineNumber(581);    // compilenode call
                        onSelf = true;
                        var call580 = callmethodChecked(this, "source", [0]);
                        var call581 = callmethodChecked(call580, "element", [0]);
                        var call582 = callmethodChecked(call581, "offsetTop", [0]);
                        var call584 = callmethodChecked(var_event__39__, "pageY", [0]);
                        var diff586 = callmethodChecked(call584, "-", [1], call582);
                        setLineNumber(580);    // compilenode call
                        onSelf = true;
                        var call588 = callmethodChecked(this, "source", [0]);
                        var call589 = callmethodChecked(call588, "element", [0]);
                        var call590 = callmethodChecked(call589, "offsetLeft", [0]);
                        var call592 = callmethodChecked(var_event__39__, "pageX", [0]);
                        var diff594 = callmethodChecked(call592, "-", [1], call590);
                        var opresult596 = callmethodChecked(diff594, "@", [1], diff586);
                        obj559.data["at"] = opresult596;
                        var reader_stobjectdraw_at597 = function() {
                          return this.data["at"];
                        };
                        reader_stobjectdraw_at597.def = true;
                        obj559.methods["at"] = reader_stobjectdraw_at597;
                        superDepth = origSuperDepth;
                      };
                      obj_init_559.apply(obj559, []);
                      return obj559;
                    };
                    func558.confidential = true;
                    func558.paramCounts = [1, 1];
                    obj532.methods["mouseEventSource()event"] = func558;
                    func558.definitionLine = 578;
                    func558.definitionModule = "stobjectdraw";
                      var func598 = function(argcv) {    // method mouseEventSource(1     )event(1     )()object
                        var curarg = 1;
                        var var_source__39__ = arguments[curarg];
                        curarg++;
                        var var_event__39__ = arguments[curarg];
                        curarg++;
                        var inheritingObject = arguments[curarg++];
                        // Start argument processing
                        curarg = 1;
                        curarg++;
                        curarg++;
                        // End argument processing
                        setModuleName("stobjectdraw");
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var obj599 = Grace_allocObject(GraceObject, "mouseEventSource()event");
                        obj599.definitionModule = "stobjectdraw";
                        obj599.definitionLine = 578;
                        var inho599 = inheritingObject;
                        while (inho599.superobj) inho599 = inho599.superobj;
                        inho599.superobj = obj599;
                        obj599.data = inheritingObject.data;
                        if (inheritingObject.hasOwnProperty('_value'))
                          obj599._value = inheritingObject._value;
                        obj599.outer = this;
                        var reader_stobjectdraw_outer600 = function() {
                          return this.outer;
                        };
                        obj599.methods["outer"] = reader_stobjectdraw_outer600;
                        var obj_init_599 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj599;
                          var func601 = function(argcv) {    // method asString
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                            setModuleName("stobjectdraw");
                            setLineNumber(582);    // compilenode string
                            var string602 = new GraceString("");
                            onSelf = true;
                            var call604 = callmethodChecked(this, "at", [0]);
                            var string606 = new GraceString(" at ");
                            onSelf = true;
                            var call608 = callmethodChecked(this, "source", [0]);
                            var string610 = new GraceString("Mouse event on ");
                            var opresult612 = callmethodChecked(string610, "++", [1], call608);
                            var opresult614 = callmethodChecked(opresult612, "++", [1], string606);
                            var opresult616 = callmethodChecked(opresult614, "++", [1], call604);
                            var opresult618 = callmethodChecked(opresult616, "++", [1], string602);
                            return opresult618;
                          };
                          func601.paramCounts = [0];
                          obj599.methods["asString"] = func601;
                          func601.definitionLine = 582;
                          func601.definitionModule = "stobjectdraw";
                          setLineNumber(579);    // compilenode identifier
                          obj599.data["source"] = var_source__39__;
                          var reader_stobjectdraw_source619 = function() {
                            return this.data["source"];
                          };
                          reader_stobjectdraw_source619.def = true;
                          obj599.methods["source"] = reader_stobjectdraw_source619;
                          setLineNumber(581);    // compilenode call
                          onSelf = true;
                          var call620 = callmethodChecked(this, "source", [0]);
                          var call621 = callmethodChecked(call620, "element", [0]);
                          var call622 = callmethodChecked(call621, "offsetTop", [0]);
                          var call624 = callmethodChecked(var_event__39__, "pageY", [0]);
                          var diff626 = callmethodChecked(call624, "-", [1], call622);
                          setLineNumber(580);    // compilenode call
                          onSelf = true;
                          var call628 = callmethodChecked(this, "source", [0]);
                          var call629 = callmethodChecked(call628, "element", [0]);
                          var call630 = callmethodChecked(call629, "offsetLeft", [0]);
                          var call632 = callmethodChecked(var_event__39__, "pageX", [0]);
                          var diff634 = callmethodChecked(call632, "-", [1], call630);
                          var opresult636 = callmethodChecked(diff634, "@", [1], diff626);
                          obj599.data["at"] = opresult636;
                          var reader_stobjectdraw_at637 = function() {
                            return this.data["at"];
                          };
                          reader_stobjectdraw_at637.def = true;
                          obj599.methods["at"] = reader_stobjectdraw_at637;
                          superDepth = origSuperDepth;
                        };
                        obj_init_599.apply(inheritingObject, []);
                        return obj599;
                        };
                        func598.confidential = true;
                        obj532.methods["mouseEventSource()event()object"] = func598;
                      var func638 = function(argcv) {    // method onMouseClickDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseClickDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(586);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseClickDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("stobjectdraw");
                        setLineNumber(588);    // compilenode vardec
                        var var_lastDown;
                        setLineNumber(590);    // compilenode string
                        var string639 = new GraceString("mousedown");
                        var block640 = new GraceBlock(this, 590, 1);
                        setLineNumber(0);    // compilenode string
                        var string641 = new GraceString("event'");
                        var call642 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                        var call643 = callmethodChecked(call642, "new", [1], string641);
                        var call644 = callmethodChecked(var_prelude, "AndPattern", [0]);
                        var call645 = callmethodChecked(call644, "new", [2], call643, var_Foreign);
                        block640.pattern = call645;
                        setLineNumber(590);    // compilenode identifier
                        block640.paramTypes = [var_Foreign];
                        block640.real = function(var_event__39__) {
                          setLineNumber(591);    // compilenode identifier
                          var call646 = callmethodChecked(var_event__39__, "timeStamp", [0]);
                          var_lastDown = call646;
                          return GraceDone;
                        };
                        onSelf = true;
                        var call647 = callmethodChecked(this, "on()do", [1, 1], string639, block640);
                        setLineNumber(594);    // compilenode string
                        var string648 = new GraceString("click");
                        var block649 = new GraceBlock(this, 594, 1);
                        setLineNumber(0);    // compilenode string
                        var string650 = new GraceString("event'");
                        var call651 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                        var call652 = callmethodChecked(call651, "new", [1], string650);
                        var call653 = callmethodChecked(var_prelude, "AndPattern", [0]);
                        var call654 = callmethodChecked(call653, "new", [2], call652, var_Foreign);
                        block649.pattern = call654;
                        setLineNumber(594);    // compilenode identifier
                        block649.paramTypes = [var_Foreign];
                        block649.real = function(var_event__39__) {
                          var if655 = GraceDone;
                          setLineNumber(595);    // compilenode identifier
                          var call658 = callmethodChecked(var_event__39__, "timeStamp", [0]);
                          var diff660 = callmethodChecked(call658, "-", [1], var_lastDown);
                          var opresult662 = callmethodChecked(diff660, "\u2264", [1], var_maxClickTime);
                          if (Grace_isTrue(opresult662)) {
                            setLineNumber(596);    // compilenode identifier
                            onSelf = true;
                            var call663 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                            var call664 = callmethodChecked(var_f, "apply", [1], call663);
                            if655 = call664;
                          }
                          return if655;
                        };
                        onSelf = true;
                        var call665 = callmethodChecked(this, "on()do", [1, 1], string648, block649);
                        setLineNumber(594);    // return value
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call665)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseClickDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call665;
                      };
                      func638.paramTypes = [];
                      func638.paramTypes.push([]);
                      func638.paramCounts = [1];
                      obj532.methods["onMouseClickDo"] = func638;
                      func638.definitionLine = 586;
                      func638.definitionModule = "stobjectdraw";
                      var func666 = function(argcv) {    // method onMousePressDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMousePressDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(602);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMousePressDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("stobjectdraw");
                        setLineNumber(603);    // compilenode string
                        var string667 = new GraceString("mousedown");
                        onSelf = true;
                        var call668 = callmethodChecked(this, "on()withPointDo", [1, 1], string667, var_f);
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call668)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMousePressDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call668;
                      };
                      func666.paramTypes = [];
                      func666.paramTypes.push([]);
                      func666.paramCounts = [1];
                      obj532.methods["onMousePressDo"] = func666;
                      func666.definitionLine = 602;
                      func666.definitionModule = "stobjectdraw";
                      var func669 = function(argcv) {    // method onMouseReleaseDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseReleaseDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(607);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseReleaseDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("stobjectdraw");
                        setLineNumber(608);    // compilenode string
                        var string670 = new GraceString("mouseup");
                        onSelf = true;
                        var call671 = callmethodChecked(this, "on()withPointDo", [1, 1], string670, var_f);
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call671)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseReleaseDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call671;
                      };
                      func669.paramTypes = [];
                      func669.paramTypes.push([]);
                      func669.paramCounts = [1];
                      obj532.methods["onMouseReleaseDo"] = func669;
                      func669.definitionLine = 607;
                      func669.definitionModule = "stobjectdraw";
                      var func672 = function(argcv) {    // method onMouseMoveDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseMoveDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(612);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseMoveDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("stobjectdraw");
                        setLineNumber(613);    // compilenode string
                        var string673 = new GraceString("mousemove");
                        var block674 = new GraceBlock(this, 613, 1);
                        setLineNumber(1);    // compilenode identifier
                        block674.real = function(var_event__39__) {
                          var if675 = GraceDone;
                          var if676 = GraceDone;
                          setLineNumber(614);    // compilenode string
                          var string677 = new GraceString("buttons");
                          var call678 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], var_event__39__, string677);
                          if (Grace_isTrue(call678)) {
                            setLineNumber(615);    // compilenode identifier
                            var call680 = callmethodChecked(var_event__39__, "buttons", [0]);
                            var opresult682 = callmethodChecked(call680, "==", [1], new GraceNum(0));
                            if676 = opresult682;
                          } else {
                            setLineNumber(617);    // compilenode identifier
                            var call684 = callmethodChecked(var_event__39__, "which", [0]);
                            var opresult686 = callmethodChecked(call684, "==", [1], new GraceNum(0));
                            if676 = opresult686;
                          }
                          if (Grace_isTrue(if676)) {
                            setLineNumber(619);    // compilenode identifier
                            onSelf = true;
                            var call687 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                            var call688 = callmethodChecked(var_f, "apply", [1], call687);
                            if675 = call688;
                          }
                          return if675;
                        };
                        onSelf = true;
                        var call689 = callmethodChecked(this, "on()do", [1, 1], string673, block674);
                        setLineNumber(613);    // return value
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call689)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseMoveDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call689;
                      };
                      func672.paramTypes = [];
                      func672.paramTypes.push([]);
                      func672.paramCounts = [1];
                      obj532.methods["onMouseMoveDo"] = func672;
                      func672.definitionLine = 612;
                      func672.definitionModule = "stobjectdraw";
                      var func690 = function(argcv) {    // method onMouseDragDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseDragDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(625);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseDragDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("stobjectdraw");
                        setLineNumber(626);    // compilenode string
                        var string691 = new GraceString("mousemove");
                        var block692 = new GraceBlock(this, 626, 1);
                        setLineNumber(1);    // compilenode identifier
                        block692.real = function(var_event__39__) {
                          var if693 = GraceDone;
                          var if694 = GraceDone;
                          setLineNumber(627);    // compilenode string
                          var string695 = new GraceString("buttons");
                          var call696 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], var_event__39__, string695);
                          if (Grace_isTrue(call696)) {
                            setLineNumber(628);    // compilenode identifier
                            var call698 = callmethodChecked(var_event__39__, "buttons", [0]);
                            var opresult700 = callmethodChecked(call698, "==", [1], new GraceNum(1));
                            if694 = opresult700;
                          } else {
                            setLineNumber(630);    // compilenode identifier
                            var call702 = callmethodChecked(var_event__39__, "which", [0]);
                            var opresult704 = callmethodChecked(call702, "==", [1], new GraceNum(1));
                            if694 = opresult704;
                          }
                          if (Grace_isTrue(if694)) {
                            setLineNumber(632);    // compilenode identifier
                            onSelf = true;
                            var call705 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                            var call706 = callmethodChecked(var_f, "apply", [1], call705);
                            if693 = call706;
                          }
                          return if693;
                        };
                        onSelf = true;
                        var call707 = callmethodChecked(this, "on()do", [1, 1], string691, block692);
                        setLineNumber(626);    // return value
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call707)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseDragDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call707;
                      };
                      func690.paramTypes = [];
                      func690.paramTypes.push([]);
                      func690.paramCounts = [1];
                      obj532.methods["onMouseDragDo"] = func690;
                      func690.definitionLine = 625;
                      func690.definitionModule = "stobjectdraw";
                      var func708 = function(argcv) {    // method onMouseEnterDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnterDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(638);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseEnterDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("stobjectdraw");
                        setLineNumber(639);    // compilenode string
                        var string709 = new GraceString("mouseover");
                        var block710 = new GraceBlock(this, 639, 1);
                        setLineNumber(1);    // compilenode identifier
                        block710.real = function(var_event__39__) {
                          setLineNumber(640);    // compilenode identifier
                          var call711 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                          var var_from = call711;
                          var if712 = GraceDone;
                          setLineNumber(649);    // compilenode block
                          var block713 = new GraceBlock(this, 649, 0);
                          block713.real = function() {
                            onSelf = true;
                            var call714 = callmethodChecked(this, "element", [0]);
                            var call715 = callmethodChecked(call714, "contains", [1], var_from);
                            var call716 = callmethodChecked(call715, "prefix!", [0]);
                            return call716;
                          };
                          var call719 = callmethodChecked(var_dom, "noObject", [0]);
                          var opresult721 = callmethodChecked(call719, "==", [1], var_from);
                          var opresult723 = callmethodChecked(opresult721, "||", [1], block713);
                          if (Grace_isTrue(opresult723)) {
                            setLineNumber(652);    // compilenode identifier
                            onSelf = true;
                            var call724 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                            var call725 = callmethodChecked(var_f, "apply", [1], call724);
                            if712 = call725;
                          }
                          return if712;
                        };
                        onSelf = true;
                        var call726 = callmethodChecked(this, "on()do", [1, 1], string709, block710);
                        setLineNumber(639);    // return value
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call726)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseEnterDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call726;
                      };
                      func708.paramTypes = [];
                      func708.paramTypes.push([]);
                      func708.paramCounts = [1];
                      obj532.methods["onMouseEnterDo"] = func708;
                      func708.definitionLine = 638;
                      func708.definitionModule = "stobjectdraw";
                      var func727 = function(argcv) {    // method onMouseExitDo(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_f = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExitDo(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(658);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in onMouseExitDo (arg list 1), which corresponds to parameter f, does not have " + 
                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("stobjectdraw");
                        setLineNumber(659);    // compilenode string
                        var string728 = new GraceString("mouseout");
                        var block729 = new GraceBlock(this, 659, 1);
                        setLineNumber(1);    // compilenode identifier
                        block729.real = function(var_event__39__) {
                          setLineNumber(660);    // compilenode identifier
                          var call730 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                          var var_to = call730;
                          var if731 = GraceDone;
                          setLineNumber(662);    // compilenode block
                          var block732 = new GraceBlock(this, 662, 0);
                          block732.real = function() {
                            onSelf = true;
                            var call733 = callmethodChecked(this, "element", [0]);
                            var call734 = callmethodChecked(call733, "contains", [1], var_to);
                            var call735 = callmethodChecked(call734, "prefix!", [0]);
                            return call735;
                          };
                          var call738 = callmethodChecked(var_dom, "noObject", [0]);
                          var opresult740 = callmethodChecked(call738, "==", [1], var_to);
                          var opresult742 = callmethodChecked(opresult740, "||", [1], block732);
                          if (Grace_isTrue(opresult742)) {
                            setLineNumber(663);    // compilenode identifier
                            onSelf = true;
                            var call743 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                            var call744 = callmethodChecked(var_f, "apply", [1], call743);
                            if731 = call744;
                          }
                          return if731;
                        };
                        onSelf = true;
                        var call745 = callmethodChecked(this, "on()do", [1, 1], string728, block729);
                        setLineNumber(659);    // return value
                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call745)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method onMouseExitDo(1) does not have " + 
                                    callmethod(var_Done, "asString", [0])._value + "."));
                        return call745;
                      };
                      func727.paramTypes = [];
                      func727.paramTypes.push([]);
                      func727.paramCounts = [1];
                      obj532.methods["onMouseExitDo"] = func727;
                      func727.definitionLine = 658;
                      func727.definitionModule = "stobjectdraw";
                      var func746 = function(argcv) {    // method eventSource(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_source__39__ = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for eventSource(1)"));
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(670);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                                    callmethod(var_Component, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("stobjectdraw");
                        var obj747 = Grace_allocObject(GraceObject, "eventSource");
                        obj747.definitionModule = "stobjectdraw";
                        obj747.definitionLine = 670;
                        obj747.outer = this;
                        var reader_stobjectdraw_outer748 = function() {
                          return this.outer;
                        };
                        obj747.methods["outer"] = reader_stobjectdraw_outer748;
                        var obj_init_747 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj747;
                          var func749 = function(argcv) {    // method asString
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                            setModuleName("stobjectdraw");
                            setLineNumber(676);    // compilenode string
                            var string750 = new GraceString("");
                            onSelf = true;
                            var call752 = callmethodChecked(this, "source", [0]);
                            var string754 = new GraceString("Event on ");
                            var opresult756 = callmethodChecked(string754, "++", [1], call752);
                            var opresult758 = callmethodChecked(opresult756, "++", [1], string750);
                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult758)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method asString does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            return opresult758;
                          };
                          func749.paramCounts = [0];
                          obj747.methods["asString"] = func749;
                          func749.definitionLine = 675;
                          func749.definitionModule = "stobjectdraw";
                          setLineNumber(673);    // compilenode identifier
                          obj747.data["source"] = var_source__39__;
                          var reader_stobjectdraw_source759 = function() {
                            return this.data["source"];
                          };
                          reader_stobjectdraw_source759.def = true;
                          obj747.methods["source"] = reader_stobjectdraw_source759;
                          if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("value of def 'source' is not of type Component"));
                          superDepth = origSuperDepth;
                        };
                        obj_init_747.apply(obj747, []);
                        setLineNumber(670);    // return value
                        if (!Grace_isTrue(callmethod(var_Event, "match", [1], obj747)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method eventSource(1) does not have " + 
                                    callmethod(var_Event, "asString", [0])._value + "."));
                        return obj747;
                      };
                      func746.paramTypes = [];
                      func746.paramTypes.push([]);
                      func746.paramCounts = [1];
                      obj532.methods["eventSource"] = func746;
                      func746.definitionLine = 670;
                      func746.definitionModule = "stobjectdraw";
                        var func760 = function(argcv) {    // method eventSource(1     )()object
                          var curarg = 1;
                          var var_source__39__ = arguments[curarg];
                          curarg++;
                          var inheritingObject = arguments[curarg++];
                          // Start argument processing
                          curarg = 1;
                          if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in eventSource (arg list 1), which corresponds to parameter source', does not have " + 
                                      callmethod(var_Component, "asString", [0])._value + "."));
                          curarg++;
                          // End argument processing
                          setModuleName("stobjectdraw");
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var obj761 = Grace_allocObject(GraceObject, "eventSource");
                          obj761.definitionModule = "stobjectdraw";
                          obj761.definitionLine = 670;
                          var inho761 = inheritingObject;
                          while (inho761.superobj) inho761 = inho761.superobj;
                          inho761.superobj = obj761;
                          obj761.data = inheritingObject.data;
                          if (inheritingObject.hasOwnProperty('_value'))
                            obj761._value = inheritingObject._value;
                          obj761.outer = this;
                          var reader_stobjectdraw_outer762 = function() {
                            return this.outer;
                          };
                          obj761.methods["outer"] = reader_stobjectdraw_outer762;
                          var obj_init_761 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj761;
                            var func763 = function(argcv) {    // method asString
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                              setModuleName("stobjectdraw");
                              setLineNumber(676);    // compilenode string
                              var string764 = new GraceString("");
                              onSelf = true;
                              var call766 = callmethodChecked(this, "source", [0]);
                              var string768 = new GraceString("Event on ");
                              var opresult770 = callmethodChecked(string768, "++", [1], call766);
                              var opresult772 = callmethodChecked(opresult770, "++", [1], string764);
                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult772)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("result of method asString does not have " + 
                                          callmethod(var_String, "asString", [0])._value + "."));
                              return opresult772;
                            };
                            func763.paramCounts = [0];
                            obj761.methods["asString"] = func763;
                            func763.definitionLine = 675;
                            func763.definitionModule = "stobjectdraw";
                            setLineNumber(673);    // compilenode identifier
                            obj761.data["source"] = var_source__39__;
                            var reader_stobjectdraw_source773 = function() {
                              return this.data["source"];
                            };
                            reader_stobjectdraw_source773.def = true;
                            obj761.methods["source"] = reader_stobjectdraw_source773;
                            if (!Grace_isTrue(callmethod(var_Component, "match", [1], var_source__39__)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("value of def 'source' is not of type Component"));
                            superDepth = origSuperDepth;
                          };
                          obj_init_761.apply(inheritingObject, []);
                          return obj761;
                          };
                          func760.paramTypes = [];
                          func760.paramTypes.push([]);
                          obj532.methods["eventSource()object"] = func760;
                        var func774 = function(argcv) {    // method keyEventSource(1)event(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_source__39__ = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for keyEventSource (arg list 1) of keyEventSource(1)event(1)"));
                          var var_event__39__ = arguments[curarg];
                          curarg++;
                          if (argcv[1] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for event (arg list 2) of keyEventSource(1)event(1)"));
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(680);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                                      callmethod(var_Component, "asString", [0])._value + "."));
                          curarg++;
                          if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                                      callmethod(var_Foreign, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("stobjectdraw");
                          var obj775 = Grace_allocObject(null, "keyEventSource()event");
                          obj775.definitionModule = "stobjectdraw";
                          obj775.definitionLine = 680;
                          obj775.outer = this;
                          var reader_stobjectdraw_outer776 = function() {
                            return this.outer;
                          };
                          obj775.methods["outer"] = reader_stobjectdraw_outer776;
                          var obj_init_775 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj775;
                            var func777 = function(argcv) {    // method asString
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                              setModuleName("stobjectdraw");
                              setLineNumber(688);    // compilenode string
                              var string778 = new GraceString("");
                              onSelf = true;
                              var call780 = callmethodChecked(this, "code", [0]);
                              var string782 = new GraceString(" for key-code ");
                              onSelf = true;
                              var call784 = callmethodChecked(this, "source", [0]);
                              var string786 = new GraceString("Event on ");
                              var opresult788 = callmethodChecked(string786, "++", [1], call784);
                              var opresult790 = callmethodChecked(opresult788, "++", [1], string782);
                              var opresult792 = callmethodChecked(opresult790, "++", [1], call780);
                              var opresult794 = callmethodChecked(opresult792, "++", [1], string778);
                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult794)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("result of method asString does not have " + 
                                          callmethod(var_String, "asString", [0])._value + "."));
                              return opresult794;
                            };
                            func777.paramCounts = [0];
                            obj775.methods["asString"] = func777;
                            func777.definitionLine = 687;
                            func777.definitionModule = "stobjectdraw";
                            setLineNumber(682);    // compilenode call
                            var call795 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call796 = callmethodChecked(call795, "eventSource()object", [1, 1], var_source__39__, this);
                            obj775.superobj = call796;
                            if (call796.data) obj775.data = call796.data;
                            if (call796.hasOwnProperty('_value'))
                                obj775._value = call796._value;
                            setLineNumber(683);    // compilenode identifier
                            var call797 = callmethodChecked(var_event__39__, "which", [0]);
                            obj775.data["code"] = call797;
                            var reader_stobjectdraw_code798 = function() {
                              return this.data["code"];
                            };
                            reader_stobjectdraw_code798.def = true;
                            obj775.methods["code"] = reader_stobjectdraw_code798;
                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call797)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("value of def 'code' is not of type Number"));
                            superDepth = origSuperDepth;
                          };
                          obj_init_775.apply(obj775, []);
                          setLineNumber(680);    // return value
                          if (!Grace_isTrue(callmethod(var_KeyEvent, "match", [1], obj775)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method keyEventSource(1)event(1) does not have " + 
                                      callmethod(var_KeyEvent, "asString", [0])._value + "."));
                          return obj775;
                        };
                        func774.paramTypes = [];
                        func774.paramTypes.push([]);
                        func774.paramTypes.push([]);
                        func774.paramCounts = [1, 1];
                        obj532.methods["keyEventSource()event"] = func774;
                        func774.definitionLine = 680;
                        func774.definitionModule = "stobjectdraw";
                          var func799 = function(argcv) {    // method keyEventSource(1     )event(1     )()object
                            var curarg = 1;
                            var var_source__39__ = arguments[curarg];
                            curarg++;
                            var var_event__39__ = arguments[curarg];
                            curarg++;
                            var inheritingObject = arguments[curarg++];
                            // Start argument processing
                            curarg = 1;
                            if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in keyEventSource (arg list 1), which corresponds to parameter source', does not have " + 
                                        callmethod(var_Component, "asString", [0])._value + "."));
                            curarg++;
                            if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in event (arg list 2), which corresponds to parameter event', does not have " + 
                                        callmethod(var_Foreign, "asString", [0])._value + "."));
                            curarg++;
                            // End argument processing
                            setModuleName("stobjectdraw");
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var obj800 = Grace_allocObject(null, "keyEventSource()event");
                            obj800.definitionModule = "stobjectdraw";
                            obj800.definitionLine = 680;
                            var inho800 = inheritingObject;
                            while (inho800.superobj) inho800 = inho800.superobj;
                            inho800.superobj = obj800;
                            obj800.data = inheritingObject.data;
                            if (inheritingObject.hasOwnProperty('_value'))
                              obj800._value = inheritingObject._value;
                            obj800.outer = this;
                            var reader_stobjectdraw_outer801 = function() {
                              return this.outer;
                            };
                            obj800.methods["outer"] = reader_stobjectdraw_outer801;
                            var obj_init_800 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj800;
                              var func802 = function(argcv) {    // method asString
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                setModuleName("stobjectdraw");
                                setLineNumber(688);    // compilenode string
                                var string803 = new GraceString("");
                                onSelf = true;
                                var call805 = callmethodChecked(this, "code", [0]);
                                var string807 = new GraceString(" for key-code ");
                                onSelf = true;
                                var call809 = callmethodChecked(this, "source", [0]);
                                var string811 = new GraceString("Event on ");
                                var opresult813 = callmethodChecked(string811, "++", [1], call809);
                                var opresult815 = callmethodChecked(opresult813, "++", [1], string807);
                                var opresult817 = callmethodChecked(opresult815, "++", [1], call805);
                                var opresult819 = callmethodChecked(opresult817, "++", [1], string803);
                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult819)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method asString does not have " + 
                                            callmethod(var_String, "asString", [0])._value + "."));
                                return opresult819;
                              };
                              func802.paramCounts = [0];
                              obj800.methods["asString"] = func802;
                              func802.definitionLine = 687;
                              func802.definitionModule = "stobjectdraw";
                              setLineNumber(682);    // compilenode call
                              var call820 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call821 = callmethodChecked(call820, "eventSource()object", [1, 1], var_source__39__, this);
                              obj800.superobj = call821;
                              if (call821.data) obj800.data = call821.data;
                              if (call821.hasOwnProperty('_value'))
                                  obj800._value = call821._value;
                              setLineNumber(683);    // compilenode identifier
                              var call822 = callmethodChecked(var_event__39__, "which", [0]);
                              obj800.data["code"] = call822;
                              var reader_stobjectdraw_code823 = function() {
                                return this.data["code"];
                              };
                              reader_stobjectdraw_code823.def = true;
                              obj800.methods["code"] = reader_stobjectdraw_code823;
                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call822)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("value of def 'code' is not of type Number"));
                              superDepth = origSuperDepth;
                            };
                            obj_init_800.apply(inheritingObject, []);
                            return obj800;
                            };
                            func799.paramTypes = [];
                            func799.paramTypes.push([]);
                            func799.paramTypes.push([]);
                            obj532.methods["keyEventSource()event()object"] = func799;
                          var func824 = function(argcv) {    // method on(1)withKeyDo(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_kind = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)withKeyDo(1)"));
                            var var_f = arguments[curarg];
                            curarg++;
                            if (argcv[1] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for withKeyDo (arg list 2) of on(1)withKeyDo(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(694);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            curarg++;
                            setLineNumber(695);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in withKeyDo (arg list 2), which corresponds to parameter f, does not have " + 
                                        callmethod(var_KeyResponse, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("stobjectdraw");
                            setLineNumber(696);    // compilenode block
                            var block825 = new GraceBlock(this, 696, 1);
                            setLineNumber(1);    // compilenode identifier
                            block825.real = function(var_event__39__) {
                              setLineNumber(697);    // compilenode identifier
                              onSelf = true;
                              var call826 = callmethodChecked(this, "keyEventSource()event", [1, 1], this, var_event__39__);
                              var call827 = callmethodChecked(var_f, "apply", [1], call826);
                              return call827;
                            };
                            onSelf = true;
                            var call828 = callmethodChecked(this, "on()do", [1, 1], var_kind, block825);
                            setLineNumber(696);    // return value
                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call828)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method on(1)withKeyDo(1) does not have " + 
                                        callmethod(var_Done, "asString", [0])._value + "."));
                            return call828;
                          };
                          func824.paramTypes = [];
                          func824.paramTypes.push([type_String, "kind"]);
                          func824.paramTypes.push([]);
                          func824.confidential = true;
                          func824.paramCounts = [1, 1];
                          obj532.methods["on()withKeyDo"] = func824;
                          func824.definitionLine = 694;
                          func824.definitionModule = "stobjectdraw";
                          var func829 = function(argcv) {    // method onKeyPressDo(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_f = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyPressDo(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(702);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in onKeyPressDo (arg list 1), which corresponds to parameter f, does not have " + 
                                        callmethod(var_KeyResponse, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("stobjectdraw");
                            setLineNumber(703);    // compilenode string
                            var string830 = new GraceString("keydown");
                            onSelf = true;
                            var call831 = callmethodChecked(this, "on()withKeyDo", [1, 1], string830, var_f);
                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call831)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method onKeyPressDo(1) does not have " + 
                                        callmethod(var_Done, "asString", [0])._value + "."));
                            return call831;
                          };
                          func829.paramTypes = [];
                          func829.paramTypes.push([]);
                          func829.paramCounts = [1];
                          obj532.methods["onKeyPressDo"] = func829;
                          func829.definitionLine = 702;
                          func829.definitionModule = "stobjectdraw";
                          var func832 = function(argcv) {    // method onKeyReleaseDo(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_f = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyReleaseDo(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(707);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in onKeyReleaseDo (arg list 1), which corresponds to parameter f, does not have " + 
                                        callmethod(var_KeyResponse, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("stobjectdraw");
                            setLineNumber(708);    // compilenode string
                            var string833 = new GraceString("keyup");
                            onSelf = true;
                            var call834 = callmethodChecked(this, "on()withKeyDo", [1, 1], string833, var_f);
                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call834)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method onKeyReleaseDo(1) does not have " + 
                                        callmethod(var_Done, "asString", [0])._value + "."));
                            return call834;
                          };
                          func832.paramTypes = [];
                          func832.paramTypes.push([]);
                          func832.paramCounts = [1];
                          obj532.methods["onKeyReleaseDo"] = func832;
                          func832.definitionLine = 707;
                          func832.definitionModule = "stobjectdraw";
                          var func835 = function(argcv) {    // method onKeyTypeDo(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_f = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onKeyTypeDo(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(712);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_KeyResponse, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in onKeyTypeDo (arg list 1), which corresponds to parameter f, does not have " + 
                                        callmethod(var_KeyResponse, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("stobjectdraw");
                            setLineNumber(713);    // compilenode string
                            var string836 = new GraceString("keypress");
                            onSelf = true;
                            var call837 = callmethodChecked(this, "on()withKeyDo", [1, 1], string836, var_f);
                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call837)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method onKeyTypeDo(1) does not have " + 
                                        callmethod(var_Done, "asString", [0])._value + "."));
                            return call837;
                          };
                          func835.paramTypes = [];
                          func835.paramTypes.push([]);
                          func835.paramCounts = [1];
                          obj532.methods["onKeyTypeDo"] = func835;
                          func835.definitionLine = 712;
                          func835.definitionModule = "stobjectdraw";
                          var func838 = function(argcv) {    // method isFlexible
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isFlexible"));
                            setModuleName("stobjectdraw");
                            setLineNumber(718);    // compilenode call
                            onSelf = true;
                            var call840 = callmethodChecked(this, "element", [0]);
                            var call841 = callmethodChecked(call840, "style", [0]);
                            var call842 = callmethodChecked(call841, "flexGrow", [0]);
                            var call843 = callmethodChecked(call842, "asNumber", [0]);
                            var opresult845 = callmethodChecked(call843, ">", [1], new GraceNum(0));
                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult845)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method isFlexible does not have " + 
                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                            return opresult845;
                          };
                          func838.paramCounts = [0];
                          obj532.methods["isFlexible"] = func838;
                          func838.definitionLine = 717;
                          func838.definitionModule = "stobjectdraw";
                          var func846 = function(argcv) {    // method flexible:=(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_value = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for flexible:=(1)"));
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(722);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in flexible:= (arg list 1), which corresponds to parameter value, does not have " + 
                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("stobjectdraw");
                            var if847 = GraceDone;
                            setLineNumber(723);    // compilenode identifier
                            if (Grace_isTrue(var_value)) {
                              setLineNumber(724);    // compilenode num
                              if847 = new GraceNum(1);
                            } else {
                              setLineNumber(726);    // compilenode num
                              if847 = new GraceNum(0);
                            }
                            setLineNumber(723);    // compilenode call
                            onSelf = true;
                            var call848 = callmethodChecked(this, "element", [0]);
                            var call849 = callmethodChecked(call848, "style", [0]);
                            var call850 = callmethodChecked(call849, "flexGrow:=", [1], if847);
                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call850)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method flexible:=(1) does not have " + 
                                        callmethod(var_Done, "asString", [0])._value + "."));
                            return call850;
                          };
                          func846.paramTypes = [];
                          func846.paramTypes.push([type_Boolean, "value"]);
                          func846.paramCounts = [1];
                          obj532.methods["flexible:="] = func846;
                          func846.definitionLine = 722;
                          func846.definitionModule = "stobjectdraw";
                          var func851 = function(argcv) {    // method asString
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            if (argcv[0] !== 0)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                            setModuleName("stobjectdraw");
                            setLineNumber(732);    // compilenode string
                            var string852 = new GraceString("a component");
                            if (!Grace_isTrue(callmethod(var_String, "match", [1], string852)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method asString does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            return string852;
                          };
                          func851.paramCounts = [0];
                          obj532.methods["asString"] = func851;
                          func851.definitionLine = 731;
                          func851.definitionModule = "stobjectdraw";
                          setLineNumber(545);    // compilenode identifier
                          obj532.data["element"] = var_element__39__;
                          var reader_stobjectdraw_element853 = function() {
                            return this.data["element"];
                          };
                          reader_stobjectdraw_element853.def = true;
                          obj532.methods["element"] = reader_stobjectdraw_element853;
                          superDepth = origSuperDepth;
                        };
                        obj_init_532.apply(inheritingObject, []);
                        return obj532;
                        };
                        this.methods["componentFromElement()object"] = func531;
                      setLineNumber(736);    // compilenode method
                      var func854 = function(argcv) {    // method componentOfElementType(1)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_tagName = arguments[curarg];
                        curarg++;
                        if (argcv[0] !== 1)
                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for componentOfElementType(1)"));
                        // Start argument checking
                        curarg = 1;
                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in componentOfElementType (arg list 1), which corresponds to parameter tagName, does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("stobjectdraw");
                        var obj855 = Grace_allocObject(null, "stobjectdraw.componentOfElementType");
                        obj855.definitionModule = "stobjectdraw";
                        obj855.definitionLine = 736;
                        obj855.outer = this;
                        var reader_stobjectdraw_outer856 = function() {
                          return this.outer;
                        };
                        obj855.methods["outer"] = reader_stobjectdraw_outer856;
                        var obj_init_855 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj855;
                          setLineNumber(739);    // compilenode identifier
                          var call857 = callmethodChecked(var_document, "createElement", [1], var_tagName);
                          var call858 = callmethodChecked(superDepth, "outer", [0]);
                          onOuter = true;
                          onSelf = true;
                          var call859 = callmethodChecked(call858, "componentFromElement()object", [1, 1], call857, this);
                          obj855.superobj = call859;
                          if (call859.data) obj855.data = call859.data;
                          if (call859.hasOwnProperty('_value'))
                              obj855._value = call859._value;
                          superDepth = origSuperDepth;
                        };
                        obj_init_855.apply(obj855, []);
                        setLineNumber(736);    // return value
                        if (!Grace_isTrue(callmethod(var_Component, "match", [1], obj855)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method componentOfElementType(1) does not have " + 
                                    callmethod(var_Component, "asString", [0])._value + "."));
                        return obj855;
                      };
                      func854.paramTypes = [];
                      func854.paramTypes.push([type_String, "tagName"]);
                      func854.paramCounts = [1];
                      this.methods["componentOfElementType"] = func854;
                      func854.definitionLine = 736;
                      func854.definitionModule = "stobjectdraw";
                        var func860 = function(argcv) {    // method componentOfElementType(1     )()object
                          var curarg = 1;
                          var var_tagName = arguments[curarg];
                          curarg++;
                          var inheritingObject = arguments[curarg++];
                          // Start argument processing
                          curarg = 1;
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in componentOfElementType (arg list 1), which corresponds to parameter tagName, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          // End argument processing
                          setModuleName("stobjectdraw");
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var obj861 = Grace_allocObject(null, "componentOfElementType");
                          obj861.definitionModule = "stobjectdraw";
                          obj861.definitionLine = 736;
                          var inho861 = inheritingObject;
                          while (inho861.superobj) inho861 = inho861.superobj;
                          inho861.superobj = obj861;
                          obj861.data = inheritingObject.data;
                          if (inheritingObject.hasOwnProperty('_value'))
                            obj861._value = inheritingObject._value;
                          obj861.outer = this;
                          var reader_stobjectdraw_outer862 = function() {
                            return this.outer;
                          };
                          obj861.methods["outer"] = reader_stobjectdraw_outer862;
                          var obj_init_861 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj861;
                            setLineNumber(739);    // compilenode identifier
                            var call863 = callmethodChecked(var_document, "createElement", [1], var_tagName);
                            var call864 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call865 = callmethodChecked(call864, "componentFromElement()object", [1, 1], call863, this);
                            obj861.superobj = call865;
                            if (call865.data) obj861.data = call865.data;
                            if (call865.hasOwnProperty('_value'))
                                obj861._value = call865._value;
                            superDepth = origSuperDepth;
                          };
                          obj_init_861.apply(inheritingObject, []);
                          return obj861;
                          };
                          func860.paramTypes = [];
                          func860.paramTypes.push([type_String, "tagName"]);
                          this.methods["componentOfElementType()object"] = func860;
                        setLineNumber(744);    // compilenode method
                        var func866 = function(argcv) {    // method containerOfElementType(1)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_tagName = arguments[curarg];
                          curarg++;
                          if (argcv[0] !== 1)
                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for containerOfElementType(1)"));
                          // Start argument checking
                          curarg = 1;
                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in containerOfElementType (arg list 1), which corresponds to parameter tagName, does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("stobjectdraw");
                          var obj867 = Grace_allocObject(null, "stobjectdraw.containerOfElementType");
                          obj867.definitionModule = "stobjectdraw";
                          obj867.definitionLine = 744;
                          obj867.outer = this;
                          var reader_stobjectdraw_outer868 = function() {
                            return this.outer;
                          };
                          obj867.methods["outer"] = reader_stobjectdraw_outer868;
                          var obj_init_867 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj867;
                            setLineNumber(745);    // compilenode identifier
                            var call869 = callmethodChecked(var_document, "createElement", [1], var_tagName);
                            var call870 = callmethodChecked(superDepth, "outer", [0]);
                            onOuter = true;
                            onSelf = true;
                            var call871 = callmethodChecked(call870, "containerFromElement()object", [1, 1], call869, this);
                            obj867.superobj = call871;
                            if (call871.data) obj867.data = call871.data;
                            if (call871.hasOwnProperty('_value'))
                                obj867._value = call871._value;
                            superDepth = origSuperDepth;
                          };
                          obj_init_867.apply(obj867, []);
                          setLineNumber(744);    // return value
                          if (!Grace_isTrue(callmethod(var_Component, "match", [1], obj867)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method containerOfElementType(1) does not have " + 
                                      callmethod(var_Component, "asString", [0])._value + "."));
                          return obj867;
                        };
                        func866.paramTypes = [];
                        func866.paramTypes.push([type_String, "tagName"]);
                        func866.paramCounts = [1];
                        this.methods["containerOfElementType"] = func866;
                        func866.definitionLine = 744;
                        func866.definitionModule = "stobjectdraw";
                          var func872 = function(argcv) {    // method containerOfElementType(1     )()object
                            var curarg = 1;
                            var var_tagName = arguments[curarg];
                            curarg++;
                            var inheritingObject = arguments[curarg++];
                            // Start argument processing
                            curarg = 1;
                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in containerOfElementType (arg list 1), which corresponds to parameter tagName, does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            curarg++;
                            // End argument processing
                            setModuleName("stobjectdraw");
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var obj873 = Grace_allocObject(null, "containerOfElementType");
                            obj873.definitionModule = "stobjectdraw";
                            obj873.definitionLine = 744;
                            var inho873 = inheritingObject;
                            while (inho873.superobj) inho873 = inho873.superobj;
                            inho873.superobj = obj873;
                            obj873.data = inheritingObject.data;
                            if (inheritingObject.hasOwnProperty('_value'))
                              obj873._value = inheritingObject._value;
                            obj873.outer = this;
                            var reader_stobjectdraw_outer874 = function() {
                              return this.outer;
                            };
                            obj873.methods["outer"] = reader_stobjectdraw_outer874;
                            var obj_init_873 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj873;
                              setLineNumber(745);    // compilenode identifier
                              var call875 = callmethodChecked(var_document, "createElement", [1], var_tagName);
                              var call876 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call877 = callmethodChecked(call876, "containerFromElement()object", [1, 1], call875, this);
                              obj873.superobj = call877;
                              if (call877.data) obj873.data = call877.data;
                              if (call877.hasOwnProperty('_value'))
                                  obj873._value = call877._value;
                              superDepth = origSuperDepth;
                            };
                            obj_init_873.apply(inheritingObject, []);
                            return obj873;
                            };
                            func872.paramTypes = [];
                            func872.paramTypes.push([type_String, "tagName"]);
                            this.methods["containerOfElementType()object"] = func872;
                          setLineNumber(749);    // compilenode method
                          var func878 = function(argcv) {    // method containerFromElement(1)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_element__39__ = arguments[curarg];
                            curarg++;
                            if (argcv[0] !== 1)
                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for containerFromElement(1)"));
                            setModuleName("stobjectdraw");
                            var obj879 = Grace_allocObject(null, "stobjectdraw.containerFromElement");
                            obj879.definitionModule = "stobjectdraw";
                            obj879.definitionLine = 749;
                            obj879.outer = this;
                            var reader_stobjectdraw_outer880 = function() {
                              return this.outer;
                            };
                            obj879.methods["outer"] = reader_stobjectdraw_outer880;
                            var obj_init_879 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj879;
                              var func881 = function(argcv) {    // method size
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                setModuleName("stobjectdraw");
                                setLineNumber(756);    // compilenode call
                                onSelf = true;
                                var call882 = callmethodChecked(this, "children", [0]);
                                var call883 = callmethodChecked(call882, "size", [0]);
                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], call883)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method size does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                return call883;
                              };
                              func881.paramCounts = [0];
                              obj879.methods["size"] = func881;
                              func881.definitionLine = 755;
                              func881.definitionModule = "stobjectdraw";
                              var func884 = function(argcv) {    // method isEmpty
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEmpty"));
                                setModuleName("stobjectdraw");
                                setLineNumber(761);    // compilenode call
                                onSelf = true;
                                var call886 = callmethodChecked(this, "size", [0]);
                                var opresult888 = callmethodChecked(call886, "==", [1], new GraceNum(0));
                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult888)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method isEmpty does not have " + 
                                            callmethod(var_Boolean, "asString", [0])._value + "."));
                                return opresult888;
                              };
                              func884.paramCounts = [0];
                              obj879.methods["isEmpty"] = func884;
                              func884.definitionLine = 760;
                              func884.definitionModule = "stobjectdraw";
                              var func889 = function(argcv) {    // method at(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_index = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for at(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(765);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in at (arg list 1), which corresponds to parameter index, does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("stobjectdraw");
                                var if890 = GraceDone;
                                setLineNumber(766);    // compilenode call
                                onSelf = true;
                                var call891 = callmethodChecked(this, "size", [0]);
                                var opresult894 = callmethodChecked(var_index, ">", [1], call891);
                                var opresult898 = callmethodChecked(var_index, "<", [1], new GraceNum(1));
                                var opresult900 = callmethodChecked(opresult898, "||", [1], opresult894);
                                if (Grace_isTrue(opresult900)) {
                                  setLineNumber(767);    // compilenode call
                                  var call901 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call902 = callmethodChecked(call901, "collections", [0]);
                                  var call903 = callmethodChecked(call902, "BoundsError", [0]);
                                  var call904 = callmethodChecked(call903, "raiseForIndex", [1], var_index);
                                  if890 = call904;
                                }
                                setLineNumber(770);    // compilenode call
                                onSelf = true;
                                var call905 = callmethodChecked(this, "children", [0]);
                                var call906 = callmethodChecked(call905, "at", [1], var_index);
                                if (!Grace_isTrue(callmethod(var_Component, "match", [1], call906)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method at(1) does not have " + 
                                            callmethod(var_Component, "asString", [0])._value + "."));
                                return call906;
                              };
                              func889.paramTypes = [];
                              func889.paramTypes.push([type_Number, "index"]);
                              func889.paramCounts = [1];
                              obj879.methods["at"] = func889;
                              func889.definitionLine = 765;
                              func889.definitionModule = "stobjectdraw";
                              var func907 = function(argcv) {    // method at(1)put(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_index = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for at (arg list 1) of at(1)put(1)"));
                                var var_aComponent = arguments[curarg];
                                curarg++;
                                if (argcv[1] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for put (arg list 2) of at(1)put(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(774);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in at (arg list 1), which corresponds to parameter index, does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in put (arg list 2), which corresponds to parameter aComponent, does not have " + 
                                            callmethod(var_Component, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("stobjectdraw");
                                var if908 = GraceDone;
                                setLineNumber(775);    // compilenode call
                                onSelf = true;
                                var call910 = callmethodChecked(this, "size", [0]);
                                var opresult912 = callmethodChecked(call910, "+", [1], new GraceNum(1));
                                var opresult915 = callmethodChecked(var_index, ">", [1], opresult912);
                                var opresult919 = callmethodChecked(var_index, "<", [1], new GraceNum(1));
                                var opresult921 = callmethodChecked(opresult919, "||", [1], opresult915);
                                if (Grace_isTrue(opresult921)) {
                                  setLineNumber(776);    // compilenode call
                                  var call922 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call923 = callmethodChecked(call922, "BoundsError", [0]);
                                  var call924 = callmethodChecked(call923, "raiseForIndex", [1], var_index);
                                  if908 = call924;
                                }
                                var if925 = GraceDone;
                                setLineNumber(779);    // compilenode call
                                onSelf = true;
                                var call927 = callmethodChecked(this, "size", [0]);
                                var opresult929 = callmethodChecked(call927, "+", [1], new GraceNum(1));
                                var opresult932 = callmethodChecked(var_index, "==", [1], opresult929);
                                if (Grace_isTrue(opresult932)) {
                                  setLineNumber(780);    // compilenode identifier
                                  var call933 = callmethodChecked(var_aComponent, "element", [0]);
                                  onSelf = true;
                                  var call934 = callmethodChecked(this, "element", [0]);
                                  var call935 = callmethodChecked(call934, "appendChild", [1], call933);
                                  if925 = call935;
                                } else {
                                  setLineNumber(782);    // compilenode identifier
                                  var call936 = callmethodChecked(var_aComponent, "element", [0]);
                                  onSelf = true;
                                  var call937 = callmethodChecked(this, "children", [0]);
                                  var call938 = callmethodChecked(call937, "at", [1], var_index);
                                  var call939 = callmethodChecked(call938, "element", [0]);
                                  onSelf = true;
                                  var call940 = callmethodChecked(this, "element", [0]);
                                  var call941 = callmethodChecked(call940, "insertBefore", [2], call936, call939);
                                  if925 = call941;
                                }
                                setLineNumber(785);    // compilenode call
                                onSelf = true;
                                var call942 = callmethodChecked(this, "children", [0]);
                                var call943 = callmethodChecked(call942, "at()put", [1, 1], var_index, var_aComponent);
                                setLineNumber(787);    // return value
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method at(1)put(1) does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return var_done;
                              };
                              func907.paramTypes = [];
                              func907.paramTypes.push([type_Number, "index"]);
                              func907.paramTypes.push([]);
                              func907.paramCounts = [1, 1];
                              obj879.methods["at()put"] = func907;
                              func907.definitionLine = 774;
                              func907.definitionModule = "stobjectdraw";
                              var func944 = function(argcv) {    // method append(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_aComponent = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for append(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(791);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in append (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                            callmethod(var_Component, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("stobjectdraw");
                                setLineNumber(792);    // compilenode identifier
                                var call945 = callmethodChecked(var_aComponent, "element", [0]);
                                onSelf = true;
                                var call946 = callmethodChecked(this, "element", [0]);
                                var call947 = callmethodChecked(call946, "appendChild", [1], call945);
                                setLineNumber(794);    // compilenode call
                                onSelf = true;
                                var call948 = callmethodChecked(this, "children", [0]);
                                var call949 = callmethodChecked(call948, "push", [1], var_aComponent);
                                setLineNumber(796);    // return value
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method append(1) does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return var_done;
                              };
                              func944.paramTypes = [];
                              func944.paramTypes.push([]);
                              func944.paramCounts = [1];
                              obj879.methods["append"] = func944;
                              func944.definitionLine = 791;
                              func944.definitionModule = "stobjectdraw";
                              var func950 = function(argcv) {    // method prepend(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_aComponent = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for prepend(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(800);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in prepend (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                            callmethod(var_Component, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("stobjectdraw");
                                var if951 = GraceDone;
                                setLineNumber(801);    // compilenode call
                                onSelf = true;
                                var call952 = callmethodChecked(this, "isEmpty", [0]);
                                if (Grace_isTrue(call952)) {
                                  setLineNumber(802);    // compilenode identifier
                                  var call953 = callmethodChecked(var_aComponent, "element", [0]);
                                  onSelf = true;
                                  var call954 = callmethodChecked(this, "element", [0]);
                                  var call955 = callmethodChecked(call954, "appendChild", [1], call953);
                                  if951 = call955;
                                } else {
                                  setLineNumber(804);    // compilenode identifier
                                  var call956 = callmethodChecked(var_aComponent, "element", [0]);
                                  onSelf = true;
                                  var call957 = callmethodChecked(this, "element", [0]);
                                  var call958 = callmethodChecked(call957, "firstChild", [0]);
                                  onSelf = true;
                                  var call959 = callmethodChecked(this, "element", [0]);
                                  var call960 = callmethodChecked(call959, "insertBefore", [2], call956, call958);
                                  if951 = call960;
                                }
                                setLineNumber(807);    // compilenode call
                                onSelf = true;
                                var call961 = callmethodChecked(this, "children", [0]);
                                var call962 = callmethodChecked(call961, "unshift", [1], var_aComponent);
                                setLineNumber(809);    // return value
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method prepend(1) does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return var_done;
                              };
                              func950.paramTypes = [];
                              func950.paramTypes.push([]);
                              func950.paramCounts = [1];
                              obj879.methods["prepend"] = func950;
                              func950.definitionLine = 800;
                              func950.definitionModule = "stobjectdraw";
                              var func963 = function(argcv) {    // method do(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_f = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do(1)"));
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(813);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in do (arg list 1), which corresponds to parameter f, does not have " + 
                                            callmethod(var_Procedure, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("stobjectdraw");
                                setLineNumber(814);    // compilenode call
                                onSelf = true;
                                var call964 = callmethodChecked(this, "children", [0]);
                                var block965 = new GraceBlock(this, 814, 1);
                                setLineNumber(0);    // compilenode string
                                var string966 = new GraceString("aComponent");
                                var call967 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                var call968 = callmethodChecked(call967, "new", [1], string966);
                                var call969 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                var call970 = callmethodChecked(call969, "new", [2], call968, var_Component);
                                block965.pattern = call970;
                                setLineNumber(814);    // compilenode identifier
                                block965.paramTypes = [var_Component];
                                block965.real = function(var_aComponent) {
                                  setLineNumber(815);    // compilenode identifier
                                  var call971 = callmethodChecked(var_f, "apply", [1], var_aComponent);
                                  return call971;
                                };
                                var call972 = callmethodChecked(var_prelude, "for()do", [1, 1], call964, block965);
                                setLineNumber(814);    // return value
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call972)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method do(1) does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return call972;
                              };
                              func963.paramCounts = [1];
                              obj879.methods["do"] = func963;
                              func963.definitionLine = 813;
                              func963.definitionModule = "stobjectdraw";
                              var func973 = function(argcv) {    // method fold(1)startingWith(1)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_f = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fold (arg list 1) of fold(1)startingWith(1)"));
                                var var_initial = arguments[curarg];
                                curarg++;
                                if (argcv[1] !== 1)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startingWith (arg list 2) of fold(1)startingWith(1)"));
                                // Start type arguments
                                var var_T = var_Unknown;
                                if (argcv.length == 3) {
                                  if (argcv[2] !== 1) {
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, 
                                        new GraceString("wrong number of type arguments for fold(1)startingWith(1)"));
                                  }
                                  var_T = arguments[curarg++];
                                }
                                // End type arguments
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(821);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Function2, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in fold (arg list 1), which corresponds to parameter f, does not have " + 
                                            callmethod(var_Function2, "asString", [0])._value + "."));
                                curarg++;
                                setLineNumber(822);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_T, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in startingWith (arg list 2), which corresponds to parameter initial, does not have " + 
                                            callmethod(var_T, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("stobjectdraw");
                                setLineNumber(823);    // compilenode identifier
                                var var_value = var_initial;
                                if (!Grace_isTrue(callmethod(var_T, "match", [1], var_value)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("initial value of var 'value' is not of type T"));
                                setLineNumber(825);    // compilenode call
                                onSelf = true;
                                var call974 = callmethodChecked(this, "children", [0]);
                                var block975 = new GraceBlock(this, 825, 1);
                                setLineNumber(0);    // compilenode string
                                var string976 = new GraceString("aComponent");
                                var call977 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                var call978 = callmethodChecked(call977, "new", [1], string976);
                                var call979 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                var call980 = callmethodChecked(call979, "new", [2], call978, var_Component);
                                block975.pattern = call980;
                                setLineNumber(825);    // compilenode identifier
                                block975.paramTypes = [var_Component];
                                block975.real = function(var_aComponent) {
                                  setLineNumber(826);    // compilenode identifier
                                  var call981 = callmethodChecked(var_f, "apply", [2], var_value, var_aComponent);
                                  var_value = call981;
                                  return GraceDone;
                                };
                                var call982 = callmethodChecked(var_prelude, "for()do", [1, 1], call974, block975);
                                setLineNumber(829);    // return value
                                if (!Grace_isTrue(callmethod(var_T, "match", [1], var_value)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method fold(1)startingWith(1) does not have " + 
                                            callmethod(var_T, "asString", [0])._value + "."));
                                return var_value;
                              };
                              func973.paramTypes = [];
                              func973.paramTypes.push([]);
                              func973.paramTypes.push([]);
                              func973.paramCounts = [1, 1];
                              obj879.methods["fold()startingWith"] = func973;
                              func973.definitionLine = 821;
                              func973.definitionModule = "stobjectdraw";
                              var func983 = function(argcv) {    // method flex
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for flex"));
                                setModuleName("stobjectdraw");
                                setLineNumber(834);    // compilenode string
                                var string984 = new GraceString("inline-flex");
                                onSelf = true;
                                var call985 = callmethodChecked(this, "element", [0]);
                                var call986 = callmethodChecked(call985, "style", [0]);
                                var call987 = callmethodChecked(call986, "display:=", [1], string984);
                                setLineNumber(835);    // compilenode string
                                var string988 = new GraceString("center");
                                onSelf = true;
                                var call989 = callmethodChecked(this, "element", [0]);
                                var call990 = callmethodChecked(call989, "style", [0]);
                                var call991 = callmethodChecked(call990, "justifyContent:=", [1], string988);
                                setLineNumber(836);    // compilenode string
                                var string992 = new GraceString("row wrap");
                                onSelf = true;
                                var call993 = callmethodChecked(this, "element", [0]);
                                var call994 = callmethodChecked(call993, "style", [0]);
                                var call995 = callmethodChecked(call994, "flexFlow:=", [1], string992);
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call995)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method flex does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return call995;
                              };
                              func983.confidential = true;
                              func983.paramCounts = [0];
                              obj879.methods["flex"] = func983;
                              func983.definitionLine = 833;
                              func983.definitionModule = "stobjectdraw";
                              var func996 = function(argcv) {    // method arrangeHorizontal
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeHorizontal"));
                                setModuleName("stobjectdraw");
                                setLineNumber(841);    // compilenode call
                                onSelf = true;
                                var call997 = callmethodChecked(this, "flex", [0]);
                                setLineNumber(842);    // compilenode string
                                var string998 = new GraceString("row");
                                onSelf = true;
                                var call999 = callmethodChecked(this, "element", [0]);
                                var call1000 = callmethodChecked(call999, "style", [0]);
                                var call1001 = callmethodChecked(call1000, "flexDirection:=", [1], string998);
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1001)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method arrangeHorizontal does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return call1001;
                              };
                              func996.paramCounts = [0];
                              obj879.methods["arrangeHorizontal"] = func996;
                              func996.definitionLine = 840;
                              func996.definitionModule = "stobjectdraw";
                              var func1002 = function(argcv) {    // method arrangeVertical
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeVertical"));
                                setModuleName("stobjectdraw");
                                setLineNumber(847);    // compilenode call
                                onSelf = true;
                                var call1003 = callmethodChecked(this, "flex", [0]);
                                setLineNumber(848);    // compilenode string
                                var string1004 = new GraceString("column");
                                onSelf = true;
                                var call1005 = callmethodChecked(this, "element", [0]);
                                var call1006 = callmethodChecked(call1005, "style", [0]);
                                var call1007 = callmethodChecked(call1006, "flexDirection:=", [1], string1004);
                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1007)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method arrangeVertical does not have " + 
                                            callmethod(var_Done, "asString", [0])._value + "."));
                                return call1007;
                              };
                              func1002.paramCounts = [0];
                              obj879.methods["arrangeVertical"] = func1002;
                              func1002.definitionLine = 846;
                              func1002.definitionModule = "stobjectdraw";
                              var func1008 = function(argcv) {    // method asString
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                if (argcv[0] !== 0)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                setModuleName("stobjectdraw");
                                setLineNumber(853);    // compilenode string
                                var string1009 = new GraceString(" children");
                                onSelf = true;
                                var call1011 = callmethodChecked(this, "size", [0]);
                                var string1013 = new GraceString("container: with ");
                                var opresult1015 = callmethodChecked(string1013, "++", [1], call1011);
                                var opresult1017 = callmethodChecked(opresult1015, "++", [1], string1009);
                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1017)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method asString does not have " + 
                                            callmethod(var_String, "asString", [0])._value + "."));
                                return opresult1017;
                              };
                              func1008.paramCounts = [0];
                              obj879.methods["asString"] = func1008;
                              func1008.definitionLine = 852;
                              func1008.definitionModule = "stobjectdraw";
                              setLineNumber(750);    // compilenode call
                              var call1018 = callmethodChecked(superDepth, "outer", [0]);
                              onOuter = true;
                              onSelf = true;
                              var call1019 = callmethodChecked(call1018, "componentFromElement()object", [1, 1], var_element__39__, this);
                              obj879.superobj = call1019;
                              if (call1019.data) obj879.data = call1019.data;
                              if (call1019.hasOwnProperty('_value'))
                                  obj879._value = call1019._value;
                              setLineNumber(752);    // compilenode array
                              var array1020 = new PrimitiveGraceList([]);
                              obj879.data["children"] = array1020;
                              var reader_stobjectdraw_children1021 = function() {
                                return this.data["children"];
                              };
                              reader_stobjectdraw_children1021.def = true;
                              reader_stobjectdraw_children1021.confidential = true;
                              obj879.methods["children"] = reader_stobjectdraw_children1021;
                              superDepth = origSuperDepth;
                            };
                            obj_init_879.apply(obj879, []);
                            setLineNumber(749);    // return value
                            if (!Grace_isTrue(callmethod(var_Container, "match", [1], obj879)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method containerFromElement(1) does not have " + 
                                        callmethod(var_Container, "asString", [0])._value + "."));
                            return obj879;
                          };
                          func878.paramCounts = [1];
                          this.methods["containerFromElement"] = func878;
                          func878.definitionLine = 749;
                          func878.definitionModule = "stobjectdraw";
                            var func1022 = function(argcv) {    // method containerFromElement(1     )()object
                              var curarg = 1;
                              var var_element__39__ = arguments[curarg];
                              curarg++;
                              var inheritingObject = arguments[curarg++];
                              // Start argument processing
                              curarg = 1;
                              curarg++;
                              // End argument processing
                              setModuleName("stobjectdraw");
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var obj1023 = Grace_allocObject(null, "containerFromElement");
                              obj1023.definitionModule = "stobjectdraw";
                              obj1023.definitionLine = 749;
                              var inho1023 = inheritingObject;
                              while (inho1023.superobj) inho1023 = inho1023.superobj;
                              inho1023.superobj = obj1023;
                              obj1023.data = inheritingObject.data;
                              if (inheritingObject.hasOwnProperty('_value'))
                                obj1023._value = inheritingObject._value;
                              obj1023.outer = this;
                              var reader_stobjectdraw_outer1024 = function() {
                                return this.outer;
                              };
                              obj1023.methods["outer"] = reader_stobjectdraw_outer1024;
                              var obj_init_1023 = function() {
                                var origSuperDepth = superDepth;
                                superDepth = obj1023;
                                var func1025 = function(argcv) {    // method size
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                  setModuleName("stobjectdraw");
                                  setLineNumber(756);    // compilenode call
                                  onSelf = true;
                                  var call1026 = callmethodChecked(this, "children", [0]);
                                  var call1027 = callmethodChecked(call1026, "size", [0]);
                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1027)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method size does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  return call1027;
                                };
                                func1025.paramCounts = [0];
                                obj1023.methods["size"] = func1025;
                                func1025.definitionLine = 755;
                                func1025.definitionModule = "stobjectdraw";
                                var func1028 = function(argcv) {    // method isEmpty
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEmpty"));
                                  setModuleName("stobjectdraw");
                                  setLineNumber(761);    // compilenode call
                                  onSelf = true;
                                  var call1030 = callmethodChecked(this, "size", [0]);
                                  var opresult1032 = callmethodChecked(call1030, "==", [1], new GraceNum(0));
                                  if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult1032)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method isEmpty does not have " + 
                                              callmethod(var_Boolean, "asString", [0])._value + "."));
                                  return opresult1032;
                                };
                                func1028.paramCounts = [0];
                                obj1023.methods["isEmpty"] = func1028;
                                func1028.definitionLine = 760;
                                func1028.definitionModule = "stobjectdraw";
                                var func1033 = function(argcv) {    // method at(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_index = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for at(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(765);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in at (arg list 1), which corresponds to parameter index, does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("stobjectdraw");
                                  var if1034 = GraceDone;
                                  setLineNumber(766);    // compilenode call
                                  onSelf = true;
                                  var call1035 = callmethodChecked(this, "size", [0]);
                                  var opresult1038 = callmethodChecked(var_index, ">", [1], call1035);
                                  var opresult1042 = callmethodChecked(var_index, "<", [1], new GraceNum(1));
                                  var opresult1044 = callmethodChecked(opresult1042, "||", [1], opresult1038);
                                  if (Grace_isTrue(opresult1044)) {
                                    setLineNumber(767);    // compilenode call
                                    var call1045 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call1046 = callmethodChecked(call1045, "collections", [0]);
                                    var call1047 = callmethodChecked(call1046, "BoundsError", [0]);
                                    var call1048 = callmethodChecked(call1047, "raiseForIndex", [1], var_index);
                                    if1034 = call1048;
                                  }
                                  setLineNumber(770);    // compilenode call
                                  onSelf = true;
                                  var call1049 = callmethodChecked(this, "children", [0]);
                                  var call1050 = callmethodChecked(call1049, "at", [1], var_index);
                                  if (!Grace_isTrue(callmethod(var_Component, "match", [1], call1050)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method at(1) does not have " + 
                                              callmethod(var_Component, "asString", [0])._value + "."));
                                  return call1050;
                                };
                                func1033.paramTypes = [];
                                func1033.paramTypes.push([type_Number, "index"]);
                                func1033.paramCounts = [1];
                                obj1023.methods["at"] = func1033;
                                func1033.definitionLine = 765;
                                func1033.definitionModule = "stobjectdraw";
                                var func1051 = function(argcv) {    // method at(1)put(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_index = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for at (arg list 1) of at(1)put(1)"));
                                  var var_aComponent = arguments[curarg];
                                  curarg++;
                                  if (argcv[1] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for put (arg list 2) of at(1)put(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(774);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in at (arg list 1), which corresponds to parameter index, does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in put (arg list 2), which corresponds to parameter aComponent, does not have " + 
                                              callmethod(var_Component, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("stobjectdraw");
                                  var if1052 = GraceDone;
                                  setLineNumber(775);    // compilenode call
                                  onSelf = true;
                                  var call1054 = callmethodChecked(this, "size", [0]);
                                  var opresult1056 = callmethodChecked(call1054, "+", [1], new GraceNum(1));
                                  var opresult1059 = callmethodChecked(var_index, ">", [1], opresult1056);
                                  var opresult1063 = callmethodChecked(var_index, "<", [1], new GraceNum(1));
                                  var opresult1065 = callmethodChecked(opresult1063, "||", [1], opresult1059);
                                  if (Grace_isTrue(opresult1065)) {
                                    setLineNumber(776);    // compilenode call
                                    var call1066 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call1067 = callmethodChecked(call1066, "BoundsError", [0]);
                                    var call1068 = callmethodChecked(call1067, "raiseForIndex", [1], var_index);
                                    if1052 = call1068;
                                  }
                                  var if1069 = GraceDone;
                                  setLineNumber(779);    // compilenode call
                                  onSelf = true;
                                  var call1071 = callmethodChecked(this, "size", [0]);
                                  var opresult1073 = callmethodChecked(call1071, "+", [1], new GraceNum(1));
                                  var opresult1076 = callmethodChecked(var_index, "==", [1], opresult1073);
                                  if (Grace_isTrue(opresult1076)) {
                                    setLineNumber(780);    // compilenode identifier
                                    var call1077 = callmethodChecked(var_aComponent, "element", [0]);
                                    onSelf = true;
                                    var call1078 = callmethodChecked(this, "element", [0]);
                                    var call1079 = callmethodChecked(call1078, "appendChild", [1], call1077);
                                    if1069 = call1079;
                                  } else {
                                    setLineNumber(782);    // compilenode identifier
                                    var call1080 = callmethodChecked(var_aComponent, "element", [0]);
                                    onSelf = true;
                                    var call1081 = callmethodChecked(this, "children", [0]);
                                    var call1082 = callmethodChecked(call1081, "at", [1], var_index);
                                    var call1083 = callmethodChecked(call1082, "element", [0]);
                                    onSelf = true;
                                    var call1084 = callmethodChecked(this, "element", [0]);
                                    var call1085 = callmethodChecked(call1084, "insertBefore", [2], call1080, call1083);
                                    if1069 = call1085;
                                  }
                                  setLineNumber(785);    // compilenode call
                                  onSelf = true;
                                  var call1086 = callmethodChecked(this, "children", [0]);
                                  var call1087 = callmethodChecked(call1086, "at()put", [1, 1], var_index, var_aComponent);
                                  setLineNumber(787);    // return value
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method at(1)put(1) does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return var_done;
                                };
                                func1051.paramTypes = [];
                                func1051.paramTypes.push([type_Number, "index"]);
                                func1051.paramTypes.push([]);
                                func1051.paramCounts = [1, 1];
                                obj1023.methods["at()put"] = func1051;
                                func1051.definitionLine = 774;
                                func1051.definitionModule = "stobjectdraw";
                                var func1088 = function(argcv) {    // method append(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_aComponent = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for append(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(791);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in append (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                              callmethod(var_Component, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("stobjectdraw");
                                  setLineNumber(792);    // compilenode identifier
                                  var call1089 = callmethodChecked(var_aComponent, "element", [0]);
                                  onSelf = true;
                                  var call1090 = callmethodChecked(this, "element", [0]);
                                  var call1091 = callmethodChecked(call1090, "appendChild", [1], call1089);
                                  setLineNumber(794);    // compilenode call
                                  onSelf = true;
                                  var call1092 = callmethodChecked(this, "children", [0]);
                                  var call1093 = callmethodChecked(call1092, "push", [1], var_aComponent);
                                  setLineNumber(796);    // return value
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method append(1) does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return var_done;
                                };
                                func1088.paramTypes = [];
                                func1088.paramTypes.push([]);
                                func1088.paramCounts = [1];
                                obj1023.methods["append"] = func1088;
                                func1088.definitionLine = 791;
                                func1088.definitionModule = "stobjectdraw";
                                var func1094 = function(argcv) {    // method prepend(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_aComponent = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for prepend(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(800);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in prepend (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                              callmethod(var_Component, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("stobjectdraw");
                                  var if1095 = GraceDone;
                                  setLineNumber(801);    // compilenode call
                                  onSelf = true;
                                  var call1096 = callmethodChecked(this, "isEmpty", [0]);
                                  if (Grace_isTrue(call1096)) {
                                    setLineNumber(802);    // compilenode identifier
                                    var call1097 = callmethodChecked(var_aComponent, "element", [0]);
                                    onSelf = true;
                                    var call1098 = callmethodChecked(this, "element", [0]);
                                    var call1099 = callmethodChecked(call1098, "appendChild", [1], call1097);
                                    if1095 = call1099;
                                  } else {
                                    setLineNumber(804);    // compilenode identifier
                                    var call1100 = callmethodChecked(var_aComponent, "element", [0]);
                                    onSelf = true;
                                    var call1101 = callmethodChecked(this, "element", [0]);
                                    var call1102 = callmethodChecked(call1101, "firstChild", [0]);
                                    onSelf = true;
                                    var call1103 = callmethodChecked(this, "element", [0]);
                                    var call1104 = callmethodChecked(call1103, "insertBefore", [2], call1100, call1102);
                                    if1095 = call1104;
                                  }
                                  setLineNumber(807);    // compilenode call
                                  onSelf = true;
                                  var call1105 = callmethodChecked(this, "children", [0]);
                                  var call1106 = callmethodChecked(call1105, "unshift", [1], var_aComponent);
                                  setLineNumber(809);    // return value
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method prepend(1) does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return var_done;
                                };
                                func1094.paramTypes = [];
                                func1094.paramTypes.push([]);
                                func1094.paramCounts = [1];
                                obj1023.methods["prepend"] = func1094;
                                func1094.definitionLine = 800;
                                func1094.definitionModule = "stobjectdraw";
                                var func1107 = function(argcv) {    // method do(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_f = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do(1)"));
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(813);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in do (arg list 1), which corresponds to parameter f, does not have " + 
                                              callmethod(var_Procedure, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("stobjectdraw");
                                  setLineNumber(814);    // compilenode call
                                  onSelf = true;
                                  var call1108 = callmethodChecked(this, "children", [0]);
                                  var block1109 = new GraceBlock(this, 814, 1);
                                  setLineNumber(0);    // compilenode string
                                  var string1110 = new GraceString("aComponent");
                                  var call1111 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                  var call1112 = callmethodChecked(call1111, "new", [1], string1110);
                                  var call1113 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                  var call1114 = callmethodChecked(call1113, "new", [2], call1112, var_Component);
                                  block1109.pattern = call1114;
                                  setLineNumber(814);    // compilenode identifier
                                  block1109.paramTypes = [var_Component];
                                  block1109.real = function(var_aComponent) {
                                    setLineNumber(815);    // compilenode identifier
                                    var call1115 = callmethodChecked(var_f, "apply", [1], var_aComponent);
                                    return call1115;
                                  };
                                  var call1116 = callmethodChecked(var_prelude, "for()do", [1, 1], call1108, block1109);
                                  setLineNumber(814);    // return value
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1116)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method do(1) does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return call1116;
                                };
                                func1107.paramCounts = [1];
                                obj1023.methods["do"] = func1107;
                                func1107.definitionLine = 813;
                                func1107.definitionModule = "stobjectdraw";
                                var func1117 = function(argcv) {    // method fold(1)startingWith(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_f = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fold (arg list 1) of fold(1)startingWith(1)"));
                                  var var_initial = arguments[curarg];
                                  curarg++;
                                  if (argcv[1] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startingWith (arg list 2) of fold(1)startingWith(1)"));
                                  // Start type arguments
                                  var var_T = var_Unknown;
                                  if (argcv.length == 3) {
                                    if (argcv[2] !== 1) {
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, 
                                          new GraceString("wrong number of type arguments for fold(1)startingWith(1)"));
                                    }
                                    var_T = arguments[curarg++];
                                  }
                                  // End type arguments
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(821);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Function2, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in fold (arg list 1), which corresponds to parameter f, does not have " + 
                                              callmethod(var_Function2, "asString", [0])._value + "."));
                                  curarg++;
                                  setLineNumber(822);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_T, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in startingWith (arg list 2), which corresponds to parameter initial, does not have " + 
                                              callmethod(var_T, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("stobjectdraw");
                                  setLineNumber(823);    // compilenode identifier
                                  var var_value = var_initial;
                                  if (!Grace_isTrue(callmethod(var_T, "match", [1], var_value)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("initial value of var 'value' is not of type T"));
                                  setLineNumber(825);    // compilenode call
                                  onSelf = true;
                                  var call1118 = callmethodChecked(this, "children", [0]);
                                  var block1119 = new GraceBlock(this, 825, 1);
                                  setLineNumber(0);    // compilenode string
                                  var string1120 = new GraceString("aComponent");
                                  var call1121 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                  var call1122 = callmethodChecked(call1121, "new", [1], string1120);
                                  var call1123 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                  var call1124 = callmethodChecked(call1123, "new", [2], call1122, var_Component);
                                  block1119.pattern = call1124;
                                  setLineNumber(825);    // compilenode identifier
                                  block1119.paramTypes = [var_Component];
                                  block1119.real = function(var_aComponent) {
                                    setLineNumber(826);    // compilenode identifier
                                    var call1125 = callmethodChecked(var_f, "apply", [2], var_value, var_aComponent);
                                    var_value = call1125;
                                    return GraceDone;
                                  };
                                  var call1126 = callmethodChecked(var_prelude, "for()do", [1, 1], call1118, block1119);
                                  setLineNumber(829);    // return value
                                  if (!Grace_isTrue(callmethod(var_T, "match", [1], var_value)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method fold(1)startingWith(1) does not have " + 
                                              callmethod(var_T, "asString", [0])._value + "."));
                                  return var_value;
                                };
                                func1117.paramTypes = [];
                                func1117.paramTypes.push([]);
                                func1117.paramTypes.push([]);
                                func1117.paramCounts = [1, 1];
                                obj1023.methods["fold()startingWith"] = func1117;
                                func1117.definitionLine = 821;
                                func1117.definitionModule = "stobjectdraw";
                                var func1127 = function(argcv) {    // method flex
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for flex"));
                                  setModuleName("stobjectdraw");
                                  setLineNumber(834);    // compilenode string
                                  var string1128 = new GraceString("inline-flex");
                                  onSelf = true;
                                  var call1129 = callmethodChecked(this, "element", [0]);
                                  var call1130 = callmethodChecked(call1129, "style", [0]);
                                  var call1131 = callmethodChecked(call1130, "display:=", [1], string1128);
                                  setLineNumber(835);    // compilenode string
                                  var string1132 = new GraceString("center");
                                  onSelf = true;
                                  var call1133 = callmethodChecked(this, "element", [0]);
                                  var call1134 = callmethodChecked(call1133, "style", [0]);
                                  var call1135 = callmethodChecked(call1134, "justifyContent:=", [1], string1132);
                                  setLineNumber(836);    // compilenode string
                                  var string1136 = new GraceString("row wrap");
                                  onSelf = true;
                                  var call1137 = callmethodChecked(this, "element", [0]);
                                  var call1138 = callmethodChecked(call1137, "style", [0]);
                                  var call1139 = callmethodChecked(call1138, "flexFlow:=", [1], string1136);
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1139)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method flex does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return call1139;
                                };
                                func1127.confidential = true;
                                func1127.paramCounts = [0];
                                obj1023.methods["flex"] = func1127;
                                func1127.definitionLine = 833;
                                func1127.definitionModule = "stobjectdraw";
                                var func1140 = function(argcv) {    // method arrangeHorizontal
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeHorizontal"));
                                  setModuleName("stobjectdraw");
                                  setLineNumber(841);    // compilenode call
                                  onSelf = true;
                                  var call1141 = callmethodChecked(this, "flex", [0]);
                                  setLineNumber(842);    // compilenode string
                                  var string1142 = new GraceString("row");
                                  onSelf = true;
                                  var call1143 = callmethodChecked(this, "element", [0]);
                                  var call1144 = callmethodChecked(call1143, "style", [0]);
                                  var call1145 = callmethodChecked(call1144, "flexDirection:=", [1], string1142);
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1145)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method arrangeHorizontal does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return call1145;
                                };
                                func1140.paramCounts = [0];
                                obj1023.methods["arrangeHorizontal"] = func1140;
                                func1140.definitionLine = 840;
                                func1140.definitionModule = "stobjectdraw";
                                var func1146 = function(argcv) {    // method arrangeVertical
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeVertical"));
                                  setModuleName("stobjectdraw");
                                  setLineNumber(847);    // compilenode call
                                  onSelf = true;
                                  var call1147 = callmethodChecked(this, "flex", [0]);
                                  setLineNumber(848);    // compilenode string
                                  var string1148 = new GraceString("column");
                                  onSelf = true;
                                  var call1149 = callmethodChecked(this, "element", [0]);
                                  var call1150 = callmethodChecked(call1149, "style", [0]);
                                  var call1151 = callmethodChecked(call1150, "flexDirection:=", [1], string1148);
                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1151)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method arrangeVertical does not have " + 
                                              callmethod(var_Done, "asString", [0])._value + "."));
                                  return call1151;
                                };
                                func1146.paramCounts = [0];
                                obj1023.methods["arrangeVertical"] = func1146;
                                func1146.definitionLine = 846;
                                func1146.definitionModule = "stobjectdraw";
                                var func1152 = function(argcv) {    // method asString
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  if (argcv[0] !== 0)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                  setModuleName("stobjectdraw");
                                  setLineNumber(853);    // compilenode string
                                  var string1153 = new GraceString(" children");
                                  onSelf = true;
                                  var call1155 = callmethodChecked(this, "size", [0]);
                                  var string1157 = new GraceString("container: with ");
                                  var opresult1159 = callmethodChecked(string1157, "++", [1], call1155);
                                  var opresult1161 = callmethodChecked(opresult1159, "++", [1], string1153);
                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1161)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method asString does not have " + 
                                              callmethod(var_String, "asString", [0])._value + "."));
                                  return opresult1161;
                                };
                                func1152.paramCounts = [0];
                                obj1023.methods["asString"] = func1152;
                                func1152.definitionLine = 852;
                                func1152.definitionModule = "stobjectdraw";
                                setLineNumber(750);    // compilenode call
                                var call1162 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call1163 = callmethodChecked(call1162, "componentFromElement()object", [1, 1], var_element__39__, this);
                                obj1023.superobj = call1163;
                                if (call1163.data) obj1023.data = call1163.data;
                                if (call1163.hasOwnProperty('_value'))
                                    obj1023._value = call1163._value;
                                setLineNumber(752);    // compilenode array
                                var array1164 = new PrimitiveGraceList([]);
                                obj1023.data["children"] = array1164;
                                var reader_stobjectdraw_children1165 = function() {
                                  return this.data["children"];
                                };
                                reader_stobjectdraw_children1165.def = true;
                                reader_stobjectdraw_children1165.confidential = true;
                                obj1023.methods["children"] = reader_stobjectdraw_children1165;
                                superDepth = origSuperDepth;
                              };
                              obj_init_1023.apply(inheritingObject, []);
                              return obj1023;
                              };
                              this.methods["containerFromElement()object"] = func1022;
                            setLineNumber(858);    // compilenode method
                            var func1166 = function(argcv) {    // method containerEmpty
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              if (argcv[0] !== 0)
                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for containerEmpty"));
                              setModuleName("stobjectdraw");
                              var obj1167 = Grace_allocObject(null, "stobjectdraw.containerEmpty");
                              obj1167.definitionModule = "stobjectdraw";
                              obj1167.definitionLine = 858;
                              obj1167.outer = this;
                              var reader_stobjectdraw_outer1168 = function() {
                                return this.outer;
                              };
                              obj1167.methods["outer"] = reader_stobjectdraw_outer1168;
                              var obj_init_1167 = function() {
                                var origSuperDepth = superDepth;
                                superDepth = obj1167;
                                setLineNumber(859);    // compilenode string
                                var string1169 = new GraceString("div");
                                var call1170 = callmethodChecked(superDepth, "outer", [0]);
                                onOuter = true;
                                onSelf = true;
                                var call1171 = callmethodChecked(call1170, "containerOfElementType()object", [1, 1], string1169, this);
                                obj1167.superobj = call1171;
                                if (call1171.data) obj1167.data = call1171.data;
                                if (call1171.hasOwnProperty('_value'))
                                    obj1167._value = call1171._value;
                                setLineNumber(861);    // compilenode call
                                onSelf = true;
                                var call1172 = callmethodChecked(this, "arrangeHorizontal", [0]);
                                superDepth = origSuperDepth;
                              };
                              obj_init_1167.apply(obj1167, []);
                              setLineNumber(858);    // return value
                              if (!Grace_isTrue(callmethod(var_Container, "match", [1], obj1167)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("result of method containerEmpty does not have " + 
                                          callmethod(var_Container, "asString", [0])._value + "."));
                              return obj1167;
                            };
                            func1166.paramCounts = [0];
                            this.methods["containerEmpty"] = func1166;
                            func1166.definitionLine = 858;
                            func1166.definitionModule = "stobjectdraw";
                              var func1173 = function(argcv) {    // method containerEmpty()object
                                var curarg = 1;
                                var inheritingObject = arguments[curarg++];
                                // Start argument processing
                                curarg = 1;
                                // End argument processing
                                setModuleName("stobjectdraw");
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var obj1174 = Grace_allocObject(null, "containerEmpty");
                                obj1174.definitionModule = "stobjectdraw";
                                obj1174.definitionLine = 858;
                                var inho1174 = inheritingObject;
                                while (inho1174.superobj) inho1174 = inho1174.superobj;
                                inho1174.superobj = obj1174;
                                obj1174.data = inheritingObject.data;
                                if (inheritingObject.hasOwnProperty('_value'))
                                  obj1174._value = inheritingObject._value;
                                obj1174.outer = this;
                                var reader_stobjectdraw_outer1175 = function() {
                                  return this.outer;
                                };
                                obj1174.methods["outer"] = reader_stobjectdraw_outer1175;
                                var obj_init_1174 = function() {
                                  var origSuperDepth = superDepth;
                                  superDepth = obj1174;
                                  setLineNumber(859);    // compilenode string
                                  var string1176 = new GraceString("div");
                                  var call1177 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call1178 = callmethodChecked(call1177, "containerOfElementType()object", [1, 1], string1176, this);
                                  obj1174.superobj = call1178;
                                  if (call1178.data) obj1174.data = call1178.data;
                                  if (call1178.hasOwnProperty('_value'))
                                      obj1174._value = call1178._value;
                                  setLineNumber(861);    // compilenode call
                                  onSelf = true;
                                  var call1179 = callmethodChecked(this, "arrangeHorizontal", [0]);
                                  superDepth = origSuperDepth;
                                };
                                obj_init_1174.apply(inheritingObject, []);
                                return obj1174;
                                };
                                this.methods["containerEmpty()object"] = func1173;
                              setLineNumber(865);    // compilenode method
                              var func1180 = function(argcv) {    // method containerSize(2)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_width__39__ = arguments[curarg];
                                curarg++;
                                var var_height__39__ = arguments[curarg];
                                curarg++;
                                if (argcv[0] !== 2)
                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for containerSize(2)"));
                                // Start argument checking
                                curarg = 1;
                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in containerSize (arg list 1), which corresponds to parameter width', does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 2 in containerSize (arg list 1), which corresponds to parameter height', does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("stobjectdraw");
                                var obj1181 = Grace_allocObject(null, "stobjectdraw.containerSize");
                                obj1181.definitionModule = "stobjectdraw";
                                obj1181.definitionLine = 865;
                                obj1181.outer = this;
                                var reader_stobjectdraw_outer1182 = function() {
                                  return this.outer;
                                };
                                obj1181.methods["outer"] = reader_stobjectdraw_outer1182;
                                var obj_init_1181 = function() {
                                  var origSuperDepth = superDepth;
                                  superDepth = obj1181;
                                  setLineNumber(866);    // compilenode call
                                  var call1183 = callmethodChecked(superDepth, "outer", [0]);
                                  onOuter = true;
                                  onSelf = true;
                                  var call1184 = callmethodChecked(call1183, "containerEmpty()object", [0, 1], this);
                                  obj1181.superobj = call1184;
                                  if (call1184.data) obj1181.data = call1184.data;
                                  if (call1184.hasOwnProperty('_value'))
                                      obj1181._value = call1184._value;
                                  setLineNumber(868);    // compilenode string
                                  var string1185 = new GraceString("px");
                                  var string1188 = new GraceString("");
                                  var opresult1190 = callmethodChecked(string1188, "++", [1], var_width__39__);
                                  var opresult1192 = callmethodChecked(opresult1190, "++", [1], string1185);
                                  onSelf = true;
                                  var call1193 = callmethodChecked(this, "element", [0]);
                                  var call1194 = callmethodChecked(call1193, "style", [0]);
                                  var call1195 = callmethodChecked(call1194, "width:=", [1], opresult1192);
                                  setLineNumber(869);    // compilenode string
                                  var string1196 = new GraceString("px");
                                  var string1199 = new GraceString("");
                                  var opresult1201 = callmethodChecked(string1199, "++", [1], var_height__39__);
                                  var opresult1203 = callmethodChecked(opresult1201, "++", [1], string1196);
                                  onSelf = true;
                                  var call1204 = callmethodChecked(this, "element", [0]);
                                  var call1205 = callmethodChecked(call1204, "style", [0]);
                                  var call1206 = callmethodChecked(call1205, "height:=", [1], opresult1203);
                                  setLineNumber(870);    // compilenode string
                                  var string1207 = new GraceString("auto");
                                  onSelf = true;
                                  var call1208 = callmethodChecked(this, "element", [0]);
                                  var call1209 = callmethodChecked(call1208, "style", [0]);
                                  var call1210 = callmethodChecked(call1209, "overflow:=", [1], string1207);
                                  superDepth = origSuperDepth;
                                };
                                obj_init_1181.apply(obj1181, []);
                                setLineNumber(865);    // return value
                                if (!Grace_isTrue(callmethod(var_Container, "match", [1], obj1181)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method containerSize(2) does not have " + 
                                            callmethod(var_Container, "asString", [0])._value + "."));
                                return obj1181;
                              };
                              func1180.paramTypes = [];
                              func1180.paramTypes.push([type_Number, "width'"]);
                              func1180.paramTypes.push([type_Number, "height'"]);
                              func1180.paramCounts = [2];
                              this.methods["containerSize"] = func1180;
                              func1180.definitionLine = 865;
                              func1180.definitionModule = "stobjectdraw";
                                var func1211 = function(argcv) {    // method containerSize(2     )()object
                                  var curarg = 1;
                                  var var_width__39__ = arguments[curarg];
                                  curarg++;
                                  var var_height__39__ = arguments[curarg];
                                  curarg++;
                                  var inheritingObject = arguments[curarg++];
                                  // Start argument processing
                                  curarg = 1;
                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in containerSize (arg list 1), which corresponds to parameter width', does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 2 in containerSize (arg list 1), which corresponds to parameter height', does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument processing
                                  setModuleName("stobjectdraw");
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var obj1212 = Grace_allocObject(null, "containerSize");
                                  obj1212.definitionModule = "stobjectdraw";
                                  obj1212.definitionLine = 865;
                                  var inho1212 = inheritingObject;
                                  while (inho1212.superobj) inho1212 = inho1212.superobj;
                                  inho1212.superobj = obj1212;
                                  obj1212.data = inheritingObject.data;
                                  if (inheritingObject.hasOwnProperty('_value'))
                                    obj1212._value = inheritingObject._value;
                                  obj1212.outer = this;
                                  var reader_stobjectdraw_outer1213 = function() {
                                    return this.outer;
                                  };
                                  obj1212.methods["outer"] = reader_stobjectdraw_outer1213;
                                  var obj_init_1212 = function() {
                                    var origSuperDepth = superDepth;
                                    superDepth = obj1212;
                                    setLineNumber(866);    // compilenode call
                                    var call1214 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call1215 = callmethodChecked(call1214, "containerEmpty()object", [0, 1], this);
                                    obj1212.superobj = call1215;
                                    if (call1215.data) obj1212.data = call1215.data;
                                    if (call1215.hasOwnProperty('_value'))
                                        obj1212._value = call1215._value;
                                    setLineNumber(868);    // compilenode string
                                    var string1216 = new GraceString("px");
                                    var string1219 = new GraceString("");
                                    var opresult1221 = callmethodChecked(string1219, "++", [1], var_width__39__);
                                    var opresult1223 = callmethodChecked(opresult1221, "++", [1], string1216);
                                    onSelf = true;
                                    var call1224 = callmethodChecked(this, "element", [0]);
                                    var call1225 = callmethodChecked(call1224, "style", [0]);
                                    var call1226 = callmethodChecked(call1225, "width:=", [1], opresult1223);
                                    setLineNumber(869);    // compilenode string
                                    var string1227 = new GraceString("px");
                                    var string1230 = new GraceString("");
                                    var opresult1232 = callmethodChecked(string1230, "++", [1], var_height__39__);
                                    var opresult1234 = callmethodChecked(opresult1232, "++", [1], string1227);
                                    onSelf = true;
                                    var call1235 = callmethodChecked(this, "element", [0]);
                                    var call1236 = callmethodChecked(call1235, "style", [0]);
                                    var call1237 = callmethodChecked(call1236, "height:=", [1], opresult1234);
                                    setLineNumber(870);    // compilenode string
                                    var string1238 = new GraceString("auto");
                                    onSelf = true;
                                    var call1239 = callmethodChecked(this, "element", [0]);
                                    var call1240 = callmethodChecked(call1239, "style", [0]);
                                    var call1241 = callmethodChecked(call1240, "overflow:=", [1], string1238);
                                    superDepth = origSuperDepth;
                                  };
                                  obj_init_1212.apply(inheritingObject, []);
                                  return obj1212;
                                  };
                                  func1211.paramTypes = [];
                                  func1211.paramTypes.push([type_Number, "width'"]);
                                  func1211.paramTypes.push([type_Number, "height'"]);
                                  this.methods["containerSize()object"] = func1211;
                                setLineNumber(875);    // compilenode method
                                var func1242 = function(argcv) {    // method inputFromElement(1)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_element__39__ = arguments[curarg];
                                  curarg++;
                                  if (argcv[0] !== 1)
                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inputFromElement(1)"));
                                  setModuleName("stobjectdraw");
                                  var obj1243 = Grace_allocObject(null, "stobjectdraw.inputFromElement");
                                  obj1243.definitionModule = "stobjectdraw";
                                  obj1243.definitionLine = 875;
                                  obj1243.outer = this;
                                  var reader_stobjectdraw_outer1244 = function() {
                                    return this.outer;
                                  };
                                  obj1243.methods["outer"] = reader_stobjectdraw_outer1244;
                                  var obj_init_1243 = function() {
                                    var origSuperDepth = superDepth;
                                    superDepth = obj1243;
                                    var func1245 = function(argcv) {    // method onFocusDo(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_f = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onFocusDo(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(879);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in onFocusDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                  callmethod(var_Response, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("stobjectdraw");
                                      setLineNumber(880);    // compilenode string
                                      var string1246 = new GraceString("focus");
                                      var block1247 = new GraceBlock(this, 880, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block1247.real = function(var___95____95__20) {
                                        setLineNumber(881);    // compilenode identifier
                                        onSelf = true;
                                        var call1248 = callmethodChecked(this, "eventSource", [1], this);
                                        var call1249 = callmethodChecked(var_f, "apply", [1], call1248);
                                        return call1249;
                                      };
                                      setLineNumber(880);    // compilenode call
                                      onSelf = true;
                                      var call1250 = callmethodChecked(this, "element", [0]);
                                      var call1251 = callmethodChecked(call1250, "addEventListener", [2], string1246, block1247);
                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1251)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method onFocusDo(1) does not have " + 
                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                      return call1251;
                                    };
                                    func1245.paramTypes = [];
                                    func1245.paramTypes.push([]);
                                    func1245.paramCounts = [1];
                                    obj1243.methods["onFocusDo"] = func1245;
                                    func1245.definitionLine = 879;
                                    func1245.definitionModule = "stobjectdraw";
                                    var func1252 = function(argcv) {    // method onBlurDo(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_f = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onBlurDo(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(886);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in onBlurDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                  callmethod(var_Response, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("stobjectdraw");
                                      setLineNumber(887);    // compilenode string
                                      var string1253 = new GraceString("blur");
                                      var block1254 = new GraceBlock(this, 887, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block1254.real = function(var___95____95__21) {
                                        setLineNumber(888);    // compilenode identifier
                                        onSelf = true;
                                        var call1255 = callmethodChecked(this, "eventSource", [1], this);
                                        var call1256 = callmethodChecked(var_f, "apply", [1], call1255);
                                        return call1256;
                                      };
                                      setLineNumber(887);    // compilenode call
                                      onSelf = true;
                                      var call1257 = callmethodChecked(this, "element", [0]);
                                      var call1258 = callmethodChecked(call1257, "addEventListener", [2], string1253, block1254);
                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1258)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method onBlurDo(1) does not have " + 
                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                      return call1258;
                                    };
                                    func1252.paramTypes = [];
                                    func1252.paramTypes.push([]);
                                    func1252.paramCounts = [1];
                                    obj1243.methods["onBlurDo"] = func1252;
                                    func1252.definitionLine = 886;
                                    func1252.definitionModule = "stobjectdraw";
                                    var func1259 = function(argcv) {    // method onChangeDo(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_f = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onChangeDo(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(893);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in onChangeDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                  callmethod(var_Response, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("stobjectdraw");
                                      setLineNumber(894);    // compilenode string
                                      var string1260 = new GraceString("change");
                                      var block1261 = new GraceBlock(this, 894, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block1261.real = function(var___95____95__22) {
                                        setLineNumber(895);    // compilenode identifier
                                        onSelf = true;
                                        var call1262 = callmethodChecked(this, "eventSource", [1], this);
                                        var call1263 = callmethodChecked(var_f, "apply", [1], call1262);
                                        return call1263;
                                      };
                                      setLineNumber(894);    // compilenode call
                                      onSelf = true;
                                      var call1264 = callmethodChecked(this, "element", [0]);
                                      var call1265 = callmethodChecked(call1264, "addEventListener", [2], string1260, block1261);
                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1265)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method onChangeDo(1) does not have " + 
                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                      return call1265;
                                    };
                                    func1259.paramTypes = [];
                                    func1259.paramTypes.push([]);
                                    func1259.paramCounts = [1];
                                    obj1243.methods["onChangeDo"] = func1259;
                                    func1259.definitionLine = 893;
                                    func1259.definitionModule = "stobjectdraw";
                                    var func1266 = function(argcv) {    // method asString
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      if (argcv[0] !== 0)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                      setModuleName("stobjectdraw");
                                      setLineNumber(901);    // compilenode string
                                      var string1267 = new GraceString("an input");
                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], string1267)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method asString does not have " + 
                                                  callmethod(var_String, "asString", [0])._value + "."));
                                      return string1267;
                                    };
                                    func1266.paramCounts = [0];
                                    obj1243.methods["asString"] = func1266;
                                    func1266.definitionLine = 900;
                                    func1266.definitionModule = "stobjectdraw";
                                    setLineNumber(876);    // compilenode call
                                    var call1268 = callmethodChecked(superDepth, "outer", [0]);
                                    onOuter = true;
                                    onSelf = true;
                                    var call1269 = callmethodChecked(call1268, "componentFromElement()object", [1, 1], var_element__39__, this);
                                    obj1243.superobj = call1269;
                                    if (call1269.data) obj1243.data = call1269.data;
                                    if (call1269.hasOwnProperty('_value'))
                                        obj1243._value = call1269._value;
                                    superDepth = origSuperDepth;
                                  };
                                  obj_init_1243.apply(obj1243, []);
                                  setLineNumber(875);    // return value
                                  if (!Grace_isTrue(callmethod(var_Input, "match", [1], obj1243)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method inputFromElement(1) does not have " + 
                                              callmethod(var_Input, "asString", [0])._value + "."));
                                  return obj1243;
                                };
                                func1242.paramCounts = [1];
                                this.methods["inputFromElement"] = func1242;
                                func1242.definitionLine = 875;
                                func1242.definitionModule = "stobjectdraw";
                                  var func1270 = function(argcv) {    // method inputFromElement(1     )()object
                                    var curarg = 1;
                                    var var_element__39__ = arguments[curarg];
                                    curarg++;
                                    var inheritingObject = arguments[curarg++];
                                    // Start argument processing
                                    curarg = 1;
                                    curarg++;
                                    // End argument processing
                                    setModuleName("stobjectdraw");
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var obj1271 = Grace_allocObject(null, "inputFromElement");
                                    obj1271.definitionModule = "stobjectdraw";
                                    obj1271.definitionLine = 875;
                                    var inho1271 = inheritingObject;
                                    while (inho1271.superobj) inho1271 = inho1271.superobj;
                                    inho1271.superobj = obj1271;
                                    obj1271.data = inheritingObject.data;
                                    if (inheritingObject.hasOwnProperty('_value'))
                                      obj1271._value = inheritingObject._value;
                                    obj1271.outer = this;
                                    var reader_stobjectdraw_outer1272 = function() {
                                      return this.outer;
                                    };
                                    obj1271.methods["outer"] = reader_stobjectdraw_outer1272;
                                    var obj_init_1271 = function() {
                                      var origSuperDepth = superDepth;
                                      superDepth = obj1271;
                                      var func1273 = function(argcv) {    // method onFocusDo(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_f = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onFocusDo(1)"));
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(879);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in onFocusDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                    callmethod(var_Response, "asString", [0])._value + "."));
                                        curarg++;
                                        // End argument checking
                                        setModuleName("stobjectdraw");
                                        setLineNumber(880);    // compilenode string
                                        var string1274 = new GraceString("focus");
                                        var block1275 = new GraceBlock(this, 880, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block1275.real = function(var___95____95__20) {
                                          setLineNumber(881);    // compilenode identifier
                                          onSelf = true;
                                          var call1276 = callmethodChecked(this, "eventSource", [1], this);
                                          var call1277 = callmethodChecked(var_f, "apply", [1], call1276);
                                          return call1277;
                                        };
                                        setLineNumber(880);    // compilenode call
                                        onSelf = true;
                                        var call1278 = callmethodChecked(this, "element", [0]);
                                        var call1279 = callmethodChecked(call1278, "addEventListener", [2], string1274, block1275);
                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1279)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method onFocusDo(1) does not have " + 
                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                        return call1279;
                                      };
                                      func1273.paramTypes = [];
                                      func1273.paramTypes.push([]);
                                      func1273.paramCounts = [1];
                                      obj1271.methods["onFocusDo"] = func1273;
                                      func1273.definitionLine = 879;
                                      func1273.definitionModule = "stobjectdraw";
                                      var func1280 = function(argcv) {    // method onBlurDo(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_f = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onBlurDo(1)"));
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(886);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in onBlurDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                    callmethod(var_Response, "asString", [0])._value + "."));
                                        curarg++;
                                        // End argument checking
                                        setModuleName("stobjectdraw");
                                        setLineNumber(887);    // compilenode string
                                        var string1281 = new GraceString("blur");
                                        var block1282 = new GraceBlock(this, 887, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block1282.real = function(var___95____95__21) {
                                          setLineNumber(888);    // compilenode identifier
                                          onSelf = true;
                                          var call1283 = callmethodChecked(this, "eventSource", [1], this);
                                          var call1284 = callmethodChecked(var_f, "apply", [1], call1283);
                                          return call1284;
                                        };
                                        setLineNumber(887);    // compilenode call
                                        onSelf = true;
                                        var call1285 = callmethodChecked(this, "element", [0]);
                                        var call1286 = callmethodChecked(call1285, "addEventListener", [2], string1281, block1282);
                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1286)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method onBlurDo(1) does not have " + 
                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                        return call1286;
                                      };
                                      func1280.paramTypes = [];
                                      func1280.paramTypes.push([]);
                                      func1280.paramCounts = [1];
                                      obj1271.methods["onBlurDo"] = func1280;
                                      func1280.definitionLine = 886;
                                      func1280.definitionModule = "stobjectdraw";
                                      var func1287 = function(argcv) {    // method onChangeDo(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_f = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onChangeDo(1)"));
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(893);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_Response, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in onChangeDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                    callmethod(var_Response, "asString", [0])._value + "."));
                                        curarg++;
                                        // End argument checking
                                        setModuleName("stobjectdraw");
                                        setLineNumber(894);    // compilenode string
                                        var string1288 = new GraceString("change");
                                        var block1289 = new GraceBlock(this, 894, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block1289.real = function(var___95____95__22) {
                                          setLineNumber(895);    // compilenode identifier
                                          onSelf = true;
                                          var call1290 = callmethodChecked(this, "eventSource", [1], this);
                                          var call1291 = callmethodChecked(var_f, "apply", [1], call1290);
                                          return call1291;
                                        };
                                        setLineNumber(894);    // compilenode call
                                        onSelf = true;
                                        var call1292 = callmethodChecked(this, "element", [0]);
                                        var call1293 = callmethodChecked(call1292, "addEventListener", [2], string1288, block1289);
                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1293)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method onChangeDo(1) does not have " + 
                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                        return call1293;
                                      };
                                      func1287.paramTypes = [];
                                      func1287.paramTypes.push([]);
                                      func1287.paramCounts = [1];
                                      obj1271.methods["onChangeDo"] = func1287;
                                      func1287.definitionLine = 893;
                                      func1287.definitionModule = "stobjectdraw";
                                      var func1294 = function(argcv) {    // method asString
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        if (argcv[0] !== 0)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                        setModuleName("stobjectdraw");
                                        setLineNumber(901);    // compilenode string
                                        var string1295 = new GraceString("an input");
                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], string1295)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method asString does not have " + 
                                                    callmethod(var_String, "asString", [0])._value + "."));
                                        return string1295;
                                      };
                                      func1294.paramCounts = [0];
                                      obj1271.methods["asString"] = func1294;
                                      func1294.definitionLine = 900;
                                      func1294.definitionModule = "stobjectdraw";
                                      setLineNumber(876);    // compilenode call
                                      var call1296 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call1297 = callmethodChecked(call1296, "componentFromElement()object", [1, 1], var_element__39__, this);
                                      obj1271.superobj = call1297;
                                      if (call1297.data) obj1271.data = call1297.data;
                                      if (call1297.hasOwnProperty('_value'))
                                          obj1271._value = call1297._value;
                                      superDepth = origSuperDepth;
                                    };
                                    obj_init_1271.apply(inheritingObject, []);
                                    return obj1271;
                                    };
                                    this.methods["inputFromElement()object"] = func1270;
                                  setLineNumber(906);    // compilenode method
                                  var func1298 = function(argcv) {    // method inputOfElementType(1)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_elementType = arguments[curarg];
                                    curarg++;
                                    if (argcv[0] !== 1)
                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inputOfElementType(1)"));
                                    // Start argument checking
                                    curarg = 1;
                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("argument 1 in inputOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                callmethod(var_String, "asString", [0])._value + "."));
                                    curarg++;
                                    // End argument checking
                                    setModuleName("stobjectdraw");
                                    var obj1299 = Grace_allocObject(null, "stobjectdraw.inputOfElementType");
                                    obj1299.definitionModule = "stobjectdraw";
                                    obj1299.definitionLine = 906;
                                    obj1299.outer = this;
                                    var reader_stobjectdraw_outer1300 = function() {
                                      return this.outer;
                                    };
                                    obj1299.methods["outer"] = reader_stobjectdraw_outer1300;
                                    var obj_init_1299 = function() {
                                      var origSuperDepth = superDepth;
                                      superDepth = obj1299;
                                      setLineNumber(907);    // compilenode identifier
                                      var call1301 = callmethodChecked(var_document, "createElement", [1], var_elementType);
                                      var call1302 = callmethodChecked(superDepth, "outer", [0]);
                                      onOuter = true;
                                      onSelf = true;
                                      var call1303 = callmethodChecked(call1302, "inputFromElement()object", [1, 1], call1301, this);
                                      obj1299.superobj = call1303;
                                      if (call1303.data) obj1299.data = call1303.data;
                                      if (call1303.hasOwnProperty('_value'))
                                          obj1299._value = call1303._value;
                                      superDepth = origSuperDepth;
                                    };
                                    obj_init_1299.apply(obj1299, []);
                                    setLineNumber(906);    // return value
                                    if (!Grace_isTrue(callmethod(var_Input, "match", [1], obj1299)))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("result of method inputOfElementType(1) does not have " + 
                                                callmethod(var_Input, "asString", [0])._value + "."));
                                    return obj1299;
                                  };
                                  func1298.paramTypes = [];
                                  func1298.paramTypes.push([type_String, "elementType"]);
                                  func1298.paramCounts = [1];
                                  this.methods["inputOfElementType"] = func1298;
                                  func1298.definitionLine = 906;
                                  func1298.definitionModule = "stobjectdraw";
                                    var func1304 = function(argcv) {    // method inputOfElementType(1     )()object
                                      var curarg = 1;
                                      var var_elementType = arguments[curarg];
                                      curarg++;
                                      var inheritingObject = arguments[curarg++];
                                      // Start argument processing
                                      curarg = 1;
                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in inputOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                  callmethod(var_String, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument processing
                                      setModuleName("stobjectdraw");
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var obj1305 = Grace_allocObject(null, "inputOfElementType");
                                      obj1305.definitionModule = "stobjectdraw";
                                      obj1305.definitionLine = 906;
                                      var inho1305 = inheritingObject;
                                      while (inho1305.superobj) inho1305 = inho1305.superobj;
                                      inho1305.superobj = obj1305;
                                      obj1305.data = inheritingObject.data;
                                      if (inheritingObject.hasOwnProperty('_value'))
                                        obj1305._value = inheritingObject._value;
                                      obj1305.outer = this;
                                      var reader_stobjectdraw_outer1306 = function() {
                                        return this.outer;
                                      };
                                      obj1305.methods["outer"] = reader_stobjectdraw_outer1306;
                                      var obj_init_1305 = function() {
                                        var origSuperDepth = superDepth;
                                        superDepth = obj1305;
                                        setLineNumber(907);    // compilenode identifier
                                        var call1307 = callmethodChecked(var_document, "createElement", [1], var_elementType);
                                        var call1308 = callmethodChecked(superDepth, "outer", [0]);
                                        onOuter = true;
                                        onSelf = true;
                                        var call1309 = callmethodChecked(call1308, "inputFromElement()object", [1, 1], call1307, this);
                                        obj1305.superobj = call1309;
                                        if (call1309.data) obj1305.data = call1309.data;
                                        if (call1309.hasOwnProperty('_value'))
                                            obj1305._value = call1309._value;
                                        superDepth = origSuperDepth;
                                      };
                                      obj_init_1305.apply(inheritingObject, []);
                                      return obj1305;
                                      };
                                      func1304.paramTypes = [];
                                      func1304.paramTypes.push([type_String, "elementType"]);
                                      this.methods["inputOfElementType()object"] = func1304;
                                    setLineNumber(911);    // compilenode method
                                    var func1310 = function(argcv) {    // method inputOfType(1)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_inputType = arguments[curarg];
                                      curarg++;
                                      if (argcv[0] !== 1)
                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for inputOfType(1)"));
                                      // Start argument checking
                                      curarg = 1;
                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in inputOfType (arg list 1), which corresponds to parameter inputType, does not have " + 
                                                  callmethod(var_String, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("stobjectdraw");
                                      var obj1311 = Grace_allocObject(null, "stobjectdraw.inputOfType");
                                      obj1311.definitionModule = "stobjectdraw";
                                      obj1311.definitionLine = 911;
                                      obj1311.outer = this;
                                      var reader_stobjectdraw_outer1312 = function() {
                                        return this.outer;
                                      };
                                      obj1311.methods["outer"] = reader_stobjectdraw_outer1312;
                                      var obj_init_1311 = function() {
                                        var origSuperDepth = superDepth;
                                        superDepth = obj1311;
                                        setLineNumber(912);    // compilenode string
                                        var string1313 = new GraceString("input");
                                        var call1314 = callmethodChecked(superDepth, "outer", [0]);
                                        onOuter = true;
                                        onSelf = true;
                                        var call1315 = callmethodChecked(call1314, "inputOfElementType()object", [1, 1], string1313, this);
                                        obj1311.superobj = call1315;
                                        if (call1315.data) obj1311.data = call1315.data;
                                        if (call1315.hasOwnProperty('_value'))
                                            obj1311._value = call1315._value;
                                        setLineNumber(914);    // compilenode string
                                        var string1316 = new GraceString("type");
                                        onSelf = true;
                                        var call1317 = callmethodChecked(this, "element", [0]);
                                        var call1318 = callmethodChecked(call1317, "setAttribute", [2], string1316, var_inputType);
                                        superDepth = origSuperDepth;
                                      };
                                      obj_init_1311.apply(obj1311, []);
                                      setLineNumber(911);    // return value
                                      if (!Grace_isTrue(callmethod(var_Input, "match", [1], obj1311)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method inputOfType(1) does not have " + 
                                                  callmethod(var_Input, "asString", [0])._value + "."));
                                      return obj1311;
                                    };
                                    func1310.paramTypes = [];
                                    func1310.paramTypes.push([type_String, "inputType"]);
                                    func1310.paramCounts = [1];
                                    this.methods["inputOfType"] = func1310;
                                    func1310.definitionLine = 911;
                                    func1310.definitionModule = "stobjectdraw";
                                      var func1319 = function(argcv) {    // method inputOfType(1     )()object
                                        var curarg = 1;
                                        var var_inputType = arguments[curarg];
                                        curarg++;
                                        var inheritingObject = arguments[curarg++];
                                        // Start argument processing
                                        curarg = 1;
                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in inputOfType (arg list 1), which corresponds to parameter inputType, does not have " + 
                                                    callmethod(var_String, "asString", [0])._value + "."));
                                        curarg++;
                                        // End argument processing
                                        setModuleName("stobjectdraw");
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var obj1320 = Grace_allocObject(null, "inputOfType");
                                        obj1320.definitionModule = "stobjectdraw";
                                        obj1320.definitionLine = 911;
                                        var inho1320 = inheritingObject;
                                        while (inho1320.superobj) inho1320 = inho1320.superobj;
                                        inho1320.superobj = obj1320;
                                        obj1320.data = inheritingObject.data;
                                        if (inheritingObject.hasOwnProperty('_value'))
                                          obj1320._value = inheritingObject._value;
                                        obj1320.outer = this;
                                        var reader_stobjectdraw_outer1321 = function() {
                                          return this.outer;
                                        };
                                        obj1320.methods["outer"] = reader_stobjectdraw_outer1321;
                                        var obj_init_1320 = function() {
                                          var origSuperDepth = superDepth;
                                          superDepth = obj1320;
                                          setLineNumber(912);    // compilenode string
                                          var string1322 = new GraceString("input");
                                          var call1323 = callmethodChecked(superDepth, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call1324 = callmethodChecked(call1323, "inputOfElementType()object", [1, 1], string1322, this);
                                          obj1320.superobj = call1324;
                                          if (call1324.data) obj1320.data = call1324.data;
                                          if (call1324.hasOwnProperty('_value'))
                                              obj1320._value = call1324._value;
                                          setLineNumber(914);    // compilenode string
                                          var string1325 = new GraceString("type");
                                          onSelf = true;
                                          var call1326 = callmethodChecked(this, "element", [0]);
                                          var call1327 = callmethodChecked(call1326, "setAttribute", [2], string1325, var_inputType);
                                          superDepth = origSuperDepth;
                                        };
                                        obj_init_1320.apply(inheritingObject, []);
                                        return obj1320;
                                        };
                                        func1319.paramTypes = [];
                                        func1319.paramTypes.push([type_String, "inputType"]);
                                        this.methods["inputOfType()object"] = func1319;
                                      setLineNumber(918);    // compilenode method
                                      var func1328 = function(argcv) {    // method labeledWidgetFromElement(1)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_element__39__ = arguments[curarg];
                                        curarg++;
                                        if (argcv[0] !== 1)
                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeledWidgetFromElement(1)"));
                                        setModuleName("stobjectdraw");
                                        var obj1329 = Grace_allocObject(null, "stobjectdraw.labeledWidgetFromElement");
                                        obj1329.definitionModule = "stobjectdraw";
                                        obj1329.definitionLine = 918;
                                        obj1329.outer = this;
                                        var reader_stobjectdraw_outer1330 = function() {
                                          return this.outer;
                                        };
                                        obj1329.methods["outer"] = reader_stobjectdraw_outer1330;
                                        var obj_init_1329 = function() {
                                          var origSuperDepth = superDepth;
                                          superDepth = obj1329;
                                          var func1331 = function(argcv) {    // method labelElement
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labelElement"));
                                            setModuleName("stobjectdraw");
                                            setLineNumber(924);    // compilenode call
                                            onSelf = true;
                                            var call1332 = callmethodChecked(this, "element", [0]);
                                            if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call1332)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method labelElement does not have " + 
                                                        callmethod(var_Foreign, "asString", [0])._value + "."));
                                            return call1332;
                                          };
                                          func1331.confidential = true;
                                          func1331.paramCounts = [0];
                                          obj1329.methods["labelElement"] = func1331;
                                          func1331.definitionLine = 923;
                                          func1331.definitionModule = "stobjectdraw";
                                          var func1333 = function(argcv) {    // method label
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label"));
                                            setModuleName("stobjectdraw");
                                            setLineNumber(929);    // compilenode call
                                            onSelf = true;
                                            var call1334 = callmethodChecked(this, "labelElement", [0]);
                                            var call1335 = callmethodChecked(call1334, "textContent", [0]);
                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], call1335)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method label does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            return call1335;
                                          };
                                          func1333.paramCounts = [0];
                                          obj1329.methods["label"] = func1333;
                                          func1333.definitionLine = 927;
                                          func1333.definitionModule = "stobjectdraw";
                                          var func1336 = function(argcv) {    // method label:=(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_value = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label:=(1)"));
                                            // Start argument checking
                                            curarg = 1;
                                            setLineNumber(932);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in label:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            curarg++;
                                            // End argument checking
                                            setModuleName("stobjectdraw");
                                            setLineNumber(934);    // compilenode call
                                            onSelf = true;
                                            var call1337 = callmethodChecked(this, "labelElement", [0]);
                                            var call1338 = callmethodChecked(call1337, "textContent:=", [1], var_value);
                                            setLineNumber(935);    // return value
                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method label:=(1) does not have " + 
                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                            return var_done;
                                          };
                                          func1336.paramTypes = [];
                                          func1336.paramTypes.push([type_String, "value"]);
                                          func1336.paramCounts = [1];
                                          obj1329.methods["label:="] = func1336;
                                          func1336.definitionLine = 932;
                                          func1336.definitionModule = "stobjectdraw";
                                          var func1339 = function(argcv) {    // method asString
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            if (argcv[0] !== 0)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                            setModuleName("stobjectdraw");
                                            setLineNumber(940);    // compilenode string
                                            var string1340 = new GraceString("");
                                            onSelf = true;
                                            var call1342 = callmethodChecked(this, "label", [0]);
                                            var string1344 = new GraceString("an input labeled: ");
                                            var opresult1346 = callmethodChecked(string1344, "++", [1], call1342);
                                            var opresult1348 = callmethodChecked(opresult1346, "++", [1], string1340);
                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1348)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method asString does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            return opresult1348;
                                          };
                                          func1339.paramCounts = [0];
                                          obj1329.methods["asString"] = func1339;
                                          func1339.definitionLine = 938;
                                          func1339.definitionModule = "stobjectdraw";
                                          setLineNumber(921);    // compilenode call
                                          var call1349 = callmethodChecked(superDepth, "outer", [0]);
                                          onOuter = true;
                                          onSelf = true;
                                          var call1350 = callmethodChecked(call1349, "inputFromElement()object", [1, 1], var_element__39__, this);
                                          obj1329.superobj = call1350;
                                          if (call1350.data) obj1329.data = call1350.data;
                                          if (call1350.hasOwnProperty('_value'))
                                              obj1329._value = call1350._value;
                                          superDepth = origSuperDepth;
                                        };
                                        obj_init_1329.apply(obj1329, []);
                                        setLineNumber(918);    // return value
                                        if (!Grace_isTrue(callmethod(var_Labeled, "match", [1], obj1329)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method labeledWidgetFromElement(1) does not have " + 
                                                    callmethod(var_Labeled, "asString", [0])._value + "."));
                                        return obj1329;
                                      };
                                      func1328.paramCounts = [1];
                                      this.methods["labeledWidgetFromElement"] = func1328;
                                      func1328.definitionLine = 918;
                                      func1328.definitionModule = "stobjectdraw";
                                        var func1351 = function(argcv) {    // method labeledWidgetFromElement(1     )()object
                                          var curarg = 1;
                                          var var_element__39__ = arguments[curarg];
                                          curarg++;
                                          var inheritingObject = arguments[curarg++];
                                          // Start argument processing
                                          curarg = 1;
                                          curarg++;
                                          // End argument processing
                                          setModuleName("stobjectdraw");
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var obj1352 = Grace_allocObject(null, "labeledWidgetFromElement");
                                          obj1352.definitionModule = "stobjectdraw";
                                          obj1352.definitionLine = 918;
                                          var inho1352 = inheritingObject;
                                          while (inho1352.superobj) inho1352 = inho1352.superobj;
                                          inho1352.superobj = obj1352;
                                          obj1352.data = inheritingObject.data;
                                          if (inheritingObject.hasOwnProperty('_value'))
                                            obj1352._value = inheritingObject._value;
                                          obj1352.outer = this;
                                          var reader_stobjectdraw_outer1353 = function() {
                                            return this.outer;
                                          };
                                          obj1352.methods["outer"] = reader_stobjectdraw_outer1353;
                                          var obj_init_1352 = function() {
                                            var origSuperDepth = superDepth;
                                            superDepth = obj1352;
                                            var func1354 = function(argcv) {    // method labelElement
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labelElement"));
                                              setModuleName("stobjectdraw");
                                              setLineNumber(924);    // compilenode call
                                              onSelf = true;
                                              var call1355 = callmethodChecked(this, "element", [0]);
                                              if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call1355)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method labelElement does not have " + 
                                                          callmethod(var_Foreign, "asString", [0])._value + "."));
                                              return call1355;
                                            };
                                            func1354.confidential = true;
                                            func1354.paramCounts = [0];
                                            obj1352.methods["labelElement"] = func1354;
                                            func1354.definitionLine = 923;
                                            func1354.definitionModule = "stobjectdraw";
                                            var func1356 = function(argcv) {    // method label
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label"));
                                              setModuleName("stobjectdraw");
                                              setLineNumber(929);    // compilenode call
                                              onSelf = true;
                                              var call1357 = callmethodChecked(this, "labelElement", [0]);
                                              var call1358 = callmethodChecked(call1357, "textContent", [0]);
                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], call1358)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method label does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              return call1358;
                                            };
                                            func1356.paramCounts = [0];
                                            obj1352.methods["label"] = func1356;
                                            func1356.definitionLine = 927;
                                            func1356.definitionModule = "stobjectdraw";
                                            var func1359 = function(argcv) {    // method label:=(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_value = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label:=(1)"));
                                              // Start argument checking
                                              curarg = 1;
                                              setLineNumber(932);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in label:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              curarg++;
                                              // End argument checking
                                              setModuleName("stobjectdraw");
                                              setLineNumber(934);    // compilenode call
                                              onSelf = true;
                                              var call1360 = callmethodChecked(this, "labelElement", [0]);
                                              var call1361 = callmethodChecked(call1360, "textContent:=", [1], var_value);
                                              setLineNumber(935);    // return value
                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method label:=(1) does not have " + 
                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                              return var_done;
                                            };
                                            func1359.paramTypes = [];
                                            func1359.paramTypes.push([type_String, "value"]);
                                            func1359.paramCounts = [1];
                                            obj1352.methods["label:="] = func1359;
                                            func1359.definitionLine = 932;
                                            func1359.definitionModule = "stobjectdraw";
                                            var func1362 = function(argcv) {    // method asString
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              if (argcv[0] !== 0)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                              setModuleName("stobjectdraw");
                                              setLineNumber(940);    // compilenode string
                                              var string1363 = new GraceString("");
                                              onSelf = true;
                                              var call1365 = callmethodChecked(this, "label", [0]);
                                              var string1367 = new GraceString("an input labeled: ");
                                              var opresult1369 = callmethodChecked(string1367, "++", [1], call1365);
                                              var opresult1371 = callmethodChecked(opresult1369, "++", [1], string1363);
                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1371)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method asString does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              return opresult1371;
                                            };
                                            func1362.paramCounts = [0];
                                            obj1352.methods["asString"] = func1362;
                                            func1362.definitionLine = 938;
                                            func1362.definitionModule = "stobjectdraw";
                                            setLineNumber(921);    // compilenode call
                                            var call1372 = callmethodChecked(superDepth, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call1373 = callmethodChecked(call1372, "inputFromElement()object", [1, 1], var_element__39__, this);
                                            obj1352.superobj = call1373;
                                            if (call1373.data) obj1352.data = call1373.data;
                                            if (call1373.hasOwnProperty('_value'))
                                                obj1352._value = call1373._value;
                                            superDepth = origSuperDepth;
                                          };
                                          obj_init_1352.apply(inheritingObject, []);
                                          return obj1352;
                                          };
                                          this.methods["labeledWidgetFromElement()object"] = func1351;
                                        setLineNumber(944);    // compilenode method
                                        var func1374 = function(argcv) {    // method labeledWidgetOfElementType(1)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_elementType = arguments[curarg];
                                          curarg++;
                                          if (argcv[0] !== 1)
                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeledWidgetOfElementType(1)"));
                                          // Start argument checking
                                          curarg = 1;
                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("argument 1 in labeledWidgetOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                      callmethod(var_String, "asString", [0])._value + "."));
                                          curarg++;
                                          // End argument checking
                                          setModuleName("stobjectdraw");
                                          var obj1375 = Grace_allocObject(null, "stobjectdraw.labeledWidgetOfElementType");
                                          obj1375.definitionModule = "stobjectdraw";
                                          obj1375.definitionLine = 944;
                                          obj1375.outer = this;
                                          var reader_stobjectdraw_outer1376 = function() {
                                            return this.outer;
                                          };
                                          obj1375.methods["outer"] = reader_stobjectdraw_outer1376;
                                          var obj_init_1375 = function() {
                                            var origSuperDepth = superDepth;
                                            superDepth = obj1375;
                                            setLineNumber(947);    // compilenode identifier
                                            var call1377 = callmethodChecked(var_document, "createElement", [1], var_elementType);
                                            var call1378 = callmethodChecked(superDepth, "outer", [0]);
                                            onOuter = true;
                                            onSelf = true;
                                            var call1379 = callmethodChecked(call1378, "labeledWidgetFromElement()object", [1, 1], call1377, this);
                                            obj1375.superobj = call1379;
                                            if (call1379.data) obj1375.data = call1379.data;
                                            if (call1379.hasOwnProperty('_value'))
                                                obj1375._value = call1379._value;
                                            superDepth = origSuperDepth;
                                          };
                                          obj_init_1375.apply(obj1375, []);
                                          setLineNumber(944);    // return value
                                          if (!Grace_isTrue(callmethod(var_Labeled, "match", [1], obj1375)))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("result of method labeledWidgetOfElementType(1) does not have " + 
                                                      callmethod(var_Labeled, "asString", [0])._value + "."));
                                          return obj1375;
                                        };
                                        func1374.paramTypes = [];
                                        func1374.paramTypes.push([type_String, "elementType"]);
                                        func1374.paramCounts = [1];
                                        this.methods["labeledWidgetOfElementType"] = func1374;
                                        func1374.definitionLine = 944;
                                        func1374.definitionModule = "stobjectdraw";
                                          var func1380 = function(argcv) {    // method labeledWidgetOfElementType(1     )()object
                                            var curarg = 1;
                                            var var_elementType = arguments[curarg];
                                            curarg++;
                                            var inheritingObject = arguments[curarg++];
                                            // Start argument processing
                                            curarg = 1;
                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in labeledWidgetOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            curarg++;
                                            // End argument processing
                                            setModuleName("stobjectdraw");
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var obj1381 = Grace_allocObject(null, "labeledWidgetOfElementType");
                                            obj1381.definitionModule = "stobjectdraw";
                                            obj1381.definitionLine = 944;
                                            var inho1381 = inheritingObject;
                                            while (inho1381.superobj) inho1381 = inho1381.superobj;
                                            inho1381.superobj = obj1381;
                                            obj1381.data = inheritingObject.data;
                                            if (inheritingObject.hasOwnProperty('_value'))
                                              obj1381._value = inheritingObject._value;
                                            obj1381.outer = this;
                                            var reader_stobjectdraw_outer1382 = function() {
                                              return this.outer;
                                            };
                                            obj1381.methods["outer"] = reader_stobjectdraw_outer1382;
                                            var obj_init_1381 = function() {
                                              var origSuperDepth = superDepth;
                                              superDepth = obj1381;
                                              setLineNumber(947);    // compilenode identifier
                                              var call1383 = callmethodChecked(var_document, "createElement", [1], var_elementType);
                                              var call1384 = callmethodChecked(superDepth, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call1385 = callmethodChecked(call1384, "labeledWidgetFromElement()object", [1, 1], call1383, this);
                                              obj1381.superobj = call1385;
                                              if (call1385.data) obj1381.data = call1385.data;
                                              if (call1385.hasOwnProperty('_value'))
                                                  obj1381._value = call1385._value;
                                              superDepth = origSuperDepth;
                                            };
                                            obj_init_1381.apply(inheritingObject, []);
                                            return obj1381;
                                            };
                                            func1380.paramTypes = [];
                                            func1380.paramTypes.push([type_String, "elementType"]);
                                            this.methods["labeledWidgetOfElementType()object"] = func1380;
                                          setLineNumber(950);    // compilenode method
                                          var func1386 = function(argcv) {    // method labeledWidgetOfElementType(1)labeled(1)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_elementType = arguments[curarg];
                                            curarg++;
                                            if (argcv[0] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeledWidgetOfElementType (arg list 1) of labeledWidgetOfElementType(1)labeled(1)"));
                                            var var_newLabel = arguments[curarg];
                                            curarg++;
                                            if (argcv[1] !== 1)
                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeled (arg list 2) of labeledWidgetOfElementType(1)labeled(1)"));
                                            // Start argument checking
                                            curarg = 1;
                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in labeledWidgetOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            curarg++;
                                            setLineNumber(951);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter newLabel, does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            curarg++;
                                            // End argument checking
                                            setModuleName("stobjectdraw");
                                            setLineNumber(950);    // compilenode object
                                            var obj1387 = Grace_allocObject(null, "stobjectdraw.labeledWidgetOfElementType()labeled");
                                            obj1387.definitionModule = "stobjectdraw";
                                            obj1387.definitionLine = 950;
                                            obj1387.outer = this;
                                            var reader_stobjectdraw_outer1388 = function() {
                                              return this.outer;
                                            };
                                            obj1387.methods["outer"] = reader_stobjectdraw_outer1388;
                                            var obj_init_1387 = function() {
                                              var origSuperDepth = superDepth;
                                              superDepth = obj1387;
                                              setLineNumber(954);    // compilenode call
                                              var call1389 = callmethodChecked(superDepth, "outer", [0]);
                                              onOuter = true;
                                              onSelf = true;
                                              var call1390 = callmethodChecked(call1389, "labeledWidgetOfElementType()object", [1, 1], var_elementType, this);
                                              obj1387.superobj = call1390;
                                              if (call1390.data) obj1387.data = call1390.data;
                                              if (call1390.hasOwnProperty('_value'))
                                                  obj1387._value = call1390._value;
                                              setLineNumber(955);    // compilenode identifier
                                              onSelf = true;
                                              var call1391 = callmethodChecked(this, "label:=", [1], var_newLabel);
                                              superDepth = origSuperDepth;
                                            };
                                            obj_init_1387.apply(obj1387, []);
                                            setLineNumber(950);    // return value
                                            if (!Grace_isTrue(callmethod(var_Labeled, "match", [1], obj1387)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method labeledWidgetOfElementType(1)labeled(1) does not have " + 
                                                        callmethod(var_Labeled, "asString", [0])._value + "."));
                                            return obj1387;
                                          };
                                          func1386.paramTypes = [];
                                          func1386.paramTypes.push([type_String, "elementType"]);
                                          func1386.paramTypes.push([type_String, "newLabel"]);
                                          func1386.paramCounts = [1, 1];
                                          this.methods["labeledWidgetOfElementType()labeled"] = func1386;
                                          func1386.definitionLine = 950;
                                          func1386.definitionModule = "stobjectdraw";
                                            var func1392 = function(argcv) {    // method labeledWidgetOfElementType(1     )labeled(1     )()object
                                              var curarg = 1;
                                              var var_elementType = arguments[curarg];
                                              curarg++;
                                              var var_newLabel = arguments[curarg];
                                              curarg++;
                                              var inheritingObject = arguments[curarg++];
                                              // Start argument processing
                                              curarg = 1;
                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in labeledWidgetOfElementType (arg list 1), which corresponds to parameter elementType, does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              curarg++;
                                              setLineNumber(951);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter newLabel, does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              curarg++;
                                              // End argument processing
                                              setModuleName("stobjectdraw");
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var obj1393 = Grace_allocObject(null, "labeledWidgetOfElementType()labeled");
                                              obj1393.definitionModule = "stobjectdraw";
                                              obj1393.definitionLine = 950;
                                              var inho1393 = inheritingObject;
                                              while (inho1393.superobj) inho1393 = inho1393.superobj;
                                              inho1393.superobj = obj1393;
                                              obj1393.data = inheritingObject.data;
                                              if (inheritingObject.hasOwnProperty('_value'))
                                                obj1393._value = inheritingObject._value;
                                              obj1393.outer = this;
                                              var reader_stobjectdraw_outer1394 = function() {
                                                return this.outer;
                                              };
                                              obj1393.methods["outer"] = reader_stobjectdraw_outer1394;
                                              var obj_init_1393 = function() {
                                                var origSuperDepth = superDepth;
                                                superDepth = obj1393;
                                                setLineNumber(954);    // compilenode call
                                                var call1395 = callmethodChecked(superDepth, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call1396 = callmethodChecked(call1395, "labeledWidgetOfElementType()object", [1, 1], var_elementType, this);
                                                obj1393.superobj = call1396;
                                                if (call1396.data) obj1393.data = call1396.data;
                                                if (call1396.hasOwnProperty('_value'))
                                                    obj1393._value = call1396._value;
                                                setLineNumber(955);    // compilenode identifier
                                                onSelf = true;
                                                var call1397 = callmethodChecked(this, "label:=", [1], var_newLabel);
                                                superDepth = origSuperDepth;
                                              };
                                              obj_init_1393.apply(inheritingObject, []);
                                              return obj1393;
                                              };
                                              func1392.paramTypes = [];
                                              func1392.paramTypes.push([type_String, "elementType"]);
                                              func1392.paramTypes.push([type_String, "newLabel"]);
                                              this.methods["labeledWidgetOfElementType()labeled()object"] = func1392;
                                            setLineNumber(959);    // compilenode method
                                            var func1398 = function(argcv) {    // method fieldOfType(1)labeled(1)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_inputType = arguments[curarg];
                                              curarg++;
                                              if (argcv[0] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fieldOfType (arg list 1) of fieldOfType(1)labeled(1)"));
                                              var var_label__39__ = arguments[curarg];
                                              curarg++;
                                              if (argcv[1] !== 1)
                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeled (arg list 2) of fieldOfType(1)labeled(1)"));
                                              // Start argument checking
                                              curarg = 1;
                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in fieldOfType (arg list 1), which corresponds to parameter inputType, does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              curarg++;
                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter label', does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              curarg++;
                                              // End argument checking
                                              setModuleName("stobjectdraw");
                                              var obj1399 = Grace_allocObject(null, "stobjectdraw.fieldOfType()labeled");
                                              obj1399.definitionModule = "stobjectdraw";
                                              obj1399.definitionLine = 959;
                                              obj1399.outer = this;
                                              var reader_stobjectdraw_outer1400 = function() {
                                                return this.outer;
                                              };
                                              obj1399.methods["outer"] = reader_stobjectdraw_outer1400;
                                              var obj_init_1399 = function() {
                                                var origSuperDepth = superDepth;
                                                superDepth = obj1399;
                                                var func1401 = function(argcv) {    // method label
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label"));
                                                  setModuleName("stobjectdraw");
                                                  setLineNumber(966);    // compilenode call
                                                  onSelf = true;
                                                  var call1402 = callmethodChecked(this, "element", [0]);
                                                  var call1403 = callmethodChecked(call1402, "placeholder", [0]);
                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], call1403)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method label does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  return call1403;
                                                };
                                                func1401.paramCounts = [0];
                                                obj1399.methods["label"] = func1401;
                                                func1401.definitionLine = 965;
                                                func1401.definitionModule = "stobjectdraw";
                                                var func1404 = function(argcv) {    // method label:=(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_value = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label:=(1)"));
                                                  // Start argument checking
                                                  curarg = 1;
                                                  setLineNumber(970);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in label:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("stobjectdraw");
                                                  setLineNumber(971);    // compilenode call
                                                  onSelf = true;
                                                  var call1405 = callmethodChecked(this, "element", [0]);
                                                  var call1406 = callmethodChecked(call1405, "placeholder:=", [1], var_value);
                                                  setLineNumber(972);    // return value
                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method label:=(1) does not have " + 
                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                  return var_done;
                                                };
                                                func1404.paramTypes = [];
                                                func1404.paramTypes.push([type_String, "value"]);
                                                func1404.paramCounts = [1];
                                                obj1399.methods["label:="] = func1404;
                                                func1404.definitionLine = 970;
                                                func1404.definitionModule = "stobjectdraw";
                                                var func1407 = function(argcv) {    // method asString
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  if (argcv[0] !== 0)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                  setModuleName("stobjectdraw");
                                                  setLineNumber(977);    // compilenode string
                                                  var string1408 = new GraceString("");
                                                  onSelf = true;
                                                  var call1410 = callmethodChecked(this, "label", [0]);
                                                  var string1412 = new GraceString("a field labeled: ");
                                                  var opresult1414 = callmethodChecked(string1412, "++", [1], call1410);
                                                  var opresult1416 = callmethodChecked(opresult1414, "++", [1], string1408);
                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1416)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method asString does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  return opresult1416;
                                                };
                                                func1407.paramCounts = [0];
                                                obj1399.methods["asString"] = func1407;
                                                func1407.definitionLine = 976;
                                                func1407.definitionModule = "stobjectdraw";
                                                setLineNumber(962);    // compilenode call
                                                var call1417 = callmethodChecked(superDepth, "outer", [0]);
                                                onOuter = true;
                                                onSelf = true;
                                                var call1418 = callmethodChecked(call1417, "inputOfType()object", [1, 1], var_inputType, this);
                                                obj1399.superobj = call1418;
                                                if (call1418.data) obj1399.data = call1418.data;
                                                if (call1418.hasOwnProperty('_value'))
                                                    obj1399._value = call1418._value;
                                                setLineNumber(980);    // compilenode identifier
                                                onSelf = true;
                                                var call1419 = callmethodChecked(this, "label:=", [1], var_label__39__);
                                                superDepth = origSuperDepth;
                                              };
                                              obj_init_1399.apply(obj1399, []);
                                              setLineNumber(959);    // return value
                                              if (!Grace_isTrue(callmethod(var_Input, "match", [1], obj1399)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method fieldOfType(1)labeled(1) does not have " + 
                                                          callmethod(var_Input, "asString", [0])._value + "."));
                                              return obj1399;
                                            };
                                            func1398.paramTypes = [];
                                            func1398.paramTypes.push([type_String, "inputType"]);
                                            func1398.paramTypes.push([type_String, "label'"]);
                                            func1398.paramCounts = [1, 1];
                                            this.methods["fieldOfType()labeled"] = func1398;
                                            func1398.definitionLine = 959;
                                            func1398.definitionModule = "stobjectdraw";
                                              var func1420 = function(argcv) {    // method fieldOfType(1     )labeled(1     )()object
                                                var curarg = 1;
                                                var var_inputType = arguments[curarg];
                                                curarg++;
                                                var var_label__39__ = arguments[curarg];
                                                curarg++;
                                                var inheritingObject = arguments[curarg++];
                                                // Start argument processing
                                                curarg = 1;
                                                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in fieldOfType (arg list 1), which corresponds to parameter inputType, does not have " + 
                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                curarg++;
                                                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter label', does not have " + 
                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                curarg++;
                                                // End argument processing
                                                setModuleName("stobjectdraw");
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var obj1421 = Grace_allocObject(null, "fieldOfType()labeled");
                                                obj1421.definitionModule = "stobjectdraw";
                                                obj1421.definitionLine = 959;
                                                var inho1421 = inheritingObject;
                                                while (inho1421.superobj) inho1421 = inho1421.superobj;
                                                inho1421.superobj = obj1421;
                                                obj1421.data = inheritingObject.data;
                                                if (inheritingObject.hasOwnProperty('_value'))
                                                  obj1421._value = inheritingObject._value;
                                                obj1421.outer = this;
                                                var reader_stobjectdraw_outer1422 = function() {
                                                  return this.outer;
                                                };
                                                obj1421.methods["outer"] = reader_stobjectdraw_outer1422;
                                                var obj_init_1421 = function() {
                                                  var origSuperDepth = superDepth;
                                                  superDepth = obj1421;
                                                  var func1423 = function(argcv) {    // method label
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label"));
                                                    setModuleName("stobjectdraw");
                                                    setLineNumber(966);    // compilenode call
                                                    onSelf = true;
                                                    var call1424 = callmethodChecked(this, "element", [0]);
                                                    var call1425 = callmethodChecked(call1424, "placeholder", [0]);
                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], call1425)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method label does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    return call1425;
                                                  };
                                                  func1423.paramCounts = [0];
                                                  obj1421.methods["label"] = func1423;
                                                  func1423.definitionLine = 965;
                                                  func1423.definitionModule = "stobjectdraw";
                                                  var func1426 = function(argcv) {    // method label:=(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_value = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for label:=(1)"));
                                                    // Start argument checking
                                                    curarg = 1;
                                                    setLineNumber(970);    // compilenode identifier
                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in label:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("stobjectdraw");
                                                    setLineNumber(971);    // compilenode call
                                                    onSelf = true;
                                                    var call1427 = callmethodChecked(this, "element", [0]);
                                                    var call1428 = callmethodChecked(call1427, "placeholder:=", [1], var_value);
                                                    setLineNumber(972);    // return value
                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method label:=(1) does not have " + 
                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                    return var_done;
                                                  };
                                                  func1426.paramTypes = [];
                                                  func1426.paramTypes.push([type_String, "value"]);
                                                  func1426.paramCounts = [1];
                                                  obj1421.methods["label:="] = func1426;
                                                  func1426.definitionLine = 970;
                                                  func1426.definitionModule = "stobjectdraw";
                                                  var func1429 = function(argcv) {    // method asString
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    if (argcv[0] !== 0)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                    setModuleName("stobjectdraw");
                                                    setLineNumber(977);    // compilenode string
                                                    var string1430 = new GraceString("");
                                                    onSelf = true;
                                                    var call1432 = callmethodChecked(this, "label", [0]);
                                                    var string1434 = new GraceString("a field labeled: ");
                                                    var opresult1436 = callmethodChecked(string1434, "++", [1], call1432);
                                                    var opresult1438 = callmethodChecked(opresult1436, "++", [1], string1430);
                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1438)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method asString does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    return opresult1438;
                                                  };
                                                  func1429.paramCounts = [0];
                                                  obj1421.methods["asString"] = func1429;
                                                  func1429.definitionLine = 976;
                                                  func1429.definitionModule = "stobjectdraw";
                                                  setLineNumber(962);    // compilenode call
                                                  var call1439 = callmethodChecked(superDepth, "outer", [0]);
                                                  onOuter = true;
                                                  onSelf = true;
                                                  var call1440 = callmethodChecked(call1439, "inputOfType()object", [1, 1], var_inputType, this);
                                                  obj1421.superobj = call1440;
                                                  if (call1440.data) obj1421.data = call1440.data;
                                                  if (call1440.hasOwnProperty('_value'))
                                                      obj1421._value = call1440._value;
                                                  setLineNumber(980);    // compilenode identifier
                                                  onSelf = true;
                                                  var call1441 = callmethodChecked(this, "label:=", [1], var_label__39__);
                                                  superDepth = origSuperDepth;
                                                };
                                                obj_init_1421.apply(inheritingObject, []);
                                                return obj1421;
                                                };
                                                func1420.paramTypes = [];
                                                func1420.paramTypes.push([type_String, "inputType"]);
                                                func1420.paramTypes.push([type_String, "label'"]);
                                                this.methods["fieldOfType()labeled()object"] = func1420;
                                              setLineNumber(988);    // compilenode method
                                              var func1442 = function(argcv) {    // method eventLogKind(1)response(1)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_kind__39__ = arguments[curarg];
                                                curarg++;
                                                if (argcv[0] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for eventLogKind (arg list 1) of eventLogKind(1)response(1)"));
                                                var var_response__39__ = arguments[curarg];
                                                curarg++;
                                                if (argcv[1] !== 1)
                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for response (arg list 2) of eventLogKind(1)response(1)"));
                                                // Start argument checking
                                                curarg = 1;
                                                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in eventLogKind (arg list 1), which corresponds to parameter kind', does not have " + 
                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                curarg++;
                                                setLineNumber(989);    // compilenode identifier
                                                if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in response (arg list 2), which corresponds to parameter response', does not have " + 
                                                            callmethod(var_Procedure, "asString", [0])._value + "."));
                                                curarg++;
                                                // End argument checking
                                                setModuleName("stobjectdraw");
                                                setLineNumber(988);    // compilenode object
                                                var obj1443 = Grace_allocObject(GraceObject, "stobjectdraw.eventLogKind()response");
                                                obj1443.definitionModule = "stobjectdraw";
                                                obj1443.definitionLine = 988;
                                                obj1443.outer = this;
                                                var reader_stobjectdraw_outer1444 = function() {
                                                  return this.outer;
                                                };
                                                obj1443.methods["outer"] = reader_stobjectdraw_outer1444;
                                                var obj_init_1443 = function() {
                                                  var origSuperDepth = superDepth;
                                                  superDepth = obj1443;
                                                  setLineNumber(990);    // compilenode identifier
                                                  obj1443.data["kind"] = var_kind__39__;
                                                  var reader_stobjectdraw_kind1445 = function() {
                                                    return this.data["kind"];
                                                  };
                                                  reader_stobjectdraw_kind1445.def = true;
                                                  obj1443.methods["kind"] = reader_stobjectdraw_kind1445;
                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], var_kind__39__)))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("value of def 'kind' is not of type String"));
                                                  setLineNumber(991);    // compilenode identifier
                                                  obj1443.data["response"] = var_response__39__;
                                                  var reader_stobjectdraw_response1446 = function() {
                                                    return this.data["response"];
                                                  };
                                                  reader_stobjectdraw_response1446.def = true;
                                                  obj1443.methods["response"] = reader_stobjectdraw_response1446;
                                                  if (!Grace_isTrue(callmethod(var_Procedure, "match", [1], var_response__39__)))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("value of def 'response' is not of type Procedure"));
                                                  superDepth = origSuperDepth;
                                                };
                                                obj_init_1443.apply(obj1443, []);
                                                return obj1443;
                                              };
                                              func1442.paramTypes = [];
                                              func1442.paramTypes.push([type_String, "kind'"]);
                                              func1442.paramTypes.push([]);
                                              func1442.confidential = true;
                                              func1442.paramCounts = [1, 1];
                                              this.methods["eventLogKind()response"] = func1442;
                                              func1442.definitionLine = 988;
                                              func1442.definitionModule = "stobjectdraw";
                                                var func1447 = function(argcv) {    // method eventLogKind(1     )response(1     )()object
                                                  var curarg = 1;
                                                  var var_kind__39__ = arguments[curarg];
                                                  curarg++;
                                                  var var_response__39__ = arguments[curarg];
                                                  curarg++;
                                                  var inheritingObject = arguments[curarg++];
                                                  // Start argument processing
                                                  curarg = 1;
                                                  setLineNumber(988);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in eventLogKind (arg list 1), which corresponds to parameter kind', does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  curarg++;
                                                  setLineNumber(989);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in response (arg list 2), which corresponds to parameter response', does not have " + 
                                                              callmethod(var_Procedure, "asString", [0])._value + "."));
                                                  curarg++;
                                                  // End argument processing
                                                  setModuleName("stobjectdraw");
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var obj1448 = Grace_allocObject(GraceObject, "eventLogKind()response");
                                                  obj1448.definitionModule = "stobjectdraw";
                                                  obj1448.definitionLine = 988;
                                                  var inho1448 = inheritingObject;
                                                  while (inho1448.superobj) inho1448 = inho1448.superobj;
                                                  inho1448.superobj = obj1448;
                                                  obj1448.data = inheritingObject.data;
                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                    obj1448._value = inheritingObject._value;
                                                  obj1448.outer = this;
                                                  var reader_stobjectdraw_outer1449 = function() {
                                                    return this.outer;
                                                  };
                                                  obj1448.methods["outer"] = reader_stobjectdraw_outer1449;
                                                  var obj_init_1448 = function() {
                                                    var origSuperDepth = superDepth;
                                                    superDepth = obj1448;
                                                    setLineNumber(990);    // compilenode identifier
                                                    obj1448.data["kind"] = var_kind__39__;
                                                    var reader_stobjectdraw_kind1450 = function() {
                                                      return this.data["kind"];
                                                    };
                                                    reader_stobjectdraw_kind1450.def = true;
                                                    obj1448.methods["kind"] = reader_stobjectdraw_kind1450;
                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], var_kind__39__)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("value of def 'kind' is not of type String"));
                                                    setLineNumber(991);    // compilenode identifier
                                                    obj1448.data["response"] = var_response__39__;
                                                    var reader_stobjectdraw_response1451 = function() {
                                                      return this.data["response"];
                                                    };
                                                    reader_stobjectdraw_response1451.def = true;
                                                    obj1448.methods["response"] = reader_stobjectdraw_response1451;
                                                    if (!Grace_isTrue(callmethod(var_Procedure, "match", [1], var_response__39__)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("value of def 'response' is not of type Procedure"));
                                                    superDepth = origSuperDepth;
                                                  };
                                                  obj_init_1448.apply(inheritingObject, []);
                                                  return obj1448;
                                                  };
                                                  func1447.paramTypes = [];
                                                  func1447.paramTypes.push([type_String, "kind'"]);
                                                  func1447.paramTypes.push([]);
                                                  func1447.confidential = true;
                                                  this.methods["eventLogKind()response()object"] = func1447;
                                                setLineNumber(994);    // compilenode method
                                                var func1452 = function(argcv) {    // method applicationTitle(1)size(1)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_initialTitle = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[0] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for applicationTitle (arg list 1) of applicationTitle(1)size(1)"));
                                                  var var_dimensions__39__ = arguments[curarg];
                                                  curarg++;
                                                  if (argcv[1] !== 1)
                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of applicationTitle(1)size(1)"));
                                                  // Start argument checking
                                                  curarg = 1;
                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in applicationTitle (arg list 1), which corresponds to parameter initialTitle, does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  curarg++;
                                                  setLineNumber(995);    // compilenode call
                                                  onSelf = true;
                                                  var call1453 = callmethodChecked(this, "Point", [0]);
                                                  if (!Grace_isTrue(callmethod(call1453, "match",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                              callmethod(call1453, "asString", [0])._value + "."));
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("stobjectdraw");
                                                  setLineNumber(994);    // compilenode object
                                                  var obj1454 = Grace_allocObject(null, "stobjectdraw.applicationTitle()size");
                                                  obj1454.definitionModule = "stobjectdraw";
                                                  obj1454.definitionLine = 994;
                                                  obj1454.outer = this;
                                                  var reader_stobjectdraw_outer1455 = function() {
                                                    return this.outer;
                                                  };
                                                  obj1454.methods["outer"] = reader_stobjectdraw_outer1455;
                                                  var obj_init_1454 = function() {
                                                    var origSuperDepth = superDepth;
                                                    superDepth = obj1454;
                                                    var func1456 = function(argcv) {    // method element
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for element"));
                                                      setModuleName("stobjectdraw");
                                                      var if1457 = GraceDone;
                                                      setLineNumber(1011);    // compilenode call
                                                      onSelf = true;
                                                      var call1458 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1458)) {
                                                        setLineNumber(1012);    // compilenode call
                                                        onSelf = true;
                                                        var call1459 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1460 = callmethodChecked(call1459, "document", [0]);
                                                        var call1461 = callmethodChecked(call1460, "body", [0]);
                                                        if1457 = call1461;
                                                      } else {
                                                        setLineNumber(1014);    // compilenode call
                                                        var call1462 = callmethodsuper(this, "element", [0]);
                                                        if1457 = call1462;
                                                      }
                                                      setLineNumber(1011);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], if1457)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method element does not have " + 
                                                                  callmethod(var_Foreign, "asString", [0])._value + "."));
                                                      return if1457;
                                                    };
                                                    func1456.paramCounts = [0];
                                                    obj1454.methods["element"] = func1456;
                                                    func1456.definitionLine = 1010;
                                                    func1456.definitionModule = "stobjectdraw";
                                                    var func1463 = function(argcv) {    // method arrangeHorizontal
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeHorizontal"));
                                                      setModuleName("stobjectdraw");
                                                      var if1464 = GraceDone;
                                                      setLineNumber(1024);    // compilenode call
                                                      onSelf = true;
                                                      var call1465 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1465)) {
                                                        setLineNumber(1025);    // compilenode call
                                                        var call1466 = callmethodsuper(this, "arrangeHorizontal", [0]);
                                                        if1464 = call1466;
                                                      } else {
                                                        setLineNumber(1027);    // compilenode identifier
                                                        onSelf = true;
                                                        var call1467 = callmethodChecked(this, "isHorizontal:=", [1], GraceTrue);
                                                        if1464 = call1467;
                                                      }
                                                      setLineNumber(1024);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1464)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method arrangeHorizontal does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1464;
                                                    };
                                                    func1463.paramCounts = [0];
                                                    obj1454.methods["arrangeHorizontal"] = func1463;
                                                    func1463.definitionLine = 1023;
                                                    func1463.definitionModule = "stobjectdraw";
                                                    var func1468 = function(argcv) {    // method arrangeVertical
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeVertical"));
                                                      setModuleName("stobjectdraw");
                                                      var if1469 = GraceDone;
                                                      setLineNumber(1034);    // compilenode call
                                                      onSelf = true;
                                                      var call1470 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1470)) {
                                                        setLineNumber(1035);    // compilenode call
                                                        var call1471 = callmethodsuper(this, "arrangeVertical", [0]);
                                                        if1469 = call1471;
                                                      } else {
                                                        setLineNumber(1037);    // compilenode identifier
                                                        onSelf = true;
                                                        var call1472 = callmethodChecked(this, "isHorizontal:=", [1], GraceFalse);
                                                        if1469 = call1472;
                                                      }
                                                      setLineNumber(1034);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1469)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method arrangeVertical does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1469;
                                                    };
                                                    func1468.paramCounts = [0];
                                                    obj1454.methods["arrangeVertical"] = func1468;
                                                    func1468.definitionLine = 1033;
                                                    func1468.definitionModule = "stobjectdraw";
                                                    var func1473 = function(argcv) {    // method on(1)do(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_kind = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)do(1)"));
                                                      var var_response = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[1] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of on(1)do(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1042);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      curarg++;
                                                      setLineNumber(1043);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in do (arg list 2), which corresponds to parameter response, does not have " + 
                                                                  callmethod(var_Procedure, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("stobjectdraw");
                                                      var if1474 = GraceDone;
                                                      setLineNumber(1044);    // compilenode call
                                                      onSelf = true;
                                                      var call1475 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1475)) {
                                                        setLineNumber(1045);    // compilenode call
                                                        onSelf = true;
                                                        var call1476 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1477 = callmethodChecked(call1476, "addEventListener", [2], var_kind, var_response);
                                                        if1474 = call1477;
                                                      } else {
                                                        setLineNumber(1047);    // compilenode call
                                                        var call1478 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call1479 = callmethodChecked(call1478, "eventLogKind()response", [1, 1], var_kind, var_response);
                                                        onSelf = true;
                                                        var call1480 = callmethodChecked(this, "events", [0]);
                                                        var call1481 = callmethodChecked(call1480, "push", [1], call1479);
                                                        if1474 = call1481;
                                                      }
                                                      setLineNumber(1044);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1474)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method on(1)do(1) does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1474;
                                                    };
                                                    func1473.paramTypes = [];
                                                    func1473.paramTypes.push([type_String, "kind"]);
                                                    func1473.paramTypes.push([]);
                                                    func1473.confidential = true;
                                                    func1473.paramCounts = [1, 1];
                                                    obj1454.methods["on()do"] = func1473;
                                                    func1473.definitionLine = 1042;
                                                    func1473.definitionModule = "stobjectdraw";
                                                    var func1482 = function(argcv) {    // method windowTitle
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for windowTitle"));
                                                      setModuleName("stobjectdraw");
                                                      var if1483 = GraceDone;
                                                      setLineNumber(1053);    // compilenode call
                                                      onSelf = true;
                                                      var call1484 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1484)) {
                                                        setLineNumber(1054);    // compilenode call
                                                        onSelf = true;
                                                        var call1485 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1486 = callmethodChecked(call1485, "title", [0]);
                                                        if1483 = call1486;
                                                      } else {
                                                        setLineNumber(1056);    // compilenode call
                                                        onSelf = true;
                                                        var call1487 = callmethodChecked(this, "theTitle", [0]);
                                                        if1483 = call1487;
                                                      }
                                                      setLineNumber(1053);    // return value
                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], if1483)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method windowTitle does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      return if1483;
                                                    };
                                                    func1482.paramCounts = [0];
                                                    obj1454.methods["windowTitle"] = func1482;
                                                    func1482.definitionLine = 1052;
                                                    func1482.definitionModule = "stobjectdraw";
                                                    var func1488 = function(argcv) {    // method windowTitle:=(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_value = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for windowTitle:=(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1061);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in windowTitle:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("stobjectdraw");
                                                      var if1489 = GraceDone;
                                                      setLineNumber(1062);    // compilenode call
                                                      onSelf = true;
                                                      var call1490 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1490)) {
                                                        setLineNumber(1063);    // compilenode call
                                                        onSelf = true;
                                                        var call1491 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1492 = callmethodChecked(call1491, "title:=", [1], var_value);
                                                        if1489 = call1492;
                                                      } else {
                                                        setLineNumber(1065);    // compilenode identifier
                                                        onSelf = true;
                                                        var call1493 = callmethodChecked(this, "theTitle:=", [1], var_value);
                                                        if1489 = call1493;
                                                      }
                                                      setLineNumber(1062);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1489)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method windowTitle:=(1) does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1489;
                                                    };
                                                    func1488.paramTypes = [];
                                                    func1488.paramTypes.push([type_String, "value"]);
                                                    func1488.paramCounts = [1];
                                                    obj1454.methods["windowTitle:="] = func1488;
                                                    func1488.definitionLine = 1061;
                                                    func1488.definitionModule = "stobjectdraw";
                                                    var func1494 = function(argcv) {    // method width
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                      setModuleName("stobjectdraw");
                                                      var if1495 = GraceDone;
                                                      setLineNumber(1071);    // compilenode call
                                                      onSelf = true;
                                                      var call1496 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1496)) {
                                                        setLineNumber(1072);    // compilenode call
                                                        onSelf = true;
                                                        var call1497 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1498 = callmethodChecked(call1497, "width", [0]);
                                                        if1495 = call1498;
                                                      } else {
                                                        setLineNumber(1074);    // compilenode call
                                                        onSelf = true;
                                                        var call1499 = callmethodChecked(this, "theWidth", [0]);
                                                        if1495 = call1499;
                                                      }
                                                      setLineNumber(1071);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], if1495)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method width does not have " + 
                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                      return if1495;
                                                    };
                                                    func1494.paramCounts = [0];
                                                    obj1454.methods["width"] = func1494;
                                                    func1494.definitionLine = 1070;
                                                    func1494.definitionModule = "stobjectdraw";
                                                    var func1500 = function(argcv) {    // method height
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                      setModuleName("stobjectdraw");
                                                      var if1501 = GraceDone;
                                                      setLineNumber(1080);    // compilenode call
                                                      onSelf = true;
                                                      var call1502 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1502)) {
                                                        setLineNumber(1081);    // compilenode call
                                                        onSelf = true;
                                                        var call1503 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1504 = callmethodChecked(call1503, "height", [0]);
                                                        if1501 = call1504;
                                                      } else {
                                                        setLineNumber(1083);    // compilenode call
                                                        onSelf = true;
                                                        var call1505 = callmethodChecked(this, "theHeight", [0]);
                                                        if1501 = call1505;
                                                      }
                                                      setLineNumber(1080);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], if1501)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method height does not have " + 
                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                      return if1501;
                                                    };
                                                    func1500.paramCounts = [0];
                                                    obj1454.methods["height"] = func1500;
                                                    func1500.definitionLine = 1079;
                                                    func1500.definitionModule = "stobjectdraw";
                                                    var func1506 = function(argcv) {    // method onMouseEnterDo(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_f = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnterDo(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1093);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in onMouseEnterDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                                  callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("stobjectdraw");
                                                      setLineNumber(1094);    // compilenode string
                                                      var string1507 = new GraceString("mouseover");
                                                      var block1508 = new GraceBlock(this, 1094, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block1508.real = function(var_event__39__) {
                                                        setLineNumber(1095);    // compilenode identifier
                                                        var call1509 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                                                        var var_from = call1509;
                                                        var if1510 = GraceDone;
                                                        setLineNumber(1097);    // compilenode identifier
                                                        var call1512 = callmethodChecked(var_dom, "noObject", [0]);
                                                        var opresult1514 = callmethodChecked(call1512, "==", [1], var_from);
                                                        if (Grace_isTrue(opresult1514)) {
                                                          setLineNumber(1098);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1515 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                                                          var call1516 = callmethodChecked(var_f, "apply", [1], call1515);
                                                          if1510 = call1516;
                                                        }
                                                        return if1510;
                                                      };
                                                      onSelf = true;
                                                      var call1517 = callmethodChecked(this, "on()do", [1, 1], string1507, block1508);
                                                      setLineNumber(1094);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1517)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method onMouseEnterDo(1) does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return call1517;
                                                    };
                                                    func1506.paramTypes = [];
                                                    func1506.paramTypes.push([]);
                                                    func1506.paramCounts = [1];
                                                    obj1454.methods["onMouseEnterDo"] = func1506;
                                                    func1506.definitionLine = 1093;
                                                    func1506.definitionModule = "stobjectdraw";
                                                    var func1518 = function(argcv) {    // method onMouseExitDo(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_f = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExitDo(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1104);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in onMouseExitDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                                  callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("stobjectdraw");
                                                      setLineNumber(1105);    // compilenode string
                                                      var string1519 = new GraceString("mouseout");
                                                      var block1520 = new GraceBlock(this, 1105, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block1520.real = function(var_event__39__) {
                                                        setLineNumber(1106);    // compilenode identifier
                                                        var call1521 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                                                        var var_to = call1521;
                                                        var if1522 = GraceDone;
                                                        setLineNumber(1108);    // compilenode identifier
                                                        var call1524 = callmethodChecked(var_dom, "noObject", [0]);
                                                        var opresult1526 = callmethodChecked(call1524, "==", [1], var_to);
                                                        if (Grace_isTrue(opresult1526)) {
                                                          setLineNumber(1109);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1527 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                                                          var call1528 = callmethodChecked(var_f, "apply", [1], call1527);
                                                          if1522 = call1528;
                                                        }
                                                        return if1522;
                                                      };
                                                      onSelf = true;
                                                      var call1529 = callmethodChecked(this, "on()do", [1, 1], string1519, block1520);
                                                      setLineNumber(1105);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1529)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method onMouseExitDo(1) does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return call1529;
                                                    };
                                                    func1518.paramTypes = [];
                                                    func1518.paramTypes.push([]);
                                                    func1518.paramCounts = [1];
                                                    obj1454.methods["onMouseExitDo"] = func1518;
                                                    func1518.definitionLine = 1104;
                                                    func1518.definitionModule = "stobjectdraw";
                                                    var func1530 = function(argcv) {    // method onMouse(1)do(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_kind = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouse (arg list 1) of onMouse(1)do(1)"));
                                                      var var_bl = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[1] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of onMouse(1)do(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1115);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in onMouse (arg list 1), which corresponds to parameter kind, does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      curarg++;
                                                      if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in do (arg list 2), which corresponds to parameter bl, does not have " + 
                                                                  callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("stobjectdraw");
                                                      setLineNumber(1116);    // compilenode block
                                                      var block1531 = new GraceBlock(this, 1116, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block1531.real = function(var_evt) {
                                                        setLineNumber(1117);    // compilenode identifier
                                                        var call1532 = callmethodChecked(var_evt, "pageY", [0]);
                                                        var call1534 = callmethodChecked(var_evt, "pageX", [0]);
                                                        var opresult1536 = callmethodChecked(call1534, "@", [1], call1532);
                                                        var call1537 = callmethodChecked(var_bl, "apply", [1], opresult1536);
                                                        return call1537;
                                                      };
                                                      setLineNumber(1116);    // compilenode call
                                                      onSelf = true;
                                                      var call1538 = callmethodChecked(this, "theWindow", [0]);
                                                      var call1539 = callmethodChecked(call1538, "addEventListener", [2], var_kind, block1531);
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1539)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method onMouse(1)do(1) does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return call1539;
                                                    };
                                                    func1530.paramTypes = [];
                                                    func1530.paramTypes.push([type_String, "kind"]);
                                                    func1530.paramTypes.push([]);
                                                    func1530.confidential = true;
                                                    func1530.paramCounts = [1, 1];
                                                    obj1454.methods["onMouse()do"] = func1530;
                                                    func1530.definitionLine = 1115;
                                                    func1530.definitionModule = "stobjectdraw";
                                                    var func1540 = function(argcv) {    // method startApplication
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startApplication"));
                                                      setModuleName("stobjectdraw");
                                                      var if1541 = GraceDone;
                                                      setLineNumber(1123);    // compilenode call
                                                      onSelf = true;
                                                      var call1542 = callmethodChecked(this, "isOpened", [0]);
                                                      var call1543 = callmethodChecked(call1542, "prefix!", [0]);
                                                      if (Grace_isTrue(call1543)) {
                                                        setLineNumber(1124);    // compilenode string
                                                        var string1544 = new GraceString("");
                                                        var string1545 = new GraceString("");
                                                        var string1546 = new GraceString("");
                                                        onSelf = true;
                                                        var call1548 = callmethodChecked(this, "theHeight", [0]);
                                                        var string1550 = new GraceString(",height=");
                                                        onSelf = true;
                                                        var call1552 = callmethodChecked(this, "theWidth", [0]);
                                                        var string1554 = new GraceString("width=");
                                                        var opresult1556 = callmethodChecked(string1554, "++", [1], call1552);
                                                        var opresult1558 = callmethodChecked(opresult1556, "++", [1], string1550);
                                                        var opresult1560 = callmethodChecked(opresult1558, "++", [1], call1548);
                                                        var opresult1562 = callmethodChecked(opresult1560, "++", [1], string1546);
                                                        var call1563 = callmethodChecked(var_dom, "window", [0]);
                                                        var call1564 = callmethodChecked(call1563, "open", [3], string1544, string1545, opresult1562);
                                                        onSelf = true;
                                                        var call1565 = callmethodChecked(this, "theWindow:=", [1], call1564);
                                                        setLineNumber(1125);    // compilenode call
                                                        onSelf = true;
                                                        var call1566 = callmethodChecked(this, "theTitle", [0]);
                                                        onSelf = true;
                                                        var call1567 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1568 = callmethodChecked(call1567, "document", [0]);
                                                        var call1569 = callmethodChecked(call1568, "title:=", [1], call1566);
                                                        setLineNumber(1126);    // compilenode call
                                                        onSelf = true;
                                                        var call1570 = callmethodChecked(this, "element", [0]);
                                                        onSelf = true;
                                                        var call1571 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1572 = callmethodChecked(call1571, "document", [0]);
                                                        var call1573 = callmethodChecked(call1572, "body", [0]);
                                                        var call1574 = callmethodChecked(call1573, "appendChild", [1], call1570);
                                                        var if1575 = GraceDone;
                                                        setLineNumber(1128);    // compilenode identifier
                                                        var call1576 = callmethodChecked(var_dom, "window", [0]);
                                                        var string1577 = new GraceString("graceRegisterWindow");
                                                        var call1578 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], call1576, string1577);
                                                        if (Grace_isTrue(call1578)) {
                                                          setLineNumber(1129);    // compilenode call
                                                          onSelf = true;
                                                          var call1579 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1580 = callmethodChecked(var_dom, "window", [0]);
                                                          var call1581 = callmethodChecked(call1580, "graceRegisterWindow", [1], call1579);
                                                          if1575 = call1581;
                                                        }
                                                        setLineNumber(1132);    // compilenode identifier
                                                        onSelf = true;
                                                        var call1582 = callmethodChecked(this, "isOpened:=", [1], GraceTrue);
                                                        setLineNumber(1134);    // compilenode string
                                                        var string1583 = new GraceString("100%");
                                                        onSelf = true;
                                                        var call1584 = callmethodChecked(this, "element", [0]);
                                                        var call1585 = callmethodChecked(call1584, "style", [0]);
                                                        var call1586 = callmethodChecked(call1585, "width:=", [1], string1583);
                                                        setLineNumber(1135);    // compilenode string
                                                        var string1587 = new GraceString("0px");
                                                        onSelf = true;
                                                        var call1588 = callmethodChecked(this, "element", [0]);
                                                        var call1589 = callmethodChecked(call1588, "style", [0]);
                                                        var call1590 = callmethodChecked(call1589, "margin:=", [1], string1587);
                                                        var if1591 = GraceDone;
                                                        setLineNumber(1137);    // compilenode call
                                                        onSelf = true;
                                                        var call1592 = callmethodChecked(this, "isHorizontal", [0]);
                                                        if (Grace_isTrue(call1592)) {
                                                          setLineNumber(1138);    // compilenode call
                                                          onSelf = true;
                                                          var call1593 = callmethodChecked(this, "arrangeHorizontal", [0]);
                                                          if1591 = call1593;
                                                        } else {
                                                          setLineNumber(1140);    // compilenode call
                                                          onSelf = true;
                                                          var call1594 = callmethodChecked(this, "arrangeVertical", [0]);
                                                          if1591 = call1594;
                                                        }
                                                        setLineNumber(1143);    // compilenode call
                                                        onSelf = true;
                                                        var call1595 = callmethodChecked(this, "events", [0]);
                                                        var block1596 = new GraceBlock(this, 1143, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block1596.real = function(var_anEvent) {
                                                          setLineNumber(1144);    // compilenode identifier
                                                          var call1597 = callmethodChecked(var_anEvent, "kind", [0]);
                                                          var call1598 = callmethodChecked(var_anEvent, "response", [0]);
                                                          onSelf = true;
                                                          var call1599 = callmethodChecked(this, "on()do", [1, 1], call1597, call1598);
                                                          return call1599;
                                                        };
                                                        var call1600 = callmethodChecked(var_prelude, "for()do", [1, 1], call1595, block1596);
                                                        if1541 = call1600;
                                                      }
                                                      setLineNumber(1123);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1541)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method startApplication does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1541;
                                                    };
                                                    func1540.paramCounts = [0];
                                                    obj1454.methods["startApplication"] = func1540;
                                                    func1540.definitionLine = 1122;
                                                    func1540.definitionModule = "stobjectdraw";
                                                    var func1601 = function(argcv) {    // method stopApplication
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for stopApplication"));
                                                      setModuleName("stobjectdraw");
                                                      var if1602 = GraceDone;
                                                      setLineNumber(1151);    // compilenode call
                                                      onSelf = true;
                                                      var call1603 = callmethodChecked(this, "isOpened", [0]);
                                                      if (Grace_isTrue(call1603)) {
                                                        setLineNumber(1152);    // compilenode call
                                                        onSelf = true;
                                                        var call1604 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1605 = callmethodChecked(call1604, "close", [0]);
                                                        if1602 = call1605;
                                                      }
                                                      setLineNumber(1151);    // return value
                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1602)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method stopApplication does not have " + 
                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                      return if1602;
                                                    };
                                                    func1601.paramCounts = [0];
                                                    obj1454.methods["stopApplication"] = func1601;
                                                    func1601.definitionLine = 1150;
                                                    func1601.definitionModule = "stobjectdraw";
                                                    var func1606 = function(argcv) {    // method asString
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      if (argcv[0] !== 0)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                      setModuleName("stobjectdraw");
                                                      setLineNumber(1158);    // compilenode string
                                                      var string1607 = new GraceString("");
                                                      onSelf = true;
                                                      var call1609 = callmethodChecked(this, "windowTitle", [0]);
                                                      var string1611 = new GraceString("application titled ");
                                                      var opresult1613 = callmethodChecked(string1611, "++", [1], call1609);
                                                      var opresult1615 = callmethodChecked(opresult1613, "++", [1], string1607);
                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1615)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method asString does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      return opresult1615;
                                                    };
                                                    func1606.paramCounts = [0];
                                                    obj1454.methods["asString"] = func1606;
                                                    func1606.definitionLine = 1157;
                                                    func1606.definitionModule = "stobjectdraw";
                                                    setLineNumber(999);    // compilenode identifier
                                                    var call1616 = callmethodChecked(var_document, "createDocumentFragment", [0]);
                                                    var call1617 = callmethodChecked(superDepth, "outer", [0]);
                                                    onOuter = true;
                                                    onSelf = true;
                                                    var call1618 = callmethodChecked(call1617, "containerFromElement()object", [1, 1], call1616, this);
                                                    obj1454.superobj = call1618;
                                                    if (call1618.data) obj1454.data = call1618.data;
                                                    if (call1618.hasOwnProperty('_value'))
                                                        obj1454._value = call1618._value;
                                                    setLineNumber(1001);    // compilenode identifier
                                                    obj1454.data["isOpened"] = GraceFalse;
                                                    var reader_stobjectdraw_isOpened1619 = function() {
                                                      return this.data["isOpened"];
                                                    };
                                                    obj1454.methods["isOpened"] = reader_stobjectdraw_isOpened1619;
                                                    obj1454.data["isOpened"] = GraceFalse;
                                                    var writer_stobjectdraw_isOpened1619 = function(argcv, o) {
                                                      this.data["isOpened"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1454.methods["isOpened:="] = writer_stobjectdraw_isOpened1619;
                                                    reader_stobjectdraw_isOpened1619.confidential = true;
                                                    writer_stobjectdraw_isOpened1619.confidential = true;
                                                    if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("initial value of var 'isOpened' is not of type Boolean"));
                                                    obj1454.mutable = true;
                                                    obj1454.data["theWindow"] = undefined;
                                                    var reader_stobjectdraw_theWindow1620 = function() {
                                                      return this.data["theWindow"];
                                                    };
                                                    obj1454.methods["theWindow"] = reader_stobjectdraw_theWindow1620;
                                                    obj1454.data["theWindow"] = undefined;
                                                    var writer_stobjectdraw_theWindow1620 = function(argcv, o) {
                                                      this.data["theWindow"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1454.methods["theWindow:="] = writer_stobjectdraw_theWindow1620;
                                                    reader_stobjectdraw_theWindow1620.confidential = true;
                                                    writer_stobjectdraw_theWindow1620.confidential = true;
                                                    obj1454.mutable = true;
                                                    setLineNumber(1004);    // compilenode identifier
                                                    obj1454.data["theTitle"] = var_initialTitle;
                                                    var reader_stobjectdraw_theTitle1621 = function() {
                                                      return this.data["theTitle"];
                                                    };
                                                    obj1454.methods["theTitle"] = reader_stobjectdraw_theTitle1621;
                                                    obj1454.data["theTitle"] = var_initialTitle;
                                                    var writer_stobjectdraw_theTitle1621 = function(argcv, o) {
                                                      this.data["theTitle"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1454.methods["theTitle:="] = writer_stobjectdraw_theTitle1621;
                                                    reader_stobjectdraw_theTitle1621.confidential = true;
                                                    writer_stobjectdraw_theTitle1621.confidential = true;
                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], var_initialTitle)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("initial value of var 'theTitle' is not of type String"));
                                                    obj1454.mutable = true;
                                                    setLineNumber(1005);    // compilenode identifier
                                                    var call1622 = callmethodChecked(var_dimensions__39__, "x", [0]);
                                                    obj1454.data["theWidth"] = call1622;
                                                    var reader_stobjectdraw_theWidth1623 = function() {
                                                      return this.data["theWidth"];
                                                    };
                                                    obj1454.methods["theWidth"] = reader_stobjectdraw_theWidth1623;
                                                    obj1454.data["theWidth"] = call1622;
                                                    var writer_stobjectdraw_theWidth1623 = function(argcv, o) {
                                                      this.data["theWidth"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1454.methods["theWidth:="] = writer_stobjectdraw_theWidth1623;
                                                    reader_stobjectdraw_theWidth1623.confidential = true;
                                                    writer_stobjectdraw_theWidth1623.confidential = true;
                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1622)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("initial value of var 'theWidth' is not of type Number"));
                                                    obj1454.mutable = true;
                                                    setLineNumber(1006);    // compilenode identifier
                                                    var call1624 = callmethodChecked(var_dimensions__39__, "y", [0]);
                                                    obj1454.data["theHeight"] = call1624;
                                                    var reader_stobjectdraw_theHeight1625 = function() {
                                                      return this.data["theHeight"];
                                                    };
                                                    obj1454.methods["theHeight"] = reader_stobjectdraw_theHeight1625;
                                                    obj1454.data["theHeight"] = call1624;
                                                    var writer_stobjectdraw_theHeight1625 = function(argcv, o) {
                                                      this.data["theHeight"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1454.methods["theHeight:="] = writer_stobjectdraw_theHeight1625;
                                                    reader_stobjectdraw_theHeight1625.confidential = true;
                                                    writer_stobjectdraw_theHeight1625.confidential = true;
                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1624)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("initial value of var 'theHeight' is not of type Number"));
                                                    obj1454.mutable = true;
                                                    setLineNumber(1008);    // compilenode array
                                                    var array1626 = new PrimitiveGraceList([]);
                                                    obj1454.data["events"] = array1626;
                                                    var reader_stobjectdraw_events1627 = function() {
                                                      return this.data["events"];
                                                    };
                                                    reader_stobjectdraw_events1627.def = true;
                                                    reader_stobjectdraw_events1627.confidential = true;
                                                    obj1454.methods["events"] = reader_stobjectdraw_events1627;
                                                    setLineNumber(1019);    // compilenode identifier
                                                    obj1454.data["isHorizontal"] = GraceTrue;
                                                    var reader_stobjectdraw_isHorizontal1628 = function() {
                                                      return this.data["isHorizontal"];
                                                    };
                                                    obj1454.methods["isHorizontal"] = reader_stobjectdraw_isHorizontal1628;
                                                    obj1454.data["isHorizontal"] = GraceTrue;
                                                    var writer_stobjectdraw_isHorizontal1628 = function(argcv, o) {
                                                      this.data["isHorizontal"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj1454.methods["isHorizontal:="] = writer_stobjectdraw_isHorizontal1628;
                                                    reader_stobjectdraw_isHorizontal1628.confidential = true;
                                                    writer_stobjectdraw_isHorizontal1628.confidential = true;
                                                    if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceTrue)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("initial value of var 'isHorizontal' is not of type Boolean"));
                                                    obj1454.mutable = true;
                                                    superDepth = origSuperDepth;
                                                  };
                                                  obj_init_1454.apply(obj1454, []);
                                                  setLineNumber(994);    // return value
                                                  if (!Grace_isTrue(callmethod(var_Application, "match", [1], obj1454)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method applicationTitle(1)size(1) does not have " + 
                                                              callmethod(var_Application, "asString", [0])._value + "."));
                                                  return obj1454;
                                                };
                                                func1452.paramTypes = [];
                                                func1452.paramTypes.push([type_String, "initialTitle"]);
                                                func1452.paramTypes.push([]);
                                                func1452.paramCounts = [1, 1];
                                                this.methods["applicationTitle()size"] = func1452;
                                                func1452.definitionLine = 994;
                                                func1452.definitionModule = "stobjectdraw";
                                                  var func1629 = function(argcv) {    // method applicationTitle(1     )size(1     )()object
                                                    var curarg = 1;
                                                    var var_initialTitle = arguments[curarg];
                                                    curarg++;
                                                    var var_dimensions__39__ = arguments[curarg];
                                                    curarg++;
                                                    var inheritingObject = arguments[curarg++];
                                                    // Start argument processing
                                                    curarg = 1;
                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in applicationTitle (arg list 1), which corresponds to parameter initialTitle, does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    curarg++;
                                                    setLineNumber(995);    // compilenode call
                                                    onSelf = true;
                                                    var call1630 = callmethodChecked(this, "Point", [0]);
                                                    if (!Grace_isTrue(callmethod(call1630, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                callmethod(call1630, "asString", [0])._value + "."));
                                                    curarg++;
                                                    // End argument processing
                                                    setModuleName("stobjectdraw");
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var obj1631 = Grace_allocObject(null, "applicationTitle()size");
                                                    obj1631.definitionModule = "stobjectdraw";
                                                    obj1631.definitionLine = 994;
                                                    var inho1631 = inheritingObject;
                                                    while (inho1631.superobj) inho1631 = inho1631.superobj;
                                                    inho1631.superobj = obj1631;
                                                    obj1631.data = inheritingObject.data;
                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                      obj1631._value = inheritingObject._value;
                                                    obj1631.outer = this;
                                                    var reader_stobjectdraw_outer1632 = function() {
                                                      return this.outer;
                                                    };
                                                    obj1631.methods["outer"] = reader_stobjectdraw_outer1632;
                                                    var obj_init_1631 = function() {
                                                      var origSuperDepth = superDepth;
                                                      superDepth = obj1631;
                                                      var func1633 = function(argcv) {    // method element
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for element"));
                                                        setModuleName("stobjectdraw");
                                                        var if1634 = GraceDone;
                                                        setLineNumber(1011);    // compilenode call
                                                        onSelf = true;
                                                        var call1635 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1635)) {
                                                          setLineNumber(1012);    // compilenode call
                                                          onSelf = true;
                                                          var call1636 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1637 = callmethodChecked(call1636, "document", [0]);
                                                          var call1638 = callmethodChecked(call1637, "body", [0]);
                                                          if1634 = call1638;
                                                        } else {
                                                          setLineNumber(1014);    // compilenode call
                                                          var call1639 = callmethodsuper(this, "element", [0]);
                                                          if1634 = call1639;
                                                        }
                                                        setLineNumber(1011);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], if1634)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method element does not have " + 
                                                                    callmethod(var_Foreign, "asString", [0])._value + "."));
                                                        return if1634;
                                                      };
                                                      func1633.paramCounts = [0];
                                                      obj1631.methods["element"] = func1633;
                                                      func1633.definitionLine = 1010;
                                                      func1633.definitionModule = "stobjectdraw";
                                                      var func1640 = function(argcv) {    // method arrangeHorizontal
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeHorizontal"));
                                                        setModuleName("stobjectdraw");
                                                        var if1641 = GraceDone;
                                                        setLineNumber(1024);    // compilenode call
                                                        onSelf = true;
                                                        var call1642 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1642)) {
                                                          setLineNumber(1025);    // compilenode call
                                                          var call1643 = callmethodsuper(this, "arrangeHorizontal", [0]);
                                                          if1641 = call1643;
                                                        } else {
                                                          setLineNumber(1027);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1644 = callmethodChecked(this, "isHorizontal:=", [1], GraceTrue);
                                                          if1641 = call1644;
                                                        }
                                                        setLineNumber(1024);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1641)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method arrangeHorizontal does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1641;
                                                      };
                                                      func1640.paramCounts = [0];
                                                      obj1631.methods["arrangeHorizontal"] = func1640;
                                                      func1640.definitionLine = 1023;
                                                      func1640.definitionModule = "stobjectdraw";
                                                      var func1645 = function(argcv) {    // method arrangeVertical
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for arrangeVertical"));
                                                        setModuleName("stobjectdraw");
                                                        var if1646 = GraceDone;
                                                        setLineNumber(1034);    // compilenode call
                                                        onSelf = true;
                                                        var call1647 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1647)) {
                                                          setLineNumber(1035);    // compilenode call
                                                          var call1648 = callmethodsuper(this, "arrangeVertical", [0]);
                                                          if1646 = call1648;
                                                        } else {
                                                          setLineNumber(1037);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1649 = callmethodChecked(this, "isHorizontal:=", [1], GraceFalse);
                                                          if1646 = call1649;
                                                        }
                                                        setLineNumber(1034);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1646)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method arrangeVertical does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1646;
                                                      };
                                                      func1645.paramCounts = [0];
                                                      obj1631.methods["arrangeVertical"] = func1645;
                                                      func1645.definitionLine = 1033;
                                                      func1645.definitionModule = "stobjectdraw";
                                                      var func1650 = function(argcv) {    // method on(1)do(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_kind = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 1) of on(1)do(1)"));
                                                        var var_response = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[1] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of on(1)do(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1042);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in on (arg list 1), which corresponds to parameter kind, does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        curarg++;
                                                        setLineNumber(1043);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Procedure, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in do (arg list 2), which corresponds to parameter response, does not have " + 
                                                                    callmethod(var_Procedure, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        var if1651 = GraceDone;
                                                        setLineNumber(1044);    // compilenode call
                                                        onSelf = true;
                                                        var call1652 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1652)) {
                                                          setLineNumber(1045);    // compilenode call
                                                          onSelf = true;
                                                          var call1653 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1654 = callmethodChecked(call1653, "addEventListener", [2], var_kind, var_response);
                                                          if1651 = call1654;
                                                        } else {
                                                          setLineNumber(1047);    // compilenode call
                                                          var call1655 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call1656 = callmethodChecked(call1655, "eventLogKind()response", [1, 1], var_kind, var_response);
                                                          onSelf = true;
                                                          var call1657 = callmethodChecked(this, "events", [0]);
                                                          var call1658 = callmethodChecked(call1657, "push", [1], call1656);
                                                          if1651 = call1658;
                                                        }
                                                        setLineNumber(1044);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1651)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method on(1)do(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1651;
                                                      };
                                                      func1650.paramTypes = [];
                                                      func1650.paramTypes.push([type_String, "kind"]);
                                                      func1650.paramTypes.push([]);
                                                      func1650.confidential = true;
                                                      func1650.paramCounts = [1, 1];
                                                      obj1631.methods["on()do"] = func1650;
                                                      func1650.definitionLine = 1042;
                                                      func1650.definitionModule = "stobjectdraw";
                                                      var func1659 = function(argcv) {    // method windowTitle
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for windowTitle"));
                                                        setModuleName("stobjectdraw");
                                                        var if1660 = GraceDone;
                                                        setLineNumber(1053);    // compilenode call
                                                        onSelf = true;
                                                        var call1661 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1661)) {
                                                          setLineNumber(1054);    // compilenode call
                                                          onSelf = true;
                                                          var call1662 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1663 = callmethodChecked(call1662, "title", [0]);
                                                          if1660 = call1663;
                                                        } else {
                                                          setLineNumber(1056);    // compilenode call
                                                          onSelf = true;
                                                          var call1664 = callmethodChecked(this, "theTitle", [0]);
                                                          if1660 = call1664;
                                                        }
                                                        setLineNumber(1053);    // return value
                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], if1660)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method windowTitle does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        return if1660;
                                                      };
                                                      func1659.paramCounts = [0];
                                                      obj1631.methods["windowTitle"] = func1659;
                                                      func1659.definitionLine = 1052;
                                                      func1659.definitionModule = "stobjectdraw";
                                                      var func1665 = function(argcv) {    // method windowTitle:=(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_value = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for windowTitle:=(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1061);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in windowTitle:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        var if1666 = GraceDone;
                                                        setLineNumber(1062);    // compilenode call
                                                        onSelf = true;
                                                        var call1667 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1667)) {
                                                          setLineNumber(1063);    // compilenode call
                                                          onSelf = true;
                                                          var call1668 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1669 = callmethodChecked(call1668, "title:=", [1], var_value);
                                                          if1666 = call1669;
                                                        } else {
                                                          setLineNumber(1065);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1670 = callmethodChecked(this, "theTitle:=", [1], var_value);
                                                          if1666 = call1670;
                                                        }
                                                        setLineNumber(1062);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1666)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method windowTitle:=(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1666;
                                                      };
                                                      func1665.paramTypes = [];
                                                      func1665.paramTypes.push([type_String, "value"]);
                                                      func1665.paramCounts = [1];
                                                      obj1631.methods["windowTitle:="] = func1665;
                                                      func1665.definitionLine = 1061;
                                                      func1665.definitionModule = "stobjectdraw";
                                                      var func1671 = function(argcv) {    // method width
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                        setModuleName("stobjectdraw");
                                                        var if1672 = GraceDone;
                                                        setLineNumber(1071);    // compilenode call
                                                        onSelf = true;
                                                        var call1673 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1673)) {
                                                          setLineNumber(1072);    // compilenode call
                                                          onSelf = true;
                                                          var call1674 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1675 = callmethodChecked(call1674, "width", [0]);
                                                          if1672 = call1675;
                                                        } else {
                                                          setLineNumber(1074);    // compilenode call
                                                          onSelf = true;
                                                          var call1676 = callmethodChecked(this, "theWidth", [0]);
                                                          if1672 = call1676;
                                                        }
                                                        setLineNumber(1071);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], if1672)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method width does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        return if1672;
                                                      };
                                                      func1671.paramCounts = [0];
                                                      obj1631.methods["width"] = func1671;
                                                      func1671.definitionLine = 1070;
                                                      func1671.definitionModule = "stobjectdraw";
                                                      var func1677 = function(argcv) {    // method height
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                        setModuleName("stobjectdraw");
                                                        var if1678 = GraceDone;
                                                        setLineNumber(1080);    // compilenode call
                                                        onSelf = true;
                                                        var call1679 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1679)) {
                                                          setLineNumber(1081);    // compilenode call
                                                          onSelf = true;
                                                          var call1680 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1681 = callmethodChecked(call1680, "height", [0]);
                                                          if1678 = call1681;
                                                        } else {
                                                          setLineNumber(1083);    // compilenode call
                                                          onSelf = true;
                                                          var call1682 = callmethodChecked(this, "theHeight", [0]);
                                                          if1678 = call1682;
                                                        }
                                                        setLineNumber(1080);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], if1678)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method height does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        return if1678;
                                                      };
                                                      func1677.paramCounts = [0];
                                                      obj1631.methods["height"] = func1677;
                                                      func1677.definitionLine = 1079;
                                                      func1677.definitionModule = "stobjectdraw";
                                                      var func1683 = function(argcv) {    // method onMouseEnterDo(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_f = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnterDo(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1093);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in onMouseEnterDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1094);    // compilenode string
                                                        var string1684 = new GraceString("mouseover");
                                                        var block1685 = new GraceBlock(this, 1094, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block1685.real = function(var_event__39__) {
                                                          setLineNumber(1095);    // compilenode identifier
                                                          var call1686 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                                                          var var_from = call1686;
                                                          var if1687 = GraceDone;
                                                          setLineNumber(1097);    // compilenode identifier
                                                          var call1689 = callmethodChecked(var_dom, "noObject", [0]);
                                                          var opresult1691 = callmethodChecked(call1689, "==", [1], var_from);
                                                          if (Grace_isTrue(opresult1691)) {
                                                            setLineNumber(1098);    // compilenode identifier
                                                            onSelf = true;
                                                            var call1692 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                                                            var call1693 = callmethodChecked(var_f, "apply", [1], call1692);
                                                            if1687 = call1693;
                                                          }
                                                          return if1687;
                                                        };
                                                        onSelf = true;
                                                        var call1694 = callmethodChecked(this, "on()do", [1, 1], string1684, block1685);
                                                        setLineNumber(1094);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1694)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method onMouseEnterDo(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1694;
                                                      };
                                                      func1683.paramTypes = [];
                                                      func1683.paramTypes.push([]);
                                                      func1683.paramCounts = [1];
                                                      obj1631.methods["onMouseEnterDo"] = func1683;
                                                      func1683.definitionLine = 1093;
                                                      func1683.definitionModule = "stobjectdraw";
                                                      var func1695 = function(argcv) {    // method onMouseExitDo(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_f = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExitDo(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1104);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in onMouseExitDo (arg list 1), which corresponds to parameter f, does not have " + 
                                                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1105);    // compilenode string
                                                        var string1696 = new GraceString("mouseout");
                                                        var block1697 = new GraceBlock(this, 1105, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block1697.real = function(var_event__39__) {
                                                          setLineNumber(1106);    // compilenode identifier
                                                          var call1698 = callmethodChecked(var_event__39__, "relatedTarget", [0]);
                                                          var var_to = call1698;
                                                          var if1699 = GraceDone;
                                                          setLineNumber(1108);    // compilenode identifier
                                                          var call1701 = callmethodChecked(var_dom, "noObject", [0]);
                                                          var opresult1703 = callmethodChecked(call1701, "==", [1], var_to);
                                                          if (Grace_isTrue(opresult1703)) {
                                                            setLineNumber(1109);    // compilenode identifier
                                                            onSelf = true;
                                                            var call1704 = callmethodChecked(this, "mouseEventSource()event", [1, 1], this, var_event__39__);
                                                            var call1705 = callmethodChecked(var_f, "apply", [1], call1704);
                                                            if1699 = call1705;
                                                          }
                                                          return if1699;
                                                        };
                                                        onSelf = true;
                                                        var call1706 = callmethodChecked(this, "on()do", [1, 1], string1696, block1697);
                                                        setLineNumber(1105);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1706)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method onMouseExitDo(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1706;
                                                      };
                                                      func1695.paramTypes = [];
                                                      func1695.paramTypes.push([]);
                                                      func1695.paramCounts = [1];
                                                      obj1631.methods["onMouseExitDo"] = func1695;
                                                      func1695.definitionLine = 1104;
                                                      func1695.definitionModule = "stobjectdraw";
                                                      var func1707 = function(argcv) {    // method onMouse(1)do(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_kind = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouse (arg list 1) of onMouse(1)do(1)"));
                                                        var var_bl = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[1] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for do (arg list 2) of onMouse(1)do(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1115);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in onMouse (arg list 1), which corresponds to parameter kind, does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        curarg++;
                                                        if (!Grace_isTrue(callmethod(var_MouseResponse, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in do (arg list 2), which corresponds to parameter bl, does not have " + 
                                                                    callmethod(var_MouseResponse, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1116);    // compilenode block
                                                        var block1708 = new GraceBlock(this, 1116, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block1708.real = function(var_evt) {
                                                          setLineNumber(1117);    // compilenode identifier
                                                          var call1709 = callmethodChecked(var_evt, "pageY", [0]);
                                                          var call1711 = callmethodChecked(var_evt, "pageX", [0]);
                                                          var opresult1713 = callmethodChecked(call1711, "@", [1], call1709);
                                                          var call1714 = callmethodChecked(var_bl, "apply", [1], opresult1713);
                                                          return call1714;
                                                        };
                                                        setLineNumber(1116);    // compilenode call
                                                        onSelf = true;
                                                        var call1715 = callmethodChecked(this, "theWindow", [0]);
                                                        var call1716 = callmethodChecked(call1715, "addEventListener", [2], var_kind, block1708);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1716)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method onMouse(1)do(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1716;
                                                      };
                                                      func1707.paramTypes = [];
                                                      func1707.paramTypes.push([type_String, "kind"]);
                                                      func1707.paramTypes.push([]);
                                                      func1707.confidential = true;
                                                      func1707.paramCounts = [1, 1];
                                                      obj1631.methods["onMouse()do"] = func1707;
                                                      func1707.definitionLine = 1115;
                                                      func1707.definitionModule = "stobjectdraw";
                                                      var func1717 = function(argcv) {    // method startApplication
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startApplication"));
                                                        setModuleName("stobjectdraw");
                                                        var if1718 = GraceDone;
                                                        setLineNumber(1123);    // compilenode call
                                                        onSelf = true;
                                                        var call1719 = callmethodChecked(this, "isOpened", [0]);
                                                        var call1720 = callmethodChecked(call1719, "prefix!", [0]);
                                                        if (Grace_isTrue(call1720)) {
                                                          setLineNumber(1124);    // compilenode string
                                                          var string1721 = new GraceString("");
                                                          var string1722 = new GraceString("");
                                                          var string1723 = new GraceString("");
                                                          onSelf = true;
                                                          var call1725 = callmethodChecked(this, "theHeight", [0]);
                                                          var string1727 = new GraceString(",height=");
                                                          onSelf = true;
                                                          var call1729 = callmethodChecked(this, "theWidth", [0]);
                                                          var string1731 = new GraceString("width=");
                                                          var opresult1733 = callmethodChecked(string1731, "++", [1], call1729);
                                                          var opresult1735 = callmethodChecked(opresult1733, "++", [1], string1727);
                                                          var opresult1737 = callmethodChecked(opresult1735, "++", [1], call1725);
                                                          var opresult1739 = callmethodChecked(opresult1737, "++", [1], string1723);
                                                          var call1740 = callmethodChecked(var_dom, "window", [0]);
                                                          var call1741 = callmethodChecked(call1740, "open", [3], string1721, string1722, opresult1739);
                                                          onSelf = true;
                                                          var call1742 = callmethodChecked(this, "theWindow:=", [1], call1741);
                                                          setLineNumber(1125);    // compilenode call
                                                          onSelf = true;
                                                          var call1743 = callmethodChecked(this, "theTitle", [0]);
                                                          onSelf = true;
                                                          var call1744 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1745 = callmethodChecked(call1744, "document", [0]);
                                                          var call1746 = callmethodChecked(call1745, "title:=", [1], call1743);
                                                          setLineNumber(1126);    // compilenode call
                                                          onSelf = true;
                                                          var call1747 = callmethodChecked(this, "element", [0]);
                                                          onSelf = true;
                                                          var call1748 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1749 = callmethodChecked(call1748, "document", [0]);
                                                          var call1750 = callmethodChecked(call1749, "body", [0]);
                                                          var call1751 = callmethodChecked(call1750, "appendChild", [1], call1747);
                                                          var if1752 = GraceDone;
                                                          setLineNumber(1128);    // compilenode identifier
                                                          var call1753 = callmethodChecked(var_dom, "window", [0]);
                                                          var string1754 = new GraceString("graceRegisterWindow");
                                                          var call1755 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], call1753, string1754);
                                                          if (Grace_isTrue(call1755)) {
                                                            setLineNumber(1129);    // compilenode call
                                                            onSelf = true;
                                                            var call1756 = callmethodChecked(this, "theWindow", [0]);
                                                            var call1757 = callmethodChecked(var_dom, "window", [0]);
                                                            var call1758 = callmethodChecked(call1757, "graceRegisterWindow", [1], call1756);
                                                            if1752 = call1758;
                                                          }
                                                          setLineNumber(1132);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1759 = callmethodChecked(this, "isOpened:=", [1], GraceTrue);
                                                          setLineNumber(1134);    // compilenode string
                                                          var string1760 = new GraceString("100%");
                                                          onSelf = true;
                                                          var call1761 = callmethodChecked(this, "element", [0]);
                                                          var call1762 = callmethodChecked(call1761, "style", [0]);
                                                          var call1763 = callmethodChecked(call1762, "width:=", [1], string1760);
                                                          setLineNumber(1135);    // compilenode string
                                                          var string1764 = new GraceString("0px");
                                                          onSelf = true;
                                                          var call1765 = callmethodChecked(this, "element", [0]);
                                                          var call1766 = callmethodChecked(call1765, "style", [0]);
                                                          var call1767 = callmethodChecked(call1766, "margin:=", [1], string1764);
                                                          var if1768 = GraceDone;
                                                          setLineNumber(1137);    // compilenode call
                                                          onSelf = true;
                                                          var call1769 = callmethodChecked(this, "isHorizontal", [0]);
                                                          if (Grace_isTrue(call1769)) {
                                                            setLineNumber(1138);    // compilenode call
                                                            onSelf = true;
                                                            var call1770 = callmethodChecked(this, "arrangeHorizontal", [0]);
                                                            if1768 = call1770;
                                                          } else {
                                                            setLineNumber(1140);    // compilenode call
                                                            onSelf = true;
                                                            var call1771 = callmethodChecked(this, "arrangeVertical", [0]);
                                                            if1768 = call1771;
                                                          }
                                                          setLineNumber(1143);    // compilenode call
                                                          onSelf = true;
                                                          var call1772 = callmethodChecked(this, "events", [0]);
                                                          var block1773 = new GraceBlock(this, 1143, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block1773.real = function(var_anEvent) {
                                                            setLineNumber(1144);    // compilenode identifier
                                                            var call1774 = callmethodChecked(var_anEvent, "kind", [0]);
                                                            var call1775 = callmethodChecked(var_anEvent, "response", [0]);
                                                            onSelf = true;
                                                            var call1776 = callmethodChecked(this, "on()do", [1, 1], call1774, call1775);
                                                            return call1776;
                                                          };
                                                          var call1777 = callmethodChecked(var_prelude, "for()do", [1, 1], call1772, block1773);
                                                          if1718 = call1777;
                                                        }
                                                        setLineNumber(1123);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1718)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method startApplication does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1718;
                                                      };
                                                      func1717.paramCounts = [0];
                                                      obj1631.methods["startApplication"] = func1717;
                                                      func1717.definitionLine = 1122;
                                                      func1717.definitionModule = "stobjectdraw";
                                                      var func1778 = function(argcv) {    // method stopApplication
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for stopApplication"));
                                                        setModuleName("stobjectdraw");
                                                        var if1779 = GraceDone;
                                                        setLineNumber(1151);    // compilenode call
                                                        onSelf = true;
                                                        var call1780 = callmethodChecked(this, "isOpened", [0]);
                                                        if (Grace_isTrue(call1780)) {
                                                          setLineNumber(1152);    // compilenode call
                                                          onSelf = true;
                                                          var call1781 = callmethodChecked(this, "theWindow", [0]);
                                                          var call1782 = callmethodChecked(call1781, "close", [0]);
                                                          if1779 = call1782;
                                                        }
                                                        setLineNumber(1151);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1779)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method stopApplication does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1779;
                                                      };
                                                      func1778.paramCounts = [0];
                                                      obj1631.methods["stopApplication"] = func1778;
                                                      func1778.definitionLine = 1150;
                                                      func1778.definitionModule = "stobjectdraw";
                                                      var func1783 = function(argcv) {    // method asString
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1158);    // compilenode string
                                                        var string1784 = new GraceString("");
                                                        onSelf = true;
                                                        var call1786 = callmethodChecked(this, "windowTitle", [0]);
                                                        var string1788 = new GraceString("application titled ");
                                                        var opresult1790 = callmethodChecked(string1788, "++", [1], call1786);
                                                        var opresult1792 = callmethodChecked(opresult1790, "++", [1], string1784);
                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1792)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method asString does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        return opresult1792;
                                                      };
                                                      func1783.paramCounts = [0];
                                                      obj1631.methods["asString"] = func1783;
                                                      func1783.definitionLine = 1157;
                                                      func1783.definitionModule = "stobjectdraw";
                                                      setLineNumber(999);    // compilenode identifier
                                                      var call1793 = callmethodChecked(var_document, "createDocumentFragment", [0]);
                                                      var call1794 = callmethodChecked(superDepth, "outer", [0]);
                                                      onOuter = true;
                                                      onSelf = true;
                                                      var call1795 = callmethodChecked(call1794, "containerFromElement()object", [1, 1], call1793, this);
                                                      obj1631.superobj = call1795;
                                                      if (call1795.data) obj1631.data = call1795.data;
                                                      if (call1795.hasOwnProperty('_value'))
                                                          obj1631._value = call1795._value;
                                                      setLineNumber(1001);    // compilenode identifier
                                                      obj1631.data["isOpened"] = GraceFalse;
                                                      var reader_stobjectdraw_isOpened1796 = function() {
                                                        return this.data["isOpened"];
                                                      };
                                                      obj1631.methods["isOpened"] = reader_stobjectdraw_isOpened1796;
                                                      obj1631.data["isOpened"] = GraceFalse;
                                                      var writer_stobjectdraw_isOpened1796 = function(argcv, o) {
                                                        this.data["isOpened"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1631.methods["isOpened:="] = writer_stobjectdraw_isOpened1796;
                                                      reader_stobjectdraw_isOpened1796.confidential = true;
                                                      writer_stobjectdraw_isOpened1796.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'isOpened' is not of type Boolean"));
                                                      obj1631.mutable = true;
                                                      obj1631.data["theWindow"] = undefined;
                                                      var reader_stobjectdraw_theWindow1797 = function() {
                                                        return this.data["theWindow"];
                                                      };
                                                      obj1631.methods["theWindow"] = reader_stobjectdraw_theWindow1797;
                                                      obj1631.data["theWindow"] = undefined;
                                                      var writer_stobjectdraw_theWindow1797 = function(argcv, o) {
                                                        this.data["theWindow"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1631.methods["theWindow:="] = writer_stobjectdraw_theWindow1797;
                                                      reader_stobjectdraw_theWindow1797.confidential = true;
                                                      writer_stobjectdraw_theWindow1797.confidential = true;
                                                      obj1631.mutable = true;
                                                      setLineNumber(1004);    // compilenode identifier
                                                      obj1631.data["theTitle"] = var_initialTitle;
                                                      var reader_stobjectdraw_theTitle1798 = function() {
                                                        return this.data["theTitle"];
                                                      };
                                                      obj1631.methods["theTitle"] = reader_stobjectdraw_theTitle1798;
                                                      obj1631.data["theTitle"] = var_initialTitle;
                                                      var writer_stobjectdraw_theTitle1798 = function(argcv, o) {
                                                        this.data["theTitle"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1631.methods["theTitle:="] = writer_stobjectdraw_theTitle1798;
                                                      reader_stobjectdraw_theTitle1798.confidential = true;
                                                      writer_stobjectdraw_theTitle1798.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], var_initialTitle)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'theTitle' is not of type String"));
                                                      obj1631.mutable = true;
                                                      setLineNumber(1005);    // compilenode identifier
                                                      var call1799 = callmethodChecked(var_dimensions__39__, "x", [0]);
                                                      obj1631.data["theWidth"] = call1799;
                                                      var reader_stobjectdraw_theWidth1800 = function() {
                                                        return this.data["theWidth"];
                                                      };
                                                      obj1631.methods["theWidth"] = reader_stobjectdraw_theWidth1800;
                                                      obj1631.data["theWidth"] = call1799;
                                                      var writer_stobjectdraw_theWidth1800 = function(argcv, o) {
                                                        this.data["theWidth"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1631.methods["theWidth:="] = writer_stobjectdraw_theWidth1800;
                                                      reader_stobjectdraw_theWidth1800.confidential = true;
                                                      writer_stobjectdraw_theWidth1800.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1799)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'theWidth' is not of type Number"));
                                                      obj1631.mutable = true;
                                                      setLineNumber(1006);    // compilenode identifier
                                                      var call1801 = callmethodChecked(var_dimensions__39__, "y", [0]);
                                                      obj1631.data["theHeight"] = call1801;
                                                      var reader_stobjectdraw_theHeight1802 = function() {
                                                        return this.data["theHeight"];
                                                      };
                                                      obj1631.methods["theHeight"] = reader_stobjectdraw_theHeight1802;
                                                      obj1631.data["theHeight"] = call1801;
                                                      var writer_stobjectdraw_theHeight1802 = function(argcv, o) {
                                                        this.data["theHeight"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1631.methods["theHeight:="] = writer_stobjectdraw_theHeight1802;
                                                      reader_stobjectdraw_theHeight1802.confidential = true;
                                                      writer_stobjectdraw_theHeight1802.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1801)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'theHeight' is not of type Number"));
                                                      obj1631.mutable = true;
                                                      setLineNumber(1008);    // compilenode array
                                                      var array1803 = new PrimitiveGraceList([]);
                                                      obj1631.data["events"] = array1803;
                                                      var reader_stobjectdraw_events1804 = function() {
                                                        return this.data["events"];
                                                      };
                                                      reader_stobjectdraw_events1804.def = true;
                                                      reader_stobjectdraw_events1804.confidential = true;
                                                      obj1631.methods["events"] = reader_stobjectdraw_events1804;
                                                      setLineNumber(1019);    // compilenode identifier
                                                      obj1631.data["isHorizontal"] = GraceTrue;
                                                      var reader_stobjectdraw_isHorizontal1805 = function() {
                                                        return this.data["isHorizontal"];
                                                      };
                                                      obj1631.methods["isHorizontal"] = reader_stobjectdraw_isHorizontal1805;
                                                      obj1631.data["isHorizontal"] = GraceTrue;
                                                      var writer_stobjectdraw_isHorizontal1805 = function(argcv, o) {
                                                        this.data["isHorizontal"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1631.methods["isHorizontal:="] = writer_stobjectdraw_isHorizontal1805;
                                                      reader_stobjectdraw_isHorizontal1805.confidential = true;
                                                      writer_stobjectdraw_isHorizontal1805.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceTrue)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'isHorizontal' is not of type Boolean"));
                                                      obj1631.mutable = true;
                                                      superDepth = origSuperDepth;
                                                    };
                                                    obj_init_1631.apply(inheritingObject, []);
                                                    return obj1631;
                                                    };
                                                    func1629.paramTypes = [];
                                                    func1629.paramTypes.push([type_String, "initialTitle"]);
                                                    func1629.paramTypes.push([]);
                                                    this.methods["applicationTitle()size()object"] = func1629;
                                                  setLineNumber(1162);    // compilenode method
                                                  var func1806 = function(argcv) {    // method drawingCanvasSize(1)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_dimensions__39__ = arguments[curarg];
                                                    curarg++;
                                                    if (argcv[0] !== 1)
                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for drawingCanvasSize(1)"));
                                                    // Start argument checking
                                                    curarg = 1;
                                                    onSelf = true;
                                                    var call1807 = callmethodChecked(this, "Point", [0]);
                                                    if (!Grace_isTrue(callmethod(call1807, "match",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in drawingCanvasSize (arg list 1), which corresponds to parameter dimensions', does not have " + 
                                                                callmethod(call1807, "asString", [0])._value + "."));
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("stobjectdraw");
                                                    var obj1808 = Grace_allocObject(null, "stobjectdraw.drawingCanvasSize");
                                                    obj1808.definitionModule = "stobjectdraw";
                                                    obj1808.definitionLine = 1162;
                                                    obj1808.outer = this;
                                                    var reader_stobjectdraw_outer1809 = function() {
                                                      return this.outer;
                                                    };
                                                    obj1808.methods["outer"] = reader_stobjectdraw_outer1809;
                                                    var obj_init_1808 = function() {
                                                      var origSuperDepth = superDepth;
                                                      superDepth = obj1808;
                                                      var func1810 = function(argcv) {    // method width
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1177);    // compilenode call
                                                        onSelf = true;
                                                        var call1811 = callmethodChecked(this, "element", [0]);
                                                        var call1812 = callmethodChecked(call1811, "width", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1812)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method width does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        return call1812;
                                                      };
                                                      func1810.paramCounts = [0];
                                                      obj1808.methods["width"] = func1810;
                                                      func1810.definitionLine = 1176;
                                                      func1810.definitionModule = "stobjectdraw";
                                                      var func1813 = function(argcv) {    // method height
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1182);    // compilenode call
                                                        onSelf = true;
                                                        var call1814 = callmethodChecked(this, "element", [0]);
                                                        var call1815 = callmethodChecked(call1814, "height", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1815)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method height does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        return call1815;
                                                      };
                                                      func1813.paramCounts = [0];
                                                      obj1808.methods["height"] = func1813;
                                                      func1813.definitionLine = 1181;
                                                      func1813.definitionModule = "stobjectdraw";
                                                      var func1816 = function(argcv) {    // method size
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1185);    // compilenode call
                                                        onSelf = true;
                                                        var call1817 = callmethodChecked(this, "element", [0]);
                                                        var call1818 = callmethodChecked(call1817, "height", [0]);
                                                        onSelf = true;
                                                        var call1820 = callmethodChecked(this, "element", [0]);
                                                        var call1821 = callmethodChecked(call1820, "width", [0]);
                                                        var opresult1823 = callmethodChecked(call1821, "@", [1], call1818);
                                                        var call1824 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call1825 = callmethodChecked(call1824, "Point", [0]);
                                                        if (!Grace_isTrue(callmethod(call1825, "match", [1], opresult1823)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method size does not have " + 
                                                                    callmethod(call1825, "asString", [0])._value + "."));
                                                        return opresult1823;
                                                      };
                                                      func1816.paramCounts = [0];
                                                      obj1808.methods["size"] = func1816;
                                                      func1816.definitionLine = 1185;
                                                      func1816.definitionModule = "stobjectdraw";
                                                      var func1826 = function(argcv) {    // method notifyRedraw
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for notifyRedraw"));
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1194);    // compilenode identifier
                                                        onSelf = true;
                                                        var call1827 = callmethodChecked(this, "redraw:=", [1], GraceTrue);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1827)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method notifyRedraw does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1827;
                                                      };
                                                      func1826.paramCounts = [0];
                                                      obj1808.methods["notifyRedraw"] = func1826;
                                                      func1826.definitionLine = 1193;
                                                      func1826.definitionModule = "stobjectdraw";
                                                      var func1828 = function(argcv) {    // method startDrawing
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startDrawing"));
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1199);    // compilenode block
                                                        var block1829 = new GraceBlock(this, 1199, 0);
                                                        block1829.real = function() {
                                                          var if1830 = GraceDone;
                                                          setLineNumber(1200);    // compilenode call
                                                          onSelf = true;
                                                          var call1831 = callmethodChecked(this, "redraw", [0]);
                                                          if (Grace_isTrue(call1831)) {
                                                            setLineNumber(1201);    // compilenode call
                                                            onSelf = true;
                                                            var call1832 = callmethodChecked(this, "theContext", [0]);
                                                            onSelf = true;
                                                            var call1833 = callmethodChecked(this, "theGraphics", [0]);
                                                            onSelf = true;
                                                            var call1834 = callmethodChecked(this, "width", [0]);
                                                            onSelf = true;
                                                            var call1835 = callmethodChecked(this, "height", [0]);
                                                            var call1836 = callmethodChecked(var_dom, "draw", [4], call1832, call1833, call1834, call1835);
                                                            if1830 = call1836;
                                                          }
                                                          return if1830;
                                                        };
                                                        setLineNumber(1203);    // compilenode num
                                                        var quotient1839 = callmethodChecked(new GraceNum(1000), "/", [1], var_frameRate);
                                                        setLineNumber(1199);    // compilenode call
                                                        onSelf = true;
                                                        var call1840 = callmethodChecked(this, "element", [0]);
                                                        var call1841 = callmethodChecked(call1840, "ownerDocument", [0]);
                                                        var call1842 = callmethodChecked(call1841, "defaultView", [0]);
                                                        var call1843 = callmethodChecked(call1842, "setInterval", [2], block1829, quotient1839);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1843)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method startDrawing does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1843;
                                                      };
                                                      func1828.paramCounts = [0];
                                                      obj1808.methods["startDrawing"] = func1828;
                                                      func1828.definitionLine = 1198;
                                                      func1828.definitionModule = "stobjectdraw";
                                                      var func1844 = function(argcv) {    // method clear
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for clear"));
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1208);    // compilenode array
                                                        var array1845 = new PrimitiveGraceList([]);
                                                        onSelf = true;
                                                        var call1846 = callmethodChecked(this, "theGraphics:=", [1], array1845);
                                                        setLineNumber(1209);    // compilenode call
                                                        onSelf = true;
                                                        var call1847 = callmethodChecked(this, "notifyRedraw", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1847)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method clear does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1847;
                                                      };
                                                      func1844.paramCounts = [0];
                                                      obj1808.methods["clear"] = func1844;
                                                      func1844.definitionLine = 1207;
                                                      func1844.definitionModule = "stobjectdraw";
                                                      var func1848 = function(argcv) {    // method add(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_d = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for add(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1213);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in add (arg list 1), which corresponds to parameter d, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1214);    // compilenode call
                                                        onSelf = true;
                                                        var call1849 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1850 = callmethodChecked(call1849, "push", [1], var_d);
                                                        setLineNumber(1215);    // compilenode call
                                                        onSelf = true;
                                                        var call1851 = callmethodChecked(this, "notifyRedraw", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1851)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method add(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1851;
                                                      };
                                                      func1848.paramTypes = [];
                                                      func1848.paramTypes.push([]);
                                                      func1848.paramCounts = [1];
                                                      obj1808.methods["add"] = func1848;
                                                      func1848.definitionLine = 1213;
                                                      func1848.definitionModule = "stobjectdraw";
                                                      var func1852 = function(argcv) {    // method remove(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_aGraphic = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for remove(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1219);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in remove (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        var if1853 = GraceDone;
                                                        setLineNumber(1220);    // compilenode call
                                                        onSelf = true;
                                                        var call1854 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1855 = callmethodChecked(call1854, "contains", [1], var_aGraphic);
                                                        if (Grace_isTrue(call1855)) {
                                                          setLineNumber(1221);    // compilenode call
                                                          onSelf = true;
                                                          var call1856 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1857 = callmethodChecked(call1856, "remove", [1], var_aGraphic);
                                                          setLineNumber(1222);    // compilenode call
                                                          onSelf = true;
                                                          var call1858 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if1853 = call1858;
                                                        }
                                                        setLineNumber(1220);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1853)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method remove(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1853;
                                                      };
                                                      func1852.paramTypes = [];
                                                      func1852.paramTypes.push([]);
                                                      func1852.paramCounts = [1];
                                                      obj1808.methods["remove"] = func1852;
                                                      func1852.definitionLine = 1219;
                                                      func1852.definitionModule = "stobjectdraw";
                                                      var func1859 = function(argcv) {    // method sendToFront(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_aGraphic = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToFront(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1227);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in sendToFront (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1228);    // compilenode call
                                                        onSelf = true;
                                                        var call1860 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1861 = callmethodChecked(call1860, "remove", [1], var_aGraphic);
                                                        setLineNumber(1229);    // compilenode call
                                                        onSelf = true;
                                                        var call1862 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1863 = callmethodChecked(call1862, "push", [1], var_aGraphic);
                                                        setLineNumber(1230);    // compilenode call
                                                        onSelf = true;
                                                        var call1864 = callmethodChecked(this, "notifyRedraw", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1864)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method sendToFront(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1864;
                                                      };
                                                      func1859.paramTypes = [];
                                                      func1859.paramTypes.push([]);
                                                      func1859.paramCounts = [1];
                                                      obj1808.methods["sendToFront"] = func1859;
                                                      func1859.definitionLine = 1227;
                                                      func1859.definitionModule = "stobjectdraw";
                                                      var func1865 = function(argcv) {    // method sendToBack(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_aGraphic = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToBack(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1234);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in sendToBack (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1235);    // compilenode call
                                                        onSelf = true;
                                                        var call1866 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1867 = callmethodChecked(call1866, "remove", [1], var_aGraphic);
                                                        setLineNumber(1236);    // compilenode call
                                                        onSelf = true;
                                                        var call1868 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1869 = callmethodChecked(call1868, "unshift", [1], var_aGraphic);
                                                        setLineNumber(1237);    // compilenode call
                                                        onSelf = true;
                                                        var call1870 = callmethodChecked(this, "notifyRedraw", [0]);
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1870)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method sendToBack(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1870;
                                                      };
                                                      func1865.paramTypes = [];
                                                      func1865.paramTypes.push([]);
                                                      func1865.paramCounts = [1];
                                                      obj1808.methods["sendToBack"] = func1865;
                                                      func1865.definitionLine = 1234;
                                                      func1865.definitionModule = "stobjectdraw";
                                                      var func1871 = function(argcv) {    // method sendForward(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_aGraphic = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendForward(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1241);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in sendForward (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1242);    // compilenode call
                                                        onSelf = true;
                                                        var call1872 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1873 = callmethodChecked(call1872, "indexOf", [1], var_aGraphic);
                                                        var var_theIndex = call1873;
                                                        var if1874 = GraceDone;
                                                        setLineNumber(1244);    // compilenode call
                                                        onSelf = true;
                                                        var call1875 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1876 = callmethodChecked(call1875, "size", [0]);
                                                        var opresult1879 = callmethodChecked(var_theIndex, "\u2260", [1], call1876);
                                                        if (Grace_isTrue(opresult1879)) {
                                                          setLineNumber(1245);    // compilenode call
                                                          onSelf = true;
                                                          var call1880 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1881 = callmethodChecked(call1880, "remove", [1], var_aGraphic);
                                                          setLineNumber(1246);    // compilenode identifier
                                                          var opresult1884 = callmethodChecked(var_theIndex, "+", [1], new GraceNum(1));
                                                          onSelf = true;
                                                          var call1885 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1886 = callmethodChecked(call1885, "at()add", [1, 1], opresult1884, var_aGraphic);
                                                          setLineNumber(1247);    // compilenode call
                                                          onSelf = true;
                                                          var call1887 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if1874 = call1887;
                                                        }
                                                        setLineNumber(1244);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1874)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method sendForward(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1874;
                                                      };
                                                      func1871.paramTypes = [];
                                                      func1871.paramTypes.push([]);
                                                      func1871.paramCounts = [1];
                                                      obj1808.methods["sendForward"] = func1871;
                                                      func1871.definitionLine = 1241;
                                                      func1871.definitionModule = "stobjectdraw";
                                                      var func1888 = function(argcv) {    // method sendBackward(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_aGraphic = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendBackward(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1252);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in sendBackward (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1253);    // compilenode call
                                                        onSelf = true;
                                                        var call1889 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1890 = callmethodChecked(call1889, "indexOf", [1], var_aGraphic);
                                                        var var_theIndex = call1890;
                                                        var if1891 = GraceDone;
                                                        setLineNumber(1255);    // compilenode identifier
                                                        var opresult1894 = callmethodChecked(var_theIndex, "\u2260", [1], new GraceNum(1));
                                                        if (Grace_isTrue(opresult1894)) {
                                                          setLineNumber(1256);    // compilenode call
                                                          onSelf = true;
                                                          var call1895 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1896 = callmethodChecked(call1895, "remove", [1], var_aGraphic);
                                                          setLineNumber(1257);    // compilenode identifier
                                                          var diff1899 = callmethodChecked(var_theIndex, "-", [1], new GraceNum(1));
                                                          onSelf = true;
                                                          var call1900 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1901 = callmethodChecked(call1900, "at()add", [1, 1], diff1899, var_aGraphic);
                                                          setLineNumber(1258);    // compilenode call
                                                          onSelf = true;
                                                          var call1902 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if1891 = call1902;
                                                        }
                                                        setLineNumber(1255);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1891)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method sendBackward(1) does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return if1891;
                                                      };
                                                      func1888.paramTypes = [];
                                                      func1888.paramTypes.push([]);
                                                      func1888.paramCounts = [1];
                                                      obj1808.methods["sendBackward"] = func1888;
                                                      func1888.definitionLine = 1252;
                                                      func1888.definitionModule = "stobjectdraw";
                                                      var func1903 = function(argcv) {    // method printObjects
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for printObjects"));
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1264);    // compilenode call
                                                        onSelf = true;
                                                        var call1904 = callmethodChecked(this, "theGraphics", [0]);
                                                        var block1905 = new GraceBlock(this, 1264, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block1905.real = function(var_aGraphic) {
                                                          setLineNumber(1265);    // compilenode identifier
                                                          var call1906 = Grace_print(var_aGraphic);
                                                          return call1906;
                                                        };
                                                        var call1907 = callmethodChecked(var_prelude, "for()do", [1, 1], call1904, block1905);
                                                        setLineNumber(1264);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1907)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method printObjects does not have " + 
                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                        return call1907;
                                                      };
                                                      func1903.paramCounts = [0];
                                                      obj1808.methods["printObjects"] = func1903;
                                                      func1903.definitionLine = 1263;
                                                      func1903.definitionModule = "stobjectdraw";
                                                      var func1908 = function(argcv) {    // method asString
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        if (argcv[0] !== 0)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                        setModuleName("stobjectdraw");
                                                        setLineNumber(1271);    // compilenode string
                                                        var string1909 = new GraceString(" objects");
                                                        onSelf = true;
                                                        var call1911 = callmethodChecked(this, "theGraphics", [0]);
                                                        var call1912 = callmethodChecked(call1911, "size", [0]);
                                                        var string1914 = new GraceString("canvas: with ");
                                                        var opresult1916 = callmethodChecked(string1914, "++", [1], call1912);
                                                        var opresult1918 = callmethodChecked(opresult1916, "++", [1], string1909);
                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult1918)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method asString does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        return opresult1918;
                                                      };
                                                      func1908.paramCounts = [0];
                                                      obj1808.methods["asString"] = func1908;
                                                      func1908.definitionLine = 1270;
                                                      func1908.definitionModule = "stobjectdraw";
                                                      setLineNumber(1166);    // compilenode string
                                                      var string1919 = new GraceString("canvas");
                                                      var call1920 = callmethodChecked(var_document, "createElement", [1], string1919);
                                                      var call1921 = callmethodChecked(superDepth, "outer", [0]);
                                                      onOuter = true;
                                                      onSelf = true;
                                                      var call1922 = callmethodChecked(call1921, "componentFromElement()object", [1, 1], call1920, this);
                                                      obj1808.superobj = call1922;
                                                      if (call1922.data) obj1808.data = call1922.data;
                                                      if (call1922.hasOwnProperty('_value'))
                                                          obj1808._value = call1922._value;
                                                      setLineNumber(1168);    // compilenode identifier
                                                      var call1923 = callmethodChecked(var_dimensions__39__, "x", [0]);
                                                      onSelf = true;
                                                      var call1924 = callmethodChecked(this, "element", [0]);
                                                      var call1925 = callmethodChecked(call1924, "width:=", [1], call1923);
                                                      setLineNumber(1169);    // compilenode identifier
                                                      var call1926 = callmethodChecked(var_dimensions__39__, "y", [0]);
                                                      onSelf = true;
                                                      var call1927 = callmethodChecked(this, "element", [0]);
                                                      var call1928 = callmethodChecked(call1927, "height:=", [1], call1926);
                                                      setLineNumber(1170);    // compilenode string
                                                      var string1929 = new GraceString("center");
                                                      onSelf = true;
                                                      var call1930 = callmethodChecked(this, "element", [0]);
                                                      var call1931 = callmethodChecked(call1930, "style", [0]);
                                                      var call1932 = callmethodChecked(call1931, "alignSelf:=", [1], string1929);
                                                      setLineNumber(1172);    // compilenode string
                                                      var string1933 = new GraceString("2d");
                                                      onSelf = true;
                                                      var call1934 = callmethodChecked(this, "element", [0]);
                                                      var call1935 = callmethodChecked(call1934, "getContext", [1], string1933);
                                                      obj1808.data["theContext"] = call1935;
                                                      var reader_stobjectdraw_theContext1936 = function() {
                                                        return this.data["theContext"];
                                                      };
                                                      reader_stobjectdraw_theContext1936.def = true;
                                                      reader_stobjectdraw_theContext1936.confidential = true;
                                                      obj1808.methods["theContext"] = reader_stobjectdraw_theContext1936;
                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call1935)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("value of def 'theContext' is not of type Foreign"));
                                                      setLineNumber(1173);    // compilenode call
                                                      onSelf = true;
                                                      var call1937 = callmethodChecked(this, "theContext", [0]);
                                                      var call1938 = callmethodChecked(call1937, "lineWidth:=", [1], new GraceNum(2));
                                                      setLineNumber(1188);    // compilenode array
                                                      var array1939 = new PrimitiveGraceList([]);
                                                      obj1808.data["theGraphics"] = array1939;
                                                      var reader_stobjectdraw_theGraphics1940 = function() {
                                                        return this.data["theGraphics"];
                                                      };
                                                      obj1808.methods["theGraphics"] = reader_stobjectdraw_theGraphics1940;
                                                      obj1808.data["theGraphics"] = array1939;
                                                      var writer_stobjectdraw_theGraphics1940 = function(argcv, o) {
                                                        this.data["theGraphics"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1808.methods["theGraphics:="] = writer_stobjectdraw_theGraphics1940;
                                                      reader_stobjectdraw_theGraphics1940.confidential = true;
                                                      writer_stobjectdraw_theGraphics1940.confidential = true;
                                                      obj1808.mutable = true;
                                                      setLineNumber(1190);    // compilenode identifier
                                                      obj1808.data["redraw"] = GraceFalse;
                                                      var reader_stobjectdraw_redraw1941 = function() {
                                                        return this.data["redraw"];
                                                      };
                                                      obj1808.methods["redraw"] = reader_stobjectdraw_redraw1941;
                                                      obj1808.data["redraw"] = GraceFalse;
                                                      var writer_stobjectdraw_redraw1941 = function(argcv, o) {
                                                        this.data["redraw"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj1808.methods["redraw:="] = writer_stobjectdraw_redraw1941;
                                                      reader_stobjectdraw_redraw1941.confidential = true;
                                                      writer_stobjectdraw_redraw1941.confidential = true;
                                                      if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("initial value of var 'redraw' is not of type Boolean"));
                                                      obj1808.mutable = true;
                                                      superDepth = origSuperDepth;
                                                    };
                                                    obj_init_1808.apply(obj1808, []);
                                                    setLineNumber(1162);    // return value
                                                    if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match", [1], obj1808)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method drawingCanvasSize(1) does not have " + 
                                                                callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                    return obj1808;
                                                  };
                                                  func1806.paramCounts = [1];
                                                  this.methods["drawingCanvasSize"] = func1806;
                                                  func1806.definitionLine = 1162;
                                                  func1806.definitionModule = "stobjectdraw";
                                                    var func1942 = function(argcv) {    // method drawingCanvasSize(1     )()object
                                                      var curarg = 1;
                                                      var var_dimensions__39__ = arguments[curarg];
                                                      curarg++;
                                                      var inheritingObject = arguments[curarg++];
                                                      // Start argument processing
                                                      curarg = 1;
                                                      onSelf = true;
                                                      var call1943 = callmethodChecked(this, "Point", [0]);
                                                      if (!Grace_isTrue(callmethod(call1943, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in drawingCanvasSize (arg list 1), which corresponds to parameter dimensions', does not have " + 
                                                                  callmethod(call1943, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument processing
                                                      setModuleName("stobjectdraw");
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var obj1944 = Grace_allocObject(null, "drawingCanvasSize");
                                                      obj1944.definitionModule = "stobjectdraw";
                                                      obj1944.definitionLine = 1162;
                                                      var inho1944 = inheritingObject;
                                                      while (inho1944.superobj) inho1944 = inho1944.superobj;
                                                      inho1944.superobj = obj1944;
                                                      obj1944.data = inheritingObject.data;
                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                        obj1944._value = inheritingObject._value;
                                                      obj1944.outer = this;
                                                      var reader_stobjectdraw_outer1945 = function() {
                                                        return this.outer;
                                                      };
                                                      obj1944.methods["outer"] = reader_stobjectdraw_outer1945;
                                                      var obj_init_1944 = function() {
                                                        var origSuperDepth = superDepth;
                                                        superDepth = obj1944;
                                                        var func1946 = function(argcv) {    // method width
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1177);    // compilenode call
                                                          onSelf = true;
                                                          var call1947 = callmethodChecked(this, "element", [0]);
                                                          var call1948 = callmethodChecked(call1947, "width", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1948)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method width does not have " + 
                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                          return call1948;
                                                        };
                                                        func1946.paramCounts = [0];
                                                        obj1944.methods["width"] = func1946;
                                                        func1946.definitionLine = 1176;
                                                        func1946.definitionModule = "stobjectdraw";
                                                        var func1949 = function(argcv) {    // method height
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1182);    // compilenode call
                                                          onSelf = true;
                                                          var call1950 = callmethodChecked(this, "element", [0]);
                                                          var call1951 = callmethodChecked(call1950, "height", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Number, "match", [1], call1951)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method height does not have " + 
                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                          return call1951;
                                                        };
                                                        func1949.paramCounts = [0];
                                                        obj1944.methods["height"] = func1949;
                                                        func1949.definitionLine = 1181;
                                                        func1949.definitionModule = "stobjectdraw";
                                                        var func1952 = function(argcv) {    // method size
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1185);    // compilenode call
                                                          onSelf = true;
                                                          var call1953 = callmethodChecked(this, "element", [0]);
                                                          var call1954 = callmethodChecked(call1953, "height", [0]);
                                                          onSelf = true;
                                                          var call1956 = callmethodChecked(this, "element", [0]);
                                                          var call1957 = callmethodChecked(call1956, "width", [0]);
                                                          var opresult1959 = callmethodChecked(call1957, "@", [1], call1954);
                                                          var call1960 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call1961 = callmethodChecked(call1960, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call1961, "match", [1], opresult1959)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method size does not have " + 
                                                                      callmethod(call1961, "asString", [0])._value + "."));
                                                          return opresult1959;
                                                        };
                                                        func1952.paramCounts = [0];
                                                        obj1944.methods["size"] = func1952;
                                                        func1952.definitionLine = 1185;
                                                        func1952.definitionModule = "stobjectdraw";
                                                        var func1962 = function(argcv) {    // method notifyRedraw
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for notifyRedraw"));
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1194);    // compilenode identifier
                                                          onSelf = true;
                                                          var call1963 = callmethodChecked(this, "redraw:=", [1], GraceTrue);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1963)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method notifyRedraw does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call1963;
                                                        };
                                                        func1962.paramCounts = [0];
                                                        obj1944.methods["notifyRedraw"] = func1962;
                                                        func1962.definitionLine = 1193;
                                                        func1962.definitionModule = "stobjectdraw";
                                                        var func1964 = function(argcv) {    // method startDrawing
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startDrawing"));
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1199);    // compilenode block
                                                          var block1965 = new GraceBlock(this, 1199, 0);
                                                          block1965.real = function() {
                                                            var if1966 = GraceDone;
                                                            setLineNumber(1200);    // compilenode call
                                                            onSelf = true;
                                                            var call1967 = callmethodChecked(this, "redraw", [0]);
                                                            if (Grace_isTrue(call1967)) {
                                                              setLineNumber(1201);    // compilenode call
                                                              onSelf = true;
                                                              var call1968 = callmethodChecked(this, "theContext", [0]);
                                                              onSelf = true;
                                                              var call1969 = callmethodChecked(this, "theGraphics", [0]);
                                                              onSelf = true;
                                                              var call1970 = callmethodChecked(this, "width", [0]);
                                                              onSelf = true;
                                                              var call1971 = callmethodChecked(this, "height", [0]);
                                                              var call1972 = callmethodChecked(var_dom, "draw", [4], call1968, call1969, call1970, call1971);
                                                              if1966 = call1972;
                                                            }
                                                            return if1966;
                                                          };
                                                          setLineNumber(1203);    // compilenode num
                                                          var quotient1975 = callmethodChecked(new GraceNum(1000), "/", [1], var_frameRate);
                                                          setLineNumber(1199);    // compilenode call
                                                          onSelf = true;
                                                          var call1976 = callmethodChecked(this, "element", [0]);
                                                          var call1977 = callmethodChecked(call1976, "ownerDocument", [0]);
                                                          var call1978 = callmethodChecked(call1977, "defaultView", [0]);
                                                          var call1979 = callmethodChecked(call1978, "setInterval", [2], block1965, quotient1975);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1979)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method startDrawing does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call1979;
                                                        };
                                                        func1964.paramCounts = [0];
                                                        obj1944.methods["startDrawing"] = func1964;
                                                        func1964.definitionLine = 1198;
                                                        func1964.definitionModule = "stobjectdraw";
                                                        var func1980 = function(argcv) {    // method clear
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for clear"));
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1208);    // compilenode array
                                                          var array1981 = new PrimitiveGraceList([]);
                                                          onSelf = true;
                                                          var call1982 = callmethodChecked(this, "theGraphics:=", [1], array1981);
                                                          setLineNumber(1209);    // compilenode call
                                                          onSelf = true;
                                                          var call1983 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1983)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method clear does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call1983;
                                                        };
                                                        func1980.paramCounts = [0];
                                                        obj1944.methods["clear"] = func1980;
                                                        func1980.definitionLine = 1207;
                                                        func1980.definitionModule = "stobjectdraw";
                                                        var func1984 = function(argcv) {    // method add(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_d = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for add(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1213);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in add (arg list 1), which corresponds to parameter d, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1214);    // compilenode call
                                                          onSelf = true;
                                                          var call1985 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1986 = callmethodChecked(call1985, "push", [1], var_d);
                                                          setLineNumber(1215);    // compilenode call
                                                          onSelf = true;
                                                          var call1987 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call1987)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method add(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call1987;
                                                        };
                                                        func1984.paramTypes = [];
                                                        func1984.paramTypes.push([]);
                                                        func1984.paramCounts = [1];
                                                        obj1944.methods["add"] = func1984;
                                                        func1984.definitionLine = 1213;
                                                        func1984.definitionModule = "stobjectdraw";
                                                        var func1988 = function(argcv) {    // method remove(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aGraphic = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for remove(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1219);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in remove (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          var if1989 = GraceDone;
                                                          setLineNumber(1220);    // compilenode call
                                                          onSelf = true;
                                                          var call1990 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1991 = callmethodChecked(call1990, "contains", [1], var_aGraphic);
                                                          if (Grace_isTrue(call1991)) {
                                                            setLineNumber(1221);    // compilenode call
                                                            onSelf = true;
                                                            var call1992 = callmethodChecked(this, "theGraphics", [0]);
                                                            var call1993 = callmethodChecked(call1992, "remove", [1], var_aGraphic);
                                                            setLineNumber(1222);    // compilenode call
                                                            onSelf = true;
                                                            var call1994 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if1989 = call1994;
                                                          }
                                                          setLineNumber(1220);    // return value
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], if1989)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method remove(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return if1989;
                                                        };
                                                        func1988.paramTypes = [];
                                                        func1988.paramTypes.push([]);
                                                        func1988.paramCounts = [1];
                                                        obj1944.methods["remove"] = func1988;
                                                        func1988.definitionLine = 1219;
                                                        func1988.definitionModule = "stobjectdraw";
                                                        var func1995 = function(argcv) {    // method sendToFront(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aGraphic = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToFront(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1227);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in sendToFront (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1228);    // compilenode call
                                                          onSelf = true;
                                                          var call1996 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1997 = callmethodChecked(call1996, "remove", [1], var_aGraphic);
                                                          setLineNumber(1229);    // compilenode call
                                                          onSelf = true;
                                                          var call1998 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call1999 = callmethodChecked(call1998, "push", [1], var_aGraphic);
                                                          setLineNumber(1230);    // compilenode call
                                                          onSelf = true;
                                                          var call2000 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2000)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method sendToFront(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2000;
                                                        };
                                                        func1995.paramTypes = [];
                                                        func1995.paramTypes.push([]);
                                                        func1995.paramCounts = [1];
                                                        obj1944.methods["sendToFront"] = func1995;
                                                        func1995.definitionLine = 1227;
                                                        func1995.definitionModule = "stobjectdraw";
                                                        var func2001 = function(argcv) {    // method sendToBack(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aGraphic = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToBack(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1234);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in sendToBack (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1235);    // compilenode call
                                                          onSelf = true;
                                                          var call2002 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2003 = callmethodChecked(call2002, "remove", [1], var_aGraphic);
                                                          setLineNumber(1236);    // compilenode call
                                                          onSelf = true;
                                                          var call2004 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2005 = callmethodChecked(call2004, "unshift", [1], var_aGraphic);
                                                          setLineNumber(1237);    // compilenode call
                                                          onSelf = true;
                                                          var call2006 = callmethodChecked(this, "notifyRedraw", [0]);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2006)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method sendToBack(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2006;
                                                        };
                                                        func2001.paramTypes = [];
                                                        func2001.paramTypes.push([]);
                                                        func2001.paramCounts = [1];
                                                        obj1944.methods["sendToBack"] = func2001;
                                                        func2001.definitionLine = 1234;
                                                        func2001.definitionModule = "stobjectdraw";
                                                        var func2007 = function(argcv) {    // method sendForward(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aGraphic = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendForward(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1241);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in sendForward (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1242);    // compilenode call
                                                          onSelf = true;
                                                          var call2008 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2009 = callmethodChecked(call2008, "indexOf", [1], var_aGraphic);
                                                          var var_theIndex = call2009;
                                                          var if2010 = GraceDone;
                                                          setLineNumber(1244);    // compilenode call
                                                          onSelf = true;
                                                          var call2011 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2012 = callmethodChecked(call2011, "size", [0]);
                                                          var opresult2015 = callmethodChecked(var_theIndex, "\u2260", [1], call2012);
                                                          if (Grace_isTrue(opresult2015)) {
                                                            setLineNumber(1245);    // compilenode call
                                                            onSelf = true;
                                                            var call2016 = callmethodChecked(this, "theGraphics", [0]);
                                                            var call2017 = callmethodChecked(call2016, "remove", [1], var_aGraphic);
                                                            setLineNumber(1246);    // compilenode identifier
                                                            var opresult2020 = callmethodChecked(var_theIndex, "+", [1], new GraceNum(1));
                                                            onSelf = true;
                                                            var call2021 = callmethodChecked(this, "theGraphics", [0]);
                                                            var call2022 = callmethodChecked(call2021, "at()add", [1, 1], opresult2020, var_aGraphic);
                                                            setLineNumber(1247);    // compilenode call
                                                            onSelf = true;
                                                            var call2023 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if2010 = call2023;
                                                          }
                                                          setLineNumber(1244);    // return value
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], if2010)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method sendForward(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return if2010;
                                                        };
                                                        func2007.paramTypes = [];
                                                        func2007.paramTypes.push([]);
                                                        func2007.paramCounts = [1];
                                                        obj1944.methods["sendForward"] = func2007;
                                                        func2007.definitionLine = 1241;
                                                        func2007.definitionModule = "stobjectdraw";
                                                        var func2024 = function(argcv) {    // method sendBackward(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aGraphic = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendBackward(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1252);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Graphic, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in sendBackward (arg list 1), which corresponds to parameter aGraphic, does not have " + 
                                                                      callmethod(var_Graphic, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1253);    // compilenode call
                                                          onSelf = true;
                                                          var call2025 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2026 = callmethodChecked(call2025, "indexOf", [1], var_aGraphic);
                                                          var var_theIndex = call2026;
                                                          var if2027 = GraceDone;
                                                          setLineNumber(1255);    // compilenode identifier
                                                          var opresult2030 = callmethodChecked(var_theIndex, "\u2260", [1], new GraceNum(1));
                                                          if (Grace_isTrue(opresult2030)) {
                                                            setLineNumber(1256);    // compilenode call
                                                            onSelf = true;
                                                            var call2031 = callmethodChecked(this, "theGraphics", [0]);
                                                            var call2032 = callmethodChecked(call2031, "remove", [1], var_aGraphic);
                                                            setLineNumber(1257);    // compilenode identifier
                                                            var diff2035 = callmethodChecked(var_theIndex, "-", [1], new GraceNum(1));
                                                            onSelf = true;
                                                            var call2036 = callmethodChecked(this, "theGraphics", [0]);
                                                            var call2037 = callmethodChecked(call2036, "at()add", [1, 1], diff2035, var_aGraphic);
                                                            setLineNumber(1258);    // compilenode call
                                                            onSelf = true;
                                                            var call2038 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if2027 = call2038;
                                                          }
                                                          setLineNumber(1255);    // return value
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], if2027)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method sendBackward(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return if2027;
                                                        };
                                                        func2024.paramTypes = [];
                                                        func2024.paramTypes.push([]);
                                                        func2024.paramCounts = [1];
                                                        obj1944.methods["sendBackward"] = func2024;
                                                        func2024.definitionLine = 1252;
                                                        func2024.definitionModule = "stobjectdraw";
                                                        var func2039 = function(argcv) {    // method printObjects
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for printObjects"));
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1264);    // compilenode call
                                                          onSelf = true;
                                                          var call2040 = callmethodChecked(this, "theGraphics", [0]);
                                                          var block2041 = new GraceBlock(this, 1264, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2041.real = function(var_aGraphic) {
                                                            setLineNumber(1265);    // compilenode identifier
                                                            var call2042 = Grace_print(var_aGraphic);
                                                            return call2042;
                                                          };
                                                          var call2043 = callmethodChecked(var_prelude, "for()do", [1, 1], call2040, block2041);
                                                          setLineNumber(1264);    // return value
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2043)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method printObjects does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2043;
                                                        };
                                                        func2039.paramCounts = [0];
                                                        obj1944.methods["printObjects"] = func2039;
                                                        func2039.definitionLine = 1263;
                                                        func2039.definitionModule = "stobjectdraw";
                                                        var func2044 = function(argcv) {    // method asString
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1271);    // compilenode string
                                                          var string2045 = new GraceString(" objects");
                                                          onSelf = true;
                                                          var call2047 = callmethodChecked(this, "theGraphics", [0]);
                                                          var call2048 = callmethodChecked(call2047, "size", [0]);
                                                          var string2050 = new GraceString("canvas: with ");
                                                          var opresult2052 = callmethodChecked(string2050, "++", [1], call2048);
                                                          var opresult2054 = callmethodChecked(opresult2052, "++", [1], string2045);
                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2054)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method asString does not have " + 
                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                          return opresult2054;
                                                        };
                                                        func2044.paramCounts = [0];
                                                        obj1944.methods["asString"] = func2044;
                                                        func2044.definitionLine = 1270;
                                                        func2044.definitionModule = "stobjectdraw";
                                                        setLineNumber(1166);    // compilenode string
                                                        var string2055 = new GraceString("canvas");
                                                        var call2056 = callmethodChecked(var_document, "createElement", [1], string2055);
                                                        var call2057 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call2058 = callmethodChecked(call2057, "componentFromElement()object", [1, 1], call2056, this);
                                                        obj1944.superobj = call2058;
                                                        if (call2058.data) obj1944.data = call2058.data;
                                                        if (call2058.hasOwnProperty('_value'))
                                                            obj1944._value = call2058._value;
                                                        setLineNumber(1168);    // compilenode identifier
                                                        var call2059 = callmethodChecked(var_dimensions__39__, "x", [0]);
                                                        onSelf = true;
                                                        var call2060 = callmethodChecked(this, "element", [0]);
                                                        var call2061 = callmethodChecked(call2060, "width:=", [1], call2059);
                                                        setLineNumber(1169);    // compilenode identifier
                                                        var call2062 = callmethodChecked(var_dimensions__39__, "y", [0]);
                                                        onSelf = true;
                                                        var call2063 = callmethodChecked(this, "element", [0]);
                                                        var call2064 = callmethodChecked(call2063, "height:=", [1], call2062);
                                                        setLineNumber(1170);    // compilenode string
                                                        var string2065 = new GraceString("center");
                                                        onSelf = true;
                                                        var call2066 = callmethodChecked(this, "element", [0]);
                                                        var call2067 = callmethodChecked(call2066, "style", [0]);
                                                        var call2068 = callmethodChecked(call2067, "alignSelf:=", [1], string2065);
                                                        setLineNumber(1172);    // compilenode string
                                                        var string2069 = new GraceString("2d");
                                                        onSelf = true;
                                                        var call2070 = callmethodChecked(this, "element", [0]);
                                                        var call2071 = callmethodChecked(call2070, "getContext", [1], string2069);
                                                        obj1944.data["theContext"] = call2071;
                                                        var reader_stobjectdraw_theContext2072 = function() {
                                                          return this.data["theContext"];
                                                        };
                                                        reader_stobjectdraw_theContext2072.def = true;
                                                        reader_stobjectdraw_theContext2072.confidential = true;
                                                        obj1944.methods["theContext"] = reader_stobjectdraw_theContext2072;
                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call2071)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("value of def 'theContext' is not of type Foreign"));
                                                        setLineNumber(1173);    // compilenode call
                                                        onSelf = true;
                                                        var call2073 = callmethodChecked(this, "theContext", [0]);
                                                        var call2074 = callmethodChecked(call2073, "lineWidth:=", [1], new GraceNum(2));
                                                        setLineNumber(1188);    // compilenode array
                                                        var array2075 = new PrimitiveGraceList([]);
                                                        obj1944.data["theGraphics"] = array2075;
                                                        var reader_stobjectdraw_theGraphics2076 = function() {
                                                          return this.data["theGraphics"];
                                                        };
                                                        obj1944.methods["theGraphics"] = reader_stobjectdraw_theGraphics2076;
                                                        obj1944.data["theGraphics"] = array2075;
                                                        var writer_stobjectdraw_theGraphics2076 = function(argcv, o) {
                                                          this.data["theGraphics"] = o;
                                                          return GraceDone;
                                                        };
                                                        obj1944.methods["theGraphics:="] = writer_stobjectdraw_theGraphics2076;
                                                        reader_stobjectdraw_theGraphics2076.confidential = true;
                                                        writer_stobjectdraw_theGraphics2076.confidential = true;
                                                        obj1944.mutable = true;
                                                        setLineNumber(1190);    // compilenode identifier
                                                        obj1944.data["redraw"] = GraceFalse;
                                                        var reader_stobjectdraw_redraw2077 = function() {
                                                          return this.data["redraw"];
                                                        };
                                                        obj1944.methods["redraw"] = reader_stobjectdraw_redraw2077;
                                                        obj1944.data["redraw"] = GraceFalse;
                                                        var writer_stobjectdraw_redraw2077 = function(argcv, o) {
                                                          this.data["redraw"] = o;
                                                          return GraceDone;
                                                        };
                                                        obj1944.methods["redraw:="] = writer_stobjectdraw_redraw2077;
                                                        reader_stobjectdraw_redraw2077.confidential = true;
                                                        writer_stobjectdraw_redraw2077.confidential = true;
                                                        if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceFalse)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("initial value of var 'redraw' is not of type Boolean"));
                                                        obj1944.mutable = true;
                                                        superDepth = origSuperDepth;
                                                      };
                                                      obj_init_1944.apply(inheritingObject, []);
                                                      return obj1944;
                                                      };
                                                      this.methods["drawingCanvasSize()object"] = func1942;
                                                    setLineNumber(1275);    // compilenode method
                                                    var func2078 = function(argcv) {    // method graphicApplicationSize(1)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_theDimension__39__ = arguments[curarg];
                                                      curarg++;
                                                      if (argcv[0] !== 1)
                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for graphicApplicationSize(1)"));
                                                      // Start argument checking
                                                      curarg = 1;
                                                      onSelf = true;
                                                      var call2079 = callmethodChecked(this, "Point", [0]);
                                                      if (!Grace_isTrue(callmethod(call2079, "match",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in graphicApplicationSize (arg list 1), which corresponds to parameter theDimension', does not have " + 
                                                                  callmethod(call2079, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("stobjectdraw");
                                                      var obj2080 = Grace_allocObject(null, "stobjectdraw.graphicApplicationSize");
                                                      obj2080.definitionModule = "stobjectdraw";
                                                      obj2080.definitionLine = 1275;
                                                      obj2080.outer = this;
                                                      var reader_stobjectdraw_outer2081 = function() {
                                                        return this.outer;
                                                      };
                                                      obj2080.methods["outer"] = reader_stobjectdraw_outer2081;
                                                      var obj_init_2080 = function() {
                                                        var origSuperDepth = superDepth;
                                                        superDepth = obj2080;
                                                        var func2082 = function(argcv) {    // method prepend(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aComponent = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for prepend(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1294);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in prepend (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                                                      callmethod(var_Component, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1295);    // compilenode call
                                                          onSelf = true;
                                                          var call2083 = callmethodChecked(this, "before", [0]);
                                                          var call2084 = callmethodChecked(call2083, "prepend", [1], var_aComponent);
                                                          setLineNumber(1296);    // compilenode call
                                                          onSelf = true;
                                                          var call2085 = callmethodChecked(this, "children", [0]);
                                                          var call2086 = callmethodChecked(call2085, "unshift", [1], var_aComponent);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2086)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method prepend(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2086;
                                                        };
                                                        func2082.paramTypes = [];
                                                        func2082.paramTypes.push([]);
                                                        func2082.paramCounts = [1];
                                                        obj2080.methods["prepend"] = func2082;
                                                        func2082.definitionLine = 1294;
                                                        func2082.definitionModule = "stobjectdraw";
                                                        var func2087 = function(argcv) {    // method append(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_aComponent = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for append(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1300);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in append (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                                                      callmethod(var_Component, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1301);    // compilenode call
                                                          onSelf = true;
                                                          var call2088 = callmethodChecked(this, "after", [0]);
                                                          var call2089 = callmethodChecked(call2088, "append", [1], var_aComponent);
                                                          setLineNumber(1302);    // compilenode call
                                                          onSelf = true;
                                                          var call2090 = callmethodChecked(this, "children", [0]);
                                                          var call2091 = callmethodChecked(call2090, "push", [1], var_aComponent);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2091)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method append(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2091;
                                                        };
                                                        func2087.paramTypes = [];
                                                        func2087.paramTypes.push([]);
                                                        func2087.paramCounts = [1];
                                                        obj2080.methods["append"] = func2087;
                                                        func2087.definitionLine = 1300;
                                                        func2087.definitionModule = "stobjectdraw";
                                                        var func2092 = function(argcv) {    // method onMouseClick(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseClick(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1309);    // compilenode call
                                                          var call2093 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2094 = callmethodChecked(call2093, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2094, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseClick (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2094, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseClick(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2092.paramCounts = [1];
                                                        obj2080.methods["onMouseClick"] = func2092;
                                                        func2092.definitionLine = 1309;
                                                        func2092.definitionModule = "stobjectdraw";
                                                        var func2095 = function(argcv) {    // method onMousePress(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMousePress(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1312);    // compilenode call
                                                          var call2096 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2097 = callmethodChecked(call2096, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2097, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMousePress (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2097, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMousePress(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2095.paramCounts = [1];
                                                        obj2080.methods["onMousePress"] = func2095;
                                                        func2095.definitionLine = 1312;
                                                        func2095.definitionModule = "stobjectdraw";
                                                        var func2098 = function(argcv) {    // method onMouseRelease(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseRelease(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1315);    // compilenode call
                                                          var call2099 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2100 = callmethodChecked(call2099, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2100, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseRelease (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2100, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseRelease(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2098.paramCounts = [1];
                                                        obj2080.methods["onMouseRelease"] = func2098;
                                                        func2098.definitionLine = 1315;
                                                        func2098.definitionModule = "stobjectdraw";
                                                        var func2101 = function(argcv) {    // method onMouseMove(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseMove(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1318);    // compilenode call
                                                          var call2102 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2103 = callmethodChecked(call2102, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2103, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseMove (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2103, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseMove(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2101.paramCounts = [1];
                                                        obj2080.methods["onMouseMove"] = func2101;
                                                        func2101.definitionLine = 1318;
                                                        func2101.definitionModule = "stobjectdraw";
                                                        var func2104 = function(argcv) {    // method onMouseDrag(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseDrag(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1321);    // compilenode call
                                                          var call2105 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2106 = callmethodChecked(call2105, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2106, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseDrag (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2106, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseDrag(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2104.paramCounts = [1];
                                                        obj2080.methods["onMouseDrag"] = func2104;
                                                        func2104.definitionLine = 1321;
                                                        func2104.definitionModule = "stobjectdraw";
                                                        var func2107 = function(argcv) {    // method onMouseEnter(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnter(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1324);    // compilenode call
                                                          var call2108 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2109 = callmethodChecked(call2108, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2109, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseEnter (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2109, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseEnter(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2107.paramCounts = [1];
                                                        obj2080.methods["onMouseEnter"] = func2107;
                                                        func2107.definitionLine = 1324;
                                                        func2107.definitionModule = "stobjectdraw";
                                                        var func2110 = function(argcv) {    // method onMouseExit(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_pt = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExit(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1327);    // compilenode call
                                                          var call2111 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2112 = callmethodChecked(call2111, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2112, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in onMouseExit (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                      callmethod(call2112, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method onMouseExit(1) does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return GraceDone;
                                                        };
                                                        func2110.paramCounts = [1];
                                                        obj2080.methods["onMouseExit"] = func2110;
                                                        func2110.definitionLine = 1327;
                                                        func2110.definitionModule = "stobjectdraw";
                                                        var func2113 = function(argcv) {    // method startGraphics
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startGraphics"));
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1332);    // compilenode string
                                                          var string2114 = new GraceString("div");
                                                          var call2115 = callmethodChecked(var_document, "createElement", [1], string2114);
                                                          var var_parentElement = call2115;
                                                          setLineNumber(1333);    // compilenode string
                                                          var string2116 = new GraceString("height-calculator");
                                                          var call2117 = callmethodChecked(var_parentElement, "className:=", [1], string2116);
                                                          setLineNumber(1334);    // compilenode string
                                                          var string2118 = new GraceString("px");
                                                          var call2120 = callmethodChecked(var_theDimension__39__, "x", [0]);
                                                          var string2122 = new GraceString("");
                                                          var opresult2124 = callmethodChecked(string2122, "++", [1], call2120);
                                                          var opresult2126 = callmethodChecked(opresult2124, "++", [1], string2118);
                                                          var call2127 = callmethodChecked(var_parentElement, "style", [0]);
                                                          var call2128 = callmethodChecked(call2127, "width:=", [1], opresult2126);
                                                          setLineNumber(1335);    // compilenode call
                                                          onSelf = true;
                                                          var call2129 = callmethodChecked(this, "element", [0]);
                                                          var call2130 = callmethodChecked(call2129, "cloneNode", [1], GraceTrue);
                                                          var call2131 = callmethodChecked(var_parentElement, "appendChild", [1], call2130);
                                                          setLineNumber(1336);    // compilenode identifier
                                                          var call2132 = callmethodChecked(var_document, "body", [0]);
                                                          var call2133 = callmethodChecked(call2132, "appendChild", [1], var_parentElement);
                                                          setLineNumber(1337);    // compilenode identifier
                                                          var call2134 = callmethodChecked(var_parentElement, "offsetHeight", [0]);
                                                          onSelf = true;
                                                          var call2135 = callmethodChecked(this, "theHeight:=", [1], call2134);
                                                          setLineNumber(1338);    // compilenode identifier
                                                          var call2136 = callmethodChecked(var_document, "body", [0]);
                                                          var call2137 = callmethodChecked(call2136, "removeChild", [1], var_parentElement);
                                                          setLineNumber(1340);    // compilenode call
                                                          onSelf = true;
                                                          var call2138 = callmethodChecked(this, "startApplication", [0]);
                                                          setLineNumber(1341);    // compilenode call
                                                          onSelf = true;
                                                          var call2139 = callmethodChecked(this, "canvas", [0]);
                                                          var call2140 = callmethodChecked(call2139, "startDrawing", [0]);
                                                          setLineNumber(1343);    // compilenode string
                                                          var string2141 = new GraceString("hidden");
                                                          onSelf = true;
                                                          var call2142 = callmethodChecked(this, "theWindow", [0]);
                                                          var call2143 = callmethodChecked(call2142, "document", [0]);
                                                          var call2144 = callmethodChecked(call2143, "documentElement", [0]);
                                                          var call2145 = callmethodChecked(call2144, "style", [0]);
                                                          var call2146 = callmethodChecked(call2145, "overflow:=", [1], string2141);
                                                          setLineNumber(1345);    // compilenode block
                                                          var block2147 = new GraceBlock(this, 1345, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2147.real = function(var_event__39__) {
                                                            setLineNumber(1346);    // compilenode identifier
                                                            var call2148 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2149 = callmethodChecked(this, "onMouseClick", [1], call2148);
                                                            return call2149;
                                                          };
                                                          setLineNumber(1345);    // compilenode call
                                                          onSelf = true;
                                                          var call2150 = callmethodChecked(this, "canvas", [0]);
                                                          var call2151 = callmethodChecked(call2150, "onMouseClickDo", [1], block2147);
                                                          setLineNumber(1349);    // compilenode block
                                                          var block2152 = new GraceBlock(this, 1349, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2152.real = function(var_event__39__) {
                                                            setLineNumber(1350);    // compilenode identifier
                                                            var call2153 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2154 = callmethodChecked(this, "onMousePress", [1], call2153);
                                                            return call2154;
                                                          };
                                                          setLineNumber(1349);    // compilenode call
                                                          onSelf = true;
                                                          var call2155 = callmethodChecked(this, "canvas", [0]);
                                                          var call2156 = callmethodChecked(call2155, "onMousePressDo", [1], block2152);
                                                          setLineNumber(1353);    // compilenode block
                                                          var block2157 = new GraceBlock(this, 1353, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2157.real = function(var_event__39__) {
                                                            setLineNumber(1354);    // compilenode identifier
                                                            var call2158 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2159 = callmethodChecked(this, "onMouseRelease", [1], call2158);
                                                            return call2159;
                                                          };
                                                          setLineNumber(1353);    // compilenode call
                                                          onSelf = true;
                                                          var call2160 = callmethodChecked(this, "canvas", [0]);
                                                          var call2161 = callmethodChecked(call2160, "onMouseReleaseDo", [1], block2157);
                                                          setLineNumber(1357);    // compilenode block
                                                          var block2162 = new GraceBlock(this, 1357, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2162.real = function(var_event__39__) {
                                                            setLineNumber(1358);    // compilenode identifier
                                                            var call2163 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2164 = callmethodChecked(this, "onMouseMove", [1], call2163);
                                                            return call2164;
                                                          };
                                                          setLineNumber(1357);    // compilenode call
                                                          onSelf = true;
                                                          var call2165 = callmethodChecked(this, "canvas", [0]);
                                                          var call2166 = callmethodChecked(call2165, "onMouseMoveDo", [1], block2162);
                                                          setLineNumber(1361);    // compilenode block
                                                          var block2167 = new GraceBlock(this, 1361, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2167.real = function(var_event__39__) {
                                                            setLineNumber(1362);    // compilenode identifier
                                                            var call2168 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2169 = callmethodChecked(this, "onMouseDrag", [1], call2168);
                                                            return call2169;
                                                          };
                                                          setLineNumber(1361);    // compilenode call
                                                          onSelf = true;
                                                          var call2170 = callmethodChecked(this, "canvas", [0]);
                                                          var call2171 = callmethodChecked(call2170, "onMouseDragDo", [1], block2167);
                                                          setLineNumber(1365);    // compilenode block
                                                          var block2172 = new GraceBlock(this, 1365, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2172.real = function(var_event__39__) {
                                                            setLineNumber(1366);    // compilenode identifier
                                                            var call2173 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2174 = callmethodChecked(this, "onMouseEnter", [1], call2173);
                                                            return call2174;
                                                          };
                                                          setLineNumber(1365);    // compilenode call
                                                          onSelf = true;
                                                          var call2175 = callmethodChecked(this, "canvas", [0]);
                                                          var call2176 = callmethodChecked(call2175, "onMouseEnterDo", [1], block2172);
                                                          setLineNumber(1369);    // compilenode block
                                                          var block2177 = new GraceBlock(this, 1369, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block2177.real = function(var_event__39__) {
                                                            setLineNumber(1370);    // compilenode identifier
                                                            var call2178 = callmethodChecked(var_event__39__, "at", [0]);
                                                            onSelf = true;
                                                            var call2179 = callmethodChecked(this, "onMouseExit", [1], call2178);
                                                            return call2179;
                                                          };
                                                          setLineNumber(1369);    // compilenode call
                                                          onSelf = true;
                                                          var call2180 = callmethodChecked(this, "canvas", [0]);
                                                          var call2181 = callmethodChecked(call2180, "onMouseExitDo", [1], block2177);
                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2181)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method startGraphics does not have " + 
                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                          return call2181;
                                                        };
                                                        func2113.paramCounts = [0];
                                                        obj2080.methods["startGraphics"] = func2113;
                                                        func2113.definitionLine = 1331;
                                                        func2113.definitionModule = "stobjectdraw";
                                                        var func2182 = function(argcv) {    // method asString
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          if (argcv[0] !== 0)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1375);    // compilenode string
                                                          var string2183 = new GraceString("");
                                                          onSelf = true;
                                                          var call2185 = callmethodChecked(this, "canvas", [0]);
                                                          var string2187 = new GraceString("graphic application of ");
                                                          var opresult2189 = callmethodChecked(string2187, "++", [1], call2185);
                                                          var opresult2191 = callmethodChecked(opresult2189, "++", [1], string2183);
                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2191)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method asString does not have " + 
                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                          return opresult2191;
                                                        };
                                                        func2182.paramCounts = [0];
                                                        obj2080.methods["asString"] = func2182;
                                                        func2182.definitionLine = 1374;
                                                        func2182.definitionModule = "stobjectdraw";
                                                        setLineNumber(1279);    // compilenode string
                                                        var string2192 = new GraceString("Simple graphics");
                                                        var call2193 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call2194 = callmethodChecked(call2193, "applicationTitle()size()object", [1, 1, 1], string2192, var_theDimension__39__, this);
                                                        obj2080.superobj = call2194;
                                                        if (call2194.data) obj2080.data = call2194.data;
                                                        if (call2194.hasOwnProperty('_value'))
                                                            obj2080._value = call2194._value;
                                                        setLineNumber(1281);    // compilenode call
                                                        var call2195 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call2196 = callmethodChecked(call2195, "drawingCanvasSize", [1], var_theDimension__39__);
                                                        obj2080.data["canvas"] = call2196;
                                                        var reader_stobjectdraw_canvas2197 = function() {
                                                          return this.data["canvas"];
                                                        };
                                                        reader_stobjectdraw_canvas2197.def = true;
                                                        obj2080.methods["canvas"] = reader_stobjectdraw_canvas2197;
                                                        if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match", [1], call2196)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("value of def 'canvas' is not of type DrawingCanvas"));
                                                        setLineNumber(1283);    // compilenode call
                                                        onSelf = true;
                                                        var call2198 = callmethodChecked(this, "canvas", [0]);
                                                        onSelf = true;
                                                        var call2199 = callmethodChecked(this, "children", [0]);
                                                        var call2200 = callmethodChecked(call2199, "push", [1], call2198);
                                                        setLineNumber(1285);    // compilenode call
                                                        var call2201 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call2202 = callmethodChecked(call2201, "containerEmpty", [0]);
                                                        obj2080.data["before"] = call2202;
                                                        var reader_stobjectdraw_before2203 = function() {
                                                          return this.data["before"];
                                                        };
                                                        reader_stobjectdraw_before2203.def = true;
                                                        reader_stobjectdraw_before2203.confidential = true;
                                                        obj2080.methods["before"] = reader_stobjectdraw_before2203;
                                                        if (!Grace_isTrue(callmethod(var_Container, "match", [1], call2202)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("value of def 'before' is not of type Container"));
                                                        setLineNumber(1286);    // compilenode call
                                                        var call2204 = callmethodChecked(superDepth, "outer", [0]);
                                                        onOuter = true;
                                                        onSelf = true;
                                                        var call2205 = callmethodChecked(call2204, "containerEmpty", [0]);
                                                        obj2080.data["after"] = call2205;
                                                        var reader_stobjectdraw_after2206 = function() {
                                                          return this.data["after"];
                                                        };
                                                        reader_stobjectdraw_after2206.def = true;
                                                        reader_stobjectdraw_after2206.confidential = true;
                                                        obj2080.methods["after"] = reader_stobjectdraw_after2206;
                                                        if (!Grace_isTrue(callmethod(var_Container, "match", [1], call2205)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("value of def 'after' is not of type Container"));
                                                        setLineNumber(1288);    // compilenode call
                                                        onSelf = true;
                                                        var call2207 = callmethodChecked(this, "arrangeVertical", [0]);
                                                        setLineNumber(1289);    // compilenode call
                                                        onSelf = true;
                                                        var call2208 = callmethodChecked(this, "before", [0]);
                                                        var call2209 = callmethodChecked(call2208, "element", [0]);
                                                        onSelf = true;
                                                        var call2210 = callmethodChecked(this, "element", [0]);
                                                        var call2211 = callmethodChecked(call2210, "appendChild", [1], call2209);
                                                        setLineNumber(1290);    // compilenode call
                                                        onSelf = true;
                                                        var call2212 = callmethodChecked(this, "canvas", [0]);
                                                        var call2213 = callmethodChecked(call2212, "element", [0]);
                                                        onSelf = true;
                                                        var call2214 = callmethodChecked(this, "element", [0]);
                                                        var call2215 = callmethodChecked(call2214, "appendChild", [1], call2213);
                                                        setLineNumber(1291);    // compilenode call
                                                        onSelf = true;
                                                        var call2216 = callmethodChecked(this, "after", [0]);
                                                        var call2217 = callmethodChecked(call2216, "element", [0]);
                                                        onSelf = true;
                                                        var call2218 = callmethodChecked(this, "element", [0]);
                                                        var call2219 = callmethodChecked(call2218, "appendChild", [1], call2217);
                                                        superDepth = origSuperDepth;
                                                      };
                                                      obj_init_2080.apply(obj2080, []);
                                                      setLineNumber(1275);    // return value
                                                      if (!Grace_isTrue(callmethod(var_GraphicApplication, "match", [1], obj2080)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method graphicApplicationSize(1) does not have " + 
                                                                  callmethod(var_GraphicApplication, "asString", [0])._value + "."));
                                                      return obj2080;
                                                    };
                                                    func2078.paramCounts = [1];
                                                    this.methods["graphicApplicationSize"] = func2078;
                                                    func2078.definitionLine = 1275;
                                                    func2078.definitionModule = "stobjectdraw";
                                                      var func2220 = function(argcv) {    // method graphicApplicationSize(1     )()object
                                                        var curarg = 1;
                                                        var var_theDimension__39__ = arguments[curarg];
                                                        curarg++;
                                                        var inheritingObject = arguments[curarg++];
                                                        // Start argument processing
                                                        curarg = 1;
                                                        onSelf = true;
                                                        var call2221 = callmethodChecked(this, "Point", [0]);
                                                        if (!Grace_isTrue(callmethod(call2221, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in graphicApplicationSize (arg list 1), which corresponds to parameter theDimension', does not have " + 
                                                                    callmethod(call2221, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument processing
                                                        setModuleName("stobjectdraw");
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var obj2222 = Grace_allocObject(null, "graphicApplicationSize");
                                                        obj2222.definitionModule = "stobjectdraw";
                                                        obj2222.definitionLine = 1275;
                                                        var inho2222 = inheritingObject;
                                                        while (inho2222.superobj) inho2222 = inho2222.superobj;
                                                        inho2222.superobj = obj2222;
                                                        obj2222.data = inheritingObject.data;
                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                          obj2222._value = inheritingObject._value;
                                                        obj2222.outer = this;
                                                        var reader_stobjectdraw_outer2223 = function() {
                                                          return this.outer;
                                                        };
                                                        obj2222.methods["outer"] = reader_stobjectdraw_outer2223;
                                                        var obj_init_2222 = function() {
                                                          var origSuperDepth = superDepth;
                                                          superDepth = obj2222;
                                                          var func2224 = function(argcv) {    // method prepend(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_aComponent = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for prepend(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1294);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in prepend (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                                                        callmethod(var_Component, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1295);    // compilenode call
                                                            onSelf = true;
                                                            var call2225 = callmethodChecked(this, "before", [0]);
                                                            var call2226 = callmethodChecked(call2225, "prepend", [1], var_aComponent);
                                                            setLineNumber(1296);    // compilenode call
                                                            onSelf = true;
                                                            var call2227 = callmethodChecked(this, "children", [0]);
                                                            var call2228 = callmethodChecked(call2227, "unshift", [1], var_aComponent);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2228)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method prepend(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2228;
                                                          };
                                                          func2224.paramTypes = [];
                                                          func2224.paramTypes.push([]);
                                                          func2224.paramCounts = [1];
                                                          obj2222.methods["prepend"] = func2224;
                                                          func2224.definitionLine = 1294;
                                                          func2224.definitionModule = "stobjectdraw";
                                                          var func2229 = function(argcv) {    // method append(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_aComponent = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for append(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1300);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Component, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in append (arg list 1), which corresponds to parameter aComponent, does not have " + 
                                                                        callmethod(var_Component, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1301);    // compilenode call
                                                            onSelf = true;
                                                            var call2230 = callmethodChecked(this, "after", [0]);
                                                            var call2231 = callmethodChecked(call2230, "append", [1], var_aComponent);
                                                            setLineNumber(1302);    // compilenode call
                                                            onSelf = true;
                                                            var call2232 = callmethodChecked(this, "children", [0]);
                                                            var call2233 = callmethodChecked(call2232, "push", [1], var_aComponent);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2233)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method append(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2233;
                                                          };
                                                          func2229.paramTypes = [];
                                                          func2229.paramTypes.push([]);
                                                          func2229.paramCounts = [1];
                                                          obj2222.methods["append"] = func2229;
                                                          func2229.definitionLine = 1300;
                                                          func2229.definitionModule = "stobjectdraw";
                                                          var func2234 = function(argcv) {    // method onMouseClick(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseClick(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1309);    // compilenode call
                                                            var call2235 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2236 = callmethodChecked(call2235, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2236, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseClick (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2236, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseClick(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2234.paramCounts = [1];
                                                          obj2222.methods["onMouseClick"] = func2234;
                                                          func2234.definitionLine = 1309;
                                                          func2234.definitionModule = "stobjectdraw";
                                                          var func2237 = function(argcv) {    // method onMousePress(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMousePress(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1312);    // compilenode call
                                                            var call2238 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2239 = callmethodChecked(call2238, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2239, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMousePress (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2239, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMousePress(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2237.paramCounts = [1];
                                                          obj2222.methods["onMousePress"] = func2237;
                                                          func2237.definitionLine = 1312;
                                                          func2237.definitionModule = "stobjectdraw";
                                                          var func2240 = function(argcv) {    // method onMouseRelease(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseRelease(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1315);    // compilenode call
                                                            var call2241 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2242 = callmethodChecked(call2241, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2242, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseRelease (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2242, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseRelease(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2240.paramCounts = [1];
                                                          obj2222.methods["onMouseRelease"] = func2240;
                                                          func2240.definitionLine = 1315;
                                                          func2240.definitionModule = "stobjectdraw";
                                                          var func2243 = function(argcv) {    // method onMouseMove(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseMove(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1318);    // compilenode call
                                                            var call2244 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2245 = callmethodChecked(call2244, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2245, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseMove (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2245, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseMove(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2243.paramCounts = [1];
                                                          obj2222.methods["onMouseMove"] = func2243;
                                                          func2243.definitionLine = 1318;
                                                          func2243.definitionModule = "stobjectdraw";
                                                          var func2246 = function(argcv) {    // method onMouseDrag(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseDrag(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1321);    // compilenode call
                                                            var call2247 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2248 = callmethodChecked(call2247, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2248, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseDrag (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2248, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseDrag(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2246.paramCounts = [1];
                                                          obj2222.methods["onMouseDrag"] = func2246;
                                                          func2246.definitionLine = 1321;
                                                          func2246.definitionModule = "stobjectdraw";
                                                          var func2249 = function(argcv) {    // method onMouseEnter(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseEnter(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1324);    // compilenode call
                                                            var call2250 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2251 = callmethodChecked(call2250, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2251, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseEnter (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2251, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseEnter(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2249.paramCounts = [1];
                                                          obj2222.methods["onMouseEnter"] = func2249;
                                                          func2249.definitionLine = 1324;
                                                          func2249.definitionModule = "stobjectdraw";
                                                          var func2252 = function(argcv) {    // method onMouseExit(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_pt = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for onMouseExit(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1327);    // compilenode call
                                                            var call2253 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2254 = callmethodChecked(call2253, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2254, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in onMouseExit (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                        callmethod(call2254, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], GraceDone)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method onMouseExit(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return GraceDone;
                                                          };
                                                          func2252.paramCounts = [1];
                                                          obj2222.methods["onMouseExit"] = func2252;
                                                          func2252.definitionLine = 1327;
                                                          func2252.definitionModule = "stobjectdraw";
                                                          var func2255 = function(argcv) {    // method startGraphics
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for startGraphics"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1332);    // compilenode string
                                                            var string2256 = new GraceString("div");
                                                            var call2257 = callmethodChecked(var_document, "createElement", [1], string2256);
                                                            var var_parentElement = call2257;
                                                            setLineNumber(1333);    // compilenode string
                                                            var string2258 = new GraceString("height-calculator");
                                                            var call2259 = callmethodChecked(var_parentElement, "className:=", [1], string2258);
                                                            setLineNumber(1334);    // compilenode string
                                                            var string2260 = new GraceString("px");
                                                            var call2262 = callmethodChecked(var_theDimension__39__, "x", [0]);
                                                            var string2264 = new GraceString("");
                                                            var opresult2266 = callmethodChecked(string2264, "++", [1], call2262);
                                                            var opresult2268 = callmethodChecked(opresult2266, "++", [1], string2260);
                                                            var call2269 = callmethodChecked(var_parentElement, "style", [0]);
                                                            var call2270 = callmethodChecked(call2269, "width:=", [1], opresult2268);
                                                            setLineNumber(1335);    // compilenode call
                                                            onSelf = true;
                                                            var call2271 = callmethodChecked(this, "element", [0]);
                                                            var call2272 = callmethodChecked(call2271, "cloneNode", [1], GraceTrue);
                                                            var call2273 = callmethodChecked(var_parentElement, "appendChild", [1], call2272);
                                                            setLineNumber(1336);    // compilenode identifier
                                                            var call2274 = callmethodChecked(var_document, "body", [0]);
                                                            var call2275 = callmethodChecked(call2274, "appendChild", [1], var_parentElement);
                                                            setLineNumber(1337);    // compilenode identifier
                                                            var call2276 = callmethodChecked(var_parentElement, "offsetHeight", [0]);
                                                            onSelf = true;
                                                            var call2277 = callmethodChecked(this, "theHeight:=", [1], call2276);
                                                            setLineNumber(1338);    // compilenode identifier
                                                            var call2278 = callmethodChecked(var_document, "body", [0]);
                                                            var call2279 = callmethodChecked(call2278, "removeChild", [1], var_parentElement);
                                                            setLineNumber(1340);    // compilenode call
                                                            onSelf = true;
                                                            var call2280 = callmethodChecked(this, "startApplication", [0]);
                                                            setLineNumber(1341);    // compilenode call
                                                            onSelf = true;
                                                            var call2281 = callmethodChecked(this, "canvas", [0]);
                                                            var call2282 = callmethodChecked(call2281, "startDrawing", [0]);
                                                            setLineNumber(1343);    // compilenode string
                                                            var string2283 = new GraceString("hidden");
                                                            onSelf = true;
                                                            var call2284 = callmethodChecked(this, "theWindow", [0]);
                                                            var call2285 = callmethodChecked(call2284, "document", [0]);
                                                            var call2286 = callmethodChecked(call2285, "documentElement", [0]);
                                                            var call2287 = callmethodChecked(call2286, "style", [0]);
                                                            var call2288 = callmethodChecked(call2287, "overflow:=", [1], string2283);
                                                            setLineNumber(1345);    // compilenode block
                                                            var block2289 = new GraceBlock(this, 1345, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2289.real = function(var_event__39__) {
                                                              setLineNumber(1346);    // compilenode identifier
                                                              var call2290 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2291 = callmethodChecked(this, "onMouseClick", [1], call2290);
                                                              return call2291;
                                                            };
                                                            setLineNumber(1345);    // compilenode call
                                                            onSelf = true;
                                                            var call2292 = callmethodChecked(this, "canvas", [0]);
                                                            var call2293 = callmethodChecked(call2292, "onMouseClickDo", [1], block2289);
                                                            setLineNumber(1349);    // compilenode block
                                                            var block2294 = new GraceBlock(this, 1349, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2294.real = function(var_event__39__) {
                                                              setLineNumber(1350);    // compilenode identifier
                                                              var call2295 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2296 = callmethodChecked(this, "onMousePress", [1], call2295);
                                                              return call2296;
                                                            };
                                                            setLineNumber(1349);    // compilenode call
                                                            onSelf = true;
                                                            var call2297 = callmethodChecked(this, "canvas", [0]);
                                                            var call2298 = callmethodChecked(call2297, "onMousePressDo", [1], block2294);
                                                            setLineNumber(1353);    // compilenode block
                                                            var block2299 = new GraceBlock(this, 1353, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2299.real = function(var_event__39__) {
                                                              setLineNumber(1354);    // compilenode identifier
                                                              var call2300 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2301 = callmethodChecked(this, "onMouseRelease", [1], call2300);
                                                              return call2301;
                                                            };
                                                            setLineNumber(1353);    // compilenode call
                                                            onSelf = true;
                                                            var call2302 = callmethodChecked(this, "canvas", [0]);
                                                            var call2303 = callmethodChecked(call2302, "onMouseReleaseDo", [1], block2299);
                                                            setLineNumber(1357);    // compilenode block
                                                            var block2304 = new GraceBlock(this, 1357, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2304.real = function(var_event__39__) {
                                                              setLineNumber(1358);    // compilenode identifier
                                                              var call2305 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2306 = callmethodChecked(this, "onMouseMove", [1], call2305);
                                                              return call2306;
                                                            };
                                                            setLineNumber(1357);    // compilenode call
                                                            onSelf = true;
                                                            var call2307 = callmethodChecked(this, "canvas", [0]);
                                                            var call2308 = callmethodChecked(call2307, "onMouseMoveDo", [1], block2304);
                                                            setLineNumber(1361);    // compilenode block
                                                            var block2309 = new GraceBlock(this, 1361, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2309.real = function(var_event__39__) {
                                                              setLineNumber(1362);    // compilenode identifier
                                                              var call2310 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2311 = callmethodChecked(this, "onMouseDrag", [1], call2310);
                                                              return call2311;
                                                            };
                                                            setLineNumber(1361);    // compilenode call
                                                            onSelf = true;
                                                            var call2312 = callmethodChecked(this, "canvas", [0]);
                                                            var call2313 = callmethodChecked(call2312, "onMouseDragDo", [1], block2309);
                                                            setLineNumber(1365);    // compilenode block
                                                            var block2314 = new GraceBlock(this, 1365, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2314.real = function(var_event__39__) {
                                                              setLineNumber(1366);    // compilenode identifier
                                                              var call2315 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2316 = callmethodChecked(this, "onMouseEnter", [1], call2315);
                                                              return call2316;
                                                            };
                                                            setLineNumber(1365);    // compilenode call
                                                            onSelf = true;
                                                            var call2317 = callmethodChecked(this, "canvas", [0]);
                                                            var call2318 = callmethodChecked(call2317, "onMouseEnterDo", [1], block2314);
                                                            setLineNumber(1369);    // compilenode block
                                                            var block2319 = new GraceBlock(this, 1369, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block2319.real = function(var_event__39__) {
                                                              setLineNumber(1370);    // compilenode identifier
                                                              var call2320 = callmethodChecked(var_event__39__, "at", [0]);
                                                              onSelf = true;
                                                              var call2321 = callmethodChecked(this, "onMouseExit", [1], call2320);
                                                              return call2321;
                                                            };
                                                            setLineNumber(1369);    // compilenode call
                                                            onSelf = true;
                                                            var call2322 = callmethodChecked(this, "canvas", [0]);
                                                            var call2323 = callmethodChecked(call2322, "onMouseExitDo", [1], block2319);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2323)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method startGraphics does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2323;
                                                          };
                                                          func2255.paramCounts = [0];
                                                          obj2222.methods["startGraphics"] = func2255;
                                                          func2255.definitionLine = 1331;
                                                          func2255.definitionModule = "stobjectdraw";
                                                          var func2324 = function(argcv) {    // method asString
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1375);    // compilenode string
                                                            var string2325 = new GraceString("");
                                                            onSelf = true;
                                                            var call2327 = callmethodChecked(this, "canvas", [0]);
                                                            var string2329 = new GraceString("graphic application of ");
                                                            var opresult2331 = callmethodChecked(string2329, "++", [1], call2327);
                                                            var opresult2333 = callmethodChecked(opresult2331, "++", [1], string2325);
                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2333)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method asString does not have " + 
                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                            return opresult2333;
                                                          };
                                                          func2324.paramCounts = [0];
                                                          obj2222.methods["asString"] = func2324;
                                                          func2324.definitionLine = 1374;
                                                          func2324.definitionModule = "stobjectdraw";
                                                          setLineNumber(1279);    // compilenode string
                                                          var string2334 = new GraceString("Simple graphics");
                                                          var call2335 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2336 = callmethodChecked(call2335, "applicationTitle()size()object", [1, 1, 1], string2334, var_theDimension__39__, this);
                                                          obj2222.superobj = call2336;
                                                          if (call2336.data) obj2222.data = call2336.data;
                                                          if (call2336.hasOwnProperty('_value'))
                                                              obj2222._value = call2336._value;
                                                          setLineNumber(1281);    // compilenode call
                                                          var call2337 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2338 = callmethodChecked(call2337, "drawingCanvasSize", [1], var_theDimension__39__);
                                                          obj2222.data["canvas"] = call2338;
                                                          var reader_stobjectdraw_canvas2339 = function() {
                                                            return this.data["canvas"];
                                                          };
                                                          reader_stobjectdraw_canvas2339.def = true;
                                                          obj2222.methods["canvas"] = reader_stobjectdraw_canvas2339;
                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match", [1], call2338)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("value of def 'canvas' is not of type DrawingCanvas"));
                                                          setLineNumber(1283);    // compilenode call
                                                          onSelf = true;
                                                          var call2340 = callmethodChecked(this, "canvas", [0]);
                                                          onSelf = true;
                                                          var call2341 = callmethodChecked(this, "children", [0]);
                                                          var call2342 = callmethodChecked(call2341, "push", [1], call2340);
                                                          setLineNumber(1285);    // compilenode call
                                                          var call2343 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2344 = callmethodChecked(call2343, "containerEmpty", [0]);
                                                          obj2222.data["before"] = call2344;
                                                          var reader_stobjectdraw_before2345 = function() {
                                                            return this.data["before"];
                                                          };
                                                          reader_stobjectdraw_before2345.def = true;
                                                          reader_stobjectdraw_before2345.confidential = true;
                                                          obj2222.methods["before"] = reader_stobjectdraw_before2345;
                                                          if (!Grace_isTrue(callmethod(var_Container, "match", [1], call2344)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("value of def 'before' is not of type Container"));
                                                          setLineNumber(1286);    // compilenode call
                                                          var call2346 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2347 = callmethodChecked(call2346, "containerEmpty", [0]);
                                                          obj2222.data["after"] = call2347;
                                                          var reader_stobjectdraw_after2348 = function() {
                                                            return this.data["after"];
                                                          };
                                                          reader_stobjectdraw_after2348.def = true;
                                                          reader_stobjectdraw_after2348.confidential = true;
                                                          obj2222.methods["after"] = reader_stobjectdraw_after2348;
                                                          if (!Grace_isTrue(callmethod(var_Container, "match", [1], call2347)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("value of def 'after' is not of type Container"));
                                                          setLineNumber(1288);    // compilenode call
                                                          onSelf = true;
                                                          var call2349 = callmethodChecked(this, "arrangeVertical", [0]);
                                                          setLineNumber(1289);    // compilenode call
                                                          onSelf = true;
                                                          var call2350 = callmethodChecked(this, "before", [0]);
                                                          var call2351 = callmethodChecked(call2350, "element", [0]);
                                                          onSelf = true;
                                                          var call2352 = callmethodChecked(this, "element", [0]);
                                                          var call2353 = callmethodChecked(call2352, "appendChild", [1], call2351);
                                                          setLineNumber(1290);    // compilenode call
                                                          onSelf = true;
                                                          var call2354 = callmethodChecked(this, "canvas", [0]);
                                                          var call2355 = callmethodChecked(call2354, "element", [0]);
                                                          onSelf = true;
                                                          var call2356 = callmethodChecked(this, "element", [0]);
                                                          var call2357 = callmethodChecked(call2356, "appendChild", [1], call2355);
                                                          setLineNumber(1291);    // compilenode call
                                                          onSelf = true;
                                                          var call2358 = callmethodChecked(this, "after", [0]);
                                                          var call2359 = callmethodChecked(call2358, "element", [0]);
                                                          onSelf = true;
                                                          var call2360 = callmethodChecked(this, "element", [0]);
                                                          var call2361 = callmethodChecked(call2360, "appendChild", [1], call2359);
                                                          superDepth = origSuperDepth;
                                                        };
                                                        obj_init_2222.apply(inheritingObject, []);
                                                        return obj2222;
                                                        };
                                                        this.methods["graphicApplicationSize()object"] = func2220;
                                                      setLineNumber(1379);    // compilenode method
                                                      var func2362 = function(argcv) {    // method drawableAt(1)on(1)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_location__39__ = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[0] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for drawableAt (arg list 1) of drawableAt(1)on(1)"));
                                                        var var_canvas__39__ = arguments[curarg];
                                                        curarg++;
                                                        if (argcv[1] !== 1)
                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 2) of drawableAt(1)on(1)"));
                                                        // Start argument checking
                                                        curarg = 1;
                                                        onSelf = true;
                                                        var call2363 = callmethodChecked(this, "Point", [0]);
                                                        if (!Grace_isTrue(callmethod(call2363, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in drawableAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                    callmethod(call2363, "asString", [0])._value + "."));
                                                        curarg++;
                                                        if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in on (arg list 2), which corresponds to parameter canvas', does not have " + 
                                                                    callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("stobjectdraw");
                                                        var obj2364 = Grace_allocObject(GraceObject, "stobjectdraw.drawableAt()on");
                                                        obj2364.definitionModule = "stobjectdraw";
                                                        obj2364.definitionLine = 1379;
                                                        obj2364.outer = this;
                                                        var reader_stobjectdraw_outer2365 = function() {
                                                          return this.outer;
                                                        };
                                                        obj2364.methods["outer"] = reader_stobjectdraw_outer2365;
                                                        var obj_init_2364 = function() {
                                                          var origSuperDepth = superDepth;
                                                          superDepth = obj2364;
                                                          var func2366 = function(argcv) {    // method x
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for x"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1387);    // compilenode call
                                                            onSelf = true;
                                                            var call2367 = callmethodChecked(this, "location", [0]);
                                                            var call2368 = callmethodChecked(call2367, "x", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2368)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method x does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            return call2368;
                                                          };
                                                          func2366.paramCounts = [0];
                                                          obj2364.methods["x"] = func2366;
                                                          func2366.definitionLine = 1386;
                                                          func2366.definitionModule = "stobjectdraw";
                                                          var func2369 = function(argcv) {    // method y
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for y"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1392);    // compilenode call
                                                            onSelf = true;
                                                            var call2370 = callmethodChecked(this, "location", [0]);
                                                            var call2371 = callmethodChecked(call2370, "y", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2371)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method y does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            return call2371;
                                                          };
                                                          func2369.paramCounts = [0];
                                                          obj2364.methods["y"] = func2369;
                                                          func2369.definitionLine = 1391;
                                                          func2369.definitionModule = "stobjectdraw";
                                                          var func2372 = function(argcv) {    // method ==(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_other = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1398);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2373 = callmethodChecked(this, "isMe", [1], var_other);
                                                            return call2373;
                                                          };
                                                          func2372.paramCounts = [1];
                                                          obj2364.methods["=="] = func2372;
                                                          func2372.definitionLine = 1395;
                                                          func2372.definitionModule = "stobjectdraw";
                                                          var func2374 = function(argcv) {    // method color
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for color"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1407);    // compilenode call
                                                            onSelf = true;
                                                            var call2375 = callmethodChecked(this, "theColor", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Color, "match", [1], call2375)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method color does not have " + 
                                                                        callmethod(var_Color, "asString", [0])._value + "."));
                                                            return call2375;
                                                          };
                                                          func2374.paramCounts = [0];
                                                          obj2364.methods["color"] = func2374;
                                                          func2374.definitionLine = 1407;
                                                          func2374.definitionModule = "stobjectdraw";
                                                          var func2376 = function(argcv) {    // method color:=(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_newColor = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for color:=(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1409);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in color:= (arg list 1), which corresponds to parameter newColor, does not have " + 
                                                                        callmethod(var_Color, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1410);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2377 = callmethodChecked(this, "theColor:=", [1], var_newColor);
                                                            setLineNumber(1411);    // compilenode call
                                                            onSelf = true;
                                                            var call2378 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2378)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method color:=(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2378;
                                                          };
                                                          func2376.paramTypes = [];
                                                          func2376.paramTypes.push([]);
                                                          func2376.paramCounts = [1];
                                                          obj2364.methods["color:="] = func2376;
                                                          func2376.definitionLine = 1409;
                                                          func2376.definitionModule = "stobjectdraw";
                                                          var func2379 = function(argcv) {    // method frameColor
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for frameColor"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1416);    // compilenode call
                                                            onSelf = true;
                                                            var call2380 = callmethodChecked(this, "theFrameColor", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Color, "match", [1], call2380)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method frameColor does not have " + 
                                                                        callmethod(var_Color, "asString", [0])._value + "."));
                                                            return call2380;
                                                          };
                                                          func2379.paramCounts = [0];
                                                          obj2364.methods["frameColor"] = func2379;
                                                          func2379.definitionLine = 1416;
                                                          func2379.definitionModule = "stobjectdraw";
                                                          var func2381 = function(argcv) {    // method frameColor:=(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_newfColor = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for frameColor:=(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1417);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in frameColor:= (arg list 1), which corresponds to parameter newfColor, does not have " + 
                                                                        callmethod(var_Color, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1418);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2382 = callmethodChecked(this, "theFrameColor:=", [1], var_newfColor);
                                                            setLineNumber(1419);    // compilenode call
                                                            onSelf = true;
                                                            var call2383 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2383)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method frameColor:=(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2383;
                                                          };
                                                          func2381.paramTypes = [];
                                                          func2381.paramTypes.push([]);
                                                          func2381.paramCounts = [1];
                                                          obj2364.methods["frameColor:="] = func2381;
                                                          func2381.definitionLine = 1417;
                                                          func2381.definitionModule = "stobjectdraw";
                                                          var func2384 = function(argcv) {    // method visible:=(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_b = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visible:=(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1426);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in visible:= (arg list 1), which corresponds to parameter b, does not have " + 
                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1427);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2385 = callmethodChecked(this, "isVisible:=", [1], var_b);
                                                            setLineNumber(1428);    // compilenode call
                                                            onSelf = true;
                                                            var call2386 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2386)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method visible:=(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2386;
                                                          };
                                                          func2384.paramTypes = [];
                                                          func2384.paramTypes.push([type_Boolean, "b"]);
                                                          func2384.paramCounts = [1];
                                                          obj2364.methods["visible:="] = func2384;
                                                          func2384.definitionLine = 1426;
                                                          func2384.definitionModule = "stobjectdraw";
                                                          var func2387 = function(argcv) {    // method addToCanvas(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_c = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addToCanvas(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1432);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in addToCanvas (arg list 1), which corresponds to parameter c, does not have " + 
                                                                        callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1433);    // compilenode call
                                                            onSelf = true;
                                                            var call2388 = callmethodChecked(this, "removeFromCanvas", [0]);
                                                            setLineNumber(1434);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2389 = callmethodChecked(this, "canvas:=", [1], var_c);
                                                            setLineNumber(1435);    // compilenode identifier
                                                            var call2390 = callmethodChecked(var_c, "add", [1], this);
                                                            setLineNumber(1436);    // compilenode call
                                                            onSelf = true;
                                                            var call2391 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2391)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method addToCanvas(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2391;
                                                          };
                                                          func2387.paramTypes = [];
                                                          func2387.paramTypes.push([]);
                                                          func2387.paramCounts = [1];
                                                          obj2364.methods["addToCanvas"] = func2387;
                                                          func2387.definitionLine = 1432;
                                                          func2387.definitionModule = "stobjectdraw";
                                                          var func2392 = function(argcv) {    // method removeFromCanvas
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for removeFromCanvas"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1441);    // compilenode call
                                                            onSelf = true;
                                                            var call2393 = callmethodChecked(this, "canvas", [0]);
                                                            var call2394 = callmethodChecked(call2393, "remove", [1], this);
                                                            setLineNumber(1442);    // compilenode call
                                                            onSelf = true;
                                                            var call2395 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2395)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method removeFromCanvas does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2395;
                                                          };
                                                          func2392.paramCounts = [0];
                                                          obj2364.methods["removeFromCanvas"] = func2392;
                                                          func2392.definitionLine = 1440;
                                                          func2392.definitionModule = "stobjectdraw";
                                                          var func2396 = function(argcv) {    // method moveTo(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_newLocn = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveTo(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1446);    // compilenode call
                                                            var call2397 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2398 = callmethodChecked(call2397, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2398, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in moveTo (arg list 1), which corresponds to parameter newLocn, does not have " + 
                                                                        callmethod(call2398, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1447);    // compilenode identifier
                                                            onSelf = true;
                                                            var call2399 = callmethodChecked(this, "location:=", [1], var_newLocn);
                                                            setLineNumber(1448);    // compilenode call
                                                            onSelf = true;
                                                            var call2400 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2400)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method moveTo(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2400;
                                                          };
                                                          func2396.paramCounts = [1];
                                                          obj2364.methods["moveTo"] = func2396;
                                                          func2396.definitionLine = 1446;
                                                          func2396.definitionModule = "stobjectdraw";
                                                          var func2401 = function(argcv) {    // method moveBy(2)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_dx = arguments[curarg];
                                                            curarg++;
                                                            var var_dy = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 2)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveBy(2)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1452);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in moveBy (arg list 1), which corresponds to parameter dx, does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            curarg++;
                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 2 in moveBy (arg list 1), which corresponds to parameter dy, does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1453);    // compilenode identifier
                                                            var opresult2404 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                            onSelf = true;
                                                            var call2406 = callmethodChecked(this, "location", [0]);
                                                            var opresult2408 = callmethodChecked(call2406, "+", [1], opresult2404);
                                                            onSelf = true;
                                                            var call2409 = callmethodChecked(this, "location:=", [1], opresult2408);
                                                            setLineNumber(1454);    // compilenode call
                                                            onSelf = true;
                                                            var call2410 = callmethodChecked(this, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2410)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method moveBy(2) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2410;
                                                          };
                                                          func2401.paramTypes = [];
                                                          func2401.paramTypes.push([type_Number, "dx"]);
                                                          func2401.paramTypes.push([type_Number, "dy"]);
                                                          func2401.paramCounts = [2];
                                                          obj2364.methods["moveBy"] = func2401;
                                                          func2401.definitionLine = 1452;
                                                          func2401.definitionModule = "stobjectdraw";
                                                          var func2411 = function(argcv) {    // method contains(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_locn = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1458);    // compilenode call
                                                            var call2412 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2413 = callmethodChecked(call2412, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2413, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter locn, does not have " + 
                                                                        callmethod(call2413, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1459);    // compilenode string
                                                            var string2414 = new GraceString("");
                                                            var string2417 = new GraceString("contains not implemented for ");
                                                            var opresult2419 = callmethodChecked(string2417, "++", [1], this);
                                                            var opresult2421 = callmethodChecked(opresult2419, "++", [1], string2414);
                                                            var call2422 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2423 = callmethodChecked(call2422, "SubobjectResponsibility", [0]);
                                                            var call2424 = callmethodChecked(call2423, "raise", [1], opresult2421);
                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2424)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method contains(1) does not have " + 
                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                            return call2424;
                                                          };
                                                          func2411.paramCounts = [1];
                                                          obj2364.methods["contains"] = func2411;
                                                          func2411.definitionLine = 1458;
                                                          func2411.definitionModule = "stobjectdraw";
                                                          var func2425 = function(argcv) {    // method overlaps(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_otherObject = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for overlaps(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1463);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Graphic2D, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in overlaps (arg list 1), which corresponds to parameter otherObject, does not have " + 
                                                                        callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1464);    // compilenode string
                                                            var string2426 = new GraceString("");
                                                            var string2429 = new GraceString("overlaps not implemented for ");
                                                            var opresult2431 = callmethodChecked(string2429, "++", [1], this);
                                                            var opresult2433 = callmethodChecked(opresult2431, "++", [1], string2426);
                                                            var call2434 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2435 = callmethodChecked(call2434, "SubobjectResponsibility", [0]);
                                                            var call2436 = callmethodChecked(call2435, "raise", [1], opresult2433);
                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2436)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method overlaps(1) does not have " + 
                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                            return call2436;
                                                          };
                                                          func2425.paramTypes = [];
                                                          func2425.paramTypes.push([]);
                                                          func2425.paramCounts = [1];
                                                          obj2364.methods["overlaps"] = func2425;
                                                          func2425.definitionLine = 1463;
                                                          func2425.definitionModule = "stobjectdraw";
                                                          var func2437 = function(argcv) {    // method sendForward
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendForward"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1469);    // compilenode call
                                                            onSelf = true;
                                                            var call2438 = callmethodChecked(this, "canvas", [0]);
                                                            var call2439 = callmethodChecked(call2438, "sendForward", [1], this);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2439)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method sendForward does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2439;
                                                          };
                                                          func2437.paramCounts = [0];
                                                          obj2364.methods["sendForward"] = func2437;
                                                          func2437.definitionLine = 1468;
                                                          func2437.definitionModule = "stobjectdraw";
                                                          var func2440 = function(argcv) {    // method sendBackward
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendBackward"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1474);    // compilenode call
                                                            onSelf = true;
                                                            var call2441 = callmethodChecked(this, "canvas", [0]);
                                                            var call2442 = callmethodChecked(call2441, "sendBackward", [1], this);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2442)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method sendBackward does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2442;
                                                          };
                                                          func2440.paramCounts = [0];
                                                          obj2364.methods["sendBackward"] = func2440;
                                                          func2440.definitionLine = 1473;
                                                          func2440.definitionModule = "stobjectdraw";
                                                          var func2443 = function(argcv) {    // method sendToFront
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToFront"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1479);    // compilenode call
                                                            onSelf = true;
                                                            var call2444 = callmethodChecked(this, "canvas", [0]);
                                                            var call2445 = callmethodChecked(call2444, "sendToFront", [1], this);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2445)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method sendToFront does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2445;
                                                          };
                                                          func2443.paramCounts = [0];
                                                          obj2364.methods["sendToFront"] = func2443;
                                                          func2443.definitionLine = 1478;
                                                          func2443.definitionModule = "stobjectdraw";
                                                          var func2446 = function(argcv) {    // method sendToBack
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToBack"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1484);    // compilenode call
                                                            onSelf = true;
                                                            var call2447 = callmethodChecked(this, "canvas", [0]);
                                                            var call2448 = callmethodChecked(call2447, "sendToBack", [1], this);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2448)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method sendToBack does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2448;
                                                          };
                                                          func2446.paramCounts = [0];
                                                          obj2364.methods["sendToBack"] = func2446;
                                                          func2446.definitionLine = 1483;
                                                          func2446.definitionModule = "stobjectdraw";
                                                          var func2449 = function(argcv) {    // method notifyRedraw
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for notifyRedraw"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1489);    // compilenode call
                                                            onSelf = true;
                                                            var call2450 = callmethodChecked(this, "canvas", [0]);
                                                            var call2451 = callmethodChecked(call2450, "notifyRedraw", [0]);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2451)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method notifyRedraw does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2451;
                                                          };
                                                          func2449.confidential = true;
                                                          func2449.paramCounts = [0];
                                                          obj2364.methods["notifyRedraw"] = func2449;
                                                          func2449.definitionLine = 1488;
                                                          func2449.definitionModule = "stobjectdraw";
                                                          var func2452 = function(argcv) {    // method draw(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_ctx = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1493);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                        callmethod(var_Foreign, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1494);    // compilenode string
                                                            var string2453 = new GraceString("");
                                                            var string2456 = new GraceString("draw not implemented for ");
                                                            var opresult2458 = callmethodChecked(string2456, "++", [1], this);
                                                            var opresult2460 = callmethodChecked(opresult2458, "++", [1], string2453);
                                                            var call2461 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2462 = callmethodChecked(call2461, "SubobjectResponsibility", [0]);
                                                            var call2463 = callmethodChecked(call2462, "raise", [1], opresult2460);
                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2463)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method draw(1) does not have " + 
                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                            return call2463;
                                                          };
                                                          func2452.paramTypes = [];
                                                          func2452.paramTypes.push([]);
                                                          func2452.paramCounts = [1];
                                                          obj2364.methods["draw"] = func2452;
                                                          func2452.definitionLine = 1493;
                                                          func2452.definitionModule = "stobjectdraw";
                                                          var func2464 = function(argcv) {    // method asString
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            if (argcv[0] !== 0)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1499);    // compilenode string
                                                            var string2465 = new GraceString("Graphic object");
                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], string2465)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method asString does not have " + 
                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                            return string2465;
                                                          };
                                                          func2464.paramCounts = [0];
                                                          obj2364.methods["asString"] = func2464;
                                                          func2464.definitionLine = 1498;
                                                          func2464.definitionModule = "stobjectdraw";
                                                          setLineNumber(1383);    // compilenode identifier
                                                          obj2364.data["location"] = var_location__39__;
                                                          var reader_stobjectdraw_location2466 = function() {
                                                            return this.data["location"];
                                                          };
                                                          obj2364.methods["location"] = reader_stobjectdraw_location2466;
                                                          obj2364.data["location"] = var_location__39__;
                                                          var writer_stobjectdraw_location2466 = function(argcv, o) {
                                                            this.data["location"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj2364.methods["location:="] = writer_stobjectdraw_location2466;
                                                          writer_stobjectdraw_location2466.confidential = true;
                                                          var call2467 = callmethodChecked(superDepth, "outer", [0]);
                                                          onOuter = true;
                                                          onSelf = true;
                                                          var call2468 = callmethodChecked(call2467, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2468, "match", [1], var_location__39__)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("initial value of var 'location' is not of type self.outer.Point"));
                                                          obj2364.mutable = true;
                                                          setLineNumber(1402);    // compilenode identifier
                                                          obj2364.data["canvas"] = var_canvas__39__;
                                                          var reader_stobjectdraw_canvas2469 = function() {
                                                            return this.data["canvas"];
                                                          };
                                                          obj2364.methods["canvas"] = reader_stobjectdraw_canvas2469;
                                                          obj2364.data["canvas"] = var_canvas__39__;
                                                          var writer_stobjectdraw_canvas2469 = function(argcv, o) {
                                                            this.data["canvas"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj2364.methods["canvas:="] = writer_stobjectdraw_canvas2469;
                                                          reader_stobjectdraw_canvas2469.confidential = true;
                                                          writer_stobjectdraw_canvas2469.confidential = true;
                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match", [1], var_canvas__39__)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("initial value of var 'canvas' is not of type DrawingCanvas"));
                                                          obj2364.mutable = true;
                                                          setLineNumber(1405);    // compilenode identifier
                                                          obj2364.data["theColor"] = var_black;
                                                          var reader_stobjectdraw_theColor2470 = function() {
                                                            return this.data["theColor"];
                                                          };
                                                          obj2364.methods["theColor"] = reader_stobjectdraw_theColor2470;
                                                          obj2364.data["theColor"] = var_black;
                                                          var writer_stobjectdraw_theColor2470 = function(argcv, o) {
                                                            this.data["theColor"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj2364.methods["theColor:="] = writer_stobjectdraw_theColor2470;
                                                          reader_stobjectdraw_theColor2470.confidential = true;
                                                          writer_stobjectdraw_theColor2470.confidential = true;
                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_black)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("initial value of var 'theColor' is not of type Color"));
                                                          obj2364.mutable = true;
                                                          setLineNumber(1414);    // compilenode identifier
                                                          obj2364.data["theFrameColor"] = var_black;
                                                          var reader_stobjectdraw_theFrameColor2471 = function() {
                                                            return this.data["theFrameColor"];
                                                          };
                                                          obj2364.methods["theFrameColor"] = reader_stobjectdraw_theFrameColor2471;
                                                          obj2364.data["theFrameColor"] = var_black;
                                                          var writer_stobjectdraw_theFrameColor2471 = function(argcv, o) {
                                                            this.data["theFrameColor"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj2364.methods["theFrameColor:="] = writer_stobjectdraw_theFrameColor2471;
                                                          reader_stobjectdraw_theFrameColor2471.confidential = true;
                                                          writer_stobjectdraw_theFrameColor2471.confidential = true;
                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_black)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("initial value of var 'theFrameColor' is not of type Color"));
                                                          obj2364.mutable = true;
                                                          setLineNumber(1423);    // compilenode identifier
                                                          obj2364.data["isVisible"] = GraceTrue;
                                                          var reader_stobjectdraw_isVisible2472 = function() {
                                                            return this.data["isVisible"];
                                                          };
                                                          obj2364.methods["isVisible"] = reader_stobjectdraw_isVisible2472;
                                                          obj2364.data["isVisible"] = GraceTrue;
                                                          var writer_stobjectdraw_isVisible2472 = function(argcv, o) {
                                                            this.data["isVisible"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj2364.methods["isVisible:="] = writer_stobjectdraw_isVisible2472;
                                                          writer_stobjectdraw_isVisible2472.confidential = true;
                                                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceTrue)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("initial value of var 'isVisible' is not of type Boolean"));
                                                          obj2364.mutable = true;
                                                          superDepth = origSuperDepth;
                                                        };
                                                        obj_init_2364.apply(obj2364, []);
                                                        setLineNumber(1379);    // return value
                                                        if (!Grace_isTrue(callmethod(var_Graphic, "match", [1], obj2364)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method drawableAt(1)on(1) does not have " + 
                                                                    callmethod(var_Graphic, "asString", [0])._value + "."));
                                                        return obj2364;
                                                      };
                                                      func2362.paramTypes = [];
                                                      func2362.paramTypes.push([]);
                                                      func2362.paramTypes.push([]);
                                                      func2362.paramCounts = [1, 1];
                                                      this.methods["drawableAt()on"] = func2362;
                                                      func2362.definitionLine = 1379;
                                                      func2362.definitionModule = "stobjectdraw";
                                                        var func2473 = function(argcv) {    // method drawableAt(1     )on(1     )()object
                                                          var curarg = 1;
                                                          var var_location__39__ = arguments[curarg];
                                                          curarg++;
                                                          var var_canvas__39__ = arguments[curarg];
                                                          curarg++;
                                                          var inheritingObject = arguments[curarg++];
                                                          // Start argument processing
                                                          curarg = 1;
                                                          onSelf = true;
                                                          var call2474 = callmethodChecked(this, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2474, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in drawableAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                      callmethod(call2474, "asString", [0])._value + "."));
                                                          curarg++;
                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in on (arg list 2), which corresponds to parameter canvas', does not have " + 
                                                                      callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument processing
                                                          setModuleName("stobjectdraw");
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var obj2475 = Grace_allocObject(GraceObject, "drawableAt()on");
                                                          obj2475.definitionModule = "stobjectdraw";
                                                          obj2475.definitionLine = 1379;
                                                          var inho2475 = inheritingObject;
                                                          while (inho2475.superobj) inho2475 = inho2475.superobj;
                                                          inho2475.superobj = obj2475;
                                                          obj2475.data = inheritingObject.data;
                                                          if (inheritingObject.hasOwnProperty('_value'))
                                                            obj2475._value = inheritingObject._value;
                                                          obj2475.outer = this;
                                                          var reader_stobjectdraw_outer2476 = function() {
                                                            return this.outer;
                                                          };
                                                          obj2475.methods["outer"] = reader_stobjectdraw_outer2476;
                                                          var obj_init_2475 = function() {
                                                            var origSuperDepth = superDepth;
                                                            superDepth = obj2475;
                                                            var func2477 = function(argcv) {    // method x
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for x"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1387);    // compilenode call
                                                              onSelf = true;
                                                              var call2478 = callmethodChecked(this, "location", [0]);
                                                              var call2479 = callmethodChecked(call2478, "x", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2479)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method x does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              return call2479;
                                                            };
                                                            func2477.paramCounts = [0];
                                                            obj2475.methods["x"] = func2477;
                                                            func2477.definitionLine = 1386;
                                                            func2477.definitionModule = "stobjectdraw";
                                                            var func2480 = function(argcv) {    // method y
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for y"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1392);    // compilenode call
                                                              onSelf = true;
                                                              var call2481 = callmethodChecked(this, "location", [0]);
                                                              var call2482 = callmethodChecked(call2481, "y", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2482)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method y does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              return call2482;
                                                            };
                                                            func2480.paramCounts = [0];
                                                            obj2475.methods["y"] = func2480;
                                                            func2480.definitionLine = 1391;
                                                            func2480.definitionModule = "stobjectdraw";
                                                            var func2483 = function(argcv) {    // method ==(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_other = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1398);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2484 = callmethodChecked(this, "isMe", [1], var_other);
                                                              return call2484;
                                                            };
                                                            func2483.paramCounts = [1];
                                                            obj2475.methods["=="] = func2483;
                                                            func2483.definitionLine = 1395;
                                                            func2483.definitionModule = "stobjectdraw";
                                                            var func2485 = function(argcv) {    // method color
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for color"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1407);    // compilenode call
                                                              onSelf = true;
                                                              var call2486 = callmethodChecked(this, "theColor", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Color, "match", [1], call2486)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method color does not have " + 
                                                                          callmethod(var_Color, "asString", [0])._value + "."));
                                                              return call2486;
                                                            };
                                                            func2485.paramCounts = [0];
                                                            obj2475.methods["color"] = func2485;
                                                            func2485.definitionLine = 1407;
                                                            func2485.definitionModule = "stobjectdraw";
                                                            var func2487 = function(argcv) {    // method color:=(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_newColor = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for color:=(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1409);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in color:= (arg list 1), which corresponds to parameter newColor, does not have " + 
                                                                          callmethod(var_Color, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1410);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2488 = callmethodChecked(this, "theColor:=", [1], var_newColor);
                                                              setLineNumber(1411);    // compilenode call
                                                              onSelf = true;
                                                              var call2489 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2489)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method color:=(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2489;
                                                            };
                                                            func2487.paramTypes = [];
                                                            func2487.paramTypes.push([]);
                                                            func2487.paramCounts = [1];
                                                            obj2475.methods["color:="] = func2487;
                                                            func2487.definitionLine = 1409;
                                                            func2487.definitionModule = "stobjectdraw";
                                                            var func2490 = function(argcv) {    // method frameColor
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for frameColor"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1416);    // compilenode call
                                                              onSelf = true;
                                                              var call2491 = callmethodChecked(this, "theFrameColor", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Color, "match", [1], call2491)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method frameColor does not have " + 
                                                                          callmethod(var_Color, "asString", [0])._value + "."));
                                                              return call2491;
                                                            };
                                                            func2490.paramCounts = [0];
                                                            obj2475.methods["frameColor"] = func2490;
                                                            func2490.definitionLine = 1416;
                                                            func2490.definitionModule = "stobjectdraw";
                                                            var func2492 = function(argcv) {    // method frameColor:=(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_newfColor = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for frameColor:=(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1417);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in frameColor:= (arg list 1), which corresponds to parameter newfColor, does not have " + 
                                                                          callmethod(var_Color, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1418);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2493 = callmethodChecked(this, "theFrameColor:=", [1], var_newfColor);
                                                              setLineNumber(1419);    // compilenode call
                                                              onSelf = true;
                                                              var call2494 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2494)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method frameColor:=(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2494;
                                                            };
                                                            func2492.paramTypes = [];
                                                            func2492.paramTypes.push([]);
                                                            func2492.paramCounts = [1];
                                                            obj2475.methods["frameColor:="] = func2492;
                                                            func2492.definitionLine = 1417;
                                                            func2492.definitionModule = "stobjectdraw";
                                                            var func2495 = function(argcv) {    // method visible:=(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_b = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for visible:=(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1426);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in visible:= (arg list 1), which corresponds to parameter b, does not have " + 
                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1427);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2496 = callmethodChecked(this, "isVisible:=", [1], var_b);
                                                              setLineNumber(1428);    // compilenode call
                                                              onSelf = true;
                                                              var call2497 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2497)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method visible:=(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2497;
                                                            };
                                                            func2495.paramTypes = [];
                                                            func2495.paramTypes.push([type_Boolean, "b"]);
                                                            func2495.paramCounts = [1];
                                                            obj2475.methods["visible:="] = func2495;
                                                            func2495.definitionLine = 1426;
                                                            func2495.definitionModule = "stobjectdraw";
                                                            var func2498 = function(argcv) {    // method addToCanvas(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_c = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for addToCanvas(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1432);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in addToCanvas (arg list 1), which corresponds to parameter c, does not have " + 
                                                                          callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1433);    // compilenode call
                                                              onSelf = true;
                                                              var call2499 = callmethodChecked(this, "removeFromCanvas", [0]);
                                                              setLineNumber(1434);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2500 = callmethodChecked(this, "canvas:=", [1], var_c);
                                                              setLineNumber(1435);    // compilenode identifier
                                                              var call2501 = callmethodChecked(var_c, "add", [1], this);
                                                              setLineNumber(1436);    // compilenode call
                                                              onSelf = true;
                                                              var call2502 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2502)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method addToCanvas(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2502;
                                                            };
                                                            func2498.paramTypes = [];
                                                            func2498.paramTypes.push([]);
                                                            func2498.paramCounts = [1];
                                                            obj2475.methods["addToCanvas"] = func2498;
                                                            func2498.definitionLine = 1432;
                                                            func2498.definitionModule = "stobjectdraw";
                                                            var func2503 = function(argcv) {    // method removeFromCanvas
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for removeFromCanvas"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1441);    // compilenode call
                                                              onSelf = true;
                                                              var call2504 = callmethodChecked(this, "canvas", [0]);
                                                              var call2505 = callmethodChecked(call2504, "remove", [1], this);
                                                              setLineNumber(1442);    // compilenode call
                                                              onSelf = true;
                                                              var call2506 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2506)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method removeFromCanvas does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2506;
                                                            };
                                                            func2503.paramCounts = [0];
                                                            obj2475.methods["removeFromCanvas"] = func2503;
                                                            func2503.definitionLine = 1440;
                                                            func2503.definitionModule = "stobjectdraw";
                                                            var func2507 = function(argcv) {    // method moveTo(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_newLocn = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveTo(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1446);    // compilenode call
                                                              var call2508 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2509 = callmethodChecked(call2508, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2509, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in moveTo (arg list 1), which corresponds to parameter newLocn, does not have " + 
                                                                          callmethod(call2509, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1447);    // compilenode identifier
                                                              onSelf = true;
                                                              var call2510 = callmethodChecked(this, "location:=", [1], var_newLocn);
                                                              setLineNumber(1448);    // compilenode call
                                                              onSelf = true;
                                                              var call2511 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2511)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method moveTo(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2511;
                                                            };
                                                            func2507.paramCounts = [1];
                                                            obj2475.methods["moveTo"] = func2507;
                                                            func2507.definitionLine = 1446;
                                                            func2507.definitionModule = "stobjectdraw";
                                                            var func2512 = function(argcv) {    // method moveBy(2)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_dx = arguments[curarg];
                                                              curarg++;
                                                              var var_dy = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 2)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveBy(2)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1452);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in moveBy (arg list 1), which corresponds to parameter dx, does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              curarg++;
                                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 2 in moveBy (arg list 1), which corresponds to parameter dy, does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1453);    // compilenode identifier
                                                              var opresult2515 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                              onSelf = true;
                                                              var call2517 = callmethodChecked(this, "location", [0]);
                                                              var opresult2519 = callmethodChecked(call2517, "+", [1], opresult2515);
                                                              onSelf = true;
                                                              var call2520 = callmethodChecked(this, "location:=", [1], opresult2519);
                                                              setLineNumber(1454);    // compilenode call
                                                              onSelf = true;
                                                              var call2521 = callmethodChecked(this, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2521)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method moveBy(2) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2521;
                                                            };
                                                            func2512.paramTypes = [];
                                                            func2512.paramTypes.push([type_Number, "dx"]);
                                                            func2512.paramTypes.push([type_Number, "dy"]);
                                                            func2512.paramCounts = [2];
                                                            obj2475.methods["moveBy"] = func2512;
                                                            func2512.definitionLine = 1452;
                                                            func2512.definitionModule = "stobjectdraw";
                                                            var func2522 = function(argcv) {    // method contains(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_locn = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1458);    // compilenode call
                                                              var call2523 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2524 = callmethodChecked(call2523, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2524, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter locn, does not have " + 
                                                                          callmethod(call2524, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1459);    // compilenode string
                                                              var string2525 = new GraceString("");
                                                              var string2528 = new GraceString("contains not implemented for ");
                                                              var opresult2530 = callmethodChecked(string2528, "++", [1], this);
                                                              var opresult2532 = callmethodChecked(opresult2530, "++", [1], string2525);
                                                              var call2533 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2534 = callmethodChecked(call2533, "SubobjectResponsibility", [0]);
                                                              var call2535 = callmethodChecked(call2534, "raise", [1], opresult2532);
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2535)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method contains(1) does not have " + 
                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                              return call2535;
                                                            };
                                                            func2522.paramCounts = [1];
                                                            obj2475.methods["contains"] = func2522;
                                                            func2522.definitionLine = 1458;
                                                            func2522.definitionModule = "stobjectdraw";
                                                            var func2536 = function(argcv) {    // method overlaps(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_otherObject = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for overlaps(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1463);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Graphic2D, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in overlaps (arg list 1), which corresponds to parameter otherObject, does not have " + 
                                                                          callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1464);    // compilenode string
                                                              var string2537 = new GraceString("");
                                                              var string2540 = new GraceString("overlaps not implemented for ");
                                                              var opresult2542 = callmethodChecked(string2540, "++", [1], this);
                                                              var opresult2544 = callmethodChecked(opresult2542, "++", [1], string2537);
                                                              var call2545 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2546 = callmethodChecked(call2545, "SubobjectResponsibility", [0]);
                                                              var call2547 = callmethodChecked(call2546, "raise", [1], opresult2544);
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2547)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method overlaps(1) does not have " + 
                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                              return call2547;
                                                            };
                                                            func2536.paramTypes = [];
                                                            func2536.paramTypes.push([]);
                                                            func2536.paramCounts = [1];
                                                            obj2475.methods["overlaps"] = func2536;
                                                            func2536.definitionLine = 1463;
                                                            func2536.definitionModule = "stobjectdraw";
                                                            var func2548 = function(argcv) {    // method sendForward
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendForward"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1469);    // compilenode call
                                                              onSelf = true;
                                                              var call2549 = callmethodChecked(this, "canvas", [0]);
                                                              var call2550 = callmethodChecked(call2549, "sendForward", [1], this);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2550)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method sendForward does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2550;
                                                            };
                                                            func2548.paramCounts = [0];
                                                            obj2475.methods["sendForward"] = func2548;
                                                            func2548.definitionLine = 1468;
                                                            func2548.definitionModule = "stobjectdraw";
                                                            var func2551 = function(argcv) {    // method sendBackward
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendBackward"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1474);    // compilenode call
                                                              onSelf = true;
                                                              var call2552 = callmethodChecked(this, "canvas", [0]);
                                                              var call2553 = callmethodChecked(call2552, "sendBackward", [1], this);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2553)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method sendBackward does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2553;
                                                            };
                                                            func2551.paramCounts = [0];
                                                            obj2475.methods["sendBackward"] = func2551;
                                                            func2551.definitionLine = 1473;
                                                            func2551.definitionModule = "stobjectdraw";
                                                            var func2554 = function(argcv) {    // method sendToFront
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToFront"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1479);    // compilenode call
                                                              onSelf = true;
                                                              var call2555 = callmethodChecked(this, "canvas", [0]);
                                                              var call2556 = callmethodChecked(call2555, "sendToFront", [1], this);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2556)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method sendToFront does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2556;
                                                            };
                                                            func2554.paramCounts = [0];
                                                            obj2475.methods["sendToFront"] = func2554;
                                                            func2554.definitionLine = 1478;
                                                            func2554.definitionModule = "stobjectdraw";
                                                            var func2557 = function(argcv) {    // method sendToBack
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for sendToBack"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1484);    // compilenode call
                                                              onSelf = true;
                                                              var call2558 = callmethodChecked(this, "canvas", [0]);
                                                              var call2559 = callmethodChecked(call2558, "sendToBack", [1], this);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2559)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method sendToBack does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2559;
                                                            };
                                                            func2557.paramCounts = [0];
                                                            obj2475.methods["sendToBack"] = func2557;
                                                            func2557.definitionLine = 1483;
                                                            func2557.definitionModule = "stobjectdraw";
                                                            var func2560 = function(argcv) {    // method notifyRedraw
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for notifyRedraw"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1489);    // compilenode call
                                                              onSelf = true;
                                                              var call2561 = callmethodChecked(this, "canvas", [0]);
                                                              var call2562 = callmethodChecked(call2561, "notifyRedraw", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2562)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method notifyRedraw does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2562;
                                                            };
                                                            func2560.confidential = true;
                                                            func2560.paramCounts = [0];
                                                            obj2475.methods["notifyRedraw"] = func2560;
                                                            func2560.definitionLine = 1488;
                                                            func2560.definitionModule = "stobjectdraw";
                                                            var func2563 = function(argcv) {    // method draw(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_ctx = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1493);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                          callmethod(var_Foreign, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1494);    // compilenode string
                                                              var string2564 = new GraceString("");
                                                              var string2567 = new GraceString("draw not implemented for ");
                                                              var opresult2569 = callmethodChecked(string2567, "++", [1], this);
                                                              var opresult2571 = callmethodChecked(opresult2569, "++", [1], string2564);
                                                              var call2572 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2573 = callmethodChecked(call2572, "SubobjectResponsibility", [0]);
                                                              var call2574 = callmethodChecked(call2573, "raise", [1], opresult2571);
                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2574)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method draw(1) does not have " + 
                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                              return call2574;
                                                            };
                                                            func2563.paramTypes = [];
                                                            func2563.paramTypes.push([]);
                                                            func2563.paramCounts = [1];
                                                            obj2475.methods["draw"] = func2563;
                                                            func2563.definitionLine = 1493;
                                                            func2563.definitionModule = "stobjectdraw";
                                                            var func2575 = function(argcv) {    // method asString
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1499);    // compilenode string
                                                              var string2576 = new GraceString("Graphic object");
                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], string2576)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method asString does not have " + 
                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                              return string2576;
                                                            };
                                                            func2575.paramCounts = [0];
                                                            obj2475.methods["asString"] = func2575;
                                                            func2575.definitionLine = 1498;
                                                            func2575.definitionModule = "stobjectdraw";
                                                            setLineNumber(1383);    // compilenode identifier
                                                            obj2475.data["location"] = var_location__39__;
                                                            var reader_stobjectdraw_location2577 = function() {
                                                              return this.data["location"];
                                                            };
                                                            obj2475.methods["location"] = reader_stobjectdraw_location2577;
                                                            obj2475.data["location"] = var_location__39__;
                                                            var writer_stobjectdraw_location2577 = function(argcv, o) {
                                                              this.data["location"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2475.methods["location:="] = writer_stobjectdraw_location2577;
                                                            writer_stobjectdraw_location2577.confidential = true;
                                                            var call2578 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2579 = callmethodChecked(call2578, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2579, "match", [1], var_location__39__)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'location' is not of type self.outer.Point"));
                                                            obj2475.mutable = true;
                                                            setLineNumber(1402);    // compilenode identifier
                                                            obj2475.data["canvas"] = var_canvas__39__;
                                                            var reader_stobjectdraw_canvas2580 = function() {
                                                              return this.data["canvas"];
                                                            };
                                                            obj2475.methods["canvas"] = reader_stobjectdraw_canvas2580;
                                                            obj2475.data["canvas"] = var_canvas__39__;
                                                            var writer_stobjectdraw_canvas2580 = function(argcv, o) {
                                                              this.data["canvas"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2475.methods["canvas:="] = writer_stobjectdraw_canvas2580;
                                                            reader_stobjectdraw_canvas2580.confidential = true;
                                                            writer_stobjectdraw_canvas2580.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match", [1], var_canvas__39__)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'canvas' is not of type DrawingCanvas"));
                                                            obj2475.mutable = true;
                                                            setLineNumber(1405);    // compilenode identifier
                                                            obj2475.data["theColor"] = var_black;
                                                            var reader_stobjectdraw_theColor2581 = function() {
                                                              return this.data["theColor"];
                                                            };
                                                            obj2475.methods["theColor"] = reader_stobjectdraw_theColor2581;
                                                            obj2475.data["theColor"] = var_black;
                                                            var writer_stobjectdraw_theColor2581 = function(argcv, o) {
                                                              this.data["theColor"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2475.methods["theColor:="] = writer_stobjectdraw_theColor2581;
                                                            reader_stobjectdraw_theColor2581.confidential = true;
                                                            writer_stobjectdraw_theColor2581.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_black)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'theColor' is not of type Color"));
                                                            obj2475.mutable = true;
                                                            setLineNumber(1414);    // compilenode identifier
                                                            obj2475.data["theFrameColor"] = var_black;
                                                            var reader_stobjectdraw_theFrameColor2582 = function() {
                                                              return this.data["theFrameColor"];
                                                            };
                                                            obj2475.methods["theFrameColor"] = reader_stobjectdraw_theFrameColor2582;
                                                            obj2475.data["theFrameColor"] = var_black;
                                                            var writer_stobjectdraw_theFrameColor2582 = function(argcv, o) {
                                                              this.data["theFrameColor"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2475.methods["theFrameColor:="] = writer_stobjectdraw_theFrameColor2582;
                                                            reader_stobjectdraw_theFrameColor2582.confidential = true;
                                                            writer_stobjectdraw_theFrameColor2582.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_black)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'theFrameColor' is not of type Color"));
                                                            obj2475.mutable = true;
                                                            setLineNumber(1423);    // compilenode identifier
                                                            obj2475.data["isVisible"] = GraceTrue;
                                                            var reader_stobjectdraw_isVisible2583 = function() {
                                                              return this.data["isVisible"];
                                                            };
                                                            obj2475.methods["isVisible"] = reader_stobjectdraw_isVisible2583;
                                                            obj2475.data["isVisible"] = GraceTrue;
                                                            var writer_stobjectdraw_isVisible2583 = function(argcv, o) {
                                                              this.data["isVisible"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2475.methods["isVisible:="] = writer_stobjectdraw_isVisible2583;
                                                            writer_stobjectdraw_isVisible2583.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], GraceTrue)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'isVisible' is not of type Boolean"));
                                                            obj2475.mutable = true;
                                                            superDepth = origSuperDepth;
                                                          };
                                                          obj_init_2475.apply(inheritingObject, []);
                                                          return obj2475;
                                                          };
                                                          func2473.paramTypes = [];
                                                          func2473.paramTypes.push([]);
                                                          func2473.paramTypes.push([]);
                                                          this.methods["drawableAt()on()object"] = func2473;
                                                        setLineNumber(1504);    // compilenode method
                                                        var func2584 = function(argcv) {    // method drawable2DAt(1)size(1)on(1)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_location__39__ = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[0] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for drawable2DAt (arg list 1) of drawable2DAt(1)size(1)on(1)"));
                                                          var var_dimension__39__ = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[1] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of drawable2DAt(1)size(1)on(1)"));
                                                          var var_canvas__39__ = arguments[curarg];
                                                          curarg++;
                                                          if (argcv[2] !== 1)
                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of drawable2DAt(1)size(1)on(1)"));
                                                          // Start argument checking
                                                          curarg = 1;
                                                          onSelf = true;
                                                          var call2585 = callmethodChecked(this, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2585, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in drawable2DAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                      callmethod(call2585, "asString", [0])._value + "."));
                                                          curarg++;
                                                          setLineNumber(1505);    // compilenode call
                                                          onSelf = true;
                                                          var call2586 = callmethodChecked(this, "Point", [0]);
                                                          if (!Grace_isTrue(callmethod(call2586, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimension', does not have " + 
                                                                      callmethod(call2586, "asString", [0])._value + "."));
                                                          curarg++;
                                                          setLineNumber(1506);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                      callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("stobjectdraw");
                                                          setLineNumber(1504);    // compilenode object
                                                          var obj2587 = Grace_allocObject(null, "stobjectdraw.drawable2DAt()size()on");
                                                          obj2587.definitionModule = "stobjectdraw";
                                                          obj2587.definitionLine = 1504;
                                                          obj2587.outer = this;
                                                          var reader_stobjectdraw_outer2588 = function() {
                                                            return this.outer;
                                                          };
                                                          obj2587.methods["outer"] = reader_stobjectdraw_outer2588;
                                                          var obj_init_2587 = function() {
                                                            var origSuperDepth = superDepth;
                                                            superDepth = obj2587;
                                                            var func2589 = function(argcv) {    // method width
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1513);    // compilenode call
                                                              onSelf = true;
                                                              var call2590 = callmethodChecked(this, "theWidth", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2590)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method width does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              return call2590;
                                                            };
                                                            func2589.paramCounts = [0];
                                                            obj2587.methods["width"] = func2589;
                                                            func2589.definitionLine = 1513;
                                                            func2589.definitionModule = "stobjectdraw";
                                                            var func2591 = function(argcv) {    // method height
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1517);    // compilenode call
                                                              onSelf = true;
                                                              var call2592 = callmethodChecked(this, "theHeight", [0]);
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2592)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method height does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              return call2592;
                                                            };
                                                            func2591.paramCounts = [0];
                                                            obj2587.methods["height"] = func2591;
                                                            func2591.definitionLine = 1517;
                                                            func2591.definitionModule = "stobjectdraw";
                                                            var func2593 = function(argcv) {    // method size
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1519);    // compilenode call
                                                              onSelf = true;
                                                              var call2594 = callmethodChecked(this, "theHeight", [0]);
                                                              onSelf = true;
                                                              var call2596 = callmethodChecked(this, "theWidth", [0]);
                                                              var opresult2598 = callmethodChecked(call2596, "@", [1], call2594);
                                                              var call2599 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2600 = callmethodChecked(call2599, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2600, "match", [1], opresult2598)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method size does not have " + 
                                                                          callmethod(call2600, "asString", [0])._value + "."));
                                                              return opresult2598;
                                                            };
                                                            func2593.paramCounts = [0];
                                                            obj2587.methods["size"] = func2593;
                                                            func2593.definitionLine = 1519;
                                                            func2593.definitionModule = "stobjectdraw";
                                                            var func2601 = function(argcv) {    // method contains(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_locn = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1523);    // compilenode call
                                                              var call2602 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2603 = callmethodChecked(call2602, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2603, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter locn, does not have " + 
                                                                          callmethod(call2603, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1525);    // compilenode call
                                                              onSelf = true;
                                                              var call2604 = callmethodChecked(this, "height", [0]);
                                                              onSelf = true;
                                                              var call2606 = callmethodChecked(this, "y", [0]);
                                                              var opresult2608 = callmethodChecked(call2606, "+", [1], call2604);
                                                              var call2610 = callmethodChecked(var_locn, "y", [0]);
                                                              var opresult2612 = callmethodChecked(call2610, "\u2264", [1], opresult2608);
                                                              var call2614 = callmethodChecked(var_locn, "y", [0]);
                                                              onSelf = true;
                                                              var call2616 = callmethodChecked(this, "y", [0]);
                                                              var opresult2618 = callmethodChecked(call2616, "\u2264", [1], call2614);
                                                              setLineNumber(1524);    // compilenode call
                                                              onSelf = true;
                                                              var call2620 = callmethodChecked(this, "width", [0]);
                                                              onSelf = true;
                                                              var call2622 = callmethodChecked(this, "x", [0]);
                                                              var opresult2624 = callmethodChecked(call2622, "+", [1], call2620);
                                                              var call2626 = callmethodChecked(var_locn, "x", [0]);
                                                              var opresult2628 = callmethodChecked(call2626, "\u2264", [1], opresult2624);
                                                              var call2630 = callmethodChecked(var_locn, "x", [0]);
                                                              onSelf = true;
                                                              var call2632 = callmethodChecked(this, "x", [0]);
                                                              var opresult2634 = callmethodChecked(call2632, "\u2264", [1], call2630);
                                                              var opresult2636 = callmethodChecked(opresult2634, "&&", [1], opresult2628);
                                                              var opresult2638 = callmethodChecked(opresult2636, "&&", [1], opresult2618);
                                                              var opresult2640 = callmethodChecked(opresult2638, "&&", [1], opresult2612);
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult2640)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method contains(1) does not have " + 
                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                              return opresult2640;
                                                            };
                                                            func2601.paramCounts = [1];
                                                            obj2587.methods["contains"] = func2601;
                                                            func2601.definitionLine = 1523;
                                                            func2601.definitionModule = "stobjectdraw";
                                                            var func2641 = function(argcv) {    // method overlaps(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_other = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for overlaps(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1529);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Graphic2D, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in overlaps (arg list 1), which corresponds to parameter other, does not have " + 
                                                                          callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1530);    // compilenode identifier
                                                              var call2642 = callmethodChecked(var_other, "x", [0]);
                                                              var var_itemleft = call2642;
                                                              setLineNumber(1531);    // compilenode identifier
                                                              var call2643 = callmethodChecked(var_other, "width", [0]);
                                                              var call2645 = callmethodChecked(var_other, "x", [0]);
                                                              var opresult2647 = callmethodChecked(call2645, "+", [1], call2643);
                                                              var var_itemright = opresult2647;
                                                              setLineNumber(1532);    // compilenode identifier
                                                              var call2648 = callmethodChecked(var_other, "y", [0]);
                                                              var var_itemtop = call2648;
                                                              setLineNumber(1533);    // compilenode identifier
                                                              var call2649 = callmethodChecked(var_other, "height", [0]);
                                                              var call2651 = callmethodChecked(var_other, "y", [0]);
                                                              var opresult2653 = callmethodChecked(call2651, "+", [1], call2649);
                                                              var var_itembottom = opresult2653;
                                                              setLineNumber(1535);    // compilenode call
                                                              onSelf = true;
                                                              var call2654 = callmethodChecked(this, "y", [0]);
                                                              var opresult2657 = callmethodChecked(var_itembottom, "<", [1], call2654);
                                                              onSelf = true;
                                                              var call2660 = callmethodChecked(this, "height", [0]);
                                                              onSelf = true;
                                                              var call2662 = callmethodChecked(this, "y", [0]);
                                                              var opresult2664 = callmethodChecked(call2662, "+", [1], call2660);
                                                              var opresult2666 = callmethodChecked(opresult2664, "<", [1], var_itemtop);
                                                              setLineNumber(1534);    // compilenode call
                                                              onSelf = true;
                                                              var call2668 = callmethodChecked(this, "x", [0]);
                                                              var opresult2671 = callmethodChecked(var_itemright, "<", [1], call2668);
                                                              onSelf = true;
                                                              var call2674 = callmethodChecked(this, "width", [0]);
                                                              onSelf = true;
                                                              var call2676 = callmethodChecked(this, "x", [0]);
                                                              var opresult2678 = callmethodChecked(call2676, "+", [1], call2674);
                                                              var opresult2680 = callmethodChecked(opresult2678, "<", [1], var_itemleft);
                                                              var opresult2682 = callmethodChecked(opresult2680, "||", [1], opresult2671);
                                                              var opresult2684 = callmethodChecked(opresult2682, "||", [1], opresult2666);
                                                              var opresult2686 = callmethodChecked(opresult2684, "||", [1], opresult2657);
                                                              var var_disjoint = opresult2686;
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], var_disjoint)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("value of def 'disjoint' is not of type Boolean"));
                                                              setLineNumber(1536);    // compilenode identifier
                                                              var call2687 = callmethodChecked(var_disjoint, "prefix!", [0]);
                                                              setLineNumber(1537);    // return value
                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2687)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method overlaps(1) does not have " + 
                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                              return call2687;
                                                            };
                                                            func2641.paramTypes = [];
                                                            func2641.paramTypes.push([]);
                                                            func2641.paramCounts = [1];
                                                            obj2587.methods["overlaps"] = func2641;
                                                            func2641.definitionLine = 1529;
                                                            func2641.definitionModule = "stobjectdraw";
                                                            var func2688 = function(argcv) {    // method asString
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              if (argcv[0] !== 0)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1542);    // compilenode string
                                                              var string2689 = new GraceString("");
                                                              onSelf = true;
                                                              var call2691 = callmethodChecked(this, "color", [0]);
                                                              var string2693 = new GraceString(", and color ");
                                                              onSelf = true;
                                                              var call2695 = callmethodChecked(this, "width", [0]);
                                                              var string2697 = new GraceString(", width ");
                                                              onSelf = true;
                                                              var call2699 = callmethodChecked(this, "height", [0]);
                                                              var string2701 = new GraceString("with height ");
                                                              var opresult2703 = callmethodChecked(string2701, "++", [1], call2699);
                                                              var opresult2705 = callmethodChecked(opresult2703, "++", [1], string2697);
                                                              var opresult2707 = callmethodChecked(opresult2705, "++", [1], call2695);
                                                              var opresult2709 = callmethodChecked(opresult2707, "++", [1], string2693);
                                                              var opresult2711 = callmethodChecked(opresult2709, "++", [1], call2691);
                                                              var opresult2713 = callmethodChecked(opresult2711, "++", [1], string2689);
                                                              setLineNumber(1541);    // compilenode string
                                                              var string2715 = new GraceString(") ");
                                                              onSelf = true;
                                                              var call2717 = callmethodChecked(this, "y", [0]);
                                                              var string2719 = new GraceString(",");
                                                              onSelf = true;
                                                              var call2721 = callmethodChecked(this, "x", [0]);
                                                              var string2723 = new GraceString("drawable2D object at (");
                                                              var opresult2725 = callmethodChecked(string2723, "++", [1], call2721);
                                                              var opresult2727 = callmethodChecked(opresult2725, "++", [1], string2719);
                                                              var opresult2729 = callmethodChecked(opresult2727, "++", [1], call2717);
                                                              var opresult2731 = callmethodChecked(opresult2729, "++", [1], string2715);
                                                              var opresult2733 = callmethodChecked(opresult2731, "++", [1], opresult2713);
                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2733)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method asString does not have " + 
                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                              return opresult2733;
                                                            };
                                                            func2688.paramCounts = [0];
                                                            obj2587.methods["asString"] = func2688;
                                                            func2688.definitionLine = 1540;
                                                            func2688.definitionModule = "stobjectdraw";
                                                            setLineNumber(1509);    // compilenode call
                                                            var call2734 = callmethodChecked(superDepth, "outer", [0]);
                                                            onOuter = true;
                                                            onSelf = true;
                                                            var call2735 = callmethodChecked(call2734, "drawableAt()on()object", [1, 1, 1], var_location__39__, var_canvas__39__, this);
                                                            obj2587.superobj = call2735;
                                                            if (call2735.data) obj2587.data = call2735.data;
                                                            if (call2735.hasOwnProperty('_value'))
                                                                obj2587._value = call2735._value;
                                                            setLineNumber(1510);    // compilenode identifier
                                                            var call2736 = callmethodChecked(var_dimension__39__, "x", [0]);
                                                            obj2587.data["theWidth"] = call2736;
                                                            var reader_stobjectdraw_theWidth2737 = function() {
                                                              return this.data["theWidth"];
                                                            };
                                                            obj2587.methods["theWidth"] = reader_stobjectdraw_theWidth2737;
                                                            obj2587.data["theWidth"] = call2736;
                                                            var writer_stobjectdraw_theWidth2737 = function(argcv, o) {
                                                              this.data["theWidth"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2587.methods["theWidth:="] = writer_stobjectdraw_theWidth2737;
                                                            reader_stobjectdraw_theWidth2737.confidential = true;
                                                            writer_stobjectdraw_theWidth2737.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2736)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'theWidth' is not of type Number"));
                                                            obj2587.mutable = true;
                                                            setLineNumber(1514);    // compilenode identifier
                                                            var call2738 = callmethodChecked(var_dimension__39__, "y", [0]);
                                                            obj2587.data["theHeight"] = call2738;
                                                            var reader_stobjectdraw_theHeight2739 = function() {
                                                              return this.data["theHeight"];
                                                            };
                                                            obj2587.methods["theHeight"] = reader_stobjectdraw_theHeight2739;
                                                            obj2587.data["theHeight"] = call2738;
                                                            var writer_stobjectdraw_theHeight2739 = function(argcv, o) {
                                                              this.data["theHeight"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj2587.methods["theHeight:="] = writer_stobjectdraw_theHeight2739;
                                                            reader_stobjectdraw_theHeight2739.confidential = true;
                                                            writer_stobjectdraw_theHeight2739.confidential = true;
                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2738)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("initial value of var 'theHeight' is not of type Number"));
                                                            obj2587.mutable = true;
                                                            superDepth = origSuperDepth;
                                                          };
                                                          obj_init_2587.apply(obj2587, []);
                                                          setLineNumber(1504);    // return value
                                                          if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj2587)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method drawable2DAt(1)size(1)on(1) does not have " + 
                                                                      callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                          return obj2587;
                                                        };
                                                        func2584.paramTypes = [];
                                                        func2584.paramTypes.push([]);
                                                        func2584.paramTypes.push([]);
                                                        func2584.paramTypes.push([]);
                                                        func2584.paramCounts = [1, 1, 1];
                                                        this.methods["drawable2DAt()size()on"] = func2584;
                                                        func2584.definitionLine = 1504;
                                                        func2584.definitionModule = "stobjectdraw";
                                                          var func2740 = function(argcv) {    // method drawable2DAt(1     )size(1     )on(1     )()object
                                                            var curarg = 1;
                                                            var var_location__39__ = arguments[curarg];
                                                            curarg++;
                                                            var var_dimension__39__ = arguments[curarg];
                                                            curarg++;
                                                            var var_canvas__39__ = arguments[curarg];
                                                            curarg++;
                                                            var inheritingObject = arguments[curarg++];
                                                            // Start argument processing
                                                            curarg = 1;
                                                            onSelf = true;
                                                            var call2741 = callmethodChecked(this, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2741, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in drawable2DAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                        callmethod(call2741, "asString", [0])._value + "."));
                                                            curarg++;
                                                            setLineNumber(1505);    // compilenode call
                                                            onSelf = true;
                                                            var call2742 = callmethodChecked(this, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2742, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimension', does not have " + 
                                                                        callmethod(call2742, "asString", [0])._value + "."));
                                                            curarg++;
                                                            setLineNumber(1506);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                        callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument processing
                                                            setModuleName("stobjectdraw");
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var obj2743 = Grace_allocObject(null, "drawable2DAt()size()on");
                                                            obj2743.definitionModule = "stobjectdraw";
                                                            obj2743.definitionLine = 1504;
                                                            var inho2743 = inheritingObject;
                                                            while (inho2743.superobj) inho2743 = inho2743.superobj;
                                                            inho2743.superobj = obj2743;
                                                            obj2743.data = inheritingObject.data;
                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                              obj2743._value = inheritingObject._value;
                                                            obj2743.outer = this;
                                                            var reader_stobjectdraw_outer2744 = function() {
                                                              return this.outer;
                                                            };
                                                            obj2743.methods["outer"] = reader_stobjectdraw_outer2744;
                                                            var obj_init_2743 = function() {
                                                              var origSuperDepth = superDepth;
                                                              superDepth = obj2743;
                                                              var func2745 = function(argcv) {    // method width
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1513);    // compilenode call
                                                                onSelf = true;
                                                                var call2746 = callmethodChecked(this, "theWidth", [0]);
                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2746)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method width does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                return call2746;
                                                              };
                                                              func2745.paramCounts = [0];
                                                              obj2743.methods["width"] = func2745;
                                                              func2745.definitionLine = 1513;
                                                              func2745.definitionModule = "stobjectdraw";
                                                              var func2747 = function(argcv) {    // method height
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height"));
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1517);    // compilenode call
                                                                onSelf = true;
                                                                var call2748 = callmethodChecked(this, "theHeight", [0]);
                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2748)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method height does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                return call2748;
                                                              };
                                                              func2747.paramCounts = [0];
                                                              obj2743.methods["height"] = func2747;
                                                              func2747.definitionLine = 1517;
                                                              func2747.definitionModule = "stobjectdraw";
                                                              var func2749 = function(argcv) {    // method size
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size"));
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1519);    // compilenode call
                                                                onSelf = true;
                                                                var call2750 = callmethodChecked(this, "theHeight", [0]);
                                                                onSelf = true;
                                                                var call2752 = callmethodChecked(this, "theWidth", [0]);
                                                                var opresult2754 = callmethodChecked(call2752, "@", [1], call2750);
                                                                var call2755 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call2756 = callmethodChecked(call2755, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call2756, "match", [1], opresult2754)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method size does not have " + 
                                                                            callmethod(call2756, "asString", [0])._value + "."));
                                                                return opresult2754;
                                                              };
                                                              func2749.paramCounts = [0];
                                                              obj2743.methods["size"] = func2749;
                                                              func2749.definitionLine = 1519;
                                                              func2749.definitionModule = "stobjectdraw";
                                                              var func2757 = function(argcv) {    // method contains(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_locn = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1523);    // compilenode call
                                                                var call2758 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call2759 = callmethodChecked(call2758, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call2759, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter locn, does not have " + 
                                                                            callmethod(call2759, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1525);    // compilenode call
                                                                onSelf = true;
                                                                var call2760 = callmethodChecked(this, "height", [0]);
                                                                onSelf = true;
                                                                var call2762 = callmethodChecked(this, "y", [0]);
                                                                var opresult2764 = callmethodChecked(call2762, "+", [1], call2760);
                                                                var call2766 = callmethodChecked(var_locn, "y", [0]);
                                                                var opresult2768 = callmethodChecked(call2766, "\u2264", [1], opresult2764);
                                                                var call2770 = callmethodChecked(var_locn, "y", [0]);
                                                                onSelf = true;
                                                                var call2772 = callmethodChecked(this, "y", [0]);
                                                                var opresult2774 = callmethodChecked(call2772, "\u2264", [1], call2770);
                                                                setLineNumber(1524);    // compilenode call
                                                                onSelf = true;
                                                                var call2776 = callmethodChecked(this, "width", [0]);
                                                                onSelf = true;
                                                                var call2778 = callmethodChecked(this, "x", [0]);
                                                                var opresult2780 = callmethodChecked(call2778, "+", [1], call2776);
                                                                var call2782 = callmethodChecked(var_locn, "x", [0]);
                                                                var opresult2784 = callmethodChecked(call2782, "\u2264", [1], opresult2780);
                                                                var call2786 = callmethodChecked(var_locn, "x", [0]);
                                                                onSelf = true;
                                                                var call2788 = callmethodChecked(this, "x", [0]);
                                                                var opresult2790 = callmethodChecked(call2788, "\u2264", [1], call2786);
                                                                var opresult2792 = callmethodChecked(opresult2790, "&&", [1], opresult2784);
                                                                var opresult2794 = callmethodChecked(opresult2792, "&&", [1], opresult2774);
                                                                var opresult2796 = callmethodChecked(opresult2794, "&&", [1], opresult2768);
                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult2796)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method contains(1) does not have " + 
                                                                            callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                return opresult2796;
                                                              };
                                                              func2757.paramCounts = [1];
                                                              obj2743.methods["contains"] = func2757;
                                                              func2757.definitionLine = 1523;
                                                              func2757.definitionModule = "stobjectdraw";
                                                              var func2797 = function(argcv) {    // method overlaps(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_other = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for overlaps(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1529);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_Graphic2D, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in overlaps (arg list 1), which corresponds to parameter other, does not have " + 
                                                                            callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1530);    // compilenode identifier
                                                                var call2798 = callmethodChecked(var_other, "x", [0]);
                                                                var var_itemleft = call2798;
                                                                setLineNumber(1531);    // compilenode identifier
                                                                var call2799 = callmethodChecked(var_other, "width", [0]);
                                                                var call2801 = callmethodChecked(var_other, "x", [0]);
                                                                var opresult2803 = callmethodChecked(call2801, "+", [1], call2799);
                                                                var var_itemright = opresult2803;
                                                                setLineNumber(1532);    // compilenode identifier
                                                                var call2804 = callmethodChecked(var_other, "y", [0]);
                                                                var var_itemtop = call2804;
                                                                setLineNumber(1533);    // compilenode identifier
                                                                var call2805 = callmethodChecked(var_other, "height", [0]);
                                                                var call2807 = callmethodChecked(var_other, "y", [0]);
                                                                var opresult2809 = callmethodChecked(call2807, "+", [1], call2805);
                                                                var var_itembottom = opresult2809;
                                                                setLineNumber(1535);    // compilenode call
                                                                onSelf = true;
                                                                var call2810 = callmethodChecked(this, "y", [0]);
                                                                var opresult2813 = callmethodChecked(var_itembottom, "<", [1], call2810);
                                                                onSelf = true;
                                                                var call2816 = callmethodChecked(this, "height", [0]);
                                                                onSelf = true;
                                                                var call2818 = callmethodChecked(this, "y", [0]);
                                                                var opresult2820 = callmethodChecked(call2818, "+", [1], call2816);
                                                                var opresult2822 = callmethodChecked(opresult2820, "<", [1], var_itemtop);
                                                                setLineNumber(1534);    // compilenode call
                                                                onSelf = true;
                                                                var call2824 = callmethodChecked(this, "x", [0]);
                                                                var opresult2827 = callmethodChecked(var_itemright, "<", [1], call2824);
                                                                onSelf = true;
                                                                var call2830 = callmethodChecked(this, "width", [0]);
                                                                onSelf = true;
                                                                var call2832 = callmethodChecked(this, "x", [0]);
                                                                var opresult2834 = callmethodChecked(call2832, "+", [1], call2830);
                                                                var opresult2836 = callmethodChecked(opresult2834, "<", [1], var_itemleft);
                                                                var opresult2838 = callmethodChecked(opresult2836, "||", [1], opresult2827);
                                                                var opresult2840 = callmethodChecked(opresult2838, "||", [1], opresult2822);
                                                                var opresult2842 = callmethodChecked(opresult2840, "||", [1], opresult2813);
                                                                var var_disjoint = opresult2842;
                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], var_disjoint)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("value of def 'disjoint' is not of type Boolean"));
                                                                setLineNumber(1536);    // compilenode identifier
                                                                var call2843 = callmethodChecked(var_disjoint, "prefix!", [0]);
                                                                setLineNumber(1537);    // return value
                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call2843)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method overlaps(1) does not have " + 
                                                                            callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                return call2843;
                                                              };
                                                              func2797.paramTypes = [];
                                                              func2797.paramTypes.push([]);
                                                              func2797.paramCounts = [1];
                                                              obj2743.methods["overlaps"] = func2797;
                                                              func2797.definitionLine = 1529;
                                                              func2797.definitionModule = "stobjectdraw";
                                                              var func2844 = function(argcv) {    // method asString
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1542);    // compilenode string
                                                                var string2845 = new GraceString("");
                                                                onSelf = true;
                                                                var call2847 = callmethodChecked(this, "color", [0]);
                                                                var string2849 = new GraceString(", and color ");
                                                                onSelf = true;
                                                                var call2851 = callmethodChecked(this, "width", [0]);
                                                                var string2853 = new GraceString(", width ");
                                                                onSelf = true;
                                                                var call2855 = callmethodChecked(this, "height", [0]);
                                                                var string2857 = new GraceString("with height ");
                                                                var opresult2859 = callmethodChecked(string2857, "++", [1], call2855);
                                                                var opresult2861 = callmethodChecked(opresult2859, "++", [1], string2853);
                                                                var opresult2863 = callmethodChecked(opresult2861, "++", [1], call2851);
                                                                var opresult2865 = callmethodChecked(opresult2863, "++", [1], string2849);
                                                                var opresult2867 = callmethodChecked(opresult2865, "++", [1], call2847);
                                                                var opresult2869 = callmethodChecked(opresult2867, "++", [1], string2845);
                                                                setLineNumber(1541);    // compilenode string
                                                                var string2871 = new GraceString(") ");
                                                                onSelf = true;
                                                                var call2873 = callmethodChecked(this, "y", [0]);
                                                                var string2875 = new GraceString(",");
                                                                onSelf = true;
                                                                var call2877 = callmethodChecked(this, "x", [0]);
                                                                var string2879 = new GraceString("drawable2D object at (");
                                                                var opresult2881 = callmethodChecked(string2879, "++", [1], call2877);
                                                                var opresult2883 = callmethodChecked(opresult2881, "++", [1], string2875);
                                                                var opresult2885 = callmethodChecked(opresult2883, "++", [1], call2873);
                                                                var opresult2887 = callmethodChecked(opresult2885, "++", [1], string2871);
                                                                var opresult2889 = callmethodChecked(opresult2887, "++", [1], opresult2869);
                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2889)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method asString does not have " + 
                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                return opresult2889;
                                                              };
                                                              func2844.paramCounts = [0];
                                                              obj2743.methods["asString"] = func2844;
                                                              func2844.definitionLine = 1540;
                                                              func2844.definitionModule = "stobjectdraw";
                                                              setLineNumber(1509);    // compilenode call
                                                              var call2890 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2891 = callmethodChecked(call2890, "drawableAt()on()object", [1, 1, 1], var_location__39__, var_canvas__39__, this);
                                                              obj2743.superobj = call2891;
                                                              if (call2891.data) obj2743.data = call2891.data;
                                                              if (call2891.hasOwnProperty('_value'))
                                                                  obj2743._value = call2891._value;
                                                              setLineNumber(1510);    // compilenode identifier
                                                              var call2892 = callmethodChecked(var_dimension__39__, "x", [0]);
                                                              obj2743.data["theWidth"] = call2892;
                                                              var reader_stobjectdraw_theWidth2893 = function() {
                                                                return this.data["theWidth"];
                                                              };
                                                              obj2743.methods["theWidth"] = reader_stobjectdraw_theWidth2893;
                                                              obj2743.data["theWidth"] = call2892;
                                                              var writer_stobjectdraw_theWidth2893 = function(argcv, o) {
                                                                this.data["theWidth"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj2743.methods["theWidth:="] = writer_stobjectdraw_theWidth2893;
                                                              reader_stobjectdraw_theWidth2893.confidential = true;
                                                              writer_stobjectdraw_theWidth2893.confidential = true;
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2892)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("initial value of var 'theWidth' is not of type Number"));
                                                              obj2743.mutable = true;
                                                              setLineNumber(1514);    // compilenode identifier
                                                              var call2894 = callmethodChecked(var_dimension__39__, "y", [0]);
                                                              obj2743.data["theHeight"] = call2894;
                                                              var reader_stobjectdraw_theHeight2895 = function() {
                                                                return this.data["theHeight"];
                                                              };
                                                              obj2743.methods["theHeight"] = reader_stobjectdraw_theHeight2895;
                                                              obj2743.data["theHeight"] = call2894;
                                                              var writer_stobjectdraw_theHeight2895 = function(argcv, o) {
                                                                this.data["theHeight"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj2743.methods["theHeight:="] = writer_stobjectdraw_theHeight2895;
                                                              reader_stobjectdraw_theHeight2895.confidential = true;
                                                              writer_stobjectdraw_theHeight2895.confidential = true;
                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call2894)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("initial value of var 'theHeight' is not of type Number"));
                                                              obj2743.mutable = true;
                                                              superDepth = origSuperDepth;
                                                            };
                                                            obj_init_2743.apply(inheritingObject, []);
                                                            return obj2743;
                                                            };
                                                            func2740.paramTypes = [];
                                                            func2740.paramTypes.push([]);
                                                            func2740.paramTypes.push([]);
                                                            func2740.paramTypes.push([]);
                                                            this.methods["drawable2DAt()size()on()object"] = func2740;
                                                          setLineNumber(1546);    // compilenode method
                                                          var func2896 = function(argcv) {    // method resizable2DAt(1)size(1)on(1)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_location__39__ = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[0] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for resizable2DAt (arg list 1) of resizable2DAt(1)size(1)on(1)"));
                                                            var var_dimensions__39__ = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[1] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of resizable2DAt(1)size(1)on(1)"));
                                                            var var_canvas__39__ = arguments[curarg];
                                                            curarg++;
                                                            if (argcv[2] !== 1)
                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of resizable2DAt(1)size(1)on(1)"));
                                                            // Start argument checking
                                                            curarg = 1;
                                                            onSelf = true;
                                                            var call2897 = callmethodChecked(this, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2897, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in resizable2DAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                        callmethod(call2897, "asString", [0])._value + "."));
                                                            curarg++;
                                                            onSelf = true;
                                                            var call2898 = callmethodChecked(this, "Point", [0]);
                                                            if (!Grace_isTrue(callmethod(call2898, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                        callmethod(call2898, "asString", [0])._value + "."));
                                                            curarg++;
                                                            setLineNumber(1547);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                        callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("stobjectdraw");
                                                            setLineNumber(1546);    // compilenode object
                                                            var obj2899 = Grace_allocObject(null, "stobjectdraw.resizable2DAt()size()on");
                                                            obj2899.definitionModule = "stobjectdraw";
                                                            obj2899.definitionLine = 1546;
                                                            obj2899.outer = this;
                                                            var reader_stobjectdraw_outer2900 = function() {
                                                              return this.outer;
                                                            };
                                                            obj2899.methods["outer"] = reader_stobjectdraw_outer2900;
                                                            var obj_init_2899 = function() {
                                                              var origSuperDepth = superDepth;
                                                              superDepth = obj2899;
                                                              var func2901 = function(argcv) {    // method width:=(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_w = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width:=(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1553);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in width:= (arg list 1), which corresponds to parameter w, does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1554);    // compilenode identifier
                                                                onSelf = true;
                                                                var call2902 = callmethodChecked(this, "theWidth:=", [1], var_w);
                                                                setLineNumber(1555);    // compilenode call
                                                                onSelf = true;
                                                                var call2903 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2903)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method width:=(1) does not have " + 
                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                return call2903;
                                                              };
                                                              func2901.paramTypes = [];
                                                              func2901.paramTypes.push([type_Number, "w"]);
                                                              func2901.paramCounts = [1];
                                                              obj2899.methods["width:="] = func2901;
                                                              func2901.definitionLine = 1553;
                                                              func2901.definitionModule = "stobjectdraw";
                                                              var func2904 = function(argcv) {    // method height:=(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_h = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height:=(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1559);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in height:= (arg list 1), which corresponds to parameter h, does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1560);    // compilenode identifier
                                                                onSelf = true;
                                                                var call2905 = callmethodChecked(this, "theHeight:=", [1], var_h);
                                                                setLineNumber(1561);    // compilenode call
                                                                onSelf = true;
                                                                var call2906 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2906)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method height:=(1) does not have " + 
                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                return call2906;
                                                              };
                                                              func2904.paramTypes = [];
                                                              func2904.paramTypes.push([type_Number, "h"]);
                                                              func2904.paramCounts = [1];
                                                              obj2899.methods["height:="] = func2904;
                                                              func2904.definitionLine = 1559;
                                                              func2904.definitionModule = "stobjectdraw";
                                                              var func2907 = function(argcv) {    // method size:=(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_dimensions = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size:=(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(1565);    // compilenode call
                                                                var call2908 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call2909 = callmethodChecked(call2908, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call2909, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in size:= (arg list 1), which corresponds to parameter dimensions, does not have " + 
                                                                            callmethod(call2909, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1566);    // compilenode identifier
                                                                var call2910 = callmethodChecked(var_dimensions, "x", [0]);
                                                                onSelf = true;
                                                                var call2911 = callmethodChecked(this, "width:=", [1], call2910);
                                                                setLineNumber(1567);    // compilenode identifier
                                                                var call2912 = callmethodChecked(var_dimensions, "y", [0]);
                                                                onSelf = true;
                                                                var call2913 = callmethodChecked(this, "height:=", [1], call2912);
                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2913)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method size:=(1) does not have " + 
                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                return call2913;
                                                              };
                                                              func2907.paramCounts = [1];
                                                              obj2899.methods["size:="] = func2907;
                                                              func2907.definitionLine = 1565;
                                                              func2907.definitionModule = "stobjectdraw";
                                                              var func2914 = function(argcv) {    // method asString
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                if (argcv[0] !== 0)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1573);    // compilenode string
                                                                var string2915 = new GraceString("");
                                                                onSelf = true;
                                                                var call2917 = callmethodChecked(this, "color", [0]);
                                                                var string2919 = new GraceString(", and color ");
                                                                onSelf = true;
                                                                var call2921 = callmethodChecked(this, "width", [0]);
                                                                var string2923 = new GraceString(", width ");
                                                                onSelf = true;
                                                                var call2925 = callmethodChecked(this, "height", [0]);
                                                                var string2927 = new GraceString("with height ");
                                                                var opresult2929 = callmethodChecked(string2927, "++", [1], call2925);
                                                                var opresult2931 = callmethodChecked(opresult2929, "++", [1], string2923);
                                                                var opresult2933 = callmethodChecked(opresult2931, "++", [1], call2921);
                                                                var opresult2935 = callmethodChecked(opresult2933, "++", [1], string2919);
                                                                var opresult2937 = callmethodChecked(opresult2935, "++", [1], call2917);
                                                                var opresult2939 = callmethodChecked(opresult2937, "++", [1], string2915);
                                                                setLineNumber(1572);    // compilenode string
                                                                var string2941 = new GraceString(") ");
                                                                onSelf = true;
                                                                var call2943 = callmethodChecked(this, "y", [0]);
                                                                var string2945 = new GraceString(",");
                                                                onSelf = true;
                                                                var call2947 = callmethodChecked(this, "x", [0]);
                                                                var string2949 = new GraceString("Resizable2D object at (");
                                                                var opresult2951 = callmethodChecked(string2949, "++", [1], call2947);
                                                                var opresult2953 = callmethodChecked(opresult2951, "++", [1], string2945);
                                                                var opresult2955 = callmethodChecked(opresult2953, "++", [1], call2943);
                                                                var opresult2957 = callmethodChecked(opresult2955, "++", [1], string2941);
                                                                var opresult2959 = callmethodChecked(opresult2957, "++", [1], opresult2939);
                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult2959)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method asString does not have " + 
                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                return opresult2959;
                                                              };
                                                              func2914.paramCounts = [0];
                                                              obj2899.methods["asString"] = func2914;
                                                              func2914.definitionLine = 1571;
                                                              func2914.definitionModule = "stobjectdraw";
                                                              setLineNumber(1550);    // compilenode call
                                                              var call2960 = callmethodChecked(superDepth, "outer", [0]);
                                                              onOuter = true;
                                                              onSelf = true;
                                                              var call2961 = callmethodChecked(call2960, "drawable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                              obj2899.superobj = call2961;
                                                              if (call2961.data) obj2899.data = call2961.data;
                                                              if (call2961.hasOwnProperty('_value'))
                                                                  obj2899._value = call2961._value;
                                                              superDepth = origSuperDepth;
                                                            };
                                                            obj_init_2899.apply(obj2899, []);
                                                            setLineNumber(1546);    // return value
                                                            if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj2899)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method resizable2DAt(1)size(1)on(1) does not have " + 
                                                                        callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                            return obj2899;
                                                          };
                                                          func2896.paramTypes = [];
                                                          func2896.paramTypes.push([]);
                                                          func2896.paramTypes.push([]);
                                                          func2896.paramTypes.push([]);
                                                          func2896.paramCounts = [1, 1, 1];
                                                          this.methods["resizable2DAt()size()on"] = func2896;
                                                          func2896.definitionLine = 1546;
                                                          func2896.definitionModule = "stobjectdraw";
                                                            var func2962 = function(argcv) {    // method resizable2DAt(1     )size(1     )on(1     )()object
                                                              var curarg = 1;
                                                              var var_location__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_dimensions__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_canvas__39__ = arguments[curarg];
                                                              curarg++;
                                                              var inheritingObject = arguments[curarg++];
                                                              // Start argument processing
                                                              curarg = 1;
                                                              onSelf = true;
                                                              var call2963 = callmethodChecked(this, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2963, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in resizable2DAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                          callmethod(call2963, "asString", [0])._value + "."));
                                                              curarg++;
                                                              onSelf = true;
                                                              var call2964 = callmethodChecked(this, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call2964, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                          callmethod(call2964, "asString", [0])._value + "."));
                                                              curarg++;
                                                              setLineNumber(1547);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                          callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument processing
                                                              setModuleName("stobjectdraw");
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var obj2965 = Grace_allocObject(null, "resizable2DAt()size()on");
                                                              obj2965.definitionModule = "stobjectdraw";
                                                              obj2965.definitionLine = 1546;
                                                              var inho2965 = inheritingObject;
                                                              while (inho2965.superobj) inho2965 = inho2965.superobj;
                                                              inho2965.superobj = obj2965;
                                                              obj2965.data = inheritingObject.data;
                                                              if (inheritingObject.hasOwnProperty('_value'))
                                                                obj2965._value = inheritingObject._value;
                                                              obj2965.outer = this;
                                                              var reader_stobjectdraw_outer2966 = function() {
                                                                return this.outer;
                                                              };
                                                              obj2965.methods["outer"] = reader_stobjectdraw_outer2966;
                                                              var obj_init_2965 = function() {
                                                                var origSuperDepth = superDepth;
                                                                superDepth = obj2965;
                                                                var func2967 = function(argcv) {    // method width:=(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_w = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width:=(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(1553);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in width:= (arg list 1), which corresponds to parameter w, does not have " + 
                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("stobjectdraw");
                                                                  setLineNumber(1554);    // compilenode identifier
                                                                  onSelf = true;
                                                                  var call2968 = callmethodChecked(this, "theWidth:=", [1], var_w);
                                                                  setLineNumber(1555);    // compilenode call
                                                                  onSelf = true;
                                                                  var call2969 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2969)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method width:=(1) does not have " + 
                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                  return call2969;
                                                                };
                                                                func2967.paramTypes = [];
                                                                func2967.paramTypes.push([type_Number, "w"]);
                                                                func2967.paramCounts = [1];
                                                                obj2965.methods["width:="] = func2967;
                                                                func2967.definitionLine = 1553;
                                                                func2967.definitionModule = "stobjectdraw";
                                                                var func2970 = function(argcv) {    // method height:=(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_h = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for height:=(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(1559);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in height:= (arg list 1), which corresponds to parameter h, does not have " + 
                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("stobjectdraw");
                                                                  setLineNumber(1560);    // compilenode identifier
                                                                  onSelf = true;
                                                                  var call2971 = callmethodChecked(this, "theHeight:=", [1], var_h);
                                                                  setLineNumber(1561);    // compilenode call
                                                                  onSelf = true;
                                                                  var call2972 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2972)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method height:=(1) does not have " + 
                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                  return call2972;
                                                                };
                                                                func2970.paramTypes = [];
                                                                func2970.paramTypes.push([type_Number, "h"]);
                                                                func2970.paramCounts = [1];
                                                                obj2965.methods["height:="] = func2970;
                                                                func2970.definitionLine = 1559;
                                                                func2970.definitionModule = "stobjectdraw";
                                                                var func2973 = function(argcv) {    // method size:=(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_dimensions = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size:=(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(1565);    // compilenode call
                                                                  var call2974 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call2975 = callmethodChecked(call2974, "Point", [0]);
                                                                  if (!Grace_isTrue(callmethod(call2975, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in size:= (arg list 1), which corresponds to parameter dimensions, does not have " + 
                                                                              callmethod(call2975, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("stobjectdraw");
                                                                  setLineNumber(1566);    // compilenode identifier
                                                                  var call2976 = callmethodChecked(var_dimensions, "x", [0]);
                                                                  onSelf = true;
                                                                  var call2977 = callmethodChecked(this, "width:=", [1], call2976);
                                                                  setLineNumber(1567);    // compilenode identifier
                                                                  var call2978 = callmethodChecked(var_dimensions, "y", [0]);
                                                                  onSelf = true;
                                                                  var call2979 = callmethodChecked(this, "height:=", [1], call2978);
                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call2979)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method size:=(1) does not have " + 
                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                  return call2979;
                                                                };
                                                                func2973.paramCounts = [1];
                                                                obj2965.methods["size:="] = func2973;
                                                                func2973.definitionLine = 1565;
                                                                func2973.definitionModule = "stobjectdraw";
                                                                var func2980 = function(argcv) {    // method asString
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                  setModuleName("stobjectdraw");
                                                                  setLineNumber(1573);    // compilenode string
                                                                  var string2981 = new GraceString("");
                                                                  onSelf = true;
                                                                  var call2983 = callmethodChecked(this, "color", [0]);
                                                                  var string2985 = new GraceString(", and color ");
                                                                  onSelf = true;
                                                                  var call2987 = callmethodChecked(this, "width", [0]);
                                                                  var string2989 = new GraceString(", width ");
                                                                  onSelf = true;
                                                                  var call2991 = callmethodChecked(this, "height", [0]);
                                                                  var string2993 = new GraceString("with height ");
                                                                  var opresult2995 = callmethodChecked(string2993, "++", [1], call2991);
                                                                  var opresult2997 = callmethodChecked(opresult2995, "++", [1], string2989);
                                                                  var opresult2999 = callmethodChecked(opresult2997, "++", [1], call2987);
                                                                  var opresult3001 = callmethodChecked(opresult2999, "++", [1], string2985);
                                                                  var opresult3003 = callmethodChecked(opresult3001, "++", [1], call2983);
                                                                  var opresult3005 = callmethodChecked(opresult3003, "++", [1], string2981);
                                                                  setLineNumber(1572);    // compilenode string
                                                                  var string3007 = new GraceString(") ");
                                                                  onSelf = true;
                                                                  var call3009 = callmethodChecked(this, "y", [0]);
                                                                  var string3011 = new GraceString(",");
                                                                  onSelf = true;
                                                                  var call3013 = callmethodChecked(this, "x", [0]);
                                                                  var string3015 = new GraceString("Resizable2D object at (");
                                                                  var opresult3017 = callmethodChecked(string3015, "++", [1], call3013);
                                                                  var opresult3019 = callmethodChecked(opresult3017, "++", [1], string3011);
                                                                  var opresult3021 = callmethodChecked(opresult3019, "++", [1], call3009);
                                                                  var opresult3023 = callmethodChecked(opresult3021, "++", [1], string3007);
                                                                  var opresult3025 = callmethodChecked(opresult3023, "++", [1], opresult3005);
                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3025)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method asString does not have " + 
                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                  return opresult3025;
                                                                };
                                                                func2980.paramCounts = [0];
                                                                obj2965.methods["asString"] = func2980;
                                                                func2980.definitionLine = 1571;
                                                                func2980.definitionModule = "stobjectdraw";
                                                                setLineNumber(1550);    // compilenode call
                                                                var call3026 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call3027 = callmethodChecked(call3026, "drawable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                obj2965.superobj = call3027;
                                                                if (call3027.data) obj2965.data = call3027.data;
                                                                if (call3027.hasOwnProperty('_value'))
                                                                    obj2965._value = call3027._value;
                                                                superDepth = origSuperDepth;
                                                              };
                                                              obj_init_2965.apply(inheritingObject, []);
                                                              return obj2965;
                                                              };
                                                              func2962.paramTypes = [];
                                                              func2962.paramTypes.push([]);
                                                              func2962.paramTypes.push([]);
                                                              func2962.paramTypes.push([]);
                                                              this.methods["resizable2DAt()size()on()object"] = func2962;
                                                            setLineNumber(1577);    // compilenode method
                                                            var func3028 = function(argcv) {    // method framedRectAt(1)size(1)on(1)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_location__39__ = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[0] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for framedRectAt (arg list 1) of framedRectAt(1)size(1)on(1)"));
                                                              var var_dimensions__39__ = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[1] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of framedRectAt(1)size(1)on(1)"));
                                                              var var_canvas__39__ = arguments[curarg];
                                                              curarg++;
                                                              if (argcv[2] !== 1)
                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of framedRectAt(1)size(1)on(1)"));
                                                              // Start argument checking
                                                              curarg = 1;
                                                              onSelf = true;
                                                              var call3029 = callmethodChecked(this, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call3029, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in framedRectAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                          callmethod(call3029, "asString", [0])._value + "."));
                                                              curarg++;
                                                              onSelf = true;
                                                              var call3030 = callmethodChecked(this, "Point", [0]);
                                                              if (!Grace_isTrue(callmethod(call3030, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                          callmethod(call3030, "asString", [0])._value + "."));
                                                              curarg++;
                                                              setLineNumber(1578);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                          callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("stobjectdraw");
                                                              setLineNumber(1577);    // compilenode object
                                                              var obj3031 = Grace_allocObject(null, "stobjectdraw.framedRectAt()size()on");
                                                              obj3031.definitionModule = "stobjectdraw";
                                                              obj3031.definitionLine = 1577;
                                                              obj3031.outer = this;
                                                              var reader_stobjectdraw_outer3032 = function() {
                                                                return this.outer;
                                                              };
                                                              obj3031.methods["outer"] = reader_stobjectdraw_outer3032;
                                                              var obj_init_3031 = function() {
                                                                var origSuperDepth = superDepth;
                                                                superDepth = obj3031;
                                                                var func3033 = function(argcv) {    // method draw(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_ctx = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(1586);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                              callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("stobjectdraw");
                                                                  setLineNumber(1587);    // compilenode identifier
                                                                  var call3034 = callmethodChecked(var_ctx, "save", [0]);
                                                                  setLineNumber(1588);    // compilenode string
                                                                  var string3035 = new GraceString(")");
                                                                  onSelf = true;
                                                                  var call3037 = callmethodChecked(this, "color", [0]);
                                                                  var call3038 = callmethodChecked(call3037, "blue", [0]);
                                                                  var string3040 = new GraceString(", ");
                                                                  onSelf = true;
                                                                  var call3042 = callmethodChecked(this, "color", [0]);
                                                                  var call3043 = callmethodChecked(call3042, "green", [0]);
                                                                  var string3045 = new GraceString(", ");
                                                                  onSelf = true;
                                                                  var call3047 = callmethodChecked(this, "color", [0]);
                                                                  var call3048 = callmethodChecked(call3047, "red", [0]);
                                                                  var string3050 = new GraceString("rgb(");
                                                                  var opresult3052 = callmethodChecked(string3050, "++", [1], call3048);
                                                                  var opresult3054 = callmethodChecked(opresult3052, "++", [1], string3045);
                                                                  var opresult3056 = callmethodChecked(opresult3054, "++", [1], call3043);
                                                                  var opresult3058 = callmethodChecked(opresult3056, "++", [1], string3040);
                                                                  var opresult3060 = callmethodChecked(opresult3058, "++", [1], call3038);
                                                                  var opresult3062 = callmethodChecked(opresult3060, "++", [1], string3035);
                                                                  var call3063 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult3062);
                                                                  setLineNumber(1589);    // compilenode call
                                                                  onSelf = true;
                                                                  var call3064 = callmethodChecked(this, "x", [0]);
                                                                  onSelf = true;
                                                                  var call3065 = callmethodChecked(this, "y", [0]);
                                                                  onSelf = true;
                                                                  var call3066 = callmethodChecked(this, "width", [0]);
                                                                  onSelf = true;
                                                                  var call3067 = callmethodChecked(this, "height", [0]);
                                                                  var call3068 = callmethodChecked(var_ctx, "strokeRect", [4], call3064, call3065, call3066, call3067);
                                                                  setLineNumber(1590);    // compilenode identifier
                                                                  var call3069 = callmethodChecked(var_ctx, "restore", [0]);
                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3069)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method draw(1) does not have " + 
                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                  return call3069;
                                                                };
                                                                func3033.paramTypes = [];
                                                                func3033.paramTypes.push([]);
                                                                func3033.paramCounts = [1];
                                                                obj3031.methods["draw"] = func3033;
                                                                func3033.definitionLine = 1586;
                                                                func3033.definitionModule = "stobjectdraw";
                                                                var func3070 = function(argcv) {    // method asString
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  if (argcv[0] !== 0)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                  setModuleName("stobjectdraw");
                                                                  setLineNumber(1596);    // compilenode string
                                                                  var string3071 = new GraceString("");
                                                                  onSelf = true;
                                                                  var call3073 = callmethodChecked(this, "color", [0]);
                                                                  var string3075 = new GraceString(", and color ");
                                                                  onSelf = true;
                                                                  var call3077 = callmethodChecked(this, "width", [0]);
                                                                  var string3079 = new GraceString(", width ");
                                                                  onSelf = true;
                                                                  var call3081 = callmethodChecked(this, "height", [0]);
                                                                  var string3083 = new GraceString("with height ");
                                                                  var opresult3085 = callmethodChecked(string3083, "++", [1], call3081);
                                                                  var opresult3087 = callmethodChecked(opresult3085, "++", [1], string3079);
                                                                  var opresult3089 = callmethodChecked(opresult3087, "++", [1], call3077);
                                                                  var opresult3091 = callmethodChecked(opresult3089, "++", [1], string3075);
                                                                  var opresult3093 = callmethodChecked(opresult3091, "++", [1], call3073);
                                                                  var opresult3095 = callmethodChecked(opresult3093, "++", [1], string3071);
                                                                  setLineNumber(1595);    // compilenode string
                                                                  var string3097 = new GraceString(") ");
                                                                  onSelf = true;
                                                                  var call3099 = callmethodChecked(this, "y", [0]);
                                                                  var string3101 = new GraceString(",");
                                                                  onSelf = true;
                                                                  var call3103 = callmethodChecked(this, "x", [0]);
                                                                  var string3105 = new GraceString("FramedRect at (");
                                                                  var opresult3107 = callmethodChecked(string3105, "++", [1], call3103);
                                                                  var opresult3109 = callmethodChecked(opresult3107, "++", [1], string3101);
                                                                  var opresult3111 = callmethodChecked(opresult3109, "++", [1], call3099);
                                                                  var opresult3113 = callmethodChecked(opresult3111, "++", [1], string3097);
                                                                  var opresult3115 = callmethodChecked(opresult3113, "++", [1], opresult3095);
                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3115)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method asString does not have " + 
                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                  return opresult3115;
                                                                };
                                                                func3070.paramCounts = [0];
                                                                obj3031.methods["asString"] = func3070;
                                                                func3070.definitionLine = 1594;
                                                                func3070.definitionModule = "stobjectdraw";
                                                                setLineNumber(1582);    // compilenode call
                                                                var call3116 = callmethodChecked(superDepth, "outer", [0]);
                                                                onOuter = true;
                                                                onSelf = true;
                                                                var call3117 = callmethodChecked(call3116, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                obj3031.superobj = call3117;
                                                                if (call3117.data) obj3031.data = call3117.data;
                                                                if (call3117.hasOwnProperty('_value'))
                                                                    obj3031._value = call3117._value;
                                                                setLineNumber(1583);    // compilenode identifier
                                                                onSelf = true;
                                                                var call3118 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                superDepth = origSuperDepth;
                                                              };
                                                              obj_init_3031.apply(obj3031, []);
                                                              setLineNumber(1577);    // return value
                                                              if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj3031)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method framedRectAt(1)size(1)on(1) does not have " + 
                                                                          callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                              return obj3031;
                                                            };
                                                            func3028.paramTypes = [];
                                                            func3028.paramTypes.push([]);
                                                            func3028.paramTypes.push([]);
                                                            func3028.paramTypes.push([]);
                                                            func3028.paramCounts = [1, 1, 1];
                                                            this.methods["framedRectAt()size()on"] = func3028;
                                                            func3028.definitionLine = 1577;
                                                            func3028.definitionModule = "stobjectdraw";
                                                              var func3119 = function(argcv) {    // method framedRectAt(1     )size(1     )on(1     )()object
                                                                var curarg = 1;
                                                                var var_location__39__ = arguments[curarg];
                                                                curarg++;
                                                                var var_dimensions__39__ = arguments[curarg];
                                                                curarg++;
                                                                var var_canvas__39__ = arguments[curarg];
                                                                curarg++;
                                                                var inheritingObject = arguments[curarg++];
                                                                // Start argument processing
                                                                curarg = 1;
                                                                onSelf = true;
                                                                var call3120 = callmethodChecked(this, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call3120, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in framedRectAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                            callmethod(call3120, "asString", [0])._value + "."));
                                                                curarg++;
                                                                onSelf = true;
                                                                var call3121 = callmethodChecked(this, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call3121, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                            callmethod(call3121, "asString", [0])._value + "."));
                                                                curarg++;
                                                                setLineNumber(1578);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                            callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument processing
                                                                setModuleName("stobjectdraw");
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var obj3122 = Grace_allocObject(null, "framedRectAt()size()on");
                                                                obj3122.definitionModule = "stobjectdraw";
                                                                obj3122.definitionLine = 1577;
                                                                var inho3122 = inheritingObject;
                                                                while (inho3122.superobj) inho3122 = inho3122.superobj;
                                                                inho3122.superobj = obj3122;
                                                                obj3122.data = inheritingObject.data;
                                                                if (inheritingObject.hasOwnProperty('_value'))
                                                                  obj3122._value = inheritingObject._value;
                                                                obj3122.outer = this;
                                                                var reader_stobjectdraw_outer3123 = function() {
                                                                  return this.outer;
                                                                };
                                                                obj3122.methods["outer"] = reader_stobjectdraw_outer3123;
                                                                var obj_init_3122 = function() {
                                                                  var origSuperDepth = superDepth;
                                                                  superDepth = obj3122;
                                                                  var func3124 = function(argcv) {    // method draw(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_ctx = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(1586);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("stobjectdraw");
                                                                    setLineNumber(1587);    // compilenode identifier
                                                                    var call3125 = callmethodChecked(var_ctx, "save", [0]);
                                                                    setLineNumber(1588);    // compilenode string
                                                                    var string3126 = new GraceString(")");
                                                                    onSelf = true;
                                                                    var call3128 = callmethodChecked(this, "color", [0]);
                                                                    var call3129 = callmethodChecked(call3128, "blue", [0]);
                                                                    var string3131 = new GraceString(", ");
                                                                    onSelf = true;
                                                                    var call3133 = callmethodChecked(this, "color", [0]);
                                                                    var call3134 = callmethodChecked(call3133, "green", [0]);
                                                                    var string3136 = new GraceString(", ");
                                                                    onSelf = true;
                                                                    var call3138 = callmethodChecked(this, "color", [0]);
                                                                    var call3139 = callmethodChecked(call3138, "red", [0]);
                                                                    var string3141 = new GraceString("rgb(");
                                                                    var opresult3143 = callmethodChecked(string3141, "++", [1], call3139);
                                                                    var opresult3145 = callmethodChecked(opresult3143, "++", [1], string3136);
                                                                    var opresult3147 = callmethodChecked(opresult3145, "++", [1], call3134);
                                                                    var opresult3149 = callmethodChecked(opresult3147, "++", [1], string3131);
                                                                    var opresult3151 = callmethodChecked(opresult3149, "++", [1], call3129);
                                                                    var opresult3153 = callmethodChecked(opresult3151, "++", [1], string3126);
                                                                    var call3154 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult3153);
                                                                    setLineNumber(1589);    // compilenode call
                                                                    onSelf = true;
                                                                    var call3155 = callmethodChecked(this, "x", [0]);
                                                                    onSelf = true;
                                                                    var call3156 = callmethodChecked(this, "y", [0]);
                                                                    onSelf = true;
                                                                    var call3157 = callmethodChecked(this, "width", [0]);
                                                                    onSelf = true;
                                                                    var call3158 = callmethodChecked(this, "height", [0]);
                                                                    var call3159 = callmethodChecked(var_ctx, "strokeRect", [4], call3155, call3156, call3157, call3158);
                                                                    setLineNumber(1590);    // compilenode identifier
                                                                    var call3160 = callmethodChecked(var_ctx, "restore", [0]);
                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3160)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method draw(1) does not have " + 
                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                    return call3160;
                                                                  };
                                                                  func3124.paramTypes = [];
                                                                  func3124.paramTypes.push([]);
                                                                  func3124.paramCounts = [1];
                                                                  obj3122.methods["draw"] = func3124;
                                                                  func3124.definitionLine = 1586;
                                                                  func3124.definitionModule = "stobjectdraw";
                                                                  var func3161 = function(argcv) {    // method asString
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                    setModuleName("stobjectdraw");
                                                                    setLineNumber(1596);    // compilenode string
                                                                    var string3162 = new GraceString("");
                                                                    onSelf = true;
                                                                    var call3164 = callmethodChecked(this, "color", [0]);
                                                                    var string3166 = new GraceString(", and color ");
                                                                    onSelf = true;
                                                                    var call3168 = callmethodChecked(this, "width", [0]);
                                                                    var string3170 = new GraceString(", width ");
                                                                    onSelf = true;
                                                                    var call3172 = callmethodChecked(this, "height", [0]);
                                                                    var string3174 = new GraceString("with height ");
                                                                    var opresult3176 = callmethodChecked(string3174, "++", [1], call3172);
                                                                    var opresult3178 = callmethodChecked(opresult3176, "++", [1], string3170);
                                                                    var opresult3180 = callmethodChecked(opresult3178, "++", [1], call3168);
                                                                    var opresult3182 = callmethodChecked(opresult3180, "++", [1], string3166);
                                                                    var opresult3184 = callmethodChecked(opresult3182, "++", [1], call3164);
                                                                    var opresult3186 = callmethodChecked(opresult3184, "++", [1], string3162);
                                                                    setLineNumber(1595);    // compilenode string
                                                                    var string3188 = new GraceString(") ");
                                                                    onSelf = true;
                                                                    var call3190 = callmethodChecked(this, "y", [0]);
                                                                    var string3192 = new GraceString(",");
                                                                    onSelf = true;
                                                                    var call3194 = callmethodChecked(this, "x", [0]);
                                                                    var string3196 = new GraceString("FramedRect at (");
                                                                    var opresult3198 = callmethodChecked(string3196, "++", [1], call3194);
                                                                    var opresult3200 = callmethodChecked(opresult3198, "++", [1], string3192);
                                                                    var opresult3202 = callmethodChecked(opresult3200, "++", [1], call3190);
                                                                    var opresult3204 = callmethodChecked(opresult3202, "++", [1], string3188);
                                                                    var opresult3206 = callmethodChecked(opresult3204, "++", [1], opresult3186);
                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3206)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method asString does not have " + 
                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                    return opresult3206;
                                                                  };
                                                                  func3161.paramCounts = [0];
                                                                  obj3122.methods["asString"] = func3161;
                                                                  func3161.definitionLine = 1594;
                                                                  func3161.definitionModule = "stobjectdraw";
                                                                  setLineNumber(1582);    // compilenode call
                                                                  var call3207 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call3208 = callmethodChecked(call3207, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                  obj3122.superobj = call3208;
                                                                  if (call3208.data) obj3122.data = call3208.data;
                                                                  if (call3208.hasOwnProperty('_value'))
                                                                      obj3122._value = call3208._value;
                                                                  setLineNumber(1583);    // compilenode identifier
                                                                  onSelf = true;
                                                                  var call3209 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                  superDepth = origSuperDepth;
                                                                };
                                                                obj_init_3122.apply(inheritingObject, []);
                                                                return obj3122;
                                                                };
                                                                func3119.paramTypes = [];
                                                                func3119.paramTypes.push([]);
                                                                func3119.paramTypes.push([]);
                                                                func3119.paramTypes.push([]);
                                                                this.methods["framedRectAt()size()on()object"] = func3119;
                                                              setLineNumber(1600);    // compilenode method
                                                              var func3210 = function(argcv) {    // method filledRectAt(1)size(1)on(1)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_location__39__ = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[0] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for filledRectAt (arg list 1) of filledRectAt(1)size(1)on(1)"));
                                                                var var_dimensions__39__ = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[1] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of filledRectAt(1)size(1)on(1)"));
                                                                var var_canvas__39__ = arguments[curarg];
                                                                curarg++;
                                                                if (argcv[2] !== 1)
                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of filledRectAt(1)size(1)on(1)"));
                                                                // Start argument checking
                                                                curarg = 1;
                                                                onSelf = true;
                                                                var call3211 = callmethodChecked(this, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call3211, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in filledRectAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                            callmethod(call3211, "asString", [0])._value + "."));
                                                                curarg++;
                                                                onSelf = true;
                                                                var call3212 = callmethodChecked(this, "Point", [0]);
                                                                if (!Grace_isTrue(callmethod(call3212, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                            callmethod(call3212, "asString", [0])._value + "."));
                                                                curarg++;
                                                                setLineNumber(1601);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                            callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("stobjectdraw");
                                                                setLineNumber(1600);    // compilenode object
                                                                var obj3213 = Grace_allocObject(null, "stobjectdraw.filledRectAt()size()on");
                                                                obj3213.definitionModule = "stobjectdraw";
                                                                obj3213.definitionLine = 1600;
                                                                obj3213.outer = this;
                                                                var reader_stobjectdraw_outer3214 = function() {
                                                                  return this.outer;
                                                                };
                                                                obj3213.methods["outer"] = reader_stobjectdraw_outer3214;
                                                                var obj_init_3213 = function() {
                                                                  var origSuperDepth = superDepth;
                                                                  superDepth = obj3213;
                                                                  var func3215 = function(argcv) {    // method draw(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_ctx = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(1610);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("stobjectdraw");
                                                                    setLineNumber(1611);    // compilenode identifier
                                                                    var call3216 = callmethodChecked(var_ctx, "save", [0]);
                                                                    setLineNumber(1612);    // compilenode string
                                                                    var string3217 = new GraceString(")");
                                                                    onSelf = true;
                                                                    var call3219 = callmethodChecked(this, "color", [0]);
                                                                    var call3220 = callmethodChecked(call3219, "blue", [0]);
                                                                    var string3222 = new GraceString(", ");
                                                                    onSelf = true;
                                                                    var call3224 = callmethodChecked(this, "color", [0]);
                                                                    var call3225 = callmethodChecked(call3224, "green", [0]);
                                                                    var string3227 = new GraceString(", ");
                                                                    onSelf = true;
                                                                    var call3229 = callmethodChecked(this, "color", [0]);
                                                                    var call3230 = callmethodChecked(call3229, "red", [0]);
                                                                    var string3232 = new GraceString("rgb(");
                                                                    var opresult3234 = callmethodChecked(string3232, "++", [1], call3230);
                                                                    var opresult3236 = callmethodChecked(opresult3234, "++", [1], string3227);
                                                                    var opresult3238 = callmethodChecked(opresult3236, "++", [1], call3225);
                                                                    var opresult3240 = callmethodChecked(opresult3238, "++", [1], string3222);
                                                                    var opresult3242 = callmethodChecked(opresult3240, "++", [1], call3220);
                                                                    var opresult3244 = callmethodChecked(opresult3242, "++", [1], string3217);
                                                                    var call3245 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult3244);
                                                                    setLineNumber(1613);    // compilenode call
                                                                    onSelf = true;
                                                                    var call3246 = callmethodChecked(this, "x", [0]);
                                                                    onSelf = true;
                                                                    var call3247 = callmethodChecked(this, "y", [0]);
                                                                    onSelf = true;
                                                                    var call3248 = callmethodChecked(this, "width", [0]);
                                                                    onSelf = true;
                                                                    var call3249 = callmethodChecked(this, "height", [0]);
                                                                    var call3250 = callmethodChecked(var_ctx, "fillRect", [4], call3246, call3247, call3248, call3249);
                                                                    setLineNumber(1614);    // compilenode identifier
                                                                    var call3251 = callmethodChecked(var_ctx, "restore", [0]);
                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3251)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method draw(1) does not have " + 
                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                    return call3251;
                                                                  };
                                                                  func3215.paramTypes = [];
                                                                  func3215.paramTypes.push([]);
                                                                  func3215.paramCounts = [1];
                                                                  obj3213.methods["draw"] = func3215;
                                                                  func3215.definitionLine = 1610;
                                                                  func3215.definitionModule = "stobjectdraw";
                                                                  var func3252 = function(argcv) {    // method asString
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    if (argcv[0] !== 0)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                    setModuleName("stobjectdraw");
                                                                    setLineNumber(1620);    // compilenode string
                                                                    var string3253 = new GraceString("");
                                                                    onSelf = true;
                                                                    var call3255 = callmethodChecked(this, "color", [0]);
                                                                    var string3257 = new GraceString(", and color ");
                                                                    onSelf = true;
                                                                    var call3259 = callmethodChecked(this, "width", [0]);
                                                                    var string3261 = new GraceString(", width ");
                                                                    onSelf = true;
                                                                    var call3263 = callmethodChecked(this, "height", [0]);
                                                                    var string3265 = new GraceString("with height ");
                                                                    var opresult3267 = callmethodChecked(string3265, "++", [1], call3263);
                                                                    var opresult3269 = callmethodChecked(opresult3267, "++", [1], string3261);
                                                                    var opresult3271 = callmethodChecked(opresult3269, "++", [1], call3259);
                                                                    var opresult3273 = callmethodChecked(opresult3271, "++", [1], string3257);
                                                                    var opresult3275 = callmethodChecked(opresult3273, "++", [1], call3255);
                                                                    var opresult3277 = callmethodChecked(opresult3275, "++", [1], string3253);
                                                                    setLineNumber(1619);    // compilenode string
                                                                    var string3279 = new GraceString(") ");
                                                                    onSelf = true;
                                                                    var call3281 = callmethodChecked(this, "y", [0]);
                                                                    var string3283 = new GraceString(", ");
                                                                    onSelf = true;
                                                                    var call3285 = callmethodChecked(this, "x", [0]);
                                                                    var string3287 = new GraceString("FilledRect at (");
                                                                    var opresult3289 = callmethodChecked(string3287, "++", [1], call3285);
                                                                    var opresult3291 = callmethodChecked(opresult3289, "++", [1], string3283);
                                                                    var opresult3293 = callmethodChecked(opresult3291, "++", [1], call3281);
                                                                    var opresult3295 = callmethodChecked(opresult3293, "++", [1], string3279);
                                                                    var opresult3297 = callmethodChecked(opresult3295, "++", [1], opresult3277);
                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3297)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method asString does not have " + 
                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                    return opresult3297;
                                                                  };
                                                                  func3252.paramCounts = [0];
                                                                  obj3213.methods["asString"] = func3252;
                                                                  func3252.definitionLine = 1618;
                                                                  func3252.definitionModule = "stobjectdraw";
                                                                  setLineNumber(1605);    // compilenode call
                                                                  var call3298 = callmethodChecked(superDepth, "outer", [0]);
                                                                  onOuter = true;
                                                                  onSelf = true;
                                                                  var call3299 = callmethodChecked(call3298, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                  obj3213.superobj = call3299;
                                                                  if (call3299.data) obj3213.data = call3299.data;
                                                                  if (call3299.hasOwnProperty('_value'))
                                                                      obj3213._value = call3299._value;
                                                                  setLineNumber(1607);    // compilenode identifier
                                                                  onSelf = true;
                                                                  var call3300 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                  superDepth = origSuperDepth;
                                                                };
                                                                obj_init_3213.apply(obj3213, []);
                                                                setLineNumber(1600);    // return value
                                                                if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj3213)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method filledRectAt(1)size(1)on(1) does not have " + 
                                                                            callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                return obj3213;
                                                              };
                                                              func3210.paramTypes = [];
                                                              func3210.paramTypes.push([]);
                                                              func3210.paramTypes.push([]);
                                                              func3210.paramTypes.push([]);
                                                              func3210.paramCounts = [1, 1, 1];
                                                              this.methods["filledRectAt()size()on"] = func3210;
                                                              func3210.definitionLine = 1600;
                                                              func3210.definitionModule = "stobjectdraw";
                                                                var func3301 = function(argcv) {    // method filledRectAt(1     )size(1     )on(1     )()object
                                                                  var curarg = 1;
                                                                  var var_location__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  var var_dimensions__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  var var_canvas__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  var inheritingObject = arguments[curarg++];
                                                                  // Start argument processing
                                                                  curarg = 1;
                                                                  onSelf = true;
                                                                  var call3302 = callmethodChecked(this, "Point", [0]);
                                                                  if (!Grace_isTrue(callmethod(call3302, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in filledRectAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                              callmethod(call3302, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  onSelf = true;
                                                                  var call3303 = callmethodChecked(this, "Point", [0]);
                                                                  if (!Grace_isTrue(callmethod(call3303, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                              callmethod(call3303, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  setLineNumber(1601);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                              callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument processing
                                                                  setModuleName("stobjectdraw");
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var obj3304 = Grace_allocObject(null, "filledRectAt()size()on");
                                                                  obj3304.definitionModule = "stobjectdraw";
                                                                  obj3304.definitionLine = 1600;
                                                                  var inho3304 = inheritingObject;
                                                                  while (inho3304.superobj) inho3304 = inho3304.superobj;
                                                                  inho3304.superobj = obj3304;
                                                                  obj3304.data = inheritingObject.data;
                                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                                    obj3304._value = inheritingObject._value;
                                                                  obj3304.outer = this;
                                                                  var reader_stobjectdraw_outer3305 = function() {
                                                                    return this.outer;
                                                                  };
                                                                  obj3304.methods["outer"] = reader_stobjectdraw_outer3305;
                                                                  var obj_init_3304 = function() {
                                                                    var origSuperDepth = superDepth;
                                                                    superDepth = obj3304;
                                                                    var func3306 = function(argcv) {    // method draw(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_ctx = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(1610);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                  callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("stobjectdraw");
                                                                      setLineNumber(1611);    // compilenode identifier
                                                                      var call3307 = callmethodChecked(var_ctx, "save", [0]);
                                                                      setLineNumber(1612);    // compilenode string
                                                                      var string3308 = new GraceString(")");
                                                                      onSelf = true;
                                                                      var call3310 = callmethodChecked(this, "color", [0]);
                                                                      var call3311 = callmethodChecked(call3310, "blue", [0]);
                                                                      var string3313 = new GraceString(", ");
                                                                      onSelf = true;
                                                                      var call3315 = callmethodChecked(this, "color", [0]);
                                                                      var call3316 = callmethodChecked(call3315, "green", [0]);
                                                                      var string3318 = new GraceString(", ");
                                                                      onSelf = true;
                                                                      var call3320 = callmethodChecked(this, "color", [0]);
                                                                      var call3321 = callmethodChecked(call3320, "red", [0]);
                                                                      var string3323 = new GraceString("rgb(");
                                                                      var opresult3325 = callmethodChecked(string3323, "++", [1], call3321);
                                                                      var opresult3327 = callmethodChecked(opresult3325, "++", [1], string3318);
                                                                      var opresult3329 = callmethodChecked(opresult3327, "++", [1], call3316);
                                                                      var opresult3331 = callmethodChecked(opresult3329, "++", [1], string3313);
                                                                      var opresult3333 = callmethodChecked(opresult3331, "++", [1], call3311);
                                                                      var opresult3335 = callmethodChecked(opresult3333, "++", [1], string3308);
                                                                      var call3336 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult3335);
                                                                      setLineNumber(1613);    // compilenode call
                                                                      onSelf = true;
                                                                      var call3337 = callmethodChecked(this, "x", [0]);
                                                                      onSelf = true;
                                                                      var call3338 = callmethodChecked(this, "y", [0]);
                                                                      onSelf = true;
                                                                      var call3339 = callmethodChecked(this, "width", [0]);
                                                                      onSelf = true;
                                                                      var call3340 = callmethodChecked(this, "height", [0]);
                                                                      var call3341 = callmethodChecked(var_ctx, "fillRect", [4], call3337, call3338, call3339, call3340);
                                                                      setLineNumber(1614);    // compilenode identifier
                                                                      var call3342 = callmethodChecked(var_ctx, "restore", [0]);
                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3342)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method draw(1) does not have " + 
                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                      return call3342;
                                                                    };
                                                                    func3306.paramTypes = [];
                                                                    func3306.paramTypes.push([]);
                                                                    func3306.paramCounts = [1];
                                                                    obj3304.methods["draw"] = func3306;
                                                                    func3306.definitionLine = 1610;
                                                                    func3306.definitionModule = "stobjectdraw";
                                                                    var func3343 = function(argcv) {    // method asString
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                      setModuleName("stobjectdraw");
                                                                      setLineNumber(1620);    // compilenode string
                                                                      var string3344 = new GraceString("");
                                                                      onSelf = true;
                                                                      var call3346 = callmethodChecked(this, "color", [0]);
                                                                      var string3348 = new GraceString(", and color ");
                                                                      onSelf = true;
                                                                      var call3350 = callmethodChecked(this, "width", [0]);
                                                                      var string3352 = new GraceString(", width ");
                                                                      onSelf = true;
                                                                      var call3354 = callmethodChecked(this, "height", [0]);
                                                                      var string3356 = new GraceString("with height ");
                                                                      var opresult3358 = callmethodChecked(string3356, "++", [1], call3354);
                                                                      var opresult3360 = callmethodChecked(opresult3358, "++", [1], string3352);
                                                                      var opresult3362 = callmethodChecked(opresult3360, "++", [1], call3350);
                                                                      var opresult3364 = callmethodChecked(opresult3362, "++", [1], string3348);
                                                                      var opresult3366 = callmethodChecked(opresult3364, "++", [1], call3346);
                                                                      var opresult3368 = callmethodChecked(opresult3366, "++", [1], string3344);
                                                                      setLineNumber(1619);    // compilenode string
                                                                      var string3370 = new GraceString(") ");
                                                                      onSelf = true;
                                                                      var call3372 = callmethodChecked(this, "y", [0]);
                                                                      var string3374 = new GraceString(", ");
                                                                      onSelf = true;
                                                                      var call3376 = callmethodChecked(this, "x", [0]);
                                                                      var string3378 = new GraceString("FilledRect at (");
                                                                      var opresult3380 = callmethodChecked(string3378, "++", [1], call3376);
                                                                      var opresult3382 = callmethodChecked(opresult3380, "++", [1], string3374);
                                                                      var opresult3384 = callmethodChecked(opresult3382, "++", [1], call3372);
                                                                      var opresult3386 = callmethodChecked(opresult3384, "++", [1], string3370);
                                                                      var opresult3388 = callmethodChecked(opresult3386, "++", [1], opresult3368);
                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3388)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method asString does not have " + 
                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                      return opresult3388;
                                                                    };
                                                                    func3343.paramCounts = [0];
                                                                    obj3304.methods["asString"] = func3343;
                                                                    func3343.definitionLine = 1618;
                                                                    func3343.definitionModule = "stobjectdraw";
                                                                    setLineNumber(1605);    // compilenode call
                                                                    var call3389 = callmethodChecked(superDepth, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call3390 = callmethodChecked(call3389, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                    obj3304.superobj = call3390;
                                                                    if (call3390.data) obj3304.data = call3390.data;
                                                                    if (call3390.hasOwnProperty('_value'))
                                                                        obj3304._value = call3390._value;
                                                                    setLineNumber(1607);    // compilenode identifier
                                                                    onSelf = true;
                                                                    var call3391 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                    superDepth = origSuperDepth;
                                                                  };
                                                                  obj_init_3304.apply(inheritingObject, []);
                                                                  return obj3304;
                                                                  };
                                                                  func3301.paramTypes = [];
                                                                  func3301.paramTypes.push([]);
                                                                  func3301.paramTypes.push([]);
                                                                  func3301.paramTypes.push([]);
                                                                  this.methods["filledRectAt()size()on()object"] = func3301;
                                                                setLineNumber(1625);    // compilenode method
                                                                var func3392 = function(argcv) {    // method framedOvalAt(1)size(1)on(1)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_location__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[0] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for framedOvalAt (arg list 1) of framedOvalAt(1)size(1)on(1)"));
                                                                  var var_dimensions__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[1] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of framedOvalAt(1)size(1)on(1)"));
                                                                  var var_canvas__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  if (argcv[2] !== 1)
                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of framedOvalAt(1)size(1)on(1)"));
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  onSelf = true;
                                                                  var call3393 = callmethodChecked(this, "Point", [0]);
                                                                  if (!Grace_isTrue(callmethod(call3393, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in framedOvalAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                              callmethod(call3393, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  onSelf = true;
                                                                  var call3394 = callmethodChecked(this, "Point", [0]);
                                                                  if (!Grace_isTrue(callmethod(call3394, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                              callmethod(call3394, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  setLineNumber(1626);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                              callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("stobjectdraw");
                                                                  setLineNumber(1625);    // compilenode object
                                                                  var obj3395 = Grace_allocObject(null, "stobjectdraw.framedOvalAt()size()on");
                                                                  obj3395.definitionModule = "stobjectdraw";
                                                                  obj3395.definitionLine = 1625;
                                                                  obj3395.outer = this;
                                                                  var reader_stobjectdraw_outer3396 = function() {
                                                                    return this.outer;
                                                                  };
                                                                  obj3395.methods["outer"] = reader_stobjectdraw_outer3396;
                                                                  var obj_init_3395 = function() {
                                                                    var origSuperDepth = superDepth;
                                                                    superDepth = obj3395;
                                                                    var func3397 = function(argcv) {    // method draw(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_ctx = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(1634);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                  callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("stobjectdraw");
                                                                      setLineNumber(1635);    // compilenode identifier
                                                                      var call3398 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                      setLineNumber(1636);    // compilenode identifier
                                                                      var call3399 = callmethodChecked(var_ctx, "save", [0]);
                                                                      setLineNumber(1637);    // compilenode call
                                                                      onSelf = true;
                                                                      var call3401 = callmethodChecked(this, "width", [0]);
                                                                      var quotient3403 = callmethodChecked(call3401, "/", [1], new GraceNum(2));
                                                                      onSelf = true;
                                                                      var call3405 = callmethodChecked(this, "x", [0]);
                                                                      var opresult3407 = callmethodChecked(call3405, "+", [1], quotient3403);
                                                                      onSelf = true;
                                                                      var call3409 = callmethodChecked(this, "height", [0]);
                                                                      var quotient3411 = callmethodChecked(call3409, "/", [1], new GraceNum(2));
                                                                      onSelf = true;
                                                                      var call3413 = callmethodChecked(this, "y", [0]);
                                                                      var opresult3415 = callmethodChecked(call3413, "+", [1], quotient3411);
                                                                      var call3416 = callmethodChecked(var_ctx, "translate", [2], opresult3407, opresult3415);
                                                                      setLineNumber(1638);    // compilenode call
                                                                      onSelf = true;
                                                                      var call3418 = callmethodChecked(this, "width", [0]);
                                                                      var quotient3420 = callmethodChecked(call3418, "/", [1], new GraceNum(2));
                                                                      onSelf = true;
                                                                      var call3422 = callmethodChecked(this, "height", [0]);
                                                                      var quotient3424 = callmethodChecked(call3422, "/", [1], new GraceNum(2));
                                                                      var call3425 = callmethodChecked(var_ctx, "scale", [2], quotient3420, quotient3424);
                                                                      setLineNumber(1639);    // compilenode num
                                                                      var prod3428 = callmethodChecked(new GraceNum(2), "*", [1], var_pi);
                                                                      var call3429 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), new GraceNum(0), prod3428);
                                                                      setLineNumber(1640);    // compilenode identifier
                                                                      var call3430 = callmethodChecked(var_ctx, "restore", [0]);
                                                                      setLineNumber(1641);    // compilenode identifier
                                                                      var call3431 = callmethodChecked(var_ctx, "save", [0]);
                                                                      setLineNumber(1642);    // compilenode string
                                                                      var string3432 = new GraceString(")");
                                                                      onSelf = true;
                                                                      var call3434 = callmethodChecked(this, "color", [0]);
                                                                      var call3435 = callmethodChecked(call3434, "blue", [0]);
                                                                      var string3437 = new GraceString(", ");
                                                                      onSelf = true;
                                                                      var call3439 = callmethodChecked(this, "color", [0]);
                                                                      var call3440 = callmethodChecked(call3439, "green", [0]);
                                                                      var string3442 = new GraceString(", ");
                                                                      onSelf = true;
                                                                      var call3444 = callmethodChecked(this, "color", [0]);
                                                                      var call3445 = callmethodChecked(call3444, "red", [0]);
                                                                      var string3447 = new GraceString("rgb(");
                                                                      var opresult3449 = callmethodChecked(string3447, "++", [1], call3445);
                                                                      var opresult3451 = callmethodChecked(opresult3449, "++", [1], string3442);
                                                                      var opresult3453 = callmethodChecked(opresult3451, "++", [1], call3440);
                                                                      var opresult3455 = callmethodChecked(opresult3453, "++", [1], string3437);
                                                                      var opresult3457 = callmethodChecked(opresult3455, "++", [1], call3435);
                                                                      var opresult3459 = callmethodChecked(opresult3457, "++", [1], string3432);
                                                                      var call3460 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult3459);
                                                                      setLineNumber(1643);    // compilenode identifier
                                                                      var call3461 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                      setLineNumber(1644);    // compilenode identifier
                                                                      var call3462 = callmethodChecked(var_ctx, "restore", [0]);
                                                                      setLineNumber(1645);    // compilenode identifier
                                                                      var call3463 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3463)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method draw(1) does not have " + 
                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                      return call3463;
                                                                    };
                                                                    func3397.paramTypes = [];
                                                                    func3397.paramTypes.push([]);
                                                                    func3397.paramCounts = [1];
                                                                    obj3395.methods["draw"] = func3397;
                                                                    func3397.definitionLine = 1634;
                                                                    func3397.definitionModule = "stobjectdraw";
                                                                    var func3464 = function(argcv) {    // method asString
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      if (argcv[0] !== 0)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                      setModuleName("stobjectdraw");
                                                                      setLineNumber(1651);    // compilenode string
                                                                      var string3465 = new GraceString("");
                                                                      onSelf = true;
                                                                      var call3467 = callmethodChecked(this, "color", [0]);
                                                                      var string3469 = new GraceString(", and color ");
                                                                      onSelf = true;
                                                                      var call3471 = callmethodChecked(this, "width", [0]);
                                                                      var string3473 = new GraceString(", width ");
                                                                      onSelf = true;
                                                                      var call3475 = callmethodChecked(this, "height", [0]);
                                                                      var string3477 = new GraceString("with height ");
                                                                      var opresult3479 = callmethodChecked(string3477, "++", [1], call3475);
                                                                      var opresult3481 = callmethodChecked(opresult3479, "++", [1], string3473);
                                                                      var opresult3483 = callmethodChecked(opresult3481, "++", [1], call3471);
                                                                      var opresult3485 = callmethodChecked(opresult3483, "++", [1], string3469);
                                                                      var opresult3487 = callmethodChecked(opresult3485, "++", [1], call3467);
                                                                      var opresult3489 = callmethodChecked(opresult3487, "++", [1], string3465);
                                                                      setLineNumber(1650);    // compilenode string
                                                                      var string3491 = new GraceString(") ");
                                                                      onSelf = true;
                                                                      var call3493 = callmethodChecked(this, "y", [0]);
                                                                      var string3495 = new GraceString(",");
                                                                      onSelf = true;
                                                                      var call3497 = callmethodChecked(this, "x", [0]);
                                                                      var string3499 = new GraceString("FramedOval at (");
                                                                      var opresult3501 = callmethodChecked(string3499, "++", [1], call3497);
                                                                      var opresult3503 = callmethodChecked(opresult3501, "++", [1], string3495);
                                                                      var opresult3505 = callmethodChecked(opresult3503, "++", [1], call3493);
                                                                      var opresult3507 = callmethodChecked(opresult3505, "++", [1], string3491);
                                                                      var opresult3509 = callmethodChecked(opresult3507, "++", [1], opresult3489);
                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3509)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method asString does not have " + 
                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                      return opresult3509;
                                                                    };
                                                                    func3464.paramCounts = [0];
                                                                    obj3395.methods["asString"] = func3464;
                                                                    func3464.definitionLine = 1649;
                                                                    func3464.definitionModule = "stobjectdraw";
                                                                    setLineNumber(1630);    // compilenode call
                                                                    var call3510 = callmethodChecked(superDepth, "outer", [0]);
                                                                    onOuter = true;
                                                                    onSelf = true;
                                                                    var call3511 = callmethodChecked(call3510, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                    obj3395.superobj = call3511;
                                                                    if (call3511.data) obj3395.data = call3511.data;
                                                                    if (call3511.hasOwnProperty('_value'))
                                                                        obj3395._value = call3511._value;
                                                                    setLineNumber(1631);    // compilenode identifier
                                                                    onSelf = true;
                                                                    var call3512 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                    superDepth = origSuperDepth;
                                                                  };
                                                                  obj_init_3395.apply(obj3395, []);
                                                                  setLineNumber(1625);    // return value
                                                                  if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj3395)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method framedOvalAt(1)size(1)on(1) does not have " + 
                                                                              callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                  return obj3395;
                                                                };
                                                                func3392.paramTypes = [];
                                                                func3392.paramTypes.push([]);
                                                                func3392.paramTypes.push([]);
                                                                func3392.paramTypes.push([]);
                                                                func3392.paramCounts = [1, 1, 1];
                                                                this.methods["framedOvalAt()size()on"] = func3392;
                                                                func3392.definitionLine = 1625;
                                                                func3392.definitionModule = "stobjectdraw";
                                                                  var func3513 = function(argcv) {    // method framedOvalAt(1     )size(1     )on(1     )()object
                                                                    var curarg = 1;
                                                                    var var_location__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    var var_dimensions__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    var var_canvas__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    var inheritingObject = arguments[curarg++];
                                                                    // Start argument processing
                                                                    curarg = 1;
                                                                    onSelf = true;
                                                                    var call3514 = callmethodChecked(this, "Point", [0]);
                                                                    if (!Grace_isTrue(callmethod(call3514, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in framedOvalAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                callmethod(call3514, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    onSelf = true;
                                                                    var call3515 = callmethodChecked(this, "Point", [0]);
                                                                    if (!Grace_isTrue(callmethod(call3515, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                callmethod(call3515, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    setLineNumber(1626);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument processing
                                                                    setModuleName("stobjectdraw");
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var obj3516 = Grace_allocObject(null, "framedOvalAt()size()on");
                                                                    obj3516.definitionModule = "stobjectdraw";
                                                                    obj3516.definitionLine = 1625;
                                                                    var inho3516 = inheritingObject;
                                                                    while (inho3516.superobj) inho3516 = inho3516.superobj;
                                                                    inho3516.superobj = obj3516;
                                                                    obj3516.data = inheritingObject.data;
                                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                                      obj3516._value = inheritingObject._value;
                                                                    obj3516.outer = this;
                                                                    var reader_stobjectdraw_outer3517 = function() {
                                                                      return this.outer;
                                                                    };
                                                                    obj3516.methods["outer"] = reader_stobjectdraw_outer3517;
                                                                    var obj_init_3516 = function() {
                                                                      var origSuperDepth = superDepth;
                                                                      superDepth = obj3516;
                                                                      var func3518 = function(argcv) {    // method draw(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_ctx = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(1634);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                    callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("stobjectdraw");
                                                                        setLineNumber(1635);    // compilenode identifier
                                                                        var call3519 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                        setLineNumber(1636);    // compilenode identifier
                                                                        var call3520 = callmethodChecked(var_ctx, "save", [0]);
                                                                        setLineNumber(1637);    // compilenode call
                                                                        onSelf = true;
                                                                        var call3522 = callmethodChecked(this, "width", [0]);
                                                                        var quotient3524 = callmethodChecked(call3522, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3526 = callmethodChecked(this, "x", [0]);
                                                                        var opresult3528 = callmethodChecked(call3526, "+", [1], quotient3524);
                                                                        onSelf = true;
                                                                        var call3530 = callmethodChecked(this, "height", [0]);
                                                                        var quotient3532 = callmethodChecked(call3530, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3534 = callmethodChecked(this, "y", [0]);
                                                                        var opresult3536 = callmethodChecked(call3534, "+", [1], quotient3532);
                                                                        var call3537 = callmethodChecked(var_ctx, "translate", [2], opresult3528, opresult3536);
                                                                        setLineNumber(1638);    // compilenode call
                                                                        onSelf = true;
                                                                        var call3539 = callmethodChecked(this, "width", [0]);
                                                                        var quotient3541 = callmethodChecked(call3539, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3543 = callmethodChecked(this, "height", [0]);
                                                                        var quotient3545 = callmethodChecked(call3543, "/", [1], new GraceNum(2));
                                                                        var call3546 = callmethodChecked(var_ctx, "scale", [2], quotient3541, quotient3545);
                                                                        setLineNumber(1639);    // compilenode num
                                                                        var prod3549 = callmethodChecked(new GraceNum(2), "*", [1], var_pi);
                                                                        var call3550 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), new GraceNum(0), prod3549);
                                                                        setLineNumber(1640);    // compilenode identifier
                                                                        var call3551 = callmethodChecked(var_ctx, "restore", [0]);
                                                                        setLineNumber(1641);    // compilenode identifier
                                                                        var call3552 = callmethodChecked(var_ctx, "save", [0]);
                                                                        setLineNumber(1642);    // compilenode string
                                                                        var string3553 = new GraceString(")");
                                                                        onSelf = true;
                                                                        var call3555 = callmethodChecked(this, "color", [0]);
                                                                        var call3556 = callmethodChecked(call3555, "blue", [0]);
                                                                        var string3558 = new GraceString(", ");
                                                                        onSelf = true;
                                                                        var call3560 = callmethodChecked(this, "color", [0]);
                                                                        var call3561 = callmethodChecked(call3560, "green", [0]);
                                                                        var string3563 = new GraceString(", ");
                                                                        onSelf = true;
                                                                        var call3565 = callmethodChecked(this, "color", [0]);
                                                                        var call3566 = callmethodChecked(call3565, "red", [0]);
                                                                        var string3568 = new GraceString("rgb(");
                                                                        var opresult3570 = callmethodChecked(string3568, "++", [1], call3566);
                                                                        var opresult3572 = callmethodChecked(opresult3570, "++", [1], string3563);
                                                                        var opresult3574 = callmethodChecked(opresult3572, "++", [1], call3561);
                                                                        var opresult3576 = callmethodChecked(opresult3574, "++", [1], string3558);
                                                                        var opresult3578 = callmethodChecked(opresult3576, "++", [1], call3556);
                                                                        var opresult3580 = callmethodChecked(opresult3578, "++", [1], string3553);
                                                                        var call3581 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult3580);
                                                                        setLineNumber(1643);    // compilenode identifier
                                                                        var call3582 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                        setLineNumber(1644);    // compilenode identifier
                                                                        var call3583 = callmethodChecked(var_ctx, "restore", [0]);
                                                                        setLineNumber(1645);    // compilenode identifier
                                                                        var call3584 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3584)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method draw(1) does not have " + 
                                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                                        return call3584;
                                                                      };
                                                                      func3518.paramTypes = [];
                                                                      func3518.paramTypes.push([]);
                                                                      func3518.paramCounts = [1];
                                                                      obj3516.methods["draw"] = func3518;
                                                                      func3518.definitionLine = 1634;
                                                                      func3518.definitionModule = "stobjectdraw";
                                                                      var func3585 = function(argcv) {    // method asString
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                        setModuleName("stobjectdraw");
                                                                        setLineNumber(1651);    // compilenode string
                                                                        var string3586 = new GraceString("");
                                                                        onSelf = true;
                                                                        var call3588 = callmethodChecked(this, "color", [0]);
                                                                        var string3590 = new GraceString(", and color ");
                                                                        onSelf = true;
                                                                        var call3592 = callmethodChecked(this, "width", [0]);
                                                                        var string3594 = new GraceString(", width ");
                                                                        onSelf = true;
                                                                        var call3596 = callmethodChecked(this, "height", [0]);
                                                                        var string3598 = new GraceString("with height ");
                                                                        var opresult3600 = callmethodChecked(string3598, "++", [1], call3596);
                                                                        var opresult3602 = callmethodChecked(opresult3600, "++", [1], string3594);
                                                                        var opresult3604 = callmethodChecked(opresult3602, "++", [1], call3592);
                                                                        var opresult3606 = callmethodChecked(opresult3604, "++", [1], string3590);
                                                                        var opresult3608 = callmethodChecked(opresult3606, "++", [1], call3588);
                                                                        var opresult3610 = callmethodChecked(opresult3608, "++", [1], string3586);
                                                                        setLineNumber(1650);    // compilenode string
                                                                        var string3612 = new GraceString(") ");
                                                                        onSelf = true;
                                                                        var call3614 = callmethodChecked(this, "y", [0]);
                                                                        var string3616 = new GraceString(",");
                                                                        onSelf = true;
                                                                        var call3618 = callmethodChecked(this, "x", [0]);
                                                                        var string3620 = new GraceString("FramedOval at (");
                                                                        var opresult3622 = callmethodChecked(string3620, "++", [1], call3618);
                                                                        var opresult3624 = callmethodChecked(opresult3622, "++", [1], string3616);
                                                                        var opresult3626 = callmethodChecked(opresult3624, "++", [1], call3614);
                                                                        var opresult3628 = callmethodChecked(opresult3626, "++", [1], string3612);
                                                                        var opresult3630 = callmethodChecked(opresult3628, "++", [1], opresult3610);
                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3630)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method asString does not have " + 
                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                        return opresult3630;
                                                                      };
                                                                      func3585.paramCounts = [0];
                                                                      obj3516.methods["asString"] = func3585;
                                                                      func3585.definitionLine = 1649;
                                                                      func3585.definitionModule = "stobjectdraw";
                                                                      setLineNumber(1630);    // compilenode call
                                                                      var call3631 = callmethodChecked(superDepth, "outer", [0]);
                                                                      onOuter = true;
                                                                      onSelf = true;
                                                                      var call3632 = callmethodChecked(call3631, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                      obj3516.superobj = call3632;
                                                                      if (call3632.data) obj3516.data = call3632.data;
                                                                      if (call3632.hasOwnProperty('_value'))
                                                                          obj3516._value = call3632._value;
                                                                      setLineNumber(1631);    // compilenode identifier
                                                                      onSelf = true;
                                                                      var call3633 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                      superDepth = origSuperDepth;
                                                                    };
                                                                    obj_init_3516.apply(inheritingObject, []);
                                                                    return obj3516;
                                                                    };
                                                                    func3513.paramTypes = [];
                                                                    func3513.paramTypes.push([]);
                                                                    func3513.paramTypes.push([]);
                                                                    func3513.paramTypes.push([]);
                                                                    this.methods["framedOvalAt()size()on()object"] = func3513;
                                                                  setLineNumber(1655);    // compilenode method
                                                                  var func3634 = function(argcv) {    // method filledOvalAt(1)size(1)on(1)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_location__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[0] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for filledOvalAt (arg list 1) of filledOvalAt(1)size(1)on(1)"));
                                                                    var var_dimensions__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[1] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of filledOvalAt(1)size(1)on(1)"));
                                                                    var var_canvas__39__ = arguments[curarg];
                                                                    curarg++;
                                                                    if (argcv[2] !== 1)
                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of filledOvalAt(1)size(1)on(1)"));
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    onSelf = true;
                                                                    var call3635 = callmethodChecked(this, "Point", [0]);
                                                                    if (!Grace_isTrue(callmethod(call3635, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in filledOvalAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                callmethod(call3635, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    onSelf = true;
                                                                    var call3636 = callmethodChecked(this, "Point", [0]);
                                                                    if (!Grace_isTrue(callmethod(call3636, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                callmethod(call3636, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    setLineNumber(1656);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("stobjectdraw");
                                                                    setLineNumber(1655);    // compilenode object
                                                                    var obj3637 = Grace_allocObject(null, "stobjectdraw.filledOvalAt()size()on");
                                                                    obj3637.definitionModule = "stobjectdraw";
                                                                    obj3637.definitionLine = 1655;
                                                                    obj3637.outer = this;
                                                                    var reader_stobjectdraw_outer3638 = function() {
                                                                      return this.outer;
                                                                    };
                                                                    obj3637.methods["outer"] = reader_stobjectdraw_outer3638;
                                                                    var obj_init_3637 = function() {
                                                                      var origSuperDepth = superDepth;
                                                                      superDepth = obj3637;
                                                                      var func3639 = function(argcv) {    // method draw(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_ctx = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(1665);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                    callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("stobjectdraw");
                                                                        setLineNumber(1666);    // compilenode identifier
                                                                        var call3640 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                        setLineNumber(1667);    // compilenode identifier
                                                                        var call3641 = callmethodChecked(var_ctx, "save", [0]);
                                                                        setLineNumber(1668);    // compilenode call
                                                                        onSelf = true;
                                                                        var call3643 = callmethodChecked(this, "width", [0]);
                                                                        var quotient3645 = callmethodChecked(call3643, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3647 = callmethodChecked(this, "x", [0]);
                                                                        var opresult3649 = callmethodChecked(call3647, "+", [1], quotient3645);
                                                                        onSelf = true;
                                                                        var call3651 = callmethodChecked(this, "height", [0]);
                                                                        var quotient3653 = callmethodChecked(call3651, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3655 = callmethodChecked(this, "y", [0]);
                                                                        var opresult3657 = callmethodChecked(call3655, "+", [1], quotient3653);
                                                                        var call3658 = callmethodChecked(var_ctx, "translate", [2], opresult3649, opresult3657);
                                                                        setLineNumber(1669);    // compilenode call
                                                                        onSelf = true;
                                                                        var call3660 = callmethodChecked(this, "width", [0]);
                                                                        var quotient3662 = callmethodChecked(call3660, "/", [1], new GraceNum(2));
                                                                        onSelf = true;
                                                                        var call3664 = callmethodChecked(this, "height", [0]);
                                                                        var quotient3666 = callmethodChecked(call3664, "/", [1], new GraceNum(2));
                                                                        var call3667 = callmethodChecked(var_ctx, "scale", [2], quotient3662, quotient3666);
                                                                        setLineNumber(1670);    // compilenode num
                                                                        var prod3670 = callmethodChecked(new GraceNum(2), "*", [1], var_pi);
                                                                        var call3671 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), new GraceNum(0), prod3670);
                                                                        setLineNumber(1671);    // compilenode identifier
                                                                        var call3672 = callmethodChecked(var_ctx, "restore", [0]);
                                                                        setLineNumber(1672);    // compilenode identifier
                                                                        var call3673 = callmethodChecked(var_ctx, "save", [0]);
                                                                        setLineNumber(1673);    // compilenode string
                                                                        var string3674 = new GraceString(")");
                                                                        onSelf = true;
                                                                        var call3676 = callmethodChecked(this, "color", [0]);
                                                                        var call3677 = callmethodChecked(call3676, "blue", [0]);
                                                                        var string3679 = new GraceString(", ");
                                                                        onSelf = true;
                                                                        var call3681 = callmethodChecked(this, "color", [0]);
                                                                        var call3682 = callmethodChecked(call3681, "green", [0]);
                                                                        var string3684 = new GraceString(", ");
                                                                        onSelf = true;
                                                                        var call3686 = callmethodChecked(this, "color", [0]);
                                                                        var call3687 = callmethodChecked(call3686, "red", [0]);
                                                                        var string3689 = new GraceString("rgb(");
                                                                        var opresult3691 = callmethodChecked(string3689, "++", [1], call3687);
                                                                        var opresult3693 = callmethodChecked(opresult3691, "++", [1], string3684);
                                                                        var opresult3695 = callmethodChecked(opresult3693, "++", [1], call3682);
                                                                        var opresult3697 = callmethodChecked(opresult3695, "++", [1], string3679);
                                                                        var opresult3699 = callmethodChecked(opresult3697, "++", [1], call3677);
                                                                        var opresult3701 = callmethodChecked(opresult3699, "++", [1], string3674);
                                                                        var call3702 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult3701);
                                                                        setLineNumber(1674);    // compilenode identifier
                                                                        var call3703 = callmethodChecked(var_ctx, "fill", [0]);
                                                                        setLineNumber(1675);    // compilenode identifier
                                                                        var call3704 = callmethodChecked(var_ctx, "restore", [0]);
                                                                        setLineNumber(1676);    // compilenode identifier
                                                                        var call3705 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3705)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method draw(1) does not have " + 
                                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                                        return call3705;
                                                                      };
                                                                      func3639.paramTypes = [];
                                                                      func3639.paramTypes.push([]);
                                                                      func3639.paramCounts = [1];
                                                                      obj3637.methods["draw"] = func3639;
                                                                      func3639.definitionLine = 1665;
                                                                      func3639.definitionModule = "stobjectdraw";
                                                                      var func3706 = function(argcv) {    // method asString
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        if (argcv[0] !== 0)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                        setModuleName("stobjectdraw");
                                                                        setLineNumber(1682);    // compilenode string
                                                                        var string3707 = new GraceString("");
                                                                        onSelf = true;
                                                                        var call3709 = callmethodChecked(this, "color", [0]);
                                                                        var string3711 = new GraceString(", and color ");
                                                                        onSelf = true;
                                                                        var call3713 = callmethodChecked(this, "width", [0]);
                                                                        var string3715 = new GraceString(", width ");
                                                                        onSelf = true;
                                                                        var call3717 = callmethodChecked(this, "height", [0]);
                                                                        var string3719 = new GraceString("with height ");
                                                                        var opresult3721 = callmethodChecked(string3719, "++", [1], call3717);
                                                                        var opresult3723 = callmethodChecked(opresult3721, "++", [1], string3715);
                                                                        var opresult3725 = callmethodChecked(opresult3723, "++", [1], call3713);
                                                                        var opresult3727 = callmethodChecked(opresult3725, "++", [1], string3711);
                                                                        var opresult3729 = callmethodChecked(opresult3727, "++", [1], call3709);
                                                                        var opresult3731 = callmethodChecked(opresult3729, "++", [1], string3707);
                                                                        setLineNumber(1681);    // compilenode string
                                                                        var string3733 = new GraceString(") ");
                                                                        onSelf = true;
                                                                        var call3735 = callmethodChecked(this, "y", [0]);
                                                                        var string3737 = new GraceString(",");
                                                                        onSelf = true;
                                                                        var call3739 = callmethodChecked(this, "x", [0]);
                                                                        var string3741 = new GraceString("FilledOval at (");
                                                                        var opresult3743 = callmethodChecked(string3741, "++", [1], call3739);
                                                                        var opresult3745 = callmethodChecked(opresult3743, "++", [1], string3737);
                                                                        var opresult3747 = callmethodChecked(opresult3745, "++", [1], call3735);
                                                                        var opresult3749 = callmethodChecked(opresult3747, "++", [1], string3733);
                                                                        var opresult3751 = callmethodChecked(opresult3749, "++", [1], opresult3731);
                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3751)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method asString does not have " + 
                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                        return opresult3751;
                                                                      };
                                                                      func3706.paramCounts = [0];
                                                                      obj3637.methods["asString"] = func3706;
                                                                      func3706.definitionLine = 1680;
                                                                      func3706.definitionModule = "stobjectdraw";
                                                                      setLineNumber(1660);    // compilenode call
                                                                      var call3752 = callmethodChecked(superDepth, "outer", [0]);
                                                                      onOuter = true;
                                                                      onSelf = true;
                                                                      var call3753 = callmethodChecked(call3752, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                      obj3637.superobj = call3753;
                                                                      if (call3753.data) obj3637.data = call3753.data;
                                                                      if (call3753.hasOwnProperty('_value'))
                                                                          obj3637._value = call3753._value;
                                                                      setLineNumber(1662);    // compilenode identifier
                                                                      onSelf = true;
                                                                      var call3754 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                      superDepth = origSuperDepth;
                                                                    };
                                                                    obj_init_3637.apply(obj3637, []);
                                                                    setLineNumber(1655);    // return value
                                                                    if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj3637)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method filledOvalAt(1)size(1)on(1) does not have " + 
                                                                                callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                    return obj3637;
                                                                  };
                                                                  func3634.paramTypes = [];
                                                                  func3634.paramTypes.push([]);
                                                                  func3634.paramTypes.push([]);
                                                                  func3634.paramTypes.push([]);
                                                                  func3634.paramCounts = [1, 1, 1];
                                                                  this.methods["filledOvalAt()size()on"] = func3634;
                                                                  func3634.definitionLine = 1655;
                                                                  func3634.definitionModule = "stobjectdraw";
                                                                    var func3755 = function(argcv) {    // method filledOvalAt(1     )size(1     )on(1     )()object
                                                                      var curarg = 1;
                                                                      var var_location__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      var var_dimensions__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      var var_canvas__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      var inheritingObject = arguments[curarg++];
                                                                      // Start argument processing
                                                                      curarg = 1;
                                                                      onSelf = true;
                                                                      var call3756 = callmethodChecked(this, "Point", [0]);
                                                                      if (!Grace_isTrue(callmethod(call3756, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in filledOvalAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                  callmethod(call3756, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      onSelf = true;
                                                                      var call3757 = callmethodChecked(this, "Point", [0]);
                                                                      if (!Grace_isTrue(callmethod(call3757, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                  callmethod(call3757, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      setLineNumber(1656);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                  callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument processing
                                                                      setModuleName("stobjectdraw");
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var obj3758 = Grace_allocObject(null, "filledOvalAt()size()on");
                                                                      obj3758.definitionModule = "stobjectdraw";
                                                                      obj3758.definitionLine = 1655;
                                                                      var inho3758 = inheritingObject;
                                                                      while (inho3758.superobj) inho3758 = inho3758.superobj;
                                                                      inho3758.superobj = obj3758;
                                                                      obj3758.data = inheritingObject.data;
                                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                                        obj3758._value = inheritingObject._value;
                                                                      obj3758.outer = this;
                                                                      var reader_stobjectdraw_outer3759 = function() {
                                                                        return this.outer;
                                                                      };
                                                                      obj3758.methods["outer"] = reader_stobjectdraw_outer3759;
                                                                      var obj_init_3758 = function() {
                                                                        var origSuperDepth = superDepth;
                                                                        superDepth = obj3758;
                                                                        var func3760 = function(argcv) {    // method draw(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_ctx = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(1665);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                      callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("stobjectdraw");
                                                                          setLineNumber(1666);    // compilenode identifier
                                                                          var call3761 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                          setLineNumber(1667);    // compilenode identifier
                                                                          var call3762 = callmethodChecked(var_ctx, "save", [0]);
                                                                          setLineNumber(1668);    // compilenode call
                                                                          onSelf = true;
                                                                          var call3764 = callmethodChecked(this, "width", [0]);
                                                                          var quotient3766 = callmethodChecked(call3764, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3768 = callmethodChecked(this, "x", [0]);
                                                                          var opresult3770 = callmethodChecked(call3768, "+", [1], quotient3766);
                                                                          onSelf = true;
                                                                          var call3772 = callmethodChecked(this, "height", [0]);
                                                                          var quotient3774 = callmethodChecked(call3772, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3776 = callmethodChecked(this, "y", [0]);
                                                                          var opresult3778 = callmethodChecked(call3776, "+", [1], quotient3774);
                                                                          var call3779 = callmethodChecked(var_ctx, "translate", [2], opresult3770, opresult3778);
                                                                          setLineNumber(1669);    // compilenode call
                                                                          onSelf = true;
                                                                          var call3781 = callmethodChecked(this, "width", [0]);
                                                                          var quotient3783 = callmethodChecked(call3781, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3785 = callmethodChecked(this, "height", [0]);
                                                                          var quotient3787 = callmethodChecked(call3785, "/", [1], new GraceNum(2));
                                                                          var call3788 = callmethodChecked(var_ctx, "scale", [2], quotient3783, quotient3787);
                                                                          setLineNumber(1670);    // compilenode num
                                                                          var prod3791 = callmethodChecked(new GraceNum(2), "*", [1], var_pi);
                                                                          var call3792 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), new GraceNum(0), prod3791);
                                                                          setLineNumber(1671);    // compilenode identifier
                                                                          var call3793 = callmethodChecked(var_ctx, "restore", [0]);
                                                                          setLineNumber(1672);    // compilenode identifier
                                                                          var call3794 = callmethodChecked(var_ctx, "save", [0]);
                                                                          setLineNumber(1673);    // compilenode string
                                                                          var string3795 = new GraceString(")");
                                                                          onSelf = true;
                                                                          var call3797 = callmethodChecked(this, "color", [0]);
                                                                          var call3798 = callmethodChecked(call3797, "blue", [0]);
                                                                          var string3800 = new GraceString(", ");
                                                                          onSelf = true;
                                                                          var call3802 = callmethodChecked(this, "color", [0]);
                                                                          var call3803 = callmethodChecked(call3802, "green", [0]);
                                                                          var string3805 = new GraceString(", ");
                                                                          onSelf = true;
                                                                          var call3807 = callmethodChecked(this, "color", [0]);
                                                                          var call3808 = callmethodChecked(call3807, "red", [0]);
                                                                          var string3810 = new GraceString("rgb(");
                                                                          var opresult3812 = callmethodChecked(string3810, "++", [1], call3808);
                                                                          var opresult3814 = callmethodChecked(opresult3812, "++", [1], string3805);
                                                                          var opresult3816 = callmethodChecked(opresult3814, "++", [1], call3803);
                                                                          var opresult3818 = callmethodChecked(opresult3816, "++", [1], string3800);
                                                                          var opresult3820 = callmethodChecked(opresult3818, "++", [1], call3798);
                                                                          var opresult3822 = callmethodChecked(opresult3820, "++", [1], string3795);
                                                                          var call3823 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult3822);
                                                                          setLineNumber(1674);    // compilenode identifier
                                                                          var call3824 = callmethodChecked(var_ctx, "fill", [0]);
                                                                          setLineNumber(1675);    // compilenode identifier
                                                                          var call3825 = callmethodChecked(var_ctx, "restore", [0]);
                                                                          setLineNumber(1676);    // compilenode identifier
                                                                          var call3826 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3826)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method draw(1) does not have " + 
                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                          return call3826;
                                                                        };
                                                                        func3760.paramTypes = [];
                                                                        func3760.paramTypes.push([]);
                                                                        func3760.paramCounts = [1];
                                                                        obj3758.methods["draw"] = func3760;
                                                                        func3760.definitionLine = 1665;
                                                                        func3760.definitionModule = "stobjectdraw";
                                                                        var func3827 = function(argcv) {    // method asString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                          setModuleName("stobjectdraw");
                                                                          setLineNumber(1682);    // compilenode string
                                                                          var string3828 = new GraceString("");
                                                                          onSelf = true;
                                                                          var call3830 = callmethodChecked(this, "color", [0]);
                                                                          var string3832 = new GraceString(", and color ");
                                                                          onSelf = true;
                                                                          var call3834 = callmethodChecked(this, "width", [0]);
                                                                          var string3836 = new GraceString(", width ");
                                                                          onSelf = true;
                                                                          var call3838 = callmethodChecked(this, "height", [0]);
                                                                          var string3840 = new GraceString("with height ");
                                                                          var opresult3842 = callmethodChecked(string3840, "++", [1], call3838);
                                                                          var opresult3844 = callmethodChecked(opresult3842, "++", [1], string3836);
                                                                          var opresult3846 = callmethodChecked(opresult3844, "++", [1], call3834);
                                                                          var opresult3848 = callmethodChecked(opresult3846, "++", [1], string3832);
                                                                          var opresult3850 = callmethodChecked(opresult3848, "++", [1], call3830);
                                                                          var opresult3852 = callmethodChecked(opresult3850, "++", [1], string3828);
                                                                          setLineNumber(1681);    // compilenode string
                                                                          var string3854 = new GraceString(") ");
                                                                          onSelf = true;
                                                                          var call3856 = callmethodChecked(this, "y", [0]);
                                                                          var string3858 = new GraceString(",");
                                                                          onSelf = true;
                                                                          var call3860 = callmethodChecked(this, "x", [0]);
                                                                          var string3862 = new GraceString("FilledOval at (");
                                                                          var opresult3864 = callmethodChecked(string3862, "++", [1], call3860);
                                                                          var opresult3866 = callmethodChecked(opresult3864, "++", [1], string3858);
                                                                          var opresult3868 = callmethodChecked(opresult3866, "++", [1], call3856);
                                                                          var opresult3870 = callmethodChecked(opresult3868, "++", [1], string3854);
                                                                          var opresult3872 = callmethodChecked(opresult3870, "++", [1], opresult3852);
                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult3872)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method asString does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          return opresult3872;
                                                                        };
                                                                        func3827.paramCounts = [0];
                                                                        obj3758.methods["asString"] = func3827;
                                                                        func3827.definitionLine = 1680;
                                                                        func3827.definitionModule = "stobjectdraw";
                                                                        setLineNumber(1660);    // compilenode call
                                                                        var call3873 = callmethodChecked(superDepth, "outer", [0]);
                                                                        onOuter = true;
                                                                        onSelf = true;
                                                                        var call3874 = callmethodChecked(call3873, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                        obj3758.superobj = call3874;
                                                                        if (call3874.data) obj3758.data = call3874.data;
                                                                        if (call3874.hasOwnProperty('_value'))
                                                                            obj3758._value = call3874._value;
                                                                        setLineNumber(1662);    // compilenode identifier
                                                                        onSelf = true;
                                                                        var call3875 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                        superDepth = origSuperDepth;
                                                                      };
                                                                      obj_init_3758.apply(inheritingObject, []);
                                                                      return obj3758;
                                                                      };
                                                                      func3755.paramTypes = [];
                                                                      func3755.paramTypes.push([]);
                                                                      func3755.paramTypes.push([]);
                                                                      func3755.paramTypes.push([]);
                                                                      this.methods["filledOvalAt()size()on()object"] = func3755;
                                                                    setLineNumber(1686);    // compilenode method
                                                                    var func3876 = function(argcv) {    // method framedArcAt(1)size(1)from(1)to(1)on(1)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_location__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[0] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for framedArcAt (arg list 1) of framedArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                      var var_dimensions__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[1] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of framedArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                      var var_startAngle = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[2] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 3) of framedArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                      var var_endAngle = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[3] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 4) of framedArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                      var var_canvas__39__ = arguments[curarg];
                                                                      curarg++;
                                                                      if (argcv[4] !== 1)
                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 5) of framedArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      onSelf = true;
                                                                      var call3877 = callmethodChecked(this, "Point", [0]);
                                                                      if (!Grace_isTrue(callmethod(call3877, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in framedArcAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                  callmethod(call3877, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      onSelf = true;
                                                                      var call3878 = callmethodChecked(this, "Point", [0]);
                                                                      if (!Grace_isTrue(callmethod(call3878, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                  callmethod(call3878, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      setLineNumber(1687);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in from (arg list 3), which corresponds to parameter startAngle, does not have " + 
                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in to (arg list 4), which corresponds to parameter endAngle, does not have " + 
                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      setLineNumber(1688);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in on (arg list 5), which corresponds to parameter canvas', does not have " + 
                                                                                  callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("stobjectdraw");
                                                                      setLineNumber(1686);    // compilenode object
                                                                      var obj3879 = Grace_allocObject(null, "stobjectdraw.framedArcAt()size()from()to()on");
                                                                      obj3879.definitionModule = "stobjectdraw";
                                                                      obj3879.definitionLine = 1686;
                                                                      obj3879.outer = this;
                                                                      var reader_stobjectdraw_outer3880 = function() {
                                                                        return this.outer;
                                                                      };
                                                                      obj3879.methods["outer"] = reader_stobjectdraw_outer3880;
                                                                      var obj_init_3879 = function() {
                                                                        var origSuperDepth = superDepth;
                                                                        superDepth = obj3879;
                                                                        var func3881 = function(argcv) {    // method draw(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_ctx = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(1697);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                      callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("stobjectdraw");
                                                                          setLineNumber(1698);    // compilenode identifier
                                                                          var call3882 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                          setLineNumber(1699);    // compilenode identifier
                                                                          var call3883 = callmethodChecked(var_ctx, "save", [0]);
                                                                          setLineNumber(1700);    // compilenode call
                                                                          onSelf = true;
                                                                          var call3885 = callmethodChecked(this, "width", [0]);
                                                                          var quotient3887 = callmethodChecked(call3885, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3889 = callmethodChecked(this, "x", [0]);
                                                                          var opresult3891 = callmethodChecked(call3889, "+", [1], quotient3887);
                                                                          onSelf = true;
                                                                          var call3893 = callmethodChecked(this, "height", [0]);
                                                                          var quotient3895 = callmethodChecked(call3893, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3897 = callmethodChecked(this, "y", [0]);
                                                                          var opresult3899 = callmethodChecked(call3897, "+", [1], quotient3895);
                                                                          var call3900 = callmethodChecked(var_ctx, "translate", [2], opresult3891, opresult3899);
                                                                          setLineNumber(1701);    // compilenode call
                                                                          onSelf = true;
                                                                          var call3902 = callmethodChecked(this, "width", [0]);
                                                                          var quotient3904 = callmethodChecked(call3902, "/", [1], new GraceNum(2));
                                                                          onSelf = true;
                                                                          var call3906 = callmethodChecked(this, "height", [0]);
                                                                          var quotient3908 = callmethodChecked(call3906, "/", [1], new GraceNum(2));
                                                                          var call3909 = callmethodChecked(var_ctx, "scale", [2], quotient3904, quotient3908);
                                                                          var if3910 = GraceDone;
                                                                          setLineNumber(1702);    // compilenode identifier
                                                                          var opresult3913 = callmethodChecked(var_startAngle, "\u2264", [1], var_endAngle);
                                                                          if (Grace_isTrue(opresult3913)) {
                                                                            setLineNumber(1703);    // compilenode identifier
                                                                            var prod3917 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                            var quotient3919 = callmethodChecked(prod3917, "/", [1], new GraceNum(180));
                                                                            var prod3923 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                            var quotient3925 = callmethodChecked(prod3923, "/", [1], new GraceNum(180));
                                                                            var call3926 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient3919, quotient3925);
                                                                            if3910 = call3926;
                                                                          } else {
                                                                            setLineNumber(1705);    // compilenode identifier
                                                                            var prod3930 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                            var quotient3932 = callmethodChecked(prod3930, "/", [1], new GraceNum(180));
                                                                            var prod3936 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                            var quotient3938 = callmethodChecked(prod3936, "/", [1], new GraceNum(180));
                                                                            var call3939 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient3932, quotient3938);
                                                                            if3910 = call3939;
                                                                          }
                                                                          setLineNumber(1707);    // compilenode identifier
                                                                          var call3940 = callmethodChecked(var_ctx, "restore", [0]);
                                                                          setLineNumber(1708);    // compilenode identifier
                                                                          var call3941 = callmethodChecked(var_ctx, "save", [0]);
                                                                          setLineNumber(1709);    // compilenode string
                                                                          var string3942 = new GraceString(")");
                                                                          onSelf = true;
                                                                          var call3944 = callmethodChecked(this, "color", [0]);
                                                                          var call3945 = callmethodChecked(call3944, "blue", [0]);
                                                                          var string3947 = new GraceString(", ");
                                                                          onSelf = true;
                                                                          var call3949 = callmethodChecked(this, "color", [0]);
                                                                          var call3950 = callmethodChecked(call3949, "green", [0]);
                                                                          var string3952 = new GraceString(", ");
                                                                          onSelf = true;
                                                                          var call3954 = callmethodChecked(this, "color", [0]);
                                                                          var call3955 = callmethodChecked(call3954, "red", [0]);
                                                                          var string3957 = new GraceString("rgb(");
                                                                          var opresult3959 = callmethodChecked(string3957, "++", [1], call3955);
                                                                          var opresult3961 = callmethodChecked(opresult3959, "++", [1], string3952);
                                                                          var opresult3963 = callmethodChecked(opresult3961, "++", [1], call3950);
                                                                          var opresult3965 = callmethodChecked(opresult3963, "++", [1], string3947);
                                                                          var opresult3967 = callmethodChecked(opresult3965, "++", [1], call3945);
                                                                          var opresult3969 = callmethodChecked(opresult3967, "++", [1], string3942);
                                                                          var call3970 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult3969);
                                                                          setLineNumber(1710);    // compilenode identifier
                                                                          var call3971 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                          setLineNumber(1711);    // compilenode identifier
                                                                          var call3972 = callmethodChecked(var_ctx, "restore", [0]);
                                                                          setLineNumber(1712);    // compilenode identifier
                                                                          var call3973 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call3973)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method draw(1) does not have " + 
                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                          return call3973;
                                                                        };
                                                                        func3881.paramTypes = [];
                                                                        func3881.paramTypes.push([]);
                                                                        func3881.paramCounts = [1];
                                                                        obj3879.methods["draw"] = func3881;
                                                                        func3881.definitionLine = 1697;
                                                                        func3881.definitionModule = "stobjectdraw";
                                                                        var func3974 = function(argcv) {    // method asString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          if (argcv[0] !== 0)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                          setModuleName("stobjectdraw");
                                                                          setLineNumber(1719);    // compilenode string
                                                                          var string3975 = new GraceString(" degrees");
                                                                          var string3978 = new GraceString(" degrees to ");
                                                                          var string3981 = new GraceString("from ");
                                                                          var opresult3983 = callmethodChecked(string3981, "++", [1], var_startAngle);
                                                                          var opresult3985 = callmethodChecked(opresult3983, "++", [1], string3978);
                                                                          var opresult3987 = callmethodChecked(opresult3985, "++", [1], var_endAngle);
                                                                          var opresult3989 = callmethodChecked(opresult3987, "++", [1], string3975);
                                                                          setLineNumber(1718);    // compilenode string
                                                                          var string3991 = new GraceString(" going ");
                                                                          onSelf = true;
                                                                          var call3993 = callmethodChecked(this, "color", [0]);
                                                                          var string3995 = new GraceString(", and color ");
                                                                          onSelf = true;
                                                                          var call3997 = callmethodChecked(this, "width", [0]);
                                                                          var string3999 = new GraceString(", width ");
                                                                          onSelf = true;
                                                                          var call4001 = callmethodChecked(this, "height", [0]);
                                                                          var string4003 = new GraceString("with height ");
                                                                          var opresult4005 = callmethodChecked(string4003, "++", [1], call4001);
                                                                          var opresult4007 = callmethodChecked(opresult4005, "++", [1], string3999);
                                                                          var opresult4009 = callmethodChecked(opresult4007, "++", [1], call3997);
                                                                          var opresult4011 = callmethodChecked(opresult4009, "++", [1], string3995);
                                                                          var opresult4013 = callmethodChecked(opresult4011, "++", [1], call3993);
                                                                          var opresult4015 = callmethodChecked(opresult4013, "++", [1], string3991);
                                                                          setLineNumber(1717);    // compilenode string
                                                                          var string4017 = new GraceString(") ");
                                                                          onSelf = true;
                                                                          var call4019 = callmethodChecked(this, "y", [0]);
                                                                          var string4021 = new GraceString(",");
                                                                          onSelf = true;
                                                                          var call4023 = callmethodChecked(this, "x", [0]);
                                                                          var string4025 = new GraceString("FramedArc at (");
                                                                          var opresult4027 = callmethodChecked(string4025, "++", [1], call4023);
                                                                          var opresult4029 = callmethodChecked(opresult4027, "++", [1], string4021);
                                                                          var opresult4031 = callmethodChecked(opresult4029, "++", [1], call4019);
                                                                          var opresult4033 = callmethodChecked(opresult4031, "++", [1], string4017);
                                                                          var opresult4035 = callmethodChecked(opresult4033, "++", [1], opresult4015);
                                                                          var opresult4037 = callmethodChecked(opresult4035, "++", [1], opresult3989);
                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4037)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method asString does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          return opresult4037;
                                                                        };
                                                                        func3974.paramCounts = [0];
                                                                        obj3879.methods["asString"] = func3974;
                                                                        func3974.definitionLine = 1716;
                                                                        func3974.definitionModule = "stobjectdraw";
                                                                        setLineNumber(1693);    // compilenode call
                                                                        var call4038 = callmethodChecked(superDepth, "outer", [0]);
                                                                        onOuter = true;
                                                                        onSelf = true;
                                                                        var call4039 = callmethodChecked(call4038, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                        obj3879.superobj = call4039;
                                                                        if (call4039.data) obj3879.data = call4039.data;
                                                                        if (call4039.hasOwnProperty('_value'))
                                                                            obj3879._value = call4039._value;
                                                                        setLineNumber(1694);    // compilenode identifier
                                                                        onSelf = true;
                                                                        var call4040 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                        superDepth = origSuperDepth;
                                                                      };
                                                                      obj_init_3879.apply(obj3879, []);
                                                                      setLineNumber(1686);    // return value
                                                                      if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj3879)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method framedArcAt(1)size(1)from(1)to(1)on(1) does not have " + 
                                                                                  callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                      return obj3879;
                                                                    };
                                                                    func3876.paramTypes = [];
                                                                    func3876.paramTypes.push([]);
                                                                    func3876.paramTypes.push([]);
                                                                    func3876.paramTypes.push([type_Number, "startAngle"]);
                                                                    func3876.paramTypes.push([type_Number, "endAngle"]);
                                                                    func3876.paramTypes.push([]);
                                                                    func3876.paramCounts = [1, 1, 1, 1, 1];
                                                                    this.methods["framedArcAt()size()from()to()on"] = func3876;
                                                                    func3876.definitionLine = 1686;
                                                                    func3876.definitionModule = "stobjectdraw";
                                                                      var func4041 = function(argcv) {    // method framedArcAt(1     )size(1     )from(1     )to(1     )on(1     )()object
                                                                        var curarg = 1;
                                                                        var var_location__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        var var_dimensions__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        var var_startAngle = arguments[curarg];
                                                                        curarg++;
                                                                        var var_endAngle = arguments[curarg];
                                                                        curarg++;
                                                                        var var_canvas__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        var inheritingObject = arguments[curarg++];
                                                                        // Start argument processing
                                                                        curarg = 1;
                                                                        onSelf = true;
                                                                        var call4042 = callmethodChecked(this, "Point", [0]);
                                                                        if (!Grace_isTrue(callmethod(call4042, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in framedArcAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                    callmethod(call4042, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        onSelf = true;
                                                                        var call4043 = callmethodChecked(this, "Point", [0]);
                                                                        if (!Grace_isTrue(callmethod(call4043, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                    callmethod(call4043, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        setLineNumber(1687);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in from (arg list 3), which corresponds to parameter startAngle, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in to (arg list 4), which corresponds to parameter endAngle, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        setLineNumber(1688);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in on (arg list 5), which corresponds to parameter canvas', does not have " + 
                                                                                    callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument processing
                                                                        setModuleName("stobjectdraw");
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var obj4044 = Grace_allocObject(null, "framedArcAt()size()from()to()on");
                                                                        obj4044.definitionModule = "stobjectdraw";
                                                                        obj4044.definitionLine = 1686;
                                                                        var inho4044 = inheritingObject;
                                                                        while (inho4044.superobj) inho4044 = inho4044.superobj;
                                                                        inho4044.superobj = obj4044;
                                                                        obj4044.data = inheritingObject.data;
                                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                                          obj4044._value = inheritingObject._value;
                                                                        obj4044.outer = this;
                                                                        var reader_stobjectdraw_outer4045 = function() {
                                                                          return this.outer;
                                                                        };
                                                                        obj4044.methods["outer"] = reader_stobjectdraw_outer4045;
                                                                        var obj_init_4044 = function() {
                                                                          var origSuperDepth = superDepth;
                                                                          superDepth = obj4044;
                                                                          var func4046 = function(argcv) {    // method draw(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_ctx = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            setLineNumber(1697);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                        callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("stobjectdraw");
                                                                            setLineNumber(1698);    // compilenode identifier
                                                                            var call4047 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                            setLineNumber(1699);    // compilenode identifier
                                                                            var call4048 = callmethodChecked(var_ctx, "save", [0]);
                                                                            setLineNumber(1700);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4050 = callmethodChecked(this, "width", [0]);
                                                                            var quotient4052 = callmethodChecked(call4050, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4054 = callmethodChecked(this, "x", [0]);
                                                                            var opresult4056 = callmethodChecked(call4054, "+", [1], quotient4052);
                                                                            onSelf = true;
                                                                            var call4058 = callmethodChecked(this, "height", [0]);
                                                                            var quotient4060 = callmethodChecked(call4058, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4062 = callmethodChecked(this, "y", [0]);
                                                                            var opresult4064 = callmethodChecked(call4062, "+", [1], quotient4060);
                                                                            var call4065 = callmethodChecked(var_ctx, "translate", [2], opresult4056, opresult4064);
                                                                            setLineNumber(1701);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4067 = callmethodChecked(this, "width", [0]);
                                                                            var quotient4069 = callmethodChecked(call4067, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4071 = callmethodChecked(this, "height", [0]);
                                                                            var quotient4073 = callmethodChecked(call4071, "/", [1], new GraceNum(2));
                                                                            var call4074 = callmethodChecked(var_ctx, "scale", [2], quotient4069, quotient4073);
                                                                            var if4075 = GraceDone;
                                                                            setLineNumber(1702);    // compilenode identifier
                                                                            var opresult4078 = callmethodChecked(var_startAngle, "\u2264", [1], var_endAngle);
                                                                            if (Grace_isTrue(opresult4078)) {
                                                                              setLineNumber(1703);    // compilenode identifier
                                                                              var prod4082 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                              var quotient4084 = callmethodChecked(prod4082, "/", [1], new GraceNum(180));
                                                                              var prod4088 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                              var quotient4090 = callmethodChecked(prod4088, "/", [1], new GraceNum(180));
                                                                              var call4091 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4084, quotient4090);
                                                                              if4075 = call4091;
                                                                            } else {
                                                                              setLineNumber(1705);    // compilenode identifier
                                                                              var prod4095 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                              var quotient4097 = callmethodChecked(prod4095, "/", [1], new GraceNum(180));
                                                                              var prod4101 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                              var quotient4103 = callmethodChecked(prod4101, "/", [1], new GraceNum(180));
                                                                              var call4104 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4097, quotient4103);
                                                                              if4075 = call4104;
                                                                            }
                                                                            setLineNumber(1707);    // compilenode identifier
                                                                            var call4105 = callmethodChecked(var_ctx, "restore", [0]);
                                                                            setLineNumber(1708);    // compilenode identifier
                                                                            var call4106 = callmethodChecked(var_ctx, "save", [0]);
                                                                            setLineNumber(1709);    // compilenode string
                                                                            var string4107 = new GraceString(")");
                                                                            onSelf = true;
                                                                            var call4109 = callmethodChecked(this, "color", [0]);
                                                                            var call4110 = callmethodChecked(call4109, "blue", [0]);
                                                                            var string4112 = new GraceString(", ");
                                                                            onSelf = true;
                                                                            var call4114 = callmethodChecked(this, "color", [0]);
                                                                            var call4115 = callmethodChecked(call4114, "green", [0]);
                                                                            var string4117 = new GraceString(", ");
                                                                            onSelf = true;
                                                                            var call4119 = callmethodChecked(this, "color", [0]);
                                                                            var call4120 = callmethodChecked(call4119, "red", [0]);
                                                                            var string4122 = new GraceString("rgb(");
                                                                            var opresult4124 = callmethodChecked(string4122, "++", [1], call4120);
                                                                            var opresult4126 = callmethodChecked(opresult4124, "++", [1], string4117);
                                                                            var opresult4128 = callmethodChecked(opresult4126, "++", [1], call4115);
                                                                            var opresult4130 = callmethodChecked(opresult4128, "++", [1], string4112);
                                                                            var opresult4132 = callmethodChecked(opresult4130, "++", [1], call4110);
                                                                            var opresult4134 = callmethodChecked(opresult4132, "++", [1], string4107);
                                                                            var call4135 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult4134);
                                                                            setLineNumber(1710);    // compilenode identifier
                                                                            var call4136 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                            setLineNumber(1711);    // compilenode identifier
                                                                            var call4137 = callmethodChecked(var_ctx, "restore", [0]);
                                                                            setLineNumber(1712);    // compilenode identifier
                                                                            var call4138 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4138)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method draw(1) does not have " + 
                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                            return call4138;
                                                                          };
                                                                          func4046.paramTypes = [];
                                                                          func4046.paramTypes.push([]);
                                                                          func4046.paramCounts = [1];
                                                                          obj4044.methods["draw"] = func4046;
                                                                          func4046.definitionLine = 1697;
                                                                          func4046.definitionModule = "stobjectdraw";
                                                                          var func4139 = function(argcv) {    // method asString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                            setModuleName("stobjectdraw");
                                                                            setLineNumber(1719);    // compilenode string
                                                                            var string4140 = new GraceString(" degrees");
                                                                            var string4143 = new GraceString(" degrees to ");
                                                                            var string4146 = new GraceString("from ");
                                                                            var opresult4148 = callmethodChecked(string4146, "++", [1], var_startAngle);
                                                                            var opresult4150 = callmethodChecked(opresult4148, "++", [1], string4143);
                                                                            var opresult4152 = callmethodChecked(opresult4150, "++", [1], var_endAngle);
                                                                            var opresult4154 = callmethodChecked(opresult4152, "++", [1], string4140);
                                                                            setLineNumber(1718);    // compilenode string
                                                                            var string4156 = new GraceString(" going ");
                                                                            onSelf = true;
                                                                            var call4158 = callmethodChecked(this, "color", [0]);
                                                                            var string4160 = new GraceString(", and color ");
                                                                            onSelf = true;
                                                                            var call4162 = callmethodChecked(this, "width", [0]);
                                                                            var string4164 = new GraceString(", width ");
                                                                            onSelf = true;
                                                                            var call4166 = callmethodChecked(this, "height", [0]);
                                                                            var string4168 = new GraceString("with height ");
                                                                            var opresult4170 = callmethodChecked(string4168, "++", [1], call4166);
                                                                            var opresult4172 = callmethodChecked(opresult4170, "++", [1], string4164);
                                                                            var opresult4174 = callmethodChecked(opresult4172, "++", [1], call4162);
                                                                            var opresult4176 = callmethodChecked(opresult4174, "++", [1], string4160);
                                                                            var opresult4178 = callmethodChecked(opresult4176, "++", [1], call4158);
                                                                            var opresult4180 = callmethodChecked(opresult4178, "++", [1], string4156);
                                                                            setLineNumber(1717);    // compilenode string
                                                                            var string4182 = new GraceString(") ");
                                                                            onSelf = true;
                                                                            var call4184 = callmethodChecked(this, "y", [0]);
                                                                            var string4186 = new GraceString(",");
                                                                            onSelf = true;
                                                                            var call4188 = callmethodChecked(this, "x", [0]);
                                                                            var string4190 = new GraceString("FramedArc at (");
                                                                            var opresult4192 = callmethodChecked(string4190, "++", [1], call4188);
                                                                            var opresult4194 = callmethodChecked(opresult4192, "++", [1], string4186);
                                                                            var opresult4196 = callmethodChecked(opresult4194, "++", [1], call4184);
                                                                            var opresult4198 = callmethodChecked(opresult4196, "++", [1], string4182);
                                                                            var opresult4200 = callmethodChecked(opresult4198, "++", [1], opresult4180);
                                                                            var opresult4202 = callmethodChecked(opresult4200, "++", [1], opresult4154);
                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4202)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method asString does not have " + 
                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                            return opresult4202;
                                                                          };
                                                                          func4139.paramCounts = [0];
                                                                          obj4044.methods["asString"] = func4139;
                                                                          func4139.definitionLine = 1716;
                                                                          func4139.definitionModule = "stobjectdraw";
                                                                          setLineNumber(1693);    // compilenode call
                                                                          var call4203 = callmethodChecked(superDepth, "outer", [0]);
                                                                          onOuter = true;
                                                                          onSelf = true;
                                                                          var call4204 = callmethodChecked(call4203, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                          obj4044.superobj = call4204;
                                                                          if (call4204.data) obj4044.data = call4204.data;
                                                                          if (call4204.hasOwnProperty('_value'))
                                                                              obj4044._value = call4204._value;
                                                                          setLineNumber(1694);    // compilenode identifier
                                                                          onSelf = true;
                                                                          var call4205 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                          superDepth = origSuperDepth;
                                                                        };
                                                                        obj_init_4044.apply(inheritingObject, []);
                                                                        return obj4044;
                                                                        };
                                                                        func4041.paramTypes = [];
                                                                        func4041.paramTypes.push([]);
                                                                        func4041.paramTypes.push([]);
                                                                        func4041.paramTypes.push([type_Number, "startAngle"]);
                                                                        func4041.paramTypes.push([type_Number, "endAngle"]);
                                                                        func4041.paramTypes.push([]);
                                                                        this.methods["framedArcAt()size()from()to()on()object"] = func4041;
                                                                      setLineNumber(1724);    // compilenode method
                                                                      var func4206 = function(argcv) {    // method filledArcAt(1)size(1)from(1)to(1)on(1)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_location__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[0] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for filledArcAt (arg list 1) of filledArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                        var var_dimensions__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[1] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of filledArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                        var var_startAngle = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[2] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for from (arg list 3) of filledArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                        var var_endAngle = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[3] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 4) of filledArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                        var var_canvas__39__ = arguments[curarg];
                                                                        curarg++;
                                                                        if (argcv[4] !== 1)
                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 5) of filledArcAt(1)size(1)from(1)to(1)on(1)"));
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        onSelf = true;
                                                                        var call4207 = callmethodChecked(this, "Point", [0]);
                                                                        if (!Grace_isTrue(callmethod(call4207, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in filledArcAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                    callmethod(call4207, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        onSelf = true;
                                                                        var call4208 = callmethodChecked(this, "Point", [0]);
                                                                        if (!Grace_isTrue(callmethod(call4208, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                    callmethod(call4208, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        setLineNumber(1725);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in from (arg list 3), which corresponds to parameter startAngle, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in to (arg list 4), which corresponds to parameter endAngle, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        setLineNumber(1726);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in on (arg list 5), which corresponds to parameter canvas', does not have " + 
                                                                                    callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("stobjectdraw");
                                                                        setLineNumber(1724);    // compilenode object
                                                                        var obj4209 = Grace_allocObject(null, "stobjectdraw.filledArcAt()size()from()to()on");
                                                                        obj4209.definitionModule = "stobjectdraw";
                                                                        obj4209.definitionLine = 1724;
                                                                        obj4209.outer = this;
                                                                        var reader_stobjectdraw_outer4210 = function() {
                                                                          return this.outer;
                                                                        };
                                                                        obj4209.methods["outer"] = reader_stobjectdraw_outer4210;
                                                                        var obj_init_4209 = function() {
                                                                          var origSuperDepth = superDepth;
                                                                          superDepth = obj4209;
                                                                          var func4211 = function(argcv) {    // method draw(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_ctx = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            setLineNumber(1736);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                        callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("stobjectdraw");
                                                                            setLineNumber(1737);    // compilenode identifier
                                                                            var call4212 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                            setLineNumber(1738);    // compilenode identifier
                                                                            var call4213 = callmethodChecked(var_ctx, "save", [0]);
                                                                            setLineNumber(1739);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4215 = callmethodChecked(this, "width", [0]);
                                                                            var quotient4217 = callmethodChecked(call4215, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4219 = callmethodChecked(this, "x", [0]);
                                                                            var opresult4221 = callmethodChecked(call4219, "+", [1], quotient4217);
                                                                            onSelf = true;
                                                                            var call4223 = callmethodChecked(this, "height", [0]);
                                                                            var quotient4225 = callmethodChecked(call4223, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4227 = callmethodChecked(this, "y", [0]);
                                                                            var opresult4229 = callmethodChecked(call4227, "+", [1], quotient4225);
                                                                            var call4230 = callmethodChecked(var_ctx, "translate", [2], opresult4221, opresult4229);
                                                                            setLineNumber(1740);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4232 = callmethodChecked(this, "width", [0]);
                                                                            var quotient4234 = callmethodChecked(call4232, "/", [1], new GraceNum(2));
                                                                            onSelf = true;
                                                                            var call4236 = callmethodChecked(this, "height", [0]);
                                                                            var quotient4238 = callmethodChecked(call4236, "/", [1], new GraceNum(2));
                                                                            var call4239 = callmethodChecked(var_ctx, "scale", [2], quotient4234, quotient4238);
                                                                            var if4240 = GraceDone;
                                                                            setLineNumber(1741);    // compilenode identifier
                                                                            var opresult4243 = callmethodChecked(var_startAngle, "\u2264", [1], var_endAngle);
                                                                            if (Grace_isTrue(opresult4243)) {
                                                                              setLineNumber(1742);    // compilenode identifier
                                                                              var prod4247 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                              var quotient4249 = callmethodChecked(prod4247, "/", [1], new GraceNum(180));
                                                                              var prod4253 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                              var quotient4255 = callmethodChecked(prod4253, "/", [1], new GraceNum(180));
                                                                              var call4256 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4249, quotient4255);
                                                                              if4240 = call4256;
                                                                            } else {
                                                                              setLineNumber(1744);    // compilenode identifier
                                                                              var prod4260 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                              var quotient4262 = callmethodChecked(prod4260, "/", [1], new GraceNum(180));
                                                                              var prod4266 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                              var quotient4268 = callmethodChecked(prod4266, "/", [1], new GraceNum(180));
                                                                              var call4269 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4262, quotient4268);
                                                                              if4240 = call4269;
                                                                            }
                                                                            setLineNumber(1746);    // compilenode identifier
                                                                            var call4270 = callmethodChecked(var_ctx, "restore", [0]);
                                                                            setLineNumber(1747);    // compilenode identifier
                                                                            var call4271 = callmethodChecked(var_ctx, "save", [0]);
                                                                            setLineNumber(1748);    // compilenode string
                                                                            var string4272 = new GraceString(")");
                                                                            onSelf = true;
                                                                            var call4274 = callmethodChecked(this, "color", [0]);
                                                                            var call4275 = callmethodChecked(call4274, "blue", [0]);
                                                                            var string4277 = new GraceString(", ");
                                                                            onSelf = true;
                                                                            var call4279 = callmethodChecked(this, "color", [0]);
                                                                            var call4280 = callmethodChecked(call4279, "green", [0]);
                                                                            var string4282 = new GraceString(", ");
                                                                            onSelf = true;
                                                                            var call4284 = callmethodChecked(this, "color", [0]);
                                                                            var call4285 = callmethodChecked(call4284, "red", [0]);
                                                                            var string4287 = new GraceString("rgb(");
                                                                            var opresult4289 = callmethodChecked(string4287, "++", [1], call4285);
                                                                            var opresult4291 = callmethodChecked(opresult4289, "++", [1], string4282);
                                                                            var opresult4293 = callmethodChecked(opresult4291, "++", [1], call4280);
                                                                            var opresult4295 = callmethodChecked(opresult4293, "++", [1], string4277);
                                                                            var opresult4297 = callmethodChecked(opresult4295, "++", [1], call4275);
                                                                            var opresult4299 = callmethodChecked(opresult4297, "++", [1], string4272);
                                                                            var call4300 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult4299);
                                                                            setLineNumber(1749);    // compilenode identifier
                                                                            var call4301 = callmethodChecked(var_ctx, "fill", [0]);
                                                                            setLineNumber(1750);    // compilenode identifier
                                                                            var call4302 = callmethodChecked(var_ctx, "save", [0]);
                                                                            setLineNumber(1751);    // compilenode identifier
                                                                            var call4303 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4303)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method draw(1) does not have " + 
                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                            return call4303;
                                                                          };
                                                                          func4211.paramTypes = [];
                                                                          func4211.paramTypes.push([]);
                                                                          func4211.paramCounts = [1];
                                                                          obj4209.methods["draw"] = func4211;
                                                                          func4211.definitionLine = 1736;
                                                                          func4211.definitionModule = "stobjectdraw";
                                                                          var func4304 = function(argcv) {    // method asString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            if (argcv[0] !== 0)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                            setModuleName("stobjectdraw");
                                                                            setLineNumber(1758);    // compilenode string
                                                                            var string4305 = new GraceString(" degrees");
                                                                            var string4308 = new GraceString(" degrees to ");
                                                                            var string4311 = new GraceString("from ");
                                                                            var opresult4313 = callmethodChecked(string4311, "++", [1], var_startAngle);
                                                                            var opresult4315 = callmethodChecked(opresult4313, "++", [1], string4308);
                                                                            var opresult4317 = callmethodChecked(opresult4315, "++", [1], var_endAngle);
                                                                            var opresult4319 = callmethodChecked(opresult4317, "++", [1], string4305);
                                                                            setLineNumber(1757);    // compilenode string
                                                                            var string4321 = new GraceString(" going ");
                                                                            onSelf = true;
                                                                            var call4323 = callmethodChecked(this, "color", [0]);
                                                                            var string4325 = new GraceString(", and color ");
                                                                            onSelf = true;
                                                                            var call4327 = callmethodChecked(this, "width", [0]);
                                                                            var string4329 = new GraceString(", width ");
                                                                            onSelf = true;
                                                                            var call4331 = callmethodChecked(this, "height", [0]);
                                                                            var string4333 = new GraceString("with height ");
                                                                            var opresult4335 = callmethodChecked(string4333, "++", [1], call4331);
                                                                            var opresult4337 = callmethodChecked(opresult4335, "++", [1], string4329);
                                                                            var opresult4339 = callmethodChecked(opresult4337, "++", [1], call4327);
                                                                            var opresult4341 = callmethodChecked(opresult4339, "++", [1], string4325);
                                                                            var opresult4343 = callmethodChecked(opresult4341, "++", [1], call4323);
                                                                            var opresult4345 = callmethodChecked(opresult4343, "++", [1], string4321);
                                                                            setLineNumber(1756);    // compilenode string
                                                                            var string4347 = new GraceString(") ");
                                                                            onSelf = true;
                                                                            var call4349 = callmethodChecked(this, "y", [0]);
                                                                            var string4351 = new GraceString(",");
                                                                            onSelf = true;
                                                                            var call4353 = callmethodChecked(this, "x", [0]);
                                                                            var string4355 = new GraceString("FilledArc at (");
                                                                            var opresult4357 = callmethodChecked(string4355, "++", [1], call4353);
                                                                            var opresult4359 = callmethodChecked(opresult4357, "++", [1], string4351);
                                                                            var opresult4361 = callmethodChecked(opresult4359, "++", [1], call4349);
                                                                            var opresult4363 = callmethodChecked(opresult4361, "++", [1], string4347);
                                                                            var opresult4365 = callmethodChecked(opresult4363, "++", [1], opresult4345);
                                                                            var opresult4367 = callmethodChecked(opresult4365, "++", [1], opresult4319);
                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4367)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method asString does not have " + 
                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                            return opresult4367;
                                                                          };
                                                                          func4304.paramCounts = [0];
                                                                          obj4209.methods["asString"] = func4304;
                                                                          func4304.definitionLine = 1755;
                                                                          func4304.definitionModule = "stobjectdraw";
                                                                          setLineNumber(1732);    // compilenode call
                                                                          var call4368 = callmethodChecked(superDepth, "outer", [0]);
                                                                          onOuter = true;
                                                                          onSelf = true;
                                                                          var call4369 = callmethodChecked(call4368, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                          obj4209.superobj = call4369;
                                                                          if (call4369.data) obj4209.data = call4369.data;
                                                                          if (call4369.hasOwnProperty('_value'))
                                                                              obj4209._value = call4369._value;
                                                                          setLineNumber(1733);    // compilenode identifier
                                                                          onSelf = true;
                                                                          var call4370 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                          superDepth = origSuperDepth;
                                                                        };
                                                                        obj_init_4209.apply(obj4209, []);
                                                                        setLineNumber(1724);    // return value
                                                                        if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj4209)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method filledArcAt(1)size(1)from(1)to(1)on(1) does not have " + 
                                                                                    callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                        return obj4209;
                                                                      };
                                                                      func4206.paramTypes = [];
                                                                      func4206.paramTypes.push([]);
                                                                      func4206.paramTypes.push([]);
                                                                      func4206.paramTypes.push([type_Number, "startAngle"]);
                                                                      func4206.paramTypes.push([type_Number, "endAngle"]);
                                                                      func4206.paramTypes.push([]);
                                                                      func4206.paramCounts = [1, 1, 1, 1, 1];
                                                                      this.methods["filledArcAt()size()from()to()on"] = func4206;
                                                                      func4206.definitionLine = 1724;
                                                                      func4206.definitionModule = "stobjectdraw";
                                                                        var func4371 = function(argcv) {    // method filledArcAt(1     )size(1     )from(1     )to(1     )on(1     )()object
                                                                          var curarg = 1;
                                                                          var var_location__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          var var_dimensions__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          var var_startAngle = arguments[curarg];
                                                                          curarg++;
                                                                          var var_endAngle = arguments[curarg];
                                                                          curarg++;
                                                                          var var_canvas__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          var inheritingObject = arguments[curarg++];
                                                                          // Start argument processing
                                                                          curarg = 1;
                                                                          onSelf = true;
                                                                          var call4372 = callmethodChecked(this, "Point", [0]);
                                                                          if (!Grace_isTrue(callmethod(call4372, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in filledArcAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                      callmethod(call4372, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          onSelf = true;
                                                                          var call4373 = callmethodChecked(this, "Point", [0]);
                                                                          if (!Grace_isTrue(callmethod(call4373, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                      callmethod(call4373, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          setLineNumber(1725);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in from (arg list 3), which corresponds to parameter startAngle, does not have " + 
                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in to (arg list 4), which corresponds to parameter endAngle, does not have " + 
                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          setLineNumber(1726);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in on (arg list 5), which corresponds to parameter canvas', does not have " + 
                                                                                      callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument processing
                                                                          setModuleName("stobjectdraw");
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var obj4374 = Grace_allocObject(null, "filledArcAt()size()from()to()on");
                                                                          obj4374.definitionModule = "stobjectdraw";
                                                                          obj4374.definitionLine = 1724;
                                                                          var inho4374 = inheritingObject;
                                                                          while (inho4374.superobj) inho4374 = inho4374.superobj;
                                                                          inho4374.superobj = obj4374;
                                                                          obj4374.data = inheritingObject.data;
                                                                          if (inheritingObject.hasOwnProperty('_value'))
                                                                            obj4374._value = inheritingObject._value;
                                                                          obj4374.outer = this;
                                                                          var reader_stobjectdraw_outer4375 = function() {
                                                                            return this.outer;
                                                                          };
                                                                          obj4374.methods["outer"] = reader_stobjectdraw_outer4375;
                                                                          var obj_init_4374 = function() {
                                                                            var origSuperDepth = superDepth;
                                                                            superDepth = obj4374;
                                                                            var func4376 = function(argcv) {    // method draw(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_ctx = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                              // Start argument checking
                                                                              curarg = 1;
                                                                              setLineNumber(1736);    // compilenode identifier
                                                                              if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                          callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              // End argument checking
                                                                              setModuleName("stobjectdraw");
                                                                              setLineNumber(1737);    // compilenode identifier
                                                                              var call4377 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                              setLineNumber(1738);    // compilenode identifier
                                                                              var call4378 = callmethodChecked(var_ctx, "save", [0]);
                                                                              setLineNumber(1739);    // compilenode call
                                                                              onSelf = true;
                                                                              var call4380 = callmethodChecked(this, "width", [0]);
                                                                              var quotient4382 = callmethodChecked(call4380, "/", [1], new GraceNum(2));
                                                                              onSelf = true;
                                                                              var call4384 = callmethodChecked(this, "x", [0]);
                                                                              var opresult4386 = callmethodChecked(call4384, "+", [1], quotient4382);
                                                                              onSelf = true;
                                                                              var call4388 = callmethodChecked(this, "height", [0]);
                                                                              var quotient4390 = callmethodChecked(call4388, "/", [1], new GraceNum(2));
                                                                              onSelf = true;
                                                                              var call4392 = callmethodChecked(this, "y", [0]);
                                                                              var opresult4394 = callmethodChecked(call4392, "+", [1], quotient4390);
                                                                              var call4395 = callmethodChecked(var_ctx, "translate", [2], opresult4386, opresult4394);
                                                                              setLineNumber(1740);    // compilenode call
                                                                              onSelf = true;
                                                                              var call4397 = callmethodChecked(this, "width", [0]);
                                                                              var quotient4399 = callmethodChecked(call4397, "/", [1], new GraceNum(2));
                                                                              onSelf = true;
                                                                              var call4401 = callmethodChecked(this, "height", [0]);
                                                                              var quotient4403 = callmethodChecked(call4401, "/", [1], new GraceNum(2));
                                                                              var call4404 = callmethodChecked(var_ctx, "scale", [2], quotient4399, quotient4403);
                                                                              var if4405 = GraceDone;
                                                                              setLineNumber(1741);    // compilenode identifier
                                                                              var opresult4408 = callmethodChecked(var_startAngle, "\u2264", [1], var_endAngle);
                                                                              if (Grace_isTrue(opresult4408)) {
                                                                                setLineNumber(1742);    // compilenode identifier
                                                                                var prod4412 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                                var quotient4414 = callmethodChecked(prod4412, "/", [1], new GraceNum(180));
                                                                                var prod4418 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                                var quotient4420 = callmethodChecked(prod4418, "/", [1], new GraceNum(180));
                                                                                var call4421 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4414, quotient4420);
                                                                                if4405 = call4421;
                                                                              } else {
                                                                                setLineNumber(1744);    // compilenode identifier
                                                                                var prod4425 = callmethodChecked(var_endAngle, "*", [1], var_pi);
                                                                                var quotient4427 = callmethodChecked(prod4425, "/", [1], new GraceNum(180));
                                                                                var prod4431 = callmethodChecked(var_startAngle, "*", [1], var_pi);
                                                                                var quotient4433 = callmethodChecked(prod4431, "/", [1], new GraceNum(180));
                                                                                var call4434 = callmethodChecked(var_ctx, "arc", [5], new GraceNum(0), new GraceNum(0), new GraceNum(1), quotient4427, quotient4433);
                                                                                if4405 = call4434;
                                                                              }
                                                                              setLineNumber(1746);    // compilenode identifier
                                                                              var call4435 = callmethodChecked(var_ctx, "restore", [0]);
                                                                              setLineNumber(1747);    // compilenode identifier
                                                                              var call4436 = callmethodChecked(var_ctx, "save", [0]);
                                                                              setLineNumber(1748);    // compilenode string
                                                                              var string4437 = new GraceString(")");
                                                                              onSelf = true;
                                                                              var call4439 = callmethodChecked(this, "color", [0]);
                                                                              var call4440 = callmethodChecked(call4439, "blue", [0]);
                                                                              var string4442 = new GraceString(", ");
                                                                              onSelf = true;
                                                                              var call4444 = callmethodChecked(this, "color", [0]);
                                                                              var call4445 = callmethodChecked(call4444, "green", [0]);
                                                                              var string4447 = new GraceString(", ");
                                                                              onSelf = true;
                                                                              var call4449 = callmethodChecked(this, "color", [0]);
                                                                              var call4450 = callmethodChecked(call4449, "red", [0]);
                                                                              var string4452 = new GraceString("rgb(");
                                                                              var opresult4454 = callmethodChecked(string4452, "++", [1], call4450);
                                                                              var opresult4456 = callmethodChecked(opresult4454, "++", [1], string4447);
                                                                              var opresult4458 = callmethodChecked(opresult4456, "++", [1], call4445);
                                                                              var opresult4460 = callmethodChecked(opresult4458, "++", [1], string4442);
                                                                              var opresult4462 = callmethodChecked(opresult4460, "++", [1], call4440);
                                                                              var opresult4464 = callmethodChecked(opresult4462, "++", [1], string4437);
                                                                              var call4465 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult4464);
                                                                              setLineNumber(1749);    // compilenode identifier
                                                                              var call4466 = callmethodChecked(var_ctx, "fill", [0]);
                                                                              setLineNumber(1750);    // compilenode identifier
                                                                              var call4467 = callmethodChecked(var_ctx, "save", [0]);
                                                                              setLineNumber(1751);    // compilenode identifier
                                                                              var call4468 = callmethodChecked(var_ctx, "closePath", [0]);
                                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4468)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("result of method draw(1) does not have " + 
                                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                                              return call4468;
                                                                            };
                                                                            func4376.paramTypes = [];
                                                                            func4376.paramTypes.push([]);
                                                                            func4376.paramCounts = [1];
                                                                            obj4374.methods["draw"] = func4376;
                                                                            func4376.definitionLine = 1736;
                                                                            func4376.definitionModule = "stobjectdraw";
                                                                            var func4469 = function(argcv) {    // method asString
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              if (argcv[0] !== 0)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                              setModuleName("stobjectdraw");
                                                                              setLineNumber(1758);    // compilenode string
                                                                              var string4470 = new GraceString(" degrees");
                                                                              var string4473 = new GraceString(" degrees to ");
                                                                              var string4476 = new GraceString("from ");
                                                                              var opresult4478 = callmethodChecked(string4476, "++", [1], var_startAngle);
                                                                              var opresult4480 = callmethodChecked(opresult4478, "++", [1], string4473);
                                                                              var opresult4482 = callmethodChecked(opresult4480, "++", [1], var_endAngle);
                                                                              var opresult4484 = callmethodChecked(opresult4482, "++", [1], string4470);
                                                                              setLineNumber(1757);    // compilenode string
                                                                              var string4486 = new GraceString(" going ");
                                                                              onSelf = true;
                                                                              var call4488 = callmethodChecked(this, "color", [0]);
                                                                              var string4490 = new GraceString(", and color ");
                                                                              onSelf = true;
                                                                              var call4492 = callmethodChecked(this, "width", [0]);
                                                                              var string4494 = new GraceString(", width ");
                                                                              onSelf = true;
                                                                              var call4496 = callmethodChecked(this, "height", [0]);
                                                                              var string4498 = new GraceString("with height ");
                                                                              var opresult4500 = callmethodChecked(string4498, "++", [1], call4496);
                                                                              var opresult4502 = callmethodChecked(opresult4500, "++", [1], string4494);
                                                                              var opresult4504 = callmethodChecked(opresult4502, "++", [1], call4492);
                                                                              var opresult4506 = callmethodChecked(opresult4504, "++", [1], string4490);
                                                                              var opresult4508 = callmethodChecked(opresult4506, "++", [1], call4488);
                                                                              var opresult4510 = callmethodChecked(opresult4508, "++", [1], string4486);
                                                                              setLineNumber(1756);    // compilenode string
                                                                              var string4512 = new GraceString(") ");
                                                                              onSelf = true;
                                                                              var call4514 = callmethodChecked(this, "y", [0]);
                                                                              var string4516 = new GraceString(",");
                                                                              onSelf = true;
                                                                              var call4518 = callmethodChecked(this, "x", [0]);
                                                                              var string4520 = new GraceString("FilledArc at (");
                                                                              var opresult4522 = callmethodChecked(string4520, "++", [1], call4518);
                                                                              var opresult4524 = callmethodChecked(opresult4522, "++", [1], string4516);
                                                                              var opresult4526 = callmethodChecked(opresult4524, "++", [1], call4514);
                                                                              var opresult4528 = callmethodChecked(opresult4526, "++", [1], string4512);
                                                                              var opresult4530 = callmethodChecked(opresult4528, "++", [1], opresult4510);
                                                                              var opresult4532 = callmethodChecked(opresult4530, "++", [1], opresult4484);
                                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4532)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("result of method asString does not have " + 
                                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                                              return opresult4532;
                                                                            };
                                                                            func4469.paramCounts = [0];
                                                                            obj4374.methods["asString"] = func4469;
                                                                            func4469.definitionLine = 1755;
                                                                            func4469.definitionModule = "stobjectdraw";
                                                                            setLineNumber(1732);    // compilenode call
                                                                            var call4533 = callmethodChecked(superDepth, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call4534 = callmethodChecked(call4533, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                            obj4374.superobj = call4534;
                                                                            if (call4534.data) obj4374.data = call4534.data;
                                                                            if (call4534.hasOwnProperty('_value'))
                                                                                obj4374._value = call4534._value;
                                                                            setLineNumber(1733);    // compilenode identifier
                                                                            onSelf = true;
                                                                            var call4535 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_4374.apply(inheritingObject, []);
                                                                          return obj4374;
                                                                          };
                                                                          func4371.paramTypes = [];
                                                                          func4371.paramTypes.push([]);
                                                                          func4371.paramTypes.push([]);
                                                                          func4371.paramTypes.push([type_Number, "startAngle"]);
                                                                          func4371.paramTypes.push([type_Number, "endAngle"]);
                                                                          func4371.paramTypes.push([]);
                                                                          this.methods["filledArcAt()size()from()to()on()object"] = func4371;
                                                                        setLineNumber(1805);    // compilenode method
                                                                        var func4536 = function(argcv) {    // method drawableImageAt(1)size(1)url(1)on(1)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_location__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[0] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for drawableImageAt (arg list 1) of drawableImageAt(1)size(1)url(1)on(1)"));
                                                                          var var_dimensions__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[1] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for size (arg list 2) of drawableImageAt(1)size(1)url(1)on(1)"));
                                                                          var var_url = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[2] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for url (arg list 3) of drawableImageAt(1)size(1)url(1)on(1)"));
                                                                          var var_canvas__39__ = arguments[curarg];
                                                                          curarg++;
                                                                          if (argcv[3] !== 1)
                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 4) of drawableImageAt(1)size(1)url(1)on(1)"));
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          onSelf = true;
                                                                          var call4537 = callmethodChecked(this, "Point", [0]);
                                                                          if (!Grace_isTrue(callmethod(call4537, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in drawableImageAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                      callmethod(call4537, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          setLineNumber(1806);    // compilenode call
                                                                          onSelf = true;
                                                                          var call4538 = callmethodChecked(this, "Point", [0]);
                                                                          if (!Grace_isTrue(callmethod(call4538, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                      callmethod(call4538, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          setLineNumber(1807);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in url (arg list 3), which corresponds to parameter url, does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          setLineNumber(1808);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in on (arg list 4), which corresponds to parameter canvas', does not have " + 
                                                                                      callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("stobjectdraw");
                                                                          setLineNumber(1805);    // compilenode object
                                                                          var obj4539 = Grace_allocObject(null, "stobjectdraw.drawableImageAt()size()url()on");
                                                                          obj4539.definitionModule = "stobjectdraw";
                                                                          obj4539.definitionLine = 1805;
                                                                          obj4539.outer = this;
                                                                          var reader_stobjectdraw_outer4540 = function() {
                                                                            return this.outer;
                                                                          };
                                                                          obj4539.methods["outer"] = reader_stobjectdraw_outer4540;
                                                                          var obj_init_4539 = function() {
                                                                            var origSuperDepth = superDepth;
                                                                            superDepth = obj4539;
                                                                            var func4541 = function(argcv) {    // method draw(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_ctx = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                              // Start argument checking
                                                                              curarg = 1;
                                                                              setLineNumber(1822);    // compilenode identifier
                                                                              if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                          callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              // End argument checking
                                                                              setModuleName("stobjectdraw");
                                                                              setLineNumber(1823);    // compilenode call
                                                                              onSelf = true;
                                                                              var call4542 = callmethodChecked(this, "theImage", [0]);
                                                                              onSelf = true;
                                                                              var call4543 = callmethodChecked(this, "x", [0]);
                                                                              onSelf = true;
                                                                              var call4544 = callmethodChecked(this, "y", [0]);
                                                                              onSelf = true;
                                                                              var call4545 = callmethodChecked(this, "width", [0]);
                                                                              onSelf = true;
                                                                              var call4546 = callmethodChecked(this, "height", [0]);
                                                                              var call4547 = callmethodChecked(var_ctx, "drawImage", [5], call4542, call4543, call4544, call4545, call4546);
                                                                              if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4547)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("result of method draw(1) does not have " + 
                                                                                          callmethod(var_Done, "asString", [0])._value + "."));
                                                                              return call4547;
                                                                            };
                                                                            func4541.paramTypes = [];
                                                                            func4541.paramTypes.push([]);
                                                                            func4541.paramCounts = [1];
                                                                            obj4539.methods["draw"] = func4541;
                                                                            func4541.definitionLine = 1822;
                                                                            func4541.definitionModule = "stobjectdraw";
                                                                            var func4548 = function(argcv) {    // method asString
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              if (argcv[0] !== 0)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                              setModuleName("stobjectdraw");
                                                                              setLineNumber(1830);    // compilenode string
                                                                              var string4549 = new GraceString("");
                                                                              var string4552 = new GraceString("from url ");
                                                                              var opresult4554 = callmethodChecked(string4552, "++", [1], var_url);
                                                                              var opresult4556 = callmethodChecked(opresult4554, "++", [1], string4549);
                                                                              setLineNumber(1829);    // compilenode string
                                                                              var string4558 = new GraceString(", ");
                                                                              onSelf = true;
                                                                              var call4560 = callmethodChecked(this, "width", [0]);
                                                                              var string4562 = new GraceString(", width ");
                                                                              onSelf = true;
                                                                              var call4564 = callmethodChecked(this, "height", [0]);
                                                                              var string4566 = new GraceString("with height ");
                                                                              var opresult4568 = callmethodChecked(string4566, "++", [1], call4564);
                                                                              var opresult4570 = callmethodChecked(opresult4568, "++", [1], string4562);
                                                                              var opresult4572 = callmethodChecked(opresult4570, "++", [1], call4560);
                                                                              var opresult4574 = callmethodChecked(opresult4572, "++", [1], string4558);
                                                                              setLineNumber(1828);    // compilenode string
                                                                              var string4576 = new GraceString(") ");
                                                                              onSelf = true;
                                                                              var call4578 = callmethodChecked(this, "y", [0]);
                                                                              var string4580 = new GraceString(",");
                                                                              onSelf = true;
                                                                              var call4582 = callmethodChecked(this, "x", [0]);
                                                                              var string4584 = new GraceString("DrawableImage at (");
                                                                              var opresult4586 = callmethodChecked(string4584, "++", [1], call4582);
                                                                              var opresult4588 = callmethodChecked(opresult4586, "++", [1], string4580);
                                                                              var opresult4590 = callmethodChecked(opresult4588, "++", [1], call4578);
                                                                              var opresult4592 = callmethodChecked(opresult4590, "++", [1], string4576);
                                                                              var opresult4594 = callmethodChecked(opresult4592, "++", [1], opresult4574);
                                                                              var opresult4596 = callmethodChecked(opresult4594, "++", [1], opresult4556);
                                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4596)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("result of method asString does not have " + 
                                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                                              return opresult4596;
                                                                            };
                                                                            func4548.paramCounts = [0];
                                                                            obj4539.methods["asString"] = func4548;
                                                                            func4548.definitionLine = 1827;
                                                                            func4548.definitionModule = "stobjectdraw";
                                                                            setLineNumber(1812);    // compilenode call
                                                                            var call4597 = callmethodChecked(superDepth, "outer", [0]);
                                                                            onOuter = true;
                                                                            onSelf = true;
                                                                            var call4598 = callmethodChecked(call4597, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                            obj4539.superobj = call4598;
                                                                            if (call4598.data) obj4539.data = call4598.data;
                                                                            if (call4598.hasOwnProperty('_value'))
                                                                                obj4539._value = call4598._value;
                                                                            setLineNumber(1814);    // compilenode string
                                                                            var string4599 = new GraceString("img");
                                                                            var call4600 = callmethodChecked(var_document, "createElement", [1], string4599);
                                                                            obj4539.data["theImage"] = call4600;
                                                                            var reader_stobjectdraw_theImage4601 = function() {
                                                                              return this.data["theImage"];
                                                                            };
                                                                            obj4539.methods["theImage"] = reader_stobjectdraw_theImage4601;
                                                                            obj4539.data["theImage"] = call4600;
                                                                            var writer_stobjectdraw_theImage4601 = function(argcv, o) {
                                                                              this.data["theImage"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj4539.methods["theImage:="] = writer_stobjectdraw_theImage4601;
                                                                            reader_stobjectdraw_theImage4601.confidential = true;
                                                                            writer_stobjectdraw_theImage4601.confidential = true;
                                                                            obj4539.mutable = true;
                                                                            setLineNumber(1815);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4602 = callmethodChecked(this, "theImage", [0]);
                                                                            var call4603 = callmethodChecked(call4602, "src:=", [1], var_url);
                                                                            setLineNumber(1817);    // compilenode string
                                                                            var string4604 = new GraceString("load");
                                                                            var block4605 = new GraceBlock(this, 1817, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block4605.real = function(var___95____95__23) {
                                                                              setLineNumber(1818);    // compilenode identifier
                                                                              onSelf = true;
                                                                              var call4606 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                              return call4606;
                                                                            };
                                                                            setLineNumber(1817);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4607 = callmethodChecked(this, "theImage", [0]);
                                                                            var call4608 = callmethodChecked(call4607, "addEventListener", [2], string4604, block4605);
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_4539.apply(obj4539, []);
                                                                          setLineNumber(1805);    // return value
                                                                          if (!Grace_isTrue(callmethod(var_Graphic2D, "match", [1], obj4539)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method drawableImageAt(1)size(1)url(1)on(1) does not have " + 
                                                                                      callmethod(var_Graphic2D, "asString", [0])._value + "."));
                                                                          return obj4539;
                                                                        };
                                                                        func4536.paramTypes = [];
                                                                        func4536.paramTypes.push([]);
                                                                        func4536.paramTypes.push([]);
                                                                        func4536.paramTypes.push([type_String, "url"]);
                                                                        func4536.paramTypes.push([]);
                                                                        func4536.paramCounts = [1, 1, 1, 1];
                                                                        this.methods["drawableImageAt()size()url()on"] = func4536;
                                                                        func4536.definitionLine = 1805;
                                                                        func4536.definitionModule = "stobjectdraw";
                                                                          var func4609 = function(argcv) {    // method drawableImageAt(1     )size(1     )url(1     )on(1     )()object
                                                                            var curarg = 1;
                                                                            var var_location__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            var var_dimensions__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            var var_url = arguments[curarg];
                                                                            curarg++;
                                                                            var var_canvas__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            var inheritingObject = arguments[curarg++];
                                                                            // Start argument processing
                                                                            curarg = 1;
                                                                            onSelf = true;
                                                                            var call4610 = callmethodChecked(this, "Point", [0]);
                                                                            if (!Grace_isTrue(callmethod(call4610, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in drawableImageAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                        callmethod(call4610, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            setLineNumber(1806);    // compilenode call
                                                                            onSelf = true;
                                                                            var call4611 = callmethodChecked(this, "Point", [0]);
                                                                            if (!Grace_isTrue(callmethod(call4611, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in size (arg list 2), which corresponds to parameter dimensions', does not have " + 
                                                                                        callmethod(call4611, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            setLineNumber(1807);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in url (arg list 3), which corresponds to parameter url, does not have " + 
                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            setLineNumber(1808);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in on (arg list 4), which corresponds to parameter canvas', does not have " + 
                                                                                        callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            // End argument processing
                                                                            setModuleName("stobjectdraw");
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var obj4612 = Grace_allocObject(null, "drawableImageAt()size()url()on");
                                                                            obj4612.definitionModule = "stobjectdraw";
                                                                            obj4612.definitionLine = 1805;
                                                                            var inho4612 = inheritingObject;
                                                                            while (inho4612.superobj) inho4612 = inho4612.superobj;
                                                                            inho4612.superobj = obj4612;
                                                                            obj4612.data = inheritingObject.data;
                                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                                              obj4612._value = inheritingObject._value;
                                                                            obj4612.outer = this;
                                                                            var reader_stobjectdraw_outer4613 = function() {
                                                                              return this.outer;
                                                                            };
                                                                            obj4612.methods["outer"] = reader_stobjectdraw_outer4613;
                                                                            var obj_init_4612 = function() {
                                                                              var origSuperDepth = superDepth;
                                                                              superDepth = obj4612;
                                                                              var func4614 = function(argcv) {    // method draw(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_ctx = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1822);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                            callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1823);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4615 = callmethodChecked(this, "theImage", [0]);
                                                                                onSelf = true;
                                                                                var call4616 = callmethodChecked(this, "x", [0]);
                                                                                onSelf = true;
                                                                                var call4617 = callmethodChecked(this, "y", [0]);
                                                                                onSelf = true;
                                                                                var call4618 = callmethodChecked(this, "width", [0]);
                                                                                onSelf = true;
                                                                                var call4619 = callmethodChecked(this, "height", [0]);
                                                                                var call4620 = callmethodChecked(var_ctx, "drawImage", [5], call4615, call4616, call4617, call4618, call4619);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4620)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method draw(1) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4620;
                                                                              };
                                                                              func4614.paramTypes = [];
                                                                              func4614.paramTypes.push([]);
                                                                              func4614.paramCounts = [1];
                                                                              obj4612.methods["draw"] = func4614;
                                                                              func4614.definitionLine = 1822;
                                                                              func4614.definitionModule = "stobjectdraw";
                                                                              var func4621 = function(argcv) {    // method asString
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1830);    // compilenode string
                                                                                var string4622 = new GraceString("");
                                                                                var string4625 = new GraceString("from url ");
                                                                                var opresult4627 = callmethodChecked(string4625, "++", [1], var_url);
                                                                                var opresult4629 = callmethodChecked(opresult4627, "++", [1], string4622);
                                                                                setLineNumber(1829);    // compilenode string
                                                                                var string4631 = new GraceString(", ");
                                                                                onSelf = true;
                                                                                var call4633 = callmethodChecked(this, "width", [0]);
                                                                                var string4635 = new GraceString(", width ");
                                                                                onSelf = true;
                                                                                var call4637 = callmethodChecked(this, "height", [0]);
                                                                                var string4639 = new GraceString("with height ");
                                                                                var opresult4641 = callmethodChecked(string4639, "++", [1], call4637);
                                                                                var opresult4643 = callmethodChecked(opresult4641, "++", [1], string4635);
                                                                                var opresult4645 = callmethodChecked(opresult4643, "++", [1], call4633);
                                                                                var opresult4647 = callmethodChecked(opresult4645, "++", [1], string4631);
                                                                                setLineNumber(1828);    // compilenode string
                                                                                var string4649 = new GraceString(") ");
                                                                                onSelf = true;
                                                                                var call4651 = callmethodChecked(this, "y", [0]);
                                                                                var string4653 = new GraceString(",");
                                                                                onSelf = true;
                                                                                var call4655 = callmethodChecked(this, "x", [0]);
                                                                                var string4657 = new GraceString("DrawableImage at (");
                                                                                var opresult4659 = callmethodChecked(string4657, "++", [1], call4655);
                                                                                var opresult4661 = callmethodChecked(opresult4659, "++", [1], string4653);
                                                                                var opresult4663 = callmethodChecked(opresult4661, "++", [1], call4651);
                                                                                var opresult4665 = callmethodChecked(opresult4663, "++", [1], string4649);
                                                                                var opresult4667 = callmethodChecked(opresult4665, "++", [1], opresult4647);
                                                                                var opresult4669 = callmethodChecked(opresult4667, "++", [1], opresult4629);
                                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4669)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method asString does not have " + 
                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                return opresult4669;
                                                                              };
                                                                              func4621.paramCounts = [0];
                                                                              obj4612.methods["asString"] = func4621;
                                                                              func4621.definitionLine = 1827;
                                                                              func4621.definitionModule = "stobjectdraw";
                                                                              setLineNumber(1812);    // compilenode call
                                                                              var call4670 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call4671 = callmethodChecked(call4670, "resizable2DAt()size()on()object", [1, 1, 1, 1], var_location__39__, var_dimensions__39__, var_canvas__39__, this);
                                                                              obj4612.superobj = call4671;
                                                                              if (call4671.data) obj4612.data = call4671.data;
                                                                              if (call4671.hasOwnProperty('_value'))
                                                                                  obj4612._value = call4671._value;
                                                                              setLineNumber(1814);    // compilenode string
                                                                              var string4672 = new GraceString("img");
                                                                              var call4673 = callmethodChecked(var_document, "createElement", [1], string4672);
                                                                              obj4612.data["theImage"] = call4673;
                                                                              var reader_stobjectdraw_theImage4674 = function() {
                                                                                return this.data["theImage"];
                                                                              };
                                                                              obj4612.methods["theImage"] = reader_stobjectdraw_theImage4674;
                                                                              obj4612.data["theImage"] = call4673;
                                                                              var writer_stobjectdraw_theImage4674 = function(argcv, o) {
                                                                                this.data["theImage"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj4612.methods["theImage:="] = writer_stobjectdraw_theImage4674;
                                                                              reader_stobjectdraw_theImage4674.confidential = true;
                                                                              writer_stobjectdraw_theImage4674.confidential = true;
                                                                              obj4612.mutable = true;
                                                                              setLineNumber(1815);    // compilenode call
                                                                              onSelf = true;
                                                                              var call4675 = callmethodChecked(this, "theImage", [0]);
                                                                              var call4676 = callmethodChecked(call4675, "src:=", [1], var_url);
                                                                              setLineNumber(1817);    // compilenode string
                                                                              var string4677 = new GraceString("load");
                                                                              var block4678 = new GraceBlock(this, 1817, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block4678.real = function(var___95____95__23) {
                                                                                setLineNumber(1818);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4679 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                                return call4679;
                                                                              };
                                                                              setLineNumber(1817);    // compilenode call
                                                                              onSelf = true;
                                                                              var call4680 = callmethodChecked(this, "theImage", [0]);
                                                                              var call4681 = callmethodChecked(call4680, "addEventListener", [2], string4677, block4678);
                                                                              superDepth = origSuperDepth;
                                                                            };
                                                                            obj_init_4612.apply(inheritingObject, []);
                                                                            return obj4612;
                                                                            };
                                                                            func4609.paramTypes = [];
                                                                            func4609.paramTypes.push([]);
                                                                            func4609.paramTypes.push([]);
                                                                            func4609.paramTypes.push([type_String, "url"]);
                                                                            func4609.paramTypes.push([]);
                                                                            this.methods["drawableImageAt()size()url()on()object"] = func4609;
                                                                          setLineNumber(1846);    // compilenode method
                                                                          var func4682 = function(argcv) {    // method lineFrom(1)to(1)on(1)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_start__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[0] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for lineFrom (arg list 1) of lineFrom(1)to(1)on(1)"));
                                                                            var var_end__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[1] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for to (arg list 2) of lineFrom(1)to(1)on(1)"));
                                                                            var var_canvas__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            if (argcv[2] !== 1)
                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of lineFrom(1)to(1)on(1)"));
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            onSelf = true;
                                                                            var call4683 = callmethodChecked(this, "Point", [0]);
                                                                            if (!Grace_isTrue(callmethod(call4683, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in lineFrom (arg list 1), which corresponds to parameter start', does not have " + 
                                                                                        callmethod(call4683, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            onSelf = true;
                                                                            var call4684 = callmethodChecked(this, "Point", [0]);
                                                                            if (!Grace_isTrue(callmethod(call4684, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in to (arg list 2), which corresponds to parameter end', does not have " + 
                                                                                        callmethod(call4684, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            setLineNumber(1847);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                        callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("stobjectdraw");
                                                                            setLineNumber(1846);    // compilenode object
                                                                            var obj4685 = Grace_allocObject(null, "stobjectdraw.lineFrom()to()on");
                                                                            obj4685.definitionModule = "stobjectdraw";
                                                                            obj4685.definitionLine = 1846;
                                                                            obj4685.outer = this;
                                                                            var reader_stobjectdraw_outer4686 = function() {
                                                                              return this.outer;
                                                                            };
                                                                            obj4685.methods["outer"] = reader_stobjectdraw_outer4686;
                                                                            var obj_init_4685 = function() {
                                                                              var origSuperDepth = superDepth;
                                                                              superDepth = obj4685;
                                                                              var func4687 = function(argcv) {    // method start
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for start"));
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1856);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4688 = callmethodChecked(this, "location", [0]);
                                                                                setLineNumber(1853);    // compilenode call
                                                                                var call4689 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4690 = callmethodChecked(call4689, "Point", [0]);
                                                                                setLineNumber(1856);    // return value
                                                                                if (!Grace_isTrue(callmethod(call4690, "match", [1], call4688)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method start does not have " + 
                                                                                            callmethod(call4690, "asString", [0])._value + "."));
                                                                                return call4688;
                                                                              };
                                                                              func4687.paramCounts = [0];
                                                                              obj4685.methods["start"] = func4687;
                                                                              func4687.definitionLine = 1853;
                                                                              func4687.definitionModule = "stobjectdraw";
                                                                              var func4691 = function(argcv) {    // method end
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for end"));
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1862);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4692 = callmethodChecked(this, "theEnd", [0]);
                                                                                setLineNumber(1859);    // compilenode call
                                                                                var call4693 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4694 = callmethodChecked(call4693, "Point", [0]);
                                                                                setLineNumber(1862);    // return value
                                                                                if (!Grace_isTrue(callmethod(call4694, "match", [1], call4692)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method end does not have " + 
                                                                                            callmethod(call4694, "asString", [0])._value + "."));
                                                                                return call4692;
                                                                              };
                                                                              func4691.paramCounts = [0];
                                                                              obj4685.methods["end"] = func4691;
                                                                              func4691.definitionLine = 1859;
                                                                              func4691.definitionModule = "stobjectdraw";
                                                                              var func4695 = function(argcv) {    // method start:=(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_newStart = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for start:=(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1867);    // compilenode call
                                                                                var call4696 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4697 = callmethodChecked(call4696, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4697, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in start:= (arg list 1), which corresponds to parameter newStart, does not have " + 
                                                                                            callmethod(call4697, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1870);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4698 = callmethodChecked(this, "location:=", [1], var_newStart);
                                                                                setLineNumber(1871);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4699 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4699)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method start:=(1) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4699;
                                                                              };
                                                                              func4695.paramCounts = [1];
                                                                              obj4685.methods["start:="] = func4695;
                                                                              func4695.definitionLine = 1867;
                                                                              func4695.definitionModule = "stobjectdraw";
                                                                              var func4700 = function(argcv) {    // method end:=(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_newEnd = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for end:=(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1874);    // compilenode call
                                                                                var call4701 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4702 = callmethodChecked(call4701, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4702, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in end:= (arg list 1), which corresponds to parameter newEnd, does not have " + 
                                                                                            callmethod(call4702, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1877);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4703 = callmethodChecked(this, "theEnd:=", [1], var_newEnd);
                                                                                setLineNumber(1878);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4704 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4704)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method end:=(1) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4704;
                                                                              };
                                                                              func4700.paramCounts = [1];
                                                                              obj4685.methods["end:="] = func4700;
                                                                              func4700.definitionLine = 1874;
                                                                              func4700.definitionModule = "stobjectdraw";
                                                                              var func4705 = function(argcv) {    // method setEndPoints(2)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_newStart = arguments[curarg];
                                                                                curarg++;
                                                                                var var_newEnd = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 2)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for setEndPoints(2)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1881);    // compilenode call
                                                                                var call4706 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4707 = callmethodChecked(call4706, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4707, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in setEndPoints (arg list 1), which corresponds to parameter newStart, does not have " + 
                                                                                            callmethod(call4707, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4708 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4709 = callmethodChecked(call4708, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4709, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 2 in setEndPoints (arg list 1), which corresponds to parameter newEnd, does not have " + 
                                                                                            callmethod(call4709, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1884);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4710 = callmethodChecked(this, "start:=", [1], var_newStart);
                                                                                setLineNumber(1885);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4711 = callmethodChecked(this, "end:=", [1], var_newEnd);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4711)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method setEndPoints(2) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4711;
                                                                              };
                                                                              func4705.paramCounts = [2];
                                                                              obj4685.methods["setEndPoints"] = func4705;
                                                                              func4705.definitionLine = 1881;
                                                                              func4705.definitionModule = "stobjectdraw";
                                                                              var func4712 = function(argcv) {    // method draw(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_ctx = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1889);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                            callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1891);    // compilenode identifier
                                                                                var call4713 = callmethodChecked(var_ctx, "save", [0]);
                                                                                setLineNumber(1892);    // compilenode string
                                                                                var string4714 = new GraceString(")");
                                                                                onSelf = true;
                                                                                var call4716 = callmethodChecked(this, "color", [0]);
                                                                                var call4717 = callmethodChecked(call4716, "blue", [0]);
                                                                                var string4719 = new GraceString(", ");
                                                                                onSelf = true;
                                                                                var call4721 = callmethodChecked(this, "color", [0]);
                                                                                var call4722 = callmethodChecked(call4721, "green", [0]);
                                                                                var string4724 = new GraceString(", ");
                                                                                onSelf = true;
                                                                                var call4726 = callmethodChecked(this, "color", [0]);
                                                                                var call4727 = callmethodChecked(call4726, "red", [0]);
                                                                                var string4729 = new GraceString("rgb(");
                                                                                var opresult4731 = callmethodChecked(string4729, "++", [1], call4727);
                                                                                var opresult4733 = callmethodChecked(opresult4731, "++", [1], string4724);
                                                                                var opresult4735 = callmethodChecked(opresult4733, "++", [1], call4722);
                                                                                var opresult4737 = callmethodChecked(opresult4735, "++", [1], string4719);
                                                                                var opresult4739 = callmethodChecked(opresult4737, "++", [1], call4717);
                                                                                var opresult4741 = callmethodChecked(opresult4739, "++", [1], string4714);
                                                                                var call4742 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult4741);
                                                                                setLineNumber(1893);    // compilenode identifier
                                                                                var call4743 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                                setLineNumber(1894);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4744 = callmethodChecked(this, "location", [0]);
                                                                                var call4745 = callmethodChecked(call4744, "x", [0]);
                                                                                onSelf = true;
                                                                                var call4746 = callmethodChecked(this, "location", [0]);
                                                                                var call4747 = callmethodChecked(call4746, "y", [0]);
                                                                                var call4748 = callmethodChecked(var_ctx, "moveTo", [2], call4745, call4747);
                                                                                setLineNumber(1895);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4749 = callmethodChecked(this, "theEnd", [0]);
                                                                                var call4750 = callmethodChecked(call4749, "x", [0]);
                                                                                onSelf = true;
                                                                                var call4751 = callmethodChecked(this, "theEnd", [0]);
                                                                                var call4752 = callmethodChecked(call4751, "y", [0]);
                                                                                var call4753 = callmethodChecked(var_ctx, "lineTo", [2], call4750, call4752);
                                                                                setLineNumber(1896);    // compilenode identifier
                                                                                var call4754 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                                setLineNumber(1897);    // compilenode identifier
                                                                                var call4755 = callmethodChecked(var_ctx, "restore", [0]);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4755)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method draw(1) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4755;
                                                                              };
                                                                              func4712.paramTypes = [];
                                                                              func4712.paramTypes.push([]);
                                                                              func4712.paramCounts = [1];
                                                                              obj4685.methods["draw"] = func4712;
                                                                              func4712.definitionLine = 1889;
                                                                              func4712.definitionModule = "stobjectdraw";
                                                                              var func4756 = function(argcv) {    // method moveBy(2)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_dx = arguments[curarg];
                                                                                curarg++;
                                                                                var var_dy = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 2)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveBy(2)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1900);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in moveBy (arg list 1), which corresponds to parameter dx, does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 2 in moveBy (arg list 1), which corresponds to parameter dy, does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1903);    // compilenode identifier
                                                                                var opresult4759 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                onSelf = true;
                                                                                var call4761 = callmethodChecked(this, "location", [0]);
                                                                                var opresult4763 = callmethodChecked(call4761, "+", [1], opresult4759);
                                                                                onSelf = true;
                                                                                var call4764 = callmethodChecked(this, "location:=", [1], opresult4763);
                                                                                setLineNumber(1904);    // compilenode identifier
                                                                                var opresult4767 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                onSelf = true;
                                                                                var call4769 = callmethodChecked(this, "theEnd", [0]);
                                                                                var opresult4771 = callmethodChecked(call4769, "+", [1], opresult4767);
                                                                                onSelf = true;
                                                                                var call4772 = callmethodChecked(this, "theEnd:=", [1], opresult4771);
                                                                                setLineNumber(1905);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4773 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4773)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method moveBy(2) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4773;
                                                                              };
                                                                              func4756.paramTypes = [];
                                                                              func4756.paramTypes.push([type_Number, "dx"]);
                                                                              func4756.paramTypes.push([type_Number, "dy"]);
                                                                              func4756.paramCounts = [2];
                                                                              obj4685.methods["moveBy"] = func4756;
                                                                              func4756.definitionLine = 1900;
                                                                              func4756.definitionModule = "stobjectdraw";
                                                                              var func4774 = function(argcv) {    // method moveTo(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_newLocn = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveTo(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1908);    // compilenode call
                                                                                var call4775 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4776 = callmethodChecked(call4775, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4776, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in moveTo (arg list 1), which corresponds to parameter newLocn, does not have " + 
                                                                                            callmethod(call4776, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1911);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4777 = callmethodChecked(this, "location", [0]);
                                                                                var diff4780 = callmethodChecked(var_newLocn, "-", [1], call4777);
                                                                                var call4781 = callmethodChecked(diff4780, "x", [0]);
                                                                                var var_dx = call4781;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_dx)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("value of def 'dx' is not of type Number"));
                                                                                setLineNumber(1912);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4782 = callmethodChecked(this, "location", [0]);
                                                                                var diff4785 = callmethodChecked(var_newLocn, "-", [1], call4782);
                                                                                var call4786 = callmethodChecked(diff4785, "y", [0]);
                                                                                var var_dy = call4786;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_dy)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("value of def 'dy' is not of type Number"));
                                                                                setLineNumber(1913);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4787 = callmethodChecked(this, "location:=", [1], var_newLocn);
                                                                                setLineNumber(1914);    // compilenode identifier
                                                                                var opresult4790 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                onSelf = true;
                                                                                var call4792 = callmethodChecked(this, "theEnd", [0]);
                                                                                var opresult4794 = callmethodChecked(call4792, "+", [1], opresult4790);
                                                                                onSelf = true;
                                                                                var call4795 = callmethodChecked(this, "theEnd:=", [1], opresult4794);
                                                                                setLineNumber(1915);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4796 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4796)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method moveTo(1) does not have " + 
                                                                                            callmethod(var_Done, "asString", [0])._value + "."));
                                                                                return call4796;
                                                                              };
                                                                              func4774.paramCounts = [1];
                                                                              obj4685.methods["moveTo"] = func4774;
                                                                              func4774.definitionLine = 1908;
                                                                              func4774.definitionModule = "stobjectdraw";
                                                                              var func4797 = function(argcv) {    // method dist2(2)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_v = arguments[curarg];
                                                                                curarg++;
                                                                                var var_w = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 2)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dist2(2)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1919);    // compilenode call
                                                                                var call4798 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4799 = callmethodChecked(call4798, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4799, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in dist2 (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                            callmethod(call4799, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4800 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4801 = callmethodChecked(call4800, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4801, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 2 in dist2 (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                            callmethod(call4801, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1921);    // compilenode identifier
                                                                                var call4803 = callmethodChecked(var_w, "y", [0]);
                                                                                var call4805 = callmethodChecked(var_v, "y", [0]);
                                                                                var diff4807 = callmethodChecked(call4805, "-", [1], call4803);
                                                                                var opresult4809 = callmethodChecked(diff4807, "^", [1], new GraceNum(2));
                                                                                var call4812 = callmethodChecked(var_w, "x", [0]);
                                                                                var call4814 = callmethodChecked(var_v, "x", [0]);
                                                                                var diff4816 = callmethodChecked(call4814, "-", [1], call4812);
                                                                                var opresult4818 = callmethodChecked(diff4816, "^", [1], new GraceNum(2));
                                                                                var opresult4820 = callmethodChecked(opresult4818, "+", [1], opresult4809);
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], opresult4820)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method dist2(2) does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                return opresult4820;
                                                                              };
                                                                              func4797.confidential = true;
                                                                              func4797.paramCounts = [2];
                                                                              obj4685.methods["dist2"] = func4797;
                                                                              func4797.definitionLine = 1919;
                                                                              func4797.definitionModule = "stobjectdraw";
                                                                              var func4821 = function(argcv) {    // method distToSegmentSquared(3)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_p = arguments[curarg];
                                                                                curarg++;
                                                                                var var_v = arguments[curarg];
                                                                                curarg++;
                                                                                var var_w = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 3)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for distToSegmentSquared(3)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1925);    // compilenode call
                                                                                var call4822 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4823 = callmethodChecked(call4822, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4823, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in distToSegmentSquared (arg list 1), which corresponds to parameter p, does not have " + 
                                                                                            callmethod(call4823, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4824 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4825 = callmethodChecked(call4824, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4825, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 2 in distToSegmentSquared (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                            callmethod(call4825, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4826 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4827 = callmethodChecked(call4826, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4827, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 3 in distToSegmentSquared (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                            callmethod(call4827, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1929);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4828 = callmethodChecked(this, "dist2", [2], var_v, var_w);
                                                                                var var_l2 = call4828;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_l2)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("initial value of var 'l2' is not of type Number"));
                                                                                var if4829 = GraceDone;
                                                                                setLineNumber(1930);    // compilenode identifier
                                                                                var opresult4832 = callmethodChecked(var_l2, "==", [1], new GraceNum(0));
                                                                                if (Grace_isTrue(opresult4832)) {
                                                                                  onSelf = true;
                                                                                  var call4833 = callmethodChecked(this, "dist2", [2], var_p, var_v);
                                                                                  return call4833;
                                                                                }
                                                                                setLineNumber(1931);    // compilenode identifier
                                                                                var call4835 = callmethodChecked(var_v, "y", [0]);
                                                                                var call4837 = callmethodChecked(var_w, "y", [0]);
                                                                                var diff4839 = callmethodChecked(call4837, "-", [1], call4835);
                                                                                var call4841 = callmethodChecked(var_v, "y", [0]);
                                                                                var call4843 = callmethodChecked(var_p, "y", [0]);
                                                                                var diff4845 = callmethodChecked(call4843, "-", [1], call4841);
                                                                                var prod4847 = callmethodChecked(diff4845, "*", [1], diff4839);
                                                                                var call4849 = callmethodChecked(var_v, "x", [0]);
                                                                                var call4851 = callmethodChecked(var_w, "x", [0]);
                                                                                var diff4853 = callmethodChecked(call4851, "-", [1], call4849);
                                                                                var call4855 = callmethodChecked(var_v, "x", [0]);
                                                                                var call4857 = callmethodChecked(var_p, "x", [0]);
                                                                                var diff4859 = callmethodChecked(call4857, "-", [1], call4855);
                                                                                var prod4861 = callmethodChecked(diff4859, "*", [1], diff4853);
                                                                                var opresult4863 = callmethodChecked(prod4861, "+", [1], prod4847);
                                                                                var quotient4865 = callmethodChecked(opresult4863, "/", [1], var_l2);
                                                                                var var_t = quotient4865;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_t)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("initial value of var 't' is not of type Number"));
                                                                                var if4866 = GraceDone;
                                                                                setLineNumber(1932);    // compilenode identifier
                                                                                var opresult4869 = callmethodChecked(var_t, "<", [1], new GraceNum(0));
                                                                                if (Grace_isTrue(opresult4869)) {
                                                                                  onSelf = true;
                                                                                  var call4870 = callmethodChecked(this, "dist2", [2], var_p, var_v);
                                                                                  return call4870;
                                                                                }
                                                                                var if4871 = GraceDone;
                                                                                setLineNumber(1933);    // compilenode identifier
                                                                                var opresult4874 = callmethodChecked(var_t, ">", [1], new GraceNum(1));
                                                                                if (Grace_isTrue(opresult4874)) {
                                                                                  onSelf = true;
                                                                                  var call4875 = callmethodChecked(this, "dist2", [2], var_p, var_w);
                                                                                  return call4875;
                                                                                }
                                                                                setLineNumber(1935);    // compilenode identifier
                                                                                var call4876 = callmethodChecked(var_v, "y", [0]);
                                                                                var call4878 = callmethodChecked(var_w, "y", [0]);
                                                                                var diff4880 = callmethodChecked(call4878, "-", [1], call4876);
                                                                                var prod4883 = callmethodChecked(var_t, "*", [1], diff4880);
                                                                                var call4885 = callmethodChecked(var_v, "y", [0]);
                                                                                var opresult4887 = callmethodChecked(call4885, "+", [1], prod4883);
                                                                                setLineNumber(1934);    // compilenode identifier
                                                                                var call4889 = callmethodChecked(var_v, "x", [0]);
                                                                                var call4891 = callmethodChecked(var_w, "x", [0]);
                                                                                var diff4893 = callmethodChecked(call4891, "-", [1], call4889);
                                                                                var prod4896 = callmethodChecked(var_t, "*", [1], diff4893);
                                                                                var call4898 = callmethodChecked(var_v, "x", [0]);
                                                                                var opresult4900 = callmethodChecked(call4898, "+", [1], prod4896);
                                                                                var opresult4902 = callmethodChecked(opresult4900, "@", [1], opresult4887);
                                                                                onSelf = true;
                                                                                var call4903 = callmethodChecked(this, "dist2", [2], var_p, opresult4902);
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], call4903)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method distToSegmentSquared(3) does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                return call4903;
                                                                              };
                                                                              func4821.confidential = true;
                                                                              func4821.paramCounts = [3];
                                                                              obj4685.methods["distToSegmentSquared"] = func4821;
                                                                              func4821.definitionLine = 1925;
                                                                              func4821.definitionModule = "stobjectdraw";
                                                                              var func4904 = function(argcv) {    // method distToSegment(3)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_p = arguments[curarg];
                                                                                curarg++;
                                                                                var var_v = arguments[curarg];
                                                                                curarg++;
                                                                                var var_w = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 3)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for distToSegment(3)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1938);    // compilenode call
                                                                                var call4905 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4906 = callmethodChecked(call4905, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4906, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in distToSegment (arg list 1), which corresponds to parameter p, does not have " + 
                                                                                            callmethod(call4906, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4907 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4908 = callmethodChecked(call4907, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4908, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 2 in distToSegment (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                            callmethod(call4908, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                var call4909 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4910 = callmethodChecked(call4909, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4910, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 3 in distToSegment (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                            callmethod(call4910, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1940);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call4911 = callmethodChecked(this, "distToSegmentSquared", [3], var_p, var_v, var_w);
                                                                                var call4912 = callmethodChecked(var_math, "sqrt", [1], call4911);
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], call4912)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method distToSegment(3) does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                return call4912;
                                                                              };
                                                                              func4904.paramCounts = [3];
                                                                              obj4685.methods["distToSegment"] = func4904;
                                                                              func4904.definitionLine = 1938;
                                                                              func4904.definitionModule = "stobjectdraw";
                                                                              var func4913 = function(argcv) {    // method contains(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_pt = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(1943);    // compilenode call
                                                                                var call4914 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call4915 = callmethodChecked(call4914, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call4915, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                                            callmethod(call4915, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1947);    // compilenode num
                                                                                var var_tolerance = new GraceNum(2);
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_tolerance)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("value of def 'tolerance' is not of type Number"));
                                                                                setLineNumber(1948);    // compilenode call
                                                                                onSelf = true;
                                                                                var call4917 = callmethodChecked(this, "start", [0]);
                                                                                onSelf = true;
                                                                                var call4918 = callmethodChecked(this, "end", [0]);
                                                                                onSelf = true;
                                                                                var call4919 = callmethodChecked(this, "distToSegment", [3], var_pt, call4917, call4918);
                                                                                var opresult4921 = callmethodChecked(call4919, "<", [1], var_tolerance);
                                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult4921)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method contains(1) does not have " + 
                                                                                            callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                return opresult4921;
                                                                              };
                                                                              func4913.paramCounts = [1];
                                                                              obj4685.methods["contains"] = func4913;
                                                                              func4913.definitionLine = 1943;
                                                                              func4913.definitionModule = "stobjectdraw";
                                                                              var func4922 = function(argcv) {    // method asString
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                if (argcv[0] !== 0)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1953);    // compilenode string
                                                                                var string4923 = new GraceString("");
                                                                                onSelf = true;
                                                                                var call4925 = callmethodChecked(this, "color", [0]);
                                                                                var string4927 = new GraceString(" with color ");
                                                                                onSelf = true;
                                                                                var call4929 = callmethodChecked(this, "end", [0]);
                                                                                var string4931 = new GraceString(" to ");
                                                                                onSelf = true;
                                                                                var call4933 = callmethodChecked(this, "start", [0]);
                                                                                var string4935 = new GraceString("Line from ");
                                                                                var opresult4937 = callmethodChecked(string4935, "++", [1], call4933);
                                                                                var opresult4939 = callmethodChecked(opresult4937, "++", [1], string4931);
                                                                                var opresult4941 = callmethodChecked(opresult4939, "++", [1], call4929);
                                                                                var opresult4943 = callmethodChecked(opresult4941, "++", [1], string4927);
                                                                                var opresult4945 = callmethodChecked(opresult4943, "++", [1], call4925);
                                                                                var opresult4947 = callmethodChecked(opresult4945, "++", [1], string4923);
                                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult4947)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method asString does not have " + 
                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                return opresult4947;
                                                                              };
                                                                              func4922.paramCounts = [0];
                                                                              obj4685.methods["asString"] = func4922;
                                                                              func4922.definitionLine = 1951;
                                                                              func4922.definitionModule = "stobjectdraw";
                                                                              setLineNumber(1849);    // compilenode call
                                                                              var call4948 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call4949 = callmethodChecked(call4948, "drawableAt()on()object", [1, 1, 1], var_start__39__, var_canvas__39__, this);
                                                                              obj4685.superobj = call4949;
                                                                              if (call4949.data) obj4685.data = call4949.data;
                                                                              if (call4949.hasOwnProperty('_value'))
                                                                                  obj4685._value = call4949._value;
                                                                              setLineNumber(1851);    // compilenode identifier
                                                                              obj4685.data["theEnd"] = var_end__39__;
                                                                              var reader_stobjectdraw_theEnd4950 = function() {
                                                                                return this.data["theEnd"];
                                                                              };
                                                                              obj4685.methods["theEnd"] = reader_stobjectdraw_theEnd4950;
                                                                              obj4685.data["theEnd"] = var_end__39__;
                                                                              var writer_stobjectdraw_theEnd4950 = function(argcv, o) {
                                                                                this.data["theEnd"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj4685.methods["theEnd:="] = writer_stobjectdraw_theEnd4950;
                                                                              reader_stobjectdraw_theEnd4950.confidential = true;
                                                                              writer_stobjectdraw_theEnd4950.confidential = true;
                                                                              var call4951 = callmethodChecked(superDepth, "outer", [0]);
                                                                              onOuter = true;
                                                                              onSelf = true;
                                                                              var call4952 = callmethodChecked(call4951, "Point", [0]);
                                                                              if (!Grace_isTrue(callmethod(call4952, "match", [1], var_end__39__)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("initial value of var 'theEnd' is not of type self.outer.Point"));
                                                                              obj4685.mutable = true;
                                                                              setLineNumber(1865);    // compilenode identifier
                                                                              onSelf = true;
                                                                              var call4953 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                              superDepth = origSuperDepth;
                                                                            };
                                                                            obj_init_4685.apply(obj4685, []);
                                                                            setLineNumber(1846);    // return value
                                                                            if (!Grace_isTrue(callmethod(var_Line, "match", [1], obj4685)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method lineFrom(1)to(1)on(1) does not have " + 
                                                                                        callmethod(var_Line, "asString", [0])._value + "."));
                                                                            return obj4685;
                                                                          };
                                                                          func4682.paramTypes = [];
                                                                          func4682.paramTypes.push([]);
                                                                          func4682.paramTypes.push([]);
                                                                          func4682.paramTypes.push([]);
                                                                          func4682.paramCounts = [1, 1, 1];
                                                                          this.methods["lineFrom()to()on"] = func4682;
                                                                          func4682.definitionLine = 1846;
                                                                          func4682.definitionModule = "stobjectdraw";
                                                                            var func4954 = function(argcv) {    // method lineFrom(1     )to(1     )on(1     )()object
                                                                              var curarg = 1;
                                                                              var var_start__39__ = arguments[curarg];
                                                                              curarg++;
                                                                              var var_end__39__ = arguments[curarg];
                                                                              curarg++;
                                                                              var var_canvas__39__ = arguments[curarg];
                                                                              curarg++;
                                                                              var inheritingObject = arguments[curarg++];
                                                                              // Start argument processing
                                                                              curarg = 1;
                                                                              onSelf = true;
                                                                              var call4955 = callmethodChecked(this, "Point", [0]);
                                                                              if (!Grace_isTrue(callmethod(call4955, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in lineFrom (arg list 1), which corresponds to parameter start', does not have " + 
                                                                                          callmethod(call4955, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              onSelf = true;
                                                                              var call4956 = callmethodChecked(this, "Point", [0]);
                                                                              if (!Grace_isTrue(callmethod(call4956, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in to (arg list 2), which corresponds to parameter end', does not have " + 
                                                                                          callmethod(call4956, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              setLineNumber(1847);    // compilenode identifier
                                                                              if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                          callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              // End argument processing
                                                                              setModuleName("stobjectdraw");
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var obj4957 = Grace_allocObject(null, "lineFrom()to()on");
                                                                              obj4957.definitionModule = "stobjectdraw";
                                                                              obj4957.definitionLine = 1846;
                                                                              var inho4957 = inheritingObject;
                                                                              while (inho4957.superobj) inho4957 = inho4957.superobj;
                                                                              inho4957.superobj = obj4957;
                                                                              obj4957.data = inheritingObject.data;
                                                                              if (inheritingObject.hasOwnProperty('_value'))
                                                                                obj4957._value = inheritingObject._value;
                                                                              obj4957.outer = this;
                                                                              var reader_stobjectdraw_outer4958 = function() {
                                                                                return this.outer;
                                                                              };
                                                                              obj4957.methods["outer"] = reader_stobjectdraw_outer4958;
                                                                              var obj_init_4957 = function() {
                                                                                var origSuperDepth = superDepth;
                                                                                superDepth = obj4957;
                                                                                var func4959 = function(argcv) {    // method start
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for start"));
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1856);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call4960 = callmethodChecked(this, "location", [0]);
                                                                                  setLineNumber(1853);    // compilenode call
                                                                                  var call4961 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4962 = callmethodChecked(call4961, "Point", [0]);
                                                                                  setLineNumber(1856);    // return value
                                                                                  if (!Grace_isTrue(callmethod(call4962, "match", [1], call4960)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method start does not have " + 
                                                                                              callmethod(call4962, "asString", [0])._value + "."));
                                                                                  return call4960;
                                                                                };
                                                                                func4959.paramCounts = [0];
                                                                                obj4957.methods["start"] = func4959;
                                                                                func4959.definitionLine = 1853;
                                                                                func4959.definitionModule = "stobjectdraw";
                                                                                var func4963 = function(argcv) {    // method end
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for end"));
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1862);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call4964 = callmethodChecked(this, "theEnd", [0]);
                                                                                  setLineNumber(1859);    // compilenode call
                                                                                  var call4965 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4966 = callmethodChecked(call4965, "Point", [0]);
                                                                                  setLineNumber(1862);    // return value
                                                                                  if (!Grace_isTrue(callmethod(call4966, "match", [1], call4964)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method end does not have " + 
                                                                                              callmethod(call4966, "asString", [0])._value + "."));
                                                                                  return call4964;
                                                                                };
                                                                                func4963.paramCounts = [0];
                                                                                obj4957.methods["end"] = func4963;
                                                                                func4963.definitionLine = 1859;
                                                                                func4963.definitionModule = "stobjectdraw";
                                                                                var func4967 = function(argcv) {    // method start:=(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_newStart = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for start:=(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1867);    // compilenode call
                                                                                  var call4968 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4969 = callmethodChecked(call4968, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call4969, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in start:= (arg list 1), which corresponds to parameter newStart, does not have " + 
                                                                                              callmethod(call4969, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1870);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call4970 = callmethodChecked(this, "location:=", [1], var_newStart);
                                                                                  setLineNumber(1871);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call4971 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4971)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method start:=(1) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call4971;
                                                                                };
                                                                                func4967.paramCounts = [1];
                                                                                obj4957.methods["start:="] = func4967;
                                                                                func4967.definitionLine = 1867;
                                                                                func4967.definitionModule = "stobjectdraw";
                                                                                var func4972 = function(argcv) {    // method end:=(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_newEnd = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for end:=(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1874);    // compilenode call
                                                                                  var call4973 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4974 = callmethodChecked(call4973, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call4974, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in end:= (arg list 1), which corresponds to parameter newEnd, does not have " + 
                                                                                              callmethod(call4974, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1877);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call4975 = callmethodChecked(this, "theEnd:=", [1], var_newEnd);
                                                                                  setLineNumber(1878);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call4976 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4976)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method end:=(1) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call4976;
                                                                                };
                                                                                func4972.paramCounts = [1];
                                                                                obj4957.methods["end:="] = func4972;
                                                                                func4972.definitionLine = 1874;
                                                                                func4972.definitionModule = "stobjectdraw";
                                                                                var func4977 = function(argcv) {    // method setEndPoints(2)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_newStart = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_newEnd = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 2)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for setEndPoints(2)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1881);    // compilenode call
                                                                                  var call4978 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4979 = callmethodChecked(call4978, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call4979, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in setEndPoints (arg list 1), which corresponds to parameter newStart, does not have " + 
                                                                                              callmethod(call4979, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call4980 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call4981 = callmethodChecked(call4980, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call4981, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 2 in setEndPoints (arg list 1), which corresponds to parameter newEnd, does not have " + 
                                                                                              callmethod(call4981, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1884);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call4982 = callmethodChecked(this, "start:=", [1], var_newStart);
                                                                                  setLineNumber(1885);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call4983 = callmethodChecked(this, "end:=", [1], var_newEnd);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call4983)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method setEndPoints(2) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call4983;
                                                                                };
                                                                                func4977.paramCounts = [2];
                                                                                obj4957.methods["setEndPoints"] = func4977;
                                                                                func4977.definitionLine = 1881;
                                                                                func4977.definitionModule = "stobjectdraw";
                                                                                var func4984 = function(argcv) {    // method draw(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_ctx = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1889);    // compilenode identifier
                                                                                  if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                              callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1891);    // compilenode identifier
                                                                                  var call4985 = callmethodChecked(var_ctx, "save", [0]);
                                                                                  setLineNumber(1892);    // compilenode string
                                                                                  var string4986 = new GraceString(")");
                                                                                  onSelf = true;
                                                                                  var call4988 = callmethodChecked(this, "color", [0]);
                                                                                  var call4989 = callmethodChecked(call4988, "blue", [0]);
                                                                                  var string4991 = new GraceString(", ");
                                                                                  onSelf = true;
                                                                                  var call4993 = callmethodChecked(this, "color", [0]);
                                                                                  var call4994 = callmethodChecked(call4993, "green", [0]);
                                                                                  var string4996 = new GraceString(", ");
                                                                                  onSelf = true;
                                                                                  var call4998 = callmethodChecked(this, "color", [0]);
                                                                                  var call4999 = callmethodChecked(call4998, "red", [0]);
                                                                                  var string5001 = new GraceString("rgb(");
                                                                                  var opresult5003 = callmethodChecked(string5001, "++", [1], call4999);
                                                                                  var opresult5005 = callmethodChecked(opresult5003, "++", [1], string4996);
                                                                                  var opresult5007 = callmethodChecked(opresult5005, "++", [1], call4994);
                                                                                  var opresult5009 = callmethodChecked(opresult5007, "++", [1], string4991);
                                                                                  var opresult5011 = callmethodChecked(opresult5009, "++", [1], call4989);
                                                                                  var opresult5013 = callmethodChecked(opresult5011, "++", [1], string4986);
                                                                                  var call5014 = callmethodChecked(var_ctx, "strokeStyle:=", [1], opresult5013);
                                                                                  setLineNumber(1893);    // compilenode identifier
                                                                                  var call5015 = callmethodChecked(var_ctx, "beginPath", [0]);
                                                                                  setLineNumber(1894);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5016 = callmethodChecked(this, "location", [0]);
                                                                                  var call5017 = callmethodChecked(call5016, "x", [0]);
                                                                                  onSelf = true;
                                                                                  var call5018 = callmethodChecked(this, "location", [0]);
                                                                                  var call5019 = callmethodChecked(call5018, "y", [0]);
                                                                                  var call5020 = callmethodChecked(var_ctx, "moveTo", [2], call5017, call5019);
                                                                                  setLineNumber(1895);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5021 = callmethodChecked(this, "theEnd", [0]);
                                                                                  var call5022 = callmethodChecked(call5021, "x", [0]);
                                                                                  onSelf = true;
                                                                                  var call5023 = callmethodChecked(this, "theEnd", [0]);
                                                                                  var call5024 = callmethodChecked(call5023, "y", [0]);
                                                                                  var call5025 = callmethodChecked(var_ctx, "lineTo", [2], call5022, call5024);
                                                                                  setLineNumber(1896);    // compilenode identifier
                                                                                  var call5026 = callmethodChecked(var_ctx, "stroke", [0]);
                                                                                  setLineNumber(1897);    // compilenode identifier
                                                                                  var call5027 = callmethodChecked(var_ctx, "restore", [0]);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5027)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method draw(1) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call5027;
                                                                                };
                                                                                func4984.paramTypes = [];
                                                                                func4984.paramTypes.push([]);
                                                                                func4984.paramCounts = [1];
                                                                                obj4957.methods["draw"] = func4984;
                                                                                func4984.definitionLine = 1889;
                                                                                func4984.definitionModule = "stobjectdraw";
                                                                                var func5028 = function(argcv) {    // method moveBy(2)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_dx = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_dy = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 2)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveBy(2)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1900);    // compilenode identifier
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in moveBy (arg list 1), which corresponds to parameter dx, does not have " + 
                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 2 in moveBy (arg list 1), which corresponds to parameter dy, does not have " + 
                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1903);    // compilenode identifier
                                                                                  var opresult5031 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                  onSelf = true;
                                                                                  var call5033 = callmethodChecked(this, "location", [0]);
                                                                                  var opresult5035 = callmethodChecked(call5033, "+", [1], opresult5031);
                                                                                  onSelf = true;
                                                                                  var call5036 = callmethodChecked(this, "location:=", [1], opresult5035);
                                                                                  setLineNumber(1904);    // compilenode identifier
                                                                                  var opresult5039 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                  onSelf = true;
                                                                                  var call5041 = callmethodChecked(this, "theEnd", [0]);
                                                                                  var opresult5043 = callmethodChecked(call5041, "+", [1], opresult5039);
                                                                                  onSelf = true;
                                                                                  var call5044 = callmethodChecked(this, "theEnd:=", [1], opresult5043);
                                                                                  setLineNumber(1905);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5045 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5045)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method moveBy(2) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call5045;
                                                                                };
                                                                                func5028.paramTypes = [];
                                                                                func5028.paramTypes.push([type_Number, "dx"]);
                                                                                func5028.paramTypes.push([type_Number, "dy"]);
                                                                                func5028.paramCounts = [2];
                                                                                obj4957.methods["moveBy"] = func5028;
                                                                                func5028.definitionLine = 1900;
                                                                                func5028.definitionModule = "stobjectdraw";
                                                                                var func5046 = function(argcv) {    // method moveTo(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_newLocn = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for moveTo(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1908);    // compilenode call
                                                                                  var call5047 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5048 = callmethodChecked(call5047, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5048, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in moveTo (arg list 1), which corresponds to parameter newLocn, does not have " + 
                                                                                              callmethod(call5048, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1911);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5049 = callmethodChecked(this, "location", [0]);
                                                                                  var diff5052 = callmethodChecked(var_newLocn, "-", [1], call5049);
                                                                                  var call5053 = callmethodChecked(diff5052, "x", [0]);
                                                                                  var var_dx = call5053;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_dx)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("value of def 'dx' is not of type Number"));
                                                                                  setLineNumber(1912);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5054 = callmethodChecked(this, "location", [0]);
                                                                                  var diff5057 = callmethodChecked(var_newLocn, "-", [1], call5054);
                                                                                  var call5058 = callmethodChecked(diff5057, "y", [0]);
                                                                                  var var_dy = call5058;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_dy)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("value of def 'dy' is not of type Number"));
                                                                                  setLineNumber(1913);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call5059 = callmethodChecked(this, "location:=", [1], var_newLocn);
                                                                                  setLineNumber(1914);    // compilenode identifier
                                                                                  var opresult5062 = callmethodChecked(var_dx, "@", [1], var_dy);
                                                                                  onSelf = true;
                                                                                  var call5064 = callmethodChecked(this, "theEnd", [0]);
                                                                                  var opresult5066 = callmethodChecked(call5064, "+", [1], opresult5062);
                                                                                  onSelf = true;
                                                                                  var call5067 = callmethodChecked(this, "theEnd:=", [1], opresult5066);
                                                                                  setLineNumber(1915);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5068 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5068)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method moveTo(1) does not have " + 
                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                  return call5068;
                                                                                };
                                                                                func5046.paramCounts = [1];
                                                                                obj4957.methods["moveTo"] = func5046;
                                                                                func5046.definitionLine = 1908;
                                                                                func5046.definitionModule = "stobjectdraw";
                                                                                var func5069 = function(argcv) {    // method dist2(2)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_v = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_w = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 2)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for dist2(2)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1919);    // compilenode call
                                                                                  var call5070 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5071 = callmethodChecked(call5070, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5071, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in dist2 (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                              callmethod(call5071, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call5072 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5073 = callmethodChecked(call5072, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5073, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 2 in dist2 (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                              callmethod(call5073, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1921);    // compilenode identifier
                                                                                  var call5075 = callmethodChecked(var_w, "y", [0]);
                                                                                  var call5077 = callmethodChecked(var_v, "y", [0]);
                                                                                  var diff5079 = callmethodChecked(call5077, "-", [1], call5075);
                                                                                  var opresult5081 = callmethodChecked(diff5079, "^", [1], new GraceNum(2));
                                                                                  var call5084 = callmethodChecked(var_w, "x", [0]);
                                                                                  var call5086 = callmethodChecked(var_v, "x", [0]);
                                                                                  var diff5088 = callmethodChecked(call5086, "-", [1], call5084);
                                                                                  var opresult5090 = callmethodChecked(diff5088, "^", [1], new GraceNum(2));
                                                                                  var opresult5092 = callmethodChecked(opresult5090, "+", [1], opresult5081);
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], opresult5092)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method dist2(2) does not have " + 
                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                  return opresult5092;
                                                                                };
                                                                                func5069.confidential = true;
                                                                                func5069.paramCounts = [2];
                                                                                obj4957.methods["dist2"] = func5069;
                                                                                func5069.definitionLine = 1919;
                                                                                func5069.definitionModule = "stobjectdraw";
                                                                                var func5093 = function(argcv) {    // method distToSegmentSquared(3)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_p = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_v = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_w = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 3)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for distToSegmentSquared(3)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1925);    // compilenode call
                                                                                  var call5094 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5095 = callmethodChecked(call5094, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5095, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in distToSegmentSquared (arg list 1), which corresponds to parameter p, does not have " + 
                                                                                              callmethod(call5095, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call5096 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5097 = callmethodChecked(call5096, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5097, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 2 in distToSegmentSquared (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                              callmethod(call5097, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call5098 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5099 = callmethodChecked(call5098, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5099, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 3 in distToSegmentSquared (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                              callmethod(call5099, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1929);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call5100 = callmethodChecked(this, "dist2", [2], var_v, var_w);
                                                                                  var var_l2 = call5100;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_l2)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("initial value of var 'l2' is not of type Number"));
                                                                                  var if5101 = GraceDone;
                                                                                  setLineNumber(1930);    // compilenode identifier
                                                                                  var opresult5104 = callmethodChecked(var_l2, "==", [1], new GraceNum(0));
                                                                                  if (Grace_isTrue(opresult5104)) {
                                                                                    onSelf = true;
                                                                                    var call5105 = callmethodChecked(this, "dist2", [2], var_p, var_v);
                                                                                    return call5105;
                                                                                  }
                                                                                  setLineNumber(1931);    // compilenode identifier
                                                                                  var call5107 = callmethodChecked(var_v, "y", [0]);
                                                                                  var call5109 = callmethodChecked(var_w, "y", [0]);
                                                                                  var diff5111 = callmethodChecked(call5109, "-", [1], call5107);
                                                                                  var call5113 = callmethodChecked(var_v, "y", [0]);
                                                                                  var call5115 = callmethodChecked(var_p, "y", [0]);
                                                                                  var diff5117 = callmethodChecked(call5115, "-", [1], call5113);
                                                                                  var prod5119 = callmethodChecked(diff5117, "*", [1], diff5111);
                                                                                  var call5121 = callmethodChecked(var_v, "x", [0]);
                                                                                  var call5123 = callmethodChecked(var_w, "x", [0]);
                                                                                  var diff5125 = callmethodChecked(call5123, "-", [1], call5121);
                                                                                  var call5127 = callmethodChecked(var_v, "x", [0]);
                                                                                  var call5129 = callmethodChecked(var_p, "x", [0]);
                                                                                  var diff5131 = callmethodChecked(call5129, "-", [1], call5127);
                                                                                  var prod5133 = callmethodChecked(diff5131, "*", [1], diff5125);
                                                                                  var opresult5135 = callmethodChecked(prod5133, "+", [1], prod5119);
                                                                                  var quotient5137 = callmethodChecked(opresult5135, "/", [1], var_l2);
                                                                                  var var_t = quotient5137;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_t)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("initial value of var 't' is not of type Number"));
                                                                                  var if5138 = GraceDone;
                                                                                  setLineNumber(1932);    // compilenode identifier
                                                                                  var opresult5141 = callmethodChecked(var_t, "<", [1], new GraceNum(0));
                                                                                  if (Grace_isTrue(opresult5141)) {
                                                                                    onSelf = true;
                                                                                    var call5142 = callmethodChecked(this, "dist2", [2], var_p, var_v);
                                                                                    return call5142;
                                                                                  }
                                                                                  var if5143 = GraceDone;
                                                                                  setLineNumber(1933);    // compilenode identifier
                                                                                  var opresult5146 = callmethodChecked(var_t, ">", [1], new GraceNum(1));
                                                                                  if (Grace_isTrue(opresult5146)) {
                                                                                    onSelf = true;
                                                                                    var call5147 = callmethodChecked(this, "dist2", [2], var_p, var_w);
                                                                                    return call5147;
                                                                                  }
                                                                                  setLineNumber(1935);    // compilenode identifier
                                                                                  var call5148 = callmethodChecked(var_v, "y", [0]);
                                                                                  var call5150 = callmethodChecked(var_w, "y", [0]);
                                                                                  var diff5152 = callmethodChecked(call5150, "-", [1], call5148);
                                                                                  var prod5155 = callmethodChecked(var_t, "*", [1], diff5152);
                                                                                  var call5157 = callmethodChecked(var_v, "y", [0]);
                                                                                  var opresult5159 = callmethodChecked(call5157, "+", [1], prod5155);
                                                                                  setLineNumber(1934);    // compilenode identifier
                                                                                  var call5161 = callmethodChecked(var_v, "x", [0]);
                                                                                  var call5163 = callmethodChecked(var_w, "x", [0]);
                                                                                  var diff5165 = callmethodChecked(call5163, "-", [1], call5161);
                                                                                  var prod5168 = callmethodChecked(var_t, "*", [1], diff5165);
                                                                                  var call5170 = callmethodChecked(var_v, "x", [0]);
                                                                                  var opresult5172 = callmethodChecked(call5170, "+", [1], prod5168);
                                                                                  var opresult5174 = callmethodChecked(opresult5172, "@", [1], opresult5159);
                                                                                  onSelf = true;
                                                                                  var call5175 = callmethodChecked(this, "dist2", [2], var_p, opresult5174);
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5175)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method distToSegmentSquared(3) does not have " + 
                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                  return call5175;
                                                                                };
                                                                                func5093.confidential = true;
                                                                                func5093.paramCounts = [3];
                                                                                obj4957.methods["distToSegmentSquared"] = func5093;
                                                                                func5093.definitionLine = 1925;
                                                                                func5093.definitionModule = "stobjectdraw";
                                                                                var func5176 = function(argcv) {    // method distToSegment(3)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_p = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_v = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_w = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 3)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for distToSegment(3)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1938);    // compilenode call
                                                                                  var call5177 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5178 = callmethodChecked(call5177, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5178, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in distToSegment (arg list 1), which corresponds to parameter p, does not have " + 
                                                                                              callmethod(call5178, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call5179 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5180 = callmethodChecked(call5179, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5180, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 2 in distToSegment (arg list 1), which corresponds to parameter v, does not have " + 
                                                                                              callmethod(call5180, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  var call5181 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5182 = callmethodChecked(call5181, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5182, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 3 in distToSegment (arg list 1), which corresponds to parameter w, does not have " + 
                                                                                              callmethod(call5182, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1940);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call5183 = callmethodChecked(this, "distToSegmentSquared", [3], var_p, var_v, var_w);
                                                                                  var call5184 = callmethodChecked(var_math, "sqrt", [1], call5183);
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5184)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method distToSegment(3) does not have " + 
                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                  return call5184;
                                                                                };
                                                                                func5176.paramCounts = [3];
                                                                                obj4957.methods["distToSegment"] = func5176;
                                                                                func5176.definitionLine = 1938;
                                                                                func5176.definitionModule = "stobjectdraw";
                                                                                var func5185 = function(argcv) {    // method contains(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_pt = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contains(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(1943);    // compilenode call
                                                                                  var call5186 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5187 = callmethodChecked(call5186, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5187, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in contains (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                                              callmethod(call5187, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1947);    // compilenode num
                                                                                  var var_tolerance = new GraceNum(2);
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_tolerance)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("value of def 'tolerance' is not of type Number"));
                                                                                  setLineNumber(1948);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5189 = callmethodChecked(this, "start", [0]);
                                                                                  onSelf = true;
                                                                                  var call5190 = callmethodChecked(this, "end", [0]);
                                                                                  onSelf = true;
                                                                                  var call5191 = callmethodChecked(this, "distToSegment", [3], var_pt, call5189, call5190);
                                                                                  var opresult5193 = callmethodChecked(call5191, "<", [1], var_tolerance);
                                                                                  if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult5193)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method contains(1) does not have " + 
                                                                                              callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                  return opresult5193;
                                                                                };
                                                                                func5185.paramCounts = [1];
                                                                                obj4957.methods["contains"] = func5185;
                                                                                func5185.definitionLine = 1943;
                                                                                func5185.definitionModule = "stobjectdraw";
                                                                                var func5194 = function(argcv) {    // method asString
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  if (argcv[0] !== 0)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                  setModuleName("stobjectdraw");
                                                                                  setLineNumber(1953);    // compilenode string
                                                                                  var string5195 = new GraceString("");
                                                                                  onSelf = true;
                                                                                  var call5197 = callmethodChecked(this, "color", [0]);
                                                                                  var string5199 = new GraceString(" with color ");
                                                                                  onSelf = true;
                                                                                  var call5201 = callmethodChecked(this, "end", [0]);
                                                                                  var string5203 = new GraceString(" to ");
                                                                                  onSelf = true;
                                                                                  var call5205 = callmethodChecked(this, "start", [0]);
                                                                                  var string5207 = new GraceString("Line from ");
                                                                                  var opresult5209 = callmethodChecked(string5207, "++", [1], call5205);
                                                                                  var opresult5211 = callmethodChecked(opresult5209, "++", [1], string5203);
                                                                                  var opresult5213 = callmethodChecked(opresult5211, "++", [1], call5201);
                                                                                  var opresult5215 = callmethodChecked(opresult5213, "++", [1], string5199);
                                                                                  var opresult5217 = callmethodChecked(opresult5215, "++", [1], call5197);
                                                                                  var opresult5219 = callmethodChecked(opresult5217, "++", [1], string5195);
                                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5219)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method asString does not have " + 
                                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                                  return opresult5219;
                                                                                };
                                                                                func5194.paramCounts = [0];
                                                                                obj4957.methods["asString"] = func5194;
                                                                                func5194.definitionLine = 1951;
                                                                                func5194.definitionModule = "stobjectdraw";
                                                                                setLineNumber(1849);    // compilenode call
                                                                                var call5220 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call5221 = callmethodChecked(call5220, "drawableAt()on()object", [1, 1, 1], var_start__39__, var_canvas__39__, this);
                                                                                obj4957.superobj = call5221;
                                                                                if (call5221.data) obj4957.data = call5221.data;
                                                                                if (call5221.hasOwnProperty('_value'))
                                                                                    obj4957._value = call5221._value;
                                                                                setLineNumber(1851);    // compilenode identifier
                                                                                obj4957.data["theEnd"] = var_end__39__;
                                                                                var reader_stobjectdraw_theEnd5222 = function() {
                                                                                  return this.data["theEnd"];
                                                                                };
                                                                                obj4957.methods["theEnd"] = reader_stobjectdraw_theEnd5222;
                                                                                obj4957.data["theEnd"] = var_end__39__;
                                                                                var writer_stobjectdraw_theEnd5222 = function(argcv, o) {
                                                                                  this.data["theEnd"] = o;
                                                                                  return GraceDone;
                                                                                };
                                                                                obj4957.methods["theEnd:="] = writer_stobjectdraw_theEnd5222;
                                                                                reader_stobjectdraw_theEnd5222.confidential = true;
                                                                                writer_stobjectdraw_theEnd5222.confidential = true;
                                                                                var call5223 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call5224 = callmethodChecked(call5223, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call5224, "match", [1], var_end__39__)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("initial value of var 'theEnd' is not of type self.outer.Point"));
                                                                                obj4957.mutable = true;
                                                                                setLineNumber(1865);    // compilenode identifier
                                                                                onSelf = true;
                                                                                var call5225 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                                superDepth = origSuperDepth;
                                                                              };
                                                                              obj_init_4957.apply(inheritingObject, []);
                                                                              return obj4957;
                                                                              };
                                                                              func4954.paramTypes = [];
                                                                              func4954.paramTypes.push([]);
                                                                              func4954.paramTypes.push([]);
                                                                              func4954.paramTypes.push([]);
                                                                              this.methods["lineFrom()to()on()object"] = func4954;
                                                                            setLineNumber(1957);    // compilenode method
                                                                            var func5226 = function(argcv) {    // method lineFrom(1)length(1)direction(1)on(1)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_pt = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[0] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for lineFrom (arg list 1) of lineFrom(1)length(1)direction(1)on(1)"));
                                                                              var var_len = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[1] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for length (arg list 2) of lineFrom(1)length(1)direction(1)on(1)"));
                                                                              var var_radians = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[2] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for direction (arg list 3) of lineFrom(1)length(1)direction(1)on(1)"));
                                                                              var var_canvas__39__ = arguments[curarg];
                                                                              curarg++;
                                                                              if (argcv[3] !== 1)
                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 4) of lineFrom(1)length(1)direction(1)on(1)"));
                                                                              // Start argument checking
                                                                              curarg = 1;
                                                                              onSelf = true;
                                                                              var call5227 = callmethodChecked(this, "Point", [0]);
                                                                              if (!Grace_isTrue(callmethod(call5227, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in lineFrom (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                                          callmethod(call5227, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in length (arg list 2), which corresponds to parameter len, does not have " + 
                                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in direction (arg list 3), which corresponds to parameter radians, does not have " + 
                                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              setLineNumber(1958);    // compilenode identifier
                                                                              if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in on (arg list 4), which corresponds to parameter canvas', does not have " + 
                                                                                          callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              // End argument checking
                                                                              setModuleName("stobjectdraw");
                                                                              setLineNumber(1957);    // compilenode object
                                                                              var obj5228 = Grace_allocObject(null, "stobjectdraw.lineFrom()length()direction()on");
                                                                              obj5228.definitionModule = "stobjectdraw";
                                                                              obj5228.definitionLine = 1957;
                                                                              obj5228.outer = this;
                                                                              var reader_stobjectdraw_outer5229 = function() {
                                                                                return this.outer;
                                                                              };
                                                                              obj5228.methods["outer"] = reader_stobjectdraw_outer5229;
                                                                              var obj_init_5228 = function() {
                                                                                var origSuperDepth = superDepth;
                                                                                superDepth = obj5228;
                                                                                setLineNumber(1963);    // compilenode identifier
                                                                                var call5230 = callmethodChecked(var_math, "sin", [1], var_radians);
                                                                                var call5232 = callmethodChecked(var_len, "prefix-", [0]);
                                                                                var prod5234 = callmethodChecked(call5232, "*", [1], call5230);
                                                                                setLineNumber(1962);    // compilenode identifier
                                                                                var call5236 = callmethodChecked(var_math, "cos", [1], var_radians);
                                                                                var prod5239 = callmethodChecked(var_len, "*", [1], call5236);
                                                                                var opresult5241 = callmethodChecked(prod5239, "@", [1], prod5234);
                                                                                var opresult5244 = callmethodChecked(var_pt, "+", [1], opresult5241);
                                                                                var call5245 = callmethodChecked(superDepth, "outer", [0]);
                                                                                onOuter = true;
                                                                                onSelf = true;
                                                                                var call5246 = callmethodChecked(call5245, "lineFrom()to()on()object", [1, 1, 1, 1], var_pt, opresult5244, var_canvas__39__, this);
                                                                                obj5228.superobj = call5246;
                                                                                if (call5246.data) obj5228.data = call5246.data;
                                                                                if (call5246.hasOwnProperty('_value'))
                                                                                    obj5228._value = call5246._value;
                                                                                superDepth = origSuperDepth;
                                                                              };
                                                                              obj_init_5228.apply(obj5228, []);
                                                                              setLineNumber(1957);    // return value
                                                                              if (!Grace_isTrue(callmethod(var_Line, "match", [1], obj5228)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("result of method lineFrom(1)length(1)direction(1)on(1) does not have " + 
                                                                                          callmethod(var_Line, "asString", [0])._value + "."));
                                                                              return obj5228;
                                                                            };
                                                                            func5226.paramTypes = [];
                                                                            func5226.paramTypes.push([]);
                                                                            func5226.paramTypes.push([type_Number, "len"]);
                                                                            func5226.paramTypes.push([type_Number, "radians"]);
                                                                            func5226.paramTypes.push([]);
                                                                            func5226.paramCounts = [1, 1, 1, 1];
                                                                            this.methods["lineFrom()length()direction()on"] = func5226;
                                                                            func5226.definitionLine = 1957;
                                                                            func5226.definitionModule = "stobjectdraw";
                                                                              var func5247 = function(argcv) {    // method lineFrom(1     )length(1     )direction(1     )on(1     )()object
                                                                                var curarg = 1;
                                                                                var var_pt = arguments[curarg];
                                                                                curarg++;
                                                                                var var_len = arguments[curarg];
                                                                                curarg++;
                                                                                var var_radians = arguments[curarg];
                                                                                curarg++;
                                                                                var var_canvas__39__ = arguments[curarg];
                                                                                curarg++;
                                                                                var inheritingObject = arguments[curarg++];
                                                                                // Start argument processing
                                                                                curarg = 1;
                                                                                onSelf = true;
                                                                                var call5248 = callmethodChecked(this, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call5248, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in lineFrom (arg list 1), which corresponds to parameter pt, does not have " + 
                                                                                            callmethod(call5248, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in length (arg list 2), which corresponds to parameter len, does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in direction (arg list 3), which corresponds to parameter radians, does not have " + 
                                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                setLineNumber(1958);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in on (arg list 4), which corresponds to parameter canvas', does not have " + 
                                                                                            callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument processing
                                                                                setModuleName("stobjectdraw");
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var obj5249 = Grace_allocObject(null, "lineFrom()length()direction()on");
                                                                                obj5249.definitionModule = "stobjectdraw";
                                                                                obj5249.definitionLine = 1957;
                                                                                var inho5249 = inheritingObject;
                                                                                while (inho5249.superobj) inho5249 = inho5249.superobj;
                                                                                inho5249.superobj = obj5249;
                                                                                obj5249.data = inheritingObject.data;
                                                                                if (inheritingObject.hasOwnProperty('_value'))
                                                                                  obj5249._value = inheritingObject._value;
                                                                                obj5249.outer = this;
                                                                                var reader_stobjectdraw_outer5250 = function() {
                                                                                  return this.outer;
                                                                                };
                                                                                obj5249.methods["outer"] = reader_stobjectdraw_outer5250;
                                                                                var obj_init_5249 = function() {
                                                                                  var origSuperDepth = superDepth;
                                                                                  superDepth = obj5249;
                                                                                  setLineNumber(1963);    // compilenode identifier
                                                                                  var call5251 = callmethodChecked(var_math, "sin", [1], var_radians);
                                                                                  var call5253 = callmethodChecked(var_len, "prefix-", [0]);
                                                                                  var prod5255 = callmethodChecked(call5253, "*", [1], call5251);
                                                                                  setLineNumber(1962);    // compilenode identifier
                                                                                  var call5257 = callmethodChecked(var_math, "cos", [1], var_radians);
                                                                                  var prod5260 = callmethodChecked(var_len, "*", [1], call5257);
                                                                                  var opresult5262 = callmethodChecked(prod5260, "@", [1], prod5255);
                                                                                  var opresult5265 = callmethodChecked(var_pt, "+", [1], opresult5262);
                                                                                  var call5266 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5267 = callmethodChecked(call5266, "lineFrom()to()on()object", [1, 1, 1, 1], var_pt, opresult5265, var_canvas__39__, this);
                                                                                  obj5249.superobj = call5267;
                                                                                  if (call5267.data) obj5249.data = call5267.data;
                                                                                  if (call5267.hasOwnProperty('_value'))
                                                                                      obj5249._value = call5267._value;
                                                                                  superDepth = origSuperDepth;
                                                                                };
                                                                                obj_init_5249.apply(inheritingObject, []);
                                                                                return obj5249;
                                                                                };
                                                                                func5247.paramTypes = [];
                                                                                func5247.paramTypes.push([]);
                                                                                func5247.paramTypes.push([type_Number, "len"]);
                                                                                func5247.paramTypes.push([type_Number, "radians"]);
                                                                                func5247.paramTypes.push([]);
                                                                                this.methods["lineFrom()length()direction()on()object"] = func5247;
                                                                              setLineNumber(1966);    // compilenode method
                                                                              var func5268 = function(argcv) {    // method textAt(1)with(1)on(1)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_location__39__ = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[0] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for textAt (arg list 1) of textAt(1)with(1)on(1)"));
                                                                                var var_contents__39__ = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[1] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for with (arg list 2) of textAt(1)with(1)on(1)"));
                                                                                var var_canvas__39__ = arguments[curarg];
                                                                                curarg++;
                                                                                if (argcv[2] !== 1)
                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for on (arg list 3) of textAt(1)with(1)on(1)"));
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                onSelf = true;
                                                                                var call5269 = callmethodChecked(this, "Point", [0]);
                                                                                if (!Grace_isTrue(callmethod(call5269, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in textAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                            callmethod(call5269, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in with (arg list 2), which corresponds to parameter contents', does not have " + 
                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                setLineNumber(1967);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                            callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("stobjectdraw");
                                                                                setLineNumber(1966);    // compilenode object
                                                                                var obj5270 = Grace_allocObject(null, "stobjectdraw.textAt()with()on");
                                                                                obj5270.definitionModule = "stobjectdraw";
                                                                                obj5270.definitionLine = 1966;
                                                                                obj5270.outer = this;
                                                                                var reader_stobjectdraw_outer5271 = function() {
                                                                                  return this.outer;
                                                                                };
                                                                                obj5270.methods["outer"] = reader_stobjectdraw_outer5271;
                                                                                var obj_init_5270 = function() {
                                                                                  var origSuperDepth = superDepth;
                                                                                  superDepth = obj5270;
                                                                                  var func5272 = function(argcv) {    // method width
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    if (argcv[0] !== 0)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                                                    setModuleName("stobjectdraw");
                                                                                    setLineNumber(1977);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5273 = callmethodChecked(this, "wid", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5273)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method width does not have " + 
                                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                                    return call5273;
                                                                                  };
                                                                                  func5272.paramCounts = [0];
                                                                                  obj5270.methods["width"] = func5272;
                                                                                  func5272.definitionLine = 1976;
                                                                                  func5272.definitionModule = "stobjectdraw";
                                                                                  var func5274 = function(argcv) {    // method draw(1)
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    var var_ctx = arguments[curarg];
                                                                                    curarg++;
                                                                                    if (argcv[0] !== 1)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                                    // Start argument checking
                                                                                    curarg = 1;
                                                                                    setLineNumber(1981);    // compilenode identifier
                                                                                    if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                                callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                    curarg++;
                                                                                    // End argument checking
                                                                                    setModuleName("stobjectdraw");
                                                                                    setLineNumber(1982);    // compilenode identifier
                                                                                    var call5275 = callmethodChecked(var_ctx, "save", [0]);
                                                                                    setLineNumber(1983);    // compilenode string
                                                                                    var string5276 = new GraceString("pt sans-serif");
                                                                                    onSelf = true;
                                                                                    var call5278 = callmethodChecked(this, "fontSize", [0]);
                                                                                    var string5280 = new GraceString("");
                                                                                    var opresult5282 = callmethodChecked(string5280, "++", [1], call5278);
                                                                                    var opresult5284 = callmethodChecked(opresult5282, "++", [1], string5276);
                                                                                    var call5285 = callmethodChecked(var_ctx, "font:=", [1], opresult5284);
                                                                                    setLineNumber(1984);    // compilenode string
                                                                                    var string5286 = new GraceString(")");
                                                                                    onSelf = true;
                                                                                    var call5288 = callmethodChecked(this, "color", [0]);
                                                                                    var call5289 = callmethodChecked(call5288, "blue", [0]);
                                                                                    var string5291 = new GraceString(", ");
                                                                                    onSelf = true;
                                                                                    var call5293 = callmethodChecked(this, "color", [0]);
                                                                                    var call5294 = callmethodChecked(call5293, "green", [0]);
                                                                                    var string5296 = new GraceString(", ");
                                                                                    onSelf = true;
                                                                                    var call5298 = callmethodChecked(this, "color", [0]);
                                                                                    var call5299 = callmethodChecked(call5298, "red", [0]);
                                                                                    var string5301 = new GraceString("rgb(");
                                                                                    var opresult5303 = callmethodChecked(string5301, "++", [1], call5299);
                                                                                    var opresult5305 = callmethodChecked(opresult5303, "++", [1], string5296);
                                                                                    var opresult5307 = callmethodChecked(opresult5305, "++", [1], call5294);
                                                                                    var opresult5309 = callmethodChecked(opresult5307, "++", [1], string5291);
                                                                                    var opresult5311 = callmethodChecked(opresult5309, "++", [1], call5289);
                                                                                    var opresult5313 = callmethodChecked(opresult5311, "++", [1], string5286);
                                                                                    var call5314 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult5313);
                                                                                    setLineNumber(1985);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5315 = callmethodChecked(this, "contents", [0]);
                                                                                    onSelf = true;
                                                                                    var call5316 = callmethodChecked(this, "location", [0]);
                                                                                    var call5317 = callmethodChecked(call5316, "x", [0]);
                                                                                    onSelf = true;
                                                                                    var call5318 = callmethodChecked(this, "location", [0]);
                                                                                    var call5319 = callmethodChecked(call5318, "y", [0]);
                                                                                    var call5320 = callmethodChecked(var_ctx, "fillText", [3], call5315, call5317, call5319);
                                                                                    setLineNumber(1986);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5321 = callmethodChecked(this, "theContents", [0]);
                                                                                    var call5322 = callmethodChecked(var_ctx, "measureText", [1], call5321);
                                                                                    var call5323 = callmethodChecked(call5322, "width", [0]);
                                                                                    onSelf = true;
                                                                                    var call5324 = callmethodChecked(this, "wid:=", [1], call5323);
                                                                                    setLineNumber(1987);    // compilenode identifier
                                                                                    var call5325 = callmethodChecked(var_ctx, "restore", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5325)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method draw(1) does not have " + 
                                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                                    return call5325;
                                                                                  };
                                                                                  func5274.paramTypes = [];
                                                                                  func5274.paramTypes.push([]);
                                                                                  func5274.paramCounts = [1];
                                                                                  obj5270.methods["draw"] = func5274;
                                                                                  func5274.definitionLine = 1981;
                                                                                  func5274.definitionModule = "stobjectdraw";
                                                                                  var func5326 = function(argcv) {    // method contents
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    if (argcv[0] !== 0)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents"));
                                                                                    setModuleName("stobjectdraw");
                                                                                    setLineNumber(1992);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5327 = callmethodChecked(this, "theContents", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], call5327)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method contents does not have " + 
                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                    return call5327;
                                                                                  };
                                                                                  func5326.paramCounts = [0];
                                                                                  obj5270.methods["contents"] = func5326;
                                                                                  func5326.definitionLine = 1991;
                                                                                  func5326.definitionModule = "stobjectdraw";
                                                                                  var func5328 = function(argcv) {    // method contents:=(1)
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    var var_newContents = arguments[curarg];
                                                                                    curarg++;
                                                                                    if (argcv[0] !== 1)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents:=(1)"));
                                                                                    // Start argument checking
                                                                                    curarg = 1;
                                                                                    setLineNumber(1996);    // compilenode identifier
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("argument 1 in contents:= (arg list 1), which corresponds to parameter newContents, does not have " + 
                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                    curarg++;
                                                                                    // End argument checking
                                                                                    setModuleName("stobjectdraw");
                                                                                    setLineNumber(1997);    // compilenode identifier
                                                                                    onSelf = true;
                                                                                    var call5329 = callmethodChecked(this, "theContents:=", [1], var_newContents);
                                                                                    setLineNumber(1998);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5330 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5330)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method contents:=(1) does not have " + 
                                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                                    return call5330;
                                                                                  };
                                                                                  func5328.paramTypes = [];
                                                                                  func5328.paramTypes.push([type_String, "newContents"]);
                                                                                  func5328.paramCounts = [1];
                                                                                  obj5270.methods["contents:="] = func5328;
                                                                                  func5328.definitionLine = 1996;
                                                                                  func5328.definitionModule = "stobjectdraw";
                                                                                  var func5331 = function(argcv) {    // method fontSize:=(1)
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    var var_size__39__ = arguments[curarg];
                                                                                    curarg++;
                                                                                    if (argcv[0] !== 1)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fontSize:=(1)"));
                                                                                    // Start argument checking
                                                                                    curarg = 1;
                                                                                    setLineNumber(2002);    // compilenode identifier
                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("argument 1 in fontSize:= (arg list 1), which corresponds to parameter size', does not have " + 
                                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                                    curarg++;
                                                                                    // End argument checking
                                                                                    setModuleName("stobjectdraw");
                                                                                    setLineNumber(2003);    // compilenode identifier
                                                                                    onSelf = true;
                                                                                    var call5332 = callmethodChecked(this, "fsize:=", [1], var_size__39__);
                                                                                    setLineNumber(2004);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5333 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5333)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method fontSize:=(1) does not have " + 
                                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                                    return call5333;
                                                                                  };
                                                                                  func5331.paramTypes = [];
                                                                                  func5331.paramTypes.push([type_Number, "size'"]);
                                                                                  func5331.paramCounts = [1];
                                                                                  obj5270.methods["fontSize:="] = func5331;
                                                                                  func5331.definitionLine = 2002;
                                                                                  func5331.definitionModule = "stobjectdraw";
                                                                                  var func5334 = function(argcv) {    // method fontSize
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    if (argcv[0] !== 0)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fontSize"));
                                                                                    setModuleName("stobjectdraw");
                                                                                    setLineNumber(2009);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5335 = callmethodChecked(this, "fsize", [0]);
                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5335)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method fontSize does not have " + 
                                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                                    return call5335;
                                                                                  };
                                                                                  func5334.paramCounts = [0];
                                                                                  obj5270.methods["fontSize"] = func5334;
                                                                                  func5334.definitionLine = 2008;
                                                                                  func5334.definitionModule = "stobjectdraw";
                                                                                  var func5336 = function(argcv) {    // method asString
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    if (argcv[0] !== 0)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                    setModuleName("stobjectdraw");
                                                                                    setLineNumber(2014);    // compilenode string
                                                                                    var string5337 = new GraceString("");
                                                                                    onSelf = true;
                                                                                    var call5339 = callmethodChecked(this, "color", [0]);
                                                                                    var string5341 = new GraceString(" and color ");
                                                                                    onSelf = true;
                                                                                    var call5343 = callmethodChecked(this, "contents", [0]);
                                                                                    var string5345 = new GraceString(") with value ");
                                                                                    onSelf = true;
                                                                                    var call5347 = callmethodChecked(this, "y", [0]);
                                                                                    var string5349 = new GraceString(",");
                                                                                    onSelf = true;
                                                                                    var call5351 = callmethodChecked(this, "x", [0]);
                                                                                    var string5353 = new GraceString("Text at (");
                                                                                    var opresult5355 = callmethodChecked(string5353, "++", [1], call5351);
                                                                                    var opresult5357 = callmethodChecked(opresult5355, "++", [1], string5349);
                                                                                    var opresult5359 = callmethodChecked(opresult5357, "++", [1], call5347);
                                                                                    var opresult5361 = callmethodChecked(opresult5359, "++", [1], string5345);
                                                                                    var opresult5363 = callmethodChecked(opresult5361, "++", [1], call5343);
                                                                                    var opresult5365 = callmethodChecked(opresult5363, "++", [1], string5341);
                                                                                    var opresult5367 = callmethodChecked(opresult5365, "++", [1], call5339);
                                                                                    var opresult5369 = callmethodChecked(opresult5367, "++", [1], string5337);
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5369)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method asString does not have " + 
                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                    return opresult5369;
                                                                                  };
                                                                                  func5336.paramCounts = [0];
                                                                                  obj5270.methods["asString"] = func5336;
                                                                                  func5336.definitionLine = 2013;
                                                                                  func5336.definitionModule = "stobjectdraw";
                                                                                  setLineNumber(1970);    // compilenode call
                                                                                  var call5370 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  onOuter = true;
                                                                                  onSelf = true;
                                                                                  var call5371 = callmethodChecked(call5370, "drawableAt()on()object", [1, 1, 1], var_location__39__, var_canvas__39__, this);
                                                                                  obj5270.superobj = call5371;
                                                                                  if (call5371.data) obj5270.data = call5371.data;
                                                                                  if (call5371.hasOwnProperty('_value'))
                                                                                      obj5270._value = call5371._value;
                                                                                  setLineNumber(1972);    // compilenode identifier
                                                                                  obj5270.data["theContents"] = var_contents__39__;
                                                                                  var reader_stobjectdraw_theContents5372 = function() {
                                                                                    return this.data["theContents"];
                                                                                  };
                                                                                  obj5270.methods["theContents"] = reader_stobjectdraw_theContents5372;
                                                                                  obj5270.data["theContents"] = var_contents__39__;
                                                                                  var writer_stobjectdraw_theContents5372 = function(argcv, o) {
                                                                                    this.data["theContents"] = o;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  obj5270.methods["theContents:="] = writer_stobjectdraw_theContents5372;
                                                                                  reader_stobjectdraw_theContents5372.confidential = true;
                                                                                  writer_stobjectdraw_theContents5372.confidential = true;
                                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], var_contents__39__)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("initial value of var 'theContents' is not of type String"));
                                                                                  obj5270.mutable = true;
                                                                                  setLineNumber(1973);    // compilenode num
                                                                                  obj5270.data["fsize"] = new GraceNum(10);
                                                                                  var reader_stobjectdraw_fsize5373 = function() {
                                                                                    return this.data["fsize"];
                                                                                  };
                                                                                  obj5270.methods["fsize"] = reader_stobjectdraw_fsize5373;
                                                                                  obj5270.data["fsize"] = new GraceNum(10);
                                                                                  var writer_stobjectdraw_fsize5373 = function(argcv, o) {
                                                                                    this.data["fsize"] = o;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  obj5270.methods["fsize:="] = writer_stobjectdraw_fsize5373;
                                                                                  writer_stobjectdraw_fsize5373.confidential = true;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], new GraceNum(10))))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("initial value of var 'fsize' is not of type Number"));
                                                                                  obj5270.mutable = true;
                                                                                  setLineNumber(1974);    // compilenode call
                                                                                  onSelf = true;
                                                                                  var call5375 = callmethodChecked(this, "fsize", [0]);
                                                                                  onSelf = true;
                                                                                  var call5377 = callmethodChecked(this, "theContents", [0]);
                                                                                  var call5378 = callmethodChecked(call5377, "size", [0]);
                                                                                  var prod5380 = callmethodChecked(call5378, "*", [1], call5375);
                                                                                  var quotient5382 = callmethodChecked(prod5380, "/", [1], new GraceNum(2));
                                                                                  obj5270.data["wid"] = quotient5382;
                                                                                  var reader_stobjectdraw_wid5383 = function() {
                                                                                    return this.data["wid"];
                                                                                  };
                                                                                  obj5270.methods["wid"] = reader_stobjectdraw_wid5383;
                                                                                  obj5270.data["wid"] = quotient5382;
                                                                                  var writer_stobjectdraw_wid5383 = function(argcv, o) {
                                                                                    this.data["wid"] = o;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  obj5270.methods["wid:="] = writer_stobjectdraw_wid5383;
                                                                                  reader_stobjectdraw_wid5383.confidential = true;
                                                                                  writer_stobjectdraw_wid5383.confidential = true;
                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], quotient5382)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("initial value of var 'wid' is not of type Number"));
                                                                                  obj5270.mutable = true;
                                                                                  setLineNumber(2017);    // compilenode identifier
                                                                                  onSelf = true;
                                                                                  var call5384 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                                  superDepth = origSuperDepth;
                                                                                };
                                                                                obj_init_5270.apply(obj5270, []);
                                                                                setLineNumber(1966);    // return value
                                                                                if (!Grace_isTrue(callmethod(var_Text, "match", [1], obj5270)))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("result of method textAt(1)with(1)on(1) does not have " + 
                                                                                            callmethod(var_Text, "asString", [0])._value + "."));
                                                                                return obj5270;
                                                                              };
                                                                              func5268.paramTypes = [];
                                                                              func5268.paramTypes.push([]);
                                                                              func5268.paramTypes.push([type_String, "contents'"]);
                                                                              func5268.paramTypes.push([]);
                                                                              func5268.paramCounts = [1, 1, 1];
                                                                              this.methods["textAt()with()on"] = func5268;
                                                                              func5268.definitionLine = 1966;
                                                                              func5268.definitionModule = "stobjectdraw";
                                                                                var func5385 = function(argcv) {    // method textAt(1     )with(1     )on(1     )()object
                                                                                  var curarg = 1;
                                                                                  var var_location__39__ = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_contents__39__ = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_canvas__39__ = arguments[curarg];
                                                                                  curarg++;
                                                                                  var inheritingObject = arguments[curarg++];
                                                                                  // Start argument processing
                                                                                  curarg = 1;
                                                                                  onSelf = true;
                                                                                  var call5386 = callmethodChecked(this, "Point", [0]);
                                                                                  if (!Grace_isTrue(callmethod(call5386, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in textAt (arg list 1), which corresponds to parameter location', does not have " + 
                                                                                              callmethod(call5386, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in with (arg list 2), which corresponds to parameter contents', does not have " + 
                                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  setLineNumber(1967);    // compilenode identifier
                                                                                  if (!Grace_isTrue(callmethod(var_DrawingCanvas, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in on (arg list 3), which corresponds to parameter canvas', does not have " + 
                                                                                              callmethod(var_DrawingCanvas, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument processing
                                                                                  setModuleName("stobjectdraw");
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var obj5387 = Grace_allocObject(null, "textAt()with()on");
                                                                                  obj5387.definitionModule = "stobjectdraw";
                                                                                  obj5387.definitionLine = 1966;
                                                                                  var inho5387 = inheritingObject;
                                                                                  while (inho5387.superobj) inho5387 = inho5387.superobj;
                                                                                  inho5387.superobj = obj5387;
                                                                                  obj5387.data = inheritingObject.data;
                                                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                                                    obj5387._value = inheritingObject._value;
                                                                                  obj5387.outer = this;
                                                                                  var reader_stobjectdraw_outer5388 = function() {
                                                                                    return this.outer;
                                                                                  };
                                                                                  obj5387.methods["outer"] = reader_stobjectdraw_outer5388;
                                                                                  var obj_init_5387 = function() {
                                                                                    var origSuperDepth = superDepth;
                                                                                    superDepth = obj5387;
                                                                                    var func5389 = function(argcv) {    // method width
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for width"));
                                                                                      setModuleName("stobjectdraw");
                                                                                      setLineNumber(1977);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5390 = callmethodChecked(this, "wid", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5390)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method width does not have " + 
                                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                                      return call5390;
                                                                                    };
                                                                                    func5389.paramCounts = [0];
                                                                                    obj5387.methods["width"] = func5389;
                                                                                    func5389.definitionLine = 1976;
                                                                                    func5389.definitionModule = "stobjectdraw";
                                                                                    var func5391 = function(argcv) {    // method draw(1)
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      var var_ctx = arguments[curarg];
                                                                                      curarg++;
                                                                                      if (argcv[0] !== 1)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for draw(1)"));
                                                                                      // Start argument checking
                                                                                      curarg = 1;
                                                                                      setLineNumber(1981);    // compilenode identifier
                                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in draw (arg list 1), which corresponds to parameter ctx, does not have " + 
                                                                                                  callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument checking
                                                                                      setModuleName("stobjectdraw");
                                                                                      setLineNumber(1982);    // compilenode identifier
                                                                                      var call5392 = callmethodChecked(var_ctx, "save", [0]);
                                                                                      setLineNumber(1983);    // compilenode string
                                                                                      var string5393 = new GraceString("pt sans-serif");
                                                                                      onSelf = true;
                                                                                      var call5395 = callmethodChecked(this, "fontSize", [0]);
                                                                                      var string5397 = new GraceString("");
                                                                                      var opresult5399 = callmethodChecked(string5397, "++", [1], call5395);
                                                                                      var opresult5401 = callmethodChecked(opresult5399, "++", [1], string5393);
                                                                                      var call5402 = callmethodChecked(var_ctx, "font:=", [1], opresult5401);
                                                                                      setLineNumber(1984);    // compilenode string
                                                                                      var string5403 = new GraceString(")");
                                                                                      onSelf = true;
                                                                                      var call5405 = callmethodChecked(this, "color", [0]);
                                                                                      var call5406 = callmethodChecked(call5405, "blue", [0]);
                                                                                      var string5408 = new GraceString(", ");
                                                                                      onSelf = true;
                                                                                      var call5410 = callmethodChecked(this, "color", [0]);
                                                                                      var call5411 = callmethodChecked(call5410, "green", [0]);
                                                                                      var string5413 = new GraceString(", ");
                                                                                      onSelf = true;
                                                                                      var call5415 = callmethodChecked(this, "color", [0]);
                                                                                      var call5416 = callmethodChecked(call5415, "red", [0]);
                                                                                      var string5418 = new GraceString("rgb(");
                                                                                      var opresult5420 = callmethodChecked(string5418, "++", [1], call5416);
                                                                                      var opresult5422 = callmethodChecked(opresult5420, "++", [1], string5413);
                                                                                      var opresult5424 = callmethodChecked(opresult5422, "++", [1], call5411);
                                                                                      var opresult5426 = callmethodChecked(opresult5424, "++", [1], string5408);
                                                                                      var opresult5428 = callmethodChecked(opresult5426, "++", [1], call5406);
                                                                                      var opresult5430 = callmethodChecked(opresult5428, "++", [1], string5403);
                                                                                      var call5431 = callmethodChecked(var_ctx, "fillStyle:=", [1], opresult5430);
                                                                                      setLineNumber(1985);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5432 = callmethodChecked(this, "contents", [0]);
                                                                                      onSelf = true;
                                                                                      var call5433 = callmethodChecked(this, "location", [0]);
                                                                                      var call5434 = callmethodChecked(call5433, "x", [0]);
                                                                                      onSelf = true;
                                                                                      var call5435 = callmethodChecked(this, "location", [0]);
                                                                                      var call5436 = callmethodChecked(call5435, "y", [0]);
                                                                                      var call5437 = callmethodChecked(var_ctx, "fillText", [3], call5432, call5434, call5436);
                                                                                      setLineNumber(1986);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5438 = callmethodChecked(this, "theContents", [0]);
                                                                                      var call5439 = callmethodChecked(var_ctx, "measureText", [1], call5438);
                                                                                      var call5440 = callmethodChecked(call5439, "width", [0]);
                                                                                      onSelf = true;
                                                                                      var call5441 = callmethodChecked(this, "wid:=", [1], call5440);
                                                                                      setLineNumber(1987);    // compilenode identifier
                                                                                      var call5442 = callmethodChecked(var_ctx, "restore", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5442)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method draw(1) does not have " + 
                                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                                      return call5442;
                                                                                    };
                                                                                    func5391.paramTypes = [];
                                                                                    func5391.paramTypes.push([]);
                                                                                    func5391.paramCounts = [1];
                                                                                    obj5387.methods["draw"] = func5391;
                                                                                    func5391.definitionLine = 1981;
                                                                                    func5391.definitionModule = "stobjectdraw";
                                                                                    var func5443 = function(argcv) {    // method contents
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents"));
                                                                                      setModuleName("stobjectdraw");
                                                                                      setLineNumber(1992);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5444 = callmethodChecked(this, "theContents", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], call5444)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method contents does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      return call5444;
                                                                                    };
                                                                                    func5443.paramCounts = [0];
                                                                                    obj5387.methods["contents"] = func5443;
                                                                                    func5443.definitionLine = 1991;
                                                                                    func5443.definitionModule = "stobjectdraw";
                                                                                    var func5445 = function(argcv) {    // method contents:=(1)
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      var var_newContents = arguments[curarg];
                                                                                      curarg++;
                                                                                      if (argcv[0] !== 1)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents:=(1)"));
                                                                                      // Start argument checking
                                                                                      curarg = 1;
                                                                                      setLineNumber(1996);    // compilenode identifier
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in contents:= (arg list 1), which corresponds to parameter newContents, does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument checking
                                                                                      setModuleName("stobjectdraw");
                                                                                      setLineNumber(1997);    // compilenode identifier
                                                                                      onSelf = true;
                                                                                      var call5446 = callmethodChecked(this, "theContents:=", [1], var_newContents);
                                                                                      setLineNumber(1998);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5447 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5447)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method contents:=(1) does not have " + 
                                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                                      return call5447;
                                                                                    };
                                                                                    func5445.paramTypes = [];
                                                                                    func5445.paramTypes.push([type_String, "newContents"]);
                                                                                    func5445.paramCounts = [1];
                                                                                    obj5387.methods["contents:="] = func5445;
                                                                                    func5445.definitionLine = 1996;
                                                                                    func5445.definitionModule = "stobjectdraw";
                                                                                    var func5448 = function(argcv) {    // method fontSize:=(1)
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      var var_size__39__ = arguments[curarg];
                                                                                      curarg++;
                                                                                      if (argcv[0] !== 1)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fontSize:=(1)"));
                                                                                      // Start argument checking
                                                                                      curarg = 1;
                                                                                      setLineNumber(2002);    // compilenode identifier
                                                                                      if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in fontSize:= (arg list 1), which corresponds to parameter size', does not have " + 
                                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument checking
                                                                                      setModuleName("stobjectdraw");
                                                                                      setLineNumber(2003);    // compilenode identifier
                                                                                      onSelf = true;
                                                                                      var call5449 = callmethodChecked(this, "fsize:=", [1], var_size__39__);
                                                                                      setLineNumber(2004);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5450 = callmethodChecked(this, "notifyRedraw", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5450)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method fontSize:=(1) does not have " + 
                                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                                      return call5450;
                                                                                    };
                                                                                    func5448.paramTypes = [];
                                                                                    func5448.paramTypes.push([type_Number, "size'"]);
                                                                                    func5448.paramCounts = [1];
                                                                                    obj5387.methods["fontSize:="] = func5448;
                                                                                    func5448.definitionLine = 2002;
                                                                                    func5448.definitionModule = "stobjectdraw";
                                                                                    var func5451 = function(argcv) {    // method fontSize
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for fontSize"));
                                                                                      setModuleName("stobjectdraw");
                                                                                      setLineNumber(2009);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5452 = callmethodChecked(this, "fsize", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5452)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method fontSize does not have " + 
                                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                                      return call5452;
                                                                                    };
                                                                                    func5451.paramCounts = [0];
                                                                                    obj5387.methods["fontSize"] = func5451;
                                                                                    func5451.definitionLine = 2008;
                                                                                    func5451.definitionModule = "stobjectdraw";
                                                                                    var func5453 = function(argcv) {    // method asString
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                      setModuleName("stobjectdraw");
                                                                                      setLineNumber(2014);    // compilenode string
                                                                                      var string5454 = new GraceString("");
                                                                                      onSelf = true;
                                                                                      var call5456 = callmethodChecked(this, "color", [0]);
                                                                                      var string5458 = new GraceString(" and color ");
                                                                                      onSelf = true;
                                                                                      var call5460 = callmethodChecked(this, "contents", [0]);
                                                                                      var string5462 = new GraceString(") with value ");
                                                                                      onSelf = true;
                                                                                      var call5464 = callmethodChecked(this, "y", [0]);
                                                                                      var string5466 = new GraceString(",");
                                                                                      onSelf = true;
                                                                                      var call5468 = callmethodChecked(this, "x", [0]);
                                                                                      var string5470 = new GraceString("Text at (");
                                                                                      var opresult5472 = callmethodChecked(string5470, "++", [1], call5468);
                                                                                      var opresult5474 = callmethodChecked(opresult5472, "++", [1], string5466);
                                                                                      var opresult5476 = callmethodChecked(opresult5474, "++", [1], call5464);
                                                                                      var opresult5478 = callmethodChecked(opresult5476, "++", [1], string5462);
                                                                                      var opresult5480 = callmethodChecked(opresult5478, "++", [1], call5460);
                                                                                      var opresult5482 = callmethodChecked(opresult5480, "++", [1], string5458);
                                                                                      var opresult5484 = callmethodChecked(opresult5482, "++", [1], call5456);
                                                                                      var opresult5486 = callmethodChecked(opresult5484, "++", [1], string5454);
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5486)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method asString does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      return opresult5486;
                                                                                    };
                                                                                    func5453.paramCounts = [0];
                                                                                    obj5387.methods["asString"] = func5453;
                                                                                    func5453.definitionLine = 2013;
                                                                                    func5453.definitionModule = "stobjectdraw";
                                                                                    setLineNumber(1970);    // compilenode call
                                                                                    var call5487 = callmethodChecked(superDepth, "outer", [0]);
                                                                                    onOuter = true;
                                                                                    onSelf = true;
                                                                                    var call5488 = callmethodChecked(call5487, "drawableAt()on()object", [1, 1, 1], var_location__39__, var_canvas__39__, this);
                                                                                    obj5387.superobj = call5488;
                                                                                    if (call5488.data) obj5387.data = call5488.data;
                                                                                    if (call5488.hasOwnProperty('_value'))
                                                                                        obj5387._value = call5488._value;
                                                                                    setLineNumber(1972);    // compilenode identifier
                                                                                    obj5387.data["theContents"] = var_contents__39__;
                                                                                    var reader_stobjectdraw_theContents5489 = function() {
                                                                                      return this.data["theContents"];
                                                                                    };
                                                                                    obj5387.methods["theContents"] = reader_stobjectdraw_theContents5489;
                                                                                    obj5387.data["theContents"] = var_contents__39__;
                                                                                    var writer_stobjectdraw_theContents5489 = function(argcv, o) {
                                                                                      this.data["theContents"] = o;
                                                                                      return GraceDone;
                                                                                    };
                                                                                    obj5387.methods["theContents:="] = writer_stobjectdraw_theContents5489;
                                                                                    reader_stobjectdraw_theContents5489.confidential = true;
                                                                                    writer_stobjectdraw_theContents5489.confidential = true;
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], var_contents__39__)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("initial value of var 'theContents' is not of type String"));
                                                                                    obj5387.mutable = true;
                                                                                    setLineNumber(1973);    // compilenode num
                                                                                    obj5387.data["fsize"] = new GraceNum(10);
                                                                                    var reader_stobjectdraw_fsize5490 = function() {
                                                                                      return this.data["fsize"];
                                                                                    };
                                                                                    obj5387.methods["fsize"] = reader_stobjectdraw_fsize5490;
                                                                                    obj5387.data["fsize"] = new GraceNum(10);
                                                                                    var writer_stobjectdraw_fsize5490 = function(argcv, o) {
                                                                                      this.data["fsize"] = o;
                                                                                      return GraceDone;
                                                                                    };
                                                                                    obj5387.methods["fsize:="] = writer_stobjectdraw_fsize5490;
                                                                                    writer_stobjectdraw_fsize5490.confidential = true;
                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], new GraceNum(10))))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("initial value of var 'fsize' is not of type Number"));
                                                                                    obj5387.mutable = true;
                                                                                    setLineNumber(1974);    // compilenode call
                                                                                    onSelf = true;
                                                                                    var call5492 = callmethodChecked(this, "fsize", [0]);
                                                                                    onSelf = true;
                                                                                    var call5494 = callmethodChecked(this, "theContents", [0]);
                                                                                    var call5495 = callmethodChecked(call5494, "size", [0]);
                                                                                    var prod5497 = callmethodChecked(call5495, "*", [1], call5492);
                                                                                    var quotient5499 = callmethodChecked(prod5497, "/", [1], new GraceNum(2));
                                                                                    obj5387.data["wid"] = quotient5499;
                                                                                    var reader_stobjectdraw_wid5500 = function() {
                                                                                      return this.data["wid"];
                                                                                    };
                                                                                    obj5387.methods["wid"] = reader_stobjectdraw_wid5500;
                                                                                    obj5387.data["wid"] = quotient5499;
                                                                                    var writer_stobjectdraw_wid5500 = function(argcv, o) {
                                                                                      this.data["wid"] = o;
                                                                                      return GraceDone;
                                                                                    };
                                                                                    obj5387.methods["wid:="] = writer_stobjectdraw_wid5500;
                                                                                    reader_stobjectdraw_wid5500.confidential = true;
                                                                                    writer_stobjectdraw_wid5500.confidential = true;
                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], quotient5499)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("initial value of var 'wid' is not of type Number"));
                                                                                    obj5387.mutable = true;
                                                                                    setLineNumber(2017);    // compilenode identifier
                                                                                    onSelf = true;
                                                                                    var call5501 = callmethodChecked(this, "addToCanvas", [1], var_canvas__39__);
                                                                                    superDepth = origSuperDepth;
                                                                                  };
                                                                                  obj_init_5387.apply(inheritingObject, []);
                                                                                  return obj5387;
                                                                                  };
                                                                                  func5385.paramTypes = [];
                                                                                  func5385.paramTypes.push([]);
                                                                                  func5385.paramTypes.push([type_String, "contents'"]);
                                                                                  func5385.paramTypes.push([]);
                                                                                  this.methods["textAt()with()on()object"] = func5385;
                                                                                setLineNumber(2020);    // compilenode method
                                                                                var func5502 = function(argcv) {    // method textBoxWith(1)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_contents__39__ = arguments[curarg];
                                                                                  curarg++;
                                                                                  if (argcv[0] !== 1)
                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for textBoxWith(1)"));
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in textBoxWith (arg list 1), which corresponds to parameter contents', does not have " + 
                                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("stobjectdraw");
                                                                                  var obj5503 = Grace_allocObject(null, "stobjectdraw.textBoxWith");
                                                                                  obj5503.definitionModule = "stobjectdraw";
                                                                                  obj5503.definitionLine = 2020;
                                                                                  obj5503.outer = this;
                                                                                  var reader_stobjectdraw_outer5504 = function() {
                                                                                    return this.outer;
                                                                                  };
                                                                                  obj5503.methods["outer"] = reader_stobjectdraw_outer5504;
                                                                                  var obj_init_5503 = function() {
                                                                                    var origSuperDepth = superDepth;
                                                                                    superDepth = obj5503;
                                                                                    var func5505 = function(argcv) {    // method contents
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents"));
                                                                                      setModuleName("stobjectdraw");
                                                                                      setLineNumber(2028);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5506 = callmethodChecked(this, "element", [0]);
                                                                                      var call5507 = callmethodChecked(call5506, "textContent", [0]);
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], call5507)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method contents does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      return call5507;
                                                                                    };
                                                                                    func5505.paramCounts = [0];
                                                                                    obj5503.methods["contents"] = func5505;
                                                                                    func5505.definitionLine = 2027;
                                                                                    func5505.definitionModule = "stobjectdraw";
                                                                                    var func5508 = function(argcv) {    // method contents:=(1)
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      var var_value = arguments[curarg];
                                                                                      curarg++;
                                                                                      if (argcv[0] !== 1)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents:=(1)"));
                                                                                      // Start argument checking
                                                                                      curarg = 1;
                                                                                      setLineNumber(2032);    // compilenode identifier
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in contents:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument checking
                                                                                      setModuleName("stobjectdraw");
                                                                                      setLineNumber(2033);    // compilenode call
                                                                                      onSelf = true;
                                                                                      var call5509 = callmethodChecked(this, "element", [0]);
                                                                                      var call5510 = callmethodChecked(call5509, "textContent:=", [1], var_value);
                                                                                      setLineNumber(2034);    // return value
                                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method contents:=(1) does not have " + 
                                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                                      return var_done;
                                                                                    };
                                                                                    func5508.paramTypes = [];
                                                                                    func5508.paramTypes.push([type_String, "value"]);
                                                                                    func5508.paramCounts = [1];
                                                                                    obj5503.methods["contents:="] = func5508;
                                                                                    func5508.definitionLine = 2032;
                                                                                    func5508.definitionModule = "stobjectdraw";
                                                                                    var func5511 = function(argcv) {    // method asString
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      if (argcv[0] !== 0)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                      setModuleName("stobjectdraw");
                                                                                      setLineNumber(2039);    // compilenode string
                                                                                      var string5512 = new GraceString("");
                                                                                      onSelf = true;
                                                                                      var call5514 = callmethodChecked(this, "contents", [0]);
                                                                                      var string5516 = new GraceString("a text box showing ");
                                                                                      var opresult5518 = callmethodChecked(string5516, "++", [1], call5514);
                                                                                      var opresult5520 = callmethodChecked(opresult5518, "++", [1], string5512);
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5520)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method asString does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      return opresult5520;
                                                                                    };
                                                                                    func5511.paramCounts = [0];
                                                                                    obj5503.methods["asString"] = func5511;
                                                                                    func5511.definitionLine = 2038;
                                                                                    func5511.definitionModule = "stobjectdraw";
                                                                                    setLineNumber(2024);    // compilenode string
                                                                                    var string5521 = new GraceString("span");
                                                                                    var call5522 = callmethodChecked(superDepth, "outer", [0]);
                                                                                    onOuter = true;
                                                                                    onSelf = true;
                                                                                    var call5523 = callmethodChecked(call5522, "componentOfElementType()object", [1, 1], string5521, this);
                                                                                    obj5503.superobj = call5523;
                                                                                    if (call5523.data) obj5503.data = call5523.data;
                                                                                    if (call5523.hasOwnProperty('_value'))
                                                                                        obj5503._value = call5523._value;
                                                                                    setLineNumber(2042);    // compilenode identifier
                                                                                    onSelf = true;
                                                                                    var call5524 = callmethodChecked(this, "contents:=", [1], var_contents__39__);
                                                                                    superDepth = origSuperDepth;
                                                                                  };
                                                                                  obj_init_5503.apply(obj5503, []);
                                                                                  setLineNumber(2020);    // return value
                                                                                  if (!Grace_isTrue(callmethod(var_TextBox, "match", [1], obj5503)))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("result of method textBoxWith(1) does not have " + 
                                                                                              callmethod(var_TextBox, "asString", [0])._value + "."));
                                                                                  return obj5503;
                                                                                };
                                                                                func5502.paramTypes = [];
                                                                                func5502.paramTypes.push([type_String, "contents'"]);
                                                                                func5502.paramCounts = [1];
                                                                                this.methods["textBoxWith"] = func5502;
                                                                                func5502.definitionLine = 2020;
                                                                                func5502.definitionModule = "stobjectdraw";
                                                                                  var func5525 = function(argcv) {    // method textBoxWith(1     )()object
                                                                                    var curarg = 1;
                                                                                    var var_contents__39__ = arguments[curarg];
                                                                                    curarg++;
                                                                                    var inheritingObject = arguments[curarg++];
                                                                                    // Start argument processing
                                                                                    curarg = 1;
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("argument 1 in textBoxWith (arg list 1), which corresponds to parameter contents', does not have " + 
                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                    curarg++;
                                                                                    // End argument processing
                                                                                    setModuleName("stobjectdraw");
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var obj5526 = Grace_allocObject(null, "textBoxWith");
                                                                                    obj5526.definitionModule = "stobjectdraw";
                                                                                    obj5526.definitionLine = 2020;
                                                                                    var inho5526 = inheritingObject;
                                                                                    while (inho5526.superobj) inho5526 = inho5526.superobj;
                                                                                    inho5526.superobj = obj5526;
                                                                                    obj5526.data = inheritingObject.data;
                                                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                                                      obj5526._value = inheritingObject._value;
                                                                                    obj5526.outer = this;
                                                                                    var reader_stobjectdraw_outer5527 = function() {
                                                                                      return this.outer;
                                                                                    };
                                                                                    obj5526.methods["outer"] = reader_stobjectdraw_outer5527;
                                                                                    var obj_init_5526 = function() {
                                                                                      var origSuperDepth = superDepth;
                                                                                      superDepth = obj5526;
                                                                                      var func5528 = function(argcv) {    // method contents
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var curarg = 1;
                                                                                        if (argcv[0] !== 0)
                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents"));
                                                                                        setModuleName("stobjectdraw");
                                                                                        setLineNumber(2028);    // compilenode call
                                                                                        onSelf = true;
                                                                                        var call5529 = callmethodChecked(this, "element", [0]);
                                                                                        var call5530 = callmethodChecked(call5529, "textContent", [0]);
                                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], call5530)))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("result of method contents does not have " + 
                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                        return call5530;
                                                                                      };
                                                                                      func5528.paramCounts = [0];
                                                                                      obj5526.methods["contents"] = func5528;
                                                                                      func5528.definitionLine = 2027;
                                                                                      func5528.definitionModule = "stobjectdraw";
                                                                                      var func5531 = function(argcv) {    // method contents:=(1)
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var curarg = 1;
                                                                                        var var_value = arguments[curarg];
                                                                                        curarg++;
                                                                                        if (argcv[0] !== 1)
                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for contents:=(1)"));
                                                                                        // Start argument checking
                                                                                        curarg = 1;
                                                                                        setLineNumber(2032);    // compilenode identifier
                                                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("argument 1 in contents:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                        curarg++;
                                                                                        // End argument checking
                                                                                        setModuleName("stobjectdraw");
                                                                                        setLineNumber(2033);    // compilenode call
                                                                                        onSelf = true;
                                                                                        var call5532 = callmethodChecked(this, "element", [0]);
                                                                                        var call5533 = callmethodChecked(call5532, "textContent:=", [1], var_value);
                                                                                        setLineNumber(2034);    // return value
                                                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], var_done)))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("result of method contents:=(1) does not have " + 
                                                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                                                        return var_done;
                                                                                      };
                                                                                      func5531.paramTypes = [];
                                                                                      func5531.paramTypes.push([type_String, "value"]);
                                                                                      func5531.paramCounts = [1];
                                                                                      obj5526.methods["contents:="] = func5531;
                                                                                      func5531.definitionLine = 2032;
                                                                                      func5531.definitionModule = "stobjectdraw";
                                                                                      var func5534 = function(argcv) {    // method asString
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var curarg = 1;
                                                                                        if (argcv[0] !== 0)
                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                        setModuleName("stobjectdraw");
                                                                                        setLineNumber(2039);    // compilenode string
                                                                                        var string5535 = new GraceString("");
                                                                                        onSelf = true;
                                                                                        var call5537 = callmethodChecked(this, "contents", [0]);
                                                                                        var string5539 = new GraceString("a text box showing ");
                                                                                        var opresult5541 = callmethodChecked(string5539, "++", [1], call5537);
                                                                                        var opresult5543 = callmethodChecked(opresult5541, "++", [1], string5535);
                                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5543)))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("result of method asString does not have " + 
                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                        return opresult5543;
                                                                                      };
                                                                                      func5534.paramCounts = [0];
                                                                                      obj5526.methods["asString"] = func5534;
                                                                                      func5534.definitionLine = 2038;
                                                                                      func5534.definitionModule = "stobjectdraw";
                                                                                      setLineNumber(2024);    // compilenode string
                                                                                      var string5544 = new GraceString("span");
                                                                                      var call5545 = callmethodChecked(superDepth, "outer", [0]);
                                                                                      onOuter = true;
                                                                                      onSelf = true;
                                                                                      var call5546 = callmethodChecked(call5545, "componentOfElementType()object", [1, 1], string5544, this);
                                                                                      obj5526.superobj = call5546;
                                                                                      if (call5546.data) obj5526.data = call5546.data;
                                                                                      if (call5546.hasOwnProperty('_value'))
                                                                                          obj5526._value = call5546._value;
                                                                                      setLineNumber(2042);    // compilenode identifier
                                                                                      onSelf = true;
                                                                                      var call5547 = callmethodChecked(this, "contents:=", [1], var_contents__39__);
                                                                                      superDepth = origSuperDepth;
                                                                                    };
                                                                                    obj_init_5526.apply(inheritingObject, []);
                                                                                    return obj5526;
                                                                                    };
                                                                                    func5525.paramTypes = [];
                                                                                    func5525.paramTypes.push([type_String, "contents'"]);
                                                                                    this.methods["textBoxWith()object"] = func5525;
                                                                                  setLineNumber(2045);    // compilenode method
                                                                                  var func5548 = function(argcv) {    // method buttonLabeled(1)
                                                                                    var returnTarget = invocationCount;
                                                                                    invocationCount++;
                                                                                    var curarg = 1;
                                                                                    var var_label__39__ = arguments[curarg];
                                                                                    curarg++;
                                                                                    if (argcv[0] !== 1)
                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for buttonLabeled(1)"));
                                                                                    // Start argument checking
                                                                                    curarg = 1;
                                                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("argument 1 in buttonLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                    curarg++;
                                                                                    // End argument checking
                                                                                    setModuleName("stobjectdraw");
                                                                                    var obj5549 = Grace_allocObject(null, "stobjectdraw.buttonLabeled");
                                                                                    obj5549.definitionModule = "stobjectdraw";
                                                                                    obj5549.definitionLine = 2045;
                                                                                    obj5549.outer = this;
                                                                                    var reader_stobjectdraw_outer5550 = function() {
                                                                                      return this.outer;
                                                                                    };
                                                                                    obj5549.methods["outer"] = reader_stobjectdraw_outer5550;
                                                                                    var obj_init_5549 = function() {
                                                                                      var origSuperDepth = superDepth;
                                                                                      superDepth = obj5549;
                                                                                      var func5551 = function(argcv) {    // method asString
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var curarg = 1;
                                                                                        if (argcv[0] !== 0)
                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                        setModuleName("stobjectdraw");
                                                                                        setLineNumber(2050);    // compilenode string
                                                                                        var string5552 = new GraceString("");
                                                                                        onSelf = true;
                                                                                        var call5554 = callmethodChecked(this, "label", [0]);
                                                                                        var string5556 = new GraceString("a button labeled: ");
                                                                                        var opresult5558 = callmethodChecked(string5556, "++", [1], call5554);
                                                                                        var opresult5560 = callmethodChecked(opresult5558, "++", [1], string5552);
                                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5560)))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("result of method asString does not have " + 
                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                        return opresult5560;
                                                                                      };
                                                                                      func5551.paramCounts = [0];
                                                                                      obj5549.methods["asString"] = func5551;
                                                                                      func5551.definitionLine = 2049;
                                                                                      func5551.definitionModule = "stobjectdraw";
                                                                                      setLineNumber(2047);    // compilenode string
                                                                                      var string5561 = new GraceString("button");
                                                                                      var call5562 = callmethodChecked(superDepth, "outer", [0]);
                                                                                      onOuter = true;
                                                                                      onSelf = true;
                                                                                      var call5563 = callmethodChecked(call5562, "labeledWidgetOfElementType()labeled()object", [1, 1, 1], string5561, var_label__39__, this);
                                                                                      obj5549.superobj = call5563;
                                                                                      if (call5563.data) obj5549.data = call5563.data;
                                                                                      if (call5563.hasOwnProperty('_value'))
                                                                                          obj5549._value = call5563._value;
                                                                                      superDepth = origSuperDepth;
                                                                                    };
                                                                                    obj_init_5549.apply(obj5549, []);
                                                                                    setLineNumber(2045);    // return value
                                                                                    if (!Grace_isTrue(callmethod(var_Button, "match", [1], obj5549)))
                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                            new GraceString("result of method buttonLabeled(1) does not have " + 
                                                                                                callmethod(var_Button, "asString", [0])._value + "."));
                                                                                    return obj5549;
                                                                                  };
                                                                                  func5548.paramTypes = [];
                                                                                  func5548.paramTypes.push([type_String, "label'"]);
                                                                                  func5548.paramCounts = [1];
                                                                                  this.methods["buttonLabeled"] = func5548;
                                                                                  func5548.definitionLine = 2045;
                                                                                  func5548.definitionModule = "stobjectdraw";
                                                                                    var func5564 = function(argcv) {    // method buttonLabeled(1     )()object
                                                                                      var curarg = 1;
                                                                                      var var_label__39__ = arguments[curarg];
                                                                                      curarg++;
                                                                                      var inheritingObject = arguments[curarg++];
                                                                                      // Start argument processing
                                                                                      curarg = 1;
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in buttonLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument processing
                                                                                      setModuleName("stobjectdraw");
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var obj5565 = Grace_allocObject(null, "buttonLabeled");
                                                                                      obj5565.definitionModule = "stobjectdraw";
                                                                                      obj5565.definitionLine = 2045;
                                                                                      var inho5565 = inheritingObject;
                                                                                      while (inho5565.superobj) inho5565 = inho5565.superobj;
                                                                                      inho5565.superobj = obj5565;
                                                                                      obj5565.data = inheritingObject.data;
                                                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                                                        obj5565._value = inheritingObject._value;
                                                                                      obj5565.outer = this;
                                                                                      var reader_stobjectdraw_outer5566 = function() {
                                                                                        return this.outer;
                                                                                      };
                                                                                      obj5565.methods["outer"] = reader_stobjectdraw_outer5566;
                                                                                      var obj_init_5565 = function() {
                                                                                        var origSuperDepth = superDepth;
                                                                                        superDepth = obj5565;
                                                                                        var func5567 = function(argcv) {    // method asString
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var curarg = 1;
                                                                                          if (argcv[0] !== 0)
                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                          setModuleName("stobjectdraw");
                                                                                          setLineNumber(2050);    // compilenode string
                                                                                          var string5568 = new GraceString("");
                                                                                          onSelf = true;
                                                                                          var call5570 = callmethodChecked(this, "label", [0]);
                                                                                          var string5572 = new GraceString("a button labeled: ");
                                                                                          var opresult5574 = callmethodChecked(string5572, "++", [1], call5570);
                                                                                          var opresult5576 = callmethodChecked(opresult5574, "++", [1], string5568);
                                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult5576)))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("result of method asString does not have " + 
                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                          return opresult5576;
                                                                                        };
                                                                                        func5567.paramCounts = [0];
                                                                                        obj5565.methods["asString"] = func5567;
                                                                                        func5567.definitionLine = 2049;
                                                                                        func5567.definitionModule = "stobjectdraw";
                                                                                        setLineNumber(2047);    // compilenode string
                                                                                        var string5577 = new GraceString("button");
                                                                                        var call5578 = callmethodChecked(superDepth, "outer", [0]);
                                                                                        onOuter = true;
                                                                                        onSelf = true;
                                                                                        var call5579 = callmethodChecked(call5578, "labeledWidgetOfElementType()labeled()object", [1, 1, 1], string5577, var_label__39__, this);
                                                                                        obj5565.superobj = call5579;
                                                                                        if (call5579.data) obj5565.data = call5579.data;
                                                                                        if (call5579.hasOwnProperty('_value'))
                                                                                            obj5565._value = call5579._value;
                                                                                        superDepth = origSuperDepth;
                                                                                      };
                                                                                      obj_init_5565.apply(inheritingObject, []);
                                                                                      return obj5565;
                                                                                      };
                                                                                      func5564.paramTypes = [];
                                                                                      func5564.paramTypes.push([type_String, "label'"]);
                                                                                      this.methods["buttonLabeled()object"] = func5564;
                                                                                    setLineNumber(2067);    // compilenode method
                                                                                    var func5580 = function(argcv) {    // method textFieldLabeled(1)
                                                                                      var returnTarget = invocationCount;
                                                                                      invocationCount++;
                                                                                      var curarg = 1;
                                                                                      var var_label__39__ = arguments[curarg];
                                                                                      curarg++;
                                                                                      if (argcv[0] !== 1)
                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for textFieldLabeled(1)"));
                                                                                      // Start argument checking
                                                                                      curarg = 1;
                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("argument 1 in textFieldLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                      curarg++;
                                                                                      // End argument checking
                                                                                      setModuleName("stobjectdraw");
                                                                                      var obj5581 = Grace_allocObject(null, "stobjectdraw.textFieldLabeled");
                                                                                      obj5581.definitionModule = "stobjectdraw";
                                                                                      obj5581.definitionLine = 2067;
                                                                                      obj5581.outer = this;
                                                                                      var reader_stobjectdraw_outer5582 = function() {
                                                                                        return this.outer;
                                                                                      };
                                                                                      obj5581.methods["outer"] = reader_stobjectdraw_outer5582;
                                                                                      var obj_init_5581 = function() {
                                                                                        var origSuperDepth = superDepth;
                                                                                        superDepth = obj5581;
                                                                                        var func5583 = function(argcv) {    // method text
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var curarg = 1;
                                                                                          if (argcv[0] !== 0)
                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for text"));
                                                                                          setModuleName("stobjectdraw");
                                                                                          setLineNumber(2074);    // compilenode call
                                                                                          onSelf = true;
                                                                                          var call5584 = callmethodChecked(this, "element", [0]);
                                                                                          var call5585 = callmethodChecked(call5584, "value", [0]);
                                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], call5585)))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("result of method text does not have " + 
                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                          return call5585;
                                                                                        };
                                                                                        func5583.paramCounts = [0];
                                                                                        obj5581.methods["text"] = func5583;
                                                                                        func5583.definitionLine = 2072;
                                                                                        func5583.definitionModule = "stobjectdraw";
                                                                                        var func5586 = function(argcv) {    // method text:=(1)
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var curarg = 1;
                                                                                          var var_value = arguments[curarg];
                                                                                          curarg++;
                                                                                          if (argcv[0] !== 1)
                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for text:=(1)"));
                                                                                          // Start argument checking
                                                                                          curarg = 1;
                                                                                          setLineNumber(2077);    // compilenode identifier
                                                                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("argument 1 in text:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                          curarg++;
                                                                                          // End argument checking
                                                                                          setModuleName("stobjectdraw");
                                                                                          setLineNumber(2079);    // compilenode call
                                                                                          onSelf = true;
                                                                                          var call5587 = callmethodChecked(this, "element", [0]);
                                                                                          var call5588 = callmethodChecked(call5587, "value:=", [1], var_value);
                                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5588)))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("result of method text:=(1) does not have " + 
                                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                                          return call5588;
                                                                                        };
                                                                                        func5586.paramTypes = [];
                                                                                        func5586.paramTypes.push([type_String, "value"]);
                                                                                        func5586.paramCounts = [1];
                                                                                        obj5581.methods["text:="] = func5586;
                                                                                        func5586.definitionLine = 2077;
                                                                                        func5586.definitionModule = "stobjectdraw";
                                                                                        var func5589 = function(argcv) {    // method asString
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var curarg = 1;
                                                                                          if (argcv[0] !== 0)
                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                          setModuleName("stobjectdraw");
                                                                                          var if5590 = GraceDone;
                                                                                          setLineNumber(2084);    // compilenode string
                                                                                          var string5591 = new GraceString("");
                                                                                          onSelf = true;
                                                                                          var call5593 = callmethodChecked(this, "label", [0]);
                                                                                          var opresult5595 = callmethodChecked(call5593, "==", [1], string5591);
                                                                                          if (Grace_isTrue(opresult5595)) {
                                                                                            setLineNumber(2085);    // compilenode string
                                                                                            var string5596 = new GraceString("");
                                                                                            onSelf = true;
                                                                                            var call5598 = callmethodChecked(this, "text", [0]);
                                                                                            var string5600 = new GraceString("a text field with ");
                                                                                            var opresult5602 = callmethodChecked(string5600, "++", [1], call5598);
                                                                                            var opresult5604 = callmethodChecked(opresult5602, "++", [1], string5596);
                                                                                            if5590 = opresult5604;
                                                                                          } else {
                                                                                            setLineNumber(2087);    // compilenode string
                                                                                            var string5605 = new GraceString("");
                                                                                            onSelf = true;
                                                                                            var call5607 = callmethodChecked(this, "text", [0]);
                                                                                            var string5609 = new GraceString(" with ");
                                                                                            onSelf = true;
                                                                                            var call5611 = callmethodChecked(this, "label", [0]);
                                                                                            var string5613 = new GraceString("a text field labeled: ");
                                                                                            var opresult5615 = callmethodChecked(string5613, "++", [1], call5611);
                                                                                            var opresult5617 = callmethodChecked(opresult5615, "++", [1], string5609);
                                                                                            var opresult5619 = callmethodChecked(opresult5617, "++", [1], call5607);
                                                                                            var opresult5621 = callmethodChecked(opresult5619, "++", [1], string5605);
                                                                                            if5590 = opresult5621;
                                                                                          }
                                                                                          setLineNumber(2084);    // return value
                                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], if5590)))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("result of method asString does not have " + 
                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                          return if5590;
                                                                                        };
                                                                                        func5589.paramCounts = [0];
                                                                                        obj5581.methods["asString"] = func5589;
                                                                                        func5589.definitionLine = 2083;
                                                                                        func5589.definitionModule = "stobjectdraw";
                                                                                        setLineNumber(2070);    // compilenode string
                                                                                        var string5622 = new GraceString("text");
                                                                                        var call5623 = callmethodChecked(superDepth, "outer", [0]);
                                                                                        onOuter = true;
                                                                                        onSelf = true;
                                                                                        var call5624 = callmethodChecked(call5623, "fieldOfType()labeled()object", [1, 1, 1], string5622, var_label__39__, this);
                                                                                        obj5581.superobj = call5624;
                                                                                        if (call5624.data) obj5581.data = call5624.data;
                                                                                        if (call5624.hasOwnProperty('_value'))
                                                                                            obj5581._value = call5624._value;
                                                                                        superDepth = origSuperDepth;
                                                                                      };
                                                                                      obj_init_5581.apply(obj5581, []);
                                                                                      setLineNumber(2067);    // return value
                                                                                      if (!Grace_isTrue(callmethod(var_TextField, "match", [1], obj5581)))
                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                              new GraceString("result of method textFieldLabeled(1) does not have " + 
                                                                                                  callmethod(var_TextField, "asString", [0])._value + "."));
                                                                                      return obj5581;
                                                                                    };
                                                                                    func5580.paramTypes = [];
                                                                                    func5580.paramTypes.push([type_String, "label'"]);
                                                                                    func5580.paramCounts = [1];
                                                                                    this.methods["textFieldLabeled"] = func5580;
                                                                                    func5580.definitionLine = 2067;
                                                                                    func5580.definitionModule = "stobjectdraw";
                                                                                      var func5625 = function(argcv) {    // method textFieldLabeled(1     )()object
                                                                                        var curarg = 1;
                                                                                        var var_label__39__ = arguments[curarg];
                                                                                        curarg++;
                                                                                        var inheritingObject = arguments[curarg++];
                                                                                        // Start argument processing
                                                                                        curarg = 1;
                                                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("argument 1 in textFieldLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                        curarg++;
                                                                                        // End argument processing
                                                                                        setModuleName("stobjectdraw");
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var obj5626 = Grace_allocObject(null, "textFieldLabeled");
                                                                                        obj5626.definitionModule = "stobjectdraw";
                                                                                        obj5626.definitionLine = 2067;
                                                                                        var inho5626 = inheritingObject;
                                                                                        while (inho5626.superobj) inho5626 = inho5626.superobj;
                                                                                        inho5626.superobj = obj5626;
                                                                                        obj5626.data = inheritingObject.data;
                                                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                                                          obj5626._value = inheritingObject._value;
                                                                                        obj5626.outer = this;
                                                                                        var reader_stobjectdraw_outer5627 = function() {
                                                                                          return this.outer;
                                                                                        };
                                                                                        obj5626.methods["outer"] = reader_stobjectdraw_outer5627;
                                                                                        var obj_init_5626 = function() {
                                                                                          var origSuperDepth = superDepth;
                                                                                          superDepth = obj5626;
                                                                                          var func5628 = function(argcv) {    // method text
                                                                                            var returnTarget = invocationCount;
                                                                                            invocationCount++;
                                                                                            var curarg = 1;
                                                                                            if (argcv[0] !== 0)
                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for text"));
                                                                                            setModuleName("stobjectdraw");
                                                                                            setLineNumber(2074);    // compilenode call
                                                                                            onSelf = true;
                                                                                            var call5629 = callmethodChecked(this, "element", [0]);
                                                                                            var call5630 = callmethodChecked(call5629, "value", [0]);
                                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], call5630)))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("result of method text does not have " + 
                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                            return call5630;
                                                                                          };
                                                                                          func5628.paramCounts = [0];
                                                                                          obj5626.methods["text"] = func5628;
                                                                                          func5628.definitionLine = 2072;
                                                                                          func5628.definitionModule = "stobjectdraw";
                                                                                          var func5631 = function(argcv) {    // method text:=(1)
                                                                                            var returnTarget = invocationCount;
                                                                                            invocationCount++;
                                                                                            var curarg = 1;
                                                                                            var var_value = arguments[curarg];
                                                                                            curarg++;
                                                                                            if (argcv[0] !== 1)
                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for text:=(1)"));
                                                                                            // Start argument checking
                                                                                            curarg = 1;
                                                                                            setLineNumber(2077);    // compilenode identifier
                                                                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("argument 1 in text:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                            curarg++;
                                                                                            // End argument checking
                                                                                            setModuleName("stobjectdraw");
                                                                                            setLineNumber(2079);    // compilenode call
                                                                                            onSelf = true;
                                                                                            var call5632 = callmethodChecked(this, "element", [0]);
                                                                                            var call5633 = callmethodChecked(call5632, "value:=", [1], var_value);
                                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5633)))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("result of method text:=(1) does not have " + 
                                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                                            return call5633;
                                                                                          };
                                                                                          func5631.paramTypes = [];
                                                                                          func5631.paramTypes.push([type_String, "value"]);
                                                                                          func5631.paramCounts = [1];
                                                                                          obj5626.methods["text:="] = func5631;
                                                                                          func5631.definitionLine = 2077;
                                                                                          func5631.definitionModule = "stobjectdraw";
                                                                                          var func5634 = function(argcv) {    // method asString
                                                                                            var returnTarget = invocationCount;
                                                                                            invocationCount++;
                                                                                            var curarg = 1;
                                                                                            if (argcv[0] !== 0)
                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                            setModuleName("stobjectdraw");
                                                                                            var if5635 = GraceDone;
                                                                                            setLineNumber(2084);    // compilenode string
                                                                                            var string5636 = new GraceString("");
                                                                                            onSelf = true;
                                                                                            var call5638 = callmethodChecked(this, "label", [0]);
                                                                                            var opresult5640 = callmethodChecked(call5638, "==", [1], string5636);
                                                                                            if (Grace_isTrue(opresult5640)) {
                                                                                              setLineNumber(2085);    // compilenode string
                                                                                              var string5641 = new GraceString("");
                                                                                              onSelf = true;
                                                                                              var call5643 = callmethodChecked(this, "text", [0]);
                                                                                              var string5645 = new GraceString("a text field with ");
                                                                                              var opresult5647 = callmethodChecked(string5645, "++", [1], call5643);
                                                                                              var opresult5649 = callmethodChecked(opresult5647, "++", [1], string5641);
                                                                                              if5635 = opresult5649;
                                                                                            } else {
                                                                                              setLineNumber(2087);    // compilenode string
                                                                                              var string5650 = new GraceString("");
                                                                                              onSelf = true;
                                                                                              var call5652 = callmethodChecked(this, "text", [0]);
                                                                                              var string5654 = new GraceString(" with ");
                                                                                              onSelf = true;
                                                                                              var call5656 = callmethodChecked(this, "label", [0]);
                                                                                              var string5658 = new GraceString("a text field labeled: ");
                                                                                              var opresult5660 = callmethodChecked(string5658, "++", [1], call5656);
                                                                                              var opresult5662 = callmethodChecked(opresult5660, "++", [1], string5654);
                                                                                              var opresult5664 = callmethodChecked(opresult5662, "++", [1], call5652);
                                                                                              var opresult5666 = callmethodChecked(opresult5664, "++", [1], string5650);
                                                                                              if5635 = opresult5666;
                                                                                            }
                                                                                            setLineNumber(2084);    // return value
                                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], if5635)))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("result of method asString does not have " + 
                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                            return if5635;
                                                                                          };
                                                                                          func5634.paramCounts = [0];
                                                                                          obj5626.methods["asString"] = func5634;
                                                                                          func5634.definitionLine = 2083;
                                                                                          func5634.definitionModule = "stobjectdraw";
                                                                                          setLineNumber(2070);    // compilenode string
                                                                                          var string5667 = new GraceString("text");
                                                                                          var call5668 = callmethodChecked(superDepth, "outer", [0]);
                                                                                          onOuter = true;
                                                                                          onSelf = true;
                                                                                          var call5669 = callmethodChecked(call5668, "fieldOfType()labeled()object", [1, 1, 1], string5667, var_label__39__, this);
                                                                                          obj5626.superobj = call5669;
                                                                                          if (call5669.data) obj5626.data = call5669.data;
                                                                                          if (call5669.hasOwnProperty('_value'))
                                                                                              obj5626._value = call5669._value;
                                                                                          superDepth = origSuperDepth;
                                                                                        };
                                                                                        obj_init_5626.apply(inheritingObject, []);
                                                                                        return obj5626;
                                                                                        };
                                                                                        func5625.paramTypes = [];
                                                                                        func5625.paramTypes.push([type_String, "label'"]);
                                                                                        this.methods["textFieldLabeled()object"] = func5625;
                                                                                      setLineNumber(2092);    // compilenode method
                                                                                      var func5670 = function(argcv) {    // method textFieldUnlabeled
                                                                                        var returnTarget = invocationCount;
                                                                                        invocationCount++;
                                                                                        var curarg = 1;
                                                                                        if (argcv[0] !== 0)
                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for textFieldUnlabeled"));
                                                                                        setModuleName("stobjectdraw");
                                                                                        var obj5671 = Grace_allocObject(null, "stobjectdraw.textFieldUnlabeled");
                                                                                        obj5671.definitionModule = "stobjectdraw";
                                                                                        obj5671.definitionLine = 2092;
                                                                                        obj5671.outer = this;
                                                                                        var reader_stobjectdraw_outer5672 = function() {
                                                                                          return this.outer;
                                                                                        };
                                                                                        obj5671.methods["outer"] = reader_stobjectdraw_outer5672;
                                                                                        var obj_init_5671 = function() {
                                                                                          var origSuperDepth = superDepth;
                                                                                          superDepth = obj5671;
                                                                                          setLineNumber(2095);    // compilenode string
                                                                                          var string5673 = new GraceString("");
                                                                                          var call5674 = callmethodChecked(superDepth, "outer", [0]);
                                                                                          onOuter = true;
                                                                                          onSelf = true;
                                                                                          var call5675 = callmethodChecked(call5674, "textFieldLabeled()object", [1, 1], string5673, this);
                                                                                          obj5671.superobj = call5675;
                                                                                          if (call5675.data) obj5671.data = call5675.data;
                                                                                          if (call5675.hasOwnProperty('_value'))
                                                                                              obj5671._value = call5675._value;
                                                                                          superDepth = origSuperDepth;
                                                                                        };
                                                                                        obj_init_5671.apply(obj5671, []);
                                                                                        setLineNumber(2092);    // return value
                                                                                        if (!Grace_isTrue(callmethod(var_TextField, "match", [1], obj5671)))
                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                new GraceString("result of method textFieldUnlabeled does not have " + 
                                                                                                    callmethod(var_TextField, "asString", [0])._value + "."));
                                                                                        return obj5671;
                                                                                      };
                                                                                      func5670.paramCounts = [0];
                                                                                      this.methods["textFieldUnlabeled"] = func5670;
                                                                                      func5670.definitionLine = 2092;
                                                                                      func5670.definitionModule = "stobjectdraw";
                                                                                        var func5676 = function(argcv) {    // method textFieldUnlabeled()object
                                                                                          var curarg = 1;
                                                                                          var inheritingObject = arguments[curarg++];
                                                                                          // Start argument processing
                                                                                          curarg = 1;
                                                                                          // End argument processing
                                                                                          setModuleName("stobjectdraw");
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var obj5677 = Grace_allocObject(null, "textFieldUnlabeled");
                                                                                          obj5677.definitionModule = "stobjectdraw";
                                                                                          obj5677.definitionLine = 2092;
                                                                                          var inho5677 = inheritingObject;
                                                                                          while (inho5677.superobj) inho5677 = inho5677.superobj;
                                                                                          inho5677.superobj = obj5677;
                                                                                          obj5677.data = inheritingObject.data;
                                                                                          if (inheritingObject.hasOwnProperty('_value'))
                                                                                            obj5677._value = inheritingObject._value;
                                                                                          obj5677.outer = this;
                                                                                          var reader_stobjectdraw_outer5678 = function() {
                                                                                            return this.outer;
                                                                                          };
                                                                                          obj5677.methods["outer"] = reader_stobjectdraw_outer5678;
                                                                                          var obj_init_5677 = function() {
                                                                                            var origSuperDepth = superDepth;
                                                                                            superDepth = obj5677;
                                                                                            setLineNumber(2095);    // compilenode string
                                                                                            var string5679 = new GraceString("");
                                                                                            var call5680 = callmethodChecked(superDepth, "outer", [0]);
                                                                                            onOuter = true;
                                                                                            onSelf = true;
                                                                                            var call5681 = callmethodChecked(call5680, "textFieldLabeled()object", [1, 1], string5679, this);
                                                                                            obj5677.superobj = call5681;
                                                                                            if (call5681.data) obj5677.data = call5681.data;
                                                                                            if (call5681.hasOwnProperty('_value'))
                                                                                                obj5677._value = call5681._value;
                                                                                            superDepth = origSuperDepth;
                                                                                          };
                                                                                          obj_init_5677.apply(inheritingObject, []);
                                                                                          return obj5677;
                                                                                          };
                                                                                          this.methods["textFieldUnlabeled()object"] = func5676;
                                                                                        setLineNumber(2099);    // compilenode method
                                                                                        var func5682 = function(argcv) {    // method passwordFieldLabeled(1)
                                                                                          var returnTarget = invocationCount;
                                                                                          invocationCount++;
                                                                                          var curarg = 1;
                                                                                          var var_lab = arguments[curarg];
                                                                                          curarg++;
                                                                                          if (argcv[0] !== 1)
                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for passwordFieldLabeled(1)"));
                                                                                          // Start argument checking
                                                                                          curarg = 1;
                                                                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("argument 1 in passwordFieldLabeled (arg list 1), which corresponds to parameter lab, does not have " + 
                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                          curarg++;
                                                                                          // End argument checking
                                                                                          setModuleName("stobjectdraw");
                                                                                          var obj5683 = Grace_allocObject(null, "stobjectdraw.passwordFieldLabeled");
                                                                                          obj5683.definitionModule = "stobjectdraw";
                                                                                          obj5683.definitionLine = 2099;
                                                                                          obj5683.outer = this;
                                                                                          var reader_stobjectdraw_outer5684 = function() {
                                                                                            return this.outer;
                                                                                          };
                                                                                          obj5683.methods["outer"] = reader_stobjectdraw_outer5684;
                                                                                          var obj_init_5683 = function() {
                                                                                            var origSuperDepth = superDepth;
                                                                                            superDepth = obj5683;
                                                                                            var func5685 = function(argcv) {    // method asString
                                                                                              var returnTarget = invocationCount;
                                                                                              invocationCount++;
                                                                                              var curarg = 1;
                                                                                              if (argcv[0] !== 0)
                                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                              setModuleName("stobjectdraw");
                                                                                              var if5686 = GraceDone;
                                                                                              setLineNumber(2108);    // compilenode string
                                                                                              var string5687 = new GraceString("");
                                                                                              onSelf = true;
                                                                                              var call5689 = callmethodChecked(this, "label", [0]);
                                                                                              var opresult5691 = callmethodChecked(call5689, "==", [1], string5687);
                                                                                              if (Grace_isTrue(opresult5691)) {
                                                                                                setLineNumber(2109);    // compilenode string
                                                                                                var string5692 = new GraceString("a password field");
                                                                                                if5686 = string5692;
                                                                                              } else {
                                                                                                setLineNumber(2111);    // compilenode string
                                                                                                var string5693 = new GraceString("");
                                                                                                onSelf = true;
                                                                                                var call5695 = callmethodChecked(this, "label", [0]);
                                                                                                var string5697 = new GraceString("a password field labeled: ");
                                                                                                var opresult5699 = callmethodChecked(string5697, "++", [1], call5695);
                                                                                                var opresult5701 = callmethodChecked(opresult5699, "++", [1], string5693);
                                                                                                if5686 = opresult5701;
                                                                                              }
                                                                                              setLineNumber(2108);    // return value
                                                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], if5686)))
                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                      new GraceString("result of method asString does not have " + 
                                                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                                                              return if5686;
                                                                                            };
                                                                                            func5685.paramCounts = [0];
                                                                                            obj5683.methods["asString"] = func5685;
                                                                                            func5685.definitionLine = 2106;
                                                                                            func5685.definitionModule = "stobjectdraw";
                                                                                            setLineNumber(2102);    // compilenode call
                                                                                            var call5702 = callmethodChecked(superDepth, "outer", [0]);
                                                                                            onOuter = true;
                                                                                            onSelf = true;
                                                                                            var call5703 = callmethodChecked(call5702, "textFieldLabeled()object", [1, 1], var_lab, this);
                                                                                            obj5683.superobj = call5703;
                                                                                            if (call5703.data) obj5683.data = call5703.data;
                                                                                            if (call5703.hasOwnProperty('_value'))
                                                                                                obj5683._value = call5703._value;
                                                                                            setLineNumber(2104);    // compilenode string
                                                                                            var string5704 = new GraceString("type");
                                                                                            var string5705 = new GraceString("password");
                                                                                            onSelf = true;
                                                                                            var call5706 = callmethodChecked(this, "element", [0]);
                                                                                            var call5707 = callmethodChecked(call5706, "setAttribute", [2], string5704, string5705);
                                                                                            superDepth = origSuperDepth;
                                                                                          };
                                                                                          obj_init_5683.apply(obj5683, []);
                                                                                          setLineNumber(2099);    // return value
                                                                                          if (!Grace_isTrue(callmethod(var_Input, "match", [1], obj5683)))
                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                  new GraceString("result of method passwordFieldLabeled(1) does not have " + 
                                                                                                      callmethod(var_Input, "asString", [0])._value + "."));
                                                                                          return obj5683;
                                                                                        };
                                                                                        func5682.paramTypes = [];
                                                                                        func5682.paramTypes.push([type_String, "lab"]);
                                                                                        func5682.paramCounts = [1];
                                                                                        this.methods["passwordFieldLabeled"] = func5682;
                                                                                        func5682.definitionLine = 2099;
                                                                                        func5682.definitionModule = "stobjectdraw";
                                                                                          var func5708 = function(argcv) {    // method passwordFieldLabeled(1     )()object
                                                                                            var curarg = 1;
                                                                                            var var_lab = arguments[curarg];
                                                                                            curarg++;
                                                                                            var inheritingObject = arguments[curarg++];
                                                                                            // Start argument processing
                                                                                            curarg = 1;
                                                                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("argument 1 in passwordFieldLabeled (arg list 1), which corresponds to parameter lab, does not have " + 
                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                            curarg++;
                                                                                            // End argument processing
                                                                                            setModuleName("stobjectdraw");
                                                                                            var returnTarget = invocationCount;
                                                                                            invocationCount++;
                                                                                            var obj5709 = Grace_allocObject(null, "passwordFieldLabeled");
                                                                                            obj5709.definitionModule = "stobjectdraw";
                                                                                            obj5709.definitionLine = 2099;
                                                                                            var inho5709 = inheritingObject;
                                                                                            while (inho5709.superobj) inho5709 = inho5709.superobj;
                                                                                            inho5709.superobj = obj5709;
                                                                                            obj5709.data = inheritingObject.data;
                                                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                                                              obj5709._value = inheritingObject._value;
                                                                                            obj5709.outer = this;
                                                                                            var reader_stobjectdraw_outer5710 = function() {
                                                                                              return this.outer;
                                                                                            };
                                                                                            obj5709.methods["outer"] = reader_stobjectdraw_outer5710;
                                                                                            var obj_init_5709 = function() {
                                                                                              var origSuperDepth = superDepth;
                                                                                              superDepth = obj5709;
                                                                                              var func5711 = function(argcv) {    // method asString
                                                                                                var returnTarget = invocationCount;
                                                                                                invocationCount++;
                                                                                                var curarg = 1;
                                                                                                if (argcv[0] !== 0)
                                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                setModuleName("stobjectdraw");
                                                                                                var if5712 = GraceDone;
                                                                                                setLineNumber(2108);    // compilenode string
                                                                                                var string5713 = new GraceString("");
                                                                                                onSelf = true;
                                                                                                var call5715 = callmethodChecked(this, "label", [0]);
                                                                                                var opresult5717 = callmethodChecked(call5715, "==", [1], string5713);
                                                                                                if (Grace_isTrue(opresult5717)) {
                                                                                                  setLineNumber(2109);    // compilenode string
                                                                                                  var string5718 = new GraceString("a password field");
                                                                                                  if5712 = string5718;
                                                                                                } else {
                                                                                                  setLineNumber(2111);    // compilenode string
                                                                                                  var string5719 = new GraceString("");
                                                                                                  onSelf = true;
                                                                                                  var call5721 = callmethodChecked(this, "label", [0]);
                                                                                                  var string5723 = new GraceString("a password field labeled: ");
                                                                                                  var opresult5725 = callmethodChecked(string5723, "++", [1], call5721);
                                                                                                  var opresult5727 = callmethodChecked(opresult5725, "++", [1], string5719);
                                                                                                  if5712 = opresult5727;
                                                                                                }
                                                                                                setLineNumber(2108);    // return value
                                                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], if5712)))
                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                        new GraceString("result of method asString does not have " + 
                                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                                return if5712;
                                                                                              };
                                                                                              func5711.paramCounts = [0];
                                                                                              obj5709.methods["asString"] = func5711;
                                                                                              func5711.definitionLine = 2106;
                                                                                              func5711.definitionModule = "stobjectdraw";
                                                                                              setLineNumber(2102);    // compilenode call
                                                                                              var call5728 = callmethodChecked(superDepth, "outer", [0]);
                                                                                              onOuter = true;
                                                                                              onSelf = true;
                                                                                              var call5729 = callmethodChecked(call5728, "textFieldLabeled()object", [1, 1], var_lab, this);
                                                                                              obj5709.superobj = call5729;
                                                                                              if (call5729.data) obj5709.data = call5729.data;
                                                                                              if (call5729.hasOwnProperty('_value'))
                                                                                                  obj5709._value = call5729._value;
                                                                                              setLineNumber(2104);    // compilenode string
                                                                                              var string5730 = new GraceString("type");
                                                                                              var string5731 = new GraceString("password");
                                                                                              onSelf = true;
                                                                                              var call5732 = callmethodChecked(this, "element", [0]);
                                                                                              var call5733 = callmethodChecked(call5732, "setAttribute", [2], string5730, string5731);
                                                                                              superDepth = origSuperDepth;
                                                                                            };
                                                                                            obj_init_5709.apply(inheritingObject, []);
                                                                                            return obj5709;
                                                                                            };
                                                                                            func5708.paramTypes = [];
                                                                                            func5708.paramTypes.push([type_String, "lab"]);
                                                                                            this.methods["passwordFieldLabeled()object"] = func5708;
                                                                                          setLineNumber(2117);    // compilenode method
                                                                                          var func5734 = function(argcv) {    // method passwordFieldUnlabeled
                                                                                            var returnTarget = invocationCount;
                                                                                            invocationCount++;
                                                                                            var curarg = 1;
                                                                                            if (argcv[0] !== 0)
                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for passwordFieldUnlabeled"));
                                                                                            setModuleName("stobjectdraw");
                                                                                            var obj5735 = Grace_allocObject(null, "stobjectdraw.passwordFieldUnlabeled");
                                                                                            obj5735.definitionModule = "stobjectdraw";
                                                                                            obj5735.definitionLine = 2117;
                                                                                            obj5735.outer = this;
                                                                                            var reader_stobjectdraw_outer5736 = function() {
                                                                                              return this.outer;
                                                                                            };
                                                                                            obj5735.methods["outer"] = reader_stobjectdraw_outer5736;
                                                                                            var obj_init_5735 = function() {
                                                                                              var origSuperDepth = superDepth;
                                                                                              superDepth = obj5735;
                                                                                              setLineNumber(2118);    // compilenode string
                                                                                              var string5737 = new GraceString("");
                                                                                              var call5738 = callmethodChecked(superDepth, "outer", [0]);
                                                                                              onOuter = true;
                                                                                              onSelf = true;
                                                                                              var call5739 = callmethodChecked(call5738, "passwordFieldLabeled()object", [1, 1], string5737, this);
                                                                                              obj5735.superobj = call5739;
                                                                                              if (call5739.data) obj5735.data = call5739.data;
                                                                                              if (call5739.hasOwnProperty('_value'))
                                                                                                  obj5735._value = call5739._value;
                                                                                              superDepth = origSuperDepth;
                                                                                            };
                                                                                            obj_init_5735.apply(obj5735, []);
                                                                                            setLineNumber(2117);    // return value
                                                                                            if (!Grace_isTrue(callmethod(var_TextField, "match", [1], obj5735)))
                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                    new GraceString("result of method passwordFieldUnlabeled does not have " + 
                                                                                                        callmethod(var_TextField, "asString", [0])._value + "."));
                                                                                            return obj5735;
                                                                                          };
                                                                                          func5734.paramCounts = [0];
                                                                                          this.methods["passwordFieldUnlabeled"] = func5734;
                                                                                          func5734.definitionLine = 2117;
                                                                                          func5734.definitionModule = "stobjectdraw";
                                                                                            var func5740 = function(argcv) {    // method passwordFieldUnlabeled()object
                                                                                              var curarg = 1;
                                                                                              var inheritingObject = arguments[curarg++];
                                                                                              // Start argument processing
                                                                                              curarg = 1;
                                                                                              // End argument processing
                                                                                              setModuleName("stobjectdraw");
                                                                                              var returnTarget = invocationCount;
                                                                                              invocationCount++;
                                                                                              var obj5741 = Grace_allocObject(null, "passwordFieldUnlabeled");
                                                                                              obj5741.definitionModule = "stobjectdraw";
                                                                                              obj5741.definitionLine = 2117;
                                                                                              var inho5741 = inheritingObject;
                                                                                              while (inho5741.superobj) inho5741 = inho5741.superobj;
                                                                                              inho5741.superobj = obj5741;
                                                                                              obj5741.data = inheritingObject.data;
                                                                                              if (inheritingObject.hasOwnProperty('_value'))
                                                                                                obj5741._value = inheritingObject._value;
                                                                                              obj5741.outer = this;
                                                                                              var reader_stobjectdraw_outer5742 = function() {
                                                                                                return this.outer;
                                                                                              };
                                                                                              obj5741.methods["outer"] = reader_stobjectdraw_outer5742;
                                                                                              var obj_init_5741 = function() {
                                                                                                var origSuperDepth = superDepth;
                                                                                                superDepth = obj5741;
                                                                                                setLineNumber(2118);    // compilenode string
                                                                                                var string5743 = new GraceString("");
                                                                                                var call5744 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                onOuter = true;
                                                                                                onSelf = true;
                                                                                                var call5745 = callmethodChecked(call5744, "passwordFieldLabeled()object", [1, 1], string5743, this);
                                                                                                obj5741.superobj = call5745;
                                                                                                if (call5745.data) obj5741.data = call5745.data;
                                                                                                if (call5745.hasOwnProperty('_value'))
                                                                                                    obj5741._value = call5745._value;
                                                                                                superDepth = origSuperDepth;
                                                                                              };
                                                                                              obj_init_5741.apply(inheritingObject, []);
                                                                                              return obj5741;
                                                                                              };
                                                                                              this.methods["passwordFieldUnlabeled()object"] = func5740;
                                                                                            setLineNumber(2121);    // compilenode method
                                                                                            var func5746 = function(argcv) {    // method numberFieldLabeled(1)
                                                                                              var returnTarget = invocationCount;
                                                                                              invocationCount++;
                                                                                              var curarg = 1;
                                                                                              var var_label__39__ = arguments[curarg];
                                                                                              curarg++;
                                                                                              if (argcv[0] !== 1)
                                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for numberFieldLabeled(1)"));
                                                                                              // Start argument checking
                                                                                              curarg = 1;
                                                                                              if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                      new GraceString("argument 1 in numberFieldLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                                                              curarg++;
                                                                                              // End argument checking
                                                                                              setModuleName("stobjectdraw");
                                                                                              var obj5747 = Grace_allocObject(null, "stobjectdraw.numberFieldLabeled");
                                                                                              obj5747.definitionModule = "stobjectdraw";
                                                                                              obj5747.definitionLine = 2121;
                                                                                              obj5747.outer = this;
                                                                                              var reader_stobjectdraw_outer5748 = function() {
                                                                                                return this.outer;
                                                                                              };
                                                                                              obj5747.methods["outer"] = reader_stobjectdraw_outer5748;
                                                                                              var obj_init_5747 = function() {
                                                                                                var origSuperDepth = superDepth;
                                                                                                superDepth = obj5747;
                                                                                                var func5749 = function(argcv) {    // method number
                                                                                                  var returnTarget = invocationCount;
                                                                                                  invocationCount++;
                                                                                                  var curarg = 1;
                                                                                                  if (argcv[0] !== 0)
                                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for number"));
                                                                                                  setModuleName("stobjectdraw");
                                                                                                  setLineNumber(2128);    // compilenode call
                                                                                                  onSelf = true;
                                                                                                  var call5750 = callmethodChecked(this, "element", [0]);
                                                                                                  var call5751 = callmethodChecked(call5750, "value", [0]);
                                                                                                  var call5752 = callmethodChecked(call5751, "asNumber", [0]);
                                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5752)))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("result of method number does not have " + 
                                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                  return call5752;
                                                                                                };
                                                                                                func5749.paramCounts = [0];
                                                                                                obj5747.methods["number"] = func5749;
                                                                                                func5749.definitionLine = 2127;
                                                                                                func5749.definitionModule = "stobjectdraw";
                                                                                                var func5753 = function(argcv) {    // method number:=(1)
                                                                                                  var returnTarget = invocationCount;
                                                                                                  invocationCount++;
                                                                                                  var curarg = 1;
                                                                                                  var var_value = arguments[curarg];
                                                                                                  curarg++;
                                                                                                  if (argcv[0] !== 1)
                                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for number:=(1)"));
                                                                                                  // Start argument checking
                                                                                                  curarg = 1;
                                                                                                  setLineNumber(2132);    // compilenode identifier
                                                                                                  if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("argument 1 in number:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                  curarg++;
                                                                                                  // End argument checking
                                                                                                  setModuleName("stobjectdraw");
                                                                                                  setLineNumber(2133);    // compilenode call
                                                                                                  onSelf = true;
                                                                                                  var call5754 = callmethodChecked(this, "element", [0]);
                                                                                                  var call5755 = callmethodChecked(call5754, "value:=", [1], var_value);
                                                                                                  if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5755)))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("result of method number:=(1) does not have " + 
                                                                                                              callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                  return call5755;
                                                                                                };
                                                                                                func5753.paramTypes = [];
                                                                                                func5753.paramTypes.push([type_Number, "value"]);
                                                                                                func5753.paramCounts = [1];
                                                                                                obj5747.methods["number:="] = func5753;
                                                                                                func5753.definitionLine = 2132;
                                                                                                func5753.definitionModule = "stobjectdraw";
                                                                                                var func5756 = function(argcv) {    // method asString
                                                                                                  var returnTarget = invocationCount;
                                                                                                  invocationCount++;
                                                                                                  var curarg = 1;
                                                                                                  if (argcv[0] !== 0)
                                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                  setModuleName("stobjectdraw");
                                                                                                  var if5757 = GraceDone;
                                                                                                  setLineNumber(2138);    // compilenode string
                                                                                                  var string5758 = new GraceString("");
                                                                                                  onSelf = true;
                                                                                                  var call5760 = callmethodChecked(this, "label", [0]);
                                                                                                  var opresult5762 = callmethodChecked(call5760, "==", [1], string5758);
                                                                                                  if (Grace_isTrue(opresult5762)) {
                                                                                                    setLineNumber(2139);    // compilenode string
                                                                                                    var string5763 = new GraceString("");
                                                                                                    onSelf = true;
                                                                                                    var call5765 = callmethodChecked(this, "number", [0]);
                                                                                                    var string5767 = new GraceString("a number field holding ");
                                                                                                    var opresult5769 = callmethodChecked(string5767, "++", [1], call5765);
                                                                                                    var opresult5771 = callmethodChecked(opresult5769, "++", [1], string5763);
                                                                                                    if5757 = opresult5771;
                                                                                                  } else {
                                                                                                    setLineNumber(2141);    // compilenode string
                                                                                                    var string5772 = new GraceString("");
                                                                                                    onSelf = true;
                                                                                                    var call5774 = callmethodChecked(this, "number", [0]);
                                                                                                    var string5776 = new GraceString(" holding ");
                                                                                                    onSelf = true;
                                                                                                    var call5778 = callmethodChecked(this, "label", [0]);
                                                                                                    var string5780 = new GraceString("a number field labeled: ");
                                                                                                    var opresult5782 = callmethodChecked(string5780, "++", [1], call5778);
                                                                                                    var opresult5784 = callmethodChecked(opresult5782, "++", [1], string5776);
                                                                                                    var opresult5786 = callmethodChecked(opresult5784, "++", [1], call5774);
                                                                                                    var opresult5788 = callmethodChecked(opresult5786, "++", [1], string5772);
                                                                                                    if5757 = opresult5788;
                                                                                                  }
                                                                                                  setLineNumber(2138);    // return value
                                                                                                  if (!Grace_isTrue(callmethod(var_String, "match", [1], if5757)))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("result of method asString does not have " + 
                                                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                                                  return if5757;
                                                                                                };
                                                                                                func5756.paramCounts = [0];
                                                                                                obj5747.methods["asString"] = func5756;
                                                                                                func5756.definitionLine = 2137;
                                                                                                func5756.definitionModule = "stobjectdraw";
                                                                                                setLineNumber(2124);    // compilenode string
                                                                                                var string5789 = new GraceString("number");
                                                                                                var call5790 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                onOuter = true;
                                                                                                onSelf = true;
                                                                                                var call5791 = callmethodChecked(call5790, "fieldOfType()labeled()object", [1, 1, 1], string5789, var_label__39__, this);
                                                                                                obj5747.superobj = call5791;
                                                                                                if (call5791.data) obj5747.data = call5791.data;
                                                                                                if (call5791.hasOwnProperty('_value'))
                                                                                                    obj5747._value = call5791._value;
                                                                                                superDepth = origSuperDepth;
                                                                                              };
                                                                                              obj_init_5747.apply(obj5747, []);
                                                                                              setLineNumber(2121);    // return value
                                                                                              if (!Grace_isTrue(callmethod(var_NumberField, "match", [1], obj5747)))
                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                      new GraceString("result of method numberFieldLabeled(1) does not have " + 
                                                                                                          callmethod(var_NumberField, "asString", [0])._value + "."));
                                                                                              return obj5747;
                                                                                            };
                                                                                            func5746.paramTypes = [];
                                                                                            func5746.paramTypes.push([type_String, "label'"]);
                                                                                            func5746.paramCounts = [1];
                                                                                            this.methods["numberFieldLabeled"] = func5746;
                                                                                            func5746.definitionLine = 2121;
                                                                                            func5746.definitionModule = "stobjectdraw";
                                                                                              var func5792 = function(argcv) {    // method numberFieldLabeled(1     )()object
                                                                                                var curarg = 1;
                                                                                                var var_label__39__ = arguments[curarg];
                                                                                                curarg++;
                                                                                                var inheritingObject = arguments[curarg++];
                                                                                                // Start argument processing
                                                                                                curarg = 1;
                                                                                                if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                        new GraceString("argument 1 in numberFieldLabeled (arg list 1), which corresponds to parameter label', does not have " + 
                                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                                curarg++;
                                                                                                // End argument processing
                                                                                                setModuleName("stobjectdraw");
                                                                                                var returnTarget = invocationCount;
                                                                                                invocationCount++;
                                                                                                var obj5793 = Grace_allocObject(null, "numberFieldLabeled");
                                                                                                obj5793.definitionModule = "stobjectdraw";
                                                                                                obj5793.definitionLine = 2121;
                                                                                                var inho5793 = inheritingObject;
                                                                                                while (inho5793.superobj) inho5793 = inho5793.superobj;
                                                                                                inho5793.superobj = obj5793;
                                                                                                obj5793.data = inheritingObject.data;
                                                                                                if (inheritingObject.hasOwnProperty('_value'))
                                                                                                  obj5793._value = inheritingObject._value;
                                                                                                obj5793.outer = this;
                                                                                                var reader_stobjectdraw_outer5794 = function() {
                                                                                                  return this.outer;
                                                                                                };
                                                                                                obj5793.methods["outer"] = reader_stobjectdraw_outer5794;
                                                                                                var obj_init_5793 = function() {
                                                                                                  var origSuperDepth = superDepth;
                                                                                                  superDepth = obj5793;
                                                                                                  var func5795 = function(argcv) {    // method number
                                                                                                    var returnTarget = invocationCount;
                                                                                                    invocationCount++;
                                                                                                    var curarg = 1;
                                                                                                    if (argcv[0] !== 0)
                                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for number"));
                                                                                                    setModuleName("stobjectdraw");
                                                                                                    setLineNumber(2128);    // compilenode call
                                                                                                    onSelf = true;
                                                                                                    var call5796 = callmethodChecked(this, "element", [0]);
                                                                                                    var call5797 = callmethodChecked(call5796, "value", [0]);
                                                                                                    var call5798 = callmethodChecked(call5797, "asNumber", [0]);
                                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match", [1], call5798)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("result of method number does not have " + 
                                                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                    return call5798;
                                                                                                  };
                                                                                                  func5795.paramCounts = [0];
                                                                                                  obj5793.methods["number"] = func5795;
                                                                                                  func5795.definitionLine = 2127;
                                                                                                  func5795.definitionModule = "stobjectdraw";
                                                                                                  var func5799 = function(argcv) {    // method number:=(1)
                                                                                                    var returnTarget = invocationCount;
                                                                                                    invocationCount++;
                                                                                                    var curarg = 1;
                                                                                                    var var_value = arguments[curarg];
                                                                                                    curarg++;
                                                                                                    if (argcv[0] !== 1)
                                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for number:=(1)"));
                                                                                                    // Start argument checking
                                                                                                    curarg = 1;
                                                                                                    setLineNumber(2132);    // compilenode identifier
                                                                                                    if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("argument 1 in number:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                    curarg++;
                                                                                                    // End argument checking
                                                                                                    setModuleName("stobjectdraw");
                                                                                                    setLineNumber(2133);    // compilenode call
                                                                                                    onSelf = true;
                                                                                                    var call5800 = callmethodChecked(this, "element", [0]);
                                                                                                    var call5801 = callmethodChecked(call5800, "value:=", [1], var_value);
                                                                                                    if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5801)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("result of method number:=(1) does not have " + 
                                                                                                                callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                    return call5801;
                                                                                                  };
                                                                                                  func5799.paramTypes = [];
                                                                                                  func5799.paramTypes.push([type_Number, "value"]);
                                                                                                  func5799.paramCounts = [1];
                                                                                                  obj5793.methods["number:="] = func5799;
                                                                                                  func5799.definitionLine = 2132;
                                                                                                  func5799.definitionModule = "stobjectdraw";
                                                                                                  var func5802 = function(argcv) {    // method asString
                                                                                                    var returnTarget = invocationCount;
                                                                                                    invocationCount++;
                                                                                                    var curarg = 1;
                                                                                                    if (argcv[0] !== 0)
                                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                    setModuleName("stobjectdraw");
                                                                                                    var if5803 = GraceDone;
                                                                                                    setLineNumber(2138);    // compilenode string
                                                                                                    var string5804 = new GraceString("");
                                                                                                    onSelf = true;
                                                                                                    var call5806 = callmethodChecked(this, "label", [0]);
                                                                                                    var opresult5808 = callmethodChecked(call5806, "==", [1], string5804);
                                                                                                    if (Grace_isTrue(opresult5808)) {
                                                                                                      setLineNumber(2139);    // compilenode string
                                                                                                      var string5809 = new GraceString("");
                                                                                                      onSelf = true;
                                                                                                      var call5811 = callmethodChecked(this, "number", [0]);
                                                                                                      var string5813 = new GraceString("a number field holding ");
                                                                                                      var opresult5815 = callmethodChecked(string5813, "++", [1], call5811);
                                                                                                      var opresult5817 = callmethodChecked(opresult5815, "++", [1], string5809);
                                                                                                      if5803 = opresult5817;
                                                                                                    } else {
                                                                                                      setLineNumber(2141);    // compilenode string
                                                                                                      var string5818 = new GraceString("");
                                                                                                      onSelf = true;
                                                                                                      var call5820 = callmethodChecked(this, "number", [0]);
                                                                                                      var string5822 = new GraceString(" holding ");
                                                                                                      onSelf = true;
                                                                                                      var call5824 = callmethodChecked(this, "label", [0]);
                                                                                                      var string5826 = new GraceString("a number field labeled: ");
                                                                                                      var opresult5828 = callmethodChecked(string5826, "++", [1], call5824);
                                                                                                      var opresult5830 = callmethodChecked(opresult5828, "++", [1], string5822);
                                                                                                      var opresult5832 = callmethodChecked(opresult5830, "++", [1], call5820);
                                                                                                      var opresult5834 = callmethodChecked(opresult5832, "++", [1], string5818);
                                                                                                      if5803 = opresult5834;
                                                                                                    }
                                                                                                    setLineNumber(2138);    // return value
                                                                                                    if (!Grace_isTrue(callmethod(var_String, "match", [1], if5803)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("result of method asString does not have " + 
                                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                                    return if5803;
                                                                                                  };
                                                                                                  func5802.paramCounts = [0];
                                                                                                  obj5793.methods["asString"] = func5802;
                                                                                                  func5802.definitionLine = 2137;
                                                                                                  func5802.definitionModule = "stobjectdraw";
                                                                                                  setLineNumber(2124);    // compilenode string
                                                                                                  var string5835 = new GraceString("number");
                                                                                                  var call5836 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                  onOuter = true;
                                                                                                  onSelf = true;
                                                                                                  var call5837 = callmethodChecked(call5836, "fieldOfType()labeled()object", [1, 1, 1], string5835, var_label__39__, this);
                                                                                                  obj5793.superobj = call5837;
                                                                                                  if (call5837.data) obj5793.data = call5837.data;
                                                                                                  if (call5837.hasOwnProperty('_value'))
                                                                                                      obj5793._value = call5837._value;
                                                                                                  superDepth = origSuperDepth;
                                                                                                };
                                                                                                obj_init_5793.apply(inheritingObject, []);
                                                                                                return obj5793;
                                                                                                };
                                                                                                func5792.paramTypes = [];
                                                                                                func5792.paramTypes.push([type_String, "label'"]);
                                                                                                this.methods["numberFieldLabeled()object"] = func5792;
                                                                                              setLineNumber(2146);    // compilenode method
                                                                                              var func5838 = function(argcv) {    // method numberFieldUnlabeled
                                                                                                var returnTarget = invocationCount;
                                                                                                invocationCount++;
                                                                                                var curarg = 1;
                                                                                                if (argcv[0] !== 0)
                                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for numberFieldUnlabeled"));
                                                                                                setModuleName("stobjectdraw");
                                                                                                var obj5839 = Grace_allocObject(null, "stobjectdraw.numberFieldUnlabeled");
                                                                                                obj5839.definitionModule = "stobjectdraw";
                                                                                                obj5839.definitionLine = 2146;
                                                                                                obj5839.outer = this;
                                                                                                var reader_stobjectdraw_outer5840 = function() {
                                                                                                  return this.outer;
                                                                                                };
                                                                                                obj5839.methods["outer"] = reader_stobjectdraw_outer5840;
                                                                                                var obj_init_5839 = function() {
                                                                                                  var origSuperDepth = superDepth;
                                                                                                  superDepth = obj5839;
                                                                                                  setLineNumber(2148);    // compilenode string
                                                                                                  var string5841 = new GraceString("");
                                                                                                  var call5842 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                  onOuter = true;
                                                                                                  onSelf = true;
                                                                                                  var call5843 = callmethodChecked(call5842, "numberFieldLabeled()object", [1, 1], string5841, this);
                                                                                                  obj5839.superobj = call5843;
                                                                                                  if (call5843.data) obj5839.data = call5843.data;
                                                                                                  if (call5843.hasOwnProperty('_value'))
                                                                                                      obj5839._value = call5843._value;
                                                                                                  superDepth = origSuperDepth;
                                                                                                };
                                                                                                obj_init_5839.apply(obj5839, []);
                                                                                                setLineNumber(2146);    // return value
                                                                                                if (!Grace_isTrue(callmethod(var_NumberField, "match", [1], obj5839)))
                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                        new GraceString("result of method numberFieldUnlabeled does not have " + 
                                                                                                            callmethod(var_NumberField, "asString", [0])._value + "."));
                                                                                                return obj5839;
                                                                                              };
                                                                                              func5838.paramCounts = [0];
                                                                                              this.methods["numberFieldUnlabeled"] = func5838;
                                                                                              func5838.definitionLine = 2146;
                                                                                              func5838.definitionModule = "stobjectdraw";
                                                                                                var func5844 = function(argcv) {    // method numberFieldUnlabeled()object
                                                                                                  var curarg = 1;
                                                                                                  var inheritingObject = arguments[curarg++];
                                                                                                  // Start argument processing
                                                                                                  curarg = 1;
                                                                                                  // End argument processing
                                                                                                  setModuleName("stobjectdraw");
                                                                                                  var returnTarget = invocationCount;
                                                                                                  invocationCount++;
                                                                                                  var obj5845 = Grace_allocObject(null, "numberFieldUnlabeled");
                                                                                                  obj5845.definitionModule = "stobjectdraw";
                                                                                                  obj5845.definitionLine = 2146;
                                                                                                  var inho5845 = inheritingObject;
                                                                                                  while (inho5845.superobj) inho5845 = inho5845.superobj;
                                                                                                  inho5845.superobj = obj5845;
                                                                                                  obj5845.data = inheritingObject.data;
                                                                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                                                                    obj5845._value = inheritingObject._value;
                                                                                                  obj5845.outer = this;
                                                                                                  var reader_stobjectdraw_outer5846 = function() {
                                                                                                    return this.outer;
                                                                                                  };
                                                                                                  obj5845.methods["outer"] = reader_stobjectdraw_outer5846;
                                                                                                  var obj_init_5845 = function() {
                                                                                                    var origSuperDepth = superDepth;
                                                                                                    superDepth = obj5845;
                                                                                                    setLineNumber(2148);    // compilenode string
                                                                                                    var string5847 = new GraceString("");
                                                                                                    var call5848 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                    onOuter = true;
                                                                                                    onSelf = true;
                                                                                                    var call5849 = callmethodChecked(call5848, "numberFieldLabeled()object", [1, 1], string5847, this);
                                                                                                    obj5845.superobj = call5849;
                                                                                                    if (call5849.data) obj5845.data = call5849.data;
                                                                                                    if (call5849.hasOwnProperty('_value'))
                                                                                                        obj5845._value = call5849._value;
                                                                                                    superDepth = origSuperDepth;
                                                                                                  };
                                                                                                  obj_init_5845.apply(inheritingObject, []);
                                                                                                  return obj5845;
                                                                                                  };
                                                                                                  this.methods["numberFieldUnlabeled()object"] = func5844;
                                                                                                setLineNumber(2161);    // compilenode method
                                                                                                var func5850 = function(argcv) {    // method selectBoxOptionsFrom(1)labeled(1)
                                                                                                  var returnTarget = invocationCount;
                                                                                                  invocationCount++;
                                                                                                  var curarg = 1;
                                                                                                  var var_options = arguments[curarg];
                                                                                                  curarg++;
                                                                                                  if (argcv[0] !== 1)
                                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selectBoxOptionsFrom (arg list 1) of selectBoxOptionsFrom(1)labeled(1)"));
                                                                                                  var var_label__39__ = arguments[curarg];
                                                                                                  curarg++;
                                                                                                  if (argcv[1] !== 1)
                                                                                                    throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labeled (arg list 2) of selectBoxOptionsFrom(1)labeled(1)"));
                                                                                                  // Start argument checking
                                                                                                  curarg = 1;
                                                                                                  onSelf = true;
                                                                                                  var call5851 = callmethodChecked(this, "Sequence", [0]);
                                                                                                  if (!Grace_isTrue(callmethod(call5851, "match",  [1], arguments[curarg])))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("argument 1 in selectBoxOptionsFrom (arg list 1), which corresponds to parameter options, does not have " + 
                                                                                                              callmethod(call5851, "asString", [0])._value + "."));
                                                                                                  curarg++;
                                                                                                  if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter label', does not have " + 
                                                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                                                  curarg++;
                                                                                                  // End argument checking
                                                                                                  setModuleName("stobjectdraw");
                                                                                                  var obj5852 = Grace_allocObject(null, "stobjectdraw.selectBoxOptionsFrom()labeled");
                                                                                                  obj5852.definitionModule = "stobjectdraw";
                                                                                                  obj5852.definitionLine = 2161;
                                                                                                  obj5852.outer = this;
                                                                                                  var reader_stobjectdraw_outer5853 = function() {
                                                                                                    return this.outer;
                                                                                                  };
                                                                                                  obj5852.methods["outer"] = reader_stobjectdraw_outer5853;
                                                                                                  var obj_init_5852 = function() {
                                                                                                    var origSuperDepth = superDepth;
                                                                                                    superDepth = obj5852;
                                                                                                    var func5854 = function(argcv) {    // method labelElement
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var curarg = 1;
                                                                                                      if (argcv[0] !== 0)
                                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labelElement"));
                                                                                                      setModuleName("stobjectdraw");
                                                                                                      setLineNumber(2172);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5855 = callmethodChecked(this, "labeler", [0]);
                                                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call5855)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("result of method labelElement does not have " + 
                                                                                                                  callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                                      return call5855;
                                                                                                    };
                                                                                                    func5854.paramCounts = [0];
                                                                                                    obj5852.methods["labelElement"] = func5854;
                                                                                                    func5854.definitionLine = 2171;
                                                                                                    func5854.definitionModule = "stobjectdraw";
                                                                                                    var func5856 = function(argcv) {    // method selected
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var curarg = 1;
                                                                                                      if (argcv[0] !== 0)
                                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selected"));
                                                                                                      setModuleName("stobjectdraw");
                                                                                                      setLineNumber(2186);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5857 = callmethodChecked(this, "element", [0]);
                                                                                                      var call5858 = callmethodChecked(call5857, "value", [0]);
                                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], call5858)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("result of method selected does not have " + 
                                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                                      return call5858;
                                                                                                    };
                                                                                                    func5856.paramCounts = [0];
                                                                                                    obj5852.methods["selected"] = func5856;
                                                                                                    func5856.definitionLine = 2185;
                                                                                                    func5856.definitionModule = "stobjectdraw";
                                                                                                    var func5859 = function(argcv) {    // method selected:=(1)
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var curarg = 1;
                                                                                                      var var_value = arguments[curarg];
                                                                                                      curarg++;
                                                                                                      if (argcv[0] !== 1)
                                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selected:=(1)"));
                                                                                                      // Start argument checking
                                                                                                      curarg = 1;
                                                                                                      setLineNumber(2190);    // compilenode identifier
                                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("argument 1 in selected:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                                      curarg++;
                                                                                                      // End argument checking
                                                                                                      setModuleName("stobjectdraw");
                                                                                                      setLineNumber(2191);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5860 = callmethodChecked(this, "element", [0]);
                                                                                                      var call5861 = callmethodChecked(call5860, "value:=", [1], var_value);
                                                                                                      if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5861)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("result of method selected:=(1) does not have " + 
                                                                                                                  callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                      return call5861;
                                                                                                    };
                                                                                                    func5859.paramTypes = [];
                                                                                                    func5859.paramTypes.push([type_String, "value"]);
                                                                                                    func5859.paramCounts = [1];
                                                                                                    obj5852.methods["selected:="] = func5859;
                                                                                                    func5859.definitionLine = 2190;
                                                                                                    func5859.definitionModule = "stobjectdraw";
                                                                                                    var func5862 = function(argcv) {    // method asString
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var curarg = 1;
                                                                                                      if (argcv[0] !== 0)
                                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                      setModuleName("stobjectdraw");
                                                                                                      var if5863 = GraceDone;
                                                                                                      setLineNumber(2196);    // compilenode string
                                                                                                      var string5864 = new GraceString("");
                                                                                                      onSelf = true;
                                                                                                      var call5866 = callmethodChecked(this, "label", [0]);
                                                                                                      var opresult5868 = callmethodChecked(call5866, "==", [1], string5864);
                                                                                                      if (Grace_isTrue(opresult5868)) {
                                                                                                        setLineNumber(2197);    // compilenode string
                                                                                                        var string5869 = new GraceString("a select box");
                                                                                                        if5863 = string5869;
                                                                                                      } else {
                                                                                                        setLineNumber(2199);    // compilenode string
                                                                                                        var string5870 = new GraceString("");
                                                                                                        onSelf = true;
                                                                                                        var call5872 = callmethodChecked(this, "label", [0]);
                                                                                                        var string5874 = new GraceString("a select box labeled: ");
                                                                                                        var opresult5876 = callmethodChecked(string5874, "++", [1], call5872);
                                                                                                        var opresult5878 = callmethodChecked(opresult5876, "++", [1], string5870);
                                                                                                        if5863 = opresult5878;
                                                                                                      }
                                                                                                      setLineNumber(2196);    // return value
                                                                                                      if (!Grace_isTrue(callmethod(var_String, "match", [1], if5863)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("result of method asString does not have " + 
                                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                                      return if5863;
                                                                                                    };
                                                                                                    func5862.paramCounts = [0];
                                                                                                    obj5852.methods["asString"] = func5862;
                                                                                                    func5862.definitionLine = 2195;
                                                                                                    func5862.definitionModule = "stobjectdraw";
                                                                                                    setLineNumber(2165);    // compilenode string
                                                                                                    var string5879 = new GraceString("select");
                                                                                                    var call5880 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                    onOuter = true;
                                                                                                    onSelf = true;
                                                                                                    var call5881 = callmethodChecked(call5880, "labeledWidgetOfElementType()labeled()object", [1, 1, 1], string5879, var_label__39__, this);
                                                                                                    obj5852.superobj = call5881;
                                                                                                    if (call5881.data) obj5852.data = call5881.data;
                                                                                                    if (call5881.hasOwnProperty('_value'))
                                                                                                        obj5852._value = call5881._value;
                                                                                                    setLineNumber(2167);    // compilenode string
                                                                                                    var string5882 = new GraceString("option");
                                                                                                    var call5883 = callmethodChecked(var_document, "createElement", [1], string5882);
                                                                                                    obj5852.data["labeler"] = call5883;
                                                                                                    var reader_stobjectdraw_labeler5884 = function() {
                                                                                                      return this.data["labeler"];
                                                                                                    };
                                                                                                    reader_stobjectdraw_labeler5884.def = true;
                                                                                                    reader_stobjectdraw_labeler5884.confidential = true;
                                                                                                    obj5852.methods["labeler"] = reader_stobjectdraw_labeler5884;
                                                                                                    if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call5883)))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("value of def 'labeler' is not of type Foreign"));
                                                                                                    setLineNumber(2168);    // compilenode string
                                                                                                    var string5885 = new GraceString("");
                                                                                                    onSelf = true;
                                                                                                    var call5886 = callmethodChecked(this, "labeler", [0]);
                                                                                                    var call5887 = callmethodChecked(call5886, "value:=", [1], string5885);
                                                                                                    setLineNumber(2175);    // compilenode call
                                                                                                    onSelf = true;
                                                                                                    var call5888 = callmethodChecked(this, "labeler", [0]);
                                                                                                    onSelf = true;
                                                                                                    var call5889 = callmethodChecked(this, "element", [0]);
                                                                                                    var call5890 = callmethodChecked(call5889, "appendChild", [1], call5888);
                                                                                                    setLineNumber(2177);    // compilenode block
                                                                                                    var block5891 = new GraceBlock(this, 2177, 1);
                                                                                                    setLineNumber(0);    // compilenode string
                                                                                                    var string5892 = new GraceString("name");
                                                                                                    var call5893 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                                                                                    var call5894 = callmethodChecked(call5893, "new", [1], string5892);
                                                                                                    var call5895 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                                                                                    var call5896 = callmethodChecked(call5895, "new", [2], call5894, var_String);
                                                                                                    block5891.pattern = call5896;
                                                                                                    setLineNumber(2177);    // compilenode identifier
                                                                                                    block5891.paramTypes = [var_String];
                                                                                                    block5891.real = function(var_name) {
                                                                                                      setLineNumber(2178);    // compilenode string
                                                                                                      var string5897 = new GraceString("option");
                                                                                                      var call5898 = callmethodChecked(var_document, "createElement", [1], string5897);
                                                                                                      var var_anOption = call5898;
                                                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], var_anOption)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'anOption' is not of type Foreign"));
                                                                                                      setLineNumber(2179);    // compilenode identifier
                                                                                                      var call5899 = callmethodChecked(var_anOption, "value:=", [1], var_name);
                                                                                                      setLineNumber(2180);    // compilenode identifier
                                                                                                      var call5900 = callmethodChecked(var_anOption, "textContent:=", [1], var_name);
                                                                                                      setLineNumber(2181);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5901 = callmethodChecked(this, "element", [0]);
                                                                                                      var call5902 = callmethodChecked(call5901, "appendChild", [1], var_anOption);
                                                                                                      return call5902;
                                                                                                    };
                                                                                                    var call5903 = callmethodChecked(var_prelude, "for()do", [1, 1], var_options, block5891);
                                                                                                    superDepth = origSuperDepth;
                                                                                                  };
                                                                                                  obj_init_5852.apply(obj5852, []);
                                                                                                  setLineNumber(2161);    // return value
                                                                                                  if (!Grace_isTrue(callmethod(var_Choice, "match", [1], obj5852)))
                                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                          new GraceString("result of method selectBoxOptionsFrom(1)labeled(1) does not have " + 
                                                                                                              callmethod(var_Choice, "asString", [0])._value + "."));
                                                                                                  return obj5852;
                                                                                                };
                                                                                                func5850.paramTypes = [];
                                                                                                func5850.paramTypes.push([]);
                                                                                                func5850.paramTypes.push([type_String, "label'"]);
                                                                                                func5850.confidential = true;
                                                                                                func5850.paramCounts = [1, 1];
                                                                                                this.methods["selectBoxOptionsFrom()labeled"] = func5850;
                                                                                                func5850.definitionLine = 2161;
                                                                                                func5850.definitionModule = "stobjectdraw";
                                                                                                  var func5904 = function(argcv) {    // method selectBoxOptionsFrom(1     )labeled(1     )()object
                                                                                                    var curarg = 1;
                                                                                                    var var_options = arguments[curarg];
                                                                                                    curarg++;
                                                                                                    var var_label__39__ = arguments[curarg];
                                                                                                    curarg++;
                                                                                                    var inheritingObject = arguments[curarg++];
                                                                                                    // Start argument processing
                                                                                                    curarg = 1;
                                                                                                    onSelf = true;
                                                                                                    var call5905 = callmethodChecked(this, "Sequence", [0]);
                                                                                                    if (!Grace_isTrue(callmethod(call5905, "match",  [1], arguments[curarg])))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("argument 1 in selectBoxOptionsFrom (arg list 1), which corresponds to parameter options, does not have " + 
                                                                                                                callmethod(call5905, "asString", [0])._value + "."));
                                                                                                    curarg++;
                                                                                                    if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("argument 1 in labeled (arg list 2), which corresponds to parameter label', does not have " + 
                                                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                                                    curarg++;
                                                                                                    // End argument processing
                                                                                                    setModuleName("stobjectdraw");
                                                                                                    var returnTarget = invocationCount;
                                                                                                    invocationCount++;
                                                                                                    var obj5906 = Grace_allocObject(null, "selectBoxOptionsFrom()labeled");
                                                                                                    obj5906.definitionModule = "stobjectdraw";
                                                                                                    obj5906.definitionLine = 2161;
                                                                                                    var inho5906 = inheritingObject;
                                                                                                    while (inho5906.superobj) inho5906 = inho5906.superobj;
                                                                                                    inho5906.superobj = obj5906;
                                                                                                    obj5906.data = inheritingObject.data;
                                                                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                                                                      obj5906._value = inheritingObject._value;
                                                                                                    obj5906.outer = this;
                                                                                                    var reader_stobjectdraw_outer5907 = function() {
                                                                                                      return this.outer;
                                                                                                    };
                                                                                                    obj5906.methods["outer"] = reader_stobjectdraw_outer5907;
                                                                                                    var obj_init_5906 = function() {
                                                                                                      var origSuperDepth = superDepth;
                                                                                                      superDepth = obj5906;
                                                                                                      var func5908 = function(argcv) {    // method labelElement
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for labelElement"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        setLineNumber(2172);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call5909 = callmethodChecked(this, "labeler", [0]);
                                                                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call5909)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("result of method labelElement does not have " + 
                                                                                                                    callmethod(var_Foreign, "asString", [0])._value + "."));
                                                                                                        return call5909;
                                                                                                      };
                                                                                                      func5908.paramCounts = [0];
                                                                                                      obj5906.methods["labelElement"] = func5908;
                                                                                                      func5908.definitionLine = 2171;
                                                                                                      func5908.definitionModule = "stobjectdraw";
                                                                                                      var func5910 = function(argcv) {    // method selected
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selected"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        setLineNumber(2186);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call5911 = callmethodChecked(this, "element", [0]);
                                                                                                        var call5912 = callmethodChecked(call5911, "value", [0]);
                                                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], call5912)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("result of method selected does not have " + 
                                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                                        return call5912;
                                                                                                      };
                                                                                                      func5910.paramCounts = [0];
                                                                                                      obj5906.methods["selected"] = func5910;
                                                                                                      func5910.definitionLine = 2185;
                                                                                                      func5910.definitionModule = "stobjectdraw";
                                                                                                      var func5913 = function(argcv) {    // method selected:=(1)
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        var var_value = arguments[curarg];
                                                                                                        curarg++;
                                                                                                        if (argcv[0] !== 1)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selected:=(1)"));
                                                                                                        // Start argument checking
                                                                                                        curarg = 1;
                                                                                                        setLineNumber(2190);    // compilenode identifier
                                                                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("argument 1 in selected:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                                        curarg++;
                                                                                                        // End argument checking
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        setLineNumber(2191);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call5914 = callmethodChecked(this, "element", [0]);
                                                                                                        var call5915 = callmethodChecked(call5914, "value:=", [1], var_value);
                                                                                                        if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5915)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("result of method selected:=(1) does not have " + 
                                                                                                                    callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                        return call5915;
                                                                                                      };
                                                                                                      func5913.paramTypes = [];
                                                                                                      func5913.paramTypes.push([type_String, "value"]);
                                                                                                      func5913.paramCounts = [1];
                                                                                                      obj5906.methods["selected:="] = func5913;
                                                                                                      func5913.definitionLine = 2190;
                                                                                                      func5913.definitionModule = "stobjectdraw";
                                                                                                      var func5916 = function(argcv) {    // method asString
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        var if5917 = GraceDone;
                                                                                                        setLineNumber(2196);    // compilenode string
                                                                                                        var string5918 = new GraceString("");
                                                                                                        onSelf = true;
                                                                                                        var call5920 = callmethodChecked(this, "label", [0]);
                                                                                                        var opresult5922 = callmethodChecked(call5920, "==", [1], string5918);
                                                                                                        if (Grace_isTrue(opresult5922)) {
                                                                                                          setLineNumber(2197);    // compilenode string
                                                                                                          var string5923 = new GraceString("a select box");
                                                                                                          if5917 = string5923;
                                                                                                        } else {
                                                                                                          setLineNumber(2199);    // compilenode string
                                                                                                          var string5924 = new GraceString("");
                                                                                                          onSelf = true;
                                                                                                          var call5926 = callmethodChecked(this, "label", [0]);
                                                                                                          var string5928 = new GraceString("a select box labeled: ");
                                                                                                          var opresult5930 = callmethodChecked(string5928, "++", [1], call5926);
                                                                                                          var opresult5932 = callmethodChecked(opresult5930, "++", [1], string5924);
                                                                                                          if5917 = opresult5932;
                                                                                                        }
                                                                                                        setLineNumber(2196);    // return value
                                                                                                        if (!Grace_isTrue(callmethod(var_String, "match", [1], if5917)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("result of method asString does not have " + 
                                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                                        return if5917;
                                                                                                      };
                                                                                                      func5916.paramCounts = [0];
                                                                                                      obj5906.methods["asString"] = func5916;
                                                                                                      func5916.definitionLine = 2195;
                                                                                                      func5916.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(2165);    // compilenode string
                                                                                                      var string5933 = new GraceString("select");
                                                                                                      var call5934 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                      onOuter = true;
                                                                                                      onSelf = true;
                                                                                                      var call5935 = callmethodChecked(call5934, "labeledWidgetOfElementType()labeled()object", [1, 1, 1], string5933, var_label__39__, this);
                                                                                                      obj5906.superobj = call5935;
                                                                                                      if (call5935.data) obj5906.data = call5935.data;
                                                                                                      if (call5935.hasOwnProperty('_value'))
                                                                                                          obj5906._value = call5935._value;
                                                                                                      setLineNumber(2167);    // compilenode string
                                                                                                      var string5936 = new GraceString("option");
                                                                                                      var call5937 = callmethodChecked(var_document, "createElement", [1], string5936);
                                                                                                      obj5906.data["labeler"] = call5937;
                                                                                                      var reader_stobjectdraw_labeler5938 = function() {
                                                                                                        return this.data["labeler"];
                                                                                                      };
                                                                                                      reader_stobjectdraw_labeler5938.def = true;
                                                                                                      reader_stobjectdraw_labeler5938.confidential = true;
                                                                                                      obj5906.methods["labeler"] = reader_stobjectdraw_labeler5938;
                                                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], call5937)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'labeler' is not of type Foreign"));
                                                                                                      setLineNumber(2168);    // compilenode string
                                                                                                      var string5939 = new GraceString("");
                                                                                                      onSelf = true;
                                                                                                      var call5940 = callmethodChecked(this, "labeler", [0]);
                                                                                                      var call5941 = callmethodChecked(call5940, "value:=", [1], string5939);
                                                                                                      setLineNumber(2175);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5942 = callmethodChecked(this, "labeler", [0]);
                                                                                                      onSelf = true;
                                                                                                      var call5943 = callmethodChecked(this, "element", [0]);
                                                                                                      var call5944 = callmethodChecked(call5943, "appendChild", [1], call5942);
                                                                                                      setLineNumber(2177);    // compilenode block
                                                                                                      var block5945 = new GraceBlock(this, 2177, 1);
                                                                                                      setLineNumber(0);    // compilenode string
                                                                                                      var string5946 = new GraceString("name");
                                                                                                      var call5947 = callmethodChecked(var_prelude, "VariablePattern", [0]);
                                                                                                      var call5948 = callmethodChecked(call5947, "new", [1], string5946);
                                                                                                      var call5949 = callmethodChecked(var_prelude, "AndPattern", [0]);
                                                                                                      var call5950 = callmethodChecked(call5949, "new", [2], call5948, var_String);
                                                                                                      block5945.pattern = call5950;
                                                                                                      setLineNumber(2177);    // compilenode identifier
                                                                                                      block5945.paramTypes = [var_String];
                                                                                                      block5945.real = function(var_name) {
                                                                                                        setLineNumber(2178);    // compilenode string
                                                                                                        var string5951 = new GraceString("option");
                                                                                                        var call5952 = callmethodChecked(var_document, "createElement", [1], string5951);
                                                                                                        var var_anOption = call5952;
                                                                                                        if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], var_anOption)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'anOption' is not of type Foreign"));
                                                                                                        setLineNumber(2179);    // compilenode identifier
                                                                                                        var call5953 = callmethodChecked(var_anOption, "value:=", [1], var_name);
                                                                                                        setLineNumber(2180);    // compilenode identifier
                                                                                                        var call5954 = callmethodChecked(var_anOption, "textContent:=", [1], var_name);
                                                                                                        setLineNumber(2181);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call5955 = callmethodChecked(this, "element", [0]);
                                                                                                        var call5956 = callmethodChecked(call5955, "appendChild", [1], var_anOption);
                                                                                                        return call5956;
                                                                                                      };
                                                                                                      var call5957 = callmethodChecked(var_prelude, "for()do", [1, 1], var_options, block5945);
                                                                                                      superDepth = origSuperDepth;
                                                                                                    };
                                                                                                    obj_init_5906.apply(inheritingObject, []);
                                                                                                    return obj5906;
                                                                                                    };
                                                                                                    func5904.paramTypes = [];
                                                                                                    func5904.paramTypes.push([]);
                                                                                                    func5904.paramTypes.push([type_String, "label'"]);
                                                                                                    func5904.confidential = true;
                                                                                                    this.methods["selectBoxOptionsFrom()labeled()object"] = func5904;
                                                                                                  setLineNumber(2204);    // compilenode method
                                                                                                  var func5958 = function(argcv) {    // method selectBoxOptionsFrom(1)
                                                                                                    var returnTarget = invocationCount;
                                                                                                    invocationCount++;
                                                                                                    var curarg = 1;
                                                                                                    var var_options = arguments[curarg];
                                                                                                    curarg++;
                                                                                                    if (argcv[0] !== 1)
                                                                                                      throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for selectBoxOptionsFrom(1)"));
                                                                                                    // Start argument checking
                                                                                                    curarg = 1;
                                                                                                    onSelf = true;
                                                                                                    var call5959 = callmethodChecked(this, "Sequence", [0]);
                                                                                                    if (!Grace_isTrue(callmethod(call5959, "match",  [1], arguments[curarg])))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("argument 1 in selectBoxOptionsFrom (arg list 1), which corresponds to parameter options, does not have " + 
                                                                                                                callmethod(call5959, "asString", [0])._value + "."));
                                                                                                    curarg++;
                                                                                                    // End argument checking
                                                                                                    setModuleName("stobjectdraw");
                                                                                                    var obj5960 = Grace_allocObject(null, "stobjectdraw.selectBoxOptionsFrom");
                                                                                                    obj5960.definitionModule = "stobjectdraw";
                                                                                                    obj5960.definitionLine = 2204;
                                                                                                    obj5960.outer = this;
                                                                                                    var reader_stobjectdraw_outer5961 = function() {
                                                                                                      return this.outer;
                                                                                                    };
                                                                                                    obj5960.methods["outer"] = reader_stobjectdraw_outer5961;
                                                                                                    var obj_init_5960 = function() {
                                                                                                      var origSuperDepth = superDepth;
                                                                                                      superDepth = obj5960;
                                                                                                      setLineNumber(2207);    // compilenode string
                                                                                                      var string5962 = new GraceString("");
                                                                                                      var call5963 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                      onOuter = true;
                                                                                                      onSelf = true;
                                                                                                      var call5964 = callmethodChecked(call5963, "selectBoxOptionsFrom()labeled()object", [1, 1, 1], var_options, string5962, this);
                                                                                                      obj5960.superobj = call5964;
                                                                                                      if (call5964.data) obj5960.data = call5964.data;
                                                                                                      if (call5964.hasOwnProperty('_value'))
                                                                                                          obj5960._value = call5964._value;
                                                                                                      setLineNumber(2208);    // compilenode call
                                                                                                      onSelf = true;
                                                                                                      var call5965 = callmethodChecked(this, "labelElement", [0]);
                                                                                                      onSelf = true;
                                                                                                      var call5966 = callmethodChecked(this, "element", [0]);
                                                                                                      var call5967 = callmethodChecked(call5966, "removeChild", [1], call5965);
                                                                                                      superDepth = origSuperDepth;
                                                                                                    };
                                                                                                    obj_init_5960.apply(obj5960, []);
                                                                                                    setLineNumber(2204);    // return value
                                                                                                    if (!Grace_isTrue(callmethod(var_Choice, "match", [1], obj5960)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("result of method selectBoxOptionsFrom(1) does not have " + 
                                                                                                                callmethod(var_Choice, "asString", [0])._value + "."));
                                                                                                    return obj5960;
                                                                                                  };
                                                                                                  func5958.paramCounts = [1];
                                                                                                  this.methods["selectBoxOptionsFrom"] = func5958;
                                                                                                  func5958.definitionLine = 2204;
                                                                                                  func5958.definitionModule = "stobjectdraw";
                                                                                                    var func5968 = function(argcv) {    // method selectBoxOptionsFrom(1     )()object
                                                                                                      var curarg = 1;
                                                                                                      var var_options = arguments[curarg];
                                                                                                      curarg++;
                                                                                                      var inheritingObject = arguments[curarg++];
                                                                                                      // Start argument processing
                                                                                                      curarg = 1;
                                                                                                      onSelf = true;
                                                                                                      var call5969 = callmethodChecked(this, "Sequence", [0]);
                                                                                                      if (!Grace_isTrue(callmethod(call5969, "match",  [1], arguments[curarg])))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("argument 1 in selectBoxOptionsFrom (arg list 1), which corresponds to parameter options, does not have " + 
                                                                                                                  callmethod(call5969, "asString", [0])._value + "."));
                                                                                                      curarg++;
                                                                                                      // End argument processing
                                                                                                      setModuleName("stobjectdraw");
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var obj5970 = Grace_allocObject(null, "selectBoxOptionsFrom");
                                                                                                      obj5970.definitionModule = "stobjectdraw";
                                                                                                      obj5970.definitionLine = 2204;
                                                                                                      var inho5970 = inheritingObject;
                                                                                                      while (inho5970.superobj) inho5970 = inho5970.superobj;
                                                                                                      inho5970.superobj = obj5970;
                                                                                                      obj5970.data = inheritingObject.data;
                                                                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                                                                        obj5970._value = inheritingObject._value;
                                                                                                      obj5970.outer = this;
                                                                                                      var reader_stobjectdraw_outer5971 = function() {
                                                                                                        return this.outer;
                                                                                                      };
                                                                                                      obj5970.methods["outer"] = reader_stobjectdraw_outer5971;
                                                                                                      var obj_init_5970 = function() {
                                                                                                        var origSuperDepth = superDepth;
                                                                                                        superDepth = obj5970;
                                                                                                        setLineNumber(2207);    // compilenode string
                                                                                                        var string5972 = new GraceString("");
                                                                                                        var call5973 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                        onOuter = true;
                                                                                                        onSelf = true;
                                                                                                        var call5974 = callmethodChecked(call5973, "selectBoxOptionsFrom()labeled()object", [1, 1, 1], var_options, string5972, this);
                                                                                                        obj5970.superobj = call5974;
                                                                                                        if (call5974.data) obj5970.data = call5974.data;
                                                                                                        if (call5974.hasOwnProperty('_value'))
                                                                                                            obj5970._value = call5974._value;
                                                                                                        setLineNumber(2208);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call5975 = callmethodChecked(this, "labelElement", [0]);
                                                                                                        onSelf = true;
                                                                                                        var call5976 = callmethodChecked(this, "element", [0]);
                                                                                                        var call5977 = callmethodChecked(call5976, "removeChild", [1], call5975);
                                                                                                        superDepth = origSuperDepth;
                                                                                                      };
                                                                                                      obj_init_5970.apply(inheritingObject, []);
                                                                                                      return obj5970;
                                                                                                      };
                                                                                                      this.methods["selectBoxOptionsFrom()object"] = func5968;
                                                                                                    setLineNumber(2226);    // compilenode method
                                                                                                    var func5978 = function(argcv) {    // method audioUrl(1)
                                                                                                      var returnTarget = invocationCount;
                                                                                                      invocationCount++;
                                                                                                      var curarg = 1;
                                                                                                      var var_source__39__ = arguments[curarg];
                                                                                                      curarg++;
                                                                                                      if (argcv[0] !== 1)
                                                                                                        throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for audioUrl(1)"));
                                                                                                      // Start argument checking
                                                                                                      curarg = 1;
                                                                                                      if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("argument 1 in audioUrl (arg list 1), which corresponds to parameter source', does not have " + 
                                                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                                                      curarg++;
                                                                                                      // End argument checking
                                                                                                      setModuleName("stobjectdraw");
                                                                                                      var obj5979 = Grace_allocObject(GraceObject, "stobjectdraw.audioUrl");
                                                                                                      obj5979.definitionModule = "stobjectdraw";
                                                                                                      obj5979.definitionLine = 2226;
                                                                                                      obj5979.outer = this;
                                                                                                      var reader_stobjectdraw_outer5980 = function() {
                                                                                                        return this.outer;
                                                                                                      };
                                                                                                      obj5979.methods["outer"] = reader_stobjectdraw_outer5980;
                                                                                                      var obj_init_5979 = function() {
                                                                                                        var origSuperDepth = superDepth;
                                                                                                        superDepth = obj5979;
                                                                                                        var func5981 = function(argcv) {    // method source
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for source"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          setLineNumber(2238);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5982 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5983 = callmethodChecked(call5982, "src", [0]);
                                                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], call5983)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method source does not have " + 
                                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                                          return call5983;
                                                                                                        };
                                                                                                        func5981.paramCounts = [0];
                                                                                                        obj5979.methods["source"] = func5981;
                                                                                                        func5981.definitionLine = 2237;
                                                                                                        func5981.definitionModule = "stobjectdraw";
                                                                                                        var func5984 = function(argcv) {    // method source:=(1)
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          var var_value = arguments[curarg];
                                                                                                          curarg++;
                                                                                                          if (argcv[0] !== 1)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for source:=(1)"));
                                                                                                          // Start argument checking
                                                                                                          curarg = 1;
                                                                                                          setLineNumber(2242);    // compilenode identifier
                                                                                                          if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("argument 1 in source:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                                          curarg++;
                                                                                                          // End argument checking
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          setLineNumber(2243);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5985 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5986 = callmethodChecked(call5985, "src:=", [1], var_value);
                                                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5986)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method source:=(1) does not have " + 
                                                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                          return call5986;
                                                                                                        };
                                                                                                        func5984.paramTypes = [];
                                                                                                        func5984.paramTypes.push([type_String, "value"]);
                                                                                                        func5984.paramCounts = [1];
                                                                                                        obj5979.methods["source:="] = func5984;
                                                                                                        func5984.definitionLine = 2242;
                                                                                                        func5984.definitionModule = "stobjectdraw";
                                                                                                        var func5987 = function(argcv) {    // method play
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for play"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          setLineNumber(2248);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5988 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5989 = callmethodChecked(call5988, "play", [0]);
                                                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5989)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method play does not have " + 
                                                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                          return call5989;
                                                                                                        };
                                                                                                        func5987.paramCounts = [0];
                                                                                                        obj5979.methods["play"] = func5987;
                                                                                                        func5987.definitionLine = 2247;
                                                                                                        func5987.definitionModule = "stobjectdraw";
                                                                                                        var func5990 = function(argcv) {    // method pause
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pause"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          setLineNumber(2253);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5991 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5992 = callmethodChecked(call5991, "pause", [0]);
                                                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5992)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method pause does not have " + 
                                                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                          return call5992;
                                                                                                        };
                                                                                                        func5990.paramCounts = [0];
                                                                                                        obj5979.methods["pause"] = func5990;
                                                                                                        func5990.definitionLine = 2252;
                                                                                                        func5990.definitionModule = "stobjectdraw";
                                                                                                        var func5993 = function(argcv) {    // method isLooping
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLooping"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          setLineNumber(2258);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5994 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5995 = callmethodChecked(call5994, "loop", [0]);
                                                                                                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call5995)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method isLooping does not have " + 
                                                                                                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                          return call5995;
                                                                                                        };
                                                                                                        func5993.paramCounts = [0];
                                                                                                        obj5979.methods["isLooping"] = func5993;
                                                                                                        func5993.definitionLine = 2257;
                                                                                                        func5993.definitionModule = "stobjectdraw";
                                                                                                        var func5996 = function(argcv) {    // method looping:=(1)
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          var var_value = arguments[curarg];
                                                                                                          curarg++;
                                                                                                          if (argcv[0] !== 1)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for looping:=(1)"));
                                                                                                          // Start argument checking
                                                                                                          curarg = 1;
                                                                                                          setLineNumber(2262);    // compilenode identifier
                                                                                                          if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("argument 1 in looping:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                          curarg++;
                                                                                                          // End argument checking
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          setLineNumber(2263);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call5997 = callmethodChecked(this, "element", [0]);
                                                                                                          var call5998 = callmethodChecked(call5997, "loop:=", [1], var_value);
                                                                                                          if (!Grace_isTrue(callmethod(var_Done, "match", [1], call5998)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method looping:=(1) does not have " + 
                                                                                                                      callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                          return call5998;
                                                                                                        };
                                                                                                        func5996.paramTypes = [];
                                                                                                        func5996.paramTypes.push([type_Boolean, "value"]);
                                                                                                        func5996.paramCounts = [1];
                                                                                                        obj5979.methods["looping:="] = func5996;
                                                                                                        func5996.definitionLine = 2262;
                                                                                                        func5996.definitionModule = "stobjectdraw";
                                                                                                        var func5999 = function(argcv) {    // method isEnded
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEnded"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          setLineNumber(2268);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call6000 = callmethodChecked(this, "element", [0]);
                                                                                                          var call6001 = callmethodChecked(call6000, "ended", [0]);
                                                                                                          if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call6001)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method isEnded does not have " + 
                                                                                                                      callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                          return call6001;
                                                                                                        };
                                                                                                        func5999.paramCounts = [0];
                                                                                                        obj5979.methods["isEnded"] = func5999;
                                                                                                        func5999.definitionLine = 2267;
                                                                                                        func5999.definitionModule = "stobjectdraw";
                                                                                                        var func6002 = function(argcv) {    // method asString
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          setLineNumber(2273);    // compilenode string
                                                                                                          var string6003 = new GraceString("");
                                                                                                          onSelf = true;
                                                                                                          var call6005 = callmethodChecked(this, "source", [0]);
                                                                                                          var string6007 = new GraceString("audio from ");
                                                                                                          var opresult6009 = callmethodChecked(string6007, "++", [1], call6005);
                                                                                                          var opresult6011 = callmethodChecked(opresult6009, "++", [1], string6003);
                                                                                                          if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult6011)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method asString does not have " + 
                                                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                                                          return opresult6011;
                                                                                                        };
                                                                                                        func6002.paramCounts = [0];
                                                                                                        obj5979.methods["asString"] = func6002;
                                                                                                        func6002.definitionLine = 2272;
                                                                                                        func6002.definitionModule = "stobjectdraw";
                                                                                                        setLineNumber(2228);    // compilenode string
                                                                                                        var string6012 = new GraceString("audio");
                                                                                                        var call6013 = callmethodChecked(var_document, "createElement", [1], string6012);
                                                                                                        obj5979.data["element"] = call6013;
                                                                                                        var reader_stobjectdraw_element6014 = function() {
                                                                                                          return this.data["element"];
                                                                                                        };
                                                                                                        reader_stobjectdraw_element6014.def = true;
                                                                                                        reader_stobjectdraw_element6014.confidential = true;
                                                                                                        obj5979.methods["element"] = reader_stobjectdraw_element6014;
                                                                                                        setLineNumber(2230);    // compilenode call
                                                                                                        onSelf = true;
                                                                                                        var call6015 = callmethodChecked(this, "element", [0]);
                                                                                                        var call6016 = callmethodChecked(call6015, "src:=", [1], var_source__39__);
                                                                                                        var if6017 = GraceDone;
                                                                                                        setLineNumber(2232);    // compilenode identifier
                                                                                                        var call6018 = callmethodChecked(var_dom, "window", [0]);
                                                                                                        var string6019 = new GraceString("graceRegisterAudio");
                                                                                                        var call6020 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], call6018, string6019);
                                                                                                        if (Grace_isTrue(call6020)) {
                                                                                                          setLineNumber(2233);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call6021 = callmethodChecked(this, "element", [0]);
                                                                                                          var call6022 = callmethodChecked(var_dom, "window", [0]);
                                                                                                          var call6023 = callmethodChecked(call6022, "graceRegisterAudio", [1], call6021);
                                                                                                          if6017 = call6023;
                                                                                                        }
                                                                                                        superDepth = origSuperDepth;
                                                                                                      };
                                                                                                      obj_init_5979.apply(obj5979, []);
                                                                                                      setLineNumber(2226);    // return value
                                                                                                      if (!Grace_isTrue(callmethod(var_Audio, "match", [1], obj5979)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("result of method audioUrl(1) does not have " + 
                                                                                                                  callmethod(var_Audio, "asString", [0])._value + "."));
                                                                                                      return obj5979;
                                                                                                    };
                                                                                                    func5978.paramTypes = [];
                                                                                                    func5978.paramTypes.push([type_String, "source'"]);
                                                                                                    func5978.paramCounts = [1];
                                                                                                    this.methods["audioUrl"] = func5978;
                                                                                                    func5978.definitionLine = 2226;
                                                                                                    func5978.definitionModule = "stobjectdraw";
                                                                                                      var func6024 = function(argcv) {    // method audioUrl(1     )()object
                                                                                                        var curarg = 1;
                                                                                                        var var_source__39__ = arguments[curarg];
                                                                                                        curarg++;
                                                                                                        var inheritingObject = arguments[curarg++];
                                                                                                        // Start argument processing
                                                                                                        curarg = 1;
                                                                                                        if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("argument 1 in audioUrl (arg list 1), which corresponds to parameter source', does not have " + 
                                                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                                                        curarg++;
                                                                                                        // End argument processing
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var obj6025 = Grace_allocObject(GraceObject, "audioUrl");
                                                                                                        obj6025.definitionModule = "stobjectdraw";
                                                                                                        obj6025.definitionLine = 2226;
                                                                                                        var inho6025 = inheritingObject;
                                                                                                        while (inho6025.superobj) inho6025 = inho6025.superobj;
                                                                                                        inho6025.superobj = obj6025;
                                                                                                        obj6025.data = inheritingObject.data;
                                                                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                                                                          obj6025._value = inheritingObject._value;
                                                                                                        obj6025.outer = this;
                                                                                                        var reader_stobjectdraw_outer6026 = function() {
                                                                                                          return this.outer;
                                                                                                        };
                                                                                                        obj6025.methods["outer"] = reader_stobjectdraw_outer6026;
                                                                                                        var obj_init_6025 = function() {
                                                                                                          var origSuperDepth = superDepth;
                                                                                                          superDepth = obj6025;
                                                                                                          var func6027 = function(argcv) {    // method source
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for source"));
                                                                                                            setModuleName("stobjectdraw");
                                                                                                            setLineNumber(2238);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6028 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6029 = callmethodChecked(call6028, "src", [0]);
                                                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], call6029)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method source does not have " + 
                                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                                            return call6029;
                                                                                                          };
                                                                                                          func6027.paramCounts = [0];
                                                                                                          obj6025.methods["source"] = func6027;
                                                                                                          func6027.definitionLine = 2237;
                                                                                                          func6027.definitionModule = "stobjectdraw";
                                                                                                          var func6030 = function(argcv) {    // method source:=(1)
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            var var_value = arguments[curarg];
                                                                                                            curarg++;
                                                                                                            if (argcv[0] !== 1)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for source:=(1)"));
                                                                                                            // Start argument checking
                                                                                                            curarg = 1;
                                                                                                            setLineNumber(2242);    // compilenode identifier
                                                                                                            if (!Grace_isTrue(callmethod(var_String, "match",  [1], arguments[curarg])))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("argument 1 in source:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                                            curarg++;
                                                                                                            // End argument checking
                                                                                                            setModuleName("stobjectdraw");
                                                                                                            setLineNumber(2243);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6031 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6032 = callmethodChecked(call6031, "src:=", [1], var_value);
                                                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call6032)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method source:=(1) does not have " + 
                                                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                            return call6032;
                                                                                                          };
                                                                                                          func6030.paramTypes = [];
                                                                                                          func6030.paramTypes.push([type_String, "value"]);
                                                                                                          func6030.paramCounts = [1];
                                                                                                          obj6025.methods["source:="] = func6030;
                                                                                                          func6030.definitionLine = 2242;
                                                                                                          func6030.definitionModule = "stobjectdraw";
                                                                                                          var func6033 = function(argcv) {    // method play
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for play"));
                                                                                                            setModuleName("stobjectdraw");
                                                                                                            setLineNumber(2248);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6034 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6035 = callmethodChecked(call6034, "play", [0]);
                                                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call6035)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method play does not have " + 
                                                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                            return call6035;
                                                                                                          };
                                                                                                          func6033.paramCounts = [0];
                                                                                                          obj6025.methods["play"] = func6033;
                                                                                                          func6033.definitionLine = 2247;
                                                                                                          func6033.definitionModule = "stobjectdraw";
                                                                                                          var func6036 = function(argcv) {    // method pause
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pause"));
                                                                                                            setModuleName("stobjectdraw");
                                                                                                            setLineNumber(2253);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6037 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6038 = callmethodChecked(call6037, "pause", [0]);
                                                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call6038)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method pause does not have " + 
                                                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                            return call6038;
                                                                                                          };
                                                                                                          func6036.paramCounts = [0];
                                                                                                          obj6025.methods["pause"] = func6036;
                                                                                                          func6036.definitionLine = 2252;
                                                                                                          func6036.definitionModule = "stobjectdraw";
                                                                                                          var func6039 = function(argcv) {    // method isLooping
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isLooping"));
                                                                                                            setModuleName("stobjectdraw");
                                                                                                            setLineNumber(2258);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6040 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6041 = callmethodChecked(call6040, "loop", [0]);
                                                                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call6041)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method isLooping does not have " + 
                                                                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                            return call6041;
                                                                                                          };
                                                                                                          func6039.paramCounts = [0];
                                                                                                          obj6025.methods["isLooping"] = func6039;
                                                                                                          func6039.definitionLine = 2257;
                                                                                                          func6039.definitionModule = "stobjectdraw";
                                                                                                          var func6042 = function(argcv) {    // method looping:=(1)
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            var var_value = arguments[curarg];
                                                                                                            curarg++;
                                                                                                            if (argcv[0] !== 1)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for looping:=(1)"));
                                                                                                            // Start argument checking
                                                                                                            curarg = 1;
                                                                                                            setLineNumber(2262);    // compilenode identifier
                                                                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match",  [1], arguments[curarg])))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("argument 1 in looping:= (arg list 1), which corresponds to parameter value, does not have " + 
                                                                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                            curarg++;
                                                                                                            // End argument checking
                                                                                                            setModuleName("stobjectdraw");
                                                                                                            setLineNumber(2263);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6043 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6044 = callmethodChecked(call6043, "loop:=", [1], var_value);
                                                                                                            if (!Grace_isTrue(callmethod(var_Done, "match", [1], call6044)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method looping:=(1) does not have " + 
                                                                                                                        callmethod(var_Done, "asString", [0])._value + "."));
                                                                                                            return call6044;
                                                                                                          };
                                                                                                          func6042.paramTypes = [];
                                                                                                          func6042.paramTypes.push([type_Boolean, "value"]);
                                                                                                          func6042.paramCounts = [1];
                                                                                                          obj6025.methods["looping:="] = func6042;
                                                                                                          func6042.definitionLine = 2262;
                                                                                                          func6042.definitionModule = "stobjectdraw";
                                                                                                          var func6045 = function(argcv) {    // method isEnded
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for isEnded"));
                                                                                                            setModuleName("stobjectdraw");
                                                                                                            setLineNumber(2268);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6046 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6047 = callmethodChecked(call6046, "ended", [0]);
                                                                                                            if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], call6047)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method isEnded does not have " + 
                                                                                                                        callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                            return call6047;
                                                                                                          };
                                                                                                          func6045.paramCounts = [0];
                                                                                                          obj6025.methods["isEnded"] = func6045;
                                                                                                          func6045.definitionLine = 2267;
                                                                                                          func6045.definitionModule = "stobjectdraw";
                                                                                                          var func6048 = function(argcv) {    // method asString
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                            setModuleName("stobjectdraw");
                                                                                                            setLineNumber(2273);    // compilenode string
                                                                                                            var string6049 = new GraceString("");
                                                                                                            onSelf = true;
                                                                                                            var call6051 = callmethodChecked(this, "source", [0]);
                                                                                                            var string6053 = new GraceString("audio from ");
                                                                                                            var opresult6055 = callmethodChecked(string6053, "++", [1], call6051);
                                                                                                            var opresult6057 = callmethodChecked(opresult6055, "++", [1], string6049);
                                                                                                            if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult6057)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method asString does not have " + 
                                                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                                                            return opresult6057;
                                                                                                          };
                                                                                                          func6048.paramCounts = [0];
                                                                                                          obj6025.methods["asString"] = func6048;
                                                                                                          func6048.definitionLine = 2272;
                                                                                                          func6048.definitionModule = "stobjectdraw";
                                                                                                          setLineNumber(2228);    // compilenode string
                                                                                                          var string6058 = new GraceString("audio");
                                                                                                          var call6059 = callmethodChecked(var_document, "createElement", [1], string6058);
                                                                                                          obj6025.data["element"] = call6059;
                                                                                                          var reader_stobjectdraw_element6060 = function() {
                                                                                                            return this.data["element"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_element6060.def = true;
                                                                                                          reader_stobjectdraw_element6060.confidential = true;
                                                                                                          obj6025.methods["element"] = reader_stobjectdraw_element6060;
                                                                                                          setLineNumber(2230);    // compilenode call
                                                                                                          onSelf = true;
                                                                                                          var call6061 = callmethodChecked(this, "element", [0]);
                                                                                                          var call6062 = callmethodChecked(call6061, "src:=", [1], var_source__39__);
                                                                                                          var if6063 = GraceDone;
                                                                                                          setLineNumber(2232);    // compilenode identifier
                                                                                                          var call6064 = callmethodChecked(var_dom, "window", [0]);
                                                                                                          var string6065 = new GraceString("graceRegisterAudio");
                                                                                                          var call6066 = callmethodChecked(var_dom, "doesObject()haveProperty", [1, 1], call6064, string6065);
                                                                                                          if (Grace_isTrue(call6066)) {
                                                                                                            setLineNumber(2233);    // compilenode call
                                                                                                            onSelf = true;
                                                                                                            var call6067 = callmethodChecked(this, "element", [0]);
                                                                                                            var call6068 = callmethodChecked(var_dom, "window", [0]);
                                                                                                            var call6069 = callmethodChecked(call6068, "graceRegisterAudio", [1], call6067);
                                                                                                            if6063 = call6069;
                                                                                                          }
                                                                                                          superDepth = origSuperDepth;
                                                                                                        };
                                                                                                        obj_init_6025.apply(inheritingObject, []);
                                                                                                        return obj6025;
                                                                                                        };
                                                                                                        func6024.paramTypes = [];
                                                                                                        func6024.paramTypes.push([type_String, "source'"]);
                                                                                                        this.methods["audioUrl()object"] = func6024;
                                                                                                      setLineNumber(13);    // compilenode num
                                                                                                      var var_frameRate = new GraceNum(30);
                                                                                                      setLineNumber(2233);    // compilenode method
                                                                                                      var func6070 = function(argcv) {    // method frameRate
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for frameRate"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // frameRate is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(13);    // compilenode identifier
                                                                                                        return var_frameRate;
                                                                                                      };
                                                                                                      func6070.paramCounts = [0];
                                                                                                      this.methods["frameRate"] = func6070;
                                                                                                      func6070.definitionLine = 2233;
                                                                                                      func6070.definitionModule = "stobjectdraw";
                                                                                                      this.methods["frameRate"].debug = "def";
                                                                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_frameRate)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'frameRate' is not of type Number"));
                                                                                                      setLineNumber(26);    // compilenode call
                                                                                                      var call6071 = callmethodChecked(var_prelude, "\u03c0", [0]);
                                                                                                      var var_pi = call6071;
                                                                                                      var func6072 = function(argcv) {    // method pi
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for pi"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // pi is a simple accessor - elide try ... catch
                                                                                                        return var_pi;
                                                                                                      };
                                                                                                      func6072.paramCounts = [0];
                                                                                                      this.methods["pi"] = func6072;
                                                                                                      func6072.definitionLine = 26;
                                                                                                      func6072.definitionModule = "stobjectdraw";
                                                                                                      this.methods["pi"].debug = "def";
                                                                                                      if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_pi)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'pi' is not of type Number"));
                                                                                                      setLineNumber(28);    // compilenode typedec
                                                                                                      // Type decl Foreign
                                                                                                      var var_Foreign = var_Unknown;
                                                                                                      setLineNumber(26);    // compilenode method
                                                                                                      var func6074 = function(argcv) {    // method Foreign
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Foreign"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Foreign is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(28);    // compilenode identifier
                                                                                                        return var_Foreign;
                                                                                                      };
                                                                                                      func6074.paramCounts = [0];
                                                                                                      this.methods["Foreign"] = func6074;
                                                                                                      func6074.definitionLine = 26;
                                                                                                      func6074.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(30);    // compilenode identifier
                                                                                                      var call6075 = callmethodChecked(var_dom, "document", [0]);
                                                                                                      var var_document = call6075;
                                                                                                      var func6076 = function(argcv) {    // method document
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for document"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // document is a simple accessor - elide try ... catch
                                                                                                        return var_document;
                                                                                                      };
                                                                                                      func6076.paramCounts = [0];
                                                                                                      this.methods["document"] = func6076;
                                                                                                      func6076.definitionLine = 30;
                                                                                                      func6076.definitionModule = "stobjectdraw";
                                                                                                      this.methods["document"].debug = "def";
                                                                                                      if (!Grace_isTrue(callmethod(var_Foreign, "match", [1], var_document)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'document' is not of type Foreign"));
                                                                                                      setLineNumber(34);    // compilenode typedec
                                                                                                      // Type decl Function
                                                                                                      var call6078 = callmethodChecked(var_prelude, "Block1", [0]);
                                                                                                      var var_Function = call6078;
                                                                                                      var func6079 = function(argcv) {    // method Function
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Function"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Function is a simple accessor - elide try ... catch
                                                                                                        return var_Function;
                                                                                                      };
                                                                                                      func6079.paramCounts = [0];
                                                                                                      this.methods["Function"] = func6079;
                                                                                                      func6079.definitionLine = 34;
                                                                                                      func6079.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(38);    // compilenode typedec
                                                                                                      // Type decl Function2
                                                                                                      var call6081 = callmethodChecked(var_prelude, "Block2", [0]);
                                                                                                      var var_Function2 = call6081;
                                                                                                      var func6082 = function(argcv) {    // method Function2
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Function2"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Function2 is a simple accessor - elide try ... catch
                                                                                                        return var_Function2;
                                                                                                      };
                                                                                                      func6082.paramCounts = [0];
                                                                                                      this.methods["Function2"] = func6082;
                                                                                                      func6082.definitionLine = 38;
                                                                                                      func6082.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(41);    // compilenode typedec
                                                                                                      // Type decl Procedure
                                                                                                      var call6084 = callmethodChecked(var_prelude, "Block1", [0]);
                                                                                                      var var_Procedure = call6084;
                                                                                                      var func6085 = function(argcv) {    // method Procedure
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Procedure"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Procedure is a simple accessor - elide try ... catch
                                                                                                        return var_Procedure;
                                                                                                      };
                                                                                                      func6085.paramCounts = [0];
                                                                                                      this.methods["Procedure"] = func6085;
                                                                                                      func6085.definitionLine = 41;
                                                                                                      func6085.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(46);    // compilenode typedec
                                                                                                      // Type decl Component
                                                                                                      //   Type literal 
                                                                                                      var type6087 = new GraceType("Component");
                                                                                                      type6087.typeMethods.push("element");
                                                                                                      type6087.typeMethods.push("width");
                                                                                                      type6087.typeMethods.push("height");
                                                                                                      type6087.typeMethods.push("size");
                                                                                                      type6087.typeMethods.push("onMouseClickDo");
                                                                                                      type6087.typeMethods.push("onMousePressDo");
                                                                                                      type6087.typeMethods.push("onMouseReleaseDo");
                                                                                                      type6087.typeMethods.push("onMouseMoveDo");
                                                                                                      type6087.typeMethods.push("onMouseDragDo");
                                                                                                      type6087.typeMethods.push("onMouseEnterDo");
                                                                                                      type6087.typeMethods.push("onMouseExitDo");
                                                                                                      type6087.typeMethods.push("onKeyTypeDo");
                                                                                                      type6087.typeMethods.push("onKeyPressDo");
                                                                                                      type6087.typeMethods.push("onKeyReleaseDo");
                                                                                                      type6087.typeMethods.push("isFlexible");
                                                                                                      type6087.typeMethods.push("flexible:=");
                                                                                                      var var_Component = type6087;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6088 = function(argcv) {    // method Component
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Component"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Component is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(46);    // compilenode identifier
                                                                                                        return var_Component;
                                                                                                      };
                                                                                                      func6088.paramCounts = [0];
                                                                                                      this.methods["Component"] = func6088;
                                                                                                      func6088.definitionLine = 41;
                                                                                                      func6088.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(103);    // compilenode typedec
                                                                                                      // Type decl Container
                                                                                                      //   Type literal 
                                                                                                      var type6090 = new GraceType("\u2039anon\u203a");
                                                                                                      type6090.typeMethods.push("size");
                                                                                                      type6090.typeMethods.push("at");
                                                                                                      type6090.typeMethods.push("at()put");
                                                                                                      type6090.typeMethods.push("append");
                                                                                                      type6090.typeMethods.push("prepend");
                                                                                                      type6090.typeMethods.push("do");
                                                                                                      type6090.typeMethods.push("arrangeHorizontal");
                                                                                                      type6090.typeMethods.push("arrangeVertical");
                                                                                                      var opresult6093 = callmethodChecked(var_Component, "&", [1], type6090);
                                                                                                      var var_Container = opresult6093;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6094 = function(argcv) {    // method Container
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Container"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Container is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(103);    // compilenode identifier
                                                                                                        return var_Container;
                                                                                                      };
                                                                                                      func6094.paramCounts = [0];
                                                                                                      this.methods["Container"] = func6094;
                                                                                                      func6094.definitionLine = 41;
                                                                                                      func6094.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(134);    // compilenode typedec
                                                                                                      // Type decl Application
                                                                                                      //   Type literal 
                                                                                                      var type6096 = new GraceType("\u2039anon\u203a");
                                                                                                      type6096.typeMethods.push("windowTitle");
                                                                                                      type6096.typeMethods.push("windowTitle:=");
                                                                                                      type6096.typeMethods.push("startApplication");
                                                                                                      type6096.typeMethods.push("stopApplication");
                                                                                                      var opresult6099 = callmethodChecked(var_Container, "&", [1], type6096);
                                                                                                      var var_Application = opresult6099;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6100 = function(argcv) {    // method Application
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Application"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Application is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(134);    // compilenode identifier
                                                                                                        return var_Application;
                                                                                                      };
                                                                                                      func6100.paramCounts = [0];
                                                                                                      this.methods["Application"] = func6100;
                                                                                                      func6100.definitionLine = 41;
                                                                                                      func6100.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(150);    // compilenode typedec
                                                                                                      // Type decl Graphic
                                                                                                      //   Type literal 
                                                                                                      var type6102 = new GraceType("Graphic");
                                                                                                      type6102.typeMethods.push("location");
                                                                                                      type6102.typeMethods.push("x");
                                                                                                      type6102.typeMethods.push("y");
                                                                                                      type6102.typeMethods.push("addToCanvas");
                                                                                                      type6102.typeMethods.push("removeFromCanvas");
                                                                                                      type6102.typeMethods.push("isVisible");
                                                                                                      type6102.typeMethods.push("visible:=");
                                                                                                      type6102.typeMethods.push("moveTo");
                                                                                                      type6102.typeMethods.push("moveBy");
                                                                                                      type6102.typeMethods.push("contains");
                                                                                                      type6102.typeMethods.push("overlaps");
                                                                                                      type6102.typeMethods.push("color:=");
                                                                                                      type6102.typeMethods.push("color");
                                                                                                      type6102.typeMethods.push("sendForward");
                                                                                                      type6102.typeMethods.push("sendBackward");
                                                                                                      type6102.typeMethods.push("sendToFront");
                                                                                                      type6102.typeMethods.push("sendToBack");
                                                                                                      var var_Graphic = type6102;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6103 = function(argcv) {    // method Graphic
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Graphic"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Graphic is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(150);    // compilenode identifier
                                                                                                        return var_Graphic;
                                                                                                      };
                                                                                                      func6103.paramCounts = [0];
                                                                                                      this.methods["Graphic"] = func6103;
                                                                                                      func6103.definitionLine = 41;
                                                                                                      func6103.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(208);    // compilenode typedec
                                                                                                      // Type decl DrawingCanvas
                                                                                                      //   Type literal 
                                                                                                      var type6105 = new GraceType("\u2039anon\u203a");
                                                                                                      type6105.typeMethods.push("startDrawing");
                                                                                                      type6105.typeMethods.push("add");
                                                                                                      type6105.typeMethods.push("remove");
                                                                                                      type6105.typeMethods.push("notifyRedraw");
                                                                                                      type6105.typeMethods.push("clear");
                                                                                                      type6105.typeMethods.push("sendToFront");
                                                                                                      type6105.typeMethods.push("sendToBack");
                                                                                                      type6105.typeMethods.push("sendForward");
                                                                                                      type6105.typeMethods.push("sendBackward");
                                                                                                      type6105.typeMethods.push("width");
                                                                                                      type6105.typeMethods.push("height");
                                                                                                      var opresult6108 = callmethodChecked(var_Component, "&", [1], type6105);
                                                                                                      var var_DrawingCanvas = opresult6108;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6109 = function(argcv) {    // method DrawingCanvas
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for DrawingCanvas"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // DrawingCanvas is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(208);    // compilenode identifier
                                                                                                        return var_DrawingCanvas;
                                                                                                      };
                                                                                                      func6109.paramCounts = [0];
                                                                                                      this.methods["DrawingCanvas"] = func6109;
                                                                                                      func6109.definitionLine = 41;
                                                                                                      func6109.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(245);    // compilenode typedec
                                                                                                      // Type decl GraphicApplication
                                                                                                      //   Type literal 
                                                                                                      var type6111 = new GraceType("\u2039anon\u203a");
                                                                                                      type6111.typeMethods.push("canvas");
                                                                                                      type6111.typeMethods.push("onMouseClick");
                                                                                                      type6111.typeMethods.push("onMousePress");
                                                                                                      type6111.typeMethods.push("onMouseRelease");
                                                                                                      type6111.typeMethods.push("onMouseMove");
                                                                                                      type6111.typeMethods.push("onMouseDrag");
                                                                                                      type6111.typeMethods.push("onMouseEnter");
                                                                                                      type6111.typeMethods.push("onMouseExit");
                                                                                                      type6111.typeMethods.push("startGraphics");
                                                                                                      var opresult6114 = callmethodChecked(var_Application, "&", [1], type6111);
                                                                                                      var var_GraphicApplication = opresult6114;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6115 = function(argcv) {    // method GraphicApplication
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for GraphicApplication"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // GraphicApplication is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(245);    // compilenode identifier
                                                                                                        return var_GraphicApplication;
                                                                                                      };
                                                                                                      func6115.paramCounts = [0];
                                                                                                      this.methods["GraphicApplication"] = func6115;
                                                                                                      func6115.definitionLine = 41;
                                                                                                      func6115.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(278);    // compilenode typedec
                                                                                                      // Type decl Graphic2D
                                                                                                      //   Type literal 
                                                                                                      var type6117 = new GraceType("\u2039anon\u203a");
                                                                                                      type6117.typeMethods.push("width");
                                                                                                      type6117.typeMethods.push("height");
                                                                                                      type6117.typeMethods.push("size");
                                                                                                      type6117.typeMethods.push("size:=");
                                                                                                      type6117.typeMethods.push("width:=");
                                                                                                      type6117.typeMethods.push("height:=");
                                                                                                      var opresult6120 = callmethodChecked(var_Graphic, "&", [1], type6117);
                                                                                                      var var_Graphic2D = opresult6120;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6121 = function(argcv) {    // method Graphic2D
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Graphic2D"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Graphic2D is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(278);    // compilenode identifier
                                                                                                        return var_Graphic2D;
                                                                                                      };
                                                                                                      func6121.paramCounts = [0];
                                                                                                      this.methods["Graphic2D"] = func6121;
                                                                                                      func6121.definitionLine = 41;
                                                                                                      func6121.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(292);    // compilenode typedec
                                                                                                      // Type decl Line
                                                                                                      //   Type literal 
                                                                                                      var type6123 = new GraceType("\u2039anon\u203a");
                                                                                                      type6123.typeMethods.push("start");
                                                                                                      type6123.typeMethods.push("end");
                                                                                                      type6123.typeMethods.push("start:=");
                                                                                                      type6123.typeMethods.push("end:=");
                                                                                                      type6123.typeMethods.push("setEndPoints");
                                                                                                      var opresult6126 = callmethodChecked(var_Graphic, "&", [1], type6123);
                                                                                                      var var_Line = opresult6126;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6127 = function(argcv) {    // method Line
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Line"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Line is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(292);    // compilenode identifier
                                                                                                        return var_Line;
                                                                                                      };
                                                                                                      func6127.paramCounts = [0];
                                                                                                      this.methods["Line"] = func6127;
                                                                                                      func6127.definitionLine = 41;
                                                                                                      func6127.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(304);    // compilenode typedec
                                                                                                      // Type decl Text
                                                                                                      //   Type literal 
                                                                                                      var type6129 = new GraceType("\u2039anon\u203a");
                                                                                                      type6129.typeMethods.push("contents");
                                                                                                      type6129.typeMethods.push("contents:=");
                                                                                                      type6129.typeMethods.push("width");
                                                                                                      type6129.typeMethods.push("fontSize");
                                                                                                      type6129.typeMethods.push("fontSize:=");
                                                                                                      var opresult6132 = callmethodChecked(var_Graphic, "&", [1], type6129);
                                                                                                      var var_Text = opresult6132;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6133 = function(argcv) {    // method Text
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Text"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Text is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(304);    // compilenode identifier
                                                                                                        return var_Text;
                                                                                                      };
                                                                                                      func6133.paramCounts = [0];
                                                                                                      this.methods["Text"] = func6133;
                                                                                                      func6133.definitionLine = 41;
                                                                                                      func6133.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(324);    // compilenode typedec
                                                                                                      // Type decl TextBox
                                                                                                      //   Type literal 
                                                                                                      var type6135 = new GraceType("\u2039anon\u203a");
                                                                                                      type6135.typeMethods.push("contents");
                                                                                                      type6135.typeMethods.push("contents:=");
                                                                                                      var opresult6138 = callmethodChecked(var_Component, "&", [1], type6135);
                                                                                                      var var_TextBox = opresult6138;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6139 = function(argcv) {    // method TextBox
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for TextBox"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // TextBox is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(324);    // compilenode identifier
                                                                                                        return var_TextBox;
                                                                                                      };
                                                                                                      func6139.paramCounts = [0];
                                                                                                      this.methods["TextBox"] = func6139;
                                                                                                      func6139.definitionLine = 41;
                                                                                                      func6139.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(333);    // compilenode typedec
                                                                                                      // Type decl Labeled
                                                                                                      //   Type literal 
                                                                                                      var type6141 = new GraceType("\u2039anon\u203a");
                                                                                                      type6141.typeMethods.push("label");
                                                                                                      type6141.typeMethods.push("label:=");
                                                                                                      var opresult6144 = callmethodChecked(var_Component, "&", [1], type6141);
                                                                                                      var var_Labeled = opresult6144;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6145 = function(argcv) {    // method Labeled
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Labeled"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Labeled is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(333);    // compilenode identifier
                                                                                                        return var_Labeled;
                                                                                                      };
                                                                                                      func6145.paramCounts = [0];
                                                                                                      this.methods["Labeled"] = func6145;
                                                                                                      func6145.definitionLine = 41;
                                                                                                      func6145.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(342);    // compilenode typedec
                                                                                                      // Type decl Button
                                                                                                      var var_Button = var_Labeled;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6147 = function(argcv) {    // method Button
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Button"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Button is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(342);    // compilenode identifier
                                                                                                        return var_Button;
                                                                                                      };
                                                                                                      func6147.paramCounts = [0];
                                                                                                      this.methods["Button"] = func6147;
                                                                                                      func6147.definitionLine = 41;
                                                                                                      func6147.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(345);    // compilenode typedec
                                                                                                      // Type decl Input
                                                                                                      //   Type literal 
                                                                                                      var type6149 = new GraceType("\u2039anon\u203a");
                                                                                                      type6149.typeMethods.push("onFocusDo");
                                                                                                      type6149.typeMethods.push("onBlurDo");
                                                                                                      type6149.typeMethods.push("onChangeDo");
                                                                                                      var opresult6152 = callmethodChecked(var_Labeled, "&", [1], type6149);
                                                                                                      var var_Input = opresult6152;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6153 = function(argcv) {    // method Input
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Input"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Input is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(345);    // compilenode identifier
                                                                                                        return var_Input;
                                                                                                      };
                                                                                                      func6153.paramCounts = [0];
                                                                                                      this.methods["Input"] = func6153;
                                                                                                      func6153.definitionLine = 41;
                                                                                                      func6153.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(359);    // compilenode typedec
                                                                                                      // Type decl TextField
                                                                                                      //   Type literal 
                                                                                                      var type6155 = new GraceType("\u2039anon\u203a");
                                                                                                      type6155.typeMethods.push("text");
                                                                                                      type6155.typeMethods.push("text:=");
                                                                                                      var opresult6158 = callmethodChecked(var_Input, "&", [1], type6155);
                                                                                                      var var_TextField = opresult6158;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6159 = function(argcv) {    // method TextField
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for TextField"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // TextField is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(359);    // compilenode identifier
                                                                                                        return var_TextField;
                                                                                                      };
                                                                                                      func6159.paramCounts = [0];
                                                                                                      this.methods["TextField"] = func6159;
                                                                                                      func6159.definitionLine = 41;
                                                                                                      func6159.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(368);    // compilenode typedec
                                                                                                      // Type decl NumberField
                                                                                                      //   Type literal 
                                                                                                      var type6161 = new GraceType("\u2039anon\u203a");
                                                                                                      type6161.typeMethods.push("number");
                                                                                                      type6161.typeMethods.push("number:=");
                                                                                                      var opresult6164 = callmethodChecked(var_Input, "&", [1], type6161);
                                                                                                      var var_NumberField = opresult6164;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6165 = function(argcv) {    // method NumberField
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for NumberField"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // NumberField is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(368);    // compilenode identifier
                                                                                                        return var_NumberField;
                                                                                                      };
                                                                                                      func6165.paramCounts = [0];
                                                                                                      this.methods["NumberField"] = func6165;
                                                                                                      func6165.definitionLine = 41;
                                                                                                      func6165.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(377);    // compilenode typedec
                                                                                                      // Type decl Choice
                                                                                                      //   Type literal 
                                                                                                      var type6167 = new GraceType("\u2039anon\u203a");
                                                                                                      type6167.typeMethods.push("selected");
                                                                                                      type6167.typeMethods.push("selected:=");
                                                                                                      var opresult6170 = callmethodChecked(var_Input, "&", [1], type6167);
                                                                                                      var var_Choice = opresult6170;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6171 = function(argcv) {    // method Choice
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Choice"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Choice is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(377);    // compilenode identifier
                                                                                                        return var_Choice;
                                                                                                      };
                                                                                                      func6171.paramCounts = [0];
                                                                                                      this.methods["Choice"] = func6171;
                                                                                                      func6171.definitionLine = 41;
                                                                                                      func6171.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(387);    // compilenode typedec
                                                                                                      // Type decl Color
                                                                                                      //   Type literal 
                                                                                                      var type6173 = new GraceType("Color");
                                                                                                      type6173.typeMethods.push("red");
                                                                                                      type6173.typeMethods.push("green");
                                                                                                      type6173.typeMethods.push("blue");
                                                                                                      var var_Color = type6173;
                                                                                                      setLineNumber(41);    // compilenode method
                                                                                                      var func6174 = function(argcv) {    // method Color
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Color"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // Color is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(387);    // compilenode identifier
                                                                                                        return var_Color;
                                                                                                      };
                                                                                                      func6174.paramCounts = [0];
                                                                                                      this.methods["Color"] = func6174;
                                                                                                      func6174.definitionLine = 41;
                                                                                                      func6174.definitionModule = "stobjectdraw";
                                                                                                      setLineNumber(396);    // compilenode string
                                                                                                      var string6175 = new GraceString("Color Out Of Range");
                                                                                                      var call6176 = callmethodChecked(var_prelude, "ProgrammingError", [0]);
                                                                                                      var call6177 = callmethodChecked(call6176, "refine", [1], string6175);
                                                                                                      var var_ColorOutOfRange = call6177;
                                                                                                      var func6178 = function(argcv) {    // method ColorOutOfRange
                                                                                                        var returnTarget = invocationCount;
                                                                                                        invocationCount++;
                                                                                                        var curarg = 1;
                                                                                                        if (argcv[0] !== 0)
                                                                                                          throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ColorOutOfRange"));
                                                                                                        setModuleName("stobjectdraw");
                                                                                                        // ColorOutOfRange is a simple accessor - elide try ... catch
                                                                                                        setLineNumber(395);    // compilenode identifier
                                                                                                        return var_ColorOutOfRange;
                                                                                                      };
                                                                                                      func6178.paramCounts = [0];
                                                                                                      this.methods["ColorOutOfRange"] = func6178;
                                                                                                      func6178.definitionLine = 396;
                                                                                                      func6178.definitionModule = "stobjectdraw";
                                                                                                      this.methods["ColorOutOfRange"].debug = "def";
                                                                                                      var call6179 = callmethodChecked(var_prelude, "ExceptionKind", [0]);
                                                                                                      if (!Grace_isTrue(callmethod(call6179, "match", [1], var_ColorOutOfRange)))
                                                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                            new GraceString("value of def 'ColorOutOfRange' is not of type prelude.ExceptionKind"));
                                                                                                      setLineNumber(399);    // compilenode object
                                                                                                      var obj6180 = Grace_allocObject(GraceObject, "color");
                                                                                                      obj6180.definitionModule = "stobjectdraw";
                                                                                                      obj6180.definitionLine = 399;
                                                                                                      obj6180.outer = this;
                                                                                                      var reader_stobjectdraw_outer6181 = function() {
                                                                                                        return this.outer;
                                                                                                      };
                                                                                                      obj6180.methods["outer"] = reader_stobjectdraw_outer6181;
                                                                                                      var obj_init_6180 = function() {
                                                                                                        var origSuperDepth = superDepth;
                                                                                                        superDepth = obj6180;
                                                                                                        var func6182 = function(argcv) {    // method r(1)g(1)b(1)
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          var var_r__39__ = arguments[curarg];
                                                                                                          curarg++;
                                                                                                          if (argcv[0] !== 1)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for r (arg list 1) of r(1)g(1)b(1)"));
                                                                                                          var var_g__39__ = arguments[curarg];
                                                                                                          curarg++;
                                                                                                          if (argcv[1] !== 1)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for g (arg list 2) of r(1)g(1)b(1)"));
                                                                                                          var var_b__39__ = arguments[curarg];
                                                                                                          curarg++;
                                                                                                          if (argcv[2] !== 1)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for b (arg list 3) of r(1)g(1)b(1)"));
                                                                                                          // Start argument checking
                                                                                                          curarg = 1;
                                                                                                          setLineNumber(400);    // compilenode identifier
                                                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("argument 1 in r (arg list 1), which corresponds to parameter r', does not have " + 
                                                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                          curarg++;
                                                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("argument 1 in g (arg list 2), which corresponds to parameter g', does not have " + 
                                                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                          curarg++;
                                                                                                          if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("argument 1 in b (arg list 3), which corresponds to parameter b', does not have " + 
                                                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                          curarg++;
                                                                                                          // End argument checking
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          var obj6183 = Grace_allocObject(GraceObject, "color.r()g()b");
                                                                                                          obj6183.definitionModule = "stobjectdraw";
                                                                                                          obj6183.definitionLine = 400;
                                                                                                          obj6183.outer = this;
                                                                                                          var reader_stobjectdraw_outer6184 = function() {
                                                                                                            return this.outer;
                                                                                                          };
                                                                                                          obj6183.methods["outer"] = reader_stobjectdraw_outer6184;
                                                                                                          var obj_init_6183 = function() {
                                                                                                            var origSuperDepth = superDepth;
                                                                                                            superDepth = obj6183;
                                                                                                            var func6185 = function(argcv) {    // method ==(1)
                                                                                                              var returnTarget = invocationCount;
                                                                                                              invocationCount++;
                                                                                                              var curarg = 1;
                                                                                                              var var_c = arguments[curarg];
                                                                                                              curarg++;
                                                                                                              if (argcv[0] !== 1)
                                                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
                                                                                                              // Start argument checking
                                                                                                              curarg = 1;
                                                                                                              setLineNumber(418);    // compilenode identifier
                                                                                                              if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                      new GraceString("argument 1 in == (arg list 1), which corresponds to parameter c, does not have " + 
                                                                                                                          callmethod(var_Color, "asString", [0])._value + "."));
                                                                                                              curarg++;
                                                                                                              // End argument checking
                                                                                                              setModuleName("stobjectdraw");
                                                                                                              setLineNumber(419);    // compilenode identifier
                                                                                                              var call6186 = callmethodChecked(var_c, "blue", [0]);
                                                                                                              onSelf = true;
                                                                                                              var call6188 = callmethodChecked(this, "blue", [0]);
                                                                                                              var opresult6190 = callmethodChecked(call6188, "==", [1], call6186);
                                                                                                              var call6192 = callmethodChecked(var_c, "green", [0]);
                                                                                                              onSelf = true;
                                                                                                              var call6194 = callmethodChecked(this, "green", [0]);
                                                                                                              var opresult6196 = callmethodChecked(call6194, "==", [1], call6192);
                                                                                                              var call6198 = callmethodChecked(var_c, "red", [0]);
                                                                                                              onSelf = true;
                                                                                                              var call6200 = callmethodChecked(this, "red", [0]);
                                                                                                              var opresult6202 = callmethodChecked(call6200, "==", [1], call6198);
                                                                                                              var opresult6204 = callmethodChecked(opresult6202, "&&", [1], opresult6196);
                                                                                                              var opresult6206 = callmethodChecked(opresult6204, "&&", [1], opresult6190);
                                                                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult6206)))
                                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                      new GraceString("result of method ==(1) does not have " + 
                                                                                                                          callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                              return opresult6206;
                                                                                                            };
                                                                                                            func6185.paramTypes = [];
                                                                                                            func6185.paramTypes.push([]);
                                                                                                            func6185.paramCounts = [1];
                                                                                                            obj6183.methods["=="] = func6185;
                                                                                                            func6185.definitionLine = 418;
                                                                                                            func6185.definitionModule = "stobjectdraw";
                                                                                                            var func6207 = function(argcv) {    // method asString
                                                                                                              var returnTarget = invocationCount;
                                                                                                              invocationCount++;
                                                                                                              var curarg = 1;
                                                                                                              if (argcv[0] !== 0)
                                                                                                                throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                              setModuleName("stobjectdraw");
                                                                                                              setLineNumber(423);    // compilenode string
                                                                                                              var string6208 = new GraceString(")");
                                                                                                              onSelf = true;
                                                                                                              var call6210 = callmethodChecked(this, "blue", [0]);
                                                                                                              var string6212 = new GraceString(", ");
                                                                                                              onSelf = true;
                                                                                                              var call6214 = callmethodChecked(this, "green", [0]);
                                                                                                              var string6216 = new GraceString(", ");
                                                                                                              onSelf = true;
                                                                                                              var call6218 = callmethodChecked(this, "red", [0]);
                                                                                                              var string6220 = new GraceString("color w/ rgb(");
                                                                                                              var opresult6222 = callmethodChecked(string6220, "++", [1], call6218);
                                                                                                              var opresult6224 = callmethodChecked(opresult6222, "++", [1], string6216);
                                                                                                              var opresult6226 = callmethodChecked(opresult6224, "++", [1], call6214);
                                                                                                              var opresult6228 = callmethodChecked(opresult6226, "++", [1], string6212);
                                                                                                              var opresult6230 = callmethodChecked(opresult6228, "++", [1], call6210);
                                                                                                              var opresult6232 = callmethodChecked(opresult6230, "++", [1], string6208);
                                                                                                              if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult6232)))
                                                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                      new GraceString("result of method asString does not have " + 
                                                                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                                                                              return opresult6232;
                                                                                                            };
                                                                                                            func6207.paramCounts = [0];
                                                                                                            obj6183.methods["asString"] = func6207;
                                                                                                            func6207.definitionLine = 422;
                                                                                                            func6207.definitionModule = "stobjectdraw";
                                                                                                            var if6233 = GraceDone;
                                                                                                            setLineNumber(402);    // compilenode identifier
                                                                                                            var opresult6236 = callmethodChecked(var_r__39__, ">", [1], new GraceNum(255));
                                                                                                            var opresult6240 = callmethodChecked(var_r__39__, "<", [1], new GraceNum(0));
                                                                                                            var opresult6242 = callmethodChecked(opresult6240, "||", [1], opresult6236);
                                                                                                            if (Grace_isTrue(opresult6242)) {
                                                                                                              setLineNumber(403);    // compilenode string
                                                                                                              var string6243 = new GraceString(" out of bounds 0..255");
                                                                                                              var string6246 = new GraceString("red index ");
                                                                                                              var opresult6248 = callmethodChecked(string6246, "++", [1], var_r__39__);
                                                                                                              var opresult6250 = callmethodChecked(opresult6248, "++", [1], string6243);
                                                                                                              var call6251 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6250);
                                                                                                              if6233 = call6251;
                                                                                                            }
                                                                                                            var if6252 = GraceDone;
                                                                                                            setLineNumber(406);    // compilenode identifier
                                                                                                            var opresult6255 = callmethodChecked(var_g__39__, ">", [1], new GraceNum(255));
                                                                                                            var opresult6259 = callmethodChecked(var_g__39__, "<", [1], new GraceNum(0));
                                                                                                            var opresult6261 = callmethodChecked(opresult6259, "||", [1], opresult6255);
                                                                                                            if (Grace_isTrue(opresult6261)) {
                                                                                                              setLineNumber(407);    // compilenode string
                                                                                                              var string6262 = new GraceString(" out of bounds 0..255");
                                                                                                              var string6265 = new GraceString("green index ");
                                                                                                              var opresult6267 = callmethodChecked(string6265, "++", [1], var_g__39__);
                                                                                                              var opresult6269 = callmethodChecked(opresult6267, "++", [1], string6262);
                                                                                                              var call6270 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6269);
                                                                                                              if6252 = call6270;
                                                                                                            }
                                                                                                            var if6271 = GraceDone;
                                                                                                            setLineNumber(410);    // compilenode identifier
                                                                                                            var opresult6274 = callmethodChecked(var_b__39__, ">", [1], new GraceNum(255));
                                                                                                            var opresult6278 = callmethodChecked(var_b__39__, "<", [1], new GraceNum(0));
                                                                                                            var opresult6280 = callmethodChecked(opresult6278, "||", [1], opresult6274);
                                                                                                            if (Grace_isTrue(opresult6280)) {
                                                                                                              setLineNumber(411);    // compilenode string
                                                                                                              var string6281 = new GraceString(" out of bounds 0..255");
                                                                                                              var string6284 = new GraceString("blue index ");
                                                                                                              var opresult6286 = callmethodChecked(string6284, "++", [1], var_b__39__);
                                                                                                              var opresult6288 = callmethodChecked(opresult6286, "++", [1], string6281);
                                                                                                              var call6289 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6288);
                                                                                                              if6271 = call6289;
                                                                                                            }
                                                                                                            setLineNumber(414);    // compilenode identifier
                                                                                                            var call6290 = callmethodChecked(var_r__39__, "truncated", [0]);
                                                                                                            obj6183.data["red"] = call6290;
                                                                                                            var reader_stobjectdraw_red6291 = function() {
                                                                                                              return this.data["red"];
                                                                                                            };
                                                                                                            reader_stobjectdraw_red6291.def = true;
                                                                                                            obj6183.methods["red"] = reader_stobjectdraw_red6291;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6290)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("value of def 'red' is not of type Number"));
                                                                                                            setLineNumber(415);    // compilenode identifier
                                                                                                            var call6292 = callmethodChecked(var_g__39__, "truncated", [0]);
                                                                                                            obj6183.data["green"] = call6292;
                                                                                                            var reader_stobjectdraw_green6293 = function() {
                                                                                                              return this.data["green"];
                                                                                                            };
                                                                                                            reader_stobjectdraw_green6293.def = true;
                                                                                                            obj6183.methods["green"] = reader_stobjectdraw_green6293;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6292)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("value of def 'green' is not of type Number"));
                                                                                                            setLineNumber(416);    // compilenode identifier
                                                                                                            var call6294 = callmethodChecked(var_b__39__, "truncated", [0]);
                                                                                                            obj6183.data["blue"] = call6294;
                                                                                                            var reader_stobjectdraw_blue6295 = function() {
                                                                                                              return this.data["blue"];
                                                                                                            };
                                                                                                            reader_stobjectdraw_blue6295.def = true;
                                                                                                            obj6183.methods["blue"] = reader_stobjectdraw_blue6295;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6294)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("value of def 'blue' is not of type Number"));
                                                                                                            superDepth = origSuperDepth;
                                                                                                          };
                                                                                                          obj_init_6183.apply(obj6183, []);
                                                                                                          setLineNumber(400);    // return value
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], obj6183)))
                                                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                  new GraceString("result of method r(1)g(1)b(1) does not have " + 
                                                                                                                      callmethod(var_Color, "asString", [0])._value + "."));
                                                                                                          return obj6183;
                                                                                                        };
                                                                                                        func6182.paramTypes = [];
                                                                                                        func6182.paramTypes.push([type_Number, "r'"]);
                                                                                                        func6182.paramTypes.push([type_Number, "g'"]);
                                                                                                        func6182.paramTypes.push([type_Number, "b'"]);
                                                                                                        func6182.paramCounts = [1, 1, 1];
                                                                                                        obj6180.methods["r()g()b"] = func6182;
                                                                                                        func6182.definitionLine = 400;
                                                                                                        func6182.definitionModule = "stobjectdraw";
                                                                                                          var func6296 = function(argcv) {    // method r(1     )g(1     )b(1     )()object
                                                                                                            var curarg = 1;
                                                                                                            var var_r__39__ = arguments[curarg];
                                                                                                            curarg++;
                                                                                                            var var_g__39__ = arguments[curarg];
                                                                                                            curarg++;
                                                                                                            var var_b__39__ = arguments[curarg];
                                                                                                            curarg++;
                                                                                                            var inheritingObject = arguments[curarg++];
                                                                                                            // Start argument processing
                                                                                                            curarg = 1;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("argument 1 in r (arg list 1), which corresponds to parameter r', does not have " + 
                                                                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                            curarg++;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("argument 1 in g (arg list 2), which corresponds to parameter g', does not have " + 
                                                                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                            curarg++;
                                                                                                            if (!Grace_isTrue(callmethod(var_Number, "match",  [1], arguments[curarg])))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("argument 1 in b (arg list 3), which corresponds to parameter b', does not have " + 
                                                                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                                                                            curarg++;
                                                                                                            // End argument processing
                                                                                                            setModuleName("stobjectdraw");
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var obj6297 = Grace_allocObject(GraceObject, "r()g()b");
                                                                                                            obj6297.definitionModule = "stobjectdraw";
                                                                                                            obj6297.definitionLine = 400;
                                                                                                            var inho6297 = inheritingObject;
                                                                                                            while (inho6297.superobj) inho6297 = inho6297.superobj;
                                                                                                            inho6297.superobj = obj6297;
                                                                                                            obj6297.data = inheritingObject.data;
                                                                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                                                                              obj6297._value = inheritingObject._value;
                                                                                                            obj6297.outer = this;
                                                                                                            var reader_stobjectdraw_outer6298 = function() {
                                                                                                              return this.outer;
                                                                                                            };
                                                                                                            obj6297.methods["outer"] = reader_stobjectdraw_outer6298;
                                                                                                            var obj_init_6297 = function() {
                                                                                                              var origSuperDepth = superDepth;
                                                                                                              superDepth = obj6297;
                                                                                                              var func6299 = function(argcv) {    // method ==(1)
                                                                                                                var returnTarget = invocationCount;
                                                                                                                invocationCount++;
                                                                                                                var curarg = 1;
                                                                                                                var var_c = arguments[curarg];
                                                                                                                curarg++;
                                                                                                                if (argcv[0] !== 1)
                                                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ==(1)"));
                                                                                                                // Start argument checking
                                                                                                                curarg = 1;
                                                                                                                setLineNumber(418);    // compilenode identifier
                                                                                                                if (!Grace_isTrue(callmethod(var_Color, "match",  [1], arguments[curarg])))
                                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                        new GraceString("argument 1 in == (arg list 1), which corresponds to parameter c, does not have " + 
                                                                                                                            callmethod(var_Color, "asString", [0])._value + "."));
                                                                                                                curarg++;
                                                                                                                // End argument checking
                                                                                                                setModuleName("stobjectdraw");
                                                                                                                setLineNumber(419);    // compilenode identifier
                                                                                                                var call6300 = callmethodChecked(var_c, "blue", [0]);
                                                                                                                onSelf = true;
                                                                                                                var call6302 = callmethodChecked(this, "blue", [0]);
                                                                                                                var opresult6304 = callmethodChecked(call6302, "==", [1], call6300);
                                                                                                                var call6306 = callmethodChecked(var_c, "green", [0]);
                                                                                                                onSelf = true;
                                                                                                                var call6308 = callmethodChecked(this, "green", [0]);
                                                                                                                var opresult6310 = callmethodChecked(call6308, "==", [1], call6306);
                                                                                                                var call6312 = callmethodChecked(var_c, "red", [0]);
                                                                                                                onSelf = true;
                                                                                                                var call6314 = callmethodChecked(this, "red", [0]);
                                                                                                                var opresult6316 = callmethodChecked(call6314, "==", [1], call6312);
                                                                                                                var opresult6318 = callmethodChecked(opresult6316, "&&", [1], opresult6310);
                                                                                                                var opresult6320 = callmethodChecked(opresult6318, "&&", [1], opresult6304);
                                                                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match", [1], opresult6320)))
                                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                        new GraceString("result of method ==(1) does not have " + 
                                                                                                                            callmethod(var_Boolean, "asString", [0])._value + "."));
                                                                                                                return opresult6320;
                                                                                                              };
                                                                                                              func6299.paramTypes = [];
                                                                                                              func6299.paramTypes.push([]);
                                                                                                              func6299.paramCounts = [1];
                                                                                                              obj6297.methods["=="] = func6299;
                                                                                                              func6299.definitionLine = 418;
                                                                                                              func6299.definitionModule = "stobjectdraw";
                                                                                                              var func6321 = function(argcv) {    // method asString
                                                                                                                var returnTarget = invocationCount;
                                                                                                                invocationCount++;
                                                                                                                var curarg = 1;
                                                                                                                if (argcv[0] !== 0)
                                                                                                                  throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for asString"));
                                                                                                                setModuleName("stobjectdraw");
                                                                                                                setLineNumber(423);    // compilenode string
                                                                                                                var string6322 = new GraceString(")");
                                                                                                                onSelf = true;
                                                                                                                var call6324 = callmethodChecked(this, "blue", [0]);
                                                                                                                var string6326 = new GraceString(", ");
                                                                                                                onSelf = true;
                                                                                                                var call6328 = callmethodChecked(this, "green", [0]);
                                                                                                                var string6330 = new GraceString(", ");
                                                                                                                onSelf = true;
                                                                                                                var call6332 = callmethodChecked(this, "red", [0]);
                                                                                                                var string6334 = new GraceString("color w/ rgb(");
                                                                                                                var opresult6336 = callmethodChecked(string6334, "++", [1], call6332);
                                                                                                                var opresult6338 = callmethodChecked(opresult6336, "++", [1], string6330);
                                                                                                                var opresult6340 = callmethodChecked(opresult6338, "++", [1], call6328);
                                                                                                                var opresult6342 = callmethodChecked(opresult6340, "++", [1], string6326);
                                                                                                                var opresult6344 = callmethodChecked(opresult6342, "++", [1], call6324);
                                                                                                                var opresult6346 = callmethodChecked(opresult6344, "++", [1], string6322);
                                                                                                                if (!Grace_isTrue(callmethod(var_String, "match", [1], opresult6346)))
                                                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                        new GraceString("result of method asString does not have " + 
                                                                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                                                                return opresult6346;
                                                                                                              };
                                                                                                              func6321.paramCounts = [0];
                                                                                                              obj6297.methods["asString"] = func6321;
                                                                                                              func6321.definitionLine = 422;
                                                                                                              func6321.definitionModule = "stobjectdraw";
                                                                                                              var if6347 = GraceDone;
                                                                                                              setLineNumber(402);    // compilenode identifier
                                                                                                              var opresult6350 = callmethodChecked(var_r__39__, ">", [1], new GraceNum(255));
                                                                                                              var opresult6354 = callmethodChecked(var_r__39__, "<", [1], new GraceNum(0));
                                                                                                              var opresult6356 = callmethodChecked(opresult6354, "||", [1], opresult6350);
                                                                                                              if (Grace_isTrue(opresult6356)) {
                                                                                                                setLineNumber(403);    // compilenode string
                                                                                                                var string6357 = new GraceString(" out of bounds 0..255");
                                                                                                                var string6360 = new GraceString("red index ");
                                                                                                                var opresult6362 = callmethodChecked(string6360, "++", [1], var_r__39__);
                                                                                                                var opresult6364 = callmethodChecked(opresult6362, "++", [1], string6357);
                                                                                                                var call6365 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6364);
                                                                                                                if6347 = call6365;
                                                                                                              }
                                                                                                              var if6366 = GraceDone;
                                                                                                              setLineNumber(406);    // compilenode identifier
                                                                                                              var opresult6369 = callmethodChecked(var_g__39__, ">", [1], new GraceNum(255));
                                                                                                              var opresult6373 = callmethodChecked(var_g__39__, "<", [1], new GraceNum(0));
                                                                                                              var opresult6375 = callmethodChecked(opresult6373, "||", [1], opresult6369);
                                                                                                              if (Grace_isTrue(opresult6375)) {
                                                                                                                setLineNumber(407);    // compilenode string
                                                                                                                var string6376 = new GraceString(" out of bounds 0..255");
                                                                                                                var string6379 = new GraceString("green index ");
                                                                                                                var opresult6381 = callmethodChecked(string6379, "++", [1], var_g__39__);
                                                                                                                var opresult6383 = callmethodChecked(opresult6381, "++", [1], string6376);
                                                                                                                var call6384 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6383);
                                                                                                                if6366 = call6384;
                                                                                                              }
                                                                                                              var if6385 = GraceDone;
                                                                                                              setLineNumber(410);    // compilenode identifier
                                                                                                              var opresult6388 = callmethodChecked(var_b__39__, ">", [1], new GraceNum(255));
                                                                                                              var opresult6392 = callmethodChecked(var_b__39__, "<", [1], new GraceNum(0));
                                                                                                              var opresult6394 = callmethodChecked(opresult6392, "||", [1], opresult6388);
                                                                                                              if (Grace_isTrue(opresult6394)) {
                                                                                                                setLineNumber(411);    // compilenode string
                                                                                                                var string6395 = new GraceString(" out of bounds 0..255");
                                                                                                                var string6398 = new GraceString("blue index ");
                                                                                                                var opresult6400 = callmethodChecked(string6398, "++", [1], var_b__39__);
                                                                                                                var opresult6402 = callmethodChecked(opresult6400, "++", [1], string6395);
                                                                                                                var call6403 = callmethodChecked(var_ColorOutOfRange, "raise", [1], opresult6402);
                                                                                                                if6385 = call6403;
                                                                                                              }
                                                                                                              setLineNumber(414);    // compilenode identifier
                                                                                                              var call6404 = callmethodChecked(var_r__39__, "truncated", [0]);
                                                                                                              obj6297.data["red"] = call6404;
                                                                                                              var reader_stobjectdraw_red6405 = function() {
                                                                                                                return this.data["red"];
                                                                                                              };
                                                                                                              reader_stobjectdraw_red6405.def = true;
                                                                                                              obj6297.methods["red"] = reader_stobjectdraw_red6405;
                                                                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6404)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("value of def 'red' is not of type Number"));
                                                                                                              setLineNumber(415);    // compilenode identifier
                                                                                                              var call6406 = callmethodChecked(var_g__39__, "truncated", [0]);
                                                                                                              obj6297.data["green"] = call6406;
                                                                                                              var reader_stobjectdraw_green6407 = function() {
                                                                                                                return this.data["green"];
                                                                                                              };
                                                                                                              reader_stobjectdraw_green6407.def = true;
                                                                                                              obj6297.methods["green"] = reader_stobjectdraw_green6407;
                                                                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6406)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("value of def 'green' is not of type Number"));
                                                                                                              setLineNumber(416);    // compilenode identifier
                                                                                                              var call6408 = callmethodChecked(var_b__39__, "truncated", [0]);
                                                                                                              obj6297.data["blue"] = call6408;
                                                                                                              var reader_stobjectdraw_blue6409 = function() {
                                                                                                                return this.data["blue"];
                                                                                                              };
                                                                                                              reader_stobjectdraw_blue6409.def = true;
                                                                                                              obj6297.methods["blue"] = reader_stobjectdraw_blue6409;
                                                                                                              if (!Grace_isTrue(callmethod(var_Number, "match", [1], call6408)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("value of def 'blue' is not of type Number"));
                                                                                                              superDepth = origSuperDepth;
                                                                                                            };
                                                                                                            obj_init_6297.apply(inheritingObject, []);
                                                                                                            return obj6297;
                                                                                                            };
                                                                                                            func6296.paramTypes = [];
                                                                                                            func6296.paramTypes.push([type_Number, "r'"]);
                                                                                                            func6296.paramTypes.push([type_Number, "g'"]);
                                                                                                            func6296.paramTypes.push([type_Number, "b'"]);
                                                                                                            obj6180.methods["r()g()b()object"] = func6296;
                                                                                                          var func6410 = function(argcv) {    // method random
                                                                                                            var returnTarget = invocationCount;
                                                                                                            invocationCount++;
                                                                                                            var curarg = 1;
                                                                                                            if (argcv[0] !== 0)
                                                                                                              throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for random"));
                                                                                                            setModuleName("stobjectdraw");
                                                                                                            setLineNumber(429);    // compilenode call
                                                                                                            var call6411 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                            onOuter = true;
                                                                                                            onSelf = true;
                                                                                                            var call6412 = callmethodChecked(call6411, "randomIntFrom()to", [1, 1], new GraceNum(0), new GraceNum(255));
                                                                                                            setLineNumber(430);    // compilenode call
                                                                                                            var call6413 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                            onOuter = true;
                                                                                                            onSelf = true;
                                                                                                            var call6414 = callmethodChecked(call6413, "randomIntFrom()to", [1, 1], new GraceNum(0), new GraceNum(255));
                                                                                                            setLineNumber(431);    // compilenode call
                                                                                                            var call6415 = callmethodChecked(superDepth, "outer", [0]);
                                                                                                            onOuter = true;
                                                                                                            onSelf = true;
                                                                                                            var call6416 = callmethodChecked(call6415, "randomIntFrom()to", [1, 1], new GraceNum(0), new GraceNum(255));
                                                                                                            onSelf = true;
                                                                                                            var call6417 = callmethodChecked(this, "r()g()b", [1, 1, 1], call6412, call6414, call6416);
                                                                                                            setLineNumber(429);    // return value
                                                                                                            if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6417)))
                                                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                    new GraceString("result of method random does not have " + 
                                                                                                                        callmethod(var_Color, "asString", [0])._value + "."));
                                                                                                            return call6417;
                                                                                                          };
                                                                                                          func6410.paramCounts = [0];
                                                                                                          obj6180.methods["random"] = func6410;
                                                                                                          func6410.definitionLine = 427;
                                                                                                          func6410.definitionModule = "stobjectdraw";
                                                                                                          setLineNumber(434);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6418 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(255), new GraceNum(255));
                                                                                                          obj6180.data["white"] = call6418;
                                                                                                          var reader_stobjectdraw_white6419 = function() {
                                                                                                            return this.data["white"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_white6419.def = true;
                                                                                                          obj6180.methods["white"] = reader_stobjectdraw_white6419;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6418)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'white' is not of type Color"));
                                                                                                          setLineNumber(435);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6420 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(0), new GraceNum(0));
                                                                                                          obj6180.data["black"] = call6420;
                                                                                                          var reader_stobjectdraw_black6421 = function() {
                                                                                                            return this.data["black"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_black6421.def = true;
                                                                                                          obj6180.methods["black"] = reader_stobjectdraw_black6421;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6420)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'black' is not of type Color"));
                                                                                                          setLineNumber(436);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6422 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(255), new GraceNum(0));
                                                                                                          obj6180.data["green"] = call6422;
                                                                                                          var reader_stobjectdraw_green6423 = function() {
                                                                                                            return this.data["green"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_green6423.def = true;
                                                                                                          obj6180.methods["green"] = reader_stobjectdraw_green6423;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6422)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'green' is not of type Color"));
                                                                                                          setLineNumber(437);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6424 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(0), new GraceNum(0));
                                                                                                          obj6180.data["red"] = call6424;
                                                                                                          var reader_stobjectdraw_red6425 = function() {
                                                                                                            return this.data["red"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_red6425.def = true;
                                                                                                          obj6180.methods["red"] = reader_stobjectdraw_red6425;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6424)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'red' is not of type Color"));
                                                                                                          setLineNumber(438);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6426 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(60), new GraceNum(60), new GraceNum(60));
                                                                                                          obj6180.data["gray"] = call6426;
                                                                                                          var reader_stobjectdraw_gray6427 = function() {
                                                                                                            return this.data["gray"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_gray6427.def = true;
                                                                                                          obj6180.methods["gray"] = reader_stobjectdraw_gray6427;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6426)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'gray' is not of type Color"));
                                                                                                          setLineNumber(439);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6428 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(0), new GraceNum(255));
                                                                                                          obj6180.data["blue"] = call6428;
                                                                                                          var reader_stobjectdraw_blue6429 = function() {
                                                                                                            return this.data["blue"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_blue6429.def = true;
                                                                                                          obj6180.methods["blue"] = reader_stobjectdraw_blue6429;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6428)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'blue' is not of type Color"));
                                                                                                          setLineNumber(440);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6430 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(255), new GraceNum(255));
                                                                                                          obj6180.data["cyan"] = call6430;
                                                                                                          var reader_stobjectdraw_cyan6431 = function() {
                                                                                                            return this.data["cyan"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_cyan6431.def = true;
                                                                                                          obj6180.methods["cyan"] = reader_stobjectdraw_cyan6431;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6430)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'cyan' is not of type Color"));
                                                                                                          setLineNumber(441);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6432 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(0), new GraceNum(255));
                                                                                                          obj6180.data["magenta"] = call6432;
                                                                                                          var reader_stobjectdraw_magenta6433 = function() {
                                                                                                            return this.data["magenta"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_magenta6433.def = true;
                                                                                                          obj6180.methods["magenta"] = reader_stobjectdraw_magenta6433;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6432)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'magenta' is not of type Color"));
                                                                                                          setLineNumber(442);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6434 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(255), new GraceNum(0));
                                                                                                          obj6180.data["yellow"] = call6434;
                                                                                                          var reader_stobjectdraw_yellow6435 = function() {
                                                                                                            return this.data["yellow"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_yellow6435.def = true;
                                                                                                          obj6180.methods["yellow"] = reader_stobjectdraw_yellow6435;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6434)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'yellow' is not of type Color"));
                                                                                                          setLineNumber(443);    // compilenode num
                                                                                                          onSelf = true;
                                                                                                          var call6436 = callmethodChecked(this, "r()g()b", [1, 1, 1], new GraceNum(220), new GraceNum(220), new GraceNum(220));
                                                                                                          obj6180.data["neutral"] = call6436;
                                                                                                          var reader_stobjectdraw_neutral6437 = function() {
                                                                                                            return this.data["neutral"];
                                                                                                          };
                                                                                                          reader_stobjectdraw_neutral6437.def = true;
                                                                                                          obj6180.methods["neutral"] = reader_stobjectdraw_neutral6437;
                                                                                                          if (!Grace_isTrue(callmethod(var_Color, "match", [1], call6436)))
                                                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                                new GraceString("value of def 'neutral' is not of type Color"));
                                                                                                          superDepth = origSuperDepth;
                                                                                                        };
                                                                                                        obj_init_6180.apply(obj6180, []);
                                                                                                        var var_color = obj6180;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6438 = function(argcv) {    // method color
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for color"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // color is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(399);    // compilenode identifier
                                                                                                          return var_color;
                                                                                                        };
                                                                                                        func6438.paramCounts = [0];
                                                                                                        this.methods["color"] = func6438;
                                                                                                        func6438.definitionLine = 431;
                                                                                                        func6438.definitionModule = "stobjectdraw";
                                                                                                        this.methods["color"].debug = "def";
                                                                                                        setLineNumber(447);    // compilenode identifier
                                                                                                        var call6439 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(255), new GraceNum(255));
                                                                                                        var var_white = call6439;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6440 = function(argcv) {    // method white
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for white"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // white is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(447);    // compilenode identifier
                                                                                                          return var_white;
                                                                                                        };
                                                                                                        func6440.paramCounts = [0];
                                                                                                        this.methods["white"] = func6440;
                                                                                                        func6440.definitionLine = 431;
                                                                                                        func6440.definitionModule = "stobjectdraw";
                                                                                                        this.methods["white"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_white)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'white' is not of type Color"));
                                                                                                        setLineNumber(448);    // compilenode identifier
                                                                                                        var call6441 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(0), new GraceNum(0));
                                                                                                        var var_black = call6441;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6442 = function(argcv) {    // method black
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for black"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // black is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(448);    // compilenode identifier
                                                                                                          return var_black;
                                                                                                        };
                                                                                                        func6442.paramCounts = [0];
                                                                                                        this.methods["black"] = func6442;
                                                                                                        func6442.definitionLine = 431;
                                                                                                        func6442.definitionModule = "stobjectdraw";
                                                                                                        this.methods["black"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_black)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'black' is not of type Color"));
                                                                                                        setLineNumber(449);    // compilenode identifier
                                                                                                        var call6443 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(255), new GraceNum(0));
                                                                                                        var var_green = call6443;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6444 = function(argcv) {    // method green
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for green"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // green is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(449);    // compilenode identifier
                                                                                                          return var_green;
                                                                                                        };
                                                                                                        func6444.paramCounts = [0];
                                                                                                        this.methods["green"] = func6444;
                                                                                                        func6444.definitionLine = 431;
                                                                                                        func6444.definitionModule = "stobjectdraw";
                                                                                                        this.methods["green"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_green)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'green' is not of type Color"));
                                                                                                        setLineNumber(450);    // compilenode identifier
                                                                                                        var call6445 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(0), new GraceNum(0));
                                                                                                        var var_red = call6445;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6446 = function(argcv) {    // method red
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for red"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // red is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(450);    // compilenode identifier
                                                                                                          return var_red;
                                                                                                        };
                                                                                                        func6446.paramCounts = [0];
                                                                                                        this.methods["red"] = func6446;
                                                                                                        func6446.definitionLine = 431;
                                                                                                        func6446.definitionModule = "stobjectdraw";
                                                                                                        this.methods["red"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_red)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'red' is not of type Color"));
                                                                                                        setLineNumber(451);    // compilenode identifier
                                                                                                        var call6447 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(60), new GraceNum(60), new GraceNum(60));
                                                                                                        var var_gray = call6447;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6448 = function(argcv) {    // method gray
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for gray"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // gray is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(451);    // compilenode identifier
                                                                                                          return var_gray;
                                                                                                        };
                                                                                                        func6448.paramCounts = [0];
                                                                                                        this.methods["gray"] = func6448;
                                                                                                        func6448.definitionLine = 431;
                                                                                                        func6448.definitionModule = "stobjectdraw";
                                                                                                        this.methods["gray"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_gray)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'gray' is not of type Color"));
                                                                                                        setLineNumber(452);    // compilenode identifier
                                                                                                        var call6449 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(0), new GraceNum(255));
                                                                                                        var var_blue = call6449;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6450 = function(argcv) {    // method blue
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for blue"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // blue is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(452);    // compilenode identifier
                                                                                                          return var_blue;
                                                                                                        };
                                                                                                        func6450.paramCounts = [0];
                                                                                                        this.methods["blue"] = func6450;
                                                                                                        func6450.definitionLine = 431;
                                                                                                        func6450.definitionModule = "stobjectdraw";
                                                                                                        this.methods["blue"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_blue)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'blue' is not of type Color"));
                                                                                                        setLineNumber(453);    // compilenode identifier
                                                                                                        var call6451 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(0), new GraceNum(255), new GraceNum(255));
                                                                                                        var var_cyan = call6451;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6452 = function(argcv) {    // method cyan
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for cyan"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // cyan is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(453);    // compilenode identifier
                                                                                                          return var_cyan;
                                                                                                        };
                                                                                                        func6452.paramCounts = [0];
                                                                                                        this.methods["cyan"] = func6452;
                                                                                                        func6452.definitionLine = 431;
                                                                                                        func6452.definitionModule = "stobjectdraw";
                                                                                                        this.methods["cyan"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_cyan)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'cyan' is not of type Color"));
                                                                                                        setLineNumber(454);    // compilenode identifier
                                                                                                        var call6453 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(0), new GraceNum(255));
                                                                                                        var var_magenta = call6453;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6454 = function(argcv) {    // method magenta
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for magenta"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // magenta is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(454);    // compilenode identifier
                                                                                                          return var_magenta;
                                                                                                        };
                                                                                                        func6454.paramCounts = [0];
                                                                                                        this.methods["magenta"] = func6454;
                                                                                                        func6454.definitionLine = 431;
                                                                                                        func6454.definitionModule = "stobjectdraw";
                                                                                                        this.methods["magenta"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_magenta)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'magenta' is not of type Color"));
                                                                                                        setLineNumber(455);    // compilenode identifier
                                                                                                        var call6455 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(255), new GraceNum(255), new GraceNum(0));
                                                                                                        var var_yellow = call6455;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6456 = function(argcv) {    // method yellow
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for yellow"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // yellow is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(455);    // compilenode identifier
                                                                                                          return var_yellow;
                                                                                                        };
                                                                                                        func6456.paramCounts = [0];
                                                                                                        this.methods["yellow"] = func6456;
                                                                                                        func6456.definitionLine = 431;
                                                                                                        func6456.definitionModule = "stobjectdraw";
                                                                                                        this.methods["yellow"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_yellow)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'yellow' is not of type Color"));
                                                                                                        setLineNumber(456);    // compilenode identifier
                                                                                                        var call6457 = callmethodChecked(var_color, "r()g()b", [1, 1, 1], new GraceNum(220), new GraceNum(220), new GraceNum(220));
                                                                                                        var var_neutral = call6457;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6458 = function(argcv) {    // method neutral
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for neutral"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // neutral is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(456);    // compilenode identifier
                                                                                                          return var_neutral;
                                                                                                        };
                                                                                                        func6458.paramCounts = [0];
                                                                                                        this.methods["neutral"] = func6458;
                                                                                                        func6458.definitionLine = 431;
                                                                                                        func6458.definitionModule = "stobjectdraw";
                                                                                                        this.methods["neutral"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Color, "match", [1], var_neutral)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'neutral' is not of type Color"));
                                                                                                        setLineNumber(464);    // compilenode typedec
                                                                                                        // Type decl Event
                                                                                                        //   Type literal 
                                                                                                        var type6460 = new GraceType("Event");
                                                                                                        type6460.typeMethods.push("source");
                                                                                                        var var_Event = type6460;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6461 = function(argcv) {    // method Event
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Event"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // Event is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(464);    // compilenode identifier
                                                                                                          return var_Event;
                                                                                                        };
                                                                                                        func6461.paramCounts = [0];
                                                                                                        this.methods["Event"] = func6461;
                                                                                                        func6461.definitionLine = 431;
                                                                                                        func6461.definitionModule = "stobjectdraw";
                                                                                                        setLineNumber(469);    // compilenode typedec
                                                                                                        // Type decl MouseEvent
                                                                                                        //   Type literal 
                                                                                                        var type6463 = new GraceType("\u2039anon\u203a");
                                                                                                        type6463.typeMethods.push("at");
                                                                                                        var opresult6466 = callmethodChecked(var_Event, "&", [1], type6463);
                                                                                                        var var_MouseEvent = opresult6466;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6467 = function(argcv) {    // method MouseEvent
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for MouseEvent"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // MouseEvent is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(469);    // compilenode identifier
                                                                                                          return var_MouseEvent;
                                                                                                        };
                                                                                                        func6467.paramCounts = [0];
                                                                                                        this.methods["MouseEvent"] = func6467;
                                                                                                        func6467.definitionLine = 431;
                                                                                                        func6467.definitionModule = "stobjectdraw";
                                                                                                        setLineNumber(474);    // compilenode typedec
                                                                                                        // Type decl KeyEvent
                                                                                                        //   Type literal 
                                                                                                        var type6469 = new GraceType("\u2039anon\u203a");
                                                                                                        type6469.typeMethods.push("code");
                                                                                                        var opresult6472 = callmethodChecked(var_Event, "&", [1], type6469);
                                                                                                        var var_KeyEvent = opresult6472;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6473 = function(argcv) {    // method KeyEvent
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for KeyEvent"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // KeyEvent is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(474);    // compilenode identifier
                                                                                                          return var_KeyEvent;
                                                                                                        };
                                                                                                        func6473.paramCounts = [0];
                                                                                                        this.methods["KeyEvent"] = func6473;
                                                                                                        func6473.definitionLine = 431;
                                                                                                        func6473.definitionModule = "stobjectdraw";
                                                                                                        setLineNumber(481);    // compilenode typedec
                                                                                                        // Type decl Response
                                                                                                        var var_Response = var_Procedure;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6475 = function(argcv) {    // method Response
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Response"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // Response is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(481);    // compilenode identifier
                                                                                                          return var_Response;
                                                                                                        };
                                                                                                        func6475.paramCounts = [0];
                                                                                                        this.methods["Response"] = func6475;
                                                                                                        func6475.definitionLine = 431;
                                                                                                        func6475.definitionModule = "stobjectdraw";
                                                                                                        setLineNumber(484);    // compilenode typedec
                                                                                                        // Type decl MouseResponse
                                                                                                        var var_MouseResponse = var_Procedure;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6477 = function(argcv) {    // method MouseResponse
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for MouseResponse"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // MouseResponse is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(484);    // compilenode identifier
                                                                                                          return var_MouseResponse;
                                                                                                        };
                                                                                                        func6477.paramCounts = [0];
                                                                                                        this.methods["MouseResponse"] = func6477;
                                                                                                        func6477.definitionLine = 431;
                                                                                                        func6477.definitionModule = "stobjectdraw";
                                                                                                        setLineNumber(487);    // compilenode typedec
                                                                                                        // Type decl KeyResponse
                                                                                                        var var_KeyResponse = var_Procedure;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6479 = function(argcv) {    // method KeyResponse
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for KeyResponse"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // KeyResponse is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(487);    // compilenode identifier
                                                                                                          return var_KeyResponse;
                                                                                                        };
                                                                                                        func6479.paramCounts = [0];
                                                                                                        this.methods["KeyResponse"] = func6479;
                                                                                                        func6479.definitionLine = 431;
                                                                                                        func6479.definitionModule = "stobjectdraw";
                                                                                                        setLineNumber(529);    // compilenode typedec
                                                                                                        // Type decl ComponentFactory
                                                                                                        //   Type literal 
                                                                                                        var type6481 = new GraceType("ComponentFactory");
                                                                                                        type6481.typeMethods.push("fromElement");
                                                                                                        type6481.typeMethods.push("ofElementType");
                                                                                                        var var_ComponentFactory = type6481;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6482 = function(argcv) {    // method ComponentFactory
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for ComponentFactory"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // ComponentFactory is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(529);    // compilenode identifier
                                                                                                          return var_ComponentFactory;
                                                                                                        };
                                                                                                        func6482.paramCounts = [0];
                                                                                                        this.methods["ComponentFactory"] = func6482;
                                                                                                        func6482.definitionLine = 431;
                                                                                                        func6482.definitionModule = "stobjectdraw";
                                                                                                        setLineNumber(539);    // compilenode num
                                                                                                        var var_maxClickTime = new GraceNum(200);
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6483 = function(argcv) {    // method maxClickTime
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for maxClickTime"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // maxClickTime is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(539);    // compilenode identifier
                                                                                                          return var_maxClickTime;
                                                                                                        };
                                                                                                        func6483.paramCounts = [0];
                                                                                                        this.methods["maxClickTime"] = func6483;
                                                                                                        func6483.definitionLine = 431;
                                                                                                        func6483.definitionModule = "stobjectdraw";
                                                                                                        this.methods["maxClickTime"].debug = "def";
                                                                                                        if (!Grace_isTrue(callmethod(var_Number, "match", [1], var_maxClickTime)))
                                                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                                                              new GraceString("value of def 'maxClickTime' is not of type Number"));
                                                                                                        setLineNumber(2213);    // compilenode typedec
                                                                                                        // Type decl Audio
                                                                                                        //   Type literal 
                                                                                                        var type6485 = new GraceType("Audio");
                                                                                                        type6485.typeMethods.push("source");
                                                                                                        type6485.typeMethods.push("source:=");
                                                                                                        type6485.typeMethods.push("play");
                                                                                                        type6485.typeMethods.push("pause");
                                                                                                        type6485.typeMethods.push("isLooping");
                                                                                                        type6485.typeMethods.push("looping:=");
                                                                                                        type6485.typeMethods.push("isEnded");
                                                                                                        var var_Audio = type6485;
                                                                                                        setLineNumber(431);    // compilenode method
                                                                                                        var func6486 = function(argcv) {    // method Audio
                                                                                                          var returnTarget = invocationCount;
                                                                                                          invocationCount++;
                                                                                                          var curarg = 1;
                                                                                                          if (argcv[0] !== 0)
                                                                                                            throw new GraceExceptionPacket(ProgrammingErrorObject, new GraceString("wrong number of arguments for Audio"));
                                                                                                          setModuleName("stobjectdraw");
                                                                                                          // Audio is a simple accessor - elide try ... catch
                                                                                                          setLineNumber(2213);    // compilenode identifier
                                                                                                          return var_Audio;
                                                                                                        };
                                                                                                        func6486.paramCounts = [0];
                                                                                                        this.methods["Audio"] = func6486;
                                                                                                        func6486.definitionLine = 431;
                                                                                                        func6486.definitionModule = "stobjectdraw";
                                                                                                        return this;
                                                                                                      }
                                                                                                      gracecode_stobjectdraw.imports = ['dom', 'math', 'modules/staticTypes'];
                                                                                                      if (typeof gctCache !== "undefined")
                                                                                                        gctCache['stobjectdraw'] = "classes:\n color\nconfidential:\n eventLogKind()response\n selectBoxOptionsFrom()labeled\nconstructors-of:color:\n r()g()b\nfresh-methods:\n applicationTitle()size\n audioUrl\n buttonLabeled\n componentFromElement\n componentOfElementType\n containerEmpty\n containerFromElement\n containerOfElementType\n containerSize\n drawable2DAt()size()on\n drawableAt()on\n drawableImageAt()size()url()on\n drawingCanvasSize\n eventLogKind()response\n eventSource\n fieldOfType()labeled\n filledArcAt()size()from()to()on\n filledOvalAt()size()on\n filledRectAt()size()on\n framedArcAt()size()from()to()on\n framedOvalAt()size()on\n framedRectAt()size()on\n graphicApplicationSize\n inputFromElement\n inputOfElementType\n inputOfType\n keyEventSource()event\n labeledWidgetFromElement\n labeledWidgetOfElementType\n labeledWidgetOfElementType()labeled\n lineFrom()length()direction()on\n lineFrom()to()on\n mouseEventSource()event\n numberFieldLabeled\n numberFieldUnlabeled\n passwordFieldLabeled\n passwordFieldUnlabeled\n resizable2DAt()size()on\n selectBoxOptionsFrom\n selectBoxOptionsFrom()labeled\n textAt()with()on\n textBoxWith\n textFieldLabeled\n textFieldUnlabeled\nfresh:applicationTitle()size:\n !=\n ::\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n children\n do\n element\n eventSource\n events\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isHorizontal\n isMe\n isOpened\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouse()do\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n prepend\n size\n startApplication\n stopApplication\n theHeight\n theTitle\n theWidth\n theWindow\n width\n windowTitle\n windowTitle:=\n \u2260\nfresh:audioUrl:\n asString\n element\n isEnded\n isLooping\n looping:=\n pause\n play\n source\n source:=\nfresh:buttonLabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:componentFromElement:\n asString\n element\n eventSource\n flexible:=\n height\n isFlexible\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\nfresh:componentOfElementType:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:containerEmpty:\n !=\n ::\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n children\n do\n element\n eventSource\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n prepend\n size\n width\n \u2260\nfresh:containerFromElement:\n !=\n ::\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n children\n do\n element\n eventSource\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n prepend\n size\n width\n \u2260\nfresh:containerOfElementType:\n !=\n ::\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n children\n do\n element\n eventSource\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n prepend\n size\n width\n \u2260\nfresh:containerSize:\n !=\n ::\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n children\n do\n element\n eventSource\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n prepend\n size\n width\n \u2260\nfresh:drawable2DAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n x\n y\n \u2260\nfresh:drawableAt()on:\n ==\n addToCanvas\n asString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n theColor\n theFrameColor\n visible:=\n x\n y\nfresh:drawableImageAt()size()url()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theImage\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:drawingCanvasSize:\n !=\n ::\n add\n asDebugString\n asString\n basicAsString\n clear\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n notifyRedraw\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n printObjects\n redraw\n remove\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n startDrawing\n theContext\n theGraphics\n width\n \u2260\nfresh:eventLogKind()response:\n kind\n response\nfresh:eventSource:\n asString\n source\nfresh:fieldOfType()labeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:filledArcAt()size()from()to()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:filledOvalAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:filledRectAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:framedArcAt()size()from()to()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:framedOvalAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:framedRectAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:graphicApplicationSize:\n !=\n ::\n after\n append\n arrangeHorizontal\n arrangeVertical\n asDebugString\n asString\n at\n at()put\n basicAsString\n before\n canvas\n children\n do\n element\n eventSource\n events\n flex\n flexible:=\n fold()startingWith\n height\n isEmpty\n isFlexible\n isHorizontal\n isMe\n isOpened\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouse()do\n onMouseClick\n onMouseClickDo\n onMouseDrag\n onMouseDragDo\n onMouseEnter\n onMouseEnterDo\n onMouseExit\n onMouseExitDo\n onMouseMove\n onMouseMoveDo\n onMousePress\n onMousePressDo\n onMouseRelease\n onMouseReleaseDo\n prepend\n size\n startApplication\n startGraphics\n stopApplication\n theHeight\n theTitle\n theWidth\n theWindow\n width\n windowTitle\n windowTitle:=\n \u2260\nfresh:inputFromElement:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:inputOfElementType:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:inputOfType:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:keyEventSource()event:\n !=\n ::\n asDebugString\n asString\n basicAsString\n code\n isMe\n source\n \u2260\nfresh:labeledWidgetFromElement:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:labeledWidgetOfElementType:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:labeledWidgetOfElementType()labeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:lineFrom()length()direction()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n dist2\n distToSegment\n distToSegmentSquared\n draw\n end\n end:=\n frameColor\n frameColor:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n setEndPoints\n start\n start:=\n theColor\n theEnd\n theFrameColor\n visible:=\n x\n y\n \u2260\nfresh:lineFrom()to()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n dist2\n distToSegment\n distToSegmentSquared\n draw\n end\n end:=\n frameColor\n frameColor:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n setEndPoints\n start\n start:=\n theColor\n theEnd\n theFrameColor\n visible:=\n x\n y\n \u2260\nfresh:mouseEventSource()event:\n !=\n ::\n asDebugString\n asString\n at\n basicAsString\n isMe\n source\n \u2260\nfresh:numberFieldLabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n number\n number:=\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:numberFieldUnlabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n number\n number:=\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:passwordFieldLabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n text\n text:=\n width\n \u2260\nfresh:passwordFieldUnlabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n text\n text:=\n width\n \u2260\nfresh:resizable2DAt()size()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n draw\n frameColor\n frameColor:=\n height\n height:=\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n size\n size:=\n theColor\n theFrameColor\n theHeight\n theWidth\n visible:=\n width\n width:=\n x\n y\n \u2260\nfresh:selectBoxOptionsFrom:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n labeler\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n selected\n selected:=\n size\n width\n \u2260\nfresh:selectBoxOptionsFrom()labeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n labelElement\n labeler\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n selected\n selected:=\n size\n width\n \u2260\nfresh:textAt()with()on:\n !=\n ::\n ==\n addToCanvas\n asDebugString\n asString\n basicAsString\n canvas\n color\n color:=\n contains\n contents\n contents:=\n draw\n fontSize\n fontSize:=\n frameColor\n frameColor:=\n fsize\n isMe\n isVisible\n location\n moveBy\n moveTo\n notifyRedraw\n overlaps\n removeFromCanvas\n sendBackward\n sendForward\n sendToBack\n sendToFront\n theColor\n theContents\n theFrameColor\n visible:=\n wid\n width\n x\n y\n \u2260\nfresh:textBoxWith:\n !=\n ::\n asDebugString\n asString\n basicAsString\n contents\n contents:=\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n width\n \u2260\nfresh:textFieldLabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n text\n text:=\n width\n \u2260\nfresh:textFieldUnlabeled:\n !=\n ::\n asDebugString\n asString\n basicAsString\n element\n eventSource\n flexible:=\n height\n isFlexible\n isMe\n keyEventSource()event\n label\n label:=\n mouseEventSource()event\n on()do\n on()withKeyDo\n on()withPointDo\n onBlurDo\n onChangeDo\n onFocusDo\n onKeyPressDo\n onKeyReleaseDo\n onKeyTypeDo\n onMouseClickDo\n onMouseDragDo\n onMouseEnterDo\n onMouseExitDo\n onMouseMoveDo\n onMousePressDo\n onMouseReleaseDo\n size\n text\n text:=\n width\n \u2260\nmethods-of:color.r()g()b:\n ==\n asString\n blue\n green\n red\nmethodtypes-of:Application:\n & 3\n & Container\n 3 startApplication -> Done\n 3 stopApplication -> Done\n 3 windowTitle -> String\n 3 windowTitle:=(value : String) -> Done\nmethodtypes-of:Audio:\n 16 isEnded -> Boolean\n 16 isLooping -> Boolean\n 16 looping:=(value : Boolean) -> Done\n 16 pause -> Done\n 16 play -> Done\n 16 source -> String\n 16 source:=(value : String) -> Done\nmethodtypes-of:Button:\nmethodtypes-of:Choice:\n & 14\n & Input\n 14 selected -> String\n 14 selected:=(value : String) -> Done\nmethodtypes-of:Color:\n 14 blue -> Number\n 14 green -> Number\n 14 red -> Number\nmethodtypes-of:Component:\n 1 element -> Done\n 1 flexible:=(value : Boolean) -> Done\n 1 height -> Number\n 1 isFlexible -> Boolean\n 1 onKeyPressDo(f : KeyResponse) -> Done\n 1 onKeyReleaseDo(f : KeyResponse) -> Done\n 1 onKeyTypeDo(f : KeyResponse) -> Done\n 1 onMouseClickDo(f : MouseResponse) -> Done\n 1 onMouseDragDo(f : MouseResponse) -> Done\n 1 onMouseEnterDo(f : MouseResponse) -> Done\n 1 onMouseExitDo(f : MouseResponse) -> Done\n 1 onMouseMoveDo(f : MouseResponse) -> Done\n 1 onMousePressDo(f : MouseResponse) -> Done\n 1 onMouseReleaseDo(f : MouseResponse) -> Done\n 1 size -> self.Point\n 1 width -> Number\nmethodtypes-of:ComponentFactory<T>:\n 16 fromElement(element : Unknown) -> T\n 16 ofElementType(tagName : String) -> T\nmethodtypes-of:Container:\n & 2\n & Component\n 2 append(component : Component) -> Done\n 2 arrangeHorizontal -> Done\n 2 arrangeVertical -> Done\n 2 at(index : Number) -> Component\n 2 at(index : Number)put(component : Component) -> Done\n 2 do(f : Procedure<Component>) -> Done\n 2 prepend(component : Component) -> Done\n 2 size -> Number\nmethodtypes-of:DrawingCanvas:\n & 4\n & Component\n 4 add(d : Graphic) -> Done\n 4 clear -> Done\n 4 height -> Number\n 4 notifyRedraw -> Done\n 4 remove(d : Graphic) -> Done\n 4 sendBackward(d : Graphic) -> Done\n 4 sendForward(d : Graphic) -> Done\n 4 sendToBack(d : Graphic) -> Done\n 4 sendToFront(d : Graphic) -> Done\n 4 startDrawing -> Done\n 4 width -> Number\nmethodtypes-of:Event:\n 14 source -> Component\nmethodtypes-of:Foreign:\nmethodtypes-of:Function2<T, U, R>:\nmethodtypes-of:Function<T, R>:\nmethodtypes-of:Graphic:\n 3 addToCanvas(canvas : DrawingCanvas) -> Done\n 3 color -> Color\n 3 color:=(c : Color) -> Done\n 3 contains(location : self.Point) -> Boolean\n 3 isVisible -> Boolean\n 3 location -> self.Point\n 3 moveBy(dx : Number, dy : Number) -> Done\n 3 moveTo(location : self.Point) -> Done\n 3 overlaps(graphic : Graphic2D) -> Boolean\n 3 removeFromCanvas -> Done\n 3 sendBackward -> Done\n 3 sendForward -> Done\n 3 sendToBack -> Done\n 3 sendToFront -> Done\n 3 visible:=(value : Boolean) -> Done\n 3 x -> Number\n 3 y -> Number\nmethodtypes-of:Graphic2D:\n & 6\n & Graphic\n 6 height -> Number\n 6 height:=(height : Number) -> Done\n 6 size -> self.Point\n 6 size:=(dimensions : self.Point) -> Done\n 6 width -> Number\n 6 width:=(width : Number) -> Done\nmethodtypes-of:GraphicApplication:\n & 5\n & Application\n 5 canvas -> DrawingCanvas\n 5 onMouseClick(mouse : self.Point) -> Done\n 5 onMouseDrag(mouse : self.Point) -> Done\n 5 onMouseEnter(mouse : self.Point) -> Done\n 5 onMouseExit(mouse : self.Point) -> Done\n 5 onMouseMove(mouse : self.Point) -> Done\n 5 onMousePress(mouse : self.Point) -> Done\n 5 onMouseRelease(mouse : self.Point) -> Done\n 5 startGraphics -> Done\nmethodtypes-of:Input:\n & 11\n & Labeled\n 11 onBlurDo(f : Response) -> Done\n 11 onChangeDo(f : Response) -> Done\n 11 onFocusDo(f : Response) -> Done\nmethodtypes-of:KeyEvent:\n & 16\n & Event\n 16 code -> Number\nmethodtypes-of:KeyResponse:\nmethodtypes-of:Labeled:\n & 10\n & Component\n 10 label -> String\n 10 label:=(value : String) -> Done\nmethodtypes-of:Line:\n & 7\n & Graphic\n 7 end -> self.Point\n 7 end:=(end' : self.Point) -> Done\n 7 setEndPoints(start' : self.Point, end' : self.Point) -> Done\n 7 start -> self.Point\n 7 start:=(start' : self.Point) -> Done\nmethodtypes-of:MouseEvent:\n & 15\n & Event\n 15 at -> self.Point\nmethodtypes-of:MouseResponse:\nmethodtypes-of:NumberField:\n & 13\n & Input\n 13 number -> Number\n 13 number:=(value : Number) -> Done\nmethodtypes-of:Procedure<T>:\nmethodtypes-of:Response:\nmethodtypes-of:Text:\n & 8\n & Graphic\n 8 contents -> String\n 8 contents:=(s : String) -> Done\n 8 fontSize -> Number\n 8 fontSize:=(size : Number) -> Done\n 8 width -> Number\nmethodtypes-of:TextBox:\n & 9\n & Component\n 9 contents -> String\n 9 contents:=(value : String) -> Done\nmethodtypes-of:TextField:\n & 12\n & Input\n 12 text -> String\n 12 text:=(value : String) -> Done\nmodules:\n ast\n dialect\n dom\n errormessages\n identifierKinds\n io\n math\n staticTypes\n stringMap\n sys\n unixFilePath\n util\npath:\n stobjectdraw\npublic:\n AndPattern\n Application\n Audio\n BaseType\n BasicPattern\n Binding\n BindingPattern\n Block0\n Block1\n Block2\n Block3\n BoundsError\n Button\n Choice\n Cmd\n Collection\n Color\n ColorOutOfRange\n Component\n ComponentFactory\n ConcurrentModification\n Container\n Dictionary\n DrawingCanvas\n Enumerable\n Event\n ExceptionKind\n Expandable\n Extractable\n FailedMatch\n Foreign\n Fun\n Fun2\n Fun3\n Function\n Function2\n Graphic\n Graphic2D\n GraphicApplication\n Input\n Iterable\n Iterator\n IteratorExhausted\n KeyEvent\n KeyResponse\n Labeled\n Line\n List\n MatchAndDestructuringPattern\n MatchResult\n MouseEvent\n MouseResponse\n NoSuchObject\n NumberField\n OrPattern\n Pattern\n Point\n Proc\n Proc2\n Proc3\n Procedure\n RequestError\n Response\n Sequence\n Set\n Singleton\n SubobjectResponsibility\n SuccessfulMatch\n Text\n TextBox\n TextField\n TypeIntersection\n TypeSubtraction\n TypeUnion\n TypeVariant\n UninitializedVariable\n VariablePattern\n WildcardPattern\n abstract\n alwaysEqual\n applicationTitle()size\n audioUrl\n binding\n black\n blue\n buttonLabeled\n checker\n collection\n collections\n color\n componentFromElement\n componentOfElementType\n containerEmpty\n containerFromElement\n containerOfElementType\n containerSize\n cyan\n dictionary\n do()while\n drawable2DAt()size()on\n drawableAt()on\n drawableImageAt()size()url()on\n drawingCanvasSize\n emptyDictionary\n emptyList\n emptySequence\n emptySet\n enumerable\n eventSource\n fieldOfType()labeled\n filledArcAt()size()from()to()on\n filledOvalAt()size()on\n filledRectAt()size()on\n for()and()do\n framedArcAt()size()from()to()on\n framedOvalAt()size()on\n framedRectAt()size()on\n graphicApplicationSize\n gray\n green\n indexable\n inputFromElement\n inputOfElementType\n inputOfType\n keyEventSource()event\n labeledWidgetFromElement\n labeledWidgetOfElementType\n labeledWidgetOfElementType()labeled\n lineFrom()length()direction()on\n lineFrom()to()on\n list\n magenta\n max\n methods\n min\n mouseEventSource()event\n neutral\n numberFieldLabeled\n numberFieldUnlabeled\n passwordFieldLabeled\n passwordFieldUnlabeled\n pi\n point2Dx()y\n randomColor\n randomIntFrom()to\n randomNumberFrom()to\n range\n red\n repeat()times\n required\n resizable2DAt()size()on\n selectBoxOptionsFrom\n sequence\n set\n textAt()with()on\n textBoxWith\n textFieldLabeled\n textFieldUnlabeled\n valueOf\n white\n yellow\ntypes:\n Application\n Audio\n Button\n Choice\n Color\n Component\n ComponentFactory\n Container\n DrawingCanvas\n Event\n Foreign\n Function\n Function2\n Graphic\n Graphic2D\n GraphicApplication\n Input\n KeyEvent\n KeyResponse\n Labeled\n Line\n MouseEvent\n MouseResponse\n NumberField\n Procedure\n Response\n Text\n TextBox\n TextField\n";
                                                                                                      if (typeof originalSourceLines !== "undefined") {
                                                                                                        originalSourceLines["stobjectdraw"] = [
                                                                                                          "#pragma ExtendedLineups",
                                                                                                          "inherit _prelude.methods",
                                                                                                          "",
                                                                                                          "import \"dom\" as dom",
                                                                                                          "import \"math\" as math",
                                                                                                          "import \"modules/staticTypes\" as st",
                                                                                                          "method checker(ast) { st.checker(ast) }",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "// ** Helpers ***************************************************",
                                                                                                          "",
                                                                                                          "// The frame rate of the drawing.",
                                                                                                          "def frameRate: Number = 30",
                                                                                                          "",
                                                                                                          "// A random number from m to n, inclusive.",
                                                                                                          "method randomNumberFrom (m: Number) to (n: Number) -> Number {",
                                                                                                          "    ((n - m) * math.random) + m",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// A random integer from m to n, inclusive.",
                                                                                                          "method randomIntFrom (m: Number) to (n: Number) -> Number {",
                                                                                                          "    (((n - m + 1) * math.random).truncated % (n - m + 1)) + m",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// A rough approximation of the value of pi.",
                                                                                                          "def pi: Number is public = π",
                                                                                                          "",
                                                                                                          "type Foreign = Unknown",
                                                                                                          "",
                                                                                                          "def document: Foreign = dom.document",
                                                                                                          "",
                                                                                                          "// Types of blocks representing functions taking an argument of type T",
                                                                                                          "// and returning a value of type R",
                                                                                                          "type Function<T, R> = prelude.Block1<T,R>",
                                                                                                          "",
                                                                                                          "// Types of blocks representing functions taking two arguments of type T and U",
                                                                                                          "// and returning a value of type R",
                                                                                                          "type Function2<T, U, R> = prelude.Block2<T, U, R>",
                                                                                                          "",
                                                                                                          "// Type of block taking argument of type T and returning Done",
                                                                                                          "type Procedure<T> = prelude.Block1<T,Done>",
                                                                                                          "",
                                                                                                          "// ** Types ********************************************************************",
                                                                                                          "",
                                                                                                          "// The super-type of all components in a GUI.",
                                                                                                          "type Component = {",
                                                                                                          "",
                                                                                                          "    // The underlying DOM element of the component.",
                                                                                                          "    element",
                                                                                                          "",
                                                                                                          "    // The width of this component.",
                                                                                                          "    width -> Number",
                                                                                                          "",
                                                                                                          "    // The height of this component.",
                                                                                                          "    height -> Number",
                                                                                                          "    ",
                                                                                                          "    // The size (width, height) of this component",
                                                                                                          "    size -> Point",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse click (press and release) in this component with the",
                                                                                                          "    // given event.",
                                                                                                          "    onMouseClickDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse press in this component with the response f.",
                                                                                                          "    onMousePressDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse release in this component with the response f.",
                                                                                                          "    onMouseReleaseDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse move in this component with the response f.",
                                                                                                          "    onMouseMoveDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse drag (move during press) in this component with the",
                                                                                                          "    // response f.",
                                                                                                          "    onMouseDragDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse entering this component with the response f.",
                                                                                                          "    onMouseEnterDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse exiting this component with the response f.",
                                                                                                          "    onMouseExitDo (f: MouseResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a key type (press and release) in this component with the response f.",
                                                                                                          "    onKeyTypeDo (f: KeyResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a key press in this component with the response f.",
                                                                                                          "    onKeyPressDo (f: KeyResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a key release in this component with the response f.",
                                                                                                          "    onKeyReleaseDo (f: KeyResponse) -> Done",
                                                                                                          "",
                                                                                                          "    // Whether this component will dynamically fill up any empty space in the",
                                                                                                          "    // direction of its parent container.",
                                                                                                          "    isFlexible -> Boolean",
                                                                                                          "",
                                                                                                          "    // Set whether this component will dynamically fill up any empty space in the",
                                                                                                          "    // direction of its parent container.",
                                                                                                          "    flexible := (value: Boolean) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// The type of components that contain other components.",
                                                                                                          "type Container = Component & type {",
                                                                                                          "",
                                                                                                          "    // The number of components inside this container.",
                                                                                                          "    size -> Number",
                                                                                                          "",
                                                                                                          "    // Retrieve the component at the given index.",
                                                                                                          "    at (index: Number) -> Component",
                                                                                                          "",
                                                                                                          "    // Put the given component at the given index.",
                                                                                                          "    at (index: Number) put(component: Component) -> Done",
                                                                                                          "",
                                                                                                          "    // Add a component to the end of the container.",
                                                                                                          "    append (component: Component) -> Done",
                                                                                                          "",
                                                                                                          "    // Add a component to the start of the container.",
                                                                                                          "    prepend (component: Component) -> Done",
                                                                                                          "",
                                                                                                          "    // Perform an action for every component inside this container.",
                                                                                                          "    do (f: Procedure<Component>) -> Done",
                                                                                                          "",
                                                                                                          "    // Arrange the contents of this container along the horizontal axis.",
                                                                                                          "    // Components which exceed the width of the container will wrap around.",
                                                                                                          "    arrangeHorizontal -> Done",
                                                                                                          "",
                                                                                                          "    // Arrange the contents of this container along the vertical axis.",
                                                                                                          "    // Components which exceed the height of the container will wrap around.",
                                                                                                          "    arrangeVertical -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// A standalone window which contains other components.",
                                                                                                          "type Application = Container & type {",
                                                                                                          "",
                                                                                                          "    // The title of the application window.",
                                                                                                          "    windowTitle -> String",
                                                                                                          "",
                                                                                                          "    // Set the title of the application window.",
                                                                                                          "    windowTitle:= (value: String) -> Done",
                                                                                                          "",
                                                                                                          "    // Create window with listeners for mouse enter and exit actions",
                                                                                                          "    startApplication -> Done",
                                                                                                          "",
                                                                                                          "    // Close the window",
                                                                                                          "    stopApplication -> Done",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Objects that can be drawn on a canvas and moved around.",
                                                                                                          "type Graphic = {",
                                                                                                          "",
                                                                                                          "    // The location of this object from the top-left corner of the screen.",
                                                                                                          "    location -> Point",
                                                                                                          "",
                                                                                                          "    // The horizontal location of this object from the top-left corner of the",
                                                                                                          "    // screen.",
                                                                                                          "    x -> Number",
                                                                                                          "",
                                                                                                          "    // The vertical location of this object from the top-left corner of the",
                                                                                                          "    // screen.",
                                                                                                          "    y -> Number",
                                                                                                          "",
                                                                                                          "    // Add this object to the given canvas.",
                                                                                                          "    addToCanvas (canvas: DrawingCanvas) -> Done",
                                                                                                          "",
                                                                                                          "    // Remove this object from its canvas.",
                                                                                                          "    removeFromCanvas -> Done",
                                                                                                          "",
                                                                                                          "    // Whether this object is currently set to be visible on the canvas.",
                                                                                                          "    isVisible -> Boolean",
                                                                                                          "",
                                                                                                          "    // Set whether this object is currently visible on the canvas.",
                                                                                                          "    visible:= (value: Boolean) -> Done",
                                                                                                          "",
                                                                                                          "    // Move this object to the given point on the canvas.",
                                                                                                          "    moveTo(location: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Move this object by the given distances on the canvas.",
                                                                                                          "    moveBy(dx: Number, dy: Number) -> Done",
                                                                                                          "",
                                                                                                          "    // Whether the given location is inside this object.",
                                                                                                          "    contains(location: Point) -> Boolean",
                                                                                                          "",
                                                                                                          "    // Whether any point in the given graphic is inside this object.",
                                                                                                          "    overlaps(graphic: Graphic2D) -> Boolean",
                                                                                                          "",
                                                                                                          "    // set the color of this object to c",
                                                                                                          "    color := (c: Color)->Done",
                                                                                                          "",
                                                                                                          "    // return the color of this object",
                                                                                                          "    color -> Color",
                                                                                                          "",
                                                                                                          "    // Send this object up one layer on the screen",
                                                                                                          "    sendForward -> Done",
                                                                                                          "",
                                                                                                          "    // send this object down one layer on the screen",
                                                                                                          "    sendBackward -> Done",
                                                                                                          "",
                                                                                                          "    // send this object to the top layer on the screen",
                                                                                                          "    sendToFront -> Done",
                                                                                                          "",
                                                                                                          "    // send this object to the bottom layer on the screen",
                                                                                                          "    sendToBack -> Done",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "// DrawingCanvas holding graphic objects",
                                                                                                          "type DrawingCanvas = Component & type {",
                                                                                                          "",
                                                                                                          "    // redraws the canvas and its contents regularly as needed",
                                                                                                          "    startDrawing -> Done",
                                                                                                          "",
                                                                                                          "    // add d to canvas",
                                                                                                          "    add (d: Graphic)->Done",
                                                                                                          "",
                                                                                                          "    // remove d from canvas",
                                                                                                          "    remove (d: Graphic)->Done",
                                                                                                          "",
                                                                                                          "    // Inform canvas that it needs to be redrawn",
                                                                                                          "    notifyRedraw -> Done",
                                                                                                          "",
                                                                                                          "    // clear the canvas",
                                                                                                          "    clear -> Done",
                                                                                                          "",
                                                                                                          "    // Send d to top layer of graphics",
                                                                                                          "    sendToFront (d: Graphic) -> Done",
                                                                                                          "",
                                                                                                          "    // send d to bottom layer of graphics",
                                                                                                          "    sendToBack (d: Graphic) -> Done",
                                                                                                          "",
                                                                                                          "    // send d up one layer in graphics",
                                                                                                          "    sendForward (d: Graphic) -> Done",
                                                                                                          "",
                                                                                                          "    // send d down one layer in graphics",
                                                                                                          "    sendBackward (d: Graphic) -> Done",
                                                                                                          "",
                                                                                                          "    // return the current dimensions of the canvas",
                                                                                                          "    width -> Number",
                                                                                                          "    height -> Number",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Type of object that runs a graphical application that draws",
                                                                                                          "// objects on a canvas included in the window and responds to mouse actions",
                                                                                                          "type GraphicApplication = Application & type {",
                                                                                                          "    // canvas holds graphic objects on screen",
                                                                                                          "    canvas -> DrawingCanvas",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse click (press and release) in the canvas at the given",
                                                                                                          "    // point.",
                                                                                                          "    onMouseClick (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse press in the canvas at the given point.",
                                                                                                          "    onMousePress (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse release in the canvas at the given point.",
                                                                                                          "    onMouseRelease (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse move in the canvas at the given point.",
                                                                                                          "    onMouseMove (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse drag (move during press) in the canvas at the given",
                                                                                                          "    // point.",
                                                                                                          "    onMouseDrag (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse entering the canvas at the given point.",
                                                                                                          "    onMouseEnter (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to a mouse exiting the canvas at the given point.",
                                                                                                          "    onMouseExit (mouse: Point) -> Done",
                                                                                                          "",
                                                                                                          "    // must be invoked to create window and its contents as well as prepare the",
                                                                                                          "    // window to handle mouse events",
                                                                                                          "    startGraphics -> Done",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Two-dimensional objects that can also be resized",
                                                                                                          "type Graphic2D = Graphic & type {",
                                                                                                          "",
                                                                                                          "    // dimensions of object",
                                                                                                          "    width -> Number",
                                                                                                          "    height -> Number",
                                                                                                          "    size -> Point",
                                                                                                          "",
                                                                                                          "    // Change dimensions of object",
                                                                                                          "    size := (dimensions: Point) -> Done",
                                                                                                          "    width := (width: Number) -> Done",
                                                                                                          "    height := (height: Number) -> Done",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// One-dimensional objects",
                                                                                                          "type Line = Graphic & type {",
                                                                                                          "    // start and end of line",
                                                                                                          "    start -> Point",
                                                                                                          "    end -> Point",
                                                                                                          "",
                                                                                                          "    // set start and end of line",
                                                                                                          "    start := (start': Point) -> Done",
                                                                                                          "    end := (end': Point) -> Done",
                                                                                                          "    setEndPoints (start': Point, end': Point) -> Done",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Text that can be drawn on a canvas.",
                                                                                                          "type Text = Graphic & type {",
                                                                                                          "",
                                                                                                          "    // return the contents displayed in the item",
                                                                                                          "    contents -> String",
                                                                                                          "",
                                                                                                          "    // reset the contents displayed to be s",
                                                                                                          "    contents := (s: String) -> Done",
                                                                                                          "",
                                                                                                          "    // return width of text item (currently inaccurate)",
                                                                                                          "    width -> Number",
                                                                                                          "",
                                                                                                          "    // return size of the font used to display the contents",
                                                                                                          "    fontSize -> Number",
                                                                                                          "",
                                                                                                          "    // Set the size of the font used to display the contents",
                                                                                                          "    fontSize := (size: Number) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Component of window that holds text",
                                                                                                          "type TextBox = Component & type {",
                                                                                                          "",
                                                                                                          "    // The text contents of the box.",
                                                                                                          "    contents -> String",
                                                                                                          "    contents:= (value: String) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Component of window that holds text",
                                                                                                          "type Labeled = Component & type {",
                                                                                                          "",
                                                                                                          "    // The label name.",
                                                                                                          "    label -> String",
                                                                                                          "    label:= (value: String) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// type of button component in window",
                                                                                                          "type Button = Labeled",
                                                                                                          "",
                                                                                                          "// Component that can take input and respond to an event",
                                                                                                          "type Input = Labeled & type {",
                                                                                                          "",
                                                                                                          "    // Respond to this input gaining focus with the given event.",
                                                                                                          "    onFocusDo(f: Response) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to this input losing focus with the given event.",
                                                                                                          "    onBlurDo(f: Response) -> Done",
                                                                                                          "",
                                                                                                          "    // Respond to this input having its value changed.",
                                                                                                          "    onChangeDo(f: Response) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Component in window taking user text input",
                                                                                                          "type TextField = Input & type {",
                                                                                                          "",
                                                                                                          "    // The contents of the text field.",
                                                                                                          "    text -> String",
                                                                                                          "    text := (value: String) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Component in window taking user numeric input",
                                                                                                          "type NumberField = Input & type {",
                                                                                                          "",
                                                                                                          "    // The contents of the number field.",
                                                                                                          "    number -> Number",
                                                                                                          "    number := (value: Number) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Type for pop-up menus",
                                                                                                          "type Choice = Input & type {",
                                                                                                          "",
                                                                                                          "    // The currently selected option.",
                                                                                                          "    selected -> String",
                                                                                                          "    selected := (value: String) -> Done",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// ** Colors *******************************************************************",
                                                                                                          "",
                                                                                                          "type Color = {",
                                                                                                          "    red -> Number     // The red component of the color.",
                                                                                                          "    green -> Number   // The green component of the color.",
                                                                                                          "    blue -> Number    // The blue component of the color.",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Exception that may be thrown if the r, b, or g components",
                                                                                                          "// are not between 0 and 255 (inclusive)",
                                                                                                          "def ColorOutOfRange: prelude.ExceptionKind is public =",
                                                                                                          "    ProgrammingError.refine \"Color Out Of Range\"",
                                                                                                          "",
                                                                                                          "// Simple color class",
                                                                                                          "def color is public = object {",
                                                                                                          "    class r (r': Number) g (g': Number) b (b': Number) -> Color {",
                                                                                                          "        // Creates a color with rgb coordinates r', g', and b'",
                                                                                                          "        if ((r' < 0) || (r' > 255)) then {",
                                                                                                          "            ColorOutOfRange.raise \"red index {r'} out of bounds 0..255\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        if ((g' < 0) || (g' > 255)) then {",
                                                                                                          "            ColorOutOfRange.raise \"green index {g'} out of bounds 0..255\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        if ((b' < 0) || (b' > 255)) then {",
                                                                                                          "            ColorOutOfRange.raise \"blue index {b'} out of bounds 0..255\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        def red:Number is public = r'.truncated",
                                                                                                          "        def green:Number is public = g'.truncated",
                                                                                                          "        def blue:Number is public = b'.truncated",
                                                                                                          "",
                                                                                                          "        method == (c: Color) -> Boolean {",
                                                                                                          "             (red == c.red) && (green == c.green) && (blue == c.blue)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"color w/ rgb({red}, {green}, {blue})\"",
                                                                                                          "        }",
                                                                                                          "    }",
                                                                                                          "        ",
                                                                                                          "    method random -> Color {",
                                                                                                          "        // Produce a random color.",
                                                                                                          "        r (randomIntFrom (0) to (255))",
                                                                                                          "            g (randomIntFrom (0) to (255))",
                                                                                                          "            b (randomIntFrom (0) to (255))",
                                                                                                          "    }",
                                                                                                          "",
                                                                                                          "    def white:Color is public = r (255) g (255) b (255)",
                                                                                                          "    def black:Color is public = r (0) g (0) b (0)",
                                                                                                          "    def green:Color is public = r (0) g (255) b (0)",
                                                                                                          "    def red:Color is public = r (255) g (0) b (0)",
                                                                                                          "    def gray:Color is public = r (60) g (60) b (60)",
                                                                                                          "    def blue:Color is public = r (0) g (0) b (255)",
                                                                                                          "    def cyan:Color is public = r (0) g (255) b (255)",
                                                                                                          "    def magenta:Color is public = r (255) g (0) b (255)",
                                                                                                          "    def yellow:Color is public = r (255) g (255) b (0)",
                                                                                                          "    def neutral:Color is public = r (220) g (220) b (220)",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Predefined colors.  Deprecated: use color.white, etc.",
                                                                                                          "def white:Color is public = color.r (255) g (255) b (255)",
                                                                                                          "def black:Color is public = color.r (0) g (0) b (0)",
                                                                                                          "def green:Color is public = color.r (0) g (255) b (0)",
                                                                                                          "def red:Color is public = color.r (255) g (0) b (0)",
                                                                                                          "def gray:Color is public = color.r (60) g (60) b (60)",
                                                                                                          "def blue:Color is public = color.r (0) g (0) b (255)",
                                                                                                          "def cyan:Color is public = color.r (0) g (255) b (255)",
                                                                                                          "def magenta:Color is public = color.r (255) g (0) b (255)",
                                                                                                          "def yellow:Color is public = color.r (255) g (255) b (0)",
                                                                                                          "def neutral:Color is public = color.r (220) g (220) b (220)",
                                                                                                          "",
                                                                                                          "// A random color.  Deprecated: use color.random",
                                                                                                          "method randomColor -> Color { color.random }",
                                                                                                          "",
                                                                                                          "// ** Events *******************************************************************",
                                                                                                          "",
                                                                                                          "// Generic event containing source of the event.",
                                                                                                          "type Event = {",
                                                                                                          "    source -> Component",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Mouse event containing mouse location when event generated",
                                                                                                          "type MouseEvent = Event & type {",
                                                                                                          "    at -> Point",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Type of an event associated with a key press",
                                                                                                          "type KeyEvent = Event & type {",
                                                                                                          "    //character -> String",
                                                                                                          "    code -> Number",
                                                                                                          "    //modifiers -> Modifiers",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// type of an action taking an Event as a paramter",
                                                                                                          "type Response = Procedure<Event>",
                                                                                                          "",
                                                                                                          "// type of an action taking a MouseEvent as a parameter",
                                                                                                          "type MouseResponse = Procedure<MouseEvent>",
                                                                                                          "",
                                                                                                          "// type of an action taking a KeyEvent as a parameter",
                                                                                                          "type KeyResponse = Procedure<KeyEvent>",
                                                                                                          "",
                                                                                                          "class eventSource (source':Component) -> Event {",
                                                                                                          "        // Creates an event generated by source'",
                                                                                                          "",
                                                                                                          "        def source: Component is public = source'",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Event on {source}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class mouseEventSource (source':Component) event (event':Foreign) -> MouseEvent {",
                                                                                                          "        // Creates a mouseEvent with the mouse location from event'",
                                                                                                          "",
                                                                                                          "        inherit eventSource (source')",
                                                                                                          "        def at: Point is public = (event'.pageX - source.element.offsetLeft) @",
                                                                                                          "            (event'.pageY - source.element.offsetTop)",
                                                                                                          "",
                                                                                                          "        // String representation of the mouse event",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Mouse event on {source} at {at}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class keyEventSource (source':Component) event(event':Foreign) -> KeyEvent {",
                                                                                                          "        // Creates an event with the key-code from event'",
                                                                                                          "        inherit eventSource(source')",
                                                                                                          "        def code: Number is public = event'.which",
                                                                                                          "        //def character is public = dom.window.String.fromCharCode(event'.which)",
                                                                                                          "",
                                                                                                          "        // String representation of the key event",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Event on {source} for key-code {code}\"",
                                                                                                          "        }",
                                                                                                          "    ",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "// ** Internal factories *******************************************************",
                                                                                                          "",
                                                                                                          "// where T <: Component",
                                                                                                          "type ComponentFactory<T> = {",
                                                                                                          "",
                                                                                                          "    // Build a component around an existing element.",
                                                                                                          "    fromElement (element) -> T",
                                                                                                          "",
                                                                                                          "    // Build a component around a new element of the given tag name.",
                                                                                                          "    ofElementType (tagName: String) -> T",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "def maxClickTime: Number = 200",
                                                                                                          "// The maximum number of milliseconds for which the mouse-button can be held",
                                                                                                          "// down in order for the event to be registered as a click.",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class componentFromElement (element') -> Component {",
                                                                                                          "        def element is public = element'",
                                                                                                          "",
                                                                                                          "        // width of component",
                                                                                                          "        method width -> Number {",
                                                                                                          "            element.width",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // height of component",
                                                                                                          "        method height -> Number {",
                                                                                                          "            element.height",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        // dimensions of component",
                                                                                                          "        method size -> Point {",
                                                                                                          "            element.width @ element.height",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // assocate action f with event' on component",
                                                                                                          "        method on(event': String)",
                                                                                                          "              do(f: Procedure<Foreign>) -> Done is confidential {",
                                                                                                          "            element.addEventListener(event', f)",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // associate response f to mouse event of kind",
                                                                                                          "        method on (kind: String)",
                                                                                                          "              withPointDo (f:MouseResponse) -> Done is confidential {",
                                                                                                          "            on (kind) do { event' ->",
                                                                                                          "                f.apply (mouseEventSource (self) event (event'))",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        // debug: This is declared outside and should be visible, but its not!!",
                                                                                                          "        class mouseEventSource(source')event(event') is confidential {",
                                                                                                          "            def source is public = source'",
                                                                                                          "            def at is public  = (event'.pageX - source.element.offsetLeft) @",
                                                                                                          "                    (event'.pageY - source.element.offsetTop)",
                                                                                                          "            method asString {\"Mouse event on {source} at {at}\"}",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "        method onMouseClickDo (f:MouseResponse) -> Done {",
                                                                                                          "            // Associates action f with mouse click event",
                                                                                                          "            var lastDown: Foreign",
                                                                                                          "",
                                                                                                          "            on \"mousedown\" do {event': Foreign ->",
                                                                                                          "                lastDown:= event'.timeStamp",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            on \"click\" do {event': Foreign ->",
                                                                                                          "                if ((event'.timeStamp - lastDown) <= maxClickTime) then {",
                                                                                                          "                    f.apply (mouseEventSource(self) event(event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse press event",
                                                                                                          "        method onMousePressDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mousedown\" withPointDo (f)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse release event",
                                                                                                          "        method onMouseReleaseDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mouseup\" withPointDo (f)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse move event",
                                                                                                          "        method onMouseMoveDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mousemove\" do { event' ->",
                                                                                                          "                if (if (dom.doesObject (event') haveProperty (\"buttons\")) then {",
                                                                                                          "                    event'.buttons == 0",
                                                                                                          "                } else {",
                                                                                                          "                    event'.which == 0",
                                                                                                          "                }) then {",
                                                                                                          "                    f.apply(mouseEventSource (self) event (event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse drag event",
                                                                                                          "        method onMouseDragDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mousemove\" do { event' ->",
                                                                                                          "                if (if (dom.doesObject (event') haveProperty (\"buttons\")) then {",
                                                                                                          "                    event'.buttons == 1",
                                                                                                          "                } else {",
                                                                                                          "                    event'.which == 1",
                                                                                                          "                }) then {",
                                                                                                          "                    f.apply(mouseEventSource (self) event(event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse enter (of window) event",
                                                                                                          "        method onMouseEnterDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mouseover\" do { event' ->",
                                                                                                          "                def from = event'.relatedTarget",
                                                                                                          "//                print(\"dom = {dom}\")",
                                                                                                          "//                print(\"dom.noObject = {dom.noObject}\")",
                                                                                                          "//                print(\"from = {from}\")",
                                                                                                          "//                print(\"element = {element}\")",
                                                                                                          "//                print(\"self ={self}\")",
                                                                                                          "//                print(\"event' = {event'}\")",
                                                                                                          "//                print(\"dom.noObject == from = {dom.noObject == from}\")",
                                                                                                          "//                print(\"!element.contains(from) = {!element.contains(from)}\")",
                                                                                                          "                if ((dom.noObject == from) || {!element.contains(from)}) then {",
                                                                                                          "//                    print(\"in if\")",
                                                                                                          "//                    print(\"mouseEventSource (self) event (event') = {outer.mouseEventSource (self) event (event')}\")",
                                                                                                          "                    f.apply (mouseEventSource (self) event (event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to mouse exit event",
                                                                                                          "        method onMouseExitDo (f: MouseResponse) -> Done {",
                                                                                                          "            on \"mouseout\" do {event' ->",
                                                                                                          "                def to = event'.relatedTarget",
                                                                                                          "",
                                                                                                          "                if ((dom.noObject == to) || {!element.contains (to)}) then {",
                                                                                                          "                    f.apply (mouseEventSource (self) event (event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        // DEBUG: Needed to add because not visible in method \"on\" below",
                                                                                                          "        ",
                                                                                                          "        class eventSource (source':Component) -> Event {",
                                                                                                          "            // Creates an event generated by source'",
                                                                                                          "",
                                                                                                          "            def source: Component is public = source'",
                                                                                                          "",
                                                                                                          "            method asString -> String {",
                                                                                                          "                \"Event on {source}\"",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        class keyEventSource (source':Component) event(event':Foreign) -> KeyEvent {",
                                                                                                          "            // Creates an event with the key-code from event'",
                                                                                                          "            inherit eventSource(source')",
                                                                                                          "            def code: Number is public = event'.which",
                                                                                                          "            //def character is public = dom.window.String.fromCharCode(event'.which)",
                                                                                                          "",
                                                                                                          "            // String representation of the key event",
                                                                                                          "            method asString -> String {",
                                                                                                          "                \"Event on {source} for key-code {code}\"",
                                                                                                          "            }",
                                                                                                          "    ",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to key event of kind",
                                                                                                          "        method on (kind: String)",
                                                                                                          "              withKeyDo (f: KeyResponse) -> Done is confidential {",
                                                                                                          "            on (kind) do {event' ->",
                                                                                                          "                f.apply (keyEventSource (self) event (event'))",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to key press event",
                                                                                                          "        method onKeyPressDo(f: KeyResponse) -> Done {",
                                                                                                          "            on \"keydown\" withKeyDo (f)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f to key release event",
                                                                                                          "        method onKeyReleaseDo (f: KeyResponse) -> Done {",
                                                                                                          "            on \"keyup\" withKeyDo (f)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate action f tokey type (press & release) event",
                                                                                                          "        method onKeyTypeDo (f: KeyResponse) -> Done {",
                                                                                                          "            on \"keypress\" withKeyDo (f)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Does component have some flex in size",
                                                                                                          "        method isFlexible -> Boolean {",
                                                                                                          "            element.style.flexGrow.asNumber > 0",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Set whether component is flexibile",
                                                                                                          "        method flexible:= (value: Boolean) -> Done {",
                                                                                                          "            element.style.flexGrow := if (value) then {",
                                                                                                          "                1",
                                                                                                          "            } else {",
                                                                                                          "                0",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // string representation of component",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"a component\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class componentOfElementType (tagName:String) -> Component {",
                                                                                                          "        // Creates a component with type tagName",
                                                                                                          "",
                                                                                                          "        inherit componentFromElement (document.createElement (tagName))",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class containerOfElementType (tagName: String) -> Component {",
                                                                                                          "        inherit containerFromElement (document.createElement (tagName))",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Create a new Component from element'",
                                                                                                          "class containerFromElement (element') -> Container {",
                                                                                                          "        inherit componentFromElement (element')",
                                                                                                          "",
                                                                                                          "        def children = []",
                                                                                                          "",
                                                                                                          "        // Number of children",
                                                                                                          "        method size -> Number {",
                                                                                                          "            children.size",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Is it empty?",
                                                                                                          "        method isEmpty -> Boolean {",
                                                                                                          "            size == 0",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Subcomponent at position index",
                                                                                                          "        method at (index: Number) -> Component {",
                                                                                                          "            if ((index < 1) || (index > size)) then {",
                                                                                                          "                collections.BoundsError.raiseForIndex (index)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            children.at (index)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Replace subcomponent at index by aComponent",
                                                                                                          "        method at (index: Number) put (aComponent: Component) -> Done {",
                                                                                                          "            if ((index < 1) || (index > (size + 1))) then {",
                                                                                                          "                BoundsError.raiseForIndex (index)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            if (index == (size + 1)) then {",
                                                                                                          "                element.appendChild (aComponent.element)",
                                                                                                          "            } else {",
                                                                                                          "                element.insertBefore (aComponent.element, children.at (index).element)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            children.at (index) put (aComponent)",
                                                                                                          "",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Add aComponent after all existing components in the container",
                                                                                                          "        method append (aComponent: Component) -> Done {",
                                                                                                          "            element.appendChild (aComponent.element)",
                                                                                                          "",
                                                                                                          "            children.push (aComponent)",
                                                                                                          "",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Add aComponent before all existing components in the container",
                                                                                                          "        method prepend (aComponent: Component) -> Done {",
                                                                                                          "            if (isEmpty) then {",
                                                                                                          "                element.appendChild (aComponent.element)",
                                                                                                          "            } else {",
                                                                                                          "                element.insertBefore (aComponent.element, element.firstChild)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            children.unshift (aComponent)",
                                                                                                          "",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Apply f to all children of container.",
                                                                                                          "        method do (f: Procedure<Component>) -> Done {",
                                                                                                          "            for (children) do {aComponent: Component ->",
                                                                                                          "                f.apply(aComponent)",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Generalize binary function f to apply to all children of container.",
                                                                                                          "        // Value if no children is initial",
                                                                                                          "        method fold<T>(f: Function2<T, Component, T>)",
                                                                                                          "              startingWith (initial: T) -> T {",
                                                                                                          "            var value: T:= initial",
                                                                                                          "",
                                                                                                          "            for (children) do {aComponent: Component ->",
                                                                                                          "                value:= f.apply (value, aComponent)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Make container more flexible",
                                                                                                          "        method flex -> Done is confidential {",
                                                                                                          "            element.style.display := \"inline-flex\"",
                                                                                                          "            element.style.justifyContent := \"center\"",
                                                                                                          "            element.style.flexFlow := \"row wrap\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Arrange elements in rows",
                                                                                                          "        method arrangeHorizontal -> Done {",
                                                                                                          "            flex",
                                                                                                          "            element.style.flexDirection:= \"row\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Arrange elements in columns",
                                                                                                          "        method arrangeVertical -> Done {",
                                                                                                          "            flex",
                                                                                                          "            element.style.flexDirection := \"column\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // return description of container",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"container: with {size} children\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Create an empty container ready to add in row",
                                                                                                          "class containerEmpty -> Container {",
                                                                                                          "        inherit containerOfElementType (\"div\")",
                                                                                                          "",
                                                                                                          "        self.arrangeHorizontal",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Set empty container with given width' and height'",
                                                                                                          "class containerSize (width': Number, height': Number) -> Container {",
                                                                                                          "        inherit containerEmpty",
                                                                                                          "",
                                                                                                          "        self.element.style.width:= \"{width'}px\"",
                                                                                                          "        self.element.style.height:= \"{height'}px\"",
                                                                                                          "        self.element.style.overflow:= \"auto\"",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// A factory building components that take input",
                                                                                                          "class inputFromElement (element') -> Input {",
                                                                                                          "        inherit componentFromElement(element')",
                                                                                                          "",
                                                                                                          "        // Respond with action f to this input gaining focus with the given event.",
                                                                                                          "        method onFocusDo (f: Response) -> Done {",
                                                                                                          "            element.addEventListener (\"focus\", { _ ->",
                                                                                                          "                f.apply (eventSource (self))",
                                                                                                          "            })",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Respond with action f to this input losing focus with the given event.",
                                                                                                          "        method onBlurDo (f: Response) -> Done {",
                                                                                                          "            element.addEventListener(\"blur\", { _ ->",
                                                                                                          "                f.apply(eventSource(self))",
                                                                                                          "            })",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Respond with action f to this input having its value changed.",
                                                                                                          "        method onChangeDo (f: Response) -> Done {",
                                                                                                          "            element.addEventListener (\"change\", { _ ->",
                                                                                                          "                f.apply(eventSource(self))",
                                                                                                          "            })",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // return description of component",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"an input\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Create component of type elementType to handle input",
                                                                                                          "class inputOfElementType(elementType: String) -> Input {",
                                                                                                          "        inherit inputFromElement (document.createElement (elementType))",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Create component of type inputType to handle input",
                                                                                                          "class inputOfType (inputType: String) -> Input {",
                                                                                                          "        inherit inputOfElementType(\"input\")",
                                                                                                          "",
                                                                                                          "        self.element.setAttribute (\"type\", inputType)",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class labeledWidgetFromElement (element') -> Labeled {",
                                                                                                          "        // create labeled input from element'",
                                                                                                          "",
                                                                                                          "        inherit inputFromElement (element')",
                                                                                                          "",
                                                                                                          "        method labelElement -> Foreign is confidential {",
                                                                                                          "            self.element",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method label -> String {",
                                                                                                          "            // answers the Text of the label",
                                                                                                          "            labelElement.textContent",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method label:= (value: String) -> Done {",
                                                                                                          "            // sets the label to value",
                                                                                                          "            labelElement.textContent:= value",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            // a human-readable description of this object",
                                                                                                          "            \"an input labeled: {label}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class labeledWidgetOfElementType (elementType:String) -> Labeled {",
                                                                                                          "        // creates labeled input a new document of elementType",
                                                                                                          "",
                                                                                                          "        inherit labeledWidgetFromElement (document.createElement (elementType))",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class labeledWidgetOfElementType (elementType: String)",
                                                                                                          "          labeled(newLabel: String) -> Labeled {",
                                                                                                          "        // Create labeled element from elementType with newLabel",
                                                                                                          "",
                                                                                                          "        inherit labeledWidgetOfElementType(elementType)",
                                                                                                          "        self.label := newLabel",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class fieldOfType(inputType: String) labeled(label': String) -> Input {",
                                                                                                          "        // Create input field of type inputType showing label'",
                                                                                                          "",
                                                                                                          "        inherit inputOfType(inputType)",
                                                                                                          "",
                                                                                                          "        // label on the field",
                                                                                                          "        method label -> String {",
                                                                                                          "            self.element.placeholder",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // reset the label on the field",
                                                                                                          "        method label:= (value: String) -> Done {",
                                                                                                          "            self.element.placeholder:= value",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // String representing the labeled field (including label)",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"a field labeled: {label}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        label:= label'",
                                                                                                          "",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "// ** External factories *******************************************************",
                                                                                                          "",
                                                                                                          "// Log entry to keep take of response to an event",
                                                                                                          "class eventLogKind(kind': String)",
                                                                                                          "      response(response': Procedure) is confidential {",
                                                                                                          "    def kind: String is public = kind'",
                                                                                                          "    def response: Procedure is public = response'",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class applicationTitle(initialTitle: String)",
                                                                                                          "          size (dimensions': Point) -> Application {",
                                                                                                          "        // Create an application with window titled initialTitle and",
                                                                                                          "        // size dimensions'",
                                                                                                          "",
                                                                                                          "        inherit containerFromElement(document.createDocumentFragment)",
                                                                                                          "",
                                                                                                          "        var isOpened: Boolean:= false  // whether window is visible",
                                                                                                          "        var theWindow: Foreign",
                                                                                                          "",
                                                                                                          "        var theTitle: String:= initialTitle",
                                                                                                          "        var theWidth: Number:= dimensions'.x",
                                                                                                          "        var theHeight: Number:= dimensions'.y",
                                                                                                          "",
                                                                                                          "        def events = []",
                                                                                                          "",
                                                                                                          "        method element -> Foreign {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.document.body",
                                                                                                          "            } else {",
                                                                                                          "                super.element",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Whether new items are added to window from left to right or top to bottom",
                                                                                                          "        var isHorizontal: Boolean:= true",
                                                                                                          "",
                                                                                                          "        // Arrange the contents of this container along the horizontal axis.",
                                                                                                          "        // Components which exceed the width of the container will wrap around.",
                                                                                                          "        method arrangeHorizontal -> Done {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                super.arrangeHorizontal",
                                                                                                          "            } else {",
                                                                                                          "                isHorizontal:= true",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Arrange the contents of this container along the vertical axis.",
                                                                                                          "        // Components which exceed the height of the container will wrap around.",
                                                                                                          "        method arrangeVertical -> Done {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                super.arrangeVertical",
                                                                                                          "            } else {",
                                                                                                          "                isHorizontal:= false",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Associate response with event kind",
                                                                                                          "        method on (kind: String)",
                                                                                                          "              do (response: Procedure<Event>) -> Done is confidential {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.addEventListener (kind, response)",
                                                                                                          "            } else {",
                                                                                                          "                events.push (eventLogKind (kind) response (response))",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // The title of the application window.",
                                                                                                          "        method windowTitle -> String {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.title",
                                                                                                          "            } else {",
                                                                                                          "                theTitle",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Set the title of the application window.",
                                                                                                          "        method windowTitle:= (value: String) -> Done {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.title:= value",
                                                                                                          "            } else {",
                                                                                                          "                theTitle:= value",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // The current width of the window",
                                                                                                          "        method width -> Number {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.width",
                                                                                                          "            } else {",
                                                                                                          "                theWidth",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // the current height of the window",
                                                                                                          "        method height -> Number {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.height",
                                                                                                          "            } else {",
                                                                                                          "                theHeight",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // The enter/exit events need to be redefined to account for the body element",
                                                                                                          "        // not necessarily accounting for all of the space in the window. If we only",
                                                                                                          "        // consider cases where relatedTarget is null, then it represents only enter",
                                                                                                          "        // and exit of the whole window.",
                                                                                                          "",
                                                                                                          "        // Respond to a mouse entering this window with the response f.",
                                                                                                          "        method onMouseEnterDo(f: MouseResponse) -> Done {",
                                                                                                          "            on \"mouseover\" do { event' ->",
                                                                                                          "                def from = event'.relatedTarget",
                                                                                                          "",
                                                                                                          "                if (dom.noObject == from) then {",
                                                                                                          "                    f.apply(mouseEventSource(self) event(event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        // Respond to a mouse exiting this window with the response f.",
                                                                                                          "        method onMouseExitDo(f: MouseResponse) -> Done {",
                                                                                                          "            on \"mouseout\" do { event' ->",
                                                                                                          "                def to = event'.relatedTarget",
                                                                                                          "",
                                                                                                          "                if (dom.noObject == to) then {",
                                                                                                          "                    f.apply(mouseEventSource(self) event(event'))",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Respond to mouse action of kind with response bl",
                                                                                                          "        method onMouse (kind: String) do (bl: MouseResponse) -> Done is confidential {",
                                                                                                          "            theWindow.addEventListener(kind, {evt ->",
                                                                                                          "                bl.apply(evt.pageX @ evt.pageY)",
                                                                                                          "            })",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Create window with listeners for mouse enter and exit actions",
                                                                                                          "        method startApplication -> Done {",
                                                                                                          "            if (!isOpened) then {",
                                                                                                          "                theWindow:= dom.window.open(\"\", \"\", \"width={theWidth},height={theHeight}\")",
                                                                                                          "                theWindow.document.title:= theTitle",
                                                                                                          "                theWindow.document.body.appendChild(element)",
                                                                                                          "",
                                                                                                          "                if (dom.doesObject(dom.window) haveProperty(\"graceRegisterWindow\")) then {",
                                                                                                          "                    dom.window.graceRegisterWindow(theWindow)",
                                                                                                          "                }",
                                                                                                          "",
                                                                                                          "                isOpened:= true",
                                                                                                          "",
                                                                                                          "                element.style.width:= \"100%\"",
                                                                                                          "                element.style.margin:= \"0px\"",
                                                                                                          "",
                                                                                                          "                if (isHorizontal) then {",
                                                                                                          "                    arrangeHorizontal",
                                                                                                          "                } else {",
                                                                                                          "                    arrangeVertical",
                                                                                                          "                }",
                                                                                                          "",
                                                                                                          "                for (events) do { anEvent ->",
                                                                                                          "                    on(anEvent.kind) do(anEvent.response)",
                                                                                                          "                }",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Close the window",
                                                                                                          "        method stopApplication  -> Done {",
                                                                                                          "            if (isOpened) then {",
                                                                                                          "                theWindow.close",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representing the application",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"application titled {windowTitle}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class drawingCanvasSize (dimensions': Point) -> DrawingCanvas {",
                                                                                                          "        // class representing a window panel that manages graphics on screen",
                                                                                                          "        // The window containing the canvas has dimensions width' x height'",
                                                                                                          "",
                                                                                                          "        inherit componentFromElement(document.createElement(\"canvas\"))",
                                                                                                          "",
                                                                                                          "        element.width:= dimensions'.x",
                                                                                                          "        element.height:= dimensions'.y",
                                                                                                          "        element.style.alignSelf:= \"center\"",
                                                                                                          "",
                                                                                                          "        def theContext: Foreign = element.getContext(\"2d\")",
                                                                                                          "        theContext.lineWidth:= 2",
                                                                                                          "",
                                                                                                          "        // Current width of the canvas",
                                                                                                          "        method width -> Number {",
                                                                                                          "            element.width",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Current height of the canvas",
                                                                                                          "        method height -> Number {",
                                                                                                          "            element.height",
                                                                                                          "        }",
                                                                                                          "        ",
                                                                                                          "        method size -> Point {element.width @ element.height}",
                                                                                                          "",
                                                                                                          "        // list of all objects on canvas (hidden or not)",
                                                                                                          "        var theGraphics:= [ ] // emptyList",
                                                                                                          "",
                                                                                                          "        var redraw: Boolean:= false",
                                                                                                          "",
                                                                                                          "        // Inform canvas that it needs to be redrawn",
                                                                                                          "        method notifyRedraw -> Done {",
                                                                                                          "            redraw:= true",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // redraws the canvas and its contents regularly as needed",
                                                                                                          "        method startDrawing -> Done {",
                                                                                                          "            element.ownerDocument.defaultView.setInterval ({",
                                                                                                          "                if (redraw) then {",
                                                                                                          "                    dom.draw (theContext, theGraphics, width, height)",
                                                                                                          "                }",
                                                                                                          "            }, 1000 / frameRate)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // remove all items from canvas",
                                                                                                          "        method clear -> Done {",
                                                                                                          "            theGraphics:= []",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Add new item d to canvas",
                                                                                                          "        method add (d:Graphic) -> Done {",
                                                                                                          "            theGraphics.push(d)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // remove aGraphic from items on canvas",
                                                                                                          "        method remove (aGraphic: Graphic) -> Done {",
                                                                                                          "            if (theGraphics.contains(aGraphic)) then {",
                                                                                                          "                theGraphics.remove (aGraphic)",
                                                                                                          "                notifyRedraw",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send item d to front/top layer of canvas",
                                                                                                          "        method sendToFront (aGraphic: Graphic) -> Done {",
                                                                                                          "            theGraphics.remove (aGraphic)",
                                                                                                          "            theGraphics.push (aGraphic)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send item d to back/bottom layer of canvas",
                                                                                                          "        method sendToBack (aGraphic: Graphic) -> Done {",
                                                                                                          "            theGraphics.remove (aGraphic)",
                                                                                                          "            theGraphics.unshift (aGraphic)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send item d one layer higher on canvas",
                                                                                                          "        method sendForward (aGraphic: Graphic) -> Done {",
                                                                                                          "            def theIndex = theGraphics.indexOf (aGraphic)",
                                                                                                          "",
                                                                                                          "            if (theIndex != theGraphics.size) then {",
                                                                                                          "                theGraphics.remove (aGraphic)",
                                                                                                          "                theGraphics.at (theIndex + 1) add (aGraphic)",
                                                                                                          "                notifyRedraw",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send item d one layer lower on canvas",
                                                                                                          "        method sendBackward (aGraphic: Graphic)->Done {",
                                                                                                          "            def theIndex = theGraphics.indexOf(aGraphic)",
                                                                                                          "",
                                                                                                          "            if (theIndex != 1) then {",
                                                                                                          "                theGraphics.remove (aGraphic)",
                                                                                                          "                theGraphics.at (theIndex - 1) add (aGraphic)",
                                                                                                          "                notifyRedraw",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // debug method to print all objects on canvas",
                                                                                                          "        method printObjects -> Done {",
                                                                                                          "            for (theGraphics) do { aGraphic ->",
                                                                                                          "                print (aGraphic)",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // string representation of canvas",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"canvas: with {theGraphics.size} objects\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class graphicApplicationSize (theDimension':Point) -> GraphicApplication {",
                                                                                                          "        // Create window with dimensions theDimension', with canvas",
                                                                                                          "        // installed, and that responds to mouse actions",
                                                                                                          "",
                                                                                                          "        inherit applicationTitle (\"Simple graphics\") size (theDimension')",
                                                                                                          "",
                                                                                                          "        def canvas: DrawingCanvas is public = drawingCanvasSize (theDimension')",
                                                                                                          "",
                                                                                                          "        children.push (canvas)",
                                                                                                          "",
                                                                                                          "        def before: Container = containerEmpty",
                                                                                                          "        def after: Container = containerEmpty",
                                                                                                          "",
                                                                                                          "        arrangeVertical",
                                                                                                          "        element.appendChild (before.element)",
                                                                                                          "        element.appendChild (canvas.element)",
                                                                                                          "        element.appendChild (after.element)",
                                                                                                          "",
                                                                                                          "        // Add a component to the top of the window.",
                                                                                                          "        method prepend (aComponent: Component) -> Done {",
                                                                                                          "            before.prepend (aComponent)",
                                                                                                          "            children.unshift (aComponent)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Add a component to the bottom of the window.",
                                                                                                          "        method append (aComponent: Component) -> Done {",
                                                                                                          "            after.append (aComponent)",
                                                                                                          "            children.push (aComponent)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // The following methods are defind to be called in response to mouse",
                                                                                                          "        // actions.  They will be overridden in subclasses to provide appropriate",
                                                                                                          "        // behavior, as now they do nothing!",
                                                                                                          "        // Method to handle mouse click at pt",
                                                                                                          "        method onMouseClick (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse press at pt",
                                                                                                          "        method onMousePress (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse release at pt",
                                                                                                          "        method onMouseRelease (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse move at pt",
                                                                                                          "        method onMouseMove (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse drag at pt",
                                                                                                          "        method onMouseDrag (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse enter of canvas at pt",
                                                                                                          "        method onMouseEnter (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Method to handle mouse exit of canvas at pt",
                                                                                                          "        method onMouseExit (pt: Point) -> Done {}",
                                                                                                          "",
                                                                                                          "        // Create window and its contents as well as prepare the",
                                                                                                          "        // window to handle mouse events",
                                                                                                          "        method startGraphics -> Done {",
                                                                                                          "            def parentElement = document.createElement (\"div\")",
                                                                                                          "            parentElement.className := \"height-calculator\"",
                                                                                                          "            parentElement.style.width := \"{theDimension'.x}px\"",
                                                                                                          "            parentElement.appendChild (element.cloneNode (true))",
                                                                                                          "            document.body.appendChild (parentElement)",
                                                                                                          "            theHeight:= parentElement.offsetHeight",
                                                                                                          "            document.body.removeChild (parentElement)",
                                                                                                          "",
                                                                                                          "            startApplication",
                                                                                                          "            canvas.startDrawing",
                                                                                                          "",
                                                                                                          "            theWindow.document.documentElement.style.overflow := \"hidden\"",
                                                                                                          "",
                                                                                                          "            canvas.onMouseClickDo { event' ->",
                                                                                                          "                onMouseClick (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMousePressDo { event' ->",
                                                                                                          "                onMousePress (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMouseReleaseDo { event' ->",
                                                                                                          "                onMouseRelease (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMouseMoveDo { event' ->",
                                                                                                          "                onMouseMove (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMouseDragDo { event' ->",
                                                                                                          "                onMouseDrag (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMouseEnterDo { event' ->",
                                                                                                          "                onMouseEnter (event'.at)",
                                                                                                          "            }",
                                                                                                          "",
                                                                                                          "            canvas.onMouseExitDo { event' ->",
                                                                                                          "                onMouseExit (event'.at)",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"graphic application of {canvas}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class drawableAt (location':Point) on (canvas':DrawingCanvas) -> Graphic {",
                                                                                                          "        // abstract superclass for drawable objects (of type Graphic)",
                                                                                                          "",
                                                                                                          "        // location of object on screen",
                                                                                                          "        var location: Point is readable:= location'",
                                                                                                          "",
                                                                                                          "        // x coordinate of object",
                                                                                                          "        method x -> Number {",
                                                                                                          "            location.x",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // y coordinate of object",
                                                                                                          "        method y -> Number {",
                                                                                                          "            location.y",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method == (other) {",
                                                                                                          "            // Object identity.",
                                                                                                          "            // This doesn't seem right to apb, but it's what the rest of the code assumes.",
                                                                                                          "            self.isMe(other)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // The canvas this object is part of",
                                                                                                          "        var canvas: DrawingCanvas := canvas'",
                                                                                                          "",
                                                                                                          "        // the color of this object",
                                                                                                          "        var theColor: Color:= black",
                                                                                                          "",
                                                                                                          "        method color -> Color {theColor}",
                                                                                                          "",
                                                                                                          "        method color:= (newColor: Color) -> Done {",
                                                                                                          "            theColor:= newColor",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        var theFrameColor: Color := black",
                                                                                                          "",
                                                                                                          "        method frameColor -> Color { theFrameColor }",
                                                                                                          "        method frameColor := (newfColor:Color) -> Done {",
                                                                                                          "            theFrameColor:= newfColor",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Determine if object is shown on screen",
                                                                                                          "        var isVisible: Boolean is readable := true",
                                                                                                          "",
                                                                                                          "        // Set whether object is visible or hidden",
                                                                                                          "        method visible := (b:Boolean) -> Done {",
                                                                                                          "            isVisible := b",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Add this object to canvas c",
                                                                                                          "        method addToCanvas (c: DrawingCanvas) -> Done {",
                                                                                                          "            removeFromCanvas",
                                                                                                          "            canvas := c",
                                                                                                          "            c.add (self)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Remove this object from its canvas",
                                                                                                          "        method removeFromCanvas -> Done {",
                                                                                                          "            canvas.remove (self)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // move this object to newLocn",
                                                                                                          "        method moveTo (newLocn: Point) -> Done{",
                                                                                                          "            location := newLocn",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // move this object dx to the right and dy down",
                                                                                                          "        method moveBy (dx: Number, dy: Number) -> Done {",
                                                                                                          "            location := location + (dx @ dy)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Determine whether this object contains the point at locn",
                                                                                                          "        method contains (locn: Point) -> Boolean {",
                                                                                                          "            SubobjectResponsibility.raise \"contains not implemented for {self}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Determine whether this object overlaps otherObject",
                                                                                                          "        method overlaps (otherObject: Graphic2D) -> Boolean {",
                                                                                                          "            SubobjectResponsibility.raise \"overlaps not implemented for {self}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Send this object up one layer on the screen",
                                                                                                          "        method sendForward -> Done {",
                                                                                                          "            canvas.sendForward (self)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send this object down one layer on the screen",
                                                                                                          "        method sendBackward -> Done {",
                                                                                                          "            canvas.sendBackward (self)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send this object to the top layer on the screen",
                                                                                                          "        method sendToFront -> Done {",
                                                                                                          "            canvas.sendToFront (self)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // send this object to the bottom layer on the screen",
                                                                                                          "        method sendToBack -> Done {",
                                                                                                          "            canvas.sendToBack (self)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Tell the canvas that the screen needs to be repainted",
                                                                                                          "        method notifyRedraw -> Done is confidential {",
                                                                                                          "            canvas.notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Draw this object on the applet !! confidential",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            SubobjectResponsibility.raise \"draw not implemented for {self}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return a string representation of the object",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Graphic object\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class drawable2DAt (location': Point)",
                                                                                                          "          size (dimension': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // abstract class for two-dimensional objects",
                                                                                                          "",
                                                                                                          "        inherit drawableAt (location') on (canvas')",
                                                                                                          "        var theWidth: Number:= dimension'.x",
                                                                                                          "",
                                                                                                          "        // Width of the object",
                                                                                                          "        method width -> Number {theWidth}",
                                                                                                          "        var theHeight: Number:= dimension'.y",
                                                                                                          "",
                                                                                                          "        // Height of the object",
                                                                                                          "        method height -> Number {theHeight}",
                                                                                                          "        ",
                                                                                                          "        method size -> Point {theWidth @ theHeight}",
                                                                                                          "",
                                                                                                          "        // whether the object contains locn",
                                                                                                          "        // Only checks whether is in the bounding box of the object!!",
                                                                                                          "        method contains(locn:Point)->Boolean{",
                                                                                                          "            (x <= locn.x) && (locn.x <= (x + width))",
                                                                                                          "                  && (y <= locn.y) && (locn.y <= (y + height))",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Whether bounding box of object overlaps bounding box of other",
                                                                                                          "        method overlaps (other:Graphic2D) -> Boolean {",
                                                                                                          "            def itemleft = other.x",
                                                                                                          "            def itemright = other.x + other.width",
                                                                                                          "            def itemtop = other.y",
                                                                                                          "            def itembottom = other.y + other.height",
                                                                                                          "            def disjoint: Boolean = ((x + width) < itemleft) || (itemright < x)",
                                                                                                          "                  || ((y + height) < itemtop) || (itembottom < y)",
                                                                                                          "            !disjoint",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of the object",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"drawable2D object at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class resizable2DAt (location': Point) size (dimensions': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // abstract class for 2 dimensional objects that can be resized.",
                                                                                                          "",
                                                                                                          "        inherit drawable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "",
                                                                                                          "        // Reset width of object to w",
                                                                                                          "        method width:= (w: Number) -> Done {",
                                                                                                          "            theWidth := w",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset height of object to h",
                                                                                                          "        method height := (h: Number) -> Done {",
                                                                                                          "            theHeight := h",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset size of object to w x h",
                                                                                                          "        method size:= (dimensions: Point) -> Done {",
                                                                                                          "            width := dimensions.x",
                                                                                                          "            height := dimensions.y",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of object",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Resizable2D object at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class framedRectAt (location': Point) size (dimensions': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // class to generate framed rectangle at (x',y') with size dimensions'",
                                                                                                          "        // created on canvas'",
                                                                                                          "",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // Draw the framed rectangle on the canvas",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.strokeStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.strokeRect (x, y, width, height)",
                                                                                                          "            ctx.restore",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return description of framed rectangle",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FramedRect at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class filledRectAt (location': Point) size (dimensions': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "          ",
                                                                                                          "        // class to generate filled rectangle at (x', y') with size width' x height'",
                                                                                                          "        // created on canvas'",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // Draw filled rectangle on the canvas",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.fillStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.fillRect (x, y, width, height)",
                                                                                                          "            ctx.restore",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of the filled rectangle",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FilledRect at ({x}, {y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class framedOvalAt (location': Point) size (dimensions': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // class to generate framed oval at (x',y') with size width' x height'",
                                                                                                          "        // created on canvas'",
                                                                                                          "",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // draw framed oval on canvas",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.beginPath",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.translate (x + width / 2, y + height / 2)",
                                                                                                          "            ctx.scale (width / 2, height / 2)",
                                                                                                          "            ctx.arc (0, 0, 1, 0, 2 * pi)",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.strokeStyle := \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.stroke",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.closePath",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // string representation of oval",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FramedOval at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class filledOvalAt (location': Point) size (dimensions': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // class to generate filled oval at (x',y') with size width' x height'",
                                                                                                          "        // created on canvas'",
                                                                                                          "",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // Draw filled oval on canvas",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.beginPath",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.translate (x + width / 2, y + height / 2)",
                                                                                                          "            ctx.scale (width / 2, height / 2)",
                                                                                                          "            ctx.arc (0, 0, 1, 0, 2*pi)",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.fillStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.fill",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.closePath",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // string representation of oval",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FilledOval at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class framedArcAt (location': Point) size (dimensions': Point)",
                                                                                                          "          from (startAngle: Number) to (endAngle: Number)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // class to generate framed arc at (x',y') with size width' x height'",
                                                                                                          "        // from startAngle radians to endAngle radians created on canvas'",
                                                                                                          "        // Note that angle 0 is in direction of positive x axis and increases in",
                                                                                                          "        // angles go clockwise.",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // Draw framed arc",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.beginPath",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.translate (x + width / 2, y + height / 2)",
                                                                                                          "            ctx.scale (width / 2, height / 2)",
                                                                                                          "            if (startAngle <= endAngle) then {",
                                                                                                          "                ctx.arc (0, 0, 1, (startAngle * pi) / 180, (endAngle * pi) / 180)",
                                                                                                          "            } else {",
                                                                                                          "                ctx.arc (0, 0, 1, (endAngle * pi) / 180, (startAngle * pi) / 180)",
                                                                                                          "            }",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.strokeStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.stroke",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.closePath",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // String representation of framed arc",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FramedArc at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color} going \"++",
                                                                                                          "                  \"from {startAngle} degrees to {endAngle} degrees\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class filledArcAt (location': Point) size (dimensions': Point)",
                                                                                                          "          from (startAngle: Number) to (endAngle: Number)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // class to generate filled arc at (x',y') with size width' x height'",
                                                                                                          "        // from startAngle degrees to endAngle degrees created on canvas'",
                                                                                                          "        // Note that angle 0 is in direction of positive x axis and increases in",
                                                                                                          "        // angles go clockwise.",
                                                                                                          "",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        // Draw filled arc on canvas",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            ctx.beginPath",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.translate (x + width / 2, y + height / 2)",
                                                                                                          "            ctx.scale (width / 2, height / 2)",
                                                                                                          "            if (startAngle <= endAngle) then {",
                                                                                                          "                ctx.arc (0, 0, 1, (startAngle * pi) / 180, (endAngle * pi) / 180)",
                                                                                                          "            } else {",
                                                                                                          "                ctx.arc (0, 0, 1, (endAngle * pi) / 180, (startAngle * pi) / 180)",
                                                                                                          "            }",
                                                                                                          "            ctx.restore",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.fillStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.fill",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.closePath",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // String representation of filled arc",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"FilledArc at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, and color {color} going \"++",
                                                                                                          "                  \"from {startAngle} degrees to {endAngle} degrees\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "//type DrawableImageFactory = {",
                                                                                                          "    // type of factory for creating images on canvas",
                                                                                                          "",
                                                                                                          "    //at(location: Point) size (width: Number, height: Number)",
                                                                                                          "          //file(fileName: String) on (canvas: DrawingCanvas) -> Graphic2D",
                                                                                                          "",
                                                                                                          "  //  at (location: Point) dimensions (width: Number, height: Number)",
                                                                                                          "    //      url (url: String) on (canvas: DrawingCanvas) -> Graphic2D",
                                                                                                          "//}",
                                                                                                          "",
                                                                                                          "//def drawableImage: DrawableImageFactory is public = object {",
                                                                                                          "",
                                                                                                          "//  class at(location': Point)   // doesn't work - can't find image?",
                                                                                                          "//      dimensions(width': Number, height': Number)",
                                                                                                          "//      file(fileName: String)",
                                                                                                          "//      on(canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "//    // class to generate an image on canvas' at location' with size width' x height'",
                                                                                                          "//    // The image is taken from the file fileName and must be in \"png\" format.",
                                                                                                          "//",
                                                                                                          "//    inherit resizable2D.at(location')dimensions(width',height')on(canvas')",
                                                                                                          "//",
                                                                                                          "//    if (!dom.window.graceHasFile(fileName)) then {",
                                                                                                          "//      NoSuchFile.raise \"The file '{fileName}' could not be found\"",
                                                                                                          "//    }",
                                                                                                          "//",
                                                                                                          "//    def theImage = dom.document.createElement(\"img\")",
                                                                                                          "//    theImage.src:= dom.window.graceReadFile(fileName)",
                                                                                                          "//",
                                                                                                          "//    method draw(ctx: Foreign) -> Done {",
                                                                                                          "//      ctx.drawImage(theImage, x, y, width, height)",
                                                                                                          "//    }",
                                                                                                          "//",
                                                                                                          "//    method asString -> String {",
                                                                                                          "//      \"DrawableImage at ({x},{y}) \"++",
                                                                                                          "//           \"with height {height}, width {width}, \"++",
                                                                                                          "//           \"from file {fileName}\"",
                                                                                                          "//    }",
                                                                                                          "//",
                                                                                                          "//    addToCanvas(canvas')",
                                                                                                          "//  }",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class drawableImageAt (location': Point)",
                                                                                                          "          size (dimensions': Point)",
                                                                                                          "          url (url: String)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Graphic2D {",
                                                                                                          "        // Creates image from url and places on",
                                                                                                          "        // canvas' at location' with size width' x height'",
                                                                                                          "",
                                                                                                          "        inherit resizable2DAt (location') size (dimensions') on (canvas')",
                                                                                                          "",
                                                                                                          "        var theImage:= document.createElement(\"img\")",
                                                                                                          "        theImage.src:= url",
                                                                                                          "",
                                                                                                          "        theImage.addEventListener(\"load\", { _ ->",
                                                                                                          "            addToCanvas(canvas')",
                                                                                                          "        })",
                                                                                                          "",
                                                                                                          "        // draw the image",
                                                                                                          "        method draw(ctx: Foreign) -> Done {",
                                                                                                          "            ctx.drawImage(theImage, x, y, width, height)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of image",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"DrawableImage at ({x},{y}) \"++",
                                                                                                          "                  \"with height {height}, width {width}, \"++",
                                                                                                          "                  \"from url {url}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "// Type of factory for creating line segments",
                                                                                                          "//type LineFactory = {",
                                                                                                          "//",
                                                                                                          "//    from (start:Point) to (end:Point) on (canvas: DrawingCanvas) -> Line",
                                                                                                          "//    // Creates a line from start to end on canvas",
                                                                                                          "//",
                                                                                                          "//    from (pt:Point) length (len:Number) direction (radians:Number)",
                                                                                                          "//          on (canvas:DrawingCanvas) -> Line",
                                                                                                          "//    // Creates a line from pt, of length len, in direction radians, on canvas",
                                                                                                          "//}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class lineFrom (start': Point) to (end': Point)",
                                                                                                          "          on (canvas': DrawingCanvas) -> Line {",
                                                                                                          "        // Create a line from start' to end' on canvas'",
                                                                                                          "        inherit drawableAt (start') on (canvas')",
                                                                                                          "",
                                                                                                          "        var theEnd: Point:= end'",
                                                                                                          "",
                                                                                                          "        method start -> Point {",
                                                                                                          "            // position of start of line",
                                                                                                          "",
                                                                                                          "            location",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method end -> Point {",
                                                                                                          "            // position of end of line",
                                                                                                          "",
                                                                                                          "            theEnd",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        addToCanvas (canvas')",
                                                                                                          "",
                                                                                                          "        method start := (newStart: Point) -> Done {",
                                                                                                          "            // set start of line",
                                                                                                          "",
                                                                                                          "            location := newStart",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method end := (newEnd: Point) -> Done {",
                                                                                                          "            // Set end of line",
                                                                                                          "",
                                                                                                          "            theEnd := newEnd",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method setEndPoints (newStart: Point,newEnd: Point) -> Done {",
                                                                                                          "            // Set start and end of line",
                                                                                                          "",
                                                                                                          "            start := newStart",
                                                                                                          "            end := newEnd",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "        method draw (ctx: Foreign) -> Done {",
                                                                                                          "            // Draw the line on the canvas",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.strokeStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.beginPath",
                                                                                                          "            ctx.moveTo (location.x, location.y)",
                                                                                                          "            ctx.lineTo (theEnd.x, theEnd.y)",
                                                                                                          "            ctx.stroke",
                                                                                                          "            ctx.restore",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method moveBy (dx: Number, dy: Number) -> Done {",
                                                                                                          "            // Moves the line by (dx, dy)",
                                                                                                          "",
                                                                                                          "            location := location + (dx @ dy)  //.translate(dx,dy)",
                                                                                                          "            theEnd:= theEnd + (dx @ dy) //.translate(dx,dy)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method moveTo (newLocn:Point) -> Done {",
                                                                                                          "            // Moves this object to newLocn",
                                                                                                          "",
                                                                                                          "            def dx: Number = (newLocn - location).x",
                                                                                                          "            def dy: Number = (newLocn - location).y",
                                                                                                          "            location := newLocn",
                                                                                                          "            theEnd := theEnd + (dx @ dy)",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "        method dist2 (v: Point, w: Point) -> Number is confidential {",
                                                                                                          "            // answers the square of the distance between v and w",
                                                                                                          "            ((v.x - w.x) ^ 2) + ((v.y - w.y) ^ 2)",
                                                                                                          "",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method distToSegmentSquared (p: Point, v: Point, w: Point) -> Number",
                                                                                                          "              is confidential {",
                                                                                                          "            // returns the square of the distance between p and the line through v and w",
                                                                                                          "",
                                                                                                          "            var l2: Number:= dist2 (v, w)",
                                                                                                          "            if (l2 == 0) then {return dist2 (p, v)}",
                                                                                                          "            var t: Number:= ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2",
                                                                                                          "            if (t < 0) then {return dist2 (p, v)}",
                                                                                                          "            if (t > 1) then {return dist2 (p, w)}",
                                                                                                          "            dist2 (p, ( (v.x + t * (w.x - v.x)) @",
                                                                                                          "                  (v.y + t * (w.y - v.y) )))",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method distToSegment (p: Point, v: Point, w: Point) -> Number {",
                                                                                                          "            // Return the distance from p to the line through v and w",
                                                                                                          "            math.sqrt (distToSegmentSquared (p, v, w))",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method contains(pt:Point) -> Boolean {",
                                                                                                          "            // Answers whether the line contains pt.  Returns true if pt is within",
                                                                                                          "            // 2 pixels of the line",
                                                                                                          "",
                                                                                                          "            def tolerance: Number = 2",
                                                                                                          "            distToSegment(pt,start,end) < tolerance",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            // Answers a string representation of this line",
                                                                                                          "            \"Line from {start} to {end} with color {color}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class lineFrom (pt: Point) length (len: Number) direction (radians: Number)",
                                                                                                          "          on (canvas':DrawingCanvas) -> Line {",
                                                                                                          "        // Creates a line from pt that has length len, and in direction radians on canvas'",
                                                                                                          "",
                                                                                                          "      //  def endpt = pt + ((len * math.cos (radians)) @ (-len * math.sin (radians)))",
                                                                                                          "        inherit lineFrom (pt) to (pt + ((len * math.cos (radians)) @ ",
                                                                                                          "                                        (-len * math.sin (radians)))) on (canvas')",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class textAt (location': Point) with (contents': String)",
                                                                                                          "          on(canvas': DrawingCanvas) -> Text {",
                                                                                                          "        // class to generate text at location' on canvas' initially showing",
                                                                                                          "        // contents'",
                                                                                                          "        inherit drawableAt (location') on (canvas')",
                                                                                                          "",
                                                                                                          "        var theContents: String:= contents'",
                                                                                                          "        var fsize: Number is readable:= 10",
                                                                                                          "        var wid: Number := theContents.size * fsize / 2",
                                                                                                          "        // Return approximation of the width of the text",
                                                                                                          "        method width -> Number {",
                                                                                                          "            wid",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Draw the text",
                                                                                                          "        method draw(ctx: Foreign) -> Done {",
                                                                                                          "            ctx.save",
                                                                                                          "            ctx.font:= \"{fontSize}pt sans-serif\"",
                                                                                                          "            ctx.fillStyle:= \"rgb({color.red}, {color.green}, {color.blue})\"",
                                                                                                          "            ctx.fillText (contents, location.x, location.y)",
                                                                                                          "            wid := ctx.measureText(theContents).width",
                                                                                                          "            ctx.restore",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return the string held in the text item (i.e., its contents)",
                                                                                                          "        method contents -> String {",
                                                                                                          "            theContents",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset the contents to newContents",
                                                                                                          "        method contents := (newContents: String) -> Done {",
                                                                                                          "            theContents := newContents",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset the font size to size'",
                                                                                                          "        method fontSize := (size': Number) -> Done {",
                                                                                                          "            fsize := size'",
                                                                                                          "            notifyRedraw",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return the size of the font",
                                                                                                          "        method fontSize -> Number {",
                                                                                                          "            fsize",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of the text item",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"Text at ({x},{y}) with value {contents} and color {color}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        addToCanvas(canvas')",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class textBoxWith (contents': String) -> TextBox {",
                                                                                                          "        // Create a component in window that holds the string contents'",
                                                                                                          "        // It cannot respond to user actions",
                                                                                                          "",
                                                                                                          "        inherit componentOfElementType (\"span\")",
                                                                                                          "",
                                                                                                          "        // Return string contents of the text box",
                                                                                                          "        method contents -> String {",
                                                                                                          "            self.element.textContent",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset the contents of the text box",
                                                                                                          "        method contents:= (value: String) -> Done {",
                                                                                                          "            self.element.textContent:= value",
                                                                                                          "            done",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Text representation of the text box",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"a text box showing {contents}\"",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        contents:= contents'",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class buttonLabeled (label': String) -> Button {",
                                                                                                          "        // Creates a button with label'",
                                                                                                          "        inherit labeledWidgetOfElementType (\"button\") labeled (label')",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"a button labeled: {self.label}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "//type FieldFactory = {",
                                                                                                          "//    // Type of object that generates text fields",
                                                                                                          "//    // Text fields can respond to user actions",
                                                                                                          "//",
                                                                                                          "//    labeled (label: String) -> Input",
                                                                                                          "//    // Generates text field with initial contents given by label",
                                                                                                          "//",
                                                                                                          "//    unlabeled -> Input",
                                                                                                          "//    // Generates text field with no initial contents",
                                                                                                          "//}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class textFieldLabeled (label':String) -> TextField {",
                                                                                                          "        // Generates a text field with label'",
                                                                                                          "",
                                                                                                          "        inherit fieldOfType (\"text\") labeled (label')",
                                                                                                          "",
                                                                                                          "        method text -> String {",
                                                                                                          "            // answer the text",
                                                                                                          "            self.element.value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        method text:= (value: String) -> Done {",
                                                                                                          "            // Updates the text",
                                                                                                          "            self.element.value:= value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of the text field",
                                                                                                          "        method asString -> String {",
                                                                                                          "            if (self.label == \"\") then {",
                                                                                                          "                \"a text field with {text}\"",
                                                                                                          "            } else {",
                                                                                                          "                \"a text field labeled: {self.label} with {text}\"",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class textFieldUnlabeled -> TextField {",
                                                                                                          "        // Generates a text field without initial contents",
                                                                                                          "",
                                                                                                          "        inherit textFieldLabeled \"\"",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class passwordFieldLabeled (lab: String) -> Input {",
                                                                                                          "        // Generates password field with initial contents lab",
                                                                                                          "",
                                                                                                          "        inherit textFieldLabeled (lab)",
                                                                                                          "",
                                                                                                          "        self.element.setAttribute (\"type\", \"password\")",
                                                                                                          "",
                                                                                                          "        method asString -> String {",
                                                                                                          "            // Return string representation of password field",
                                                                                                          "            if (self.label == \"\") then {",
                                                                                                          "                \"a password field\"",
                                                                                                          "            } else {",
                                                                                                          "                \"a password field labeled: {self.label}\"",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "    // Generate an unlabeled password field",
                                                                                                          "class passwordFieldUnlabeled -> TextField {",
                                                                                                          "        inherit passwordFieldLabeled \"\"",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class numberFieldLabeled (label': String) -> NumberField {",
                                                                                                          "        // Generates a number field with initial contents label'",
                                                                                                          "",
                                                                                                          "        inherit fieldOfType(\"number\") labeled (label')",
                                                                                                          "",
                                                                                                          "        // Return the number in the field",
                                                                                                          "        method number -> Number {",
                                                                                                          "            self.element.value.asNumber",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // update the number in the field",
                                                                                                          "        method number:= (value: Number) -> Done {",
                                                                                                          "            self.element.value:= value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return description of the number field",
                                                                                                          "        method asString -> String {",
                                                                                                          "            if (self.label == \"\") then {",
                                                                                                          "                \"a number field holding {number}\"",
                                                                                                          "            } else {",
                                                                                                          "                \"a number field labeled: {self.label} holding {number}\"",
                                                                                                          "            }",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class numberFieldUnlabeled -> NumberField {",
                                                                                                          "        // Creates an unlabeled number field",
                                                                                                          "        inherit numberFieldLabeled \"\"",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "//type ChoiceFactory = {",
                                                                                                          "//    // Type of factory to generate choice boxes (pop-up menus)",
                                                                                                          "//    ",
                                                                                                          "//    optionsFrom (options: Iterable<String>) -> Choice",
                                                                                                          "//    // Creates choice box with items from options;",
                                                                                                          "//    // initially shows first item in options",
                                                                                                          "//}",
                                                                                                          "",
                                                                                                          "class selectBoxOptionsFrom(options:Sequence<String>) labeled (label':String)",
                                                                                                          "          -> Choice is confidential {",
                                                                                                          "        // Creates choice box with list of items from options; initially shows label'",
                                                                                                          "",
                                                                                                          "        inherit labeledWidgetOfElementType(\"select\") labeled(label')",
                                                                                                          "",
                                                                                                          "        def labeler:Foreign = document.createElement(\"option\")",
                                                                                                          "        labeler.value:= \"\"",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "        method labelElement -> Foreign {",
                                                                                                          "                labeler",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        self.element.appendChild(labeler)",
                                                                                                          "",
                                                                                                          "        for (options) do { name: String ->",
                                                                                                          "                def anOption: Foreign = document.createElement(\"option\")",
                                                                                                          "                anOption.value:= name",
                                                                                                          "                anOption.textContent:= name",
                                                                                                          "                self.element.appendChild(anOption)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return selected item in menu",
                                                                                                          "        method selected -> String {",
                                                                                                          "                self.element.value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Sets selected item in menu to value",
                                                                                                          "        method selected:= (value: String) -> Done {",
                                                                                                          "                self.element.value:= value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Return string representation of select box",
                                                                                                          "        method asString -> String {",
                                                                                                          "                if (self.label == \"\") then {",
                                                                                                          "                    \"a select box\"",
                                                                                                          "                } else {",
                                                                                                          "                    \"a select box labeled: {self.label}\"",
                                                                                                          "                }",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "class selectBoxOptionsFrom (options: Sequence<String>) -> Choice {",
                                                                                                          "        // Creates choice box with list of items from options",
                                                                                                          "        // Initially shows first item in options",
                                                                                                          "        inherit selectBoxOptionsFrom (options) labeled \"\"",
                                                                                                          "        self.element.removeChild (self.labelElement)",
                                                                                                          "    ",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "type Audio = {",
                                                                                                          "    // An audio file that can be played",
                                                                                                          "",
                                                                                                          "    source -> String        // The source URL of the audio.",
                                                                                                          "    source:= (value: String) -> Done",
                                                                                                          "    play -> Done            // Play the audio.",
                                                                                                          "    pause -> Done           // Pause playing the audio.",
                                                                                                          "    isLooping -> Boolean    // does the audio loop back to the start?",
                                                                                                          "    looping:= (value: Boolean) -> Done  // determine whether the audio will loop",
                                                                                                          "    isEnded -> Boolean      // whether the audio has finished",
                                                                                                          "}",
                                                                                                          "",
                                                                                                          "",
                                                                                                          "class audioUrl(source': String) -> Audio {",
                                                                                                          "        // Creates an audio file from source', which is a web URL",
                                                                                                          "        def element = document.createElement(\"audio\")",
                                                                                                          "",
                                                                                                          "        element.src:= source'",
                                                                                                          "",
                                                                                                          "        if (dom.doesObject(dom.window) haveProperty(\"graceRegisterAudio\")) then {",
                                                                                                          "            dom.window.graceRegisterAudio(element)",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // URL of the audio file",
                                                                                                          "        method source -> String {",
                                                                                                          "            element.src",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Reset the source URL of the audio file",
                                                                                                          "        method source:= (value: String) -> Done {",
                                                                                                          "            element.src:= value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Play the audio.",
                                                                                                          "        method play -> Done {",
                                                                                                          "            element.play",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Pause the audio.",
                                                                                                          "        method pause -> Done {",
                                                                                                          "            element.pause",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Whether the audio will loop back to the start when it ends.",
                                                                                                          "        method isLooping -> Boolean {",
                                                                                                          "                  element.loop",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Set whether audio loops back to start when it end",
                                                                                                          "        method looping:= (value: Boolean) -> Done {",
                                                                                                          "            element.loop:= value",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // Whether the audio has finished playing.",
                                                                                                          "        method isEnded -> Boolean {",
                                                                                                          "            element.ended",
                                                                                                          "        }",
                                                                                                          "",
                                                                                                          "        // String representation of audio file",
                                                                                                          "        method asString -> String {",
                                                                                                          "            \"audio from {source}\"",
                                                                                                          "        }",
                                                                                                          "}",
                                                                                                          "" ];
                                                                                                      }
                                                                                                      if (typeof global !== "undefined")
                                                                                                        global.gracecode_stobjectdraw = gracecode_stobjectdraw;
                                                                                                      if (typeof window !== "undefined")
                                                                                                        window.gracecode_stobjectdraw = gracecode_stobjectdraw;
